
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001149c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  08011630  08011630  00012630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011df0  08011df0  00013210  2**0
                  CONTENTS
  4 .ARM          00000008  08011df0  08011df0  00012df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011df8  08011df8  00013210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011df8  08011df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011dfc  08011dfc  00012dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  08011e00  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ec4  20000210  08012010  00013210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010d4  08012010  000140d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d70c  00000000  00000000  00013240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b03  00000000  00000000  0004094c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028c0  00000000  00000000  00046450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fb0  00000000  00000000  00048d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000321c2  00000000  00000000  0004acc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003332d  00000000  00000000  0007ce82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011fe0a  00000000  00000000  000b01af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cffb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c448  00000000  00000000  001cfffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001dc444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011614 	.word	0x08011614

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	08011614 	.word	0x08011614

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000fe4:	b5b0      	push	{r4, r5, r7, lr}
 8000fe6:	b08a      	sub	sp, #40	@ 0x28
 8000fe8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "Headlight";
 8000fea:	4b5c      	ldr	r3, [pc, #368]	@ (800115c <MX_BlueNRG_MS_Init+0x178>)
 8000fec:	613b      	str	r3, [r7, #16]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  hci_init(user_notify, NULL);
 8000fee:	2100      	movs	r1, #0
 8000ff0:	485b      	ldr	r0, [pc, #364]	@ (8001160 <MX_BlueNRG_MS_Init+0x17c>)
 8000ff2:	f00b fc2f 	bl	800c854 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000ff6:	1dba      	adds	r2, r7, #6
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f00b fa9d 	bl	800c53e <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8001004:	f00b fadf 	bl	800c5c6 <hci_reset>
  HAL_Delay(100);
 8001008:	2064      	movs	r0, #100	@ 0x64
 800100a:	f002 ff9d 	bl	8003f48 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
 800100e:	7a3b      	ldrb	r3, [r7, #8]
 8001010:	4619      	mov	r1, r3
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	461a      	mov	r2, r3
 8001016:	4853      	ldr	r0, [pc, #332]	@ (8001164 <MX_BlueNRG_MS_Init+0x180>)
 8001018:	f00c fe52 	bl	800dcc0 <iprintf>
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 800101c:	7a3b      	ldrb	r3, [r7, #8]
 800101e:	2b30      	cmp	r3, #48	@ 0x30
 8001020:	d902      	bls.n	8001028 <MX_BlueNRG_MS_Init+0x44>
    bnrg_expansion_board = IDB05A1;
 8001022:	4b51      	ldr	r3, [pc, #324]	@ (8001168 <MX_BlueNRG_MS_Init+0x184>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8001028:	f107 0209 	add.w	r2, r7, #9
 800102c:	4b4f      	ldr	r3, [pc, #316]	@ (800116c <MX_BlueNRG_MS_Init+0x188>)
 800102e:	2106      	movs	r1, #6
 8001030:	2080      	movs	r0, #128	@ 0x80
 8001032:	f00b f9fe 	bl	800c432 <aci_hal_read_config_data>
 8001036:	4603      	mov	r3, r0
 8001038:	617b      	str	r3, [r7, #20]

  if (ret) {
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d002      	beq.n	8001046 <MX_BlueNRG_MS_Init+0x62>
    PRINTF("Read Static Random address failed.\n");
 8001040:	484b      	ldr	r0, [pc, #300]	@ (8001170 <MX_BlueNRG_MS_Init+0x18c>)
 8001042:	f00c fea5 	bl	800dd90 <puts>
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8001046:	4b49      	ldr	r3, [pc, #292]	@ (800116c <MX_BlueNRG_MS_Init+0x188>)
 8001048:	795b      	ldrb	r3, [r3, #5]
 800104a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800104e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001050:	d004      	beq.n	800105c <MX_BlueNRG_MS_Init+0x78>
    PRINTF("Static Random address not well formed.\n");
 8001052:	4848      	ldr	r0, [pc, #288]	@ (8001174 <MX_BlueNRG_MS_Init+0x190>)
 8001054:	f00c fe9c 	bl	800dd90 <puts>
    while(1);
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <MX_BlueNRG_MS_Init+0x74>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 800105c:	f00a ff15 	bl	800be8a <aci_gatt_init>
 8001060:	4603      	mov	r3, r0
 8001062:	617b      	str	r3, [r7, #20]
  if(ret){
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <MX_BlueNRG_MS_Init+0x8c>
    PRINTF("GATT_Init failed.\n");
 800106a:	4843      	ldr	r0, [pc, #268]	@ (8001178 <MX_BlueNRG_MS_Init+0x194>)
 800106c:	f00c fe90 	bl	800dd90 <puts>
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8001070:	4b3d      	ldr	r3, [pc, #244]	@ (8001168 <MX_BlueNRG_MS_Init+0x184>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d110      	bne.n	800109a <MX_BlueNRG_MS_Init+0xb6>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x09, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8001078:	f107 020e 	add.w	r2, r7, #14
 800107c:	f107 030a 	add.w	r3, r7, #10
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	4613      	mov	r3, r2
 800108a:	2209      	movs	r2, #9
 800108c:	2100      	movs	r1, #0
 800108e:	2001      	movs	r0, #1
 8001090:	f00a fccf 	bl	800ba32 <aci_gap_init_IDB05A1>
 8001094:	4603      	mov	r3, r0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	e00a      	b.n	80010b0 <MX_BlueNRG_MS_Init+0xcc>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800109a:	f107 030a 	add.w	r3, r7, #10
 800109e:	f107 020c 	add.w	r2, r7, #12
 80010a2:	f107 010e 	add.w	r1, r7, #14
 80010a6:	2001      	movs	r0, #1
 80010a8:	f00a fd13 	bl	800bad2 <aci_gap_init_IDB04A1>
 80010ac:	4603      	mov	r3, r0
 80010ae:	617b      	str	r3, [r7, #20]
  }
  if (ret != BLE_STATUS_SUCCESS) {
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d002      	beq.n	80010bc <MX_BlueNRG_MS_Init+0xd8>
    PRINTF("GAP_Init failed.\n");
 80010b6:	4831      	ldr	r0, [pc, #196]	@ (800117c <MX_BlueNRG_MS_Init+0x198>)
 80010b8:	f00c fe6a 	bl	800dd90 <puts>
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 80010bc:	89fc      	ldrh	r4, [r7, #14]
 80010be:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 80010c0:	6938      	ldr	r0, [r7, #16]
 80010c2:	f7ff f8d5 	bl	8000270 <strlen>
 80010c6:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	4613      	mov	r3, r2
 80010d0:	2200      	movs	r2, #0
 80010d2:	4629      	mov	r1, r5
 80010d4:	4620      	mov	r0, r4
 80010d6:	f00b f84f 	bl	800c178 <aci_gatt_update_char_value>
 80010da:	4603      	mov	r3, r0
 80010dc:	617b      	str	r3, [r7, #20]
  if (ret) {
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d004      	beq.n	80010ee <MX_BlueNRG_MS_Init+0x10a>
    PRINTF("aci_gatt_update_char_value failed.\n");
 80010e4:	4826      	ldr	r0, [pc, #152]	@ (8001180 <MX_BlueNRG_MS_Init+0x19c>)
 80010e6:	f00c fe53 	bl	800dd90 <puts>
    while(1);
 80010ea:	bf00      	nop
 80010ec:	e7fd      	b.n	80010ea <MX_BlueNRG_MS_Init+0x106>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80010ee:	2301      	movs	r3, #1
 80010f0:	9303      	str	r3, [sp, #12]
 80010f2:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <MX_BlueNRG_MS_Init+0x1a0>)
 80010f4:	9302      	str	r3, [sp, #8]
 80010f6:	2300      	movs	r3, #0
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	2310      	movs	r3, #16
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2307      	movs	r3, #7
 8001100:	2200      	movs	r2, #0
 8001102:	2100      	movs	r1, #0
 8001104:	2001      	movs	r0, #1
 8001106:	f00a fe18 	bl	800bd3a <aci_gap_set_auth_requirement>
 800110a:	4603      	mov	r3, r0
 800110c:	617b      	str	r3, [r7, #20]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d004      	beq.n	800111e <MX_BlueNRG_MS_Init+0x13a>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
 8001114:	481c      	ldr	r0, [pc, #112]	@ (8001188 <MX_BlueNRG_MS_Init+0x1a4>)
 8001116:	f00c fe3b 	bl	800dd90 <puts>
    while(1);
 800111a:	bf00      	nop
 800111c:	e7fd      	b.n	800111a <MX_BlueNRG_MS_Init+0x136>
  }

  PRINTF("BLE Stack Initialized\n");
 800111e:	481b      	ldr	r0, [pc, #108]	@ (800118c <MX_BlueNRG_MS_Init+0x1a8>)
 8001120:	f00c fe36 	bl	800dd90 <puts>

  ret = Add_HWServW2ST_Service();
 8001124:	f000 f854 	bl	80011d0 <Add_HWServW2ST_Service>
 8001128:	4603      	mov	r3, r0
 800112a:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d103      	bne.n	800113a <MX_BlueNRG_MS_Init+0x156>
    PRINTF("BlueMS HW service added successfully.\n");
 8001132:	4817      	ldr	r0, [pc, #92]	@ (8001190 <MX_BlueNRG_MS_Init+0x1ac>)
 8001134:	f00c fe2c 	bl	800dd90 <puts>
 8001138:	e005      	b.n	8001146 <MX_BlueNRG_MS_Init+0x162>
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 800113a:	6979      	ldr	r1, [r7, #20]
 800113c:	4815      	ldr	r0, [pc, #84]	@ (8001194 <MX_BlueNRG_MS_Init+0x1b0>)
 800113e:	f00c fdbf 	bl	800dcc0 <iprintf>
    while(1);
 8001142:	bf00      	nop
 8001144:	e7fd      	b.n	8001142 <MX_BlueNRG_MS_Init+0x15e>
//     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
//     while(1);
//  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8001146:	2104      	movs	r1, #4
 8001148:	2001      	movs	r0, #1
 800114a:	f00b f9c7 	bl	800c4dc <aci_hal_set_tx_power_level>
 800114e:	4603      	mov	r3, r0
 8001150:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bdb0      	pop	{r4, r5, r7, pc}
 800115a:	bf00      	nop
 800115c:	08011630 	.word	0x08011630
 8001160:	080015cd 	.word	0x080015cd
 8001164:	0801163c 	.word	0x0801163c
 8001168:	2000022c 	.word	0x2000022c
 800116c:	20000230 	.word	0x20000230
 8001170:	08011650 	.word	0x08011650
 8001174:	08011674 	.word	0x08011674
 8001178:	0801169c 	.word	0x0801169c
 800117c:	080116b0 	.word	0x080116b0
 8001180:	080116c4 	.word	0x080116c4
 8001184:	0001e240 	.word	0x0001e240
 8001188:	080116e8 	.word	0x080116e8
 800118c:	08011718 	.word	0x08011718
 8001190:	08011730 	.word	0x08011730
 8001194:	08011758 	.word	0x08011758

08001198 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 800119c:	f000 f804 	bl	80011a8 <User_Process>
  hci_user_evt_proc();
 80011a0:	f00b fcd2 	bl	800cb48 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	if (set_connectable)
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <User_Process+0x20>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d004      	beq.n	80011c0 <User_Process+0x18>
	{
		Set_DeviceConnectable();
 80011b6:	f000 f981 	bl	80014bc <Set_DeviceConnectable>
		set_connectable = FALSE;
 80011ba:	4b03      	ldr	r3, [pc, #12]	@ (80011c8 <User_Process+0x20>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
	}
    if (connected)
 80011c0:	4b02      	ldr	r3, [pc, #8]	@ (80011cc <User_Process+0x24>)
 80011c2:	681b      	ldr	r3, [r3, #0]
    {
//    	printf("connected.\r\n");
//    	HAL_Delay(1000);

    }
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000260 	.word	0x20000260

080011d0 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b08d      	sub	sp, #52	@ 0x34
 80011d4:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  uint8_t buffer[2]; // buffer to write the initial values

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 80011d6:	231b      	movs	r3, #27
 80011d8:	713b      	strb	r3, [r7, #4]
 80011da:	23c5      	movs	r3, #197	@ 0xc5
 80011dc:	717b      	strb	r3, [r7, #5]
 80011de:	23d5      	movs	r3, #213	@ 0xd5
 80011e0:	71bb      	strb	r3, [r7, #6]
 80011e2:	23a5      	movs	r3, #165	@ 0xa5
 80011e4:	71fb      	strb	r3, [r7, #7]
 80011e6:	2302      	movs	r3, #2
 80011e8:	723b      	strb	r3, [r7, #8]
 80011ea:	2300      	movs	r3, #0
 80011ec:	727b      	strb	r3, [r7, #9]
 80011ee:	23b4      	movs	r3, #180	@ 0xb4
 80011f0:	72bb      	strb	r3, [r7, #10]
 80011f2:	239a      	movs	r3, #154	@ 0x9a
 80011f4:	72fb      	strb	r3, [r7, #11]
 80011f6:	23e1      	movs	r3, #225	@ 0xe1
 80011f8:	733b      	strb	r3, [r7, #12]
 80011fa:	2311      	movs	r3, #17
 80011fc:	737b      	strb	r3, [r7, #13]
 80011fe:	2301      	movs	r3, #1
 8001200:	73bb      	strb	r3, [r7, #14]
 8001202:	2300      	movs	r3, #0
 8001204:	73fb      	strb	r3, [r7, #15]
 8001206:	2300      	movs	r3, #0
 8001208:	743b      	strb	r3, [r7, #16]
 800120a:	2300      	movs	r3, #0
 800120c:	747b      	strb	r3, [r7, #17]
 800120e:	2300      	movs	r3, #0
 8001210:	74bb      	strb	r3, [r7, #18]
 8001212:	2300      	movs	r3, #0
 8001214:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001216:	4b68      	ldr	r3, [pc, #416]	@ (80013b8 <Add_HWServW2ST_Service+0x1e8>)
 8001218:	461c      	mov	r4, r3
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800121e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8001222:	4b66      	ldr	r3, [pc, #408]	@ (80013bc <Add_HWServW2ST_Service+0x1ec>)
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2310      	movs	r3, #16
 8001228:	2201      	movs	r2, #1
 800122a:	4963      	ldr	r1, [pc, #396]	@ (80013b8 <Add_HWServW2ST_Service+0x1e8>)
 800122c:	2002      	movs	r0, #2
 800122e:	f00a fe4f 	bl	800bed0 <aci_gatt_add_serv>
 8001232:	4603      	mov	r3, r0
 8001234:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8001236:	7dfb      	ldrb	r3, [r7, #23]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 800123c:	2347      	movs	r3, #71	@ 0x47
 800123e:	e0b6      	b.n	80013ae <Add_HWServW2ST_Service+0x1de>

  /* Fill the MinLight BLE Characteristc */
  COPY_MIN_LIGHT_W2ST_CHAR_UUID(uuid);
 8001240:	231b      	movs	r3, #27
 8001242:	713b      	strb	r3, [r7, #4]
 8001244:	23c5      	movs	r3, #197	@ 0xc5
 8001246:	717b      	strb	r3, [r7, #5]
 8001248:	23d5      	movs	r3, #213	@ 0xd5
 800124a:	71bb      	strb	r3, [r7, #6]
 800124c:	23a5      	movs	r3, #165	@ 0xa5
 800124e:	71fb      	strb	r3, [r7, #7]
 8001250:	2302      	movs	r3, #2
 8001252:	723b      	strb	r3, [r7, #8]
 8001254:	2300      	movs	r3, #0
 8001256:	727b      	strb	r3, [r7, #9]
 8001258:	2336      	movs	r3, #54	@ 0x36
 800125a:	72bb      	strb	r3, [r7, #10]
 800125c:	23ac      	movs	r3, #172	@ 0xac
 800125e:	72fb      	strb	r3, [r7, #11]
 8001260:	23e1      	movs	r3, #225	@ 0xe1
 8001262:	733b      	strb	r3, [r7, #12]
 8001264:	2311      	movs	r3, #17
 8001266:	737b      	strb	r3, [r7, #13]
 8001268:	2301      	movs	r3, #1
 800126a:	73bb      	strb	r3, [r7, #14]
 800126c:	2300      	movs	r3, #0
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	2300      	movs	r3, #0
 8001272:	743b      	strb	r3, [r7, #16]
 8001274:	2300      	movs	r3, #0
 8001276:	747b      	strb	r3, [r7, #17]
 8001278:	2300      	movs	r3, #0
 800127a:	74bb      	strb	r3, [r7, #18]
 800127c:	2300      	movs	r3, #0
 800127e:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001280:	4b4f      	ldr	r3, [pc, #316]	@ (80013c0 <Add_HWServW2ST_Service+0x1f0>)
 8001282:	461c      	mov	r4, r3
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 800128c:	4b4b      	ldr	r3, [pc, #300]	@ (80013bc <Add_HWServW2ST_Service+0x1ec>)
 800128e:	8818      	ldrh	r0, [r3, #0]
 8001290:	4b4c      	ldr	r3, [pc, #304]	@ (80013c4 <Add_HWServW2ST_Service+0x1f4>)
 8001292:	9305      	str	r3, [sp, #20]
 8001294:	2300      	movs	r3, #0
 8001296:	9304      	str	r3, [sp, #16]
 8001298:	2310      	movs	r3, #16
 800129a:	9303      	str	r3, [sp, #12]
 800129c:	2306      	movs	r3, #6
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2300      	movs	r3, #0
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	230a      	movs	r3, #10
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2302      	movs	r3, #2
 80012aa:	4a45      	ldr	r2, [pc, #276]	@ (80013c0 <Add_HWServW2ST_Service+0x1f0>)
 80012ac:	2102      	movs	r1, #2
 80012ae:	f00a fe98 	bl	800bfe2 <aci_gatt_add_char>
 80012b2:	4603      	mov	r3, r0
 80012b4:	75fb      	strb	r3, [r7, #23]
                           2,
                           CHAR_PROP_READ|CHAR_PROP_WRITE,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP|GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &MinLightHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <Add_HWServW2ST_Service+0xf0>
    return BLE_STATUS_ERROR;
 80012bc:	2347      	movs	r3, #71	@ 0x47
 80012be:	e076      	b.n	80013ae <Add_HWServW2ST_Service+0x1de>

  // write the initial min value to the min light characteristic
  buffer[0] = MIN_LIGHT / 256;
 80012c0:	4b41      	ldr	r3, [pc, #260]	@ (80013c8 <Add_HWServW2ST_Service+0x1f8>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	703b      	strb	r3, [r7, #0]
  buffer[1] = MIN_LIGHT % 256;
 80012cc:	4b3e      	ldr	r3, [pc, #248]	@ (80013c8 <Add_HWServW2ST_Service+0x1f8>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	707b      	strb	r3, [r7, #1]
  ret = aci_gatt_update_char_value(HWServW2STHandle, MinLightHandle, 0, 2, buffer);
 80012d4:	4b39      	ldr	r3, [pc, #228]	@ (80013bc <Add_HWServW2ST_Service+0x1ec>)
 80012d6:	8818      	ldrh	r0, [r3, #0]
 80012d8:	4b3a      	ldr	r3, [pc, #232]	@ (80013c4 <Add_HWServW2ST_Service+0x1f4>)
 80012da:	8819      	ldrh	r1, [r3, #0]
 80012dc:	463b      	mov	r3, r7
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2302      	movs	r3, #2
 80012e2:	2200      	movs	r2, #0
 80012e4:	f00a ff48 	bl	800c178 <aci_gatt_update_char_value>
 80012e8:	4603      	mov	r3, r0
 80012ea:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <Add_HWServW2ST_Service+0x126>
    return BLE_STATUS_ERROR;
 80012f2:	2347      	movs	r3, #71	@ 0x47
 80012f4:	e05b      	b.n	80013ae <Add_HWServW2ST_Service+0x1de>

  /* Fill the TargetLight BLE Characteristc */
  COPY_TARGET_LIGHT_W2ST_CHAR_UUID(uuid);
 80012f6:	231b      	movs	r3, #27
 80012f8:	713b      	strb	r3, [r7, #4]
 80012fa:	23c5      	movs	r3, #197	@ 0xc5
 80012fc:	717b      	strb	r3, [r7, #5]
 80012fe:	23d5      	movs	r3, #213	@ 0xd5
 8001300:	71bb      	strb	r3, [r7, #6]
 8001302:	23a5      	movs	r3, #165	@ 0xa5
 8001304:	71fb      	strb	r3, [r7, #7]
 8001306:	2302      	movs	r3, #2
 8001308:	723b      	strb	r3, [r7, #8]
 800130a:	2300      	movs	r3, #0
 800130c:	727b      	strb	r3, [r7, #9]
 800130e:	2336      	movs	r3, #54	@ 0x36
 8001310:	72bb      	strb	r3, [r7, #10]
 8001312:	23ac      	movs	r3, #172	@ 0xac
 8001314:	72fb      	strb	r3, [r7, #11]
 8001316:	23e1      	movs	r3, #225	@ 0xe1
 8001318:	733b      	strb	r3, [r7, #12]
 800131a:	2311      	movs	r3, #17
 800131c:	737b      	strb	r3, [r7, #13]
 800131e:	2301      	movs	r3, #1
 8001320:	73bb      	strb	r3, [r7, #14]
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	2300      	movs	r3, #0
 8001328:	743b      	strb	r3, [r7, #16]
 800132a:	2300      	movs	r3, #0
 800132c:	747b      	strb	r3, [r7, #17]
 800132e:	2300      	movs	r3, #0
 8001330:	74bb      	strb	r3, [r7, #18]
 8001332:	2301      	movs	r3, #1
 8001334:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001336:	4b22      	ldr	r3, [pc, #136]	@ (80013c0 <Add_HWServW2ST_Service+0x1f0>)
 8001338:	461c      	mov	r4, r3
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800133e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001342:	4b1e      	ldr	r3, [pc, #120]	@ (80013bc <Add_HWServW2ST_Service+0x1ec>)
 8001344:	8818      	ldrh	r0, [r3, #0]
 8001346:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <Add_HWServW2ST_Service+0x1fc>)
 8001348:	9305      	str	r3, [sp, #20]
 800134a:	2300      	movs	r3, #0
 800134c:	9304      	str	r3, [sp, #16]
 800134e:	2310      	movs	r3, #16
 8001350:	9303      	str	r3, [sp, #12]
 8001352:	2306      	movs	r3, #6
 8001354:	9302      	str	r3, [sp, #8]
 8001356:	2300      	movs	r3, #0
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	230a      	movs	r3, #10
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2302      	movs	r3, #2
 8001360:	4a17      	ldr	r2, [pc, #92]	@ (80013c0 <Add_HWServW2ST_Service+0x1f0>)
 8001362:	2102      	movs	r1, #2
 8001364:	f00a fe3d 	bl	800bfe2 <aci_gatt_add_char>
 8001368:	4603      	mov	r3, r0
 800136a:	75fb      	strb	r3, [r7, #23]
                           2,
                           CHAR_PROP_READ|CHAR_PROP_WRITE,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP|GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &TargetLightHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <Add_HWServW2ST_Service+0x1a6>
    return BLE_STATUS_ERROR;
 8001372:	2347      	movs	r3, #71	@ 0x47
 8001374:	e01b      	b.n	80013ae <Add_HWServW2ST_Service+0x1de>

  // write the initial value
  buffer[0] = TARGET_LIGHT / 256;
 8001376:	4b16      	ldr	r3, [pc, #88]	@ (80013d0 <Add_HWServW2ST_Service+0x200>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	0a1b      	lsrs	r3, r3, #8
 800137c:	b29b      	uxth	r3, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	703b      	strb	r3, [r7, #0]
  buffer[1] = TARGET_LIGHT % 256;
 8001382:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <Add_HWServW2ST_Service+0x200>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	707b      	strb	r3, [r7, #1]
  ret = aci_gatt_update_char_value(HWServW2STHandle, TargetLightHandle, 0, 2, buffer);
 800138a:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <Add_HWServW2ST_Service+0x1ec>)
 800138c:	8818      	ldrh	r0, [r3, #0]
 800138e:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <Add_HWServW2ST_Service+0x1fc>)
 8001390:	8819      	ldrh	r1, [r3, #0]
 8001392:	463b      	mov	r3, r7
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	2302      	movs	r3, #2
 8001398:	2200      	movs	r2, #0
 800139a:	f00a feed 	bl	800c178 <aci_gatt_update_char_value>
 800139e:	4603      	mov	r3, r0
 80013a0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80013a2:	7dfb      	ldrb	r3, [r7, #23]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <Add_HWServW2ST_Service+0x1dc>
    return BLE_STATUS_ERROR;
 80013a8:	2347      	movs	r3, #71	@ 0x47
 80013aa:	e000      	b.n	80013ae <Add_HWServW2ST_Service+0x1de>

  return BLE_STATUS_SUCCESS;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	371c      	adds	r7, #28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd90      	pop	{r4, r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000023c 	.word	0x2000023c
 80013bc:	20000236 	.word	0x20000236
 80013c0:	2000024c 	.word	0x2000024c
 80013c4:	20000238 	.word	0x20000238
 80013c8:	20000002 	.word	0x20000002
 80013cc:	2000023a 	.word	0x2000023a
 80013d0:	20000004 	.word	0x20000004

080013d4 <Read_Request_CB>:
//fail:
//  return BLE_STATUS_ERROR;
//}

void Read_Request_CB(uint16_t handle)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	80fb      	strh	r3, [r7, #6]
  tBleStatus ret;

  if(handle == MinLightHandle + 1)
 80013de:	88fa      	ldrh	r2, [r7, #6]
 80013e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <Read_Request_CB+0x44>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	429a      	cmp	r2, r3
  else if (handle == TargetLightHandle + 1)
  {

  }

  if(connection_handle !=0)
 80013e8:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <Read_Request_CB+0x48>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00e      	beq.n	800140e <Read_Request_CB+0x3a>
  {
    ret = aci_gatt_allow_read(connection_handle);
 80013f0:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <Read_Request_CB+0x48>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00a ffef 	bl	800c3d8 <aci_gatt_allow_read>
 80013fa:	4603      	mov	r3, r0
 80013fc:	73fb      	strb	r3, [r7, #15]
    if (ret != BLE_STATUS_SUCCESS)
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d004      	beq.n	800140e <Read_Request_CB+0x3a>
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	@ (8001420 <Read_Request_CB+0x4c>)
 800140a:	f00c fc59 	bl	800dcc0 <iprintf>
    }
  }
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000238 	.word	0x20000238
 800141c:	2000025c 	.word	0x2000025c
 8001420:	08011788 	.word	0x08011788

08001424 <Write_Request_CB>:

void Write_Request_CB(uint16_t handle, uint8_t data_length, uint8_t *data)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af02      	add	r7, sp, #8
 800142a:	4603      	mov	r3, r0
 800142c:	603a      	str	r2, [r7, #0]
 800142e:	80fb      	strh	r3, [r7, #6]
 8001430:	460b      	mov	r3, r1
 8001432:	717b      	strb	r3, [r7, #5]
	uint16_t light = 256*data[0] + data[1];
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	b29b      	uxth	r3, r3
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	3201      	adds	r2, #1
 8001440:	7812      	ldrb	r2, [r2, #0]
 8001442:	4413      	add	r3, r2
 8001444:	81fb      	strh	r3, [r7, #14]
	if(handle == MinLightHandle + 1)
 8001446:	88fa      	ldrh	r2, [r7, #6]
 8001448:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <Write_Request_CB+0x7c>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	429a      	cmp	r2, r3
 8001450:	d108      	bne.n	8001464 <Write_Request_CB+0x40>
	{
		PRINTF("Minimum light level changed to %d.\r\n", light);
 8001452:	89fb      	ldrh	r3, [r7, #14]
 8001454:	4619      	mov	r1, r3
 8001456:	4813      	ldr	r0, [pc, #76]	@ (80014a4 <Write_Request_CB+0x80>)
 8001458:	f00c fc32 	bl	800dcc0 <iprintf>
		MIN_LIGHT = light;
 800145c:	4a12      	ldr	r2, [pc, #72]	@ (80014a8 <Write_Request_CB+0x84>)
 800145e:	89fb      	ldrh	r3, [r7, #14]
 8001460:	8013      	strh	r3, [r2, #0]
 8001462:	e00d      	b.n	8001480 <Write_Request_CB+0x5c>
	}
	else if (handle == TargetLightHandle + 1)
 8001464:	88fa      	ldrh	r2, [r7, #6]
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <Write_Request_CB+0x88>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	429a      	cmp	r2, r3
 800146e:	d107      	bne.n	8001480 <Write_Request_CB+0x5c>
	{
		PRINTF("Target light level changed to %d. \r\n", light);
 8001470:	89fb      	ldrh	r3, [r7, #14]
 8001472:	4619      	mov	r1, r3
 8001474:	480e      	ldr	r0, [pc, #56]	@ (80014b0 <Write_Request_CB+0x8c>)
 8001476:	f00c fc23 	bl	800dcc0 <iprintf>
		TARGET_LIGHT = light;
 800147a:	4a0e      	ldr	r2, [pc, #56]	@ (80014b4 <Write_Request_CB+0x90>)
 800147c:	89fb      	ldrh	r3, [r7, #14]
 800147e:	8013      	strh	r3, [r2, #0]
	}
	aci_gatt_write_response(connection_handle, handle, 0x00, 0, data_length, data);
 8001480:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <Write_Request_CB+0x94>)
 8001482:	8818      	ldrh	r0, [r3, #0]
 8001484:	88f9      	ldrh	r1, [r7, #6]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	797b      	ldrb	r3, [r7, #5]
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2300      	movs	r3, #0
 8001490:	2200      	movs	r2, #0
 8001492:	f00a ff01 	bl	800c298 <aci_gatt_write_response>
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000238 	.word	0x20000238
 80014a4:	080117b0 	.word	0x080117b0
 80014a8:	20000002 	.word	0x20000002
 80014ac:	2000023a 	.word	0x2000023a
 80014b0:	080117d8 	.word	0x080117d8
 80014b4:	20000004 	.word	0x20000004
 80014b8:	2000025c 	.word	0x2000025c

080014bc <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b092      	sub	sp, #72	@ 0x48
 80014c0:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 80014c2:	4a3d      	ldr	r2, [pc, #244]	@ (80015b8 <Set_DeviceConnectable+0xfc>)
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80014ca:	c303      	stmia	r3!, {r0, r1}
 80014cc:	801a      	strh	r2, [r3, #0]

  uint8_t manuf_data[26] = {
 80014ce:	2302      	movs	r3, #2
 80014d0:	703b      	strb	r3, [r7, #0]
 80014d2:	230a      	movs	r3, #10
 80014d4:	707b      	strb	r3, [r7, #1]
 80014d6:	2300      	movs	r3, #0
 80014d8:	70bb      	strb	r3, [r7, #2]
 80014da:	2308      	movs	r3, #8
 80014dc:	70fb      	strb	r3, [r7, #3]
 80014de:	2309      	movs	r3, #9
 80014e0:	713b      	strb	r3, [r7, #4]
 80014e2:	2348      	movs	r3, #72	@ 0x48
 80014e4:	717b      	strb	r3, [r7, #5]
 80014e6:	2365      	movs	r3, #101	@ 0x65
 80014e8:	71bb      	strb	r3, [r7, #6]
 80014ea:	2361      	movs	r3, #97	@ 0x61
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	2364      	movs	r3, #100	@ 0x64
 80014f0:	723b      	strb	r3, [r7, #8]
 80014f2:	236c      	movs	r3, #108	@ 0x6c
 80014f4:	727b      	strb	r3, [r7, #9]
 80014f6:	2369      	movs	r3, #105	@ 0x69
 80014f8:	72bb      	strb	r3, [r7, #10]
 80014fa:	2367      	movs	r3, #103	@ 0x67
 80014fc:	72fb      	strb	r3, [r7, #11]
 80014fe:	2368      	movs	r3, #104	@ 0x68
 8001500:	733b      	strb	r3, [r7, #12]
 8001502:	2374      	movs	r3, #116	@ 0x74
 8001504:	737b      	strb	r3, [r7, #13]
 8001506:	230d      	movs	r3, #13
 8001508:	73bb      	strb	r3, [r7, #14]
 800150a:	23ff      	movs	r3, #255	@ 0xff
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	2301      	movs	r3, #1
 8001510:	743b      	strb	r3, [r7, #16]
 8001512:	2380      	movs	r3, #128	@ 0x80
 8001514:	747b      	strb	r3, [r7, #17]
 8001516:	2300      	movs	r3, #0
 8001518:	74bb      	strb	r3, [r7, #18]
 800151a:	23f4      	movs	r3, #244	@ 0xf4
 800151c:	74fb      	strb	r3, [r7, #19]
 800151e:	2300      	movs	r3, #0
 8001520:	753b      	strb	r3, [r7, #20]
 8001522:	2300      	movs	r3, #0
 8001524:	757b      	strb	r3, [r7, #21]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8001526:	4b25      	ldr	r3, [pc, #148]	@ (80015bc <Set_DeviceConnectable+0x100>)
 8001528:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 800152a:	75bb      	strb	r3, [r7, #22]
    bdaddr[4],
 800152c:	4b23      	ldr	r3, [pc, #140]	@ (80015bc <Set_DeviceConnectable+0x100>)
 800152e:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8001530:	75fb      	strb	r3, [r7, #23]
    bdaddr[3],
 8001532:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <Set_DeviceConnectable+0x100>)
 8001534:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8001536:	763b      	strb	r3, [r7, #24]
    bdaddr[2],
 8001538:	4b20      	ldr	r3, [pc, #128]	@ (80015bc <Set_DeviceConnectable+0x100>)
 800153a:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 800153c:	767b      	strb	r3, [r7, #25]
    bdaddr[1],
    bdaddr[0]  /* BLE MAC stop */
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 800153e:	7cbb      	ldrb	r3, [r7, #18]
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	b2db      	uxtb	r3, r3
 8001546:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 8001548:	2100      	movs	r1, #0
 800154a:	2000      	movs	r0, #0
 800154c:	f00b f8a7 	bl	800c69e <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");
 8001550:	481b      	ldr	r0, [pc, #108]	@ (80015c0 <Set_DeviceConnectable+0x104>)
 8001552:	f00c fc1d 	bl	800dd90 <puts>

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8001556:	2300      	movs	r3, #0
 8001558:	9306      	str	r3, [sp, #24]
 800155a:	2300      	movs	r3, #0
 800155c:	9305      	str	r3, [sp, #20]
 800155e:	2300      	movs	r3, #0
 8001560:	9304      	str	r3, [sp, #16]
 8001562:	2300      	movs	r3, #0
 8001564:	9303      	str	r3, [sp, #12]
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	9302      	str	r3, [sp, #8]
 800156c:	230a      	movs	r3, #10
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	2300      	movs	r3, #0
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2301      	movs	r3, #1
 8001576:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 800157a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800157e:	2000      	movs	r0, #0
 8001580:	f00a faf1 	bl	800bb66 <aci_gap_set_discoverable>
 8001584:	4603      	mov	r3, r0
 8001586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 800158a:	463b      	mov	r3, r7
 800158c:	4619      	mov	r1, r3
 800158e:	201a      	movs	r0, #26
 8001590:	f00a fc2a 	bl	800bde8 <aci_gap_update_adv_data>

  if(ret != BLE_STATUS_SUCCESS)
 8001594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001598:	2b00      	cmp	r3, #0
 800159a:	d006      	beq.n	80015aa <Set_DeviceConnectable+0xee>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
 800159c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015a0:	4619      	mov	r1, r3
 80015a2:	4808      	ldr	r0, [pc, #32]	@ (80015c4 <Set_DeviceConnectable+0x108>)
 80015a4:	f00c fb8c 	bl	800dcc0 <iprintf>
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 80015a8:	e002      	b.n	80015b0 <Set_DeviceConnectable+0xf4>
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
 80015aa:	4807      	ldr	r0, [pc, #28]	@ (80015c8 <Set_DeviceConnectable+0x10c>)
 80015ac:	f00c fbf0 	bl	800dd90 <puts>
}
 80015b0:	bf00      	nop
 80015b2:	3728      	adds	r7, #40	@ 0x28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	08011874 	.word	0x08011874
 80015bc:	20000230 	.word	0x20000230
 80015c0:	08011800 	.word	0x08011800
 80015c4:	08011820 	.word	0x08011820
 80015c8:	0801184c 	.word	0x0801184c

080015cc <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	@ 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	3301      	adds	r3, #1
 80015dc:	623b      	str	r3, [r7, #32]

  if(hci_pckt->type != HCI_EVENT_PKT)
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d14c      	bne.n	8001680 <user_notify+0xb4>
    return;

  switch(event_pckt->evt){
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2bff      	cmp	r3, #255	@ 0xff
 80015ec:	d01f      	beq.n	800162e <user_notify+0x62>
 80015ee:	2bff      	cmp	r3, #255	@ 0xff
 80015f0:	dc4b      	bgt.n	800168a <user_notify+0xbe>
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	d002      	beq.n	80015fc <user_notify+0x30>
 80015f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80015f8:	d003      	beq.n	8001602 <user_notify+0x36>
 80015fa:	e046      	b.n	800168a <user_notify+0xbe>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 80015fc:	f000 f848 	bl	8001690 <GAP_DisconnectionComplete_CB>
    }
    break;
 8001600:	e043      	b.n	800168a <user_notify+0xbe>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	3302      	adds	r3, #2
 8001606:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d139      	bne.n	8001684 <user_notify+0xb8>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	3301      	adds	r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1d5a      	adds	r2, r3, #5
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001620:	b29b      	uxth	r3, r3
 8001622:	4619      	mov	r1, r3
 8001624:	4610      	mov	r0, r2
 8001626:	f000 f84b 	bl	80016c0 <GAP_ConnectionComplete_CB>
        }
        break;
 800162a:	bf00      	nop
      }
    }
    break;
 800162c:	e02a      	b.n	8001684 <user_notify+0xb8>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	3302      	adds	r3, #2
 8001632:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode){
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	b29b      	uxth	r3, r3
 800163a:	f640 4213 	movw	r2, #3091	@ 0xc13
 800163e:	4293      	cmp	r3, r2
 8001640:	d00d      	beq.n	800165e <user_notify+0x92>
 8001642:	f640 4214 	movw	r2, #3092	@ 0xc14
 8001646:	4293      	cmp	r3, r2
 8001648:	d11e      	bne.n	8001688 <user_notify+0xbc>

		  case EVT_BLUE_GATT_READ_PERMIT_REQ:
		  {
			  evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3302      	adds	r3, #2
 800164e:	61bb      	str	r3, [r7, #24]
			  Read_Request_CB(pr->attr_handle);
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	885b      	ldrh	r3, [r3, #2]
 8001654:	b29b      	uxth	r3, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff febc 	bl	80013d4 <Read_Request_CB>
			  //PRINTF("read_req");
		  }
		  break;
 800165c:	e00f      	b.n	800167e <user_notify+0xb2>

		  case EVT_BLUE_GATT_WRITE_PERMIT_REQ:
		  {
			  evt_gatt_write_permit_req *pr = (void*)blue_evt->data;
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3302      	adds	r3, #2
 8001662:	617b      	str	r3, [r7, #20]
			  Write_Request_CB(pr->attr_handle, pr->data_length, pr->data);
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	885b      	ldrh	r3, [r3, #2]
 8001668:	b29b      	uxth	r3, r3
 800166a:	4618      	mov	r0, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	791b      	ldrb	r3, [r3, #4]
 8001670:	4619      	mov	r1, r3
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	3305      	adds	r3, #5
 8001676:	461a      	mov	r2, r3
 8001678:	f7ff fed4 	bl	8001424 <Write_Request_CB>
			  //PRINTF("write_req");
		  }
		  break;
 800167c:	bf00      	nop
      }

    }
    break;
 800167e:	e003      	b.n	8001688 <user_notify+0xbc>
    return;
 8001680:	bf00      	nop
 8001682:	e002      	b.n	800168a <user_notify+0xbe>
    break;
 8001684:	bf00      	nop
 8001686:	e000      	b.n	800168a <user_notify+0xbe>
    break;
 8001688:	bf00      	nop
  }
}
 800168a:	3728      	adds	r7, #40	@ 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  connected = FALSE;
 8001694:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <GAP_DisconnectionComplete_CB+0x20>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
 800169a:	4806      	ldr	r0, [pc, #24]	@ (80016b4 <GAP_DisconnectionComplete_CB+0x24>)
 800169c:	f00c fb78 	bl	800dd90 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 80016a0:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <GAP_DisconnectionComplete_CB+0x28>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 80016a6:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <GAP_DisconnectionComplete_CB+0x2c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000260 	.word	0x20000260
 80016b4:	08011880 	.word	0x08011880
 80016b8:	20000000 	.word	0x20000000
 80016bc:	2000025e 	.word	0x2000025e

080016c0 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 80016cc:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <GAP_ConnectionComplete_CB+0x54>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 80016d2:	4a11      	ldr	r2, [pc, #68]	@ (8001718 <GAP_ConnectionComplete_CB+0x58>)
 80016d4:	887b      	ldrh	r3, [r7, #2]
 80016d6:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
 80016d8:	4810      	ldr	r0, [pc, #64]	@ (800171c <GAP_ConnectionComplete_CB+0x5c>)
 80016da:	f00c faf1 	bl	800dcc0 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 80016de:	2305      	movs	r3, #5
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	e00a      	b.n	80016fa <GAP_ConnectionComplete_CB+0x3a>
    PRINTF("%02X-", addr[i]);
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4413      	add	r3, r2
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	480c      	ldr	r0, [pc, #48]	@ (8001720 <GAP_ConnectionComplete_CB+0x60>)
 80016f0:	f00c fae6 	bl	800dcc0 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f1      	bne.n	80016e4 <GAP_ConnectionComplete_CB+0x24>
  }
  PRINTF("%02X\n", addr[0]);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	4807      	ldr	r0, [pc, #28]	@ (8001724 <GAP_ConnectionComplete_CB+0x64>)
 8001708:	f00c fada 	bl	800dcc0 <iprintf>
}
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000260 	.word	0x20000260
 8001718:	2000025c 	.word	0x2000025c
 800171c:	08011890 	.word	0x08011890
 8001720:	080118a8 	.word	0x080118a8
 8001724:	080118b0 	.word	0x080118b0

08001728 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001730:	4b1f      	ldr	r3, [pc, #124]	@ (80017b0 <HCI_TL_SPI_Init+0x88>)
 8001732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001734:	4a1e      	ldr	r2, [pc, #120]	@ (80017b0 <HCI_TL_SPI_Init+0x88>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800173c:	4b1c      	ldr	r3, [pc, #112]	@ (80017b0 <HCI_TL_SPI_Init+0x88>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001748:	2340      	movs	r3, #64	@ 0x40
 800174a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800174c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	4619      	mov	r1, r3
 800175c:	4815      	ldr	r0, [pc, #84]	@ (80017b4 <HCI_TL_SPI_Init+0x8c>)
 800175e:	f004 fac3 	bl	8005ce8 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001762:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	4619      	mov	r1, r3
 800177a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800177e:	f004 fab3 	bl	8005ce8 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001782:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	4619      	mov	r1, r3
 800179a:	4807      	ldr	r0, [pc, #28]	@ (80017b8 <HCI_TL_SPI_Init+0x90>)
 800179c:	f004 faa4 	bl	8005ce8 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 80017a0:	f002 f8aa 	bl	80038f8 <BSP_SPI3_Init>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3720      	adds	r7, #32
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
 80017b4:	48001000 	.word	0x48001000
 80017b8:	48000c00 	.word	0x48000c00

080017bc <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80017c0:	2140      	movs	r1, #64	@ 0x40
 80017c2:	4808      	ldr	r0, [pc, #32]	@ (80017e4 <HCI_TL_SPI_DeInit+0x28>)
 80017c4:	f004 fc3a 	bl	800603c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80017c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017cc:	4806      	ldr	r0, [pc, #24]	@ (80017e8 <HCI_TL_SPI_DeInit+0x2c>)
 80017ce:	f004 fc35 	bl	800603c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80017d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017da:	f004 fc2f 	bl	800603c <HAL_GPIO_DeInit>
  return 0;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	48001000 	.word	0x48001000
 80017e8:	48000c00 	.word	0x48000c00

080017ec <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80017f0:	2201      	movs	r2, #1
 80017f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017f6:	480d      	ldr	r0, [pc, #52]	@ (800182c <HCI_TL_SPI_Reset+0x40>)
 80017f8:	f004 fd2c 	bl	8006254 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80017fc:	2200      	movs	r2, #0
 80017fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001802:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001806:	f004 fd25 	bl	8006254 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800180a:	2005      	movs	r0, #5
 800180c:	f002 fb9c 	bl	8003f48 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001816:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800181a:	f004 fd1b 	bl	8006254 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800181e:	2005      	movs	r0, #5
 8001820:	f002 fb92 	bl	8003f48 <HAL_Delay>
  return 0;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	48000c00 	.word	0x48000c00

08001830 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8001840:	23ff      	movs	r3, #255	@ 0xff
 8001842:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001844:	4a26      	ldr	r2, [pc, #152]	@ (80018e0 <HCI_TL_SPI_Receive+0xb0>)
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800184e:	6018      	str	r0, [r3, #0]
 8001850:	3304      	adds	r3, #4
 8001852:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800185a:	4822      	ldr	r0, [pc, #136]	@ (80018e4 <HCI_TL_SPI_Receive+0xb4>)
 800185c:	f004 fcfa 	bl	8006254 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001860:	f107 010c 	add.w	r1, r7, #12
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2205      	movs	r2, #5
 800186a:	4618      	mov	r0, r3
 800186c:	f002 f874 	bl	8003958 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8001870:	7b3b      	ldrb	r3, [r7, #12]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d129      	bne.n	80018ca <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001876:	7c3b      	ldrb	r3, [r7, #16]
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	b21a      	sxth	r2, r3
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	b21b      	sxth	r3, r3
 8001880:	4313      	orrs	r3, r2
 8001882:	b21b      	sxth	r3, r3
 8001884:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8001886:	8bfb      	ldrh	r3, [r7, #30]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d01e      	beq.n	80018ca <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 800188c:	8bfa      	ldrh	r2, [r7, #30]
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	429a      	cmp	r2, r3
 8001892:	d901      	bls.n	8001898 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8001894:	887b      	ldrh	r3, [r7, #2]
 8001896:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8001898:	2300      	movs	r3, #0
 800189a:	777b      	strb	r3, [r7, #29]
 800189c:	e010      	b.n	80018c0 <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 800189e:	f107 011b 	add.w	r1, r7, #27
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	2201      	movs	r2, #1
 80018a8:	4618      	mov	r0, r3
 80018aa:	f002 f855 	bl	8003958 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 80018ae:	7f7b      	ldrb	r3, [r7, #29]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	4413      	add	r3, r2
 80018b4:	7efa      	ldrb	r2, [r7, #27]
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 80018ba:	7f7b      	ldrb	r3, [r7, #29]
 80018bc:	3301      	adds	r3, #1
 80018be:	777b      	strb	r3, [r7, #29]
 80018c0:	7f7b      	ldrb	r3, [r7, #29]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	8bfa      	ldrh	r2, [r7, #30]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d8e9      	bhi.n	800189e <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018d0:	4804      	ldr	r0, [pc, #16]	@ (80018e4 <HCI_TL_SPI_Receive+0xb4>)
 80018d2:	f004 fcbf 	bl	8006254 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 80018d6:	7f7b      	ldrb	r3, [r7, #29]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3720      	adds	r7, #32
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	080118b8 	.word	0x080118b8
 80018e4:	48000c00 	.word	0x48000c00

080018e8 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80018f4:	4a24      	ldr	r2, [pc, #144]	@ (8001988 <HCI_TL_SPI_Send+0xa0>)
 80018f6:	f107 0310 	add.w	r3, r7, #16
 80018fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018fe:	6018      	str	r0, [r3, #0]
 8001900:	3304      	adds	r3, #4
 8001902:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001904:	f002 fb14 	bl	8003f30 <HAL_GetTick>
 8001908:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001914:	481d      	ldr	r0, [pc, #116]	@ (800198c <HCI_TL_SPI_Send+0xa4>)
 8001916:	f004 fc9d 	bl	8006254 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 800191a:	f107 0108 	add.w	r1, r7, #8
 800191e:	f107 0310 	add.w	r3, r7, #16
 8001922:	2205      	movs	r2, #5
 8001924:	4618      	mov	r0, r3
 8001926:	f002 f817 	bl	8003958 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 800192a:	7a3b      	ldrb	r3, [r7, #8]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d10f      	bne.n	8001950 <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8001930:	7a7b      	ldrb	r3, [r7, #9]
 8001932:	461a      	mov	r2, r3
 8001934:	887b      	ldrh	r3, [r7, #2]
 8001936:	4293      	cmp	r3, r2
 8001938:	d806      	bhi.n	8001948 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 800193a:	887b      	ldrh	r3, [r7, #2]
 800193c:	461a      	mov	r2, r3
 800193e:	4914      	ldr	r1, [pc, #80]	@ (8001990 <HCI_TL_SPI_Send+0xa8>)
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f002 f809 	bl	8003958 <BSP_SPI3_SendRecv>
 8001946:	e006      	b.n	8001956 <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8001948:	f06f 0301 	mvn.w	r3, #1
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	e002      	b.n	8001956 <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001956:	2201      	movs	r2, #1
 8001958:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800195c:	480b      	ldr	r0, [pc, #44]	@ (800198c <HCI_TL_SPI_Send+0xa4>)
 800195e:	f004 fc79 	bl	8006254 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001962:	f002 fae5 	bl	8003f30 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b0f      	cmp	r3, #15
 800196e:	d903      	bls.n	8001978 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8001970:	f06f 0302 	mvn.w	r3, #2
 8001974:	61fb      	str	r3, [r7, #28]
      break;
 8001976:	e002      	b.n	800197e <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	2b00      	cmp	r3, #0
 800197c:	dbc5      	blt.n	800190a <HCI_TL_SPI_Send+0x22>

  return result;
 800197e:	69fb      	ldr	r3, [r7, #28]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3720      	adds	r7, #32
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	080118c0 	.word	0x080118c0
 800198c:	48000c00 	.word	0x48000c00
 8001990:	2000026c 	.word	0x2000026c

08001994 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001998:	2140      	movs	r1, #64	@ 0x40
 800199a:	4805      	ldr	r0, [pc, #20]	@ (80019b0 <IsDataAvailable+0x1c>)
 800199c:	f004 fc42 	bl	8006224 <HAL_GPIO_ReadPin>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	bf0c      	ite	eq
 80019a6:	2301      	moveq	r3, #1
 80019a8:	2300      	movne	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	48001000 	.word	0x48001000

080019b4 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80019ba:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <hci_tl_lowlevel_init+0x50>)
 80019bc:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80019be:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <hci_tl_lowlevel_init+0x54>)
 80019c0:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80019c2:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <hci_tl_lowlevel_init+0x58>)
 80019c4:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80019c6:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <hci_tl_lowlevel_init+0x5c>)
 80019c8:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80019ca:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <hci_tl_lowlevel_init+0x60>)
 80019cc:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80019ce:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <hci_tl_lowlevel_init+0x64>)
 80019d0:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	4618      	mov	r0, r3
 80019d6:	f00a ff7f 	bl	800c8d8 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 80019da:	4910      	ldr	r1, [pc, #64]	@ (8001a1c <hci_tl_lowlevel_init+0x68>)
 80019dc:	4810      	ldr	r0, [pc, #64]	@ (8001a20 <hci_tl_lowlevel_init+0x6c>)
 80019de:	f004 f93f 	bl	8005c60 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80019e2:	4a10      	ldr	r2, [pc, #64]	@ (8001a24 <hci_tl_lowlevel_init+0x70>)
 80019e4:	2100      	movs	r1, #0
 80019e6:	480e      	ldr	r0, [pc, #56]	@ (8001a20 <hci_tl_lowlevel_init+0x6c>)
 80019e8:	f004 f920 	bl	8005c2c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	2017      	movs	r0, #23
 80019f2:	f003 ffd8 	bl	80059a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019f6:	2017      	movs	r0, #23
 80019f8:	f003 fff1 	bl	80059de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80019fc:	bf00      	nop
 80019fe:	3720      	adds	r7, #32
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	08001729 	.word	0x08001729
 8001a08:	080017bd 	.word	0x080017bd
 8001a0c:	080018e9 	.word	0x080018e9
 8001a10:	08001831 	.word	0x08001831
 8001a14:	080017ed 	.word	0x080017ed
 8001a18:	08003999 	.word	0x08003999
 8001a1c:	16000006 	.word	0x16000006
 8001a20:	20000264 	.word	0x20000264
 8001a24:	08001a29 	.word	0x08001a29

08001a28 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001a2c:	e005      	b.n	8001a3a <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f00b f8b6 	bl	800cba0 <hci_notify_asynch_evt>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d105      	bne.n	8001a46 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001a3a:	f7ff ffab 	bl	8001994 <IsDataAvailable>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f4      	bne.n	8001a2e <hci_tl_lowlevel_isr+0x6>
 8001a44:	e000      	b.n	8001a48 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001a46:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a50:	b088      	sub	sp, #32
 8001a52:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a54:	f002 fa04 	bl	8003e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a58:	f000 f87a 	bl	8001b50 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a5c:	f000 f8da 	bl	8001c14 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a60:	f000 fbc8 	bl	80021f4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001a64:	f000 f97a 	bl	8001d5c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001a68:	f000 f9b0 	bl	8001dcc <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001a6c:	f000 f9ee 	bl	8001e4c <MX_QUADSPI_Init>
  MX_USART1_UART_Init();
 8001a70:	f000 fb32 	bl	80020d8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001a74:	f000 fb60 	bl	8002138 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001a78:	f000 fb8e 	bl	8002198 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001a7c:	f000 f8f8 	bl	8001c70 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001a80:	f000 fa0a 	bl	8001e98 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a84:	f000 fa56 	bl	8001f34 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001a88:	f000 fad6 	bl	8002038 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init(); //initialize the accelerometer's BSP.
 8001a8c:	f001 fecc 	bl	8003828 <BSP_ACCELERO_Init>
  MX_BlueNRG_MS_Init();
 8001a90:	f7ff faa8 	bl	8000fe4 <MX_BlueNRG_MS_Init>

  //set the accelerometer to high-performance mode for low noise.
  uint8_t t = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001a94:	2115      	movs	r1, #21
 8001a96:	20d4      	movs	r0, #212	@ 0xd4
 8001a98:	f001 fe8a 	bl	80037b0 <SENSOR_IO_Read>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	73fb      	strb	r3, [r7, #15]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, t ^ 0x10);
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	f083 0310 	eor.w	r3, r3, #16
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	2115      	movs	r1, #21
 8001aac:	20d4      	movs	r0, #212	@ 0xd4
 8001aae:	f001 fe65 	bl	800377c <SENSOR_IO_Write>
  //set ODR to 6.66kHz (highest)
  t = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001ab2:	2110      	movs	r1, #16
 8001ab4:	20d4      	movs	r0, #212	@ 0xd4
 8001ab6:	f001 fe7b 	bl	80037b0 <SENSOR_IO_Read>
 8001aba:	4603      	mov	r3, r0
 8001abc:	73fb      	strb	r3, [r7, #15]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, 15*16+t%16);
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	3b10      	subs	r3, #16
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	2110      	movs	r1, #16
 8001ace:	20d4      	movs	r0, #212	@ 0xd4
 8001ad0:	f001 fe54 	bl	800377c <SENSOR_IO_Write>
  //set LPF to BW=16Hz and low noise mode
  t = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL8_XL);
 8001ad4:	2117      	movs	r1, #23
 8001ad6:	20d4      	movs	r0, #212	@ 0xd4
 8001ad8:	f001 fe6a 	bl	80037b0 <SENSOR_IO_Read>
 8001adc:	4603      	mov	r3, r0
 8001ade:	73fb      	strb	r3, [r7, #15]
  t = t & 0x11; //preserve bit4 and bit0, flush other to 0.
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	f003 0311 	and.w	r3, r3, #17
 8001ae6:	73fb      	strb	r3, [r7, #15]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL8_XL, t+0xE8);
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	3b18      	subs	r3, #24
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	2117      	movs	r1, #23
 8001af2:	20d4      	movs	r0, #212	@ 0xd4
 8001af4:	f001 fe42 	bl	800377c <SENSOR_IO_Write>


  printf("start\r\n");
 8001af8:	4813      	ldr	r0, [pc, #76]	@ (8001b48 <main+0xfc>)
 8001afa:	f00c f949 	bl	800dd90 <puts>

  // Accelerometer test
  BSP_ACCELERO_SetReadMode(ACCELERO_READ_FLOAT);
 8001afe:	2001      	movs	r0, #1
 8001b00:	f001 fee8 	bl	80038d4 <BSP_ACCELERO_SetReadMode>
  float pDataXYZ[3];
  BSP_ACCELERO_AccGetXYZ_Float(pDataXYZ);
 8001b04:	463b      	mov	r3, r7
 8001b06:	4618      	mov	r0, r3
 8001b08:	f001 fecc 	bl	80038a4 <BSP_ACCELERO_AccGetXYZ_Float>
  printf("acceleration test: %f, %f, %f \r\n", pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fd1a 	bl	8000548 <__aeabi_f2d>
 8001b14:	4680      	mov	r8, r0
 8001b16:	4689      	mov	r9, r1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd14 	bl	8000548 <__aeabi_f2d>
 8001b20:	4604      	mov	r4, r0
 8001b22:	460d      	mov	r5, r1
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fd0e 	bl	8000548 <__aeabi_f2d>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b34:	e9cd 4500 	strd	r4, r5, [sp]
 8001b38:	4642      	mov	r2, r8
 8001b3a:	464b      	mov	r3, r9
 8001b3c:	4803      	ldr	r0, [pc, #12]	@ (8001b4c <main+0x100>)
 8001b3e:	f00c f8bf 	bl	800dcc0 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	MX_BlueNRG_MS_Process();
 8001b42:	f7ff fb29 	bl	8001198 <MX_BlueNRG_MS_Process>
 8001b46:	e7fc      	b.n	8001b42 <main+0xf6>
 8001b48:	080118c8 	.word	0x080118c8
 8001b4c:	080118d0 	.word	0x080118d0

08001b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b096      	sub	sp, #88	@ 0x58
 8001b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	2244      	movs	r2, #68	@ 0x44
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f00c fa16 	bl	800df90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b64:	463b      	mov	r3, r7
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b72:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b76:	f005 fb59 	bl	800722c <HAL_PWREx_ControlVoltageScaling>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b80:	f001 f812 	bl	8002ba8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b84:	f005 fb34 	bl	80071f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b88:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <SystemClock_Config+0xc0>)
 8001b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b8e:	4a20      	ldr	r2, [pc, #128]	@ (8001c10 <SystemClock_Config+0xc0>)
 8001b90:	f023 0318 	bic.w	r3, r3, #24
 8001b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001b98:	2314      	movs	r3, #20
 8001b9a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ba8:	2360      	movs	r3, #96	@ 0x60
 8001baa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bac:	2302      	movs	r3, #2
 8001bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001bb8:	2328      	movs	r3, #40	@ 0x28
 8001bba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001bbc:	2307      	movs	r3, #7
 8001bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f005 fc4f 	bl	8007470 <HAL_RCC_OscConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001bd8:	f000 ffe6 	bl	8002ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bdc:	230f      	movs	r3, #15
 8001bde:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001be0:	2303      	movs	r3, #3
 8001be2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	2104      	movs	r1, #4
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f006 f817 	bl	8007c28 <HAL_RCC_ClockConfig>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001c00:	f000 ffd2 	bl	8002ba8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001c04:	f006 fd1e 	bl	8008644 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001c08:	bf00      	nop
 8001c0a:	3758      	adds	r7, #88	@ 0x58
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000

08001c14 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b0a2      	sub	sp, #136	@ 0x88
 8001c18:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c1a:	463b      	mov	r3, r7
 8001c1c:	2288      	movs	r2, #136	@ 0x88
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f00c f9b5 	bl	800df90 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001c26:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001c2a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001c2c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001c30:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001c32:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001c36:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001c40:	2318      	movs	r3, #24
 8001c42:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c44:	2307      	movs	r3, #7
 8001c46:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001c50:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8001c54:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c56:	463b      	mov	r3, r7
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f006 fa09 	bl	8008070 <HAL_RCCEx_PeriphCLKConfig>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001c64:	f000 ffa0 	bl	8002ba8 <Error_Handler>
  }
}
 8001c68:	bf00      	nop
 8001c6a:	3788      	adds	r7, #136	@ 0x88
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	@ 0x28
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
 8001c90:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c92:	4b2f      	ldr	r3, [pc, #188]	@ (8001d50 <MX_ADC1_Init+0xe0>)
 8001c94:	4a2f      	ldr	r2, [pc, #188]	@ (8001d54 <MX_ADC1_Init+0xe4>)
 8001c96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c98:	4b2d      	ldr	r3, [pc, #180]	@ (8001d50 <MX_ADC1_Init+0xe0>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d50 <MX_ADC1_Init+0xe0>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d50 <MX_ADC1_Init+0xe0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001caa:	4b29      	ldr	r3, [pc, #164]	@ (8001d50 <MX_ADC1_Init+0xe0>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cb0:	4b27      	ldr	r3, [pc, #156]	@ (8001d50 <MX_ADC1_Init+0xe0>)
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001cb6:	4b26      	ldr	r3, [pc, #152]	@ (8001d50 <MX_ADC1_Init+0xe0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cbc:	4b24      	ldr	r3, [pc, #144]	@ (8001d50 <MX_ADC1_Init+0xe0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001cc2:	4b23      	ldr	r3, [pc, #140]	@ (8001d50 <MX_ADC1_Init+0xe0>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cc8:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <MX_ADC1_Init+0xe0>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d50 <MX_ADC1_Init+0xe0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d50 <MX_ADC1_Init+0xe0>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d50 <MX_ADC1_Init+0xe0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <MX_ADC1_Init+0xe0>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001cea:	4b19      	ldr	r3, [pc, #100]	@ (8001d50 <MX_ADC1_Init+0xe0>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cf2:	4817      	ldr	r0, [pc, #92]	@ (8001d50 <MX_ADC1_Init+0xe0>)
 8001cf4:	f002 fb42 	bl	800437c <HAL_ADC_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001cfe:	f000 ff53 	bl	8002ba8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001d06:	f107 031c 	add.w	r3, r7, #28
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4810      	ldr	r0, [pc, #64]	@ (8001d50 <MX_ADC1_Init+0xe0>)
 8001d0e:	f003 fcbf 	bl	8005690 <HAL_ADCEx_MultiModeConfigChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001d18:	f000 ff46 	bl	8002ba8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d58 <MX_ADC1_Init+0xe8>)
 8001d1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d20:	2306      	movs	r3, #6
 8001d22:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d28:	237f      	movs	r3, #127	@ 0x7f
 8001d2a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	4619      	mov	r1, r3
 8001d38:	4805      	ldr	r0, [pc, #20]	@ (8001d50 <MX_ADC1_Init+0xe0>)
 8001d3a:	f002 ffd9 	bl	8004cf0 <HAL_ADC_ConfigChannel>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001d44:	f000 ff30 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	@ 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	2000036c 	.word	0x2000036c
 8001d54:	50040000 	.word	0x50040000
 8001d58:	3ac04000 	.word	0x3ac04000

08001d5c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001d60:	4b18      	ldr	r3, [pc, #96]	@ (8001dc4 <MX_DFSDM1_Init+0x68>)
 8001d62:	4a19      	ldr	r2, [pc, #100]	@ (8001dc8 <MX_DFSDM1_Init+0x6c>)
 8001d64:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001d66:	4b17      	ldr	r3, [pc, #92]	@ (8001dc4 <MX_DFSDM1_Init+0x68>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001d6c:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <MX_DFSDM1_Init+0x68>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001d72:	4b14      	ldr	r3, [pc, #80]	@ (8001dc4 <MX_DFSDM1_Init+0x68>)
 8001d74:	2202      	movs	r2, #2
 8001d76:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001d78:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <MX_DFSDM1_Init+0x68>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001d7e:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <MX_DFSDM1_Init+0x68>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001d84:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc4 <MX_DFSDM1_Init+0x68>)
 8001d86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d8a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc4 <MX_DFSDM1_Init+0x68>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001d92:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <MX_DFSDM1_Init+0x68>)
 8001d94:	2204      	movs	r2, #4
 8001d96:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <MX_DFSDM1_Init+0x68>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <MX_DFSDM1_Init+0x68>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001da4:	4b07      	ldr	r3, [pc, #28]	@ (8001dc4 <MX_DFSDM1_Init+0x68>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <MX_DFSDM1_Init+0x68>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001db0:	4804      	ldr	r0, [pc, #16]	@ (8001dc4 <MX_DFSDM1_Init+0x68>)
 8001db2:	f003 fe2f 	bl	8005a14 <HAL_DFSDM_ChannelInit>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001dbc:	f000 fef4 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200003d0 	.word	0x200003d0
 8001dc8:	40016020 	.word	0x40016020

08001dcc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e40 <MX_I2C2_Init+0x74>)
 8001dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e44 <MX_I2C2_Init+0x78>)
 8001dd4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e40 <MX_I2C2_Init+0x74>)
 8001dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e48 <MX_I2C2_Init+0x7c>)
 8001dda:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ddc:	4b18      	ldr	r3, [pc, #96]	@ (8001e40 <MX_I2C2_Init+0x74>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001de2:	4b17      	ldr	r3, [pc, #92]	@ (8001e40 <MX_I2C2_Init+0x74>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de8:	4b15      	ldr	r3, [pc, #84]	@ (8001e40 <MX_I2C2_Init+0x74>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001dee:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <MX_I2C2_Init+0x74>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <MX_I2C2_Init+0x74>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dfa:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <MX_I2C2_Init+0x74>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <MX_I2C2_Init+0x74>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e06:	480e      	ldr	r0, [pc, #56]	@ (8001e40 <MX_I2C2_Init+0x74>)
 8001e08:	f004 fa6e 	bl	80062e8 <HAL_I2C_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001e12:	f000 fec9 	bl	8002ba8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e16:	2100      	movs	r1, #0
 8001e18:	4809      	ldr	r0, [pc, #36]	@ (8001e40 <MX_I2C2_Init+0x74>)
 8001e1a:	f005 f81f 	bl	8006e5c <HAL_I2CEx_ConfigAnalogFilter>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001e24:	f000 fec0 	bl	8002ba8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4805      	ldr	r0, [pc, #20]	@ (8001e40 <MX_I2C2_Init+0x74>)
 8001e2c:	f005 f861 	bl	8006ef2 <HAL_I2CEx_ConfigDigitalFilter>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001e36:	f000 feb7 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000408 	.word	0x20000408
 8001e44:	40005800 	.word	0x40005800
 8001e48:	10d19ce4 	.word	0x10d19ce4

08001e4c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <MX_QUADSPI_Init+0x44>)
 8001e52:	4a10      	ldr	r2, [pc, #64]	@ (8001e94 <MX_QUADSPI_Init+0x48>)
 8001e54:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <MX_QUADSPI_Init+0x44>)
 8001e58:	2202      	movs	r2, #2
 8001e5a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <MX_QUADSPI_Init+0x44>)
 8001e5e:	2204      	movs	r2, #4
 8001e60:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001e62:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <MX_QUADSPI_Init+0x44>)
 8001e64:	2210      	movs	r2, #16
 8001e66:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001e68:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <MX_QUADSPI_Init+0x44>)
 8001e6a:	2217      	movs	r2, #23
 8001e6c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	@ (8001e90 <MX_QUADSPI_Init+0x44>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001e74:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <MX_QUADSPI_Init+0x44>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001e7a:	4805      	ldr	r0, [pc, #20]	@ (8001e90 <MX_QUADSPI_Init+0x44>)
 8001e7c:	f005 fa3c 	bl	80072f8 <HAL_QSPI_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001e86:	f000 fe8f 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2000045c 	.word	0x2000045c
 8001e94:	a0001000 	.word	0xa0001000

08001e98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9e:	f107 0310 	add.w	r3, r7, #16
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f30 <MX_TIM2_Init+0x98>)
 8001eb8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ebc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4999;
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <MX_TIM2_Init+0x98>)
 8001ec0:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001ec4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <MX_TIM2_Init+0x98>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 8001ecc:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <MX_TIM2_Init+0x98>)
 8001ece:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001ed2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed4:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <MX_TIM2_Init+0x98>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eda:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <MX_TIM2_Init+0x98>)
 8001edc:	2280      	movs	r2, #128	@ 0x80
 8001ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ee0:	4813      	ldr	r0, [pc, #76]	@ (8001f30 <MX_TIM2_Init+0x98>)
 8001ee2:	f007 f9cf 	bl	8009284 <HAL_TIM_Base_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001eec:	f000 fe5c 	bl	8002ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ef4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ef6:	f107 0310 	add.w	r3, r7, #16
 8001efa:	4619      	mov	r1, r3
 8001efc:	480c      	ldr	r0, [pc, #48]	@ (8001f30 <MX_TIM2_Init+0x98>)
 8001efe:	f007 ff6d 	bl	8009ddc <HAL_TIM_ConfigClockSource>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001f08:	f000 fe4e 	bl	8002ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	4619      	mov	r1, r3
 8001f18:	4805      	ldr	r0, [pc, #20]	@ (8001f30 <MX_TIM2_Init+0x98>)
 8001f1a:	f008 fc8d 	bl	800a838 <HAL_TIMEx_MasterConfigSynchronization>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001f24:	f000 fe40 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f28:	bf00      	nop
 8001f2a:	3720      	adds	r7, #32
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	200004a0 	.word	0x200004a0

08001f34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08e      	sub	sp, #56	@ 0x38
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f54:	463b      	mov	r3, r7
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
 8001f60:	611a      	str	r2, [r3, #16]
 8001f62:	615a      	str	r2, [r3, #20]
 8001f64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f66:	4b32      	ldr	r3, [pc, #200]	@ (8002030 <MX_TIM3_Init+0xfc>)
 8001f68:	4a32      	ldr	r2, [pc, #200]	@ (8002034 <MX_TIM3_Init+0x100>)
 8001f6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8001f6c:	4b30      	ldr	r3, [pc, #192]	@ (8002030 <MX_TIM3_Init+0xfc>)
 8001f6e:	2209      	movs	r2, #9
 8001f70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f72:	4b2f      	ldr	r3, [pc, #188]	@ (8002030 <MX_TIM3_Init+0xfc>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7999;
 8001f78:	4b2d      	ldr	r3, [pc, #180]	@ (8002030 <MX_TIM3_Init+0xfc>)
 8001f7a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001f7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f80:	4b2b      	ldr	r3, [pc, #172]	@ (8002030 <MX_TIM3_Init+0xfc>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f86:	4b2a      	ldr	r3, [pc, #168]	@ (8002030 <MX_TIM3_Init+0xfc>)
 8001f88:	2280      	movs	r2, #128	@ 0x80
 8001f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f8c:	4828      	ldr	r0, [pc, #160]	@ (8002030 <MX_TIM3_Init+0xfc>)
 8001f8e:	f007 f979 	bl	8009284 <HAL_TIM_Base_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001f98:	f000 fe06 	bl	8002ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fa2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4821      	ldr	r0, [pc, #132]	@ (8002030 <MX_TIM3_Init+0xfc>)
 8001faa:	f007 ff17 	bl	8009ddc <HAL_TIM_ConfigClockSource>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001fb4:	f000 fdf8 	bl	8002ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fb8:	481d      	ldr	r0, [pc, #116]	@ (8002030 <MX_TIM3_Init+0xfc>)
 8001fba:	f007 fa5a 	bl	8009472 <HAL_TIM_PWM_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001fc4:	f000 fdf0 	bl	8002ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4816      	ldr	r0, [pc, #88]	@ (8002030 <MX_TIM3_Init+0xfc>)
 8001fd8:	f008 fc2e 	bl	800a838 <HAL_TIMEx_MasterConfigSynchronization>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001fe2:	f000 fde1 	bl	8002ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe6:	2360      	movs	r3, #96	@ 0x60
 8001fe8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	480c      	ldr	r0, [pc, #48]	@ (8002030 <MX_TIM3_Init+0xfc>)
 8001ffe:	f007 fdd9 	bl	8009bb4 <HAL_TIM_PWM_ConfigChannel>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002008:	f000 fdce 	bl	8002ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800200c:	463b      	mov	r3, r7
 800200e:	220c      	movs	r2, #12
 8002010:	4619      	mov	r1, r3
 8002012:	4807      	ldr	r0, [pc, #28]	@ (8002030 <MX_TIM3_Init+0xfc>)
 8002014:	f007 fdce 	bl	8009bb4 <HAL_TIM_PWM_ConfigChannel>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800201e:	f000 fdc3 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002022:	4803      	ldr	r0, [pc, #12]	@ (8002030 <MX_TIM3_Init+0xfc>)
 8002024:	f000 ffe2 	bl	8002fec <HAL_TIM_MspPostInit>

}
 8002028:	bf00      	nop
 800202a:	3738      	adds	r7, #56	@ 0x38
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	200004ec 	.word	0x200004ec
 8002034:	40000400 	.word	0x40000400

08002038 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800203e:	f107 0310 	add.w	r3, r7, #16
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002056:	4b1e      	ldr	r3, [pc, #120]	@ (80020d0 <MX_TIM5_Init+0x98>)
 8002058:	4a1e      	ldr	r2, [pc, #120]	@ (80020d4 <MX_TIM5_Init+0x9c>)
 800205a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4999;
 800205c:	4b1c      	ldr	r3, [pc, #112]	@ (80020d0 <MX_TIM5_Init+0x98>)
 800205e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002062:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002064:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <MX_TIM5_Init+0x98>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800206a:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <MX_TIM5_Init+0x98>)
 800206c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002070:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002072:	4b17      	ldr	r3, [pc, #92]	@ (80020d0 <MX_TIM5_Init+0x98>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002078:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <MX_TIM5_Init+0x98>)
 800207a:	2280      	movs	r2, #128	@ 0x80
 800207c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800207e:	4814      	ldr	r0, [pc, #80]	@ (80020d0 <MX_TIM5_Init+0x98>)
 8002080:	f007 f900 	bl	8009284 <HAL_TIM_Base_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800208a:	f000 fd8d 	bl	8002ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800208e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002092:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002094:	f107 0310 	add.w	r3, r7, #16
 8002098:	4619      	mov	r1, r3
 800209a:	480d      	ldr	r0, [pc, #52]	@ (80020d0 <MX_TIM5_Init+0x98>)
 800209c:	f007 fe9e 	bl	8009ddc <HAL_TIM_ConfigClockSource>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80020a6:	f000 fd7f 	bl	8002ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	4619      	mov	r1, r3
 80020b6:	4806      	ldr	r0, [pc, #24]	@ (80020d0 <MX_TIM5_Init+0x98>)
 80020b8:	f008 fbbe 	bl	800a838 <HAL_TIMEx_MasterConfigSynchronization>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80020c2:	f000 fd71 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80020c6:	bf00      	nop
 80020c8:	3720      	adds	r7, #32
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000538 	.word	0x20000538
 80020d4:	40000c00 	.word	0x40000c00

080020d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020dc:	4b14      	ldr	r3, [pc, #80]	@ (8002130 <MX_USART1_UART_Init+0x58>)
 80020de:	4a15      	ldr	r2, [pc, #84]	@ (8002134 <MX_USART1_UART_Init+0x5c>)
 80020e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020e2:	4b13      	ldr	r3, [pc, #76]	@ (8002130 <MX_USART1_UART_Init+0x58>)
 80020e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ea:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <MX_USART1_UART_Init+0x58>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002130 <MX_USART1_UART_Init+0x58>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002130 <MX_USART1_UART_Init+0x58>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002130 <MX_USART1_UART_Init+0x58>)
 80020fe:	220c      	movs	r2, #12
 8002100:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002102:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <MX_USART1_UART_Init+0x58>)
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002108:	4b09      	ldr	r3, [pc, #36]	@ (8002130 <MX_USART1_UART_Init+0x58>)
 800210a:	2200      	movs	r2, #0
 800210c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800210e:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <MX_USART1_UART_Init+0x58>)
 8002110:	2200      	movs	r2, #0
 8002112:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002114:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <MX_USART1_UART_Init+0x58>)
 8002116:	2200      	movs	r2, #0
 8002118:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800211a:	4805      	ldr	r0, [pc, #20]	@ (8002130 <MX_USART1_UART_Init+0x58>)
 800211c:	f008 fc32 	bl	800a984 <HAL_UART_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002126:	f000 fd3f 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000584 	.word	0x20000584
 8002134:	40013800 	.word	0x40013800

08002138 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800213c:	4b14      	ldr	r3, [pc, #80]	@ (8002190 <MX_USART3_UART_Init+0x58>)
 800213e:	4a15      	ldr	r2, [pc, #84]	@ (8002194 <MX_USART3_UART_Init+0x5c>)
 8002140:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002142:	4b13      	ldr	r3, [pc, #76]	@ (8002190 <MX_USART3_UART_Init+0x58>)
 8002144:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002148:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800214a:	4b11      	ldr	r3, [pc, #68]	@ (8002190 <MX_USART3_UART_Init+0x58>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002150:	4b0f      	ldr	r3, [pc, #60]	@ (8002190 <MX_USART3_UART_Init+0x58>)
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002156:	4b0e      	ldr	r3, [pc, #56]	@ (8002190 <MX_USART3_UART_Init+0x58>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800215c:	4b0c      	ldr	r3, [pc, #48]	@ (8002190 <MX_USART3_UART_Init+0x58>)
 800215e:	220c      	movs	r2, #12
 8002160:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002162:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <MX_USART3_UART_Init+0x58>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002168:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <MX_USART3_UART_Init+0x58>)
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800216e:	4b08      	ldr	r3, [pc, #32]	@ (8002190 <MX_USART3_UART_Init+0x58>)
 8002170:	2200      	movs	r2, #0
 8002172:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002174:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <MX_USART3_UART_Init+0x58>)
 8002176:	2200      	movs	r2, #0
 8002178:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800217a:	4805      	ldr	r0, [pc, #20]	@ (8002190 <MX_USART3_UART_Init+0x58>)
 800217c:	f008 fc02 	bl	800a984 <HAL_UART_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002186:	f000 fd0f 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	2000060c 	.word	0x2000060c
 8002194:	40004800 	.word	0x40004800

08002198 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800219c:	4b14      	ldr	r3, [pc, #80]	@ (80021f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800219e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80021a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80021a4:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021a6:	2206      	movs	r2, #6
 80021a8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80021aa:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ac:	2202      	movs	r2, #2
 80021ae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80021b0:	4b0f      	ldr	r3, [pc, #60]	@ (80021f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021b2:	2202      	movs	r2, #2
 80021b4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80021bc:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021be:	2200      	movs	r2, #0
 80021c0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80021c2:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80021c8:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80021ce:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80021da:	4805      	ldr	r0, [pc, #20]	@ (80021f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021dc:	f004 fed5 	bl	8006f8a <HAL_PCD_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80021e6:	f000 fcdf 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000694 	.word	0x20000694

080021f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	@ 0x28
 80021f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	60da      	str	r2, [r3, #12]
 8002208:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800220a:	4bb1      	ldr	r3, [pc, #708]	@ (80024d0 <MX_GPIO_Init+0x2dc>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	4ab0      	ldr	r2, [pc, #704]	@ (80024d0 <MX_GPIO_Init+0x2dc>)
 8002210:	f043 0310 	orr.w	r3, r3, #16
 8002214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002216:	4bae      	ldr	r3, [pc, #696]	@ (80024d0 <MX_GPIO_Init+0x2dc>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002222:	4bab      	ldr	r3, [pc, #684]	@ (80024d0 <MX_GPIO_Init+0x2dc>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	4aaa      	ldr	r2, [pc, #680]	@ (80024d0 <MX_GPIO_Init+0x2dc>)
 8002228:	f043 0304 	orr.w	r3, r3, #4
 800222c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800222e:	4ba8      	ldr	r3, [pc, #672]	@ (80024d0 <MX_GPIO_Init+0x2dc>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800223a:	4ba5      	ldr	r3, [pc, #660]	@ (80024d0 <MX_GPIO_Init+0x2dc>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223e:	4aa4      	ldr	r2, [pc, #656]	@ (80024d0 <MX_GPIO_Init+0x2dc>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002246:	4ba2      	ldr	r3, [pc, #648]	@ (80024d0 <MX_GPIO_Init+0x2dc>)
 8002248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002252:	4b9f      	ldr	r3, [pc, #636]	@ (80024d0 <MX_GPIO_Init+0x2dc>)
 8002254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002256:	4a9e      	ldr	r2, [pc, #632]	@ (80024d0 <MX_GPIO_Init+0x2dc>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800225e:	4b9c      	ldr	r3, [pc, #624]	@ (80024d0 <MX_GPIO_Init+0x2dc>)
 8002260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800226a:	4b99      	ldr	r3, [pc, #612]	@ (80024d0 <MX_GPIO_Init+0x2dc>)
 800226c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226e:	4a98      	ldr	r2, [pc, #608]	@ (80024d0 <MX_GPIO_Init+0x2dc>)
 8002270:	f043 0308 	orr.w	r3, r3, #8
 8002274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002276:	4b96      	ldr	r3, [pc, #600]	@ (80024d0 <MX_GPIO_Init+0x2dc>)
 8002278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8002282:	2200      	movs	r2, #0
 8002284:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8002288:	4892      	ldr	r0, [pc, #584]	@ (80024d4 <MX_GPIO_Init+0x2e0>)
 800228a:	f003 ffe3 	bl	8006254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|GPIO_PIN_4|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	f248 1114 	movw	r1, #33044	@ 0x8114
 8002294:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002298:	f003 ffdc 	bl	8006254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800229c:	2200      	movs	r2, #0
 800229e:	f24f 0104 	movw	r1, #61444	@ 0xf004
 80022a2:	488d      	ldr	r0, [pc, #564]	@ (80024d8 <MX_GPIO_Init+0x2e4>)
 80022a4:	f003 ffd6 	bl	8006254 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80022a8:	2200      	movs	r2, #0
 80022aa:	f241 0181 	movw	r1, #4225	@ 0x1081
 80022ae:	488b      	ldr	r0, [pc, #556]	@ (80024dc <MX_GPIO_Init+0x2e8>)
 80022b0:	f003 ffd0 	bl	8006254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80022b4:	2201      	movs	r2, #1
 80022b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022ba:	4888      	ldr	r0, [pc, #544]	@ (80024dc <MX_GPIO_Init+0x2e8>)
 80022bc:	f003 ffca 	bl	8006254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80022c0:	2200      	movs	r2, #0
 80022c2:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80022c6:	4886      	ldr	r0, [pc, #536]	@ (80024e0 <MX_GPIO_Init+0x2ec>)
 80022c8:	f003 ffc4 	bl	8006254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80022cc:	2201      	movs	r2, #1
 80022ce:	2120      	movs	r1, #32
 80022d0:	4881      	ldr	r0, [pc, #516]	@ (80024d8 <MX_GPIO_Init+0x2e4>)
 80022d2:	f003 ffbf 	bl	8006254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80022d6:	2201      	movs	r2, #1
 80022d8:	2101      	movs	r1, #1
 80022da:	487e      	ldr	r0, [pc, #504]	@ (80024d4 <MX_GPIO_Init+0x2e0>)
 80022dc:	f003 ffba 	bl	8006254 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80022e0:	f240 1315 	movw	r3, #277	@ 0x115
 80022e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e6:	2301      	movs	r3, #1
 80022e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ee:	2300      	movs	r3, #0
 80022f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	4619      	mov	r1, r3
 80022f8:	4876      	ldr	r0, [pc, #472]	@ (80024d4 <MX_GPIO_Init+0x2e0>)
 80022fa:	f003 fcf5 	bl	8005ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80022fe:	236a      	movs	r3, #106	@ 0x6a
 8002300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002302:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	4619      	mov	r1, r3
 8002312:	4870      	ldr	r0, [pc, #448]	@ (80024d4 <MX_GPIO_Init+0x2e0>)
 8002314:	f003 fce8 	bl	8005ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8002318:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800231c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800231e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4619      	mov	r1, r3
 800232e:	486c      	ldr	r0, [pc, #432]	@ (80024e0 <MX_GPIO_Init+0x2ec>)
 8002330:	f003 fcda 	bl	8005ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002334:	2303      	movs	r3, #3
 8002336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002340:	2303      	movs	r3, #3
 8002342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002344:	2308      	movs	r3, #8
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	4619      	mov	r1, r3
 800234e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002352:	f003 fcc9 	bl	8005ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin PA4 SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|GPIO_PIN_4|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8002356:	f248 1314 	movw	r3, #33044	@ 0x8114
 800235a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235c:	2301      	movs	r3, #1
 800235e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2300      	movs	r3, #0
 8002366:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	4619      	mov	r1, r3
 800236e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002372:	f003 fcb9 	bl	8005ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002376:	23e0      	movs	r3, #224	@ 0xe0
 8002378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002386:	2305      	movs	r3, #5
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238a:	f107 0314 	add.w	r3, r7, #20
 800238e:	4619      	mov	r1, r3
 8002390:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002394:	f003 fca8 	bl	8005ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002398:	2301      	movs	r3, #1
 800239a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800239c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80023a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	484a      	ldr	r0, [pc, #296]	@ (80024d8 <MX_GPIO_Init+0x2e4>)
 80023ae:	f003 fc9b 	bl	8005ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80023b2:	f24f 0324 	movw	r3, #61476	@ 0xf024
 80023b6:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b8:	2301      	movs	r3, #1
 80023ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	4619      	mov	r1, r3
 80023ca:	4843      	ldr	r0, [pc, #268]	@ (80024d8 <MX_GPIO_Init+0x2e4>)
 80023cc:	f003 fc8c 	bl	8005ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80023d0:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 80023d4:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80023da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	4619      	mov	r1, r3
 80023e6:	483d      	ldr	r0, [pc, #244]	@ (80024dc <MX_GPIO_Init+0x2e8>)
 80023e8:	f003 fc7e 	bl	8005ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80023ec:	f243 0381 	movw	r3, #12417	@ 0x3081
 80023f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f2:	2301      	movs	r3, #1
 80023f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fa:	2300      	movs	r3, #0
 80023fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4619      	mov	r1, r3
 8002404:	4835      	ldr	r0, [pc, #212]	@ (80024dc <MX_GPIO_Init+0x2e8>)
 8002406:	f003 fc6f 	bl	8005ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800240a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800240e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002410:	2301      	movs	r3, #1
 8002412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	4619      	mov	r1, r3
 8002422:	482f      	ldr	r0, [pc, #188]	@ (80024e0 <MX_GPIO_Init+0x2ec>)
 8002424:	f003 fc60 	bl	8005ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002428:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800242c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800242e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	4619      	mov	r1, r3
 800243e:	4828      	ldr	r0, [pc, #160]	@ (80024e0 <MX_GPIO_Init+0x2ec>)
 8002440:	f003 fc52 	bl	8005ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8002444:	2302      	movs	r3, #2
 8002446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002448:	2302      	movs	r3, #2
 800244a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002450:	2303      	movs	r3, #3
 8002452:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002454:	2305      	movs	r3, #5
 8002456:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	4619      	mov	r1, r3
 800245e:	481f      	ldr	r0, [pc, #124]	@ (80024dc <MX_GPIO_Init+0x2e8>)
 8002460:	f003 fc42 	bl	8005ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002464:	2378      	movs	r3, #120	@ 0x78
 8002466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002470:	2303      	movs	r3, #3
 8002472:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002474:	2307      	movs	r3, #7
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	4619      	mov	r1, r3
 800247e:	4817      	ldr	r0, [pc, #92]	@ (80024dc <MX_GPIO_Init+0x2e8>)
 8002480:	f003 fc32 	bl	8005ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002484:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800248a:	2312      	movs	r3, #18
 800248c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002492:	2303      	movs	r3, #3
 8002494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002496:	2304      	movs	r3, #4
 8002498:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249a:	f107 0314 	add.w	r3, r7, #20
 800249e:	4619      	mov	r1, r3
 80024a0:	480d      	ldr	r0, [pc, #52]	@ (80024d8 <MX_GPIO_Init+0x2e4>)
 80024a2:	f003 fc21 	bl	8005ce8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	2017      	movs	r0, #23
 80024ac:	f003 fa7b 	bl	80059a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80024b0:	2017      	movs	r0, #23
 80024b2:	f003 fa94 	bl	80059de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	2028      	movs	r0, #40	@ 0x28
 80024bc:	f003 fa73 	bl	80059a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024c0:	2028      	movs	r0, #40	@ 0x28
 80024c2:	f003 fa8c 	bl	80059de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024c6:	bf00      	nop
 80024c8:	3728      	adds	r7, #40	@ 0x28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	48001000 	.word	0x48001000
 80024d8:	48000400 	.word	0x48000400
 80024dc:	48000c00 	.word	0x48000c00
 80024e0:	48000800 	.word	0x48000800

080024e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* timer info*/
  // TIM2: 4Hz for ADC
  // TIM5: 8Hz for accelero

  if (htim->Instance == htim2.Instance) //if timer2 interrupt happens
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b09      	ldr	r3, [pc, #36]	@ (8002518 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d103      	bne.n	8002500 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  HAL_ADC_Start_IT(&hadc1); //call ADC1 to start
 80024f8:	4808      	ldr	r0, [pc, #32]	@ (800251c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80024fa:	f002 f88f 	bl	800461c <HAL_ADC_Start_IT>

	  AcceleroParser();

  }

}
 80024fe:	e007      	b.n	8002510 <HAL_TIM_PeriodElapsedCallback+0x2c>
  }else if(htim->Instance == htim5.Instance){ //if timer5 interrupt happens: calculate speed
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d101      	bne.n	8002510 <HAL_TIM_PeriodElapsedCallback+0x2c>
	  AcceleroParser();
 800250c:	f000 f9a2 	bl	8002854 <AcceleroParser>
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	200004a0 	.word	0x200004a0
 800251c:	2000036c 	.word	0x2000036c
 8002520:	20000538 	.word	0x20000538
 8002524:	00000000 	.word	0x00000000

08002528 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){ //ADC conversion complete callback
 8002528:	b5b0      	push	{r4, r5, r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	/* Global Variable
	 * MIN_LIGHT: minimum light level for LED. Default=499
	 * TARGET_LIGHT: target brightness. Default=2000
	 * Can change this via BLE
	 * */
	LIGHT = HAL_ADC_GetValue(&hadc1);
 8002530:	4873      	ldr	r0, [pc, #460]	@ (8002700 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8002532:	f002 f9a1 	bl	8004878 <HAL_ADC_GetValue>
 8002536:	4603      	mov	r3, r0
 8002538:	b29a      	uxth	r2, r3
 800253a:	4b72      	ldr	r3, [pc, #456]	@ (8002704 <HAL_ADC_ConvCpltCallback+0x1dc>)
 800253c:	801a      	strh	r2, [r3, #0]
	printf("light level (0-4095) %d", LIGHT);
 800253e:	4b71      	ldr	r3, [pc, #452]	@ (8002704 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	4619      	mov	r1, r3
 8002544:	4870      	ldr	r0, [pc, #448]	@ (8002708 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8002546:	f00b fbbb 	bl	800dcc0 <iprintf>
	printf("\r\n");
 800254a:	4870      	ldr	r0, [pc, #448]	@ (800270c <HAL_ADC_ConvCpltCallback+0x1e4>)
 800254c:	f00b fc20 	bl	800dd90 <puts>
	if(LIGHT > TARGET_LIGHT + 1000){
 8002550:	4b6c      	ldr	r3, [pc, #432]	@ (8002704 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	4b6e      	ldr	r3, [pc, #440]	@ (8002710 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800255e:	429a      	cmp	r2, r3
 8002560:	dd0f      	ble.n	8002582 <HAL_ADC_ConvCpltCallback+0x5a>
		error_prev = 0; //stable. only minimum light needed
 8002562:	4b6c      	ldr	r3, [pc, #432]	@ (8002714 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8002564:	2200      	movs	r2, #0
 8002566:	801a      	strh	r2, [r3, #0]
		error_pp = 0;
 8002568:	4b6b      	ldr	r3, [pc, #428]	@ (8002718 <HAL_ADC_ConvCpltCallback+0x1f0>)
 800256a:	2200      	movs	r2, #0
 800256c:	801a      	strh	r2, [r3, #0]
		u_prev = MIN_LIGHT;
 800256e:	4b6b      	ldr	r3, [pc, #428]	@ (800271c <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b21a      	sxth	r2, r3
 8002574:	4b6a      	ldr	r3, [pc, #424]	@ (8002720 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002576:	801a      	strh	r2, [r3, #0]
		CCR = MIN_LIGHT;
 8002578:	4b68      	ldr	r3, [pc, #416]	@ (800271c <HAL_ADC_ConvCpltCallback+0x1f4>)
 800257a:	881a      	ldrh	r2, [r3, #0]
 800257c:	4b69      	ldr	r3, [pc, #420]	@ (8002724 <HAL_ADC_ConvCpltCallback+0x1fc>)
 800257e:	801a      	strh	r2, [r3, #0]
 8002580:	e0ab      	b.n	80026da <HAL_ADC_ConvCpltCallback+0x1b2>
	}else if(motion_state == 0){
 8002582:	4b69      	ldr	r3, [pc, #420]	@ (8002728 <HAL_ADC_ConvCpltCallback+0x200>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10f      	bne.n	80025aa <HAL_ADC_ConvCpltCallback+0x82>
		//not moving
		error_prev = 0; //not moving. only minimum light needed
 800258a:	4b62      	ldr	r3, [pc, #392]	@ (8002714 <HAL_ADC_ConvCpltCallback+0x1ec>)
 800258c:	2200      	movs	r2, #0
 800258e:	801a      	strh	r2, [r3, #0]
		error_pp = 0;
 8002590:	4b61      	ldr	r3, [pc, #388]	@ (8002718 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8002592:	2200      	movs	r2, #0
 8002594:	801a      	strh	r2, [r3, #0]
		u_prev = MIN_LIGHT;
 8002596:	4b61      	ldr	r3, [pc, #388]	@ (800271c <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	b21a      	sxth	r2, r3
 800259c:	4b60      	ldr	r3, [pc, #384]	@ (8002720 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800259e:	801a      	strh	r2, [r3, #0]
		CCR = MIN_LIGHT;
 80025a0:	4b5e      	ldr	r3, [pc, #376]	@ (800271c <HAL_ADC_ConvCpltCallback+0x1f4>)
 80025a2:	881a      	ldrh	r2, [r3, #0]
 80025a4:	4b5f      	ldr	r3, [pc, #380]	@ (8002724 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80025a6:	801a      	strh	r2, [r3, #0]
 80025a8:	e097      	b.n	80026da <HAL_ADC_ConvCpltCallback+0x1b2>
	}
	//un-comment this to merge two tasks. (No RTOS)
	else{

		int16_t error = TARGET_LIGHT - LIGHT; //2000 is the target brightness
 80025aa:	4b59      	ldr	r3, [pc, #356]	@ (8002710 <HAL_ADC_ConvCpltCallback+0x1e8>)
 80025ac:	881a      	ldrh	r2, [r3, #0]
 80025ae:	4b55      	ldr	r3, [pc, #340]	@ (8002704 <HAL_ADC_ConvCpltCallback+0x1dc>)
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	81fb      	strh	r3, [r7, #14]

		//PID filter
		u_prev = u_prev + 3*error + 1.5*(error - error_prev) +0.2*(error - 2*error_prev + error_pp);
 80025b8:	4b59      	ldr	r3, [pc, #356]	@ (8002720 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80025ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025be:	4619      	mov	r1, r3
 80025c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fd ffa9 	bl	8000524 <__aeabi_i2d>
 80025d2:	4604      	mov	r4, r0
 80025d4:	460d      	mov	r5, r1
 80025d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025da:	4a4e      	ldr	r2, [pc, #312]	@ (8002714 <HAL_ADC_ConvCpltCallback+0x1ec>)
 80025dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fd ff9e 	bl	8000524 <__aeabi_i2d>
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	4b4f      	ldr	r3, [pc, #316]	@ (800272c <HAL_ADC_ConvCpltCallback+0x204>)
 80025ee:	f7fe f803 	bl	80005f8 <__aeabi_dmul>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4620      	mov	r0, r4
 80025f8:	4629      	mov	r1, r5
 80025fa:	f7fd fe47 	bl	800028c <__adddf3>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4614      	mov	r4, r2
 8002604:	461d      	mov	r5, r3
 8002606:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800260a:	4b42      	ldr	r3, [pc, #264]	@ (8002714 <HAL_ADC_ConvCpltCallback+0x1ec>)
 800260c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	4a40      	ldr	r2, [pc, #256]	@ (8002718 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8002616:	f9b2 2000 	ldrsh.w	r2, [r2]
 800261a:	4413      	add	r3, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f7fd ff81 	bl	8000524 <__aeabi_i2d>
 8002622:	a335      	add	r3, pc, #212	@ (adr r3, 80026f8 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8002624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002628:	f7fd ffe6 	bl	80005f8 <__aeabi_dmul>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f7fd fe2a 	bl	800028c <__adddf3>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	f7fe fa8a 	bl	8000b58 <__aeabi_d2iz>
 8002644:	4603      	mov	r3, r0
 8002646:	b21a      	sxth	r2, r3
 8002648:	4b35      	ldr	r3, [pc, #212]	@ (8002720 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800264a:	801a      	strh	r2, [r3, #0]

		//Status update
		error_pp = error_prev;
 800264c:	4b31      	ldr	r3, [pc, #196]	@ (8002714 <HAL_ADC_ConvCpltCallback+0x1ec>)
 800264e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002652:	4b31      	ldr	r3, [pc, #196]	@ (8002718 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8002654:	801a      	strh	r2, [r3, #0]
		error_prev = error;
 8002656:	4a2f      	ldr	r2, [pc, #188]	@ (8002714 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8002658:	89fb      	ldrh	r3, [r7, #14]
 800265a:	8013      	strh	r3, [r2, #0]

		//The value of u should be clamped as well
		if(u_prev < MIN_LIGHT) u_prev = MIN_LIGHT;
 800265c:	4b30      	ldr	r3, [pc, #192]	@ (8002720 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800265e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002662:	461a      	mov	r2, r3
 8002664:	4b2d      	ldr	r3, [pc, #180]	@ (800271c <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	da05      	bge.n	8002678 <HAL_ADC_ConvCpltCallback+0x150>
 800266c:	4b2b      	ldr	r3, [pc, #172]	@ (800271c <HAL_ADC_ConvCpltCallback+0x1f4>)
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	b21a      	sxth	r2, r3
 8002672:	4b2b      	ldr	r3, [pc, #172]	@ (8002720 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002674:	801a      	strh	r2, [r3, #0]
 8002676:	e009      	b.n	800268c <HAL_ADC_ConvCpltCallback+0x164>
		else if(u_prev > 7999) u_prev = 7999;
 8002678:	4b29      	ldr	r3, [pc, #164]	@ (8002720 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800267a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800267e:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8002682:	db03      	blt.n	800268c <HAL_ADC_ConvCpltCallback+0x164>
 8002684:	4b26      	ldr	r3, [pc, #152]	@ (8002720 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002686:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800268a:	801a      	strh	r2, [r3, #0]

		CCR = 1 * u_prev; //CCR can be proportional to it.
 800268c:	4b24      	ldr	r3, [pc, #144]	@ (8002720 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800268e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002692:	b29a      	uxth	r2, r3
 8002694:	4b23      	ldr	r3, [pc, #140]	@ (8002724 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002696:	801a      	strh	r2, [r3, #0]
		//Clamp the value of CCR
		if(CCR < MIN_LIGHT) CCR = MIN_LIGHT;
 8002698:	4b22      	ldr	r3, [pc, #136]	@ (8002724 <HAL_ADC_ConvCpltCallback+0x1fc>)
 800269a:	881a      	ldrh	r2, [r3, #0]
 800269c:	4b1f      	ldr	r3, [pc, #124]	@ (800271c <HAL_ADC_ConvCpltCallback+0x1f4>)
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d204      	bcs.n	80026ae <HAL_ADC_ConvCpltCallback+0x186>
 80026a4:	4b1d      	ldr	r3, [pc, #116]	@ (800271c <HAL_ADC_ConvCpltCallback+0x1f4>)
 80026a6:	881a      	ldrh	r2, [r3, #0]
 80026a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002724 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80026aa:	801a      	strh	r2, [r3, #0]
 80026ac:	e008      	b.n	80026c0 <HAL_ADC_ConvCpltCallback+0x198>
		else if(CCR > 7999) CCR = 7999;
 80026ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80026b6:	d303      	bcc.n	80026c0 <HAL_ADC_ConvCpltCallback+0x198>
 80026b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002724 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80026ba:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80026be:	801a      	strh	r2, [r3, #0]

		printf("CCR = %d", CCR);
 80026c0:	4b18      	ldr	r3, [pc, #96]	@ (8002724 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	481a      	ldr	r0, [pc, #104]	@ (8002730 <HAL_ADC_ConvCpltCallback+0x208>)
 80026c8:	f00b fafa 	bl	800dcc0 <iprintf>
		printf(", u_prev = %d \r\n", u_prev);
 80026cc:	4b14      	ldr	r3, [pc, #80]	@ (8002720 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80026ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d2:	4619      	mov	r1, r3
 80026d4:	4817      	ldr	r0, [pc, #92]	@ (8002734 <HAL_ADC_ConvCpltCallback+0x20c>)
 80026d6:	f00b faf3 	bl	800dcc0 <iprintf>
	}

	//set the CCR value to the timer
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, CCR);
 80026da:	4b12      	ldr	r3, [pc, #72]	@ (8002724 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80026dc:	881a      	ldrh	r2, [r3, #0]
 80026de:	4b16      	ldr	r3, [pc, #88]	@ (8002738 <HAL_ADC_ConvCpltCallback+0x210>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, CCR);
 80026e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002724 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80026e6:	881a      	ldrh	r2, [r3, #0]
 80026e8:	4b13      	ldr	r3, [pc, #76]	@ (8002738 <HAL_ADC_ConvCpltCallback+0x210>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	641a      	str	r2, [r3, #64]	@ 0x40

}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bdb0      	pop	{r4, r5, r7, pc}
 80026f6:	bf00      	nop
 80026f8:	9999999a 	.word	0x9999999a
 80026fc:	3fc99999 	.word	0x3fc99999
 8002700:	2000036c 	.word	0x2000036c
 8002704:	20000b7c 	.word	0x20000b7c
 8002708:	080118f4 	.word	0x080118f4
 800270c:	0801190c 	.word	0x0801190c
 8002710:	20000004 	.word	0x20000004
 8002714:	20000b7e 	.word	0x20000b7e
 8002718:	20000b80 	.word	0x20000b80
 800271c:	20000002 	.word	0x20000002
 8002720:	20000b82 	.word	0x20000b82
 8002724:	20000006 	.word	0x20000006
 8002728:	20000b8c 	.word	0x20000b8c
 800272c:	3ff80000 	.word	0x3ff80000
 8002730:	08011910 	.word	0x08011910
 8002734:	0801191c 	.word	0x0801191c
 8002738:	200004ec 	.word	0x200004ec

0800273c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_EXTI13_Pin){ //if the interrupt is the button
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800274c:	d14e      	bne.n	80027ec <HAL_GPIO_EXTI_Callback+0xb0>
		HAL_GPIO_TogglePin(GPIOB, LED2_Pin); //switch the LED to on/off
 800274e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002752:	4828      	ldr	r0, [pc, #160]	@ (80027f4 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002754:	f003 fd96 	bl	8006284 <HAL_GPIO_TogglePin>
		if(TIMER_IS_ON){
 8002758:	4b27      	ldr	r3, [pc, #156]	@ (80027f8 <HAL_GPIO_EXTI_Callback+0xbc>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d02e      	beq.n	80027be <HAL_GPIO_EXTI_Callback+0x82>
			printf("turned off\r\n");
 8002760:	4826      	ldr	r0, [pc, #152]	@ (80027fc <HAL_GPIO_EXTI_Callback+0xc0>)
 8002762:	f00b fb15 	bl	800dd90 <puts>
			HAL_TIM_Base_Stop_IT(&htim2); //start timer
 8002766:	4826      	ldr	r0, [pc, #152]	@ (8002800 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002768:	f006 fe54 	bl	8009414 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim3);
 800276c:	4825      	ldr	r0, [pc, #148]	@ (8002804 <HAL_GPIO_EXTI_Callback+0xc8>)
 800276e:	f006 fe51 	bl	8009414 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim5);
 8002772:	4825      	ldr	r0, [pc, #148]	@ (8002808 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002774:	f006 fe4e 	bl	8009414 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8002778:	2100      	movs	r1, #0
 800277a:	4822      	ldr	r0, [pc, #136]	@ (8002804 <HAL_GPIO_EXTI_Callback+0xc8>)
 800277c:	f007 f82e 	bl	80097dc <HAL_TIM_PWM_Stop_IT>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_4);
 8002780:	210c      	movs	r1, #12
 8002782:	4820      	ldr	r0, [pc, #128]	@ (8002804 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002784:	f007 f82a 	bl	80097dc <HAL_TIM_PWM_Stop_IT>
			// PWM param reset
			LIGHT = 0;
 8002788:	4b20      	ldr	r3, [pc, #128]	@ (800280c <HAL_GPIO_EXTI_Callback+0xd0>)
 800278a:	2200      	movs	r2, #0
 800278c:	801a      	strh	r2, [r3, #0]
			CCR = MIN_LIGHT;
 800278e:	4b20      	ldr	r3, [pc, #128]	@ (8002810 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002790:	881a      	ldrh	r2, [r3, #0]
 8002792:	4b20      	ldr	r3, [pc, #128]	@ (8002814 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002794:	801a      	strh	r2, [r3, #0]
			error_prev = 0;
 8002796:	4b20      	ldr	r3, [pc, #128]	@ (8002818 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002798:	2200      	movs	r2, #0
 800279a:	801a      	strh	r2, [r3, #0]
			error_pp = 0;
 800279c:	4b1f      	ldr	r3, [pc, #124]	@ (800281c <HAL_GPIO_EXTI_Callback+0xe0>)
 800279e:	2200      	movs	r2, #0
 80027a0:	801a      	strh	r2, [r3, #0]
			u_prev = 0;
 80027a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002820 <HAL_GPIO_EXTI_Callback+0xe4>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	801a      	strh	r2, [r3, #0]
			PID_INIT = 0;
 80027a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002824 <HAL_GPIO_EXTI_Callback+0xe8>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]

			// speed reset
			speed = 0;
 80027ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002828 <HAL_GPIO_EXTI_Callback+0xec>)
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]

			TIMER_IS_ON = 0;
 80027b6:	4b10      	ldr	r3, [pc, #64]	@ (80027f8 <HAL_GPIO_EXTI_Callback+0xbc>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
			HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
			TIMER_IS_ON = 1;
		}
  }
}
 80027bc:	e016      	b.n	80027ec <HAL_GPIO_EXTI_Callback+0xb0>
			printf("turned on\r\n");
 80027be:	481b      	ldr	r0, [pc, #108]	@ (800282c <HAL_GPIO_EXTI_Callback+0xf0>)
 80027c0:	f00b fae6 	bl	800dd90 <puts>
			HAL_TIM_Base_Start_IT(&htim2); //start timer
 80027c4:	480e      	ldr	r0, [pc, #56]	@ (8002800 <HAL_GPIO_EXTI_Callback+0xc4>)
 80027c6:	f006 fdb5 	bl	8009334 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim3);
 80027ca:	480e      	ldr	r0, [pc, #56]	@ (8002804 <HAL_GPIO_EXTI_Callback+0xc8>)
 80027cc:	f006 fdb2 	bl	8009334 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim5);
 80027d0:	480d      	ldr	r0, [pc, #52]	@ (8002808 <HAL_GPIO_EXTI_Callback+0xcc>)
 80027d2:	f006 fdaf 	bl	8009334 <HAL_TIM_Base_Start_IT>
			HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 80027d6:	2100      	movs	r1, #0
 80027d8:	480a      	ldr	r0, [pc, #40]	@ (8002804 <HAL_GPIO_EXTI_Callback+0xc8>)
 80027da:	f006 feab 	bl	8009534 <HAL_TIM_PWM_Start_IT>
			HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
 80027de:	210c      	movs	r1, #12
 80027e0:	4808      	ldr	r0, [pc, #32]	@ (8002804 <HAL_GPIO_EXTI_Callback+0xc8>)
 80027e2:	f006 fea7 	bl	8009534 <HAL_TIM_PWM_Start_IT>
			TIMER_IS_ON = 1;
 80027e6:	4b04      	ldr	r3, [pc, #16]	@ (80027f8 <HAL_GPIO_EXTI_Callback+0xbc>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	48000400 	.word	0x48000400
 80027f8:	20000b78 	.word	0x20000b78
 80027fc:	08011930 	.word	0x08011930
 8002800:	200004a0 	.word	0x200004a0
 8002804:	200004ec 	.word	0x200004ec
 8002808:	20000538 	.word	0x20000538
 800280c:	20000b7c 	.word	0x20000b7c
 8002810:	20000002 	.word	0x20000002
 8002814:	20000006 	.word	0x20000006
 8002818:	20000b7e 	.word	0x20000b7e
 800281c:	20000b80 	.word	0x20000b80
 8002820:	20000b82 	.word	0x20000b82
 8002824:	20000b84 	.word	0x20000b84
 8002828:	20000b88 	.word	0x20000b88
 800282c:	0801193c 	.word	0x0801193c

08002830 <__io_putchar>:

int __io_putchar(int ch)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	//ITM_SendChar(ch);
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002838:	1d39      	adds	r1, r7, #4
 800283a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800283e:	2201      	movs	r2, #1
 8002840:	4803      	ldr	r0, [pc, #12]	@ (8002850 <__io_putchar+0x20>)
 8002842:	f008 f8ed 	bl	800aa20 <HAL_UART_Transmit>
    return (ch);
 8002846:	687b      	ldr	r3, [r7, #4]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000584 	.word	0x20000584

08002854 <AcceleroParser>:

void AcceleroParser(){
 8002854:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002858:	b088      	sub	sp, #32
 800285a:	af04      	add	r7, sp, #16
	static float ZNewBias = 0;
	static uint8_t ClearSpeedCounter = 0;

	float fpDataXYZ[3];

	BSP_ACCELERO_AccGetXYZ_Float(fpDataXYZ);
 800285c:	1d3b      	adds	r3, r7, #4
 800285e:	4618      	mov	r0, r3
 8002860:	f001 f820 	bl	80038a4 <BSP_ACCELERO_AccGetXYZ_Float>

  //setting bias from the first 4 seconds
  if(acceleroTestCount == 0){
 8002864:	4bb9      	ldr	r3, [pc, #740]	@ (8002b4c <AcceleroParser+0x2f8>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d104      	bne.n	8002876 <AcceleroParser+0x22>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9); //LED3&4: initialization indicator
 800286c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002870:	48b7      	ldr	r0, [pc, #732]	@ (8002b50 <AcceleroParser+0x2fc>)
 8002872:	f003 fd07 	bl	8006284 <HAL_GPIO_TogglePin>
  }
  if(acceleroTestCount < 32){
 8002876:	4bb5      	ldr	r3, [pc, #724]	@ (8002b4c <AcceleroParser+0x2f8>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b1f      	cmp	r3, #31
 800287c:	d824      	bhi.n	80028c8 <AcceleroParser+0x74>
	  acceleroTestCount++;
 800287e:	4bb3      	ldr	r3, [pc, #716]	@ (8002b4c <AcceleroParser+0x2f8>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	3301      	adds	r3, #1
 8002884:	b2da      	uxtb	r2, r3
 8002886:	4bb1      	ldr	r3, [pc, #708]	@ (8002b4c <AcceleroParser+0x2f8>)
 8002888:	701a      	strb	r2, [r3, #0]
	  Xbias += fpDataXYZ[0];
 800288a:	ed97 7a01 	vldr	s14, [r7, #4]
 800288e:	4bb1      	ldr	r3, [pc, #708]	@ (8002b54 <AcceleroParser+0x300>)
 8002890:	edd3 7a00 	vldr	s15, [r3]
 8002894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002898:	4bae      	ldr	r3, [pc, #696]	@ (8002b54 <AcceleroParser+0x300>)
 800289a:	edc3 7a00 	vstr	s15, [r3]
	  Ybias += fpDataXYZ[1];
 800289e:	ed97 7a02 	vldr	s14, [r7, #8]
 80028a2:	4bad      	ldr	r3, [pc, #692]	@ (8002b58 <AcceleroParser+0x304>)
 80028a4:	edd3 7a00 	vldr	s15, [r3]
 80028a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ac:	4baa      	ldr	r3, [pc, #680]	@ (8002b58 <AcceleroParser+0x304>)
 80028ae:	edc3 7a00 	vstr	s15, [r3]
	  Zbias += fpDataXYZ[2];
 80028b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80028b6:	4ba9      	ldr	r3, [pc, #676]	@ (8002b5c <AcceleroParser+0x308>)
 80028b8:	edd3 7a00 	vldr	s15, [r3]
 80028bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c0:	4ba6      	ldr	r3, [pc, #664]	@ (8002b5c <AcceleroParser+0x308>)
 80028c2:	edc3 7a00 	vstr	s15, [r3]
 80028c6:	e169      	b.n	8002b9c <AcceleroParser+0x348>
  }else if(acceleroTestCount == 32){
 80028c8:	4ba0      	ldr	r3, [pc, #640]	@ (8002b4c <AcceleroParser+0x2f8>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d147      	bne.n	8002960 <AcceleroParser+0x10c>
	  Xbias = Xbias/32.f;
 80028d0:	4ba0      	ldr	r3, [pc, #640]	@ (8002b54 <AcceleroParser+0x300>)
 80028d2:	ed93 7a00 	vldr	s14, [r3]
 80028d6:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 8002b60 <AcceleroParser+0x30c>
 80028da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028de:	4b9d      	ldr	r3, [pc, #628]	@ (8002b54 <AcceleroParser+0x300>)
 80028e0:	edc3 7a00 	vstr	s15, [r3]
	  Ybias = Ybias/32.f;
 80028e4:	4b9c      	ldr	r3, [pc, #624]	@ (8002b58 <AcceleroParser+0x304>)
 80028e6:	ed93 7a00 	vldr	s14, [r3]
 80028ea:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 8002b60 <AcceleroParser+0x30c>
 80028ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028f2:	4b99      	ldr	r3, [pc, #612]	@ (8002b58 <AcceleroParser+0x304>)
 80028f4:	edc3 7a00 	vstr	s15, [r3]
	  Zbias = Zbias/32.f;
 80028f8:	4b98      	ldr	r3, [pc, #608]	@ (8002b5c <AcceleroParser+0x308>)
 80028fa:	ed93 7a00 	vldr	s14, [r3]
 80028fe:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8002b60 <AcceleroParser+0x30c>
 8002902:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002906:	4b95      	ldr	r3, [pc, #596]	@ (8002b5c <AcceleroParser+0x308>)
 8002908:	edc3 7a00 	vstr	s15, [r3]
	  printf("bias set: %f, %f, %f \r\n", Xbias, Ybias, Zbias);
 800290c:	4b91      	ldr	r3, [pc, #580]	@ (8002b54 <AcceleroParser+0x300>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7fd fe19 	bl	8000548 <__aeabi_f2d>
 8002916:	4680      	mov	r8, r0
 8002918:	4689      	mov	r9, r1
 800291a:	4b8f      	ldr	r3, [pc, #572]	@ (8002b58 <AcceleroParser+0x304>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fd fe12 	bl	8000548 <__aeabi_f2d>
 8002924:	4604      	mov	r4, r0
 8002926:	460d      	mov	r5, r1
 8002928:	4b8c      	ldr	r3, [pc, #560]	@ (8002b5c <AcceleroParser+0x308>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7fd fe0b 	bl	8000548 <__aeabi_f2d>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800293a:	e9cd 4500 	strd	r4, r5, [sp]
 800293e:	4642      	mov	r2, r8
 8002940:	464b      	mov	r3, r9
 8002942:	4888      	ldr	r0, [pc, #544]	@ (8002b64 <AcceleroParser+0x310>)
 8002944:	f00b f9bc 	bl	800dcc0 <iprintf>
	  acceleroTestCount++;
 8002948:	4b80      	ldr	r3, [pc, #512]	@ (8002b4c <AcceleroParser+0x2f8>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	3301      	adds	r3, #1
 800294e:	b2da      	uxtb	r2, r3
 8002950:	4b7e      	ldr	r3, [pc, #504]	@ (8002b4c <AcceleroParser+0x2f8>)
 8002952:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8002954:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002958:	487d      	ldr	r0, [pc, #500]	@ (8002b50 <AcceleroParser+0x2fc>)
 800295a:	f003 fc93 	bl	8006284 <HAL_GPIO_TogglePin>
 800295e:	e11d      	b.n	8002b9c <AcceleroParser+0x348>
  }else{
	  //printf("acceleration: %f, %f, %f, speed: %f\r\n", fpDataXYZ[0]-Xbias, fpDataXYZ[1]-Ybias, fpDataXYZ[2]-Zbias, speed);
	  if(fpDataXYZ[1]-Ybias > -5.f && fpDataXYZ[1]-Ybias < 5.f){
 8002960:	ed97 7a02 	vldr	s14, [r7, #8]
 8002964:	4b7c      	ldr	r3, [pc, #496]	@ (8002b58 <AcceleroParser+0x304>)
 8002966:	edd3 7a00 	vldr	s15, [r3]
 800296a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800296e:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 8002972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297a:	f340 809f 	ble.w	8002abc <AcceleroParser+0x268>
 800297e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002982:	4b75      	ldr	r3, [pc, #468]	@ (8002b58 <AcceleroParser+0x304>)
 8002984:	edd3 7a00 	vldr	s15, [r3]
 8002988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800298c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002990:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002998:	f140 8090 	bpl.w	8002abc <AcceleroParser+0x268>
		  if(speed > -10.f && speed < 10.f){ //below 0.10m/s and no acceleration for over 1s -> halts
 800299c:	4b72      	ldr	r3, [pc, #456]	@ (8002b68 <AcceleroParser+0x314>)
 800299e:	edd3 7a00 	vldr	s15, [r3]
 80029a2:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 80029a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ae:	dd2d      	ble.n	8002a0c <AcceleroParser+0x1b8>
 80029b0:	4b6d      	ldr	r3, [pc, #436]	@ (8002b68 <AcceleroParser+0x314>)
 80029b2:	edd3 7a00 	vldr	s15, [r3]
 80029b6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80029ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c2:	d523      	bpl.n	8002a0c <AcceleroParser+0x1b8>
			  ClearSpeedCounter++;
 80029c4:	4b69      	ldr	r3, [pc, #420]	@ (8002b6c <AcceleroParser+0x318>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	3301      	adds	r3, #1
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	4b67      	ldr	r3, [pc, #412]	@ (8002b6c <AcceleroParser+0x318>)
 80029ce:	701a      	strb	r2, [r3, #0]
			  //Probable Re-calibration
			  XNewBias += fpDataXYZ[0];
 80029d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80029d4:	4b66      	ldr	r3, [pc, #408]	@ (8002b70 <AcceleroParser+0x31c>)
 80029d6:	edd3 7a00 	vldr	s15, [r3]
 80029da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029de:	4b64      	ldr	r3, [pc, #400]	@ (8002b70 <AcceleroParser+0x31c>)
 80029e0:	edc3 7a00 	vstr	s15, [r3]
			  YNewBias += fpDataXYZ[1];
 80029e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80029e8:	4b62      	ldr	r3, [pc, #392]	@ (8002b74 <AcceleroParser+0x320>)
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f2:	4b60      	ldr	r3, [pc, #384]	@ (8002b74 <AcceleroParser+0x320>)
 80029f4:	edc3 7a00 	vstr	s15, [r3]
			  ZNewBias += fpDataXYZ[2];
 80029f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80029fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002b78 <AcceleroParser+0x324>)
 80029fe:	edd3 7a00 	vldr	s15, [r3]
 8002a02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a06:	4b5c      	ldr	r3, [pc, #368]	@ (8002b78 <AcceleroParser+0x324>)
 8002a08:	edc3 7a00 	vstr	s15, [r3]
		  }
		  if(ClearSpeedCounter == 8){
 8002a0c:	4b57      	ldr	r3, [pc, #348]	@ (8002b6c <AcceleroParser+0x318>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	f040 80c2 	bne.w	8002b9a <AcceleroParser+0x346>
			  ClearSpeedCounter = 0;
 8002a16:	4b55      	ldr	r3, [pc, #340]	@ (8002b6c <AcceleroParser+0x318>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
			  Xbias = XNewBias / 8.f;
 8002a1c:	4b54      	ldr	r3, [pc, #336]	@ (8002b70 <AcceleroParser+0x31c>)
 8002a1e:	ed93 7a00 	vldr	s14, [r3]
 8002a22:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8002a26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b54 <AcceleroParser+0x300>)
 8002a2c:	edc3 7a00 	vstr	s15, [r3]
			  Ybias = YNewBias / 8.f;
 8002a30:	4b50      	ldr	r3, [pc, #320]	@ (8002b74 <AcceleroParser+0x320>)
 8002a32:	ed93 7a00 	vldr	s14, [r3]
 8002a36:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8002a3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a3e:	4b46      	ldr	r3, [pc, #280]	@ (8002b58 <AcceleroParser+0x304>)
 8002a40:	edc3 7a00 	vstr	s15, [r3]
			  Zbias = ZNewBias / 8.f;
 8002a44:	4b4c      	ldr	r3, [pc, #304]	@ (8002b78 <AcceleroParser+0x324>)
 8002a46:	ed93 7a00 	vldr	s14, [r3]
 8002a4a:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8002a4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a52:	4b42      	ldr	r3, [pc, #264]	@ (8002b5c <AcceleroParser+0x308>)
 8002a54:	edc3 7a00 	vstr	s15, [r3]
			  ClearSpeedCounter = 0;
 8002a58:	4b44      	ldr	r3, [pc, #272]	@ (8002b6c <AcceleroParser+0x318>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
			  XNewBias = 0;
 8002a5e:	4b44      	ldr	r3, [pc, #272]	@ (8002b70 <AcceleroParser+0x31c>)
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
			  YNewBias = 0;
 8002a66:	4b43      	ldr	r3, [pc, #268]	@ (8002b74 <AcceleroParser+0x320>)
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
			  ZNewBias = 0;
 8002a6e:	4b42      	ldr	r3, [pc, #264]	@ (8002b78 <AcceleroParser+0x324>)
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
			  printf("bias set: %f, %f, %f \r\n", Xbias, Ybias, Zbias);
 8002a76:	4b37      	ldr	r3, [pc, #220]	@ (8002b54 <AcceleroParser+0x300>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fd fd64 	bl	8000548 <__aeabi_f2d>
 8002a80:	4680      	mov	r8, r0
 8002a82:	4689      	mov	r9, r1
 8002a84:	4b34      	ldr	r3, [pc, #208]	@ (8002b58 <AcceleroParser+0x304>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fd fd5d 	bl	8000548 <__aeabi_f2d>
 8002a8e:	4604      	mov	r4, r0
 8002a90:	460d      	mov	r5, r1
 8002a92:	4b32      	ldr	r3, [pc, #200]	@ (8002b5c <AcceleroParser+0x308>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd fd56 	bl	8000548 <__aeabi_f2d>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002aa4:	e9cd 4500 	strd	r4, r5, [sp]
 8002aa8:	4642      	mov	r2, r8
 8002aaa:	464b      	mov	r3, r9
 8002aac:	482d      	ldr	r0, [pc, #180]	@ (8002b64 <AcceleroParser+0x310>)
 8002aae:	f00b f907 	bl	800dcc0 <iprintf>
			  speed = 0;
 8002ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8002b68 <AcceleroParser+0x314>)
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	e06f      	b.n	8002b9c <AcceleroParser+0x348>
		  }
		  return;
	  }else{
		  if(ClearSpeedCounter != 0){
 8002abc:	4b2b      	ldr	r3, [pc, #172]	@ (8002b6c <AcceleroParser+0x318>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00e      	beq.n	8002ae2 <AcceleroParser+0x28e>
			  ClearSpeedCounter = 0;
 8002ac4:	4b29      	ldr	r3, [pc, #164]	@ (8002b6c <AcceleroParser+0x318>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
			  XNewBias = 0;
 8002aca:	4b29      	ldr	r3, [pc, #164]	@ (8002b70 <AcceleroParser+0x31c>)
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
			  YNewBias = 0;
 8002ad2:	4b28      	ldr	r3, [pc, #160]	@ (8002b74 <AcceleroParser+0x320>)
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
			  ZNewBias = 0;
 8002ada:	4b27      	ldr	r3, [pc, #156]	@ (8002b78 <AcceleroParser+0x324>)
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
		  }
		  speed += (fpDataXYZ[1]-Ybias)/8.f;
 8002ae2:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b58 <AcceleroParser+0x304>)
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af0:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8002af4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002af8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b68 <AcceleroParser+0x314>)
 8002afa:	edd3 7a00 	vldr	s15, [r3]
 8002afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b02:	4b19      	ldr	r3, [pc, #100]	@ (8002b68 <AcceleroParser+0x314>)
 8002b04:	edc3 7a00 	vstr	s15, [r3]
	  }

	  if((speed > 10.f || speed < -10.f)){
 8002b08:	4b17      	ldr	r3, [pc, #92]	@ (8002b68 <AcceleroParser+0x314>)
 8002b0a:	edd3 7a00 	vldr	s15, [r3]
 8002b0e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1a:	dc09      	bgt.n	8002b30 <AcceleroParser+0x2dc>
 8002b1c:	4b12      	ldr	r3, [pc, #72]	@ (8002b68 <AcceleroParser+0x314>)
 8002b1e:	edd3 7a00 	vldr	s15, [r3]
 8002b22:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8002b26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2e:	d527      	bpl.n	8002b80 <AcceleroParser+0x32c>
		  if(motion_state == 0){
 8002b30:	4b12      	ldr	r3, [pc, #72]	@ (8002b7c <AcceleroParser+0x328>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d131      	bne.n	8002b9c <AcceleroParser+0x348>
			  motion_state = 1;
 8002b38:	4b10      	ldr	r3, [pc, #64]	@ (8002b7c <AcceleroParser+0x328>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);//motion indicator
 8002b3e:	2110      	movs	r1, #16
 8002b40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b44:	f003 fb9e 	bl	8006284 <HAL_GPIO_TogglePin>
		  if(motion_state == 0){
 8002b48:	e028      	b.n	8002b9c <AcceleroParser+0x348>
 8002b4a:	bf00      	nop
 8002b4c:	20000b8d 	.word	0x20000b8d
 8002b50:	48000800 	.word	0x48000800
 8002b54:	20000b90 	.word	0x20000b90
 8002b58:	20000b94 	.word	0x20000b94
 8002b5c:	20000b98 	.word	0x20000b98
 8002b60:	42000000 	.word	0x42000000
 8002b64:	08011948 	.word	0x08011948
 8002b68:	20000b88 	.word	0x20000b88
 8002b6c:	20000b9c 	.word	0x20000b9c
 8002b70:	20000ba0 	.word	0x20000ba0
 8002b74:	20000ba4 	.word	0x20000ba4
 8002b78:	20000ba8 	.word	0x20000ba8
 8002b7c:	20000b8c 	.word	0x20000b8c
		  }
	  }else if(motion_state == 1){
 8002b80:	4b08      	ldr	r3, [pc, #32]	@ (8002ba4 <AcceleroParser+0x350>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d109      	bne.n	8002b9c <AcceleroParser+0x348>
		  motion_state = 0;
 8002b88:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <AcceleroParser+0x350>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8002b8e:	2110      	movs	r1, #16
 8002b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b94:	f003 fb76 	bl	8006284 <HAL_GPIO_TogglePin>
 8002b98:	e000      	b.n	8002b9c <AcceleroParser+0x348>
		  return;
 8002b9a:	bf00      	nop
	   * BSP_ACCELERO_SetReadMode(ACCELERO_READ_INT);
	   * before a normal BSP_ACCELERO_AccGetXYZ(int16_t*) is called.
	   *
	   * */

}
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ba4:	20000b8c 	.word	0x20000b8c

08002ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bac:	b672      	cpsid	i
}
 8002bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("error handler called \r\n");
 8002bb0:	4802      	ldr	r0, [pc, #8]	@ (8002bbc <Error_Handler+0x14>)
 8002bb2:	f00b f8ed 	bl	800dd90 <puts>
  while (1)
 8002bb6:	bf00      	nop
 8002bb8:	e7fd      	b.n	8002bb6 <Error_Handler+0xe>
 8002bba:	bf00      	nop
 8002bbc:	08011960 	.word	0x08011960

08002bc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c04 <HAL_MspInit+0x44>)
 8002bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bca:	4a0e      	ldr	r2, [pc, #56]	@ (8002c04 <HAL_MspInit+0x44>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002c04 <HAL_MspInit+0x44>)
 8002bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <HAL_MspInit+0x44>)
 8002be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be2:	4a08      	ldr	r2, [pc, #32]	@ (8002c04 <HAL_MspInit+0x44>)
 8002be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bea:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <HAL_MspInit+0x44>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000

08002c08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	@ 0x28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c10:	f107 0314 	add.w	r3, r7, #20
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a19      	ldr	r2, [pc, #100]	@ (8002c8c <HAL_ADC_MspInit+0x84>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d12b      	bne.n	8002c82 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002c2a:	4b19      	ldr	r3, [pc, #100]	@ (8002c90 <HAL_ADC_MspInit+0x88>)
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c2e:	4a18      	ldr	r2, [pc, #96]	@ (8002c90 <HAL_ADC_MspInit+0x88>)
 8002c30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c36:	4b16      	ldr	r3, [pc, #88]	@ (8002c90 <HAL_ADC_MspInit+0x88>)
 8002c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c42:	4b13      	ldr	r3, [pc, #76]	@ (8002c90 <HAL_ADC_MspInit+0x88>)
 8002c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c46:	4a12      	ldr	r2, [pc, #72]	@ (8002c90 <HAL_ADC_MspInit+0x88>)
 8002c48:	f043 0304 	orr.w	r3, r3, #4
 8002c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c4e:	4b10      	ldr	r3, [pc, #64]	@ (8002c90 <HAL_ADC_MspInit+0x88>)
 8002c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002c5a:	233f      	movs	r3, #63	@ 0x3f
 8002c5c:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002c5e:	230b      	movs	r3, #11
 8002c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c66:	f107 0314 	add.w	r3, r7, #20
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4809      	ldr	r0, [pc, #36]	@ (8002c94 <HAL_ADC_MspInit+0x8c>)
 8002c6e:	f003 f83b 	bl	8005ce8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002c72:	2200      	movs	r2, #0
 8002c74:	2100      	movs	r1, #0
 8002c76:	2012      	movs	r0, #18
 8002c78:	f002 fe95 	bl	80059a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002c7c:	2012      	movs	r0, #18
 8002c7e:	f002 feae 	bl	80059de <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002c82:	bf00      	nop
 8002c84:	3728      	adds	r7, #40	@ 0x28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	50040000 	.word	0x50040000
 8002c90:	40021000 	.word	0x40021000
 8002c94:	48000800 	.word	0x48000800

08002c98 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b0ac      	sub	sp, #176	@ 0xb0
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	2288      	movs	r2, #136	@ 0x88
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f00b f969 	bl	800df90 <memset>
  if(DFSDM1_Init == 0)
 8002cbe:	4b25      	ldr	r3, [pc, #148]	@ (8002d54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d142      	bne.n	8002d4c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002cc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f005 f9ca 	bl	8008070 <HAL_RCCEx_PeriphCLKConfig>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8002ce2:	f7ff ff61 	bl	8002ba8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cea:	4a1b      	ldr	r2, [pc, #108]	@ (8002d58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002cec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cf2:	4b19      	ldr	r3, [pc, #100]	@ (8002d58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cfe:	4b16      	ldr	r3, [pc, #88]	@ (8002d58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d02:	4a15      	ldr	r2, [pc, #84]	@ (8002d58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002d04:	f043 0310 	orr.w	r3, r3, #16
 8002d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d0a:	4b13      	ldr	r3, [pc, #76]	@ (8002d58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002d16:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8002d1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002d30:	2306      	movs	r3, #6
 8002d32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d36:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4807      	ldr	r0, [pc, #28]	@ (8002d5c <HAL_DFSDM_ChannelMspInit+0xc4>)
 8002d3e:	f002 ffd3 	bl	8005ce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8002d42:	4b04      	ldr	r3, [pc, #16]	@ (8002d54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3301      	adds	r3, #1
 8002d48:	4a02      	ldr	r2, [pc, #8]	@ (8002d54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002d4a:	6013      	str	r3, [r2, #0]
  }

}
 8002d4c:	bf00      	nop
 8002d4e:	37b0      	adds	r7, #176	@ 0xb0
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000bac 	.word	0x20000bac
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	48001000 	.word	0x48001000

08002d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b0ac      	sub	sp, #176	@ 0xb0
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d78:	f107 0314 	add.w	r3, r7, #20
 8002d7c:	2288      	movs	r2, #136	@ 0x88
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f00b f905 	bl	800df90 <memset>
  if(hi2c->Instance==I2C2)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a21      	ldr	r2, [pc, #132]	@ (8002e10 <HAL_I2C_MspInit+0xb0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d13b      	bne.n	8002e08 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002d90:	2380      	movs	r3, #128	@ 0x80
 8002d92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002d94:	2300      	movs	r3, #0
 8002d96:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d98:	f107 0314 	add.w	r3, r7, #20
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f005 f967 	bl	8008070 <HAL_RCCEx_PeriphCLKConfig>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002da8:	f7ff fefe 	bl	8002ba8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dac:	4b19      	ldr	r3, [pc, #100]	@ (8002e14 <HAL_I2C_MspInit+0xb4>)
 8002dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db0:	4a18      	ldr	r2, [pc, #96]	@ (8002e14 <HAL_I2C_MspInit+0xb4>)
 8002db2:	f043 0302 	orr.w	r3, r3, #2
 8002db6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002db8:	4b16      	ldr	r3, [pc, #88]	@ (8002e14 <HAL_I2C_MspInit+0xb4>)
 8002dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002dc4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002dc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dcc:	2312      	movs	r3, #18
 8002dce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002dde:	2304      	movs	r3, #4
 8002de0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002de8:	4619      	mov	r1, r3
 8002dea:	480b      	ldr	r0, [pc, #44]	@ (8002e18 <HAL_I2C_MspInit+0xb8>)
 8002dec:	f002 ff7c 	bl	8005ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002df0:	4b08      	ldr	r3, [pc, #32]	@ (8002e14 <HAL_I2C_MspInit+0xb4>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df4:	4a07      	ldr	r2, [pc, #28]	@ (8002e14 <HAL_I2C_MspInit+0xb4>)
 8002df6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dfc:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <HAL_I2C_MspInit+0xb4>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002e08:	bf00      	nop
 8002e0a:	37b0      	adds	r7, #176	@ 0xb0
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40005800 	.word	0x40005800
 8002e14:	40021000 	.word	0x40021000
 8002e18:	48000400 	.word	0x48000400

08002e1c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a0b      	ldr	r2, [pc, #44]	@ (8002e58 <HAL_I2C_MspDeInit+0x3c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d10f      	bne.n	8002e4e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e5c <HAL_I2C_MspDeInit+0x40>)
 8002e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e32:	4a0a      	ldr	r2, [pc, #40]	@ (8002e5c <HAL_I2C_MspDeInit+0x40>)
 8002e34:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002e38:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8002e3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e3e:	4808      	ldr	r0, [pc, #32]	@ (8002e60 <HAL_I2C_MspDeInit+0x44>)
 8002e40:	f003 f8fc 	bl	800603c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002e44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002e48:	4805      	ldr	r0, [pc, #20]	@ (8002e60 <HAL_I2C_MspDeInit+0x44>)
 8002e4a:	f003 f8f7 	bl	800603c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40005800 	.word	0x40005800
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	48000400 	.word	0x48000400

08002e64 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	@ 0x28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a17      	ldr	r2, [pc, #92]	@ (8002ee0 <HAL_QSPI_MspInit+0x7c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d128      	bne.n	8002ed8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002e86:	4b17      	ldr	r3, [pc, #92]	@ (8002ee4 <HAL_QSPI_MspInit+0x80>)
 8002e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e8a:	4a16      	ldr	r2, [pc, #88]	@ (8002ee4 <HAL_QSPI_MspInit+0x80>)
 8002e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e90:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e92:	4b14      	ldr	r3, [pc, #80]	@ (8002ee4 <HAL_QSPI_MspInit+0x80>)
 8002e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9a:	613b      	str	r3, [r7, #16]
 8002e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ee4 <HAL_QSPI_MspInit+0x80>)
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea2:	4a10      	ldr	r2, [pc, #64]	@ (8002ee4 <HAL_QSPI_MspInit+0x80>)
 8002ea4:	f043 0310 	orr.w	r3, r3, #16
 8002ea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee4 <HAL_QSPI_MspInit+0x80>)
 8002eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002eb6:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002eba:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002ec8:	230a      	movs	r3, #10
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4805      	ldr	r0, [pc, #20]	@ (8002ee8 <HAL_QSPI_MspInit+0x84>)
 8002ed4:	f002 ff08 	bl	8005ce8 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002ed8:	bf00      	nop
 8002eda:	3728      	adds	r7, #40	@ 0x28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	a0001000 	.word	0xa0001000
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	48001000 	.word	0x48001000

08002eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08c      	sub	sp, #48	@ 0x30
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	f107 031c 	add.w	r3, r7, #28
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f0c:	d131      	bne.n	8002f72 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f0e:	4b34      	ldr	r3, [pc, #208]	@ (8002fe0 <HAL_TIM_Base_MspInit+0xf4>)
 8002f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f12:	4a33      	ldr	r2, [pc, #204]	@ (8002fe0 <HAL_TIM_Base_MspInit+0xf4>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f1a:	4b31      	ldr	r3, [pc, #196]	@ (8002fe0 <HAL_TIM_Base_MspInit+0xf4>)
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	61bb      	str	r3, [r7, #24]
 8002f24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f26:	4b2e      	ldr	r3, [pc, #184]	@ (8002fe0 <HAL_TIM_Base_MspInit+0xf4>)
 8002f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2a:	4a2d      	ldr	r2, [pc, #180]	@ (8002fe0 <HAL_TIM_Base_MspInit+0xf4>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f32:	4b2b      	ldr	r3, [pc, #172]	@ (8002fe0 <HAL_TIM_Base_MspInit+0xf4>)
 8002f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 8002f3e:	2308      	movs	r3, #8
 8002f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f42:	2302      	movs	r3, #2
 8002f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8002f52:	f107 031c 	add.w	r3, r7, #28
 8002f56:	4619      	mov	r1, r3
 8002f58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f5c:	f002 fec4 	bl	8005ce8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f60:	2200      	movs	r2, #0
 8002f62:	2100      	movs	r1, #0
 8002f64:	201c      	movs	r0, #28
 8002f66:	f002 fd1e 	bl	80059a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f6a:	201c      	movs	r0, #28
 8002f6c:	f002 fd37 	bl	80059de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002f70:	e032      	b.n	8002fd8 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM3)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe4 <HAL_TIM_Base_MspInit+0xf8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d114      	bne.n	8002fa6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f7c:	4b18      	ldr	r3, [pc, #96]	@ (8002fe0 <HAL_TIM_Base_MspInit+0xf4>)
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f80:	4a17      	ldr	r2, [pc, #92]	@ (8002fe0 <HAL_TIM_Base_MspInit+0xf4>)
 8002f82:	f043 0302 	orr.w	r3, r3, #2
 8002f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f88:	4b15      	ldr	r3, [pc, #84]	@ (8002fe0 <HAL_TIM_Base_MspInit+0xf4>)
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f94:	2200      	movs	r2, #0
 8002f96:	2100      	movs	r1, #0
 8002f98:	201d      	movs	r0, #29
 8002f9a:	f002 fd04 	bl	80059a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f9e:	201d      	movs	r0, #29
 8002fa0:	f002 fd1d 	bl	80059de <HAL_NVIC_EnableIRQ>
}
 8002fa4:	e018      	b.n	8002fd8 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM5)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a0f      	ldr	r2, [pc, #60]	@ (8002fe8 <HAL_TIM_Base_MspInit+0xfc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d113      	bne.n	8002fd8 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <HAL_TIM_Base_MspInit+0xf4>)
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe0 <HAL_TIM_Base_MspInit+0xf4>)
 8002fb6:	f043 0308 	orr.w	r3, r3, #8
 8002fba:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fbc:	4b08      	ldr	r3, [pc, #32]	@ (8002fe0 <HAL_TIM_Base_MspInit+0xf4>)
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2100      	movs	r1, #0
 8002fcc:	2032      	movs	r0, #50	@ 0x32
 8002fce:	f002 fcea 	bl	80059a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002fd2:	2032      	movs	r0, #50	@ 0x32
 8002fd4:	f002 fd03 	bl	80059de <HAL_NVIC_EnableIRQ>
}
 8002fd8:	bf00      	nop
 8002fda:	3730      	adds	r7, #48	@ 0x30
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40000400 	.word	0x40000400
 8002fe8:	40000c00 	.word	0x40000c00

08002fec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff4:	f107 030c 	add.w	r3, r7, #12
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a11      	ldr	r2, [pc, #68]	@ (8003050 <HAL_TIM_MspPostInit+0x64>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d11b      	bne.n	8003046 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800300e:	4b11      	ldr	r3, [pc, #68]	@ (8003054 <HAL_TIM_MspPostInit+0x68>)
 8003010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003012:	4a10      	ldr	r2, [pc, #64]	@ (8003054 <HAL_TIM_MspPostInit+0x68>)
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800301a:	4b0e      	ldr	r3, [pc, #56]	@ (8003054 <HAL_TIM_MspPostInit+0x68>)
 800301c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8003026:	2312      	movs	r3, #18
 8003028:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302a:	2302      	movs	r3, #2
 800302c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003032:	2300      	movs	r3, #0
 8003034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003036:	2302      	movs	r3, #2
 8003038:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303a:	f107 030c 	add.w	r3, r7, #12
 800303e:	4619      	mov	r1, r3
 8003040:	4805      	ldr	r0, [pc, #20]	@ (8003058 <HAL_TIM_MspPostInit+0x6c>)
 8003042:	f002 fe51 	bl	8005ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003046:	bf00      	nop
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40000400 	.word	0x40000400
 8003054:	40021000 	.word	0x40021000
 8003058:	48000400 	.word	0x48000400

0800305c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b0ae      	sub	sp, #184	@ 0xb8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003074:	f107 031c 	add.w	r3, r7, #28
 8003078:	2288      	movs	r2, #136	@ 0x88
 800307a:	2100      	movs	r1, #0
 800307c:	4618      	mov	r0, r3
 800307e:	f00a ff87 	bl	800df90 <memset>
  if(huart->Instance==USART1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a42      	ldr	r2, [pc, #264]	@ (8003190 <HAL_UART_MspInit+0x134>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d13b      	bne.n	8003104 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800308c:	2301      	movs	r3, #1
 800308e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003090:	2300      	movs	r3, #0
 8003092:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003094:	f107 031c 	add.w	r3, r7, #28
 8003098:	4618      	mov	r0, r3
 800309a:	f004 ffe9 	bl	8008070 <HAL_RCCEx_PeriphCLKConfig>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80030a4:	f7ff fd80 	bl	8002ba8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030a8:	4b3a      	ldr	r3, [pc, #232]	@ (8003194 <HAL_UART_MspInit+0x138>)
 80030aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ac:	4a39      	ldr	r2, [pc, #228]	@ (8003194 <HAL_UART_MspInit+0x138>)
 80030ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80030b4:	4b37      	ldr	r3, [pc, #220]	@ (8003194 <HAL_UART_MspInit+0x138>)
 80030b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c0:	4b34      	ldr	r3, [pc, #208]	@ (8003194 <HAL_UART_MspInit+0x138>)
 80030c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c4:	4a33      	ldr	r2, [pc, #204]	@ (8003194 <HAL_UART_MspInit+0x138>)
 80030c6:	f043 0302 	orr.w	r3, r3, #2
 80030ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030cc:	4b31      	ldr	r3, [pc, #196]	@ (8003194 <HAL_UART_MspInit+0x138>)
 80030ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80030d8:	23c0      	movs	r3, #192	@ 0xc0
 80030da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030de:	2302      	movs	r3, #2
 80030e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ea:	2303      	movs	r3, #3
 80030ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030f0:	2307      	movs	r3, #7
 80030f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80030fa:	4619      	mov	r1, r3
 80030fc:	4826      	ldr	r0, [pc, #152]	@ (8003198 <HAL_UART_MspInit+0x13c>)
 80030fe:	f002 fdf3 	bl	8005ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003102:	e040      	b.n	8003186 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a24      	ldr	r2, [pc, #144]	@ (800319c <HAL_UART_MspInit+0x140>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d13b      	bne.n	8003186 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800310e:	2304      	movs	r3, #4
 8003110:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003112:	2300      	movs	r3, #0
 8003114:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003116:	f107 031c 	add.w	r3, r7, #28
 800311a:	4618      	mov	r0, r3
 800311c:	f004 ffa8 	bl	8008070 <HAL_RCCEx_PeriphCLKConfig>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8003126:	f7ff fd3f 	bl	8002ba8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800312a:	4b1a      	ldr	r3, [pc, #104]	@ (8003194 <HAL_UART_MspInit+0x138>)
 800312c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312e:	4a19      	ldr	r2, [pc, #100]	@ (8003194 <HAL_UART_MspInit+0x138>)
 8003130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003134:	6593      	str	r3, [r2, #88]	@ 0x58
 8003136:	4b17      	ldr	r3, [pc, #92]	@ (8003194 <HAL_UART_MspInit+0x138>)
 8003138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003142:	4b14      	ldr	r3, [pc, #80]	@ (8003194 <HAL_UART_MspInit+0x138>)
 8003144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003146:	4a13      	ldr	r2, [pc, #76]	@ (8003194 <HAL_UART_MspInit+0x138>)
 8003148:	f043 0308 	orr.w	r3, r3, #8
 800314c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800314e:	4b11      	ldr	r3, [pc, #68]	@ (8003194 <HAL_UART_MspInit+0x138>)
 8003150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800315a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800315e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003162:	2302      	movs	r3, #2
 8003164:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800316e:	2303      	movs	r3, #3
 8003170:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003174:	2307      	movs	r3, #7
 8003176:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800317a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800317e:	4619      	mov	r1, r3
 8003180:	4807      	ldr	r0, [pc, #28]	@ (80031a0 <HAL_UART_MspInit+0x144>)
 8003182:	f002 fdb1 	bl	8005ce8 <HAL_GPIO_Init>
}
 8003186:	bf00      	nop
 8003188:	37b8      	adds	r7, #184	@ 0xb8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40013800 	.word	0x40013800
 8003194:	40021000 	.word	0x40021000
 8003198:	48000400 	.word	0x48000400
 800319c:	40004800 	.word	0x40004800
 80031a0:	48000c00 	.word	0x48000c00

080031a4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08a      	sub	sp, #40	@ 0x28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031c4:	d154      	bne.n	8003270 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003278 <HAL_PCD_MspInit+0xd4>)
 80031c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003278 <HAL_PCD_MspInit+0xd4>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031d2:	4b29      	ldr	r3, [pc, #164]	@ (8003278 <HAL_PCD_MspInit+0xd4>)
 80031d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80031de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80031ec:	f107 0314 	add.w	r3, r7, #20
 80031f0:	4619      	mov	r1, r3
 80031f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031f6:	f002 fd77 	bl	8005ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80031fa:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80031fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003200:	2302      	movs	r3, #2
 8003202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003208:	2303      	movs	r3, #3
 800320a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800320c:	230a      	movs	r3, #10
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	4619      	mov	r1, r3
 8003216:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800321a:	f002 fd65 	bl	8005ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800321e:	4b16      	ldr	r3, [pc, #88]	@ (8003278 <HAL_PCD_MspInit+0xd4>)
 8003220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003222:	4a15      	ldr	r2, [pc, #84]	@ (8003278 <HAL_PCD_MspInit+0xd4>)
 8003224:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800322a:	4b13      	ldr	r3, [pc, #76]	@ (8003278 <HAL_PCD_MspInit+0xd4>)
 800322c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800322e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003236:	4b10      	ldr	r3, [pc, #64]	@ (8003278 <HAL_PCD_MspInit+0xd4>)
 8003238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d114      	bne.n	800326c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	4b0d      	ldr	r3, [pc, #52]	@ (8003278 <HAL_PCD_MspInit+0xd4>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003246:	4a0c      	ldr	r2, [pc, #48]	@ (8003278 <HAL_PCD_MspInit+0xd4>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800324c:	6593      	str	r3, [r2, #88]	@ 0x58
 800324e:	4b0a      	ldr	r3, [pc, #40]	@ (8003278 <HAL_PCD_MspInit+0xd4>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800325a:	f004 f83d 	bl	80072d8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800325e:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <HAL_PCD_MspInit+0xd4>)
 8003260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003262:	4a05      	ldr	r2, [pc, #20]	@ (8003278 <HAL_PCD_MspInit+0xd4>)
 8003264:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003268:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800326a:	e001      	b.n	8003270 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 800326c:	f004 f834 	bl	80072d8 <HAL_PWREx_EnableVddUSB>
}
 8003270:	bf00      	nop
 8003272:	3728      	adds	r7, #40	@ 0x28
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000

0800327c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003280:	bf00      	nop
 8003282:	e7fd      	b.n	8003280 <NMI_Handler+0x4>

08003284 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003288:	bf00      	nop
 800328a:	e7fd      	b.n	8003288 <HardFault_Handler+0x4>

0800328c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003290:	bf00      	nop
 8003292:	e7fd      	b.n	8003290 <MemManage_Handler+0x4>

08003294 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003298:	bf00      	nop
 800329a:	e7fd      	b.n	8003298 <BusFault_Handler+0x4>

0800329c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032a0:	bf00      	nop
 80032a2:	e7fd      	b.n	80032a0 <UsageFault_Handler+0x4>

080032a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032b2:	b480      	push	{r7}
 80032b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032b6:	bf00      	nop
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032d2:	f000 fe19 	bl	8003f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032d6:	bf00      	nop
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80032e0:	4802      	ldr	r0, [pc, #8]	@ (80032ec <ADC1_2_IRQHandler+0x10>)
 80032e2:	f001 fad7 	bl	8004894 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	2000036c 	.word	0x2000036c

080032f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80032f4:	2020      	movs	r0, #32
 80032f6:	f002 ffdf 	bl	80062b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 80032fa:	4806      	ldr	r0, [pc, #24]	@ (8003314 <EXTI9_5_IRQHandler+0x24>)
 80032fc:	f002 fcc4 	bl	8005c88 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8003300:	2080      	movs	r0, #128	@ 0x80
 8003302:	f002 ffd9 	bl	80062b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8003306:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800330a:	f002 ffd5 	bl	80062b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20000264 	.word	0x20000264

08003318 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800331c:	4802      	ldr	r0, [pc, #8]	@ (8003328 <TIM2_IRQHandler+0x10>)
 800331e:	f006 fb41 	bl	80099a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	200004a0 	.word	0x200004a0

0800332c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003330:	4802      	ldr	r0, [pc, #8]	@ (800333c <TIM3_IRQHandler+0x10>)
 8003332:	f006 fb37 	bl	80099a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200004ec 	.word	0x200004ec

08003340 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8003344:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003348:	f002 ffb6 	bl	80062b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800334c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003350:	f002 ffb2 	bl	80062b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8003354:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003358:	f002 ffae 	bl	80062b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800335c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003360:	f002 ffaa 	bl	80062b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8003364:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003368:	f002 ffa6 	bl	80062b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800336c:	bf00      	nop
 800336e:	bd80      	pop	{r7, pc}

08003370 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003374:	4802      	ldr	r0, [pc, #8]	@ (8003380 <TIM5_IRQHandler+0x10>)
 8003376:	f006 fb15 	bl	80099a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000538 	.word	0x20000538

08003384 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return 1;
 8003388:	2301      	movs	r3, #1
}
 800338a:	4618      	mov	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <_kill>:

int _kill(int pid, int sig)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800339e:	f00a fe49 	bl	800e034 <__errno>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2216      	movs	r2, #22
 80033a6:	601a      	str	r2, [r3, #0]
  return -1;
 80033a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <_exit>:

void _exit (int status)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033bc:	f04f 31ff 	mov.w	r1, #4294967295
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ffe7 	bl	8003394 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033c6:	bf00      	nop
 80033c8:	e7fd      	b.n	80033c6 <_exit+0x12>

080033ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b086      	sub	sp, #24
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	e00a      	b.n	80033f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033dc:	f3af 8000 	nop.w
 80033e0:	4601      	mov	r1, r0
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	60ba      	str	r2, [r7, #8]
 80033e8:	b2ca      	uxtb	r2, r1
 80033ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	3301      	adds	r3, #1
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	dbf0      	blt.n	80033dc <_read+0x12>
  }

  return len;
 80033fa:	687b      	ldr	r3, [r7, #4]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	e009      	b.n	800342a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	60ba      	str	r2, [r7, #8]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fa06 	bl	8002830 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	3301      	adds	r3, #1
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	429a      	cmp	r2, r3
 8003430:	dbf1      	blt.n	8003416 <_write+0x12>
  }
  return len;
 8003432:	687b      	ldr	r3, [r7, #4]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <_close>:

int _close(int file)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003464:	605a      	str	r2, [r3, #4]
  return 0;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <_isatty>:

int _isatty(int file)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800347c:	2301      	movs	r3, #1
}
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800348a:	b480      	push	{r7}
 800348c:	b085      	sub	sp, #20
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034ac:	4a14      	ldr	r2, [pc, #80]	@ (8003500 <_sbrk+0x5c>)
 80034ae:	4b15      	ldr	r3, [pc, #84]	@ (8003504 <_sbrk+0x60>)
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034b8:	4b13      	ldr	r3, [pc, #76]	@ (8003508 <_sbrk+0x64>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034c0:	4b11      	ldr	r3, [pc, #68]	@ (8003508 <_sbrk+0x64>)
 80034c2:	4a12      	ldr	r2, [pc, #72]	@ (800350c <_sbrk+0x68>)
 80034c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034c6:	4b10      	ldr	r3, [pc, #64]	@ (8003508 <_sbrk+0x64>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d207      	bcs.n	80034e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034d4:	f00a fdae 	bl	800e034 <__errno>
 80034d8:	4603      	mov	r3, r0
 80034da:	220c      	movs	r2, #12
 80034dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034de:	f04f 33ff 	mov.w	r3, #4294967295
 80034e2:	e009      	b.n	80034f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034e4:	4b08      	ldr	r3, [pc, #32]	@ (8003508 <_sbrk+0x64>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034ea:	4b07      	ldr	r3, [pc, #28]	@ (8003508 <_sbrk+0x64>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	4a05      	ldr	r2, [pc, #20]	@ (8003508 <_sbrk+0x64>)
 80034f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034f6:	68fb      	ldr	r3, [r7, #12]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20018000 	.word	0x20018000
 8003504:	00000400 	.word	0x00000400
 8003508:	20000bb0 	.word	0x20000bb0
 800350c:	200010d8 	.word	0x200010d8

08003510 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003514:	4b06      	ldr	r3, [pc, #24]	@ (8003530 <SystemInit+0x20>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351a:	4a05      	ldr	r2, [pc, #20]	@ (8003530 <SystemInit+0x20>)
 800351c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003520:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003524:	bf00      	nop
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003534:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800356c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003538:	f7ff ffea 	bl	8003510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800353c:	480c      	ldr	r0, [pc, #48]	@ (8003570 <LoopForever+0x6>)
  ldr r1, =_edata
 800353e:	490d      	ldr	r1, [pc, #52]	@ (8003574 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003540:	4a0d      	ldr	r2, [pc, #52]	@ (8003578 <LoopForever+0xe>)
  movs r3, #0
 8003542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003544:	e002      	b.n	800354c <LoopCopyDataInit>

08003546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800354a:	3304      	adds	r3, #4

0800354c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800354c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800354e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003550:	d3f9      	bcc.n	8003546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003552:	4a0a      	ldr	r2, [pc, #40]	@ (800357c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003554:	4c0a      	ldr	r4, [pc, #40]	@ (8003580 <LoopForever+0x16>)
  movs r3, #0
 8003556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003558:	e001      	b.n	800355e <LoopFillZerobss>

0800355a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800355a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800355c:	3204      	adds	r2, #4

0800355e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800355e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003560:	d3fb      	bcc.n	800355a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003562:	f00a fd6d 	bl	800e040 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003566:	f7fe fa71 	bl	8001a4c <main>

0800356a <LoopForever>:

LoopForever:
    b LoopForever
 800356a:	e7fe      	b.n	800356a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800356c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003574:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8003578:	08011e00 	.word	0x08011e00
  ldr r2, =_sbss
 800357c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003580:	200010d4 	.word	0x200010d4

08003584 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003584:	e7fe      	b.n	8003584 <ADC3_IRQHandler>
	...

08003588 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	@ 0x28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003590:	4b27      	ldr	r3, [pc, #156]	@ (8003630 <I2Cx_MspInit+0xa8>)
 8003592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003594:	4a26      	ldr	r2, [pc, #152]	@ (8003630 <I2Cx_MspInit+0xa8>)
 8003596:	f043 0302 	orr.w	r3, r3, #2
 800359a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800359c:	4b24      	ldr	r3, [pc, #144]	@ (8003630 <I2Cx_MspInit+0xa8>)
 800359e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80035a8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80035ac:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80035ae:	2312      	movs	r3, #18
 80035b0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80035b2:	2301      	movs	r3, #1
 80035b4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b6:	2303      	movs	r3, #3
 80035b8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80035ba:	2304      	movs	r3, #4
 80035bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80035be:	f107 0314 	add.w	r3, r7, #20
 80035c2:	4619      	mov	r1, r3
 80035c4:	481b      	ldr	r0, [pc, #108]	@ (8003634 <I2Cx_MspInit+0xac>)
 80035c6:	f002 fb8f 	bl	8005ce8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80035ca:	f107 0314 	add.w	r3, r7, #20
 80035ce:	4619      	mov	r1, r3
 80035d0:	4818      	ldr	r0, [pc, #96]	@ (8003634 <I2Cx_MspInit+0xac>)
 80035d2:	f002 fb89 	bl	8005ce8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80035d6:	4b16      	ldr	r3, [pc, #88]	@ (8003630 <I2Cx_MspInit+0xa8>)
 80035d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035da:	4a15      	ldr	r2, [pc, #84]	@ (8003630 <I2Cx_MspInit+0xa8>)
 80035dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80035e2:	4b13      	ldr	r3, [pc, #76]	@ (8003630 <I2Cx_MspInit+0xa8>)
 80035e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80035ee:	4b10      	ldr	r3, [pc, #64]	@ (8003630 <I2Cx_MspInit+0xa8>)
 80035f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f2:	4a0f      	ldr	r2, [pc, #60]	@ (8003630 <I2Cx_MspInit+0xa8>)
 80035f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035f8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80035fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003630 <I2Cx_MspInit+0xa8>)
 80035fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fe:	4a0c      	ldr	r2, [pc, #48]	@ (8003630 <I2Cx_MspInit+0xa8>)
 8003600:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003604:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003606:	2200      	movs	r2, #0
 8003608:	210f      	movs	r1, #15
 800360a:	2021      	movs	r0, #33	@ 0x21
 800360c:	f002 f9cb 	bl	80059a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003610:	2021      	movs	r0, #33	@ 0x21
 8003612:	f002 f9e4 	bl	80059de <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003616:	2200      	movs	r2, #0
 8003618:	210f      	movs	r1, #15
 800361a:	2022      	movs	r0, #34	@ 0x22
 800361c:	f002 f9c3 	bl	80059a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003620:	2022      	movs	r0, #34	@ 0x22
 8003622:	f002 f9dc 	bl	80059de <HAL_NVIC_EnableIRQ>
}
 8003626:	bf00      	nop
 8003628:	3728      	adds	r7, #40	@ 0x28
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000
 8003634:	48000400 	.word	0x48000400

08003638 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a12      	ldr	r2, [pc, #72]	@ (800368c <I2Cx_Init+0x54>)
 8003644:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a11      	ldr	r2, [pc, #68]	@ (8003690 <I2Cx_Init+0x58>)
 800364a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff ff89 	bl	8003588 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f002 fe36 	bl	80062e8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800367c:	2100      	movs	r1, #0
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f003 fbec 	bl	8006e5c <HAL_I2CEx_ConfigAnalogFilter>
}
 8003684:	bf00      	nop
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40005800 	.word	0x40005800
 8003690:	00702681 	.word	0x00702681

08003694 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08a      	sub	sp, #40	@ 0x28
 8003698:	af04      	add	r7, sp, #16
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	4608      	mov	r0, r1
 800369e:	4611      	mov	r1, r2
 80036a0:	461a      	mov	r2, r3
 80036a2:	4603      	mov	r3, r0
 80036a4:	72fb      	strb	r3, [r7, #11]
 80036a6:	460b      	mov	r3, r1
 80036a8:	813b      	strh	r3, [r7, #8]
 80036aa:	4613      	mov	r3, r2
 80036ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80036b2:	7afb      	ldrb	r3, [r7, #11]
 80036b4:	b299      	uxth	r1, r3
 80036b6:	88f8      	ldrh	r0, [r7, #6]
 80036b8:	893a      	ldrh	r2, [r7, #8]
 80036ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036be:	9302      	str	r3, [sp, #8]
 80036c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	4603      	mov	r3, r0
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f002 ffea 	bl	80066a4 <HAL_I2C_Mem_Read>
 80036d0:	4603      	mov	r3, r0
 80036d2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d004      	beq.n	80036e4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80036da:	7afb      	ldrb	r3, [r7, #11]
 80036dc:	4619      	mov	r1, r3
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f832 	bl	8003748 <I2Cx_Error>
  }
  return status;
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b08a      	sub	sp, #40	@ 0x28
 80036f2:	af04      	add	r7, sp, #16
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	4608      	mov	r0, r1
 80036f8:	4611      	mov	r1, r2
 80036fa:	461a      	mov	r2, r3
 80036fc:	4603      	mov	r3, r0
 80036fe:	72fb      	strb	r3, [r7, #11]
 8003700:	460b      	mov	r3, r1
 8003702:	813b      	strh	r3, [r7, #8]
 8003704:	4613      	mov	r3, r2
 8003706:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800370c:	7afb      	ldrb	r3, [r7, #11]
 800370e:	b299      	uxth	r1, r3
 8003710:	88f8      	ldrh	r0, [r7, #6]
 8003712:	893a      	ldrh	r2, [r7, #8]
 8003714:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003718:	9302      	str	r3, [sp, #8]
 800371a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	4603      	mov	r3, r0
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f002 fea9 	bl	800647c <HAL_I2C_Mem_Write>
 800372a:	4603      	mov	r3, r0
 800372c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800372e:	7dfb      	ldrb	r3, [r7, #23]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d004      	beq.n	800373e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003734:	7afb      	ldrb	r3, [r7, #11]
 8003736:	4619      	mov	r1, r3
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f805 	bl	8003748 <I2Cx_Error>
  }
  return status;
 800373e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f002 fe62 	bl	800641e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff ff6c 	bl	8003638 <I2Cx_Init>
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800376c:	4802      	ldr	r0, [pc, #8]	@ (8003778 <SENSOR_IO_Init+0x10>)
 800376e:	f7ff ff63 	bl	8003638 <I2Cx_Init>
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000bb4 	.word	0x20000bb4

0800377c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af02      	add	r7, sp, #8
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
 8003786:	460b      	mov	r3, r1
 8003788:	71bb      	strb	r3, [r7, #6]
 800378a:	4613      	mov	r3, r2
 800378c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800378e:	79bb      	ldrb	r3, [r7, #6]
 8003790:	b29a      	uxth	r2, r3
 8003792:	79f9      	ldrb	r1, [r7, #7]
 8003794:	2301      	movs	r3, #1
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	1d7b      	adds	r3, r7, #5
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	2301      	movs	r3, #1
 800379e:	4803      	ldr	r0, [pc, #12]	@ (80037ac <SENSOR_IO_Write+0x30>)
 80037a0:	f7ff ffa5 	bl	80036ee <I2Cx_WriteMultiple>
}
 80037a4:	bf00      	nop
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000bb4 	.word	0x20000bb4

080037b0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	4603      	mov	r3, r0
 80037b8:	460a      	mov	r2, r1
 80037ba:	71fb      	strb	r3, [r7, #7]
 80037bc:	4613      	mov	r3, r2
 80037be:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80037c4:	79bb      	ldrb	r3, [r7, #6]
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	79f9      	ldrb	r1, [r7, #7]
 80037ca:	2301      	movs	r3, #1
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	f107 030f 	add.w	r3, r7, #15
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	2301      	movs	r3, #1
 80037d6:	4804      	ldr	r0, [pc, #16]	@ (80037e8 <SENSOR_IO_Read+0x38>)
 80037d8:	f7ff ff5c 	bl	8003694 <I2Cx_ReadMultiple>

  return read_value;
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000bb4 	.word	0x20000bb4

080037ec <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	603a      	str	r2, [r7, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	4603      	mov	r3, r0
 80037f8:	71fb      	strb	r3, [r7, #7]
 80037fa:	460b      	mov	r3, r1
 80037fc:	71bb      	strb	r3, [r7, #6]
 80037fe:	4613      	mov	r3, r2
 8003800:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003802:	79bb      	ldrb	r3, [r7, #6]
 8003804:	b29a      	uxth	r2, r3
 8003806:	79f9      	ldrb	r1, [r7, #7]
 8003808:	88bb      	ldrh	r3, [r7, #4]
 800380a:	9301      	str	r3, [sp, #4]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	2301      	movs	r3, #1
 8003812:	4804      	ldr	r0, [pc, #16]	@ (8003824 <SENSOR_IO_ReadMultiple+0x38>)
 8003814:	f7ff ff3e 	bl	8003694 <I2Cx_ReadMultiple>
 8003818:	4603      	mov	r3, r0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20000bb4 	.word	0x20000bb4

08003828 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003832:	2300      	movs	r3, #0
 8003834:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8003836:	4b19      	ldr	r3, [pc, #100]	@ (800389c <BSP_ACCELERO_Init+0x74>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	4798      	blx	r3
 800383c:	4603      	mov	r3, r0
 800383e:	2b6a      	cmp	r3, #106	@ 0x6a
 8003840:	d002      	beq.n	8003848 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
 8003846:	e024      	b.n	8003892 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8003848:	4b15      	ldr	r3, [pc, #84]	@ (80038a0 <BSP_ACCELERO_Init+0x78>)
 800384a:	4a14      	ldr	r2, [pc, #80]	@ (800389c <BSP_ACCELERO_Init+0x74>)
 800384c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800384e:	2330      	movs	r3, #48	@ 0x30
 8003850:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8003856:	2300      	movs	r3, #0
 8003858:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800385a:	2340      	movs	r3, #64	@ 0x40
 800385c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8003862:	2300      	movs	r3, #0
 8003864:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8003866:	797a      	ldrb	r2, [r7, #5]
 8003868:	7abb      	ldrb	r3, [r7, #10]
 800386a:	4313      	orrs	r3, r2
 800386c:	b2db      	uxtb	r3, r3
 800386e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003870:	7a3b      	ldrb	r3, [r7, #8]
 8003872:	f043 0304 	orr.w	r3, r3, #4
 8003876:	b2db      	uxtb	r3, r3
 8003878:	021b      	lsls	r3, r3, #8
 800387a:	b21a      	sxth	r2, r3
 800387c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	b21b      	sxth	r3, r3
 8003884:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003886:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <BSP_ACCELERO_Init+0x78>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	89ba      	ldrh	r2, [r7, #12]
 800388e:	4610      	mov	r0, r2
 8003890:	4798      	blx	r3
  }  

  return ret;
 8003892:	7bfb      	ldrb	r3, [r7, #15]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	2000000c 	.word	0x2000000c
 80038a0:	20000c08 	.word	0x20000c08

080038a4 <BSP_ACCELERO_AccGetXYZ_Float>:
  }
}

/////////////////////////////////USER DEFINED/////////////////////////////////////////
void BSP_ACCELERO_AccGetXYZ_Float(float *pDataXYZ)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  if(AccelerometerDrv != NULL)
 80038ac:	4b08      	ldr	r3, [pc, #32]	@ (80038d0 <BSP_ACCELERO_AccGetXYZ_Float+0x2c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d009      	beq.n	80038c8 <BSP_ACCELERO_AccGetXYZ_Float+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80038b4:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <BSP_ACCELERO_AccGetXYZ_Float+0x2c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d004      	beq.n	80038c8 <BSP_ACCELERO_AccGetXYZ_Float+0x24>
    {
        AccelerometerDrv->GetXYZ(pDataXYZ);
 80038be:	4b04      	ldr	r3, [pc, #16]	@ (80038d0 <BSP_ACCELERO_AccGetXYZ_Float+0x2c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	4798      	blx	r3
    }
  }
}
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000c08 	.word	0x20000c08

080038d4 <BSP_ACCELERO_SetReadMode>:

void BSP_ACCELERO_SetReadMode(int mode){
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	if(mode == 1){
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d103      	bne.n	80038ea <BSP_ACCELERO_SetReadMode+0x16>
		Lsm6dslAccDrv_SetReadType(1);
 80038e2:	2001      	movs	r0, #1
 80038e4:	f000 faa2 	bl	8003e2c <Lsm6dslAccDrv_SetReadType>
	}else{
		Lsm6dslAccDrv_SetReadType(0);
	}
}
 80038e8:	e002      	b.n	80038f0 <BSP_ACCELERO_SetReadMode+0x1c>
		Lsm6dslAccDrv_SetReadType(0);
 80038ea:	2000      	movs	r0, #0
 80038ec:	f000 fa9e 	bl	8003e2c <Lsm6dslAccDrv_SetReadType>
}
 80038f0:	bf00      	nop
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80038fe:	2300      	movs	r3, #0
 8003900:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8003902:	4b12      	ldr	r3, [pc, #72]	@ (800394c <BSP_SPI3_Init+0x54>)
 8003904:	4a12      	ldr	r2, [pc, #72]	@ (8003950 <BSP_SPI3_Init+0x58>)
 8003906:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8003908:	4b12      	ldr	r3, [pc, #72]	@ (8003954 <BSP_SPI3_Init+0x5c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	4911      	ldr	r1, [pc, #68]	@ (8003954 <BSP_SPI3_Init+0x5c>)
 8003910:	600a      	str	r2, [r1, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d114      	bne.n	8003940 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 8003916:	480d      	ldr	r0, [pc, #52]	@ (800394c <BSP_SPI3_Init+0x54>)
 8003918:	f005 fb42 	bl	8008fa0 <HAL_SPI_GetState>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10e      	bne.n	8003940 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 8003922:	480a      	ldr	r0, [pc, #40]	@ (800394c <BSP_SPI3_Init+0x54>)
 8003924:	f000 f882 	bl	8003a2c <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d108      	bne.n	8003940 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 800392e:	4807      	ldr	r0, [pc, #28]	@ (800394c <BSP_SPI3_Init+0x54>)
 8003930:	f000 f83a 	bl	80039a8 <MX_SPI3_Init>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800393a:	f06f 0307 	mvn.w	r3, #7
 800393e:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8003940:	687b      	ldr	r3, [r7, #4]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000c0c 	.word	0x20000c0c
 8003950:	40003c00 	.word	0x40003c00
 8003954:	20000c70 	.word	0x20000c70

08003958 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	4613      	mov	r3, r2
 8003964:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003970:	9200      	str	r2, [sp, #0]
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	68f9      	ldr	r1, [r7, #12]
 8003976:	4807      	ldr	r0, [pc, #28]	@ (8003994 <BSP_SPI3_SendRecv+0x3c>)
 8003978:	f005 f8f3 	bl	8008b62 <HAL_SPI_TransmitReceive>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003982:	f06f 0305 	mvn.w	r3, #5
 8003986:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003988:	697b      	ldr	r3, [r7, #20]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000c0c 	.word	0x20000c0c

08003998 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800399c:	f000 fac8 	bl	8003f30 <HAL_GetTick>
 80039a0:	4603      	mov	r3, r0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a28 <MX_SPI3_Init+0x80>)
 80039b8:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80039c0:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80039ce:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039e2:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2207      	movs	r2, #7
 8003a00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2208      	movs	r2, #8
 8003a0c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f004 fffa 	bl	8008a08 <HAL_SPI_Init>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40003c00 	.word	0x40003c00

08003a2c <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	@ 0x28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003a34:	4b27      	ldr	r3, [pc, #156]	@ (8003ad4 <SPI3_MspInit+0xa8>)
 8003a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a38:	4a26      	ldr	r2, [pc, #152]	@ (8003ad4 <SPI3_MspInit+0xa8>)
 8003a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a40:	4b24      	ldr	r3, [pc, #144]	@ (8003ad4 <SPI3_MspInit+0xa8>)
 8003a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a4c:	4b21      	ldr	r3, [pc, #132]	@ (8003ad4 <SPI3_MspInit+0xa8>)
 8003a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a50:	4a20      	ldr	r2, [pc, #128]	@ (8003ad4 <SPI3_MspInit+0xa8>)
 8003a52:	f043 0304 	orr.w	r3, r3, #4
 8003a56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a58:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad4 <SPI3_MspInit+0xa8>)
 8003a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8003a64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a72:	2303      	movs	r3, #3
 8003a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 8003a76:	2306      	movs	r3, #6
 8003a78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003a7a:	f107 0314 	add.w	r3, r7, #20
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4815      	ldr	r0, [pc, #84]	@ (8003ad8 <SPI3_MspInit+0xac>)
 8003a82:	f002 f931 	bl	8005ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 8003a86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a94:	2303      	movs	r3, #3
 8003a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8003a98:	2306      	movs	r3, #6
 8003a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003a9c:	f107 0314 	add.w	r3, r7, #20
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	480d      	ldr	r0, [pc, #52]	@ (8003ad8 <SPI3_MspInit+0xac>)
 8003aa4:	f002 f920 	bl	8005ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8003aa8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8003aba:	2306      	movs	r3, #6
 8003abc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003abe:	f107 0314 	add.w	r3, r7, #20
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4804      	ldr	r0, [pc, #16]	@ (8003ad8 <SPI3_MspInit+0xac>)
 8003ac6:	f002 f90f 	bl	8005ce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8003aca:	bf00      	nop
 8003acc:	3728      	adds	r7, #40	@ 0x28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	48000800 	.word	0x48000800

08003adc <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003aea:	2110      	movs	r1, #16
 8003aec:	20d4      	movs	r0, #212	@ 0xd4
 8003aee:	f7ff fe5f 	bl	80037b0 <SENSOR_IO_Read>
 8003af2:	4603      	mov	r3, r0
 8003af4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003afa:	7bbb      	ldrb	r3, [r7, #14]
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003b02:	7bba      	ldrb	r2, [r7, #14]
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003b0a:	7bbb      	ldrb	r3, [r7, #14]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	2110      	movs	r1, #16
 8003b10:	20d4      	movs	r0, #212	@ 0xd4
 8003b12:	f7ff fe33 	bl	800377c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003b16:	2112      	movs	r1, #18
 8003b18:	20d4      	movs	r0, #212	@ 0xd4
 8003b1a:	f7ff fe49 	bl	80037b0 <SENSOR_IO_Read>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	0a1b      	lsrs	r3, r3, #8
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003b2a:	7bbb      	ldrb	r3, [r7, #14]
 8003b2c:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8003b30:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003b32:	7bba      	ldrb	r2, [r7, #14]
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003b3a:	7bbb      	ldrb	r3, [r7, #14]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2112      	movs	r1, #18
 8003b40:	20d4      	movs	r0, #212	@ 0xd4
 8003b42:	f7ff fe1b 	bl	800377c <SENSOR_IO_Write>
}
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003b54:	2300      	movs	r3, #0
 8003b56:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003b58:	2110      	movs	r1, #16
 8003b5a:	20d4      	movs	r0, #212	@ 0xd4
 8003b5c:	f7ff fe28 	bl	80037b0 <SENSOR_IO_Read>
 8003b60:	4603      	mov	r3, r0
 8003b62:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2110      	movs	r1, #16
 8003b72:	20d4      	movs	r0, #212	@ 0xd4
 8003b74:	f7ff fe02 	bl	800377c <SENSOR_IO_Write>
}
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8003b84:	f7ff fdf0 	bl	8003768 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8003b88:	210f      	movs	r1, #15
 8003b8a:	20d4      	movs	r0, #212	@ 0xd4
 8003b8c:	f7ff fe10 	bl	80037b0 <SENSOR_IO_Read>
 8003b90:	4603      	mov	r3, r0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8003ba4:	2115      	movs	r1, #21
 8003ba6:	20d4      	movs	r0, #212	@ 0xd4
 8003ba8:	f7ff fe02 	bl	80037b0 <SENSOR_IO_Read>
 8003bac:	4603      	mov	r3, r0
 8003bae:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	f023 0310 	bic.w	r3, r3, #16
 8003bb6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	f043 0310 	orr.w	r3, r3, #16
 8003bc4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2115      	movs	r1, #21
 8003bcc:	20d4      	movs	r0, #212	@ 0xd4
 8003bce:	f7ff fdd5 	bl	800377c <SENSOR_IO_Write>
}
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003bf2:	2110      	movs	r1, #16
 8003bf4:	20d4      	movs	r0, #212	@ 0xd4
 8003bf6:	f7ff fddb 	bl	80037b0 <SENSOR_IO_Read>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003bfe:	f107 0208 	add.w	r2, r7, #8
 8003c02:	2306      	movs	r3, #6
 8003c04:	2128      	movs	r1, #40	@ 0x28
 8003c06:	20d4      	movs	r0, #212	@ 0xd4
 8003c08:	f7ff fdf0 	bl	80037ec <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	e01a      	b.n	8003c48 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003c12:	7ffb      	ldrb	r3, [r7, #31]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	3301      	adds	r3, #1
 8003c18:	3320      	adds	r3, #32
 8003c1a:	443b      	add	r3, r7
 8003c1c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	7ffa      	ldrb	r2, [r7, #31]
 8003c26:	0052      	lsls	r2, r2, #1
 8003c28:	3220      	adds	r2, #32
 8003c2a:	443a      	add	r2, r7
 8003c2c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003c30:	4413      	add	r3, r2
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	7ffb      	ldrb	r3, [r7, #31]
 8003c36:	b212      	sxth	r2, r2
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	3320      	adds	r3, #32
 8003c3c:	443b      	add	r3, r7
 8003c3e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003c42:	7ffb      	ldrb	r3, [r7, #31]
 8003c44:	3301      	adds	r3, #1
 8003c46:	77fb      	strb	r3, [r7, #31]
 8003c48:	7ffb      	ldrb	r3, [r7, #31]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d9e1      	bls.n	8003c12 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
 8003c50:	f003 030c 	and.w	r3, r3, #12
 8003c54:	2b0c      	cmp	r3, #12
 8003c56:	d829      	bhi.n	8003cac <LSM6DSL_AccReadXYZ+0xd0>
 8003c58:	a201      	add	r2, pc, #4	@ (adr r2, 8003c60 <LSM6DSL_AccReadXYZ+0x84>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003c95 	.word	0x08003c95
 8003c64:	08003cad 	.word	0x08003cad
 8003c68:	08003cad 	.word	0x08003cad
 8003c6c:	08003cad 	.word	0x08003cad
 8003c70:	08003ca7 	.word	0x08003ca7
 8003c74:	08003cad 	.word	0x08003cad
 8003c78:	08003cad 	.word	0x08003cad
 8003c7c:	08003cad 	.word	0x08003cad
 8003c80:	08003c9b 	.word	0x08003c9b
 8003c84:	08003cad 	.word	0x08003cad
 8003c88:	08003cad 	.word	0x08003cad
 8003c8c:	08003cad 	.word	0x08003cad
 8003c90:	08003ca1 	.word	0x08003ca1
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8003c94:	4b18      	ldr	r3, [pc, #96]	@ (8003cf8 <LSM6DSL_AccReadXYZ+0x11c>)
 8003c96:	61bb      	str	r3, [r7, #24]
    break;
 8003c98:	e008      	b.n	8003cac <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8003c9a:	4b18      	ldr	r3, [pc, #96]	@ (8003cfc <LSM6DSL_AccReadXYZ+0x120>)
 8003c9c:	61bb      	str	r3, [r7, #24]
    break;
 8003c9e:	e005      	b.n	8003cac <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003ca0:	4b17      	ldr	r3, [pc, #92]	@ (8003d00 <LSM6DSL_AccReadXYZ+0x124>)
 8003ca2:	61bb      	str	r3, [r7, #24]
    break;
 8003ca4:	e002      	b.n	8003cac <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8003ca6:	4b17      	ldr	r3, [pc, #92]	@ (8003d04 <LSM6DSL_AccReadXYZ+0x128>)
 8003ca8:	61bb      	str	r3, [r7, #24]
    break;    
 8003caa:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003cac:	2300      	movs	r3, #0
 8003cae:	77fb      	strb	r3, [r7, #31]
 8003cb0:	e01a      	b.n	8003ce8 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003cb2:	7ffb      	ldrb	r3, [r7, #31]
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	3320      	adds	r3, #32
 8003cb8:	443b      	add	r3, r7
 8003cba:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cce:	7ffb      	ldrb	r3, [r7, #31]
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cda:	ee17 2a90 	vmov	r2, s15
 8003cde:	b212      	sxth	r2, r2
 8003ce0:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003ce2:	7ffb      	ldrb	r3, [r7, #31]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	7ffb      	ldrb	r3, [r7, #31]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d9e1      	bls.n	8003cb2 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8003cee:	bf00      	nop
 8003cf0:	bf00      	nop
 8003cf2:	3720      	adds	r7, #32
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	3d79db23 	.word	0x3d79db23
 8003cfc:	3df9db23 	.word	0x3df9db23
 8003d00:	3e79db23 	.word	0x3e79db23
 8003d04:	3ef9db23 	.word	0x3ef9db23

08003d08 <LSM6DSL_AccReadXYZ_Float>:


//////////////////////////////////USER DEFINED FUNCTION///////////////////////////

void LSM6DSL_AccReadXYZ_Float(float* pData) //int16_t -> float
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	61bb      	str	r3, [r7, #24]

  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003d1e:	2110      	movs	r1, #16
 8003d20:	20d4      	movs	r0, #212	@ 0xd4
 8003d22:	f7ff fd45 	bl	80037b0 <SENSOR_IO_Read>
 8003d26:	4603      	mov	r3, r0
 8003d28:	75fb      	strb	r3, [r7, #23]

  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003d2a:	f107 0208 	add.w	r2, r7, #8
 8003d2e:	2306      	movs	r3, #6
 8003d30:	2128      	movs	r1, #40	@ 0x28
 8003d32:	20d4      	movs	r0, #212	@ 0xd4
 8003d34:	f7ff fd5a 	bl	80037ec <SENSOR_IO_ReadMultiple>

  for(i=0; i<3; i++)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	e01a      	b.n	8003d74 <LSM6DSL_AccReadXYZ_Float+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003d3e:	7ffb      	ldrb	r3, [r7, #31]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	3301      	adds	r3, #1
 8003d44:	3320      	adds	r3, #32
 8003d46:	443b      	add	r3, r7
 8003d48:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	7ffa      	ldrb	r2, [r7, #31]
 8003d52:	0052      	lsls	r2, r2, #1
 8003d54:	3220      	adds	r2, #32
 8003d56:	443a      	add	r2, r7
 8003d58:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	7ffb      	ldrb	r3, [r7, #31]
 8003d62:	b212      	sxth	r2, r2
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	3320      	adds	r3, #32
 8003d68:	443b      	add	r3, r7
 8003d6a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003d6e:	7ffb      	ldrb	r3, [r7, #31]
 8003d70:	3301      	adds	r3, #1
 8003d72:	77fb      	strb	r3, [r7, #31]
 8003d74:	7ffb      	ldrb	r3, [r7, #31]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d9e1      	bls.n	8003d3e <LSM6DSL_AccReadXYZ_Float+0x36>
  }

  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8003d7a:	7dfb      	ldrb	r3, [r7, #23]
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	2b0c      	cmp	r3, #12
 8003d82:	d829      	bhi.n	8003dd8 <LSM6DSL_AccReadXYZ_Float+0xd0>
 8003d84:	a201      	add	r2, pc, #4	@ (adr r2, 8003d8c <LSM6DSL_AccReadXYZ_Float+0x84>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003dc1 	.word	0x08003dc1
 8003d90:	08003dd9 	.word	0x08003dd9
 8003d94:	08003dd9 	.word	0x08003dd9
 8003d98:	08003dd9 	.word	0x08003dd9
 8003d9c:	08003dd3 	.word	0x08003dd3
 8003da0:	08003dd9 	.word	0x08003dd9
 8003da4:	08003dd9 	.word	0x08003dd9
 8003da8:	08003dd9 	.word	0x08003dd9
 8003dac:	08003dc7 	.word	0x08003dc7
 8003db0:	08003dd9 	.word	0x08003dd9
 8003db4:	08003dd9 	.word	0x08003dd9
 8003db8:	08003dd9 	.word	0x08003dd9
 8003dbc:	08003dcd 	.word	0x08003dcd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8003dc0:	4b16      	ldr	r3, [pc, #88]	@ (8003e1c <LSM6DSL_AccReadXYZ_Float+0x114>)
 8003dc2:	61bb      	str	r3, [r7, #24]
    break;
 8003dc4:	e008      	b.n	8003dd8 <LSM6DSL_AccReadXYZ_Float+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8003dc6:	4b16      	ldr	r3, [pc, #88]	@ (8003e20 <LSM6DSL_AccReadXYZ_Float+0x118>)
 8003dc8:	61bb      	str	r3, [r7, #24]
    break;
 8003dca:	e005      	b.n	8003dd8 <LSM6DSL_AccReadXYZ_Float+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003dcc:	4b15      	ldr	r3, [pc, #84]	@ (8003e24 <LSM6DSL_AccReadXYZ_Float+0x11c>)
 8003dce:	61bb      	str	r3, [r7, #24]
    break;
 8003dd0:	e002      	b.n	8003dd8 <LSM6DSL_AccReadXYZ_Float+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8003dd2:	4b15      	ldr	r3, [pc, #84]	@ (8003e28 <LSM6DSL_AccReadXYZ_Float+0x120>)
 8003dd4:	61bb      	str	r3, [r7, #24]
    break;
 8003dd6:	bf00      	nop
  }

  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003dd8:	2300      	movs	r3, #0
 8003dda:	77fb      	strb	r3, [r7, #31]
 8003ddc:	e016      	b.n	8003e0c <LSM6DSL_AccReadXYZ_Float+0x104>
  {
    pData[i]= (pnRawData[i] * sensitivity);
 8003dde:	7ffb      	ldrb	r3, [r7, #31]
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	3320      	adds	r3, #32
 8003de4:	443b      	add	r3, r7
 8003de6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003dea:	ee07 3a90 	vmov	s15, r3
 8003dee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003df2:	7ffb      	ldrb	r3, [r7, #31]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	4413      	add	r3, r2
 8003dfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8003dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e02:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8003e06:	7ffb      	ldrb	r3, [r7, #31]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	77fb      	strb	r3, [r7, #31]
 8003e0c:	7ffb      	ldrb	r3, [r7, #31]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d9e5      	bls.n	8003dde <LSM6DSL_AccReadXYZ_Float+0xd6>
  }
}
 8003e12:	bf00      	nop
 8003e14:	bf00      	nop
 8003e16:	3720      	adds	r7, #32
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	3d79db23 	.word	0x3d79db23
 8003e20:	3df9db23 	.word	0x3df9db23
 8003e24:	3e79db23 	.word	0x3e79db23
 8003e28:	3ef9db23 	.word	0x3ef9db23

08003e2c <Lsm6dslAccDrv_SetReadType>:

void Lsm6dslAccDrv_SetReadType(int mode){
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
	if(mode == 1){
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d103      	bne.n	8003e42 <Lsm6dslAccDrv_SetReadType+0x16>
		Lsm6dslAccDrv.GetXYZ = LSM6DSL_AccReadXYZ_Float;
 8003e3a:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <Lsm6dslAccDrv_SetReadType+0x28>)
 8003e3c:	4a06      	ldr	r2, [pc, #24]	@ (8003e58 <Lsm6dslAccDrv_SetReadType+0x2c>)
 8003e3e:	631a      	str	r2, [r3, #48]	@ 0x30
	}else{
		Lsm6dslAccDrv.GetXYZ = LSM6DSL_AccReadXYZ;
	}
}
 8003e40:	e002      	b.n	8003e48 <Lsm6dslAccDrv_SetReadType+0x1c>
		Lsm6dslAccDrv.GetXYZ = LSM6DSL_AccReadXYZ;
 8003e42:	4b04      	ldr	r3, [pc, #16]	@ (8003e54 <Lsm6dslAccDrv_SetReadType+0x28>)
 8003e44:	4a05      	ldr	r2, [pc, #20]	@ (8003e5c <Lsm6dslAccDrv_SetReadType+0x30>)
 8003e46:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	2000000c 	.word	0x2000000c
 8003e58:	08003d09 	.word	0x08003d09
 8003e5c:	08003bdd 	.word	0x08003bdd

08003e60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e6a:	2003      	movs	r0, #3
 8003e6c:	f001 fd90 	bl	8005990 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e70:	2000      	movs	r0, #0
 8003e72:	f000 f80d 	bl	8003e90 <HAL_InitTick>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	71fb      	strb	r3, [r7, #7]
 8003e80:	e001      	b.n	8003e86 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e82:	f7fe fe9d 	bl	8002bc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e86:	79fb      	ldrb	r3, [r7, #7]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003e9c:	4b17      	ldr	r3, [pc, #92]	@ (8003efc <HAL_InitTick+0x6c>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d023      	beq.n	8003eec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003ea4:	4b16      	ldr	r3, [pc, #88]	@ (8003f00 <HAL_InitTick+0x70>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	4b14      	ldr	r3, [pc, #80]	@ (8003efc <HAL_InitTick+0x6c>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	4619      	mov	r1, r3
 8003eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f001 fd9d 	bl	80059fa <HAL_SYSTICK_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10f      	bne.n	8003ee6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b0f      	cmp	r3, #15
 8003eca:	d809      	bhi.n	8003ee0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ecc:	2200      	movs	r2, #0
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed4:	f001 fd67 	bl	80059a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8003f04 <HAL_InitTick+0x74>)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	e007      	b.n	8003ef0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
 8003ee4:	e004      	b.n	8003ef0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
 8003eea:	e001      	b.n	8003ef0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000044 	.word	0x20000044
 8003f00:	20000008 	.word	0x20000008
 8003f04:	20000040 	.word	0x20000040

08003f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f0c:	4b06      	ldr	r3, [pc, #24]	@ (8003f28 <HAL_IncTick+0x20>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b06      	ldr	r3, [pc, #24]	@ (8003f2c <HAL_IncTick+0x24>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4413      	add	r3, r2
 8003f18:	4a04      	ldr	r2, [pc, #16]	@ (8003f2c <HAL_IncTick+0x24>)
 8003f1a:	6013      	str	r3, [r2, #0]
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	20000044 	.word	0x20000044
 8003f2c:	20000c74 	.word	0x20000c74

08003f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return uwTick;
 8003f34:	4b03      	ldr	r3, [pc, #12]	@ (8003f44 <HAL_GetTick+0x14>)
 8003f36:	681b      	ldr	r3, [r3, #0]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000c74 	.word	0x20000c74

08003f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f50:	f7ff ffee 	bl	8003f30 <HAL_GetTick>
 8003f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d005      	beq.n	8003f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003f62:	4b0a      	ldr	r3, [pc, #40]	@ (8003f8c <HAL_Delay+0x44>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f6e:	bf00      	nop
 8003f70:	f7ff ffde 	bl	8003f30 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d8f7      	bhi.n	8003f70 <HAL_Delay+0x28>
  {
  }
}
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000044 	.word	0x20000044

08003f90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	609a      	str	r2, [r3, #8]
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	609a      	str	r2, [r3, #8]
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3360      	adds	r3, #96	@ 0x60
 800400a:	461a      	mov	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b08      	ldr	r3, [pc, #32]	@ (800403c <LL_ADC_SetOffset+0x44>)
 800401a:	4013      	ands	r3, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	4313      	orrs	r3, r2
 8004028:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004030:	bf00      	nop
 8004032:	371c      	adds	r7, #28
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	03fff000 	.word	0x03fff000

08004040 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3360      	adds	r3, #96	@ 0x60
 800404e:	461a      	mov	r2, r3
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	3360      	adds	r3, #96	@ 0x60
 800407c:	461a      	mov	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	431a      	orrs	r2, r3
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3330      	adds	r3, #48	@ 0x30
 80040d8:	461a      	mov	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	0a1b      	lsrs	r3, r3, #8
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	f003 030c 	and.w	r3, r3, #12
 80040e4:	4413      	add	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	211f      	movs	r1, #31
 80040f4:	fa01 f303 	lsl.w	r3, r1, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	401a      	ands	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	0e9b      	lsrs	r3, r3, #26
 8004100:	f003 011f 	and.w	r1, r3, #31
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f003 031f 	and.w	r3, r3, #31
 800410a:	fa01 f303 	lsl.w	r3, r1, r3
 800410e:	431a      	orrs	r2, r3
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004114:	bf00      	nop
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800412c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004134:	2301      	movs	r3, #1
 8004136:	e000      	b.n	800413a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004146:	b480      	push	{r7}
 8004148:	b087      	sub	sp, #28
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3314      	adds	r3, #20
 8004156:	461a      	mov	r2, r3
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	0e5b      	lsrs	r3, r3, #25
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	4413      	add	r3, r2
 8004164:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	0d1b      	lsrs	r3, r3, #20
 800416e:	f003 031f 	and.w	r3, r3, #31
 8004172:	2107      	movs	r1, #7
 8004174:	fa01 f303 	lsl.w	r3, r1, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	401a      	ands	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	0d1b      	lsrs	r3, r3, #20
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	fa01 f303 	lsl.w	r3, r1, r3
 800418a:	431a      	orrs	r2, r3
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004190:	bf00      	nop
 8004192:	371c      	adds	r7, #28
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b4:	43db      	mvns	r3, r3
 80041b6:	401a      	ands	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f003 0318 	and.w	r3, r3, #24
 80041be:	4908      	ldr	r1, [pc, #32]	@ (80041e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80041c0:	40d9      	lsrs	r1, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	400b      	ands	r3, r1
 80041c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ca:	431a      	orrs	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	0007ffff 	.word	0x0007ffff

080041e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 031f 	and.w	r3, r3, #31
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004210:	4618      	mov	r0, r3
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800422c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6093      	str	r3, [r2, #8]
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004250:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004254:	d101      	bne.n	800425a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004278:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800427c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042a4:	d101      	bne.n	80042aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80042c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042cc:	f043 0201 	orr.w	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <LL_ADC_IsEnabled+0x18>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <LL_ADC_IsEnabled+0x1a>
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004316:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800431a:	f043 0204 	orr.w	r2, r3, #4
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b04      	cmp	r3, #4
 8004340:	d101      	bne.n	8004346 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b08      	cmp	r3, #8
 8004366:	d101      	bne.n	800436c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800437c:	b590      	push	{r4, r7, lr}
 800437e:	b089      	sub	sp, #36	@ 0x24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e130      	b.n	80045f8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d109      	bne.n	80043b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7fe fc2f 	bl	8002c08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff ff3f 	bl	8004240 <LL_ADC_IsDeepPowerDownEnabled>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d004      	beq.n	80043d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff ff25 	bl	800421c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff ff5a 	bl	8004290 <LL_ADC_IsInternalRegulatorEnabled>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d115      	bne.n	800440e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff ff3e 	bl	8004268 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043ec:	4b84      	ldr	r3, [pc, #528]	@ (8004600 <HAL_ADC_Init+0x284>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	099b      	lsrs	r3, r3, #6
 80043f2:	4a84      	ldr	r2, [pc, #528]	@ (8004604 <HAL_ADC_Init+0x288>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	099b      	lsrs	r3, r3, #6
 80043fa:	3301      	adds	r3, #1
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004400:	e002      	b.n	8004408 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3b01      	subs	r3, #1
 8004406:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f9      	bne.n	8004402 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff ff3c 	bl	8004290 <LL_ADC_IsInternalRegulatorEnabled>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10d      	bne.n	800443a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004422:	f043 0210 	orr.w	r2, r3, #16
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442e:	f043 0201 	orr.w	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff ff75 	bl	800432e <LL_ADC_REG_IsConversionOngoing>
 8004444:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444a:	f003 0310 	and.w	r3, r3, #16
 800444e:	2b00      	cmp	r3, #0
 8004450:	f040 80c9 	bne.w	80045e6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f040 80c5 	bne.w	80045e6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004460:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004464:	f043 0202 	orr.w	r2, r3, #2
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff ff35 	bl	80042e0 <LL_ADC_IsEnabled>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d115      	bne.n	80044a8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800447c:	4862      	ldr	r0, [pc, #392]	@ (8004608 <HAL_ADC_Init+0x28c>)
 800447e:	f7ff ff2f 	bl	80042e0 <LL_ADC_IsEnabled>
 8004482:	4604      	mov	r4, r0
 8004484:	4861      	ldr	r0, [pc, #388]	@ (800460c <HAL_ADC_Init+0x290>)
 8004486:	f7ff ff2b 	bl	80042e0 <LL_ADC_IsEnabled>
 800448a:	4603      	mov	r3, r0
 800448c:	431c      	orrs	r4, r3
 800448e:	4860      	ldr	r0, [pc, #384]	@ (8004610 <HAL_ADC_Init+0x294>)
 8004490:	f7ff ff26 	bl	80042e0 <LL_ADC_IsEnabled>
 8004494:	4603      	mov	r3, r0
 8004496:	4323      	orrs	r3, r4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d105      	bne.n	80044a8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	4619      	mov	r1, r3
 80044a2:	485c      	ldr	r0, [pc, #368]	@ (8004614 <HAL_ADC_Init+0x298>)
 80044a4:	f7ff fd74 	bl	8003f90 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	7e5b      	ldrb	r3, [r3, #25]
 80044ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80044b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80044be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044c8:	4313      	orrs	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d106      	bne.n	80044e4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	3b01      	subs	r3, #1
 80044dc:	045b      	lsls	r3, r3, #17
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d009      	beq.n	8004500 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	4b44      	ldr	r3, [pc, #272]	@ (8004618 <HAL_ADC_Init+0x29c>)
 8004508:	4013      	ands	r3, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	69b9      	ldr	r1, [r7, #24]
 8004510:	430b      	orrs	r3, r1
 8004512:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff ff1b 	bl	8004354 <LL_ADC_INJ_IsConversionOngoing>
 800451e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d13d      	bne.n	80045a2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d13a      	bne.n	80045a2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004530:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004538:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800453a:	4313      	orrs	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004548:	f023 0302 	bic.w	r3, r3, #2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	69b9      	ldr	r1, [r7, #24]
 8004552:	430b      	orrs	r3, r1
 8004554:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800455c:	2b01      	cmp	r3, #1
 800455e:	d118      	bne.n	8004592 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800456a:	f023 0304 	bic.w	r3, r3, #4
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004576:	4311      	orrs	r1, r2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800457c:	4311      	orrs	r1, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004582:	430a      	orrs	r2, r1
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	611a      	str	r2, [r3, #16]
 8004590:	e007      	b.n	80045a2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0201 	bic.w	r2, r2, #1
 80045a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d10c      	bne.n	80045c4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b0:	f023 010f 	bic.w	r1, r3, #15
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	1e5a      	subs	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80045c2:	e007      	b.n	80045d4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 020f 	bic.w	r2, r2, #15
 80045d2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d8:	f023 0303 	bic.w	r3, r3, #3
 80045dc:	f043 0201 	orr.w	r2, r3, #1
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80045e4:	e007      	b.n	80045f6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ea:	f043 0210 	orr.w	r2, r3, #16
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80045f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3724      	adds	r7, #36	@ 0x24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd90      	pop	{r4, r7, pc}
 8004600:	20000008 	.word	0x20000008
 8004604:	053e2d63 	.word	0x053e2d63
 8004608:	50040000 	.word	0x50040000
 800460c:	50040100 	.word	0x50040100
 8004610:	50040200 	.word	0x50040200
 8004614:	50040300 	.word	0x50040300
 8004618:	fff0c007 	.word	0xfff0c007

0800461c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004624:	4891      	ldr	r0, [pc, #580]	@ (800486c <HAL_ADC_Start_IT+0x250>)
 8004626:	f7ff fddd 	bl	80041e4 <LL_ADC_GetMultimode>
 800462a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff fe7c 	bl	800432e <LL_ADC_REG_IsConversionOngoing>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	f040 8110 	bne.w	800485e <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_ADC_Start_IT+0x30>
 8004648:	2302      	movs	r3, #2
 800464a:	e10b      	b.n	8004864 <HAL_ADC_Start_IT+0x248>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 ff3d 	bl	80054d4 <ADC_Enable>
 800465a:	4603      	mov	r3, r0
 800465c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800465e:	7dfb      	ldrb	r3, [r7, #23]
 8004660:	2b00      	cmp	r3, #0
 8004662:	f040 80f7 	bne.w	8004854 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a7c      	ldr	r2, [pc, #496]	@ (8004870 <HAL_ADC_Start_IT+0x254>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d002      	beq.n	800468a <HAL_ADC_Start_IT+0x6e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	e000      	b.n	800468c <HAL_ADC_Start_IT+0x70>
 800468a:	4b7a      	ldr	r3, [pc, #488]	@ (8004874 <HAL_ADC_Start_IT+0x258>)
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6812      	ldr	r2, [r2, #0]
 8004690:	4293      	cmp	r3, r2
 8004692:	d002      	beq.n	800469a <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d105      	bne.n	80046a6 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d006      	beq.n	80046c0 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b6:	f023 0206 	bic.w	r2, r3, #6
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80046be:	e002      	b.n	80046c6 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	221c      	movs	r2, #28
 80046cc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 021c 	bic.w	r2, r2, #28
 80046e4:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d108      	bne.n	8004700 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f042 0208 	orr.w	r2, r2, #8
 80046fc:	605a      	str	r2, [r3, #4]
          break;
 80046fe:	e008      	b.n	8004712 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0204 	orr.w	r2, r2, #4
 800470e:	605a      	str	r2, [r3, #4]
          break;
 8004710:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004716:	2b00      	cmp	r3, #0
 8004718:	d107      	bne.n	800472a <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0210 	orr.w	r2, r2, #16
 8004728:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a50      	ldr	r2, [pc, #320]	@ (8004870 <HAL_ADC_Start_IT+0x254>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d002      	beq.n	800473a <HAL_ADC_Start_IT+0x11e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	e000      	b.n	800473c <HAL_ADC_Start_IT+0x120>
 800473a:	4b4e      	ldr	r3, [pc, #312]	@ (8004874 <HAL_ADC_Start_IT+0x258>)
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	4293      	cmp	r3, r2
 8004742:	d008      	beq.n	8004756 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b05      	cmp	r3, #5
 800474e:	d002      	beq.n	8004756 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	2b09      	cmp	r3, #9
 8004754:	d13a      	bne.n	80047cc <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d02d      	beq.n	80047c0 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004768:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800476c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d110      	bne.n	800479e <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0220 	bic.w	r2, r2, #32
 800478a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800479a:	605a      	str	r2, [r3, #4]
              break;
 800479c:	e010      	b.n	80047c0 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047ac:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0220 	orr.w	r2, r2, #32
 80047bc:	605a      	str	r2, [r3, #4]
              break;
 80047be:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff fd9e 	bl	8004306 <LL_ADC_REG_StartConversion>
 80047ca:	e04a      	b.n	8004862 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a24      	ldr	r2, [pc, #144]	@ (8004870 <HAL_ADC_Start_IT+0x254>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d002      	beq.n	80047e8 <HAL_ADC_Start_IT+0x1cc>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	e000      	b.n	80047ea <HAL_ADC_Start_IT+0x1ce>
 80047e8:	4b22      	ldr	r3, [pc, #136]	@ (8004874 <HAL_ADC_Start_IT+0x258>)
 80047ea:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d034      	beq.n	8004862 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004800:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d110      	bne.n	8004832 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0220 	bic.w	r2, r2, #32
 800481e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800482e:	605a      	str	r2, [r3, #4]
              break;
 8004830:	e017      	b.n	8004862 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004840:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0220 	orr.w	r2, r2, #32
 8004850:	605a      	str	r2, [r3, #4]
              break;
 8004852:	e006      	b.n	8004862 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800485c:	e001      	b.n	8004862 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800485e:	2302      	movs	r3, #2
 8004860:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004862:	7dfb      	ldrb	r3, [r7, #23]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	50040300 	.word	0x50040300
 8004870:	50040100 	.word	0x50040100
 8004874:	50040000 	.word	0x50040000

08004878 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004886:	4618      	mov	r0, r3
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08a      	sub	sp, #40	@ 0x28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800489c:	2300      	movs	r3, #0
 800489e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048b0:	4882      	ldr	r0, [pc, #520]	@ (8004abc <HAL_ADC_IRQHandler+0x228>)
 80048b2:	f7ff fc97 	bl	80041e4 <LL_ADC_GetMultimode>
 80048b6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d017      	beq.n	80048f2 <HAL_ADC_IRQHandler+0x5e>
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d012      	beq.n	80048f2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d105      	bne.n	80048e4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048dc:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fec9 	bl	800567c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2202      	movs	r2, #2
 80048f0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d004      	beq.n	8004906 <HAL_ADC_IRQHandler+0x72>
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	f003 0304 	and.w	r3, r3, #4
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10a      	bne.n	800491c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8083 	beq.w	8004a18 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	2b00      	cmp	r3, #0
 800491a:	d07d      	beq.n	8004a18 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b00      	cmp	r3, #0
 8004926:	d105      	bne.n	8004934 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800492c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff fbb2 	bl	80040a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d062      	beq.n	8004a0a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a5d      	ldr	r2, [pc, #372]	@ (8004ac0 <HAL_ADC_IRQHandler+0x22c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d002      	beq.n	8004954 <HAL_ADC_IRQHandler+0xc0>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	e000      	b.n	8004956 <HAL_ADC_IRQHandler+0xc2>
 8004954:	4b5b      	ldr	r3, [pc, #364]	@ (8004ac4 <HAL_ADC_IRQHandler+0x230>)
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6812      	ldr	r2, [r2, #0]
 800495a:	4293      	cmp	r3, r2
 800495c:	d008      	beq.n	8004970 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	2b05      	cmp	r3, #5
 8004968:	d002      	beq.n	8004970 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b09      	cmp	r3, #9
 800496e:	d104      	bne.n	800497a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	623b      	str	r3, [r7, #32]
 8004978:	e00c      	b.n	8004994 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a50      	ldr	r2, [pc, #320]	@ (8004ac0 <HAL_ADC_IRQHandler+0x22c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d002      	beq.n	800498a <HAL_ADC_IRQHandler+0xf6>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	e000      	b.n	800498c <HAL_ADC_IRQHandler+0xf8>
 800498a:	4b4e      	ldr	r3, [pc, #312]	@ (8004ac4 <HAL_ADC_IRQHandler+0x230>)
 800498c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d135      	bne.n	8004a0a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d12e      	bne.n	8004a0a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff fcbc 	bl	800432e <LL_ADC_REG_IsConversionOngoing>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d11a      	bne.n	80049f2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 020c 	bic.w	r2, r2, #12
 80049ca:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d112      	bne.n	8004a0a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e8:	f043 0201 	orr.w	r2, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80049f0:	e00b      	b.n	8004a0a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f6:	f043 0210 	orr.w	r2, r3, #16
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a02:	f043 0201 	orr.w	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fd fd8c 	bl	8002528 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	220c      	movs	r2, #12
 8004a16:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d004      	beq.n	8004a2c <HAL_ADC_IRQHandler+0x198>
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10b      	bne.n	8004a44 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 809f 	beq.w	8004b76 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 8099 	beq.w	8004b76 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a48:	f003 0310 	and.w	r3, r3, #16
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a54:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff fb5d 	bl	8004120 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004a66:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff fb18 	bl	80040a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a72:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a11      	ldr	r2, [pc, #68]	@ (8004ac0 <HAL_ADC_IRQHandler+0x22c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d002      	beq.n	8004a84 <HAL_ADC_IRQHandler+0x1f0>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	e000      	b.n	8004a86 <HAL_ADC_IRQHandler+0x1f2>
 8004a84:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac4 <HAL_ADC_IRQHandler+0x230>)
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6812      	ldr	r2, [r2, #0]
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d008      	beq.n	8004aa0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2b06      	cmp	r3, #6
 8004a98:	d002      	beq.n	8004aa0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b07      	cmp	r3, #7
 8004a9e:	d104      	bne.n	8004aaa <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	623b      	str	r3, [r7, #32]
 8004aa8:	e013      	b.n	8004ad2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a04      	ldr	r2, [pc, #16]	@ (8004ac0 <HAL_ADC_IRQHandler+0x22c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d009      	beq.n	8004ac8 <HAL_ADC_IRQHandler+0x234>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	e007      	b.n	8004aca <HAL_ADC_IRQHandler+0x236>
 8004aba:	bf00      	nop
 8004abc:	50040300 	.word	0x50040300
 8004ac0:	50040100 	.word	0x50040100
 8004ac4:	50040000 	.word	0x50040000
 8004ac8:	4b7d      	ldr	r3, [pc, #500]	@ (8004cc0 <HAL_ADC_IRQHandler+0x42c>)
 8004aca:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d047      	beq.n	8004b68 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <HAL_ADC_IRQHandler+0x25e>
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d03f      	beq.n	8004b68 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d13a      	bne.n	8004b68 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afc:	2b40      	cmp	r3, #64	@ 0x40
 8004afe:	d133      	bne.n	8004b68 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d12e      	bne.n	8004b68 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff fc20 	bl	8004354 <LL_ADC_INJ_IsConversionOngoing>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d11a      	bne.n	8004b50 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b28:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d112      	bne.n	8004b68 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b46:	f043 0201 	orr.w	r2, r3, #1
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	655a      	str	r2, [r3, #84]	@ 0x54
 8004b4e:	e00b      	b.n	8004b68 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b54:	f043 0210 	orr.w	r2, r3, #16
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b60:	f043 0201 	orr.w	r2, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fd5f 	bl	800562c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2260      	movs	r2, #96	@ 0x60
 8004b74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d011      	beq.n	8004ba4 <HAL_ADC_IRQHandler+0x310>
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00c      	beq.n	8004ba4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b8e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f896 	bl	8004cc8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2280      	movs	r2, #128	@ 0x80
 8004ba2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d012      	beq.n	8004bd4 <HAL_ADC_IRQHandler+0x340>
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00d      	beq.n	8004bd4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bbc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fd45 	bl	8005654 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004bd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d012      	beq.n	8004c04 <HAL_ADC_IRQHandler+0x370>
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00d      	beq.n	8004c04 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 fd37 	bl	8005668 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c02:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d036      	beq.n	8004c7c <HAL_ADC_IRQHandler+0x3e8>
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d031      	beq.n	8004c7c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d102      	bne.n	8004c26 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8004c20:	2301      	movs	r3, #1
 8004c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c24:	e014      	b.n	8004c50 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d008      	beq.n	8004c3e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004c2c:	4825      	ldr	r0, [pc, #148]	@ (8004cc4 <HAL_ADC_IRQHandler+0x430>)
 8004c2e:	f7ff fae7 	bl	8004200 <LL_ADC_GetMultiDMATransfer>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00b      	beq.n	8004c50 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c3c:	e008      	b.n	8004c50 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d10e      	bne.n	8004c74 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c5a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c66:	f043 0202 	orr.w	r2, r3, #2
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f834 	bl	8004cdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2210      	movs	r2, #16
 8004c7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d018      	beq.n	8004cb8 <HAL_ADC_IRQHandler+0x424>
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d013      	beq.n	8004cb8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c94:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca0:	f043 0208 	orr.w	r2, r3, #8
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004cb0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fcc4 	bl	8005640 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004cb8:	bf00      	nop
 8004cba:	3728      	adds	r7, #40	@ 0x28
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	50040000 	.word	0x50040000
 8004cc4:	50040300 	.word	0x50040300

08004cc8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b0b6      	sub	sp, #216	@ 0xd8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x22>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e3c9      	b.n	80054a6 <HAL_ADC_ConfigChannel+0x7b6>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff fb05 	bl	800432e <LL_ADC_REG_IsConversionOngoing>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f040 83aa 	bne.w	8005480 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2b05      	cmp	r3, #5
 8004d3a:	d824      	bhi.n	8004d86 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	3b02      	subs	r3, #2
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d81b      	bhi.n	8004d7e <HAL_ADC_ConfigChannel+0x8e>
 8004d46:	a201      	add	r2, pc, #4	@ (adr r2, 8004d4c <HAL_ADC_ConfigChannel+0x5c>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004d5d 	.word	0x08004d5d
 8004d50:	08004d65 	.word	0x08004d65
 8004d54:	08004d6d 	.word	0x08004d6d
 8004d58:	08004d75 	.word	0x08004d75
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004d5c:	230c      	movs	r3, #12
 8004d5e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004d62:	e010      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004d64:	2312      	movs	r3, #18
 8004d66:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004d6a:	e00c      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004d6c:	2318      	movs	r3, #24
 8004d6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004d72:	e008      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004d74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004d7c:	e003      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004d7e:	2306      	movs	r3, #6
 8004d80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004d84:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6818      	ldr	r0, [r3, #0]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004d94:	f7ff f998 	bl	80040c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff fac6 	bl	800432e <LL_ADC_REG_IsConversionOngoing>
 8004da2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff fad2 	bl	8004354 <LL_ADC_INJ_IsConversionOngoing>
 8004db0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004db4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f040 81a4 	bne.w	8005106 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004dbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f040 819f 	bne.w	8005106 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	6819      	ldr	r1, [r3, #0]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f7ff f9b6 	bl	8004146 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	695a      	ldr	r2, [r3, #20]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	08db      	lsrs	r3, r3, #3
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d00a      	beq.n	8004e12 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	6919      	ldr	r1, [r3, #16]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e0c:	f7ff f8f4 	bl	8003ff8 <LL_ADC_SetOffset>
 8004e10:	e179      	b.n	8005106 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2100      	movs	r1, #0
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff f911 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <HAL_ADC_ConfigChannel+0x14e>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff f906 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004e34:	4603      	mov	r3, r0
 8004e36:	0e9b      	lsrs	r3, r3, #26
 8004e38:	f003 021f 	and.w	r2, r3, #31
 8004e3c:	e01e      	b.n	8004e7c <HAL_ADC_ConfigChannel+0x18c>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2100      	movs	r1, #0
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff f8fb 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004e54:	fa93 f3a3 	rbit	r3, r3
 8004e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004e60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004e64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004e6c:	2320      	movs	r3, #32
 8004e6e:	e004      	b.n	8004e7a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004e70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004e74:	fab3 f383 	clz	r3, r3
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d105      	bne.n	8004e94 <HAL_ADC_ConfigChannel+0x1a4>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	0e9b      	lsrs	r3, r3, #26
 8004e8e:	f003 031f 	and.w	r3, r3, #31
 8004e92:	e018      	b.n	8004ec6 <HAL_ADC_ConfigChannel+0x1d6>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ea0:	fa93 f3a3 	rbit	r3, r3
 8004ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004ea8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004eac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004eb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004eb8:	2320      	movs	r3, #32
 8004eba:	e004      	b.n	8004ec6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004ebc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004ec0:	fab3 f383 	clz	r3, r3
 8004ec4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d106      	bne.n	8004ed8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff f8ca 	bl	800406c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2101      	movs	r1, #1
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff f8ae 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x214>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff f8a3 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004efa:	4603      	mov	r3, r0
 8004efc:	0e9b      	lsrs	r3, r3, #26
 8004efe:	f003 021f 	and.w	r2, r3, #31
 8004f02:	e01e      	b.n	8004f42 <HAL_ADC_ConfigChannel+0x252>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2101      	movs	r1, #1
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff f898 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004f10:	4603      	mov	r3, r0
 8004f12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f1a:	fa93 f3a3 	rbit	r3, r3
 8004f1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004f22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004f2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004f32:	2320      	movs	r3, #32
 8004f34:	e004      	b.n	8004f40 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004f36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f3a:	fab3 f383 	clz	r3, r3
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d105      	bne.n	8004f5a <HAL_ADC_ConfigChannel+0x26a>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	0e9b      	lsrs	r3, r3, #26
 8004f54:	f003 031f 	and.w	r3, r3, #31
 8004f58:	e018      	b.n	8004f8c <HAL_ADC_ConfigChannel+0x29c>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f66:	fa93 f3a3 	rbit	r3, r3
 8004f6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004f6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004f72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004f76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004f7e:	2320      	movs	r3, #32
 8004f80:	e004      	b.n	8004f8c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004f82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f86:	fab3 f383 	clz	r3, r3
 8004f8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d106      	bne.n	8004f9e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2200      	movs	r2, #0
 8004f96:	2101      	movs	r1, #1
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff f867 	bl	800406c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2102      	movs	r1, #2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff f84b 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004faa:	4603      	mov	r3, r0
 8004fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10a      	bne.n	8004fca <HAL_ADC_ConfigChannel+0x2da>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2102      	movs	r1, #2
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff f840 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	0e9b      	lsrs	r3, r3, #26
 8004fc4:	f003 021f 	and.w	r2, r3, #31
 8004fc8:	e01e      	b.n	8005008 <HAL_ADC_ConfigChannel+0x318>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2102      	movs	r1, #2
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff f835 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004fe0:	fa93 f3a3 	rbit	r3, r3
 8004fe4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004fec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8004ff8:	2320      	movs	r3, #32
 8004ffa:	e004      	b.n	8005006 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005000:	fab3 f383 	clz	r3, r3
 8005004:	b2db      	uxtb	r3, r3
 8005006:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005010:	2b00      	cmp	r3, #0
 8005012:	d105      	bne.n	8005020 <HAL_ADC_ConfigChannel+0x330>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	0e9b      	lsrs	r3, r3, #26
 800501a:	f003 031f 	and.w	r3, r3, #31
 800501e:	e014      	b.n	800504a <HAL_ADC_ConfigChannel+0x35a>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005026:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005028:	fa93 f3a3 	rbit	r3, r3
 800502c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800502e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005030:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005034:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800503c:	2320      	movs	r3, #32
 800503e:	e004      	b.n	800504a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8005040:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005044:	fab3 f383 	clz	r3, r3
 8005048:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800504a:	429a      	cmp	r2, r3
 800504c:	d106      	bne.n	800505c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2200      	movs	r2, #0
 8005054:	2102      	movs	r1, #2
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff f808 	bl	800406c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2103      	movs	r1, #3
 8005062:	4618      	mov	r0, r3
 8005064:	f7fe ffec 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8005068:	4603      	mov	r3, r0
 800506a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10a      	bne.n	8005088 <HAL_ADC_ConfigChannel+0x398>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2103      	movs	r1, #3
 8005078:	4618      	mov	r0, r3
 800507a:	f7fe ffe1 	bl	8004040 <LL_ADC_GetOffsetChannel>
 800507e:	4603      	mov	r3, r0
 8005080:	0e9b      	lsrs	r3, r3, #26
 8005082:	f003 021f 	and.w	r2, r3, #31
 8005086:	e017      	b.n	80050b8 <HAL_ADC_ConfigChannel+0x3c8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2103      	movs	r1, #3
 800508e:	4618      	mov	r0, r3
 8005090:	f7fe ffd6 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8005094:	4603      	mov	r3, r0
 8005096:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005098:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800509a:	fa93 f3a3 	rbit	r3, r3
 800509e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80050a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050a2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80050a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80050aa:	2320      	movs	r3, #32
 80050ac:	e003      	b.n	80050b6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80050ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050b0:	fab3 f383 	clz	r3, r3
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d105      	bne.n	80050d0 <HAL_ADC_ConfigChannel+0x3e0>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	0e9b      	lsrs	r3, r3, #26
 80050ca:	f003 031f 	and.w	r3, r3, #31
 80050ce:	e011      	b.n	80050f4 <HAL_ADC_ConfigChannel+0x404>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050d8:	fa93 f3a3 	rbit	r3, r3
 80050dc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80050de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80050e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80050e8:	2320      	movs	r3, #32
 80050ea:	e003      	b.n	80050f4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80050ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050ee:	fab3 f383 	clz	r3, r3
 80050f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d106      	bne.n	8005106 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2200      	movs	r2, #0
 80050fe:	2103      	movs	r1, #3
 8005100:	4618      	mov	r0, r3
 8005102:	f7fe ffb3 	bl	800406c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff f8e8 	bl	80042e0 <LL_ADC_IsEnabled>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	f040 8140 	bne.w	8005398 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6818      	ldr	r0, [r3, #0]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	6819      	ldr	r1, [r3, #0]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	461a      	mov	r2, r3
 8005126:	f7ff f839 	bl	800419c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	4a8f      	ldr	r2, [pc, #572]	@ (800536c <HAL_ADC_ConfigChannel+0x67c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	f040 8131 	bne.w	8005398 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10b      	bne.n	800515e <HAL_ADC_ConfigChannel+0x46e>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	0e9b      	lsrs	r3, r3, #26
 800514c:	3301      	adds	r3, #1
 800514e:	f003 031f 	and.w	r3, r3, #31
 8005152:	2b09      	cmp	r3, #9
 8005154:	bf94      	ite	ls
 8005156:	2301      	movls	r3, #1
 8005158:	2300      	movhi	r3, #0
 800515a:	b2db      	uxtb	r3, r3
 800515c:	e019      	b.n	8005192 <HAL_ADC_ConfigChannel+0x4a2>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005164:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005166:	fa93 f3a3 	rbit	r3, r3
 800516a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800516c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800516e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005170:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8005176:	2320      	movs	r3, #32
 8005178:	e003      	b.n	8005182 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800517a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800517c:	fab3 f383 	clz	r3, r3
 8005180:	b2db      	uxtb	r3, r3
 8005182:	3301      	adds	r3, #1
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	2b09      	cmp	r3, #9
 800518a:	bf94      	ite	ls
 800518c:	2301      	movls	r3, #1
 800518e:	2300      	movhi	r3, #0
 8005190:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005192:	2b00      	cmp	r3, #0
 8005194:	d079      	beq.n	800528a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d107      	bne.n	80051b2 <HAL_ADC_ConfigChannel+0x4c2>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	0e9b      	lsrs	r3, r3, #26
 80051a8:	3301      	adds	r3, #1
 80051aa:	069b      	lsls	r3, r3, #26
 80051ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051b0:	e015      	b.n	80051de <HAL_ADC_ConfigChannel+0x4ee>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ba:	fa93 f3a3 	rbit	r3, r3
 80051be:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80051c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051c2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80051c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80051ca:	2320      	movs	r3, #32
 80051cc:	e003      	b.n	80051d6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80051ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051d0:	fab3 f383 	clz	r3, r3
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	3301      	adds	r3, #1
 80051d8:	069b      	lsls	r3, r3, #26
 80051da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d109      	bne.n	80051fe <HAL_ADC_ConfigChannel+0x50e>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	0e9b      	lsrs	r3, r3, #26
 80051f0:	3301      	adds	r3, #1
 80051f2:	f003 031f 	and.w	r3, r3, #31
 80051f6:	2101      	movs	r1, #1
 80051f8:	fa01 f303 	lsl.w	r3, r1, r3
 80051fc:	e017      	b.n	800522e <HAL_ADC_ConfigChannel+0x53e>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005206:	fa93 f3a3 	rbit	r3, r3
 800520a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800520c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800520e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005216:	2320      	movs	r3, #32
 8005218:	e003      	b.n	8005222 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800521a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800521c:	fab3 f383 	clz	r3, r3
 8005220:	b2db      	uxtb	r3, r3
 8005222:	3301      	adds	r3, #1
 8005224:	f003 031f 	and.w	r3, r3, #31
 8005228:	2101      	movs	r1, #1
 800522a:	fa01 f303 	lsl.w	r3, r1, r3
 800522e:	ea42 0103 	orr.w	r1, r2, r3
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <HAL_ADC_ConfigChannel+0x564>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	0e9b      	lsrs	r3, r3, #26
 8005244:	3301      	adds	r3, #1
 8005246:	f003 021f 	and.w	r2, r3, #31
 800524a:	4613      	mov	r3, r2
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	4413      	add	r3, r2
 8005250:	051b      	lsls	r3, r3, #20
 8005252:	e018      	b.n	8005286 <HAL_ADC_ConfigChannel+0x596>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800525c:	fa93 f3a3 	rbit	r3, r3
 8005260:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005264:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800526c:	2320      	movs	r3, #32
 800526e:	e003      	b.n	8005278 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8005270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005272:	fab3 f383 	clz	r3, r3
 8005276:	b2db      	uxtb	r3, r3
 8005278:	3301      	adds	r3, #1
 800527a:	f003 021f 	and.w	r2, r3, #31
 800527e:	4613      	mov	r3, r2
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	4413      	add	r3, r2
 8005284:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005286:	430b      	orrs	r3, r1
 8005288:	e081      	b.n	800538e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005292:	2b00      	cmp	r3, #0
 8005294:	d107      	bne.n	80052a6 <HAL_ADC_ConfigChannel+0x5b6>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	0e9b      	lsrs	r3, r3, #26
 800529c:	3301      	adds	r3, #1
 800529e:	069b      	lsls	r3, r3, #26
 80052a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80052a4:	e015      	b.n	80052d2 <HAL_ADC_ConfigChannel+0x5e2>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ae:	fa93 f3a3 	rbit	r3, r3
 80052b2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80052b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80052b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80052be:	2320      	movs	r3, #32
 80052c0:	e003      	b.n	80052ca <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80052c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c4:	fab3 f383 	clz	r3, r3
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	3301      	adds	r3, #1
 80052cc:	069b      	lsls	r3, r3, #26
 80052ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d109      	bne.n	80052f2 <HAL_ADC_ConfigChannel+0x602>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	0e9b      	lsrs	r3, r3, #26
 80052e4:	3301      	adds	r3, #1
 80052e6:	f003 031f 	and.w	r3, r3, #31
 80052ea:	2101      	movs	r1, #1
 80052ec:	fa01 f303 	lsl.w	r3, r1, r3
 80052f0:	e017      	b.n	8005322 <HAL_ADC_ConfigChannel+0x632>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	fa93 f3a3 	rbit	r3, r3
 80052fe:	61bb      	str	r3, [r7, #24]
  return result;
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800530a:	2320      	movs	r3, #32
 800530c:	e003      	b.n	8005316 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	fab3 f383 	clz	r3, r3
 8005314:	b2db      	uxtb	r3, r3
 8005316:	3301      	adds	r3, #1
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	2101      	movs	r1, #1
 800531e:	fa01 f303 	lsl.w	r3, r1, r3
 8005322:	ea42 0103 	orr.w	r1, r2, r3
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10d      	bne.n	800534e <HAL_ADC_ConfigChannel+0x65e>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	0e9b      	lsrs	r3, r3, #26
 8005338:	3301      	adds	r3, #1
 800533a:	f003 021f 	and.w	r2, r3, #31
 800533e:	4613      	mov	r3, r2
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	4413      	add	r3, r2
 8005344:	3b1e      	subs	r3, #30
 8005346:	051b      	lsls	r3, r3, #20
 8005348:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800534c:	e01e      	b.n	800538c <HAL_ADC_ConfigChannel+0x69c>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	fa93 f3a3 	rbit	r3, r3
 800535a:	60fb      	str	r3, [r7, #12]
  return result;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d104      	bne.n	8005370 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8005366:	2320      	movs	r3, #32
 8005368:	e006      	b.n	8005378 <HAL_ADC_ConfigChannel+0x688>
 800536a:	bf00      	nop
 800536c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	fab3 f383 	clz	r3, r3
 8005376:	b2db      	uxtb	r3, r3
 8005378:	3301      	adds	r3, #1
 800537a:	f003 021f 	and.w	r2, r3, #31
 800537e:	4613      	mov	r3, r2
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	4413      	add	r3, r2
 8005384:	3b1e      	subs	r3, #30
 8005386:	051b      	lsls	r3, r3, #20
 8005388:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800538c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005392:	4619      	mov	r1, r3
 8005394:	f7fe fed7 	bl	8004146 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	4b44      	ldr	r3, [pc, #272]	@ (80054b0 <HAL_ADC_ConfigChannel+0x7c0>)
 800539e:	4013      	ands	r3, r2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d07a      	beq.n	800549a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80053a4:	4843      	ldr	r0, [pc, #268]	@ (80054b4 <HAL_ADC_ConfigChannel+0x7c4>)
 80053a6:	f7fe fe19 	bl	8003fdc <LL_ADC_GetCommonPathInternalCh>
 80053aa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a41      	ldr	r2, [pc, #260]	@ (80054b8 <HAL_ADC_ConfigChannel+0x7c8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d12c      	bne.n	8005412 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80053b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80053bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d126      	bne.n	8005412 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a3c      	ldr	r2, [pc, #240]	@ (80054bc <HAL_ADC_ConfigChannel+0x7cc>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <HAL_ADC_ConfigChannel+0x6e8>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a3b      	ldr	r2, [pc, #236]	@ (80054c0 <HAL_ADC_ConfigChannel+0x7d0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d15d      	bne.n	8005494 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80053d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80053dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053e0:	4619      	mov	r1, r3
 80053e2:	4834      	ldr	r0, [pc, #208]	@ (80054b4 <HAL_ADC_ConfigChannel+0x7c4>)
 80053e4:	f7fe fde7 	bl	8003fb6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053e8:	4b36      	ldr	r3, [pc, #216]	@ (80054c4 <HAL_ADC_ConfigChannel+0x7d4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	099b      	lsrs	r3, r3, #6
 80053ee:	4a36      	ldr	r2, [pc, #216]	@ (80054c8 <HAL_ADC_ConfigChannel+0x7d8>)
 80053f0:	fba2 2303 	umull	r2, r3, r2, r3
 80053f4:	099b      	lsrs	r3, r3, #6
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	4613      	mov	r3, r2
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005402:	e002      	b.n	800540a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	3b01      	subs	r3, #1
 8005408:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1f9      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005410:	e040      	b.n	8005494 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a2d      	ldr	r2, [pc, #180]	@ (80054cc <HAL_ADC_ConfigChannel+0x7dc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d118      	bne.n	800544e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800541c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005420:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d112      	bne.n	800544e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a23      	ldr	r2, [pc, #140]	@ (80054bc <HAL_ADC_ConfigChannel+0x7cc>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d004      	beq.n	800543c <HAL_ADC_ConfigChannel+0x74c>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a22      	ldr	r2, [pc, #136]	@ (80054c0 <HAL_ADC_ConfigChannel+0x7d0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d12d      	bne.n	8005498 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800543c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005440:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005444:	4619      	mov	r1, r3
 8005446:	481b      	ldr	r0, [pc, #108]	@ (80054b4 <HAL_ADC_ConfigChannel+0x7c4>)
 8005448:	f7fe fdb5 	bl	8003fb6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800544c:	e024      	b.n	8005498 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a1f      	ldr	r2, [pc, #124]	@ (80054d0 <HAL_ADC_ConfigChannel+0x7e0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d120      	bne.n	800549a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005458:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800545c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d11a      	bne.n	800549a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a14      	ldr	r2, [pc, #80]	@ (80054bc <HAL_ADC_ConfigChannel+0x7cc>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d115      	bne.n	800549a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800546e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005472:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005476:	4619      	mov	r1, r3
 8005478:	480e      	ldr	r0, [pc, #56]	@ (80054b4 <HAL_ADC_ConfigChannel+0x7c4>)
 800547a:	f7fe fd9c 	bl	8003fb6 <LL_ADC_SetCommonPathInternalCh>
 800547e:	e00c      	b.n	800549a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005484:	f043 0220 	orr.w	r2, r3, #32
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005492:	e002      	b.n	800549a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005494:	bf00      	nop
 8005496:	e000      	b.n	800549a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005498:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80054a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	37d8      	adds	r7, #216	@ 0xd8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	80080000 	.word	0x80080000
 80054b4:	50040300 	.word	0x50040300
 80054b8:	c7520000 	.word	0xc7520000
 80054bc:	50040000 	.word	0x50040000
 80054c0:	50040200 	.word	0x50040200
 80054c4:	20000008 	.word	0x20000008
 80054c8:	053e2d63 	.word	0x053e2d63
 80054cc:	cb840000 	.word	0xcb840000
 80054d0:	80000001 	.word	0x80000001

080054d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80054dc:	2300      	movs	r3, #0
 80054de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fe fefb 	bl	80042e0 <LL_ADC_IsEnabled>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d169      	bne.n	80055c4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	4b36      	ldr	r3, [pc, #216]	@ (80055d0 <ADC_Enable+0xfc>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00d      	beq.n	800551a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005502:	f043 0210 	orr.w	r2, r3, #16
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550e:	f043 0201 	orr.w	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e055      	b.n	80055c6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe feca 	bl	80042b8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005524:	482b      	ldr	r0, [pc, #172]	@ (80055d4 <ADC_Enable+0x100>)
 8005526:	f7fe fd59 	bl	8003fdc <LL_ADC_GetCommonPathInternalCh>
 800552a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800552c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005530:	2b00      	cmp	r3, #0
 8005532:	d013      	beq.n	800555c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005534:	4b28      	ldr	r3, [pc, #160]	@ (80055d8 <ADC_Enable+0x104>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	099b      	lsrs	r3, r3, #6
 800553a:	4a28      	ldr	r2, [pc, #160]	@ (80055dc <ADC_Enable+0x108>)
 800553c:	fba2 2303 	umull	r2, r3, r2, r3
 8005540:	099b      	lsrs	r3, r3, #6
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	4613      	mov	r3, r2
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800554e:	e002      	b.n	8005556 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	3b01      	subs	r3, #1
 8005554:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1f9      	bne.n	8005550 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800555c:	f7fe fce8 	bl	8003f30 <HAL_GetTick>
 8005560:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005562:	e028      	b.n	80055b6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4618      	mov	r0, r3
 800556a:	f7fe feb9 	bl	80042e0 <LL_ADC_IsEnabled>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d104      	bne.n	800557e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f7fe fe9d 	bl	80042b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800557e:	f7fe fcd7 	bl	8003f30 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d914      	bls.n	80055b6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b01      	cmp	r3, #1
 8005598:	d00d      	beq.n	80055b6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800559e:	f043 0210 	orr.w	r2, r3, #16
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055aa:	f043 0201 	orr.w	r2, r3, #1
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e007      	b.n	80055c6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d1cf      	bne.n	8005564 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	8000003f 	.word	0x8000003f
 80055d4:	50040300 	.word	0x50040300
 80055d8:	20000008 	.word	0x20000008
 80055dc:	053e2d63 	.word	0x053e2d63

080055e0 <LL_ADC_IsEnabled>:
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <LL_ADC_IsEnabled+0x18>
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <LL_ADC_IsEnabled+0x1a>
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <LL_ADC_REG_IsConversionOngoing>:
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b04      	cmp	r3, #4
 8005618:	d101      	bne.n	800561e <LL_ADC_REG_IsConversionOngoing+0x18>
 800561a:	2301      	movs	r3, #1
 800561c:	e000      	b.n	8005620 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005690:	b590      	push	{r4, r7, lr}
 8005692:	b09f      	sub	sp, #124	@ 0x7c
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e093      	b.n	80057d6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80056b6:	2300      	movs	r3, #0
 80056b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80056ba:	2300      	movs	r3, #0
 80056bc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a47      	ldr	r2, [pc, #284]	@ (80057e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d102      	bne.n	80056ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80056c8:	4b46      	ldr	r3, [pc, #280]	@ (80057e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80056ca:	60bb      	str	r3, [r7, #8]
 80056cc:	e001      	b.n	80056d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80056ce:	2300      	movs	r3, #0
 80056d0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10b      	bne.n	80056f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056dc:	f043 0220 	orr.w	r2, r3, #32
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e072      	b.n	80057d6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff ff87 	bl	8005606 <LL_ADC_REG_IsConversionOngoing>
 80056f8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff ff81 	bl	8005606 <LL_ADC_REG_IsConversionOngoing>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d154      	bne.n	80057b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800570a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800570c:	2b00      	cmp	r3, #0
 800570e:	d151      	bne.n	80057b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005710:	4b35      	ldr	r3, [pc, #212]	@ (80057e8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005712:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d02c      	beq.n	8005776 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800571c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	6859      	ldr	r1, [r3, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800572e:	035b      	lsls	r3, r3, #13
 8005730:	430b      	orrs	r3, r1
 8005732:	431a      	orrs	r2, r3
 8005734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005736:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005738:	4829      	ldr	r0, [pc, #164]	@ (80057e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800573a:	f7ff ff51 	bl	80055e0 <LL_ADC_IsEnabled>
 800573e:	4604      	mov	r4, r0
 8005740:	4828      	ldr	r0, [pc, #160]	@ (80057e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005742:	f7ff ff4d 	bl	80055e0 <LL_ADC_IsEnabled>
 8005746:	4603      	mov	r3, r0
 8005748:	431c      	orrs	r4, r3
 800574a:	4828      	ldr	r0, [pc, #160]	@ (80057ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800574c:	f7ff ff48 	bl	80055e0 <LL_ADC_IsEnabled>
 8005750:	4603      	mov	r3, r0
 8005752:	4323      	orrs	r3, r4
 8005754:	2b00      	cmp	r3, #0
 8005756:	d137      	bne.n	80057c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005758:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005760:	f023 030f 	bic.w	r3, r3, #15
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	6811      	ldr	r1, [r2, #0]
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	6892      	ldr	r2, [r2, #8]
 800576c:	430a      	orrs	r2, r1
 800576e:	431a      	orrs	r2, r3
 8005770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005772:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005774:	e028      	b.n	80057c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005776:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800577e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005780:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005782:	4817      	ldr	r0, [pc, #92]	@ (80057e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005784:	f7ff ff2c 	bl	80055e0 <LL_ADC_IsEnabled>
 8005788:	4604      	mov	r4, r0
 800578a:	4816      	ldr	r0, [pc, #88]	@ (80057e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800578c:	f7ff ff28 	bl	80055e0 <LL_ADC_IsEnabled>
 8005790:	4603      	mov	r3, r0
 8005792:	431c      	orrs	r4, r3
 8005794:	4815      	ldr	r0, [pc, #84]	@ (80057ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005796:	f7ff ff23 	bl	80055e0 <LL_ADC_IsEnabled>
 800579a:	4603      	mov	r3, r0
 800579c:	4323      	orrs	r3, r4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d112      	bne.n	80057c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80057a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80057aa:	f023 030f 	bic.w	r3, r3, #15
 80057ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80057b0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80057b2:	e009      	b.n	80057c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b8:	f043 0220 	orr.w	r2, r3, #32
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80057c6:	e000      	b.n	80057ca <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80057c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80057d2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	377c      	adds	r7, #124	@ 0x7c
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd90      	pop	{r4, r7, pc}
 80057de:	bf00      	nop
 80057e0:	50040000 	.word	0x50040000
 80057e4:	50040100 	.word	0x50040100
 80057e8:	50040300 	.word	0x50040300
 80057ec:	50040200 	.word	0x50040200

080057f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005800:	4b0c      	ldr	r3, [pc, #48]	@ (8005834 <__NVIC_SetPriorityGrouping+0x44>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800580c:	4013      	ands	r3, r2
 800580e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005818:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800581c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005822:	4a04      	ldr	r2, [pc, #16]	@ (8005834 <__NVIC_SetPriorityGrouping+0x44>)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	60d3      	str	r3, [r2, #12]
}
 8005828:	bf00      	nop
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	e000ed00 	.word	0xe000ed00

08005838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800583c:	4b04      	ldr	r3, [pc, #16]	@ (8005850 <__NVIC_GetPriorityGrouping+0x18>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	0a1b      	lsrs	r3, r3, #8
 8005842:	f003 0307 	and.w	r3, r3, #7
}
 8005846:	4618      	mov	r0, r3
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	e000ed00 	.word	0xe000ed00

08005854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800585e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005862:	2b00      	cmp	r3, #0
 8005864:	db0b      	blt.n	800587e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	f003 021f 	and.w	r2, r3, #31
 800586c:	4907      	ldr	r1, [pc, #28]	@ (800588c <__NVIC_EnableIRQ+0x38>)
 800586e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	2001      	movs	r0, #1
 8005876:	fa00 f202 	lsl.w	r2, r0, r2
 800587a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	e000e100 	.word	0xe000e100

08005890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	4603      	mov	r3, r0
 8005898:	6039      	str	r1, [r7, #0]
 800589a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800589c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	db0a      	blt.n	80058ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	490c      	ldr	r1, [pc, #48]	@ (80058dc <__NVIC_SetPriority+0x4c>)
 80058aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ae:	0112      	lsls	r2, r2, #4
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	440b      	add	r3, r1
 80058b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058b8:	e00a      	b.n	80058d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	4908      	ldr	r1, [pc, #32]	@ (80058e0 <__NVIC_SetPriority+0x50>)
 80058c0:	79fb      	ldrb	r3, [r7, #7]
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	3b04      	subs	r3, #4
 80058c8:	0112      	lsls	r2, r2, #4
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	440b      	add	r3, r1
 80058ce:	761a      	strb	r2, [r3, #24]
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	e000e100 	.word	0xe000e100
 80058e0:	e000ed00 	.word	0xe000ed00

080058e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b089      	sub	sp, #36	@ 0x24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f1c3 0307 	rsb	r3, r3, #7
 80058fe:	2b04      	cmp	r3, #4
 8005900:	bf28      	it	cs
 8005902:	2304      	movcs	r3, #4
 8005904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	3304      	adds	r3, #4
 800590a:	2b06      	cmp	r3, #6
 800590c:	d902      	bls.n	8005914 <NVIC_EncodePriority+0x30>
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	3b03      	subs	r3, #3
 8005912:	e000      	b.n	8005916 <NVIC_EncodePriority+0x32>
 8005914:	2300      	movs	r3, #0
 8005916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005918:	f04f 32ff 	mov.w	r2, #4294967295
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	43da      	mvns	r2, r3
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	401a      	ands	r2, r3
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800592c:	f04f 31ff 	mov.w	r1, #4294967295
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	fa01 f303 	lsl.w	r3, r1, r3
 8005936:	43d9      	mvns	r1, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800593c:	4313      	orrs	r3, r2
         );
}
 800593e:	4618      	mov	r0, r3
 8005940:	3724      	adds	r7, #36	@ 0x24
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
	...

0800594c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3b01      	subs	r3, #1
 8005958:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800595c:	d301      	bcc.n	8005962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800595e:	2301      	movs	r3, #1
 8005960:	e00f      	b.n	8005982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005962:	4a0a      	ldr	r2, [pc, #40]	@ (800598c <SysTick_Config+0x40>)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3b01      	subs	r3, #1
 8005968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800596a:	210f      	movs	r1, #15
 800596c:	f04f 30ff 	mov.w	r0, #4294967295
 8005970:	f7ff ff8e 	bl	8005890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005974:	4b05      	ldr	r3, [pc, #20]	@ (800598c <SysTick_Config+0x40>)
 8005976:	2200      	movs	r2, #0
 8005978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800597a:	4b04      	ldr	r3, [pc, #16]	@ (800598c <SysTick_Config+0x40>)
 800597c:	2207      	movs	r2, #7
 800597e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	e000e010 	.word	0xe000e010

08005990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7ff ff29 	bl	80057f0 <__NVIC_SetPriorityGrouping>
}
 800599e:	bf00      	nop
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b086      	sub	sp, #24
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	4603      	mov	r3, r0
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	607a      	str	r2, [r7, #4]
 80059b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80059b4:	2300      	movs	r3, #0
 80059b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80059b8:	f7ff ff3e 	bl	8005838 <__NVIC_GetPriorityGrouping>
 80059bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	6978      	ldr	r0, [r7, #20]
 80059c4:	f7ff ff8e 	bl	80058e4 <NVIC_EncodePriority>
 80059c8:	4602      	mov	r2, r0
 80059ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059ce:	4611      	mov	r1, r2
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7ff ff5d 	bl	8005890 <__NVIC_SetPriority>
}
 80059d6:	bf00      	nop
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b082      	sub	sp, #8
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	4603      	mov	r3, r0
 80059e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff ff31 	bl	8005854 <__NVIC_EnableIRQ>
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b082      	sub	sp, #8
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7ff ffa2 	bl	800594c <SysTick_Config>
 8005a08:	4603      	mov	r3, r0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e0ac      	b.n	8005b80 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 f8b2 	bl	8005b94 <DFSDM_GetChannelFromInstance>
 8005a30:	4603      	mov	r3, r0
 8005a32:	4a55      	ldr	r2, [pc, #340]	@ (8005b88 <HAL_DFSDM_ChannelInit+0x174>)
 8005a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e09f      	b.n	8005b80 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7fd f929 	bl	8002c98 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8005a46:	4b51      	ldr	r3, [pc, #324]	@ (8005b8c <HAL_DFSDM_ChannelInit+0x178>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	4a4f      	ldr	r2, [pc, #316]	@ (8005b8c <HAL_DFSDM_ChannelInit+0x178>)
 8005a4e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8005a50:	4b4e      	ldr	r3, [pc, #312]	@ (8005b8c <HAL_DFSDM_ChannelInit+0x178>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d125      	bne.n	8005aa4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8005a58:	4b4d      	ldr	r3, [pc, #308]	@ (8005b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a4c      	ldr	r2, [pc, #304]	@ (8005b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8005a5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005a62:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8005a64:	4b4a      	ldr	r3, [pc, #296]	@ (8005b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	4948      	ldr	r1, [pc, #288]	@ (8005b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8005a72:	4b47      	ldr	r3, [pc, #284]	@ (8005b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a46      	ldr	r2, [pc, #280]	@ (8005b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8005a78:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8005a7c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	791b      	ldrb	r3, [r3, #4]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d108      	bne.n	8005a98 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8005a86:	4b42      	ldr	r3, [pc, #264]	@ (8005b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	041b      	lsls	r3, r3, #16
 8005a92:	493f      	ldr	r1, [pc, #252]	@ (8005b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8005a98:	4b3d      	ldr	r3, [pc, #244]	@ (8005b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a3c      	ldr	r2, [pc, #240]	@ (8005b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8005a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8005ab2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6819      	ldr	r1, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005ac2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8005ac8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 020f 	bic.w	r2, r2, #15
 8005ae0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6819      	ldr	r1, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8005b08:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6899      	ldr	r1, [r3, #8]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f002 0207 	and.w	r2, r2, #7
 8005b34:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6859      	ldr	r1, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b40:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b46:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b60:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 f810 	bl	8005b94 <DFSDM_GetChannelFromInstance>
 8005b74:	4602      	mov	r2, r0
 8005b76:	4904      	ldr	r1, [pc, #16]	@ (8005b88 <HAL_DFSDM_ChannelInit+0x174>)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	20000c7c 	.word	0x20000c7c
 8005b8c:	20000c78 	.word	0x20000c78
 8005b90:	40016000 	.word	0x40016000

08005b94 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005c10 <DFSDM_GetChannelFromInstance+0x7c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d102      	bne.n	8005baa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	e02b      	b.n	8005c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a19      	ldr	r2, [pc, #100]	@ (8005c14 <DFSDM_GetChannelFromInstance+0x80>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d102      	bne.n	8005bb8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	e024      	b.n	8005c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a17      	ldr	r2, [pc, #92]	@ (8005c18 <DFSDM_GetChannelFromInstance+0x84>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d102      	bne.n	8005bc6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	e01d      	b.n	8005c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a14      	ldr	r2, [pc, #80]	@ (8005c1c <DFSDM_GetChannelFromInstance+0x88>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d102      	bne.n	8005bd4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8005bce:	2304      	movs	r3, #4
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	e016      	b.n	8005c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a12      	ldr	r2, [pc, #72]	@ (8005c20 <DFSDM_GetChannelFromInstance+0x8c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d102      	bne.n	8005be2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8005bdc:	2305      	movs	r3, #5
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	e00f      	b.n	8005c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a0f      	ldr	r2, [pc, #60]	@ (8005c24 <DFSDM_GetChannelFromInstance+0x90>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d102      	bne.n	8005bf0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8005bea:	2306      	movs	r3, #6
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	e008      	b.n	8005c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8005c28 <DFSDM_GetChannelFromInstance+0x94>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d102      	bne.n	8005bfe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8005bf8:	2307      	movs	r3, #7
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	e001      	b.n	8005c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8005c02:	68fb      	ldr	r3, [r7, #12]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	40016000 	.word	0x40016000
 8005c14:	40016020 	.word	0x40016020
 8005c18:	40016040 	.word	0x40016040
 8005c1c:	40016080 	.word	0x40016080
 8005c20:	400160a0 	.word	0x400160a0
 8005c24:	400160c0 	.word	0x400160c0
 8005c28:	400160e0 	.word	0x400160e0

08005c2c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	460b      	mov	r3, r1
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8005c3e:	7afb      	ldrb	r3, [r7, #11]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d103      	bne.n	8005c4c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	605a      	str	r2, [r3, #4]
      break;
 8005c4a:	e002      	b.n	8005c52 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c50:	bf00      	nop
  }

  return status;
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	371c      	adds	r7, #28
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e003      	b.n	8005c7c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
  }
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	0c1b      	lsrs	r3, r3, #16
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 031f 	and.w	r3, r3, #31
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce4 <HAL_EXTI_IRQHandler+0x5c>)
 8005cb2:	4413      	add	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d009      	beq.n	8005cda <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	4798      	blx	r3
    }
  }
}
 8005cda:	bf00      	nop
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	40010414 	.word	0x40010414

08005ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005cf6:	e17f      	b.n	8005ff8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	fa01 f303 	lsl.w	r3, r1, r3
 8005d04:	4013      	ands	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 8171 	beq.w	8005ff2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f003 0303 	and.w	r3, r3, #3
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d005      	beq.n	8005d28 <HAL_GPIO_Init+0x40>
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f003 0303 	and.w	r3, r3, #3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d130      	bne.n	8005d8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	2203      	movs	r2, #3
 8005d34:	fa02 f303 	lsl.w	r3, r2, r3
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	68da      	ldr	r2, [r3, #12]
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d5e:	2201      	movs	r2, #1
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	fa02 f303 	lsl.w	r3, r2, r3
 8005d66:	43db      	mvns	r3, r3
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	091b      	lsrs	r3, r3, #4
 8005d74:	f003 0201 	and.w	r2, r3, #1
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d118      	bne.n	8005dc8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	43db      	mvns	r3, r3
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4013      	ands	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	08db      	lsrs	r3, r3, #3
 8005db2:	f003 0201 	and.w	r2, r3, #1
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f003 0303 	and.w	r3, r3, #3
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d017      	beq.n	8005e04 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	2203      	movs	r2, #3
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	43db      	mvns	r3, r3
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4013      	ands	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f003 0303 	and.w	r3, r3, #3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d123      	bne.n	8005e58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	08da      	lsrs	r2, r3, #3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3208      	adds	r2, #8
 8005e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	220f      	movs	r2, #15
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4013      	ands	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	08da      	lsrs	r2, r3, #3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3208      	adds	r2, #8
 8005e52:	6939      	ldr	r1, [r7, #16]
 8005e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	2203      	movs	r2, #3
 8005e64:	fa02 f303 	lsl.w	r3, r2, r3
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f003 0203 	and.w	r2, r3, #3
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 80ac 	beq.w	8005ff2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e9a:	4b5f      	ldr	r3, [pc, #380]	@ (8006018 <HAL_GPIO_Init+0x330>)
 8005e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e9e:	4a5e      	ldr	r2, [pc, #376]	@ (8006018 <HAL_GPIO_Init+0x330>)
 8005ea0:	f043 0301 	orr.w	r3, r3, #1
 8005ea4:	6613      	str	r3, [r2, #96]	@ 0x60
 8005ea6:	4b5c      	ldr	r3, [pc, #368]	@ (8006018 <HAL_GPIO_Init+0x330>)
 8005ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	60bb      	str	r3, [r7, #8]
 8005eb0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005eb2:	4a5a      	ldr	r2, [pc, #360]	@ (800601c <HAL_GPIO_Init+0x334>)
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	089b      	lsrs	r3, r3, #2
 8005eb8:	3302      	adds	r3, #2
 8005eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	220f      	movs	r2, #15
 8005eca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005edc:	d025      	beq.n	8005f2a <HAL_GPIO_Init+0x242>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a4f      	ldr	r2, [pc, #316]	@ (8006020 <HAL_GPIO_Init+0x338>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d01f      	beq.n	8005f26 <HAL_GPIO_Init+0x23e>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a4e      	ldr	r2, [pc, #312]	@ (8006024 <HAL_GPIO_Init+0x33c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d019      	beq.n	8005f22 <HAL_GPIO_Init+0x23a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a4d      	ldr	r2, [pc, #308]	@ (8006028 <HAL_GPIO_Init+0x340>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d013      	beq.n	8005f1e <HAL_GPIO_Init+0x236>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800602c <HAL_GPIO_Init+0x344>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00d      	beq.n	8005f1a <HAL_GPIO_Init+0x232>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a4b      	ldr	r2, [pc, #300]	@ (8006030 <HAL_GPIO_Init+0x348>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d007      	beq.n	8005f16 <HAL_GPIO_Init+0x22e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a4a      	ldr	r2, [pc, #296]	@ (8006034 <HAL_GPIO_Init+0x34c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d101      	bne.n	8005f12 <HAL_GPIO_Init+0x22a>
 8005f0e:	2306      	movs	r3, #6
 8005f10:	e00c      	b.n	8005f2c <HAL_GPIO_Init+0x244>
 8005f12:	2307      	movs	r3, #7
 8005f14:	e00a      	b.n	8005f2c <HAL_GPIO_Init+0x244>
 8005f16:	2305      	movs	r3, #5
 8005f18:	e008      	b.n	8005f2c <HAL_GPIO_Init+0x244>
 8005f1a:	2304      	movs	r3, #4
 8005f1c:	e006      	b.n	8005f2c <HAL_GPIO_Init+0x244>
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e004      	b.n	8005f2c <HAL_GPIO_Init+0x244>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e002      	b.n	8005f2c <HAL_GPIO_Init+0x244>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <HAL_GPIO_Init+0x244>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	f002 0203 	and.w	r2, r2, #3
 8005f32:	0092      	lsls	r2, r2, #2
 8005f34:	4093      	lsls	r3, r2
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005f3c:	4937      	ldr	r1, [pc, #220]	@ (800601c <HAL_GPIO_Init+0x334>)
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	089b      	lsrs	r3, r3, #2
 8005f42:	3302      	adds	r3, #2
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8006038 <HAL_GPIO_Init+0x350>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	43db      	mvns	r3, r3
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4013      	ands	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f6e:	4a32      	ldr	r2, [pc, #200]	@ (8006038 <HAL_GPIO_Init+0x350>)
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f74:	4b30      	ldr	r3, [pc, #192]	@ (8006038 <HAL_GPIO_Init+0x350>)
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4013      	ands	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f98:	4a27      	ldr	r2, [pc, #156]	@ (8006038 <HAL_GPIO_Init+0x350>)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005f9e:	4b26      	ldr	r3, [pc, #152]	@ (8006038 <HAL_GPIO_Init+0x350>)
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	43db      	mvns	r3, r3
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4013      	ands	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8006038 <HAL_GPIO_Init+0x350>)
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8006038 <HAL_GPIO_Init+0x350>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005fec:	4a12      	ldr	r2, [pc, #72]	@ (8006038 <HAL_GPIO_Init+0x350>)
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	f47f ae78 	bne.w	8005cf8 <HAL_GPIO_Init+0x10>
  }
}
 8006008:	bf00      	nop
 800600a:	bf00      	nop
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	40021000 	.word	0x40021000
 800601c:	40010000 	.word	0x40010000
 8006020:	48000400 	.word	0x48000400
 8006024:	48000800 	.word	0x48000800
 8006028:	48000c00 	.word	0x48000c00
 800602c:	48001000 	.word	0x48001000
 8006030:	48001400 	.word	0x48001400
 8006034:	48001800 	.word	0x48001800
 8006038:	40010400 	.word	0x40010400

0800603c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006046:	2300      	movs	r3, #0
 8006048:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800604a:	e0cd      	b.n	80061e8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800604c:	2201      	movs	r2, #1
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	fa02 f303 	lsl.w	r3, r2, r3
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	4013      	ands	r3, r2
 8006058:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 80c0 	beq.w	80061e2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006062:	4a68      	ldr	r2, [pc, #416]	@ (8006204 <HAL_GPIO_DeInit+0x1c8>)
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	089b      	lsrs	r3, r3, #2
 8006068:	3302      	adds	r3, #2
 800606a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800606e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	220f      	movs	r2, #15
 800607a:	fa02 f303 	lsl.w	r3, r2, r3
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4013      	ands	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800608a:	d025      	beq.n	80060d8 <HAL_GPIO_DeInit+0x9c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a5e      	ldr	r2, [pc, #376]	@ (8006208 <HAL_GPIO_DeInit+0x1cc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d01f      	beq.n	80060d4 <HAL_GPIO_DeInit+0x98>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a5d      	ldr	r2, [pc, #372]	@ (800620c <HAL_GPIO_DeInit+0x1d0>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d019      	beq.n	80060d0 <HAL_GPIO_DeInit+0x94>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a5c      	ldr	r2, [pc, #368]	@ (8006210 <HAL_GPIO_DeInit+0x1d4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d013      	beq.n	80060cc <HAL_GPIO_DeInit+0x90>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a5b      	ldr	r2, [pc, #364]	@ (8006214 <HAL_GPIO_DeInit+0x1d8>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00d      	beq.n	80060c8 <HAL_GPIO_DeInit+0x8c>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a5a      	ldr	r2, [pc, #360]	@ (8006218 <HAL_GPIO_DeInit+0x1dc>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d007      	beq.n	80060c4 <HAL_GPIO_DeInit+0x88>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a59      	ldr	r2, [pc, #356]	@ (800621c <HAL_GPIO_DeInit+0x1e0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d101      	bne.n	80060c0 <HAL_GPIO_DeInit+0x84>
 80060bc:	2306      	movs	r3, #6
 80060be:	e00c      	b.n	80060da <HAL_GPIO_DeInit+0x9e>
 80060c0:	2307      	movs	r3, #7
 80060c2:	e00a      	b.n	80060da <HAL_GPIO_DeInit+0x9e>
 80060c4:	2305      	movs	r3, #5
 80060c6:	e008      	b.n	80060da <HAL_GPIO_DeInit+0x9e>
 80060c8:	2304      	movs	r3, #4
 80060ca:	e006      	b.n	80060da <HAL_GPIO_DeInit+0x9e>
 80060cc:	2303      	movs	r3, #3
 80060ce:	e004      	b.n	80060da <HAL_GPIO_DeInit+0x9e>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e002      	b.n	80060da <HAL_GPIO_DeInit+0x9e>
 80060d4:	2301      	movs	r3, #1
 80060d6:	e000      	b.n	80060da <HAL_GPIO_DeInit+0x9e>
 80060d8:	2300      	movs	r3, #0
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	f002 0203 	and.w	r2, r2, #3
 80060e0:	0092      	lsls	r2, r2, #2
 80060e2:	4093      	lsls	r3, r2
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d132      	bne.n	8006150 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80060ea:	4b4d      	ldr	r3, [pc, #308]	@ (8006220 <HAL_GPIO_DeInit+0x1e4>)
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	43db      	mvns	r3, r3
 80060f2:	494b      	ldr	r1, [pc, #300]	@ (8006220 <HAL_GPIO_DeInit+0x1e4>)
 80060f4:	4013      	ands	r3, r2
 80060f6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80060f8:	4b49      	ldr	r3, [pc, #292]	@ (8006220 <HAL_GPIO_DeInit+0x1e4>)
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	43db      	mvns	r3, r3
 8006100:	4947      	ldr	r1, [pc, #284]	@ (8006220 <HAL_GPIO_DeInit+0x1e4>)
 8006102:	4013      	ands	r3, r2
 8006104:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006106:	4b46      	ldr	r3, [pc, #280]	@ (8006220 <HAL_GPIO_DeInit+0x1e4>)
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	43db      	mvns	r3, r3
 800610e:	4944      	ldr	r1, [pc, #272]	@ (8006220 <HAL_GPIO_DeInit+0x1e4>)
 8006110:	4013      	ands	r3, r2
 8006112:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006114:	4b42      	ldr	r3, [pc, #264]	@ (8006220 <HAL_GPIO_DeInit+0x1e4>)
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	43db      	mvns	r3, r3
 800611c:	4940      	ldr	r1, [pc, #256]	@ (8006220 <HAL_GPIO_DeInit+0x1e4>)
 800611e:	4013      	ands	r3, r2
 8006120:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f003 0303 	and.w	r3, r3, #3
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	220f      	movs	r2, #15
 800612c:	fa02 f303 	lsl.w	r3, r2, r3
 8006130:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006132:	4a34      	ldr	r2, [pc, #208]	@ (8006204 <HAL_GPIO_DeInit+0x1c8>)
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	089b      	lsrs	r3, r3, #2
 8006138:	3302      	adds	r3, #2
 800613a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	43da      	mvns	r2, r3
 8006142:	4830      	ldr	r0, [pc, #192]	@ (8006204 <HAL_GPIO_DeInit+0x1c8>)
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	089b      	lsrs	r3, r3, #2
 8006148:	400a      	ands	r2, r1
 800614a:	3302      	adds	r3, #2
 800614c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	2103      	movs	r1, #3
 800615a:	fa01 f303 	lsl.w	r3, r1, r3
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	08da      	lsrs	r2, r3, #3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3208      	adds	r2, #8
 800616c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	220f      	movs	r2, #15
 800617a:	fa02 f303 	lsl.w	r3, r2, r3
 800617e:	43db      	mvns	r3, r3
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	08d2      	lsrs	r2, r2, #3
 8006184:	4019      	ands	r1, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	3208      	adds	r2, #8
 800618a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	2103      	movs	r1, #3
 8006198:	fa01 f303 	lsl.w	r3, r1, r3
 800619c:	43db      	mvns	r3, r3
 800619e:	401a      	ands	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	2101      	movs	r1, #1
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	fa01 f303 	lsl.w	r3, r1, r3
 80061b0:	43db      	mvns	r3, r3
 80061b2:	401a      	ands	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	2103      	movs	r1, #3
 80061c2:	fa01 f303 	lsl.w	r3, r1, r3
 80061c6:	43db      	mvns	r3, r3
 80061c8:	401a      	ands	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d2:	2101      	movs	r1, #1
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	fa01 f303 	lsl.w	r3, r1, r3
 80061da:	43db      	mvns	r3, r3
 80061dc:	401a      	ands	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	3301      	adds	r3, #1
 80061e6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	fa22 f303 	lsr.w	r3, r2, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f47f af2b 	bne.w	800604c <HAL_GPIO_DeInit+0x10>
  }
}
 80061f6:	bf00      	nop
 80061f8:	bf00      	nop
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	40010000 	.word	0x40010000
 8006208:	48000400 	.word	0x48000400
 800620c:	48000800 	.word	0x48000800
 8006210:	48000c00 	.word	0x48000c00
 8006214:	48001000 	.word	0x48001000
 8006218:	48001400 	.word	0x48001400
 800621c:	48001800 	.word	0x48001800
 8006220:	40010400 	.word	0x40010400

08006224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691a      	ldr	r2, [r3, #16]
 8006234:	887b      	ldrh	r3, [r7, #2]
 8006236:	4013      	ands	r3, r2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800623c:	2301      	movs	r3, #1
 800623e:	73fb      	strb	r3, [r7, #15]
 8006240:	e001      	b.n	8006246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006242:	2300      	movs	r3, #0
 8006244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006246:	7bfb      	ldrb	r3, [r7, #15]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	807b      	strh	r3, [r7, #2]
 8006260:	4613      	mov	r3, r2
 8006262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006264:	787b      	ldrb	r3, [r7, #1]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800626a:	887a      	ldrh	r2, [r7, #2]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006270:	e002      	b.n	8006278 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006272:	887a      	ldrh	r2, [r7, #2]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006296:	887a      	ldrh	r2, [r7, #2]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4013      	ands	r3, r2
 800629c:	041a      	lsls	r2, r3, #16
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	43d9      	mvns	r1, r3
 80062a2:	887b      	ldrh	r3, [r7, #2]
 80062a4:	400b      	ands	r3, r1
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	619a      	str	r2, [r3, #24]
}
 80062ac:	bf00      	nop
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	4603      	mov	r3, r0
 80062c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80062c2:	4b08      	ldr	r3, [pc, #32]	@ (80062e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062c4:	695a      	ldr	r2, [r3, #20]
 80062c6:	88fb      	ldrh	r3, [r7, #6]
 80062c8:	4013      	ands	r3, r2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d006      	beq.n	80062dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80062ce:	4a05      	ldr	r2, [pc, #20]	@ (80062e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062d0:	88fb      	ldrh	r3, [r7, #6]
 80062d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80062d4:	88fb      	ldrh	r3, [r7, #6]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fc fa30 	bl	800273c <HAL_GPIO_EXTI_Callback>
  }
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40010400 	.word	0x40010400

080062e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e08d      	b.n	8006416 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7fc fd26 	bl	8002d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2224      	movs	r2, #36	@ 0x24
 8006318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0201 	bic.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006338:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006348:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d107      	bne.n	8006362 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800635e:	609a      	str	r2, [r3, #8]
 8006360:	e006      	b.n	8006370 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800636e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	2b02      	cmp	r3, #2
 8006376:	d108      	bne.n	800638a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006386:	605a      	str	r2, [r3, #4]
 8006388:	e007      	b.n	800639a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006398:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6812      	ldr	r2, [r2, #0]
 80063a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80063a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80063bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691a      	ldr	r2, [r3, #16]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	69d9      	ldr	r1, [r3, #28]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a1a      	ldr	r2, [r3, #32]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0201 	orr.w	r2, r2, #1
 80063f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2220      	movs	r2, #32
 8006402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e021      	b.n	8006474 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2224      	movs	r2, #36	@ 0x24
 8006434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0201 	bic.w	r2, r2, #1
 8006446:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7fc fce7 	bl	8002e1c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b088      	sub	sp, #32
 8006480:	af02      	add	r7, sp, #8
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	4608      	mov	r0, r1
 8006486:	4611      	mov	r1, r2
 8006488:	461a      	mov	r2, r3
 800648a:	4603      	mov	r3, r0
 800648c:	817b      	strh	r3, [r7, #10]
 800648e:	460b      	mov	r3, r1
 8006490:	813b      	strh	r3, [r7, #8]
 8006492:	4613      	mov	r3, r2
 8006494:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b20      	cmp	r3, #32
 80064a0:	f040 80f9 	bne.w	8006696 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d002      	beq.n	80064b0 <HAL_I2C_Mem_Write+0x34>
 80064aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d105      	bne.n	80064bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064b6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e0ed      	b.n	8006698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <HAL_I2C_Mem_Write+0x4e>
 80064c6:	2302      	movs	r3, #2
 80064c8:	e0e6      	b.n	8006698 <HAL_I2C_Mem_Write+0x21c>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064d2:	f7fd fd2d 	bl	8003f30 <HAL_GetTick>
 80064d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	2319      	movs	r3, #25
 80064de:	2201      	movs	r2, #1
 80064e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 fac3 	bl	8006a70 <I2C_WaitOnFlagUntilTimeout>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e0d1      	b.n	8006698 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2221      	movs	r2, #33	@ 0x21
 80064f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2240      	movs	r2, #64	@ 0x40
 8006500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a3a      	ldr	r2, [r7, #32]
 800650e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006514:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800651c:	88f8      	ldrh	r0, [r7, #6]
 800651e:	893a      	ldrh	r2, [r7, #8]
 8006520:	8979      	ldrh	r1, [r7, #10]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	9301      	str	r3, [sp, #4]
 8006526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	4603      	mov	r3, r0
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 f9d3 	bl	80068d8 <I2C_RequestMemoryWrite>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d005      	beq.n	8006544 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e0a9      	b.n	8006698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006548:	b29b      	uxth	r3, r3
 800654a:	2bff      	cmp	r3, #255	@ 0xff
 800654c:	d90e      	bls.n	800656c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	22ff      	movs	r2, #255	@ 0xff
 8006552:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006558:	b2da      	uxtb	r2, r3
 800655a:	8979      	ldrh	r1, [r7, #10]
 800655c:	2300      	movs	r3, #0
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 fc47 	bl	8006df8 <I2C_TransferConfig>
 800656a:	e00f      	b.n	800658c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800657a:	b2da      	uxtb	r2, r3
 800657c:	8979      	ldrh	r1, [r7, #10]
 800657e:	2300      	movs	r3, #0
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 fc36 	bl	8006df8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 fac6 	bl	8006b22 <I2C_WaitOnTXISFlagUntilTimeout>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e07b      	b.n	8006698 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a4:	781a      	ldrb	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065c8:	3b01      	subs	r3, #1
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d034      	beq.n	8006644 <HAL_I2C_Mem_Write+0x1c8>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d130      	bne.n	8006644 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e8:	2200      	movs	r2, #0
 80065ea:	2180      	movs	r1, #128	@ 0x80
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 fa3f 	bl	8006a70 <I2C_WaitOnFlagUntilTimeout>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e04d      	b.n	8006698 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006600:	b29b      	uxth	r3, r3
 8006602:	2bff      	cmp	r3, #255	@ 0xff
 8006604:	d90e      	bls.n	8006624 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	22ff      	movs	r2, #255	@ 0xff
 800660a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006610:	b2da      	uxtb	r2, r3
 8006612:	8979      	ldrh	r1, [r7, #10]
 8006614:	2300      	movs	r3, #0
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 fbeb 	bl	8006df8 <I2C_TransferConfig>
 8006622:	e00f      	b.n	8006644 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006628:	b29a      	uxth	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006632:	b2da      	uxtb	r2, r3
 8006634:	8979      	ldrh	r1, [r7, #10]
 8006636:	2300      	movs	r3, #0
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 fbda 	bl	8006df8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d19e      	bne.n	800658c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 faac 	bl	8006bb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e01a      	b.n	8006698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2220      	movs	r2, #32
 8006668:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6859      	ldr	r1, [r3, #4]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	4b0a      	ldr	r3, [pc, #40]	@ (80066a0 <HAL_I2C_Mem_Write+0x224>)
 8006676:	400b      	ands	r3, r1
 8006678:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	e000      	b.n	8006698 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006696:	2302      	movs	r3, #2
  }
}
 8006698:	4618      	mov	r0, r3
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	fe00e800 	.word	0xfe00e800

080066a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b088      	sub	sp, #32
 80066a8:	af02      	add	r7, sp, #8
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	4608      	mov	r0, r1
 80066ae:	4611      	mov	r1, r2
 80066b0:	461a      	mov	r2, r3
 80066b2:	4603      	mov	r3, r0
 80066b4:	817b      	strh	r3, [r7, #10]
 80066b6:	460b      	mov	r3, r1
 80066b8:	813b      	strh	r3, [r7, #8]
 80066ba:	4613      	mov	r3, r2
 80066bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	f040 80fd 	bne.w	80068c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <HAL_I2C_Mem_Read+0x34>
 80066d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d105      	bne.n	80066e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066de:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e0f1      	b.n	80068c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <HAL_I2C_Mem_Read+0x4e>
 80066ee:	2302      	movs	r3, #2
 80066f0:	e0ea      	b.n	80068c8 <HAL_I2C_Mem_Read+0x224>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80066fa:	f7fd fc19 	bl	8003f30 <HAL_GetTick>
 80066fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	2319      	movs	r3, #25
 8006706:	2201      	movs	r2, #1
 8006708:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 f9af 	bl	8006a70 <I2C_WaitOnFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e0d5      	b.n	80068c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2222      	movs	r2, #34	@ 0x22
 8006720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2240      	movs	r2, #64	@ 0x40
 8006728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a3a      	ldr	r2, [r7, #32]
 8006736:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800673c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006744:	88f8      	ldrh	r0, [r7, #6]
 8006746:	893a      	ldrh	r2, [r7, #8]
 8006748:	8979      	ldrh	r1, [r7, #10]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	9301      	str	r3, [sp, #4]
 800674e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	4603      	mov	r3, r0
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 f913 	bl	8006980 <I2C_RequestMemoryRead>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d005      	beq.n	800676c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e0ad      	b.n	80068c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006770:	b29b      	uxth	r3, r3
 8006772:	2bff      	cmp	r3, #255	@ 0xff
 8006774:	d90e      	bls.n	8006794 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006780:	b2da      	uxtb	r2, r3
 8006782:	8979      	ldrh	r1, [r7, #10]
 8006784:	4b52      	ldr	r3, [pc, #328]	@ (80068d0 <HAL_I2C_Mem_Read+0x22c>)
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 fb33 	bl	8006df8 <I2C_TransferConfig>
 8006792:	e00f      	b.n	80067b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	8979      	ldrh	r1, [r7, #10]
 80067a6:	4b4a      	ldr	r3, [pc, #296]	@ (80068d0 <HAL_I2C_Mem_Read+0x22c>)
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 fb22 	bl	8006df8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ba:	2200      	movs	r2, #0
 80067bc:	2104      	movs	r1, #4
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 f956 	bl	8006a70 <I2C_WaitOnFlagUntilTimeout>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e07c      	b.n	80068c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ea:	3b01      	subs	r3, #1
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006804:	b29b      	uxth	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d034      	beq.n	8006874 <HAL_I2C_Mem_Read+0x1d0>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800680e:	2b00      	cmp	r3, #0
 8006810:	d130      	bne.n	8006874 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006818:	2200      	movs	r2, #0
 800681a:	2180      	movs	r1, #128	@ 0x80
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 f927 	bl	8006a70 <I2C_WaitOnFlagUntilTimeout>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e04d      	b.n	80068c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006830:	b29b      	uxth	r3, r3
 8006832:	2bff      	cmp	r3, #255	@ 0xff
 8006834:	d90e      	bls.n	8006854 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2201      	movs	r2, #1
 800683a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006840:	b2da      	uxtb	r2, r3
 8006842:	8979      	ldrh	r1, [r7, #10]
 8006844:	2300      	movs	r3, #0
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 fad3 	bl	8006df8 <I2C_TransferConfig>
 8006852:	e00f      	b.n	8006874 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006858:	b29a      	uxth	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006862:	b2da      	uxtb	r2, r3
 8006864:	8979      	ldrh	r1, [r7, #10]
 8006866:	2300      	movs	r3, #0
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 fac2 	bl	8006df8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006878:	b29b      	uxth	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d19a      	bne.n	80067b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 f994 	bl	8006bb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e01a      	b.n	80068c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2220      	movs	r2, #32
 8006898:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6859      	ldr	r1, [r3, #4]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	4b0b      	ldr	r3, [pc, #44]	@ (80068d4 <HAL_I2C_Mem_Read+0x230>)
 80068a6:	400b      	ands	r3, r1
 80068a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e000      	b.n	80068c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80068c6:	2302      	movs	r3, #2
  }
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	80002400 	.word	0x80002400
 80068d4:	fe00e800 	.word	0xfe00e800

080068d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af02      	add	r7, sp, #8
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	4608      	mov	r0, r1
 80068e2:	4611      	mov	r1, r2
 80068e4:	461a      	mov	r2, r3
 80068e6:	4603      	mov	r3, r0
 80068e8:	817b      	strh	r3, [r7, #10]
 80068ea:	460b      	mov	r3, r1
 80068ec:	813b      	strh	r3, [r7, #8]
 80068ee:	4613      	mov	r3, r2
 80068f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80068f2:	88fb      	ldrh	r3, [r7, #6]
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	8979      	ldrh	r1, [r7, #10]
 80068f8:	4b20      	ldr	r3, [pc, #128]	@ (800697c <I2C_RequestMemoryWrite+0xa4>)
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 fa79 	bl	8006df8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	69b9      	ldr	r1, [r7, #24]
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 f909 	bl	8006b22 <I2C_WaitOnTXISFlagUntilTimeout>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e02c      	b.n	8006974 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800691a:	88fb      	ldrh	r3, [r7, #6]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d105      	bne.n	800692c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006920:	893b      	ldrh	r3, [r7, #8]
 8006922:	b2da      	uxtb	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	629a      	str	r2, [r3, #40]	@ 0x28
 800692a:	e015      	b.n	8006958 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800692c:	893b      	ldrh	r3, [r7, #8]
 800692e:	0a1b      	lsrs	r3, r3, #8
 8006930:	b29b      	uxth	r3, r3
 8006932:	b2da      	uxtb	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800693a:	69fa      	ldr	r2, [r7, #28]
 800693c:	69b9      	ldr	r1, [r7, #24]
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 f8ef 	bl	8006b22 <I2C_WaitOnTXISFlagUntilTimeout>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e012      	b.n	8006974 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800694e:	893b      	ldrh	r3, [r7, #8]
 8006950:	b2da      	uxtb	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	2200      	movs	r2, #0
 8006960:	2180      	movs	r1, #128	@ 0x80
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 f884 	bl	8006a70 <I2C_WaitOnFlagUntilTimeout>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e000      	b.n	8006974 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	80002000 	.word	0x80002000

08006980 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af02      	add	r7, sp, #8
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	4608      	mov	r0, r1
 800698a:	4611      	mov	r1, r2
 800698c:	461a      	mov	r2, r3
 800698e:	4603      	mov	r3, r0
 8006990:	817b      	strh	r3, [r7, #10]
 8006992:	460b      	mov	r3, r1
 8006994:	813b      	strh	r3, [r7, #8]
 8006996:	4613      	mov	r3, r2
 8006998:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800699a:	88fb      	ldrh	r3, [r7, #6]
 800699c:	b2da      	uxtb	r2, r3
 800699e:	8979      	ldrh	r1, [r7, #10]
 80069a0:	4b20      	ldr	r3, [pc, #128]	@ (8006a24 <I2C_RequestMemoryRead+0xa4>)
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	2300      	movs	r3, #0
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 fa26 	bl	8006df8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ac:	69fa      	ldr	r2, [r7, #28]
 80069ae:	69b9      	ldr	r1, [r7, #24]
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 f8b6 	bl	8006b22 <I2C_WaitOnTXISFlagUntilTimeout>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e02c      	b.n	8006a1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069c0:	88fb      	ldrh	r3, [r7, #6]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d105      	bne.n	80069d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069c6:	893b      	ldrh	r3, [r7, #8]
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80069d0:	e015      	b.n	80069fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80069d2:	893b      	ldrh	r3, [r7, #8]
 80069d4:	0a1b      	lsrs	r3, r3, #8
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069e0:	69fa      	ldr	r2, [r7, #28]
 80069e2:	69b9      	ldr	r1, [r7, #24]
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 f89c 	bl	8006b22 <I2C_WaitOnTXISFlagUntilTimeout>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e012      	b.n	8006a1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069f4:	893b      	ldrh	r3, [r7, #8]
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	2200      	movs	r2, #0
 8006a06:	2140      	movs	r1, #64	@ 0x40
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 f831 	bl	8006a70 <I2C_WaitOnFlagUntilTimeout>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	80002000 	.word	0x80002000

08006a28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d103      	bne.n	8006a46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2200      	movs	r2, #0
 8006a44:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d007      	beq.n	8006a64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699a      	ldr	r2, [r3, #24]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f042 0201 	orr.w	r2, r2, #1
 8006a62:	619a      	str	r2, [r3, #24]
  }
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a80:	e03b      	b.n	8006afa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 f8d6 	bl	8006c38 <I2C_IsErrorOccurred>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e041      	b.n	8006b1a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9c:	d02d      	beq.n	8006afa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a9e:	f7fd fa47 	bl	8003f30 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d302      	bcc.n	8006ab4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d122      	bne.n	8006afa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	4013      	ands	r3, r2
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	bf0c      	ite	eq
 8006ac4:	2301      	moveq	r3, #1
 8006ac6:	2300      	movne	r3, #0
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	461a      	mov	r2, r3
 8006acc:	79fb      	ldrb	r3, [r7, #7]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d113      	bne.n	8006afa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ad6:	f043 0220 	orr.w	r2, r3, #32
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e00f      	b.n	8006b1a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	699a      	ldr	r2, [r3, #24]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	4013      	ands	r3, r2
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	bf0c      	ite	eq
 8006b0a:	2301      	moveq	r3, #1
 8006b0c:	2300      	movne	r3, #0
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	461a      	mov	r2, r3
 8006b12:	79fb      	ldrb	r3, [r7, #7]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d0b4      	beq.n	8006a82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b2e:	e033      	b.n	8006b98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 f87f 	bl	8006c38 <I2C_IsErrorOccurred>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e031      	b.n	8006ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4a:	d025      	beq.n	8006b98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b4c:	f7fd f9f0 	bl	8003f30 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d302      	bcc.n	8006b62 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d11a      	bne.n	8006b98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d013      	beq.n	8006b98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b74:	f043 0220 	orr.w	r2, r3, #32
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e007      	b.n	8006ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d1c4      	bne.n	8006b30 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bbc:	e02f      	b.n	8006c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	68b9      	ldr	r1, [r7, #8]
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 f838 	bl	8006c38 <I2C_IsErrorOccurred>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e02d      	b.n	8006c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd2:	f7fd f9ad 	bl	8003f30 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d302      	bcc.n	8006be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d11a      	bne.n	8006c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	f003 0320 	and.w	r3, r3, #32
 8006bf2:	2b20      	cmp	r3, #32
 8006bf4:	d013      	beq.n	8006c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bfa:	f043 0220 	orr.w	r2, r3, #32
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e007      	b.n	8006c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	f003 0320 	and.w	r3, r3, #32
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	d1c8      	bne.n	8006bbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
	...

08006c38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08a      	sub	sp, #40	@ 0x28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	f003 0310 	and.w	r3, r3, #16
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d068      	beq.n	8006d36 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2210      	movs	r2, #16
 8006c6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c6c:	e049      	b.n	8006d02 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c74:	d045      	beq.n	8006d02 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006c76:	f7fd f95b 	bl	8003f30 <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d302      	bcc.n	8006c8c <I2C_IsErrorOccurred+0x54>
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d13a      	bne.n	8006d02 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006caa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cae:	d121      	bne.n	8006cf4 <I2C_IsErrorOccurred+0xbc>
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cb6:	d01d      	beq.n	8006cf4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006cb8:	7cfb      	ldrb	r3, [r7, #19]
 8006cba:	2b20      	cmp	r3, #32
 8006cbc:	d01a      	beq.n	8006cf4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ccc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006cce:	f7fd f92f 	bl	8003f30 <HAL_GetTick>
 8006cd2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cd4:	e00e      	b.n	8006cf4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006cd6:	f7fd f92b 	bl	8003f30 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	2b19      	cmp	r3, #25
 8006ce2:	d907      	bls.n	8006cf4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	f043 0320 	orr.w	r3, r3, #32
 8006cea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006cf2:	e006      	b.n	8006d02 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b20      	cmp	r3, #32
 8006d00:	d1e9      	bne.n	8006cd6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	f003 0320 	and.w	r3, r3, #32
 8006d0c:	2b20      	cmp	r3, #32
 8006d0e:	d003      	beq.n	8006d18 <I2C_IsErrorOccurred+0xe0>
 8006d10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0aa      	beq.n	8006c6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006d18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d103      	bne.n	8006d28 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2220      	movs	r2, #32
 8006d26:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	f043 0304 	orr.w	r3, r3, #4
 8006d2e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00b      	beq.n	8006d60 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	f043 0301 	orr.w	r3, r3, #1
 8006d4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00b      	beq.n	8006d82 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	f043 0308 	orr.w	r3, r3, #8
 8006d70:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006d7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00b      	beq.n	8006da4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	f043 0302 	orr.w	r3, r3, #2
 8006d92:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d01c      	beq.n	8006de6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f7ff fe3b 	bl	8006a28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6859      	ldr	r1, [r3, #4]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8006df4 <I2C_IsErrorOccurred+0x1bc>)
 8006dbe:	400b      	ands	r3, r1
 8006dc0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006de6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3728      	adds	r7, #40	@ 0x28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	fe00e800 	.word	0xfe00e800

08006df8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	607b      	str	r3, [r7, #4]
 8006e02:	460b      	mov	r3, r1
 8006e04:	817b      	strh	r3, [r7, #10]
 8006e06:	4613      	mov	r3, r2
 8006e08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e0a:	897b      	ldrh	r3, [r7, #10]
 8006e0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e10:	7a7b      	ldrb	r3, [r7, #9]
 8006e12:	041b      	lsls	r3, r3, #16
 8006e14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	0d5b      	lsrs	r3, r3, #21
 8006e32:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006e36:	4b08      	ldr	r3, [pc, #32]	@ (8006e58 <I2C_TransferConfig+0x60>)
 8006e38:	430b      	orrs	r3, r1
 8006e3a:	43db      	mvns	r3, r3
 8006e3c:	ea02 0103 	and.w	r1, r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006e4a:	bf00      	nop
 8006e4c:	371c      	adds	r7, #28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	03ff63ff 	.word	0x03ff63ff

08006e5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b20      	cmp	r3, #32
 8006e70:	d138      	bne.n	8006ee4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d101      	bne.n	8006e80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	e032      	b.n	8006ee6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2224      	movs	r2, #36	@ 0x24
 8006e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0201 	bic.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006eae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6819      	ldr	r1, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0201 	orr.w	r2, r2, #1
 8006ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	e000      	b.n	8006ee6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ee4:	2302      	movs	r3, #2
  }
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b085      	sub	sp, #20
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	d139      	bne.n	8006f7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d101      	bne.n	8006f16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006f12:	2302      	movs	r3, #2
 8006f14:	e033      	b.n	8006f7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2224      	movs	r2, #36	@ 0x24
 8006f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0201 	bic.w	r2, r2, #1
 8006f34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006f44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	021b      	lsls	r3, r3, #8
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0201 	orr.w	r2, r2, #1
 8006f66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	e000      	b.n	8006f7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f7c:	2302      	movs	r3, #2
  }
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b086      	sub	sp, #24
 8006f8e:	af02      	add	r7, sp, #8
 8006f90:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e101      	b.n	80071a0 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d106      	bne.n	8006fb6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7fc f8f7 	bl	80031a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2203      	movs	r2, #3
 8006fba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f004 fab3 	bl	800b534 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6818      	ldr	r0, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	7c1a      	ldrb	r2, [r3, #16]
 8006fd6:	f88d 2000 	strb.w	r2, [sp]
 8006fda:	3304      	adds	r3, #4
 8006fdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fde:	f004 fa7c 	bl	800b4da <USB_CoreInit>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d005      	beq.n	8006ff4 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e0d5      	b.n	80071a0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f004 faab 	bl	800b556 <USB_SetCurrentMode>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d005      	beq.n	8007012 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2202      	movs	r2, #2
 800700a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e0c6      	b.n	80071a0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007012:	2300      	movs	r3, #0
 8007014:	73fb      	strb	r3, [r7, #15]
 8007016:	e04a      	b.n	80070ae <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007018:	7bfa      	ldrb	r2, [r7, #15]
 800701a:	6879      	ldr	r1, [r7, #4]
 800701c:	4613      	mov	r3, r2
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	4413      	add	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	440b      	add	r3, r1
 8007026:	3315      	adds	r3, #21
 8007028:	2201      	movs	r2, #1
 800702a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800702c:	7bfa      	ldrb	r2, [r7, #15]
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	4613      	mov	r3, r2
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	4413      	add	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	3314      	adds	r3, #20
 800703c:	7bfa      	ldrb	r2, [r7, #15]
 800703e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007040:	7bfa      	ldrb	r2, [r7, #15]
 8007042:	7bfb      	ldrb	r3, [r7, #15]
 8007044:	b298      	uxth	r0, r3
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	4613      	mov	r3, r2
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	4413      	add	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	440b      	add	r3, r1
 8007052:	332e      	adds	r3, #46	@ 0x2e
 8007054:	4602      	mov	r2, r0
 8007056:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007058:	7bfa      	ldrb	r2, [r7, #15]
 800705a:	6879      	ldr	r1, [r7, #4]
 800705c:	4613      	mov	r3, r2
 800705e:	00db      	lsls	r3, r3, #3
 8007060:	4413      	add	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	440b      	add	r3, r1
 8007066:	3318      	adds	r3, #24
 8007068:	2200      	movs	r2, #0
 800706a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800706c:	7bfa      	ldrb	r2, [r7, #15]
 800706e:	6879      	ldr	r1, [r7, #4]
 8007070:	4613      	mov	r3, r2
 8007072:	00db      	lsls	r3, r3, #3
 8007074:	4413      	add	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	440b      	add	r3, r1
 800707a:	331c      	adds	r3, #28
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007080:	7bfa      	ldrb	r2, [r7, #15]
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	4613      	mov	r3, r2
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	4413      	add	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	440b      	add	r3, r1
 800708e:	3320      	adds	r3, #32
 8007090:	2200      	movs	r2, #0
 8007092:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007094:	7bfa      	ldrb	r2, [r7, #15]
 8007096:	6879      	ldr	r1, [r7, #4]
 8007098:	4613      	mov	r3, r2
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	4413      	add	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	440b      	add	r3, r1
 80070a2:	3324      	adds	r3, #36	@ 0x24
 80070a4:	2200      	movs	r2, #0
 80070a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	3301      	adds	r3, #1
 80070ac:	73fb      	strb	r3, [r7, #15]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	791b      	ldrb	r3, [r3, #4]
 80070b2:	7bfa      	ldrb	r2, [r7, #15]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d3af      	bcc.n	8007018 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070b8:	2300      	movs	r3, #0
 80070ba:	73fb      	strb	r3, [r7, #15]
 80070bc:	e044      	b.n	8007148 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80070be:	7bfa      	ldrb	r2, [r7, #15]
 80070c0:	6879      	ldr	r1, [r7, #4]
 80070c2:	4613      	mov	r3, r2
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	4413      	add	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	440b      	add	r3, r1
 80070cc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80070d0:	2200      	movs	r2, #0
 80070d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80070d4:	7bfa      	ldrb	r2, [r7, #15]
 80070d6:	6879      	ldr	r1, [r7, #4]
 80070d8:	4613      	mov	r3, r2
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	4413      	add	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	440b      	add	r3, r1
 80070e2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80070e6:	7bfa      	ldrb	r2, [r7, #15]
 80070e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80070ea:	7bfa      	ldrb	r2, [r7, #15]
 80070ec:	6879      	ldr	r1, [r7, #4]
 80070ee:	4613      	mov	r3, r2
 80070f0:	00db      	lsls	r3, r3, #3
 80070f2:	4413      	add	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	440b      	add	r3, r1
 80070f8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007100:	7bfa      	ldrb	r2, [r7, #15]
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	4613      	mov	r3, r2
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007116:	7bfa      	ldrb	r2, [r7, #15]
 8007118:	6879      	ldr	r1, [r7, #4]
 800711a:	4613      	mov	r3, r2
 800711c:	00db      	lsls	r3, r3, #3
 800711e:	4413      	add	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	440b      	add	r3, r1
 8007124:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007128:	2200      	movs	r2, #0
 800712a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800712c:	7bfa      	ldrb	r2, [r7, #15]
 800712e:	6879      	ldr	r1, [r7, #4]
 8007130:	4613      	mov	r3, r2
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	4413      	add	r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	440b      	add	r3, r1
 800713a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800713e:	2200      	movs	r2, #0
 8007140:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007142:	7bfb      	ldrb	r3, [r7, #15]
 8007144:	3301      	adds	r3, #1
 8007146:	73fb      	strb	r3, [r7, #15]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	791b      	ldrb	r3, [r3, #4]
 800714c:	7bfa      	ldrb	r2, [r7, #15]
 800714e:	429a      	cmp	r2, r3
 8007150:	d3b5      	bcc.n	80070be <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	7c1a      	ldrb	r2, [r3, #16]
 800715a:	f88d 2000 	strb.w	r2, [sp]
 800715e:	3304      	adds	r3, #4
 8007160:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007162:	f004 fa45 	bl	800b5f0 <USB_DevInit>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d005      	beq.n	8007178 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e013      	b.n	80071a0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	7b1b      	ldrb	r3, [r3, #12]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d102      	bne.n	8007194 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f80a 	bl	80071a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4618      	mov	r0, r3
 800719a:	f004 fbea 	bl	800b972 <USB_DevDisconnect>

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071da:	f043 0303 	orr.w	r3, r3, #3
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80071f0:	b480      	push	{r7}
 80071f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071f4:	4b05      	ldr	r3, [pc, #20]	@ (800720c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a04      	ldr	r2, [pc, #16]	@ (800720c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80071fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071fe:	6013      	str	r3, [r2, #0]
}
 8007200:	bf00      	nop
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	40007000 	.word	0x40007000

08007210 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007210:	b480      	push	{r7}
 8007212:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007214:	4b04      	ldr	r3, [pc, #16]	@ (8007228 <HAL_PWREx_GetVoltageRange+0x18>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800721c:	4618      	mov	r0, r3
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	40007000 	.word	0x40007000

0800722c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800723a:	d130      	bne.n	800729e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800723c:	4b23      	ldr	r3, [pc, #140]	@ (80072cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007248:	d038      	beq.n	80072bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800724a:	4b20      	ldr	r3, [pc, #128]	@ (80072cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007252:	4a1e      	ldr	r2, [pc, #120]	@ (80072cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007254:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007258:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800725a:	4b1d      	ldr	r3, [pc, #116]	@ (80072d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2232      	movs	r2, #50	@ 0x32
 8007260:	fb02 f303 	mul.w	r3, r2, r3
 8007264:	4a1b      	ldr	r2, [pc, #108]	@ (80072d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007266:	fba2 2303 	umull	r2, r3, r2, r3
 800726a:	0c9b      	lsrs	r3, r3, #18
 800726c:	3301      	adds	r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007270:	e002      	b.n	8007278 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3b01      	subs	r3, #1
 8007276:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007278:	4b14      	ldr	r3, [pc, #80]	@ (80072cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007284:	d102      	bne.n	800728c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1f2      	bne.n	8007272 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800728c:	4b0f      	ldr	r3, [pc, #60]	@ (80072cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007298:	d110      	bne.n	80072bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e00f      	b.n	80072be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800729e:	4b0b      	ldr	r3, [pc, #44]	@ (80072cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80072a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072aa:	d007      	beq.n	80072bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80072ac:	4b07      	ldr	r3, [pc, #28]	@ (80072cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80072b4:	4a05      	ldr	r2, [pc, #20]	@ (80072cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80072b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80072ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	40007000 	.word	0x40007000
 80072d0:	20000008 	.word	0x20000008
 80072d4:	431bde83 	.word	0x431bde83

080072d8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80072d8:	b480      	push	{r7}
 80072da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80072dc:	4b05      	ldr	r3, [pc, #20]	@ (80072f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	4a04      	ldr	r2, [pc, #16]	@ (80072f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80072e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80072e6:	6053      	str	r3, [r2, #4]
}
 80072e8:	bf00      	nop
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40007000 	.word	0x40007000

080072f8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af02      	add	r7, sp, #8
 80072fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007300:	f7fc fe16 	bl	8003f30 <HAL_GetTick>
 8007304:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e063      	b.n	80073d8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10b      	bne.n	8007334 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7fb fd9d 	bl	8002e64 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800732a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f858 	bl	80073e4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	3b01      	subs	r3, #1
 8007344:	021a      	lsls	r2, r3, #8
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	2120      	movs	r1, #32
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f850 	bl	8007400 <QSPI_WaitFlagStateUntilTimeout>
 8007360:	4603      	mov	r3, r0
 8007362:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007364:	7afb      	ldrb	r3, [r7, #11]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d131      	bne.n	80073ce <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007374:	f023 0310 	bic.w	r3, r3, #16
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	6852      	ldr	r2, [r2, #4]
 800737c:	0611      	lsls	r1, r2, #24
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	68d2      	ldr	r2, [r2, #12]
 8007382:	4311      	orrs	r1, r2
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	6812      	ldr	r2, [r2, #0]
 8007388:	430b      	orrs	r3, r1
 800738a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	4b13      	ldr	r3, [pc, #76]	@ (80073e0 <HAL_QSPI_Init+0xe8>)
 8007394:	4013      	ands	r3, r2
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	6912      	ldr	r2, [r2, #16]
 800739a:	0411      	lsls	r1, r2, #16
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6952      	ldr	r2, [r2, #20]
 80073a0:	4311      	orrs	r1, r2
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	6992      	ldr	r2, [r2, #24]
 80073a6:	4311      	orrs	r1, r2
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6812      	ldr	r2, [r2, #0]
 80073ac:	430b      	orrs	r3, r1
 80073ae:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f042 0201 	orr.w	r2, r2, #1
 80073be:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80073d6:	7afb      	ldrb	r3, [r7, #11]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	ffe0f8fe 	.word	0xffe0f8fe

080073e4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	603b      	str	r3, [r7, #0]
 800740c:	4613      	mov	r3, r2
 800740e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007410:	e01a      	b.n	8007448 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007418:	d016      	beq.n	8007448 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800741a:	f7fc fd89 	bl	8003f30 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	429a      	cmp	r2, r3
 8007428:	d302      	bcc.n	8007430 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10b      	bne.n	8007448 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2204      	movs	r2, #4
 8007434:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800743c:	f043 0201 	orr.w	r2, r3, #1
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e00e      	b.n	8007466 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689a      	ldr	r2, [r3, #8]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	4013      	ands	r3, r2
 8007452:	2b00      	cmp	r3, #0
 8007454:	bf14      	ite	ne
 8007456:	2301      	movne	r3, #1
 8007458:	2300      	moveq	r3, #0
 800745a:	b2db      	uxtb	r3, r3
 800745c:	461a      	mov	r2, r3
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	429a      	cmp	r2, r3
 8007462:	d1d6      	bne.n	8007412 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b088      	sub	sp, #32
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e3ca      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007482:	4b97      	ldr	r3, [pc, #604]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f003 030c 	and.w	r3, r3, #12
 800748a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800748c:	4b94      	ldr	r3, [pc, #592]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f003 0303 	and.w	r3, r3, #3
 8007494:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0310 	and.w	r3, r3, #16
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 80e4 	beq.w	800766c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d007      	beq.n	80074ba <HAL_RCC_OscConfig+0x4a>
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	2b0c      	cmp	r3, #12
 80074ae:	f040 808b 	bne.w	80075c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	f040 8087 	bne.w	80075c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80074ba:	4b89      	ldr	r3, [pc, #548]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d005      	beq.n	80074d2 <HAL_RCC_OscConfig+0x62>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e3a2      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1a      	ldr	r2, [r3, #32]
 80074d6:	4b82      	ldr	r3, [pc, #520]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0308 	and.w	r3, r3, #8
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d004      	beq.n	80074ec <HAL_RCC_OscConfig+0x7c>
 80074e2:	4b7f      	ldr	r3, [pc, #508]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074ea:	e005      	b.n	80074f8 <HAL_RCC_OscConfig+0x88>
 80074ec:	4b7c      	ldr	r3, [pc, #496]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 80074ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074f2:	091b      	lsrs	r3, r3, #4
 80074f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d223      	bcs.n	8007544 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a1b      	ldr	r3, [r3, #32]
 8007500:	4618      	mov	r0, r3
 8007502:	f000 fd55 	bl	8007fb0 <RCC_SetFlashLatencyFromMSIRange>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e383      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007510:	4b73      	ldr	r3, [pc, #460]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a72      	ldr	r2, [pc, #456]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 8007516:	f043 0308 	orr.w	r3, r3, #8
 800751a:	6013      	str	r3, [r2, #0]
 800751c:	4b70      	ldr	r3, [pc, #448]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a1b      	ldr	r3, [r3, #32]
 8007528:	496d      	ldr	r1, [pc, #436]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 800752a:	4313      	orrs	r3, r2
 800752c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800752e:	4b6c      	ldr	r3, [pc, #432]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	021b      	lsls	r3, r3, #8
 800753c:	4968      	ldr	r1, [pc, #416]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 800753e:	4313      	orrs	r3, r2
 8007540:	604b      	str	r3, [r1, #4]
 8007542:	e025      	b.n	8007590 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007544:	4b66      	ldr	r3, [pc, #408]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a65      	ldr	r2, [pc, #404]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 800754a:	f043 0308 	orr.w	r3, r3, #8
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	4b63      	ldr	r3, [pc, #396]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	4960      	ldr	r1, [pc, #384]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 800755e:	4313      	orrs	r3, r2
 8007560:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007562:	4b5f      	ldr	r3, [pc, #380]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	021b      	lsls	r3, r3, #8
 8007570:	495b      	ldr	r1, [pc, #364]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 8007572:	4313      	orrs	r3, r2
 8007574:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d109      	bne.n	8007590 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	4618      	mov	r0, r3
 8007582:	f000 fd15 	bl	8007fb0 <RCC_SetFlashLatencyFromMSIRange>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d001      	beq.n	8007590 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e343      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007590:	f000 fc4a 	bl	8007e28 <HAL_RCC_GetSysClockFreq>
 8007594:	4602      	mov	r2, r0
 8007596:	4b52      	ldr	r3, [pc, #328]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	091b      	lsrs	r3, r3, #4
 800759c:	f003 030f 	and.w	r3, r3, #15
 80075a0:	4950      	ldr	r1, [pc, #320]	@ (80076e4 <HAL_RCC_OscConfig+0x274>)
 80075a2:	5ccb      	ldrb	r3, [r1, r3]
 80075a4:	f003 031f 	and.w	r3, r3, #31
 80075a8:	fa22 f303 	lsr.w	r3, r2, r3
 80075ac:	4a4e      	ldr	r2, [pc, #312]	@ (80076e8 <HAL_RCC_OscConfig+0x278>)
 80075ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80075b0:	4b4e      	ldr	r3, [pc, #312]	@ (80076ec <HAL_RCC_OscConfig+0x27c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fc fc6b 	bl	8003e90 <HAL_InitTick>
 80075ba:	4603      	mov	r3, r0
 80075bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d052      	beq.n	800766a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	e327      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d032      	beq.n	8007636 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80075d0:	4b43      	ldr	r3, [pc, #268]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a42      	ldr	r2, [pc, #264]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 80075d6:	f043 0301 	orr.w	r3, r3, #1
 80075da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80075dc:	f7fc fca8 	bl	8003f30 <HAL_GetTick>
 80075e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80075e2:	e008      	b.n	80075f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80075e4:	f7fc fca4 	bl	8003f30 <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d901      	bls.n	80075f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e310      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80075f6:	4b3a      	ldr	r3, [pc, #232]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d0f0      	beq.n	80075e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007602:	4b37      	ldr	r3, [pc, #220]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a36      	ldr	r2, [pc, #216]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 8007608:	f043 0308 	orr.w	r3, r3, #8
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	4b34      	ldr	r3, [pc, #208]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	4931      	ldr	r1, [pc, #196]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 800761c:	4313      	orrs	r3, r2
 800761e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007620:	4b2f      	ldr	r3, [pc, #188]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	021b      	lsls	r3, r3, #8
 800762e:	492c      	ldr	r1, [pc, #176]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 8007630:	4313      	orrs	r3, r2
 8007632:	604b      	str	r3, [r1, #4]
 8007634:	e01a      	b.n	800766c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007636:	4b2a      	ldr	r3, [pc, #168]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a29      	ldr	r2, [pc, #164]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 800763c:	f023 0301 	bic.w	r3, r3, #1
 8007640:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007642:	f7fc fc75 	bl	8003f30 <HAL_GetTick>
 8007646:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007648:	e008      	b.n	800765c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800764a:	f7fc fc71 	bl	8003f30 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	2b02      	cmp	r3, #2
 8007656:	d901      	bls.n	800765c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e2dd      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800765c:	4b20      	ldr	r3, [pc, #128]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1f0      	bne.n	800764a <HAL_RCC_OscConfig+0x1da>
 8007668:	e000      	b.n	800766c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800766a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	d074      	beq.n	8007762 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2b08      	cmp	r3, #8
 800767c:	d005      	beq.n	800768a <HAL_RCC_OscConfig+0x21a>
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	2b0c      	cmp	r3, #12
 8007682:	d10e      	bne.n	80076a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2b03      	cmp	r3, #3
 8007688:	d10b      	bne.n	80076a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800768a:	4b15      	ldr	r3, [pc, #84]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d064      	beq.n	8007760 <HAL_RCC_OscConfig+0x2f0>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d160      	bne.n	8007760 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e2ba      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076aa:	d106      	bne.n	80076ba <HAL_RCC_OscConfig+0x24a>
 80076ac:	4b0c      	ldr	r3, [pc, #48]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a0b      	ldr	r2, [pc, #44]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 80076b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076b6:	6013      	str	r3, [r2, #0]
 80076b8:	e026      	b.n	8007708 <HAL_RCC_OscConfig+0x298>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80076c2:	d115      	bne.n	80076f0 <HAL_RCC_OscConfig+0x280>
 80076c4:	4b06      	ldr	r3, [pc, #24]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a05      	ldr	r2, [pc, #20]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 80076ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	4b03      	ldr	r3, [pc, #12]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a02      	ldr	r2, [pc, #8]	@ (80076e0 <HAL_RCC_OscConfig+0x270>)
 80076d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076da:	6013      	str	r3, [r2, #0]
 80076dc:	e014      	b.n	8007708 <HAL_RCC_OscConfig+0x298>
 80076de:	bf00      	nop
 80076e0:	40021000 	.word	0x40021000
 80076e4:	08011978 	.word	0x08011978
 80076e8:	20000008 	.word	0x20000008
 80076ec:	20000040 	.word	0x20000040
 80076f0:	4ba0      	ldr	r3, [pc, #640]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a9f      	ldr	r2, [pc, #636]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 80076f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	4b9d      	ldr	r3, [pc, #628]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a9c      	ldr	r2, [pc, #624]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 8007702:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d013      	beq.n	8007738 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007710:	f7fc fc0e 	bl	8003f30 <HAL_GetTick>
 8007714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007716:	e008      	b.n	800772a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007718:	f7fc fc0a 	bl	8003f30 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b64      	cmp	r3, #100	@ 0x64
 8007724:	d901      	bls.n	800772a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e276      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800772a:	4b92      	ldr	r3, [pc, #584]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d0f0      	beq.n	8007718 <HAL_RCC_OscConfig+0x2a8>
 8007736:	e014      	b.n	8007762 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007738:	f7fc fbfa 	bl	8003f30 <HAL_GetTick>
 800773c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800773e:	e008      	b.n	8007752 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007740:	f7fc fbf6 	bl	8003f30 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	2b64      	cmp	r3, #100	@ 0x64
 800774c:	d901      	bls.n	8007752 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e262      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007752:	4b88      	ldr	r3, [pc, #544]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1f0      	bne.n	8007740 <HAL_RCC_OscConfig+0x2d0>
 800775e:	e000      	b.n	8007762 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b00      	cmp	r3, #0
 800776c:	d060      	beq.n	8007830 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	2b04      	cmp	r3, #4
 8007772:	d005      	beq.n	8007780 <HAL_RCC_OscConfig+0x310>
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	2b0c      	cmp	r3, #12
 8007778:	d119      	bne.n	80077ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2b02      	cmp	r3, #2
 800777e:	d116      	bne.n	80077ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007780:	4b7c      	ldr	r3, [pc, #496]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007788:	2b00      	cmp	r3, #0
 800778a:	d005      	beq.n	8007798 <HAL_RCC_OscConfig+0x328>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e23f      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007798:	4b76      	ldr	r3, [pc, #472]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	061b      	lsls	r3, r3, #24
 80077a6:	4973      	ldr	r1, [pc, #460]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077ac:	e040      	b.n	8007830 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d023      	beq.n	80077fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077b6:	4b6f      	ldr	r3, [pc, #444]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a6e      	ldr	r2, [pc, #440]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 80077bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077c2:	f7fc fbb5 	bl	8003f30 <HAL_GetTick>
 80077c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077c8:	e008      	b.n	80077dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077ca:	f7fc fbb1 	bl	8003f30 <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d901      	bls.n	80077dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e21d      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077dc:	4b65      	ldr	r3, [pc, #404]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d0f0      	beq.n	80077ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077e8:	4b62      	ldr	r3, [pc, #392]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	061b      	lsls	r3, r3, #24
 80077f6:	495f      	ldr	r1, [pc, #380]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	604b      	str	r3, [r1, #4]
 80077fc:	e018      	b.n	8007830 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077fe:	4b5d      	ldr	r3, [pc, #372]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a5c      	ldr	r2, [pc, #368]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 8007804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800780a:	f7fc fb91 	bl	8003f30 <HAL_GetTick>
 800780e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007810:	e008      	b.n	8007824 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007812:	f7fc fb8d 	bl	8003f30 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	2b02      	cmp	r3, #2
 800781e:	d901      	bls.n	8007824 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e1f9      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007824:	4b53      	ldr	r3, [pc, #332]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1f0      	bne.n	8007812 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0308 	and.w	r3, r3, #8
 8007838:	2b00      	cmp	r3, #0
 800783a:	d03c      	beq.n	80078b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d01c      	beq.n	800787e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007844:	4b4b      	ldr	r3, [pc, #300]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 8007846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800784a:	4a4a      	ldr	r2, [pc, #296]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 800784c:	f043 0301 	orr.w	r3, r3, #1
 8007850:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007854:	f7fc fb6c 	bl	8003f30 <HAL_GetTick>
 8007858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800785a:	e008      	b.n	800786e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800785c:	f7fc fb68 	bl	8003f30 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	2b02      	cmp	r3, #2
 8007868:	d901      	bls.n	800786e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e1d4      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800786e:	4b41      	ldr	r3, [pc, #260]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 8007870:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	2b00      	cmp	r3, #0
 800787a:	d0ef      	beq.n	800785c <HAL_RCC_OscConfig+0x3ec>
 800787c:	e01b      	b.n	80078b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800787e:	4b3d      	ldr	r3, [pc, #244]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 8007880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007884:	4a3b      	ldr	r2, [pc, #236]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 8007886:	f023 0301 	bic.w	r3, r3, #1
 800788a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800788e:	f7fc fb4f 	bl	8003f30 <HAL_GetTick>
 8007892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007894:	e008      	b.n	80078a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007896:	f7fc fb4b 	bl	8003f30 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d901      	bls.n	80078a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e1b7      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80078a8:	4b32      	ldr	r3, [pc, #200]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 80078aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1ef      	bne.n	8007896 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0304 	and.w	r3, r3, #4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 80a6 	beq.w	8007a10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078c4:	2300      	movs	r3, #0
 80078c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80078c8:	4b2a      	ldr	r3, [pc, #168]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 80078ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10d      	bne.n	80078f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078d4:	4b27      	ldr	r3, [pc, #156]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 80078d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078d8:	4a26      	ldr	r2, [pc, #152]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 80078da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078de:	6593      	str	r3, [r2, #88]	@ 0x58
 80078e0:	4b24      	ldr	r3, [pc, #144]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 80078e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078e8:	60bb      	str	r3, [r7, #8]
 80078ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078ec:	2301      	movs	r3, #1
 80078ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078f0:	4b21      	ldr	r3, [pc, #132]	@ (8007978 <HAL_RCC_OscConfig+0x508>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d118      	bne.n	800792e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078fc:	4b1e      	ldr	r3, [pc, #120]	@ (8007978 <HAL_RCC_OscConfig+0x508>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a1d      	ldr	r2, [pc, #116]	@ (8007978 <HAL_RCC_OscConfig+0x508>)
 8007902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007906:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007908:	f7fc fb12 	bl	8003f30 <HAL_GetTick>
 800790c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800790e:	e008      	b.n	8007922 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007910:	f7fc fb0e 	bl	8003f30 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e17a      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007922:	4b15      	ldr	r3, [pc, #84]	@ (8007978 <HAL_RCC_OscConfig+0x508>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0f0      	beq.n	8007910 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d108      	bne.n	8007948 <HAL_RCC_OscConfig+0x4d8>
 8007936:	4b0f      	ldr	r3, [pc, #60]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 8007938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800793c:	4a0d      	ldr	r2, [pc, #52]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 800793e:	f043 0301 	orr.w	r3, r3, #1
 8007942:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007946:	e029      	b.n	800799c <HAL_RCC_OscConfig+0x52c>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	2b05      	cmp	r3, #5
 800794e:	d115      	bne.n	800797c <HAL_RCC_OscConfig+0x50c>
 8007950:	4b08      	ldr	r3, [pc, #32]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 8007952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007956:	4a07      	ldr	r2, [pc, #28]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 8007958:	f043 0304 	orr.w	r3, r3, #4
 800795c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007960:	4b04      	ldr	r3, [pc, #16]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 8007962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007966:	4a03      	ldr	r2, [pc, #12]	@ (8007974 <HAL_RCC_OscConfig+0x504>)
 8007968:	f043 0301 	orr.w	r3, r3, #1
 800796c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007970:	e014      	b.n	800799c <HAL_RCC_OscConfig+0x52c>
 8007972:	bf00      	nop
 8007974:	40021000 	.word	0x40021000
 8007978:	40007000 	.word	0x40007000
 800797c:	4b9c      	ldr	r3, [pc, #624]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 800797e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007982:	4a9b      	ldr	r2, [pc, #620]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007984:	f023 0301 	bic.w	r3, r3, #1
 8007988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800798c:	4b98      	ldr	r3, [pc, #608]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 800798e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007992:	4a97      	ldr	r2, [pc, #604]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007994:	f023 0304 	bic.w	r3, r3, #4
 8007998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d016      	beq.n	80079d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079a4:	f7fc fac4 	bl	8003f30 <HAL_GetTick>
 80079a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079aa:	e00a      	b.n	80079c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079ac:	f7fc fac0 	bl	8003f30 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d901      	bls.n	80079c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e12a      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079c2:	4b8b      	ldr	r3, [pc, #556]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 80079c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d0ed      	beq.n	80079ac <HAL_RCC_OscConfig+0x53c>
 80079d0:	e015      	b.n	80079fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079d2:	f7fc faad 	bl	8003f30 <HAL_GetTick>
 80079d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80079d8:	e00a      	b.n	80079f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079da:	f7fc faa9 	bl	8003f30 <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d901      	bls.n	80079f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e113      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80079f0:	4b7f      	ldr	r3, [pc, #508]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 80079f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1ed      	bne.n	80079da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079fe:	7ffb      	ldrb	r3, [r7, #31]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d105      	bne.n	8007a10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a04:	4b7a      	ldr	r3, [pc, #488]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a08:	4a79      	ldr	r2, [pc, #484]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007a0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a0e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 80fe 	beq.w	8007c16 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	f040 80d0 	bne.w	8007bc4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007a24:	4b72      	ldr	r3, [pc, #456]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f003 0203 	and.w	r2, r3, #3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d130      	bne.n	8007a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a42:	3b01      	subs	r3, #1
 8007a44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d127      	bne.n	8007a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d11f      	bne.n	8007a9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007a64:	2a07      	cmp	r2, #7
 8007a66:	bf14      	ite	ne
 8007a68:	2201      	movne	r2, #1
 8007a6a:	2200      	moveq	r2, #0
 8007a6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d113      	bne.n	8007a9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a7c:	085b      	lsrs	r3, r3, #1
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d109      	bne.n	8007a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a90:	085b      	lsrs	r3, r3, #1
 8007a92:	3b01      	subs	r3, #1
 8007a94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d06e      	beq.n	8007b78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	2b0c      	cmp	r3, #12
 8007a9e:	d069      	beq.n	8007b74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007aa0:	4b53      	ldr	r3, [pc, #332]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d105      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007aac:	4b50      	ldr	r3, [pc, #320]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e0ad      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007abc:	4b4c      	ldr	r3, [pc, #304]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a4b      	ldr	r2, [pc, #300]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007ac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ac6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007ac8:	f7fc fa32 	bl	8003f30 <HAL_GetTick>
 8007acc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ace:	e008      	b.n	8007ae2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ad0:	f7fc fa2e 	bl	8003f30 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e09a      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ae2:	4b43      	ldr	r3, [pc, #268]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1f0      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007aee:	4b40      	ldr	r3, [pc, #256]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007af0:	68da      	ldr	r2, [r3, #12]
 8007af2:	4b40      	ldr	r3, [pc, #256]	@ (8007bf4 <HAL_RCC_OscConfig+0x784>)
 8007af4:	4013      	ands	r3, r2
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007afe:	3a01      	subs	r2, #1
 8007b00:	0112      	lsls	r2, r2, #4
 8007b02:	4311      	orrs	r1, r2
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007b08:	0212      	lsls	r2, r2, #8
 8007b0a:	4311      	orrs	r1, r2
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007b10:	0852      	lsrs	r2, r2, #1
 8007b12:	3a01      	subs	r2, #1
 8007b14:	0552      	lsls	r2, r2, #21
 8007b16:	4311      	orrs	r1, r2
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007b1c:	0852      	lsrs	r2, r2, #1
 8007b1e:	3a01      	subs	r2, #1
 8007b20:	0652      	lsls	r2, r2, #25
 8007b22:	4311      	orrs	r1, r2
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007b28:	0912      	lsrs	r2, r2, #4
 8007b2a:	0452      	lsls	r2, r2, #17
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	4930      	ldr	r1, [pc, #192]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007b34:	4b2e      	ldr	r3, [pc, #184]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a2d      	ldr	r2, [pc, #180]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007b3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007b40:	4b2b      	ldr	r3, [pc, #172]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	4a2a      	ldr	r2, [pc, #168]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007b46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007b4c:	f7fc f9f0 	bl	8003f30 <HAL_GetTick>
 8007b50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b52:	e008      	b.n	8007b66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b54:	f7fc f9ec 	bl	8003f30 <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d901      	bls.n	8007b66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e058      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b66:	4b22      	ldr	r3, [pc, #136]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d0f0      	beq.n	8007b54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b72:	e050      	b.n	8007c16 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e04f      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b78:	4b1d      	ldr	r3, [pc, #116]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d148      	bne.n	8007c16 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007b84:	4b1a      	ldr	r3, [pc, #104]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a19      	ldr	r2, [pc, #100]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007b8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007b90:	4b17      	ldr	r3, [pc, #92]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	4a16      	ldr	r2, [pc, #88]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007b9c:	f7fc f9c8 	bl	8003f30 <HAL_GetTick>
 8007ba0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ba4:	f7fc f9c4 	bl	8003f30 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d901      	bls.n	8007bb6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e030      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d0f0      	beq.n	8007ba4 <HAL_RCC_OscConfig+0x734>
 8007bc2:	e028      	b.n	8007c16 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	2b0c      	cmp	r3, #12
 8007bc8:	d023      	beq.n	8007c12 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bca:	4b09      	ldr	r3, [pc, #36]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a08      	ldr	r2, [pc, #32]	@ (8007bf0 <HAL_RCC_OscConfig+0x780>)
 8007bd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd6:	f7fc f9ab 	bl	8003f30 <HAL_GetTick>
 8007bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bdc:	e00c      	b.n	8007bf8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bde:	f7fc f9a7 	bl	8003f30 <HAL_GetTick>
 8007be2:	4602      	mov	r2, r0
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d905      	bls.n	8007bf8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e013      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
 8007bf0:	40021000 	.word	0x40021000
 8007bf4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bf8:	4b09      	ldr	r3, [pc, #36]	@ (8007c20 <HAL_RCC_OscConfig+0x7b0>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1ec      	bne.n	8007bde <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007c04:	4b06      	ldr	r3, [pc, #24]	@ (8007c20 <HAL_RCC_OscConfig+0x7b0>)
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	4905      	ldr	r1, [pc, #20]	@ (8007c20 <HAL_RCC_OscConfig+0x7b0>)
 8007c0a:	4b06      	ldr	r3, [pc, #24]	@ (8007c24 <HAL_RCC_OscConfig+0x7b4>)
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	60cb      	str	r3, [r1, #12]
 8007c10:	e001      	b.n	8007c16 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e000      	b.n	8007c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3720      	adds	r7, #32
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	40021000 	.word	0x40021000
 8007c24:	feeefffc 	.word	0xfeeefffc

08007c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e0e7      	b.n	8007e0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c3c:	4b75      	ldr	r3, [pc, #468]	@ (8007e14 <HAL_RCC_ClockConfig+0x1ec>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0307 	and.w	r3, r3, #7
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d910      	bls.n	8007c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c4a:	4b72      	ldr	r3, [pc, #456]	@ (8007e14 <HAL_RCC_ClockConfig+0x1ec>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f023 0207 	bic.w	r2, r3, #7
 8007c52:	4970      	ldr	r1, [pc, #448]	@ (8007e14 <HAL_RCC_ClockConfig+0x1ec>)
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c5a:	4b6e      	ldr	r3, [pc, #440]	@ (8007e14 <HAL_RCC_ClockConfig+0x1ec>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0307 	and.w	r3, r3, #7
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d001      	beq.n	8007c6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e0cf      	b.n	8007e0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0302 	and.w	r3, r3, #2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d010      	beq.n	8007c9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	4b66      	ldr	r3, [pc, #408]	@ (8007e18 <HAL_RCC_ClockConfig+0x1f0>)
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d908      	bls.n	8007c9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c88:	4b63      	ldr	r3, [pc, #396]	@ (8007e18 <HAL_RCC_ClockConfig+0x1f0>)
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	4960      	ldr	r1, [pc, #384]	@ (8007e18 <HAL_RCC_ClockConfig+0x1f0>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d04c      	beq.n	8007d40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d107      	bne.n	8007cbe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cae:	4b5a      	ldr	r3, [pc, #360]	@ (8007e18 <HAL_RCC_ClockConfig+0x1f0>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d121      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e0a6      	b.n	8007e0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d107      	bne.n	8007cd6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007cc6:	4b54      	ldr	r3, [pc, #336]	@ (8007e18 <HAL_RCC_ClockConfig+0x1f0>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d115      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e09a      	b.n	8007e0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d107      	bne.n	8007cee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007cde:	4b4e      	ldr	r3, [pc, #312]	@ (8007e18 <HAL_RCC_ClockConfig+0x1f0>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0302 	and.w	r3, r3, #2
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d109      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e08e      	b.n	8007e0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007cee:	4b4a      	ldr	r3, [pc, #296]	@ (8007e18 <HAL_RCC_ClockConfig+0x1f0>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e086      	b.n	8007e0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007cfe:	4b46      	ldr	r3, [pc, #280]	@ (8007e18 <HAL_RCC_ClockConfig+0x1f0>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f023 0203 	bic.w	r2, r3, #3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	4943      	ldr	r1, [pc, #268]	@ (8007e18 <HAL_RCC_ClockConfig+0x1f0>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d10:	f7fc f90e 	bl	8003f30 <HAL_GetTick>
 8007d14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d16:	e00a      	b.n	8007d2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d18:	f7fc f90a 	bl	8003f30 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d901      	bls.n	8007d2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e06e      	b.n	8007e0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d2e:	4b3a      	ldr	r3, [pc, #232]	@ (8007e18 <HAL_RCC_ClockConfig+0x1f0>)
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f003 020c 	and.w	r2, r3, #12
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d1eb      	bne.n	8007d18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d010      	beq.n	8007d6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	689a      	ldr	r2, [r3, #8]
 8007d50:	4b31      	ldr	r3, [pc, #196]	@ (8007e18 <HAL_RCC_ClockConfig+0x1f0>)
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d208      	bcs.n	8007d6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8007e18 <HAL_RCC_ClockConfig+0x1f0>)
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	492b      	ldr	r1, [pc, #172]	@ (8007e18 <HAL_RCC_ClockConfig+0x1f0>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d6e:	4b29      	ldr	r3, [pc, #164]	@ (8007e14 <HAL_RCC_ClockConfig+0x1ec>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0307 	and.w	r3, r3, #7
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d210      	bcs.n	8007d9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d7c:	4b25      	ldr	r3, [pc, #148]	@ (8007e14 <HAL_RCC_ClockConfig+0x1ec>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f023 0207 	bic.w	r2, r3, #7
 8007d84:	4923      	ldr	r1, [pc, #140]	@ (8007e14 <HAL_RCC_ClockConfig+0x1ec>)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d8c:	4b21      	ldr	r3, [pc, #132]	@ (8007e14 <HAL_RCC_ClockConfig+0x1ec>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0307 	and.w	r3, r3, #7
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d001      	beq.n	8007d9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e036      	b.n	8007e0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0304 	and.w	r3, r3, #4
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d008      	beq.n	8007dbc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007daa:	4b1b      	ldr	r3, [pc, #108]	@ (8007e18 <HAL_RCC_ClockConfig+0x1f0>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	4918      	ldr	r1, [pc, #96]	@ (8007e18 <HAL_RCC_ClockConfig+0x1f0>)
 8007db8:	4313      	orrs	r3, r2
 8007dba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0308 	and.w	r3, r3, #8
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d009      	beq.n	8007ddc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007dc8:	4b13      	ldr	r3, [pc, #76]	@ (8007e18 <HAL_RCC_ClockConfig+0x1f0>)
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	00db      	lsls	r3, r3, #3
 8007dd6:	4910      	ldr	r1, [pc, #64]	@ (8007e18 <HAL_RCC_ClockConfig+0x1f0>)
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007ddc:	f000 f824 	bl	8007e28 <HAL_RCC_GetSysClockFreq>
 8007de0:	4602      	mov	r2, r0
 8007de2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e18 <HAL_RCC_ClockConfig+0x1f0>)
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	091b      	lsrs	r3, r3, #4
 8007de8:	f003 030f 	and.w	r3, r3, #15
 8007dec:	490b      	ldr	r1, [pc, #44]	@ (8007e1c <HAL_RCC_ClockConfig+0x1f4>)
 8007dee:	5ccb      	ldrb	r3, [r1, r3]
 8007df0:	f003 031f 	and.w	r3, r3, #31
 8007df4:	fa22 f303 	lsr.w	r3, r2, r3
 8007df8:	4a09      	ldr	r2, [pc, #36]	@ (8007e20 <HAL_RCC_ClockConfig+0x1f8>)
 8007dfa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007dfc:	4b09      	ldr	r3, [pc, #36]	@ (8007e24 <HAL_RCC_ClockConfig+0x1fc>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fc f845 	bl	8003e90 <HAL_InitTick>
 8007e06:	4603      	mov	r3, r0
 8007e08:	72fb      	strb	r3, [r7, #11]

  return status;
 8007e0a:	7afb      	ldrb	r3, [r7, #11]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	40022000 	.word	0x40022000
 8007e18:	40021000 	.word	0x40021000
 8007e1c:	08011978 	.word	0x08011978
 8007e20:	20000008 	.word	0x20000008
 8007e24:	20000040 	.word	0x20000040

08007e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b089      	sub	sp, #36	@ 0x24
 8007e2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	61fb      	str	r3, [r7, #28]
 8007e32:	2300      	movs	r3, #0
 8007e34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e36:	4b3e      	ldr	r3, [pc, #248]	@ (8007f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f003 030c 	and.w	r3, r3, #12
 8007e3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e40:	4b3b      	ldr	r3, [pc, #236]	@ (8007f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f003 0303 	and.w	r3, r3, #3
 8007e48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d005      	beq.n	8007e5c <HAL_RCC_GetSysClockFreq+0x34>
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	2b0c      	cmp	r3, #12
 8007e54:	d121      	bne.n	8007e9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d11e      	bne.n	8007e9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007e5c:	4b34      	ldr	r3, [pc, #208]	@ (8007f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0308 	and.w	r3, r3, #8
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d107      	bne.n	8007e78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007e68:	4b31      	ldr	r3, [pc, #196]	@ (8007f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e6e:	0a1b      	lsrs	r3, r3, #8
 8007e70:	f003 030f 	and.w	r3, r3, #15
 8007e74:	61fb      	str	r3, [r7, #28]
 8007e76:	e005      	b.n	8007e84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007e78:	4b2d      	ldr	r3, [pc, #180]	@ (8007f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	091b      	lsrs	r3, r3, #4
 8007e7e:	f003 030f 	and.w	r3, r3, #15
 8007e82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007e84:	4a2b      	ldr	r2, [pc, #172]	@ (8007f34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10d      	bne.n	8007eb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e98:	e00a      	b.n	8007eb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	d102      	bne.n	8007ea6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007ea0:	4b25      	ldr	r3, [pc, #148]	@ (8007f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8007ea2:	61bb      	str	r3, [r7, #24]
 8007ea4:	e004      	b.n	8007eb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	d101      	bne.n	8007eb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007eac:	4b23      	ldr	r3, [pc, #140]	@ (8007f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8007eae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	2b0c      	cmp	r3, #12
 8007eb4:	d134      	bne.n	8007f20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8007f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	f003 0303 	and.w	r3, r3, #3
 8007ebe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d003      	beq.n	8007ece <HAL_RCC_GetSysClockFreq+0xa6>
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2b03      	cmp	r3, #3
 8007eca:	d003      	beq.n	8007ed4 <HAL_RCC_GetSysClockFreq+0xac>
 8007ecc:	e005      	b.n	8007eda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007ece:	4b1a      	ldr	r3, [pc, #104]	@ (8007f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8007ed0:	617b      	str	r3, [r7, #20]
      break;
 8007ed2:	e005      	b.n	8007ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007ed4:	4b19      	ldr	r3, [pc, #100]	@ (8007f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8007ed6:	617b      	str	r3, [r7, #20]
      break;
 8007ed8:	e002      	b.n	8007ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	617b      	str	r3, [r7, #20]
      break;
 8007ede:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ee0:	4b13      	ldr	r3, [pc, #76]	@ (8007f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	091b      	lsrs	r3, r3, #4
 8007ee6:	f003 0307 	and.w	r3, r3, #7
 8007eea:	3301      	adds	r3, #1
 8007eec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007eee:	4b10      	ldr	r3, [pc, #64]	@ (8007f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	0a1b      	lsrs	r3, r3, #8
 8007ef4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	fb03 f202 	mul.w	r2, r3, r2
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f06:	4b0a      	ldr	r3, [pc, #40]	@ (8007f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	0e5b      	lsrs	r3, r3, #25
 8007f0c:	f003 0303 	and.w	r3, r3, #3
 8007f10:	3301      	adds	r3, #1
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007f20:	69bb      	ldr	r3, [r7, #24]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3724      	adds	r7, #36	@ 0x24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	40021000 	.word	0x40021000
 8007f34:	08011990 	.word	0x08011990
 8007f38:	00f42400 	.word	0x00f42400
 8007f3c:	007a1200 	.word	0x007a1200

08007f40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f40:	b480      	push	{r7}
 8007f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f44:	4b03      	ldr	r3, [pc, #12]	@ (8007f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f46:	681b      	ldr	r3, [r3, #0]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	20000008 	.word	0x20000008

08007f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007f5c:	f7ff fff0 	bl	8007f40 <HAL_RCC_GetHCLKFreq>
 8007f60:	4602      	mov	r2, r0
 8007f62:	4b06      	ldr	r3, [pc, #24]	@ (8007f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	0a1b      	lsrs	r3, r3, #8
 8007f68:	f003 0307 	and.w	r3, r3, #7
 8007f6c:	4904      	ldr	r1, [pc, #16]	@ (8007f80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f6e:	5ccb      	ldrb	r3, [r1, r3]
 8007f70:	f003 031f 	and.w	r3, r3, #31
 8007f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	40021000 	.word	0x40021000
 8007f80:	08011988 	.word	0x08011988

08007f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007f88:	f7ff ffda 	bl	8007f40 <HAL_RCC_GetHCLKFreq>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	4b06      	ldr	r3, [pc, #24]	@ (8007fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	0adb      	lsrs	r3, r3, #11
 8007f94:	f003 0307 	and.w	r3, r3, #7
 8007f98:	4904      	ldr	r1, [pc, #16]	@ (8007fac <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f9a:	5ccb      	ldrb	r3, [r1, r3]
 8007f9c:	f003 031f 	and.w	r3, r3, #31
 8007fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	40021000 	.word	0x40021000
 8007fac:	08011988 	.word	0x08011988

08007fb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007fb8:	2300      	movs	r3, #0
 8007fba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8008068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d003      	beq.n	8007fd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007fc8:	f7ff f922 	bl	8007210 <HAL_PWREx_GetVoltageRange>
 8007fcc:	6178      	str	r0, [r7, #20]
 8007fce:	e014      	b.n	8007ffa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007fd0:	4b25      	ldr	r3, [pc, #148]	@ (8008068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fd4:	4a24      	ldr	r2, [pc, #144]	@ (8008068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fda:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fdc:	4b22      	ldr	r3, [pc, #136]	@ (8008068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fe4:	60fb      	str	r3, [r7, #12]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007fe8:	f7ff f912 	bl	8007210 <HAL_PWREx_GetVoltageRange>
 8007fec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007fee:	4b1e      	ldr	r3, [pc, #120]	@ (8008068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8008068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ff4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ff8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008000:	d10b      	bne.n	800801a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b80      	cmp	r3, #128	@ 0x80
 8008006:	d919      	bls.n	800803c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2ba0      	cmp	r3, #160	@ 0xa0
 800800c:	d902      	bls.n	8008014 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800800e:	2302      	movs	r3, #2
 8008010:	613b      	str	r3, [r7, #16]
 8008012:	e013      	b.n	800803c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008014:	2301      	movs	r3, #1
 8008016:	613b      	str	r3, [r7, #16]
 8008018:	e010      	b.n	800803c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b80      	cmp	r3, #128	@ 0x80
 800801e:	d902      	bls.n	8008026 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008020:	2303      	movs	r3, #3
 8008022:	613b      	str	r3, [r7, #16]
 8008024:	e00a      	b.n	800803c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b80      	cmp	r3, #128	@ 0x80
 800802a:	d102      	bne.n	8008032 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800802c:	2302      	movs	r3, #2
 800802e:	613b      	str	r3, [r7, #16]
 8008030:	e004      	b.n	800803c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b70      	cmp	r3, #112	@ 0x70
 8008036:	d101      	bne.n	800803c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008038:	2301      	movs	r3, #1
 800803a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800803c:	4b0b      	ldr	r3, [pc, #44]	@ (800806c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f023 0207 	bic.w	r2, r3, #7
 8008044:	4909      	ldr	r1, [pc, #36]	@ (800806c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	4313      	orrs	r3, r2
 800804a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800804c:	4b07      	ldr	r3, [pc, #28]	@ (800806c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	429a      	cmp	r2, r3
 8008058:	d001      	beq.n	800805e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e000      	b.n	8008060 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3718      	adds	r7, #24
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	40021000 	.word	0x40021000
 800806c:	40022000 	.word	0x40022000

08008070 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008078:	2300      	movs	r3, #0
 800807a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800807c:	2300      	movs	r3, #0
 800807e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008088:	2b00      	cmp	r3, #0
 800808a:	d041      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008090:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008094:	d02a      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008096:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800809a:	d824      	bhi.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800809c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080a0:	d008      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80080a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080a6:	d81e      	bhi.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00a      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80080ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080b0:	d010      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80080b2:	e018      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80080b4:	4b86      	ldr	r3, [pc, #536]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	4a85      	ldr	r2, [pc, #532]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80080c0:	e015      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	3304      	adds	r3, #4
 80080c6:	2100      	movs	r1, #0
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 facb 	bl	8008664 <RCCEx_PLLSAI1_Config>
 80080ce:	4603      	mov	r3, r0
 80080d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80080d2:	e00c      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3320      	adds	r3, #32
 80080d8:	2100      	movs	r1, #0
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 fbb6 	bl	800884c <RCCEx_PLLSAI2_Config>
 80080e0:	4603      	mov	r3, r0
 80080e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80080e4:	e003      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	74fb      	strb	r3, [r7, #19]
      break;
 80080ea:	e000      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80080ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080ee:	7cfb      	ldrb	r3, [r7, #19]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10b      	bne.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80080f4:	4b76      	ldr	r3, [pc, #472]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008102:	4973      	ldr	r1, [pc, #460]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008104:	4313      	orrs	r3, r2
 8008106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800810a:	e001      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800810c:	7cfb      	ldrb	r3, [r7, #19]
 800810e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d041      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008120:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008124:	d02a      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008126:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800812a:	d824      	bhi.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800812c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008130:	d008      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008132:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008136:	d81e      	bhi.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00a      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800813c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008140:	d010      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008142:	e018      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008144:	4b62      	ldr	r3, [pc, #392]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	4a61      	ldr	r2, [pc, #388]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800814a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800814e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008150:	e015      	b.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	3304      	adds	r3, #4
 8008156:	2100      	movs	r1, #0
 8008158:	4618      	mov	r0, r3
 800815a:	f000 fa83 	bl	8008664 <RCCEx_PLLSAI1_Config>
 800815e:	4603      	mov	r3, r0
 8008160:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008162:	e00c      	b.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	3320      	adds	r3, #32
 8008168:	2100      	movs	r1, #0
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fb6e 	bl	800884c <RCCEx_PLLSAI2_Config>
 8008170:	4603      	mov	r3, r0
 8008172:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008174:	e003      	b.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	74fb      	strb	r3, [r7, #19]
      break;
 800817a:	e000      	b.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800817c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800817e:	7cfb      	ldrb	r3, [r7, #19]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10b      	bne.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008184:	4b52      	ldr	r3, [pc, #328]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800818a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008192:	494f      	ldr	r1, [pc, #316]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008194:	4313      	orrs	r3, r2
 8008196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800819a:	e001      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800819c:	7cfb      	ldrb	r3, [r7, #19]
 800819e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 80a0 	beq.w	80082ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081ae:	2300      	movs	r3, #0
 80081b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80081b2:	4b47      	ldr	r3, [pc, #284]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80081be:	2301      	movs	r3, #1
 80081c0:	e000      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80081c2:	2300      	movs	r3, #0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00d      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081c8:	4b41      	ldr	r3, [pc, #260]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081cc:	4a40      	ldr	r2, [pc, #256]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80081d4:	4b3e      	ldr	r3, [pc, #248]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081dc:	60bb      	str	r3, [r7, #8]
 80081de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081e0:	2301      	movs	r3, #1
 80081e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081e4:	4b3b      	ldr	r3, [pc, #236]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a3a      	ldr	r2, [pc, #232]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80081ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081f0:	f7fb fe9e 	bl	8003f30 <HAL_GetTick>
 80081f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80081f6:	e009      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081f8:	f7fb fe9a 	bl	8003f30 <HAL_GetTick>
 80081fc:	4602      	mov	r2, r0
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	2b02      	cmp	r3, #2
 8008204:	d902      	bls.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	74fb      	strb	r3, [r7, #19]
        break;
 800820a:	e005      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800820c:	4b31      	ldr	r3, [pc, #196]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008214:	2b00      	cmp	r3, #0
 8008216:	d0ef      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008218:	7cfb      	ldrb	r3, [r7, #19]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d15c      	bne.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800821e:	4b2c      	ldr	r3, [pc, #176]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008224:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008228:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d01f      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	429a      	cmp	r2, r3
 800823a:	d019      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800823c:	4b24      	ldr	r3, [pc, #144]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800823e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008242:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008246:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008248:	4b21      	ldr	r3, [pc, #132]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800824a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800824e:	4a20      	ldr	r2, [pc, #128]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008258:	4b1d      	ldr	r3, [pc, #116]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800825a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800825e:	4a1c      	ldr	r2, [pc, #112]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008260:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008268:	4a19      	ldr	r2, [pc, #100]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	2b00      	cmp	r3, #0
 8008278:	d016      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800827a:	f7fb fe59 	bl	8003f30 <HAL_GetTick>
 800827e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008280:	e00b      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008282:	f7fb fe55 	bl	8003f30 <HAL_GetTick>
 8008286:	4602      	mov	r2, r0
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008290:	4293      	cmp	r3, r2
 8008292:	d902      	bls.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	74fb      	strb	r3, [r7, #19]
            break;
 8008298:	e006      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800829a:	4b0d      	ldr	r3, [pc, #52]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800829c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082a0:	f003 0302 	and.w	r3, r3, #2
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d0ec      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80082a8:	7cfb      	ldrb	r3, [r7, #19]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10c      	bne.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082ae:	4b08      	ldr	r3, [pc, #32]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082be:	4904      	ldr	r1, [pc, #16]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082c0:	4313      	orrs	r3, r2
 80082c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80082c6:	e009      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80082c8:	7cfb      	ldrb	r3, [r7, #19]
 80082ca:	74bb      	strb	r3, [r7, #18]
 80082cc:	e006      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80082ce:	bf00      	nop
 80082d0:	40021000 	.word	0x40021000
 80082d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d8:	7cfb      	ldrb	r3, [r7, #19]
 80082da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082dc:	7c7b      	ldrb	r3, [r7, #17]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d105      	bne.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082e2:	4b9e      	ldr	r3, [pc, #632]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082e6:	4a9d      	ldr	r2, [pc, #628]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00a      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80082fa:	4b98      	ldr	r3, [pc, #608]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008300:	f023 0203 	bic.w	r2, r3, #3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008308:	4994      	ldr	r1, [pc, #592]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800830a:	4313      	orrs	r3, r2
 800830c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0302 	and.w	r3, r3, #2
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00a      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800831c:	4b8f      	ldr	r3, [pc, #572]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800831e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008322:	f023 020c 	bic.w	r2, r3, #12
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800832a:	498c      	ldr	r1, [pc, #560]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800832c:	4313      	orrs	r3, r2
 800832e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0304 	and.w	r3, r3, #4
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00a      	beq.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800833e:	4b87      	ldr	r3, [pc, #540]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008344:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800834c:	4983      	ldr	r1, [pc, #524]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800834e:	4313      	orrs	r3, r2
 8008350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0308 	and.w	r3, r3, #8
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00a      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008360:	4b7e      	ldr	r3, [pc, #504]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008366:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800836e:	497b      	ldr	r1, [pc, #492]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008370:	4313      	orrs	r3, r2
 8008372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0310 	and.w	r3, r3, #16
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008382:	4b76      	ldr	r3, [pc, #472]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008388:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008390:	4972      	ldr	r1, [pc, #456]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008392:	4313      	orrs	r3, r2
 8008394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0320 	and.w	r3, r3, #32
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00a      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083a4:	4b6d      	ldr	r3, [pc, #436]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083b2:	496a      	ldr	r1, [pc, #424]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00a      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083c6:	4b65      	ldr	r3, [pc, #404]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083d4:	4961      	ldr	r1, [pc, #388]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00a      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80083e8:	4b5c      	ldr	r3, [pc, #368]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083f6:	4959      	ldr	r1, [pc, #356]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00a      	beq.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800840a:	4b54      	ldr	r3, [pc, #336]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800840c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008410:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008418:	4950      	ldr	r1, [pc, #320]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800841a:	4313      	orrs	r3, r2
 800841c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00a      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800842c:	4b4b      	ldr	r3, [pc, #300]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800842e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008432:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800843a:	4948      	ldr	r1, [pc, #288]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800843c:	4313      	orrs	r3, r2
 800843e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00a      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800844e:	4b43      	ldr	r3, [pc, #268]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008454:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800845c:	493f      	ldr	r1, [pc, #252]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800845e:	4313      	orrs	r3, r2
 8008460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800846c:	2b00      	cmp	r3, #0
 800846e:	d028      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008470:	4b3a      	ldr	r3, [pc, #232]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008476:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800847e:	4937      	ldr	r1, [pc, #220]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008480:	4313      	orrs	r3, r2
 8008482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800848a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800848e:	d106      	bne.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008490:	4b32      	ldr	r3, [pc, #200]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	4a31      	ldr	r2, [pc, #196]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800849a:	60d3      	str	r3, [r2, #12]
 800849c:	e011      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80084a6:	d10c      	bne.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3304      	adds	r3, #4
 80084ac:	2101      	movs	r1, #1
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 f8d8 	bl	8008664 <RCCEx_PLLSAI1_Config>
 80084b4:	4603      	mov	r3, r0
 80084b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80084b8:	7cfb      	ldrb	r3, [r7, #19]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80084be:	7cfb      	ldrb	r3, [r7, #19]
 80084c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d028      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80084ce:	4b23      	ldr	r3, [pc, #140]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084dc:	491f      	ldr	r1, [pc, #124]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084ec:	d106      	bne.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084ee:	4b1b      	ldr	r3, [pc, #108]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	4a1a      	ldr	r2, [pc, #104]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084f8:	60d3      	str	r3, [r2, #12]
 80084fa:	e011      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008500:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008504:	d10c      	bne.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	3304      	adds	r3, #4
 800850a:	2101      	movs	r1, #1
 800850c:	4618      	mov	r0, r3
 800850e:	f000 f8a9 	bl	8008664 <RCCEx_PLLSAI1_Config>
 8008512:	4603      	mov	r3, r0
 8008514:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008516:	7cfb      	ldrb	r3, [r7, #19]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800851c:	7cfb      	ldrb	r3, [r7, #19]
 800851e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d02b      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800852c:	4b0b      	ldr	r3, [pc, #44]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800852e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008532:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800853a:	4908      	ldr	r1, [pc, #32]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800853c:	4313      	orrs	r3, r2
 800853e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008546:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800854a:	d109      	bne.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800854c:	4b03      	ldr	r3, [pc, #12]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	4a02      	ldr	r2, [pc, #8]	@ (800855c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008552:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008556:	60d3      	str	r3, [r2, #12]
 8008558:	e014      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800855a:	bf00      	nop
 800855c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008564:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008568:	d10c      	bne.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	3304      	adds	r3, #4
 800856e:	2101      	movs	r1, #1
 8008570:	4618      	mov	r0, r3
 8008572:	f000 f877 	bl	8008664 <RCCEx_PLLSAI1_Config>
 8008576:	4603      	mov	r3, r0
 8008578:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800857a:	7cfb      	ldrb	r3, [r7, #19]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d001      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008580:	7cfb      	ldrb	r3, [r7, #19]
 8008582:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d02f      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008590:	4b2b      	ldr	r3, [pc, #172]	@ (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008596:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800859e:	4928      	ldr	r1, [pc, #160]	@ (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085ae:	d10d      	bne.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	3304      	adds	r3, #4
 80085b4:	2102      	movs	r1, #2
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 f854 	bl	8008664 <RCCEx_PLLSAI1_Config>
 80085bc:	4603      	mov	r3, r0
 80085be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80085c0:	7cfb      	ldrb	r3, [r7, #19]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d014      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80085c6:	7cfb      	ldrb	r3, [r7, #19]
 80085c8:	74bb      	strb	r3, [r7, #18]
 80085ca:	e011      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085d4:	d10c      	bne.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	3320      	adds	r3, #32
 80085da:	2102      	movs	r1, #2
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 f935 	bl	800884c <RCCEx_PLLSAI2_Config>
 80085e2:	4603      	mov	r3, r0
 80085e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80085e6:	7cfb      	ldrb	r3, [r7, #19]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80085ec:	7cfb      	ldrb	r3, [r7, #19]
 80085ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00a      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80085fc:	4b10      	ldr	r3, [pc, #64]	@ (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80085fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008602:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800860a:	490d      	ldr	r1, [pc, #52]	@ (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800860c:	4313      	orrs	r3, r2
 800860e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00b      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800861e:	4b08      	ldr	r3, [pc, #32]	@ (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008624:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800862e:	4904      	ldr	r1, [pc, #16]	@ (8008640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008630:	4313      	orrs	r3, r2
 8008632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008636:	7cbb      	ldrb	r3, [r7, #18]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	40021000 	.word	0x40021000

08008644 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008644:	b480      	push	{r7}
 8008646:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008648:	4b05      	ldr	r3, [pc, #20]	@ (8008660 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a04      	ldr	r2, [pc, #16]	@ (8008660 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800864e:	f043 0304 	orr.w	r3, r3, #4
 8008652:	6013      	str	r3, [r2, #0]
}
 8008654:	bf00      	nop
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	40021000 	.word	0x40021000

08008664 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008672:	4b75      	ldr	r3, [pc, #468]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	f003 0303 	and.w	r3, r3, #3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d018      	beq.n	80086b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800867e:	4b72      	ldr	r3, [pc, #456]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	f003 0203 	and.w	r2, r3, #3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	429a      	cmp	r2, r3
 800868c:	d10d      	bne.n	80086aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
       ||
 8008692:	2b00      	cmp	r3, #0
 8008694:	d009      	beq.n	80086aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008696:	4b6c      	ldr	r3, [pc, #432]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	091b      	lsrs	r3, r3, #4
 800869c:	f003 0307 	and.w	r3, r3, #7
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
       ||
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d047      	beq.n	800873a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	73fb      	strb	r3, [r7, #15]
 80086ae:	e044      	b.n	800873a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b03      	cmp	r3, #3
 80086b6:	d018      	beq.n	80086ea <RCCEx_PLLSAI1_Config+0x86>
 80086b8:	2b03      	cmp	r3, #3
 80086ba:	d825      	bhi.n	8008708 <RCCEx_PLLSAI1_Config+0xa4>
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d002      	beq.n	80086c6 <RCCEx_PLLSAI1_Config+0x62>
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d009      	beq.n	80086d8 <RCCEx_PLLSAI1_Config+0x74>
 80086c4:	e020      	b.n	8008708 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80086c6:	4b60      	ldr	r3, [pc, #384]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d11d      	bne.n	800870e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086d6:	e01a      	b.n	800870e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80086d8:	4b5b      	ldr	r3, [pc, #364]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d116      	bne.n	8008712 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086e8:	e013      	b.n	8008712 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80086ea:	4b57      	ldr	r3, [pc, #348]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10f      	bne.n	8008716 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80086f6:	4b54      	ldr	r3, [pc, #336]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d109      	bne.n	8008716 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008706:	e006      	b.n	8008716 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	73fb      	strb	r3, [r7, #15]
      break;
 800870c:	e004      	b.n	8008718 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800870e:	bf00      	nop
 8008710:	e002      	b.n	8008718 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008712:	bf00      	nop
 8008714:	e000      	b.n	8008718 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008716:	bf00      	nop
    }

    if(status == HAL_OK)
 8008718:	7bfb      	ldrb	r3, [r7, #15]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10d      	bne.n	800873a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800871e:	4b4a      	ldr	r3, [pc, #296]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6819      	ldr	r1, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	3b01      	subs	r3, #1
 8008730:	011b      	lsls	r3, r3, #4
 8008732:	430b      	orrs	r3, r1
 8008734:	4944      	ldr	r1, [pc, #272]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008736:	4313      	orrs	r3, r2
 8008738:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800873a:	7bfb      	ldrb	r3, [r7, #15]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d17d      	bne.n	800883c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008740:	4b41      	ldr	r3, [pc, #260]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a40      	ldr	r2, [pc, #256]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008746:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800874a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800874c:	f7fb fbf0 	bl	8003f30 <HAL_GetTick>
 8008750:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008752:	e009      	b.n	8008768 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008754:	f7fb fbec 	bl	8003f30 <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	2b02      	cmp	r3, #2
 8008760:	d902      	bls.n	8008768 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	73fb      	strb	r3, [r7, #15]
        break;
 8008766:	e005      	b.n	8008774 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008768:	4b37      	ldr	r3, [pc, #220]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1ef      	bne.n	8008754 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d160      	bne.n	800883c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d111      	bne.n	80087a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008780:	4b31      	ldr	r3, [pc, #196]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8008788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	6892      	ldr	r2, [r2, #8]
 8008790:	0211      	lsls	r1, r2, #8
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	68d2      	ldr	r2, [r2, #12]
 8008796:	0912      	lsrs	r2, r2, #4
 8008798:	0452      	lsls	r2, r2, #17
 800879a:	430a      	orrs	r2, r1
 800879c:	492a      	ldr	r1, [pc, #168]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	610b      	str	r3, [r1, #16]
 80087a2:	e027      	b.n	80087f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d112      	bne.n	80087d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80087aa:	4b27      	ldr	r3, [pc, #156]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80087b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	6892      	ldr	r2, [r2, #8]
 80087ba:	0211      	lsls	r1, r2, #8
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	6912      	ldr	r2, [r2, #16]
 80087c0:	0852      	lsrs	r2, r2, #1
 80087c2:	3a01      	subs	r2, #1
 80087c4:	0552      	lsls	r2, r2, #21
 80087c6:	430a      	orrs	r2, r1
 80087c8:	491f      	ldr	r1, [pc, #124]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087ca:	4313      	orrs	r3, r2
 80087cc:	610b      	str	r3, [r1, #16]
 80087ce:	e011      	b.n	80087f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80087d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80087d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	6892      	ldr	r2, [r2, #8]
 80087e0:	0211      	lsls	r1, r2, #8
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	6952      	ldr	r2, [r2, #20]
 80087e6:	0852      	lsrs	r2, r2, #1
 80087e8:	3a01      	subs	r2, #1
 80087ea:	0652      	lsls	r2, r2, #25
 80087ec:	430a      	orrs	r2, r1
 80087ee:	4916      	ldr	r1, [pc, #88]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80087f4:	4b14      	ldr	r3, [pc, #80]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a13      	ldr	r2, [pc, #76]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80087fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008800:	f7fb fb96 	bl	8003f30 <HAL_GetTick>
 8008804:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008806:	e009      	b.n	800881c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008808:	f7fb fb92 	bl	8003f30 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b02      	cmp	r3, #2
 8008814:	d902      	bls.n	800881c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	73fb      	strb	r3, [r7, #15]
          break;
 800881a:	e005      	b.n	8008828 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800881c:	4b0a      	ldr	r3, [pc, #40]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d0ef      	beq.n	8008808 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008828:	7bfb      	ldrb	r3, [r7, #15]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d106      	bne.n	800883c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800882e:	4b06      	ldr	r3, [pc, #24]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008830:	691a      	ldr	r2, [r3, #16]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	4904      	ldr	r1, [pc, #16]	@ (8008848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008838:	4313      	orrs	r3, r2
 800883a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800883c:	7bfb      	ldrb	r3, [r7, #15]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	40021000 	.word	0x40021000

0800884c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008856:	2300      	movs	r3, #0
 8008858:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800885a:	4b6a      	ldr	r3, [pc, #424]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	f003 0303 	and.w	r3, r3, #3
 8008862:	2b00      	cmp	r3, #0
 8008864:	d018      	beq.n	8008898 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008866:	4b67      	ldr	r3, [pc, #412]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	f003 0203 	and.w	r2, r3, #3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	429a      	cmp	r2, r3
 8008874:	d10d      	bne.n	8008892 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
       ||
 800887a:	2b00      	cmp	r3, #0
 800887c:	d009      	beq.n	8008892 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800887e:	4b61      	ldr	r3, [pc, #388]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	091b      	lsrs	r3, r3, #4
 8008884:	f003 0307 	and.w	r3, r3, #7
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
       ||
 800888e:	429a      	cmp	r2, r3
 8008890:	d047      	beq.n	8008922 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	73fb      	strb	r3, [r7, #15]
 8008896:	e044      	b.n	8008922 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b03      	cmp	r3, #3
 800889e:	d018      	beq.n	80088d2 <RCCEx_PLLSAI2_Config+0x86>
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d825      	bhi.n	80088f0 <RCCEx_PLLSAI2_Config+0xa4>
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d002      	beq.n	80088ae <RCCEx_PLLSAI2_Config+0x62>
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d009      	beq.n	80088c0 <RCCEx_PLLSAI2_Config+0x74>
 80088ac:	e020      	b.n	80088f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80088ae:	4b55      	ldr	r3, [pc, #340]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0302 	and.w	r3, r3, #2
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d11d      	bne.n	80088f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80088be:	e01a      	b.n	80088f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80088c0:	4b50      	ldr	r3, [pc, #320]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d116      	bne.n	80088fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80088d0:	e013      	b.n	80088fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80088d2:	4b4c      	ldr	r3, [pc, #304]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10f      	bne.n	80088fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80088de:	4b49      	ldr	r3, [pc, #292]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d109      	bne.n	80088fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80088ee:	e006      	b.n	80088fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	73fb      	strb	r3, [r7, #15]
      break;
 80088f4:	e004      	b.n	8008900 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80088f6:	bf00      	nop
 80088f8:	e002      	b.n	8008900 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80088fa:	bf00      	nop
 80088fc:	e000      	b.n	8008900 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80088fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10d      	bne.n	8008922 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008906:	4b3f      	ldr	r3, [pc, #252]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6819      	ldr	r1, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	3b01      	subs	r3, #1
 8008918:	011b      	lsls	r3, r3, #4
 800891a:	430b      	orrs	r3, r1
 800891c:	4939      	ldr	r1, [pc, #228]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800891e:	4313      	orrs	r3, r2
 8008920:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d167      	bne.n	80089f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008928:	4b36      	ldr	r3, [pc, #216]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a35      	ldr	r2, [pc, #212]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800892e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008932:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008934:	f7fb fafc 	bl	8003f30 <HAL_GetTick>
 8008938:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800893a:	e009      	b.n	8008950 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800893c:	f7fb faf8 	bl	8003f30 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	2b02      	cmp	r3, #2
 8008948:	d902      	bls.n	8008950 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	73fb      	strb	r3, [r7, #15]
        break;
 800894e:	e005      	b.n	800895c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008950:	4b2c      	ldr	r3, [pc, #176]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1ef      	bne.n	800893c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d14a      	bne.n	80089f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d111      	bne.n	800898c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008968:	4b26      	ldr	r3, [pc, #152]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800896a:	695b      	ldr	r3, [r3, #20]
 800896c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8008970:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6892      	ldr	r2, [r2, #8]
 8008978:	0211      	lsls	r1, r2, #8
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	68d2      	ldr	r2, [r2, #12]
 800897e:	0912      	lsrs	r2, r2, #4
 8008980:	0452      	lsls	r2, r2, #17
 8008982:	430a      	orrs	r2, r1
 8008984:	491f      	ldr	r1, [pc, #124]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008986:	4313      	orrs	r3, r2
 8008988:	614b      	str	r3, [r1, #20]
 800898a:	e011      	b.n	80089b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800898c:	4b1d      	ldr	r3, [pc, #116]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008994:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	6892      	ldr	r2, [r2, #8]
 800899c:	0211      	lsls	r1, r2, #8
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	6912      	ldr	r2, [r2, #16]
 80089a2:	0852      	lsrs	r2, r2, #1
 80089a4:	3a01      	subs	r2, #1
 80089a6:	0652      	lsls	r2, r2, #25
 80089a8:	430a      	orrs	r2, r1
 80089aa:	4916      	ldr	r1, [pc, #88]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80089b0:	4b14      	ldr	r3, [pc, #80]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a13      	ldr	r2, [pc, #76]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089bc:	f7fb fab8 	bl	8003f30 <HAL_GetTick>
 80089c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80089c2:	e009      	b.n	80089d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80089c4:	f7fb fab4 	bl	8003f30 <HAL_GetTick>
 80089c8:	4602      	mov	r2, r0
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d902      	bls.n	80089d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	73fb      	strb	r3, [r7, #15]
          break;
 80089d6:	e005      	b.n	80089e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80089d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d0ef      	beq.n	80089c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d106      	bne.n	80089f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80089ea:	4b06      	ldr	r3, [pc, #24]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089ec:	695a      	ldr	r2, [r3, #20]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	4904      	ldr	r1, [pc, #16]	@ (8008a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	40021000 	.word	0x40021000

08008a08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e095      	b.n	8008b46 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d108      	bne.n	8008a34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a2a:	d009      	beq.n	8008a40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	61da      	str	r2, [r3, #28]
 8008a32:	e005      	b.n	8008a40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d106      	bne.n	8008a60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f877 	bl	8008b4e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008a80:	d902      	bls.n	8008a88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008a82:	2300      	movs	r3, #0
 8008a84:	60fb      	str	r3, [r7, #12]
 8008a86:	e002      	b.n	8008a8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008a88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008a8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008a96:	d007      	beq.n	8008aa8 <HAL_SPI_Init+0xa0>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008aa0:	d002      	beq.n	8008aa8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008ab8:	431a      	orrs	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	695b      	ldr	r3, [r3, #20]
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	431a      	orrs	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ad6:	431a      	orrs	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	69db      	ldr	r3, [r3, #28]
 8008adc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ae0:	431a      	orrs	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aea:	ea42 0103 	orr.w	r1, r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	430a      	orrs	r2, r1
 8008afc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	0c1b      	lsrs	r3, r3, #16
 8008b04:	f003 0204 	and.w	r2, r3, #4
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b0c:	f003 0310 	and.w	r3, r3, #16
 8008b10:	431a      	orrs	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b16:	f003 0308 	and.w	r3, r3, #8
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008b24:	ea42 0103 	orr.w	r1, r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8008b56:	bf00      	nop
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b08a      	sub	sp, #40	@ 0x28
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	60f8      	str	r0, [r7, #12]
 8008b6a:	60b9      	str	r1, [r7, #8]
 8008b6c:	607a      	str	r2, [r7, #4]
 8008b6e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008b70:	2301      	movs	r3, #1
 8008b72:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b74:	f7fb f9dc 	bl	8003f30 <HAL_GetTick>
 8008b78:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b80:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008b88:	887b      	ldrh	r3, [r7, #2]
 8008b8a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008b8c:	887b      	ldrh	r3, [r7, #2]
 8008b8e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008b90:	7ffb      	ldrb	r3, [r7, #31]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d00c      	beq.n	8008bb0 <HAL_SPI_TransmitReceive+0x4e>
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b9c:	d106      	bne.n	8008bac <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d102      	bne.n	8008bac <HAL_SPI_TransmitReceive+0x4a>
 8008ba6:	7ffb      	ldrb	r3, [r7, #31]
 8008ba8:	2b04      	cmp	r3, #4
 8008baa:	d001      	beq.n	8008bb0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008bac:	2302      	movs	r3, #2
 8008bae:	e1f3      	b.n	8008f98 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d005      	beq.n	8008bc2 <HAL_SPI_TransmitReceive+0x60>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d002      	beq.n	8008bc2 <HAL_SPI_TransmitReceive+0x60>
 8008bbc:	887b      	ldrh	r3, [r7, #2]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e1e8      	b.n	8008f98 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d101      	bne.n	8008bd4 <HAL_SPI_TransmitReceive+0x72>
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	e1e1      	b.n	8008f98 <HAL_SPI_TransmitReceive+0x436>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	2b04      	cmp	r3, #4
 8008be6:	d003      	beq.n	8008bf0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2205      	movs	r2, #5
 8008bec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	887a      	ldrh	r2, [r7, #2]
 8008c00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	887a      	ldrh	r2, [r7, #2]
 8008c08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	887a      	ldrh	r2, [r7, #2]
 8008c16:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	887a      	ldrh	r2, [r7, #2]
 8008c1c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008c32:	d802      	bhi.n	8008c3a <HAL_SPI_TransmitReceive+0xd8>
 8008c34:	8abb      	ldrh	r3, [r7, #20]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d908      	bls.n	8008c4c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	685a      	ldr	r2, [r3, #4]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008c48:	605a      	str	r2, [r3, #4]
 8008c4a:	e007      	b.n	8008c5c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008c5a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c66:	2b40      	cmp	r3, #64	@ 0x40
 8008c68:	d007      	beq.n	8008c7a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008c82:	f240 8083 	bls.w	8008d8c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d002      	beq.n	8008c94 <HAL_SPI_TransmitReceive+0x132>
 8008c8e:	8afb      	ldrh	r3, [r7, #22]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d16f      	bne.n	8008d74 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c98:	881a      	ldrh	r2, [r3, #0]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca4:	1c9a      	adds	r2, r3, #2
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cb8:	e05c      	b.n	8008d74 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f003 0302 	and.w	r3, r3, #2
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d11b      	bne.n	8008d00 <HAL_SPI_TransmitReceive+0x19e>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d016      	beq.n	8008d00 <HAL_SPI_TransmitReceive+0x19e>
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d113      	bne.n	8008d00 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cdc:	881a      	ldrh	r2, [r3, #0]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce8:	1c9a      	adds	r2, r3, #2
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d11c      	bne.n	8008d48 <HAL_SPI_TransmitReceive+0x1e6>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d016      	beq.n	8008d48 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68da      	ldr	r2, [r3, #12]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d24:	b292      	uxth	r2, r2
 8008d26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d2c:	1c9a      	adds	r2, r3, #2
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d44:	2301      	movs	r3, #1
 8008d46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008d48:	f7fb f8f2 	bl	8003f30 <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d80d      	bhi.n	8008d74 <HAL_SPI_TransmitReceive+0x212>
 8008d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5e:	d009      	beq.n	8008d74 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e111      	b.n	8008f98 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d19d      	bne.n	8008cba <HAL_SPI_TransmitReceive+0x158>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d197      	bne.n	8008cba <HAL_SPI_TransmitReceive+0x158>
 8008d8a:	e0e5      	b.n	8008f58 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d003      	beq.n	8008d9c <HAL_SPI_TransmitReceive+0x23a>
 8008d94:	8afb      	ldrh	r3, [r7, #22]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	f040 80d1 	bne.w	8008f3e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d912      	bls.n	8008dcc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008daa:	881a      	ldrh	r2, [r3, #0]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008db6:	1c9a      	adds	r2, r3, #2
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	3b02      	subs	r3, #2
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008dca:	e0b8      	b.n	8008f3e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	330c      	adds	r3, #12
 8008dd6:	7812      	ldrb	r2, [r2, #0]
 8008dd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	3b01      	subs	r3, #1
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008df2:	e0a4      	b.n	8008f3e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	f003 0302 	and.w	r3, r3, #2
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d134      	bne.n	8008e6c <HAL_SPI_TransmitReceive+0x30a>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d02f      	beq.n	8008e6c <HAL_SPI_TransmitReceive+0x30a>
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d12c      	bne.n	8008e6c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d912      	bls.n	8008e42 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e20:	881a      	ldrh	r2, [r3, #0]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e2c:	1c9a      	adds	r2, r3, #2
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	3b02      	subs	r3, #2
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008e40:	e012      	b.n	8008e68 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	330c      	adds	r3, #12
 8008e4c:	7812      	ldrb	r2, [r2, #0]
 8008e4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e54:	1c5a      	adds	r2, r3, #1
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	3b01      	subs	r3, #1
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d148      	bne.n	8008f0c <HAL_SPI_TransmitReceive+0x3aa>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d042      	beq.n	8008f0c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d923      	bls.n	8008eda <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68da      	ldr	r2, [r3, #12]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e9c:	b292      	uxth	r2, r2
 8008e9e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea4:	1c9a      	adds	r2, r3, #2
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	3b02      	subs	r3, #2
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d81f      	bhi.n	8008f08 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008ed6:	605a      	str	r2, [r3, #4]
 8008ed8:	e016      	b.n	8008f08 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f103 020c 	add.w	r2, r3, #12
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee6:	7812      	ldrb	r2, [r2, #0]
 8008ee8:	b2d2      	uxtb	r2, r2
 8008eea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	3b01      	subs	r3, #1
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008f0c:	f7fb f810 	bl	8003f30 <HAL_GetTick>
 8008f10:	4602      	mov	r2, r0
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d803      	bhi.n	8008f24 <HAL_SPI_TransmitReceive+0x3c2>
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f22:	d102      	bne.n	8008f2a <HAL_SPI_TransmitReceive+0x3c8>
 8008f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d109      	bne.n	8008f3e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	e02c      	b.n	8008f98 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f47f af55 	bne.w	8008df4 <HAL_SPI_TransmitReceive+0x292>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f47f af4e 	bne.w	8008df4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f58:	6a3a      	ldr	r2, [r7, #32]
 8008f5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f000 f94b 	bl	80091f8 <SPI_EndRxTxTransaction>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d008      	beq.n	8008f7a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2220      	movs	r2, #32
 8008f6c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e00e      	b.n	8008f98 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e000      	b.n	8008f98 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8008f96:	2300      	movs	r3, #0
  }
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3728      	adds	r7, #40	@ 0x28
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008fae:	b2db      	uxtb	r3, r3
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b088      	sub	sp, #32
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	603b      	str	r3, [r7, #0]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008fcc:	f7fa ffb0 	bl	8003f30 <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd4:	1a9b      	subs	r3, r3, r2
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	4413      	add	r3, r2
 8008fda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008fdc:	f7fa ffa8 	bl	8003f30 <HAL_GetTick>
 8008fe0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008fe2:	4b39      	ldr	r3, [pc, #228]	@ (80090c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	015b      	lsls	r3, r3, #5
 8008fe8:	0d1b      	lsrs	r3, r3, #20
 8008fea:	69fa      	ldr	r2, [r7, #28]
 8008fec:	fb02 f303 	mul.w	r3, r2, r3
 8008ff0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ff2:	e054      	b.n	800909e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffa:	d050      	beq.n	800909e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ffc:	f7fa ff98 	bl	8003f30 <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	69fa      	ldr	r2, [r7, #28]
 8009008:	429a      	cmp	r2, r3
 800900a:	d902      	bls.n	8009012 <SPI_WaitFlagStateUntilTimeout+0x56>
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d13d      	bne.n	800908e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009020:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800902a:	d111      	bne.n	8009050 <SPI_WaitFlagStateUntilTimeout+0x94>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009034:	d004      	beq.n	8009040 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800903e:	d107      	bne.n	8009050 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800904e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009058:	d10f      	bne.n	800907a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009068:	601a      	str	r2, [r3, #0]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009078:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e017      	b.n	80090be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d101      	bne.n	8009098 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009094:	2300      	movs	r3, #0
 8009096:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	3b01      	subs	r3, #1
 800909c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	689a      	ldr	r2, [r3, #8]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	4013      	ands	r3, r2
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	bf0c      	ite	eq
 80090ae:	2301      	moveq	r3, #1
 80090b0:	2300      	movne	r3, #0
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	461a      	mov	r2, r3
 80090b6:	79fb      	ldrb	r3, [r7, #7]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d19b      	bne.n	8008ff4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3720      	adds	r7, #32
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	20000008 	.word	0x20000008

080090cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b08a      	sub	sp, #40	@ 0x28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
 80090d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80090da:	2300      	movs	r3, #0
 80090dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80090de:	f7fa ff27 	bl	8003f30 <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e6:	1a9b      	subs	r3, r3, r2
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	4413      	add	r3, r2
 80090ec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80090ee:	f7fa ff1f 	bl	8003f30 <HAL_GetTick>
 80090f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	330c      	adds	r3, #12
 80090fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80090fc:	4b3d      	ldr	r3, [pc, #244]	@ (80091f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	4613      	mov	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4413      	add	r3, r2
 8009106:	00da      	lsls	r2, r3, #3
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	0d1b      	lsrs	r3, r3, #20
 800910c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800910e:	fb02 f303 	mul.w	r3, r2, r3
 8009112:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009114:	e060      	b.n	80091d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800911c:	d107      	bne.n	800912e <SPI_WaitFifoStateUntilTimeout+0x62>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d104      	bne.n	800912e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	b2db      	uxtb	r3, r3
 800912a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800912c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009134:	d050      	beq.n	80091d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009136:	f7fa fefb 	bl	8003f30 <HAL_GetTick>
 800913a:	4602      	mov	r2, r0
 800913c:	6a3b      	ldr	r3, [r7, #32]
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009142:	429a      	cmp	r2, r3
 8009144:	d902      	bls.n	800914c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009148:	2b00      	cmp	r3, #0
 800914a:	d13d      	bne.n	80091c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	685a      	ldr	r2, [r3, #4]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800915a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009164:	d111      	bne.n	800918a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800916e:	d004      	beq.n	800917a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009178:	d107      	bne.n	800918a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009188:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800918e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009192:	d10f      	bne.n	80091b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80091b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80091c4:	2303      	movs	r3, #3
 80091c6:	e010      	b.n	80091ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d101      	bne.n	80091d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80091ce:	2300      	movs	r3, #0
 80091d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	3b01      	subs	r3, #1
 80091d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	689a      	ldr	r2, [r3, #8]
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	4013      	ands	r3, r2
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d196      	bne.n	8009116 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3728      	adds	r7, #40	@ 0x28
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	20000008 	.word	0x20000008

080091f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af02      	add	r7, sp, #8
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	2200      	movs	r2, #0
 800920c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f7ff ff5b 	bl	80090cc <SPI_WaitFifoStateUntilTimeout>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d007      	beq.n	800922c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009220:	f043 0220 	orr.w	r2, r3, #32
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	e027      	b.n	800927c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2200      	movs	r2, #0
 8009234:	2180      	movs	r1, #128	@ 0x80
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f7ff fec0 	bl	8008fbc <SPI_WaitFlagStateUntilTimeout>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d007      	beq.n	8009252 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009246:	f043 0220 	orr.w	r2, r3, #32
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800924e:	2303      	movs	r3, #3
 8009250:	e014      	b.n	800927c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	2200      	movs	r2, #0
 800925a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f7ff ff34 	bl	80090cc <SPI_WaitFifoStateUntilTimeout>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d007      	beq.n	800927a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800926e:	f043 0220 	orr.w	r2, r3, #32
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009276:	2303      	movs	r3, #3
 8009278:	e000      	b.n	800927c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d101      	bne.n	8009296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e049      	b.n	800932a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d106      	bne.n	80092b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7f9 fe1e 	bl	8002eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2202      	movs	r2, #2
 80092b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	3304      	adds	r3, #4
 80092c0:	4619      	mov	r1, r3
 80092c2:	4610      	mov	r0, r2
 80092c4:	f000 fe7c 	bl	8009fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
	...

08009334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b01      	cmp	r3, #1
 8009346:	d001      	beq.n	800934c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	e04f      	b.n	80093ec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2202      	movs	r2, #2
 8009350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68da      	ldr	r2, [r3, #12]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f042 0201 	orr.w	r2, r2, #1
 8009362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a23      	ldr	r2, [pc, #140]	@ (80093f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d01d      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x76>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009376:	d018      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x76>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a1f      	ldr	r2, [pc, #124]	@ (80093fc <HAL_TIM_Base_Start_IT+0xc8>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d013      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x76>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a1e      	ldr	r2, [pc, #120]	@ (8009400 <HAL_TIM_Base_Start_IT+0xcc>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d00e      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x76>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a1c      	ldr	r2, [pc, #112]	@ (8009404 <HAL_TIM_Base_Start_IT+0xd0>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d009      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x76>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a1b      	ldr	r2, [pc, #108]	@ (8009408 <HAL_TIM_Base_Start_IT+0xd4>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d004      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x76>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a19      	ldr	r2, [pc, #100]	@ (800940c <HAL_TIM_Base_Start_IT+0xd8>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d115      	bne.n	80093d6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	689a      	ldr	r2, [r3, #8]
 80093b0:	4b17      	ldr	r3, [pc, #92]	@ (8009410 <HAL_TIM_Base_Start_IT+0xdc>)
 80093b2:	4013      	ands	r3, r2
 80093b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2b06      	cmp	r3, #6
 80093ba:	d015      	beq.n	80093e8 <HAL_TIM_Base_Start_IT+0xb4>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093c2:	d011      	beq.n	80093e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f042 0201 	orr.w	r2, r2, #1
 80093d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093d4:	e008      	b.n	80093e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f042 0201 	orr.w	r2, r2, #1
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	e000      	b.n	80093ea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	40012c00 	.word	0x40012c00
 80093fc:	40000400 	.word	0x40000400
 8009400:	40000800 	.word	0x40000800
 8009404:	40000c00 	.word	0x40000c00
 8009408:	40013400 	.word	0x40013400
 800940c:	40014000 	.word	0x40014000
 8009410:	00010007 	.word	0x00010007

08009414 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68da      	ldr	r2, [r3, #12]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0201 	bic.w	r2, r2, #1
 800942a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6a1a      	ldr	r2, [r3, #32]
 8009432:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009436:	4013      	ands	r3, r2
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10f      	bne.n	800945c <HAL_TIM_Base_Stop_IT+0x48>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	6a1a      	ldr	r2, [r3, #32]
 8009442:	f240 4344 	movw	r3, #1092	@ 0x444
 8009446:	4013      	ands	r3, r2
 8009448:	2b00      	cmp	r3, #0
 800944a:	d107      	bne.n	800945c <HAL_TIM_Base_Stop_IT+0x48>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f022 0201 	bic.w	r2, r2, #1
 800945a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	370c      	adds	r7, #12
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr

08009472 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b082      	sub	sp, #8
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d101      	bne.n	8009484 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e049      	b.n	8009518 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2b00      	cmp	r3, #0
 800948e:	d106      	bne.n	800949e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f841 	bl	8009520 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2202      	movs	r2, #2
 80094a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	3304      	adds	r3, #4
 80094ae:	4619      	mov	r1, r3
 80094b0:	4610      	mov	r0, r2
 80094b2:	f000 fd85 	bl	8009fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2201      	movs	r2, #1
 80094c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2201      	movs	r2, #1
 80094ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2201      	movs	r2, #1
 80094da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2201      	movs	r2, #1
 80094fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2201      	movs	r2, #1
 8009502:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2201      	movs	r2, #1
 800950a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2201      	movs	r2, #1
 8009512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d109      	bne.n	800955c <HAL_TIM_PWM_Start_IT+0x28>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800954e:	b2db      	uxtb	r3, r3
 8009550:	2b01      	cmp	r3, #1
 8009552:	bf14      	ite	ne
 8009554:	2301      	movne	r3, #1
 8009556:	2300      	moveq	r3, #0
 8009558:	b2db      	uxtb	r3, r3
 800955a:	e03c      	b.n	80095d6 <HAL_TIM_PWM_Start_IT+0xa2>
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	2b04      	cmp	r3, #4
 8009560:	d109      	bne.n	8009576 <HAL_TIM_PWM_Start_IT+0x42>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009568:	b2db      	uxtb	r3, r3
 800956a:	2b01      	cmp	r3, #1
 800956c:	bf14      	ite	ne
 800956e:	2301      	movne	r3, #1
 8009570:	2300      	moveq	r3, #0
 8009572:	b2db      	uxtb	r3, r3
 8009574:	e02f      	b.n	80095d6 <HAL_TIM_PWM_Start_IT+0xa2>
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	2b08      	cmp	r3, #8
 800957a:	d109      	bne.n	8009590 <HAL_TIM_PWM_Start_IT+0x5c>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b01      	cmp	r3, #1
 8009586:	bf14      	ite	ne
 8009588:	2301      	movne	r3, #1
 800958a:	2300      	moveq	r3, #0
 800958c:	b2db      	uxtb	r3, r3
 800958e:	e022      	b.n	80095d6 <HAL_TIM_PWM_Start_IT+0xa2>
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	2b0c      	cmp	r3, #12
 8009594:	d109      	bne.n	80095aa <HAL_TIM_PWM_Start_IT+0x76>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b01      	cmp	r3, #1
 80095a0:	bf14      	ite	ne
 80095a2:	2301      	movne	r3, #1
 80095a4:	2300      	moveq	r3, #0
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	e015      	b.n	80095d6 <HAL_TIM_PWM_Start_IT+0xa2>
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	2b10      	cmp	r3, #16
 80095ae:	d109      	bne.n	80095c4 <HAL_TIM_PWM_Start_IT+0x90>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	bf14      	ite	ne
 80095bc:	2301      	movne	r3, #1
 80095be:	2300      	moveq	r3, #0
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	e008      	b.n	80095d6 <HAL_TIM_PWM_Start_IT+0xa2>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	bf14      	ite	ne
 80095d0:	2301      	movne	r3, #1
 80095d2:	2300      	moveq	r3, #0
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d001      	beq.n	80095de <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	e0e7      	b.n	80097ae <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d104      	bne.n	80095ee <HAL_TIM_PWM_Start_IT+0xba>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2202      	movs	r2, #2
 80095e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80095ec:	e023      	b.n	8009636 <HAL_TIM_PWM_Start_IT+0x102>
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	2b04      	cmp	r3, #4
 80095f2:	d104      	bne.n	80095fe <HAL_TIM_PWM_Start_IT+0xca>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2202      	movs	r2, #2
 80095f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80095fc:	e01b      	b.n	8009636 <HAL_TIM_PWM_Start_IT+0x102>
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	2b08      	cmp	r3, #8
 8009602:	d104      	bne.n	800960e <HAL_TIM_PWM_Start_IT+0xda>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2202      	movs	r2, #2
 8009608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800960c:	e013      	b.n	8009636 <HAL_TIM_PWM_Start_IT+0x102>
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	2b0c      	cmp	r3, #12
 8009612:	d104      	bne.n	800961e <HAL_TIM_PWM_Start_IT+0xea>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2202      	movs	r2, #2
 8009618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800961c:	e00b      	b.n	8009636 <HAL_TIM_PWM_Start_IT+0x102>
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2b10      	cmp	r3, #16
 8009622:	d104      	bne.n	800962e <HAL_TIM_PWM_Start_IT+0xfa>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2202      	movs	r2, #2
 8009628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800962c:	e003      	b.n	8009636 <HAL_TIM_PWM_Start_IT+0x102>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2202      	movs	r2, #2
 8009632:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	2b0c      	cmp	r3, #12
 800963a:	d841      	bhi.n	80096c0 <HAL_TIM_PWM_Start_IT+0x18c>
 800963c:	a201      	add	r2, pc, #4	@ (adr r2, 8009644 <HAL_TIM_PWM_Start_IT+0x110>)
 800963e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009642:	bf00      	nop
 8009644:	08009679 	.word	0x08009679
 8009648:	080096c1 	.word	0x080096c1
 800964c:	080096c1 	.word	0x080096c1
 8009650:	080096c1 	.word	0x080096c1
 8009654:	0800968b 	.word	0x0800968b
 8009658:	080096c1 	.word	0x080096c1
 800965c:	080096c1 	.word	0x080096c1
 8009660:	080096c1 	.word	0x080096c1
 8009664:	0800969d 	.word	0x0800969d
 8009668:	080096c1 	.word	0x080096c1
 800966c:	080096c1 	.word	0x080096c1
 8009670:	080096c1 	.word	0x080096c1
 8009674:	080096af 	.word	0x080096af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68da      	ldr	r2, [r3, #12]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f042 0202 	orr.w	r2, r2, #2
 8009686:	60da      	str	r2, [r3, #12]
      break;
 8009688:	e01d      	b.n	80096c6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68da      	ldr	r2, [r3, #12]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f042 0204 	orr.w	r2, r2, #4
 8009698:	60da      	str	r2, [r3, #12]
      break;
 800969a:	e014      	b.n	80096c6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68da      	ldr	r2, [r3, #12]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f042 0208 	orr.w	r2, r2, #8
 80096aa:	60da      	str	r2, [r3, #12]
      break;
 80096ac:	e00b      	b.n	80096c6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68da      	ldr	r2, [r3, #12]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f042 0210 	orr.w	r2, r2, #16
 80096bc:	60da      	str	r2, [r3, #12]
      break;
 80096be:	e002      	b.n	80096c6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	73fb      	strb	r3, [r7, #15]
      break;
 80096c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80096c6:	7bfb      	ldrb	r3, [r7, #15]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d16f      	bne.n	80097ac <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2201      	movs	r2, #1
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	4618      	mov	r0, r3
 80096d6:	f001 f889 	bl	800a7ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a36      	ldr	r2, [pc, #216]	@ (80097b8 <HAL_TIM_PWM_Start_IT+0x284>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d013      	beq.n	800970c <HAL_TIM_PWM_Start_IT+0x1d8>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a34      	ldr	r2, [pc, #208]	@ (80097bc <HAL_TIM_PWM_Start_IT+0x288>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d00e      	beq.n	800970c <HAL_TIM_PWM_Start_IT+0x1d8>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a33      	ldr	r2, [pc, #204]	@ (80097c0 <HAL_TIM_PWM_Start_IT+0x28c>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d009      	beq.n	800970c <HAL_TIM_PWM_Start_IT+0x1d8>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a31      	ldr	r2, [pc, #196]	@ (80097c4 <HAL_TIM_PWM_Start_IT+0x290>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d004      	beq.n	800970c <HAL_TIM_PWM_Start_IT+0x1d8>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a30      	ldr	r2, [pc, #192]	@ (80097c8 <HAL_TIM_PWM_Start_IT+0x294>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d101      	bne.n	8009710 <HAL_TIM_PWM_Start_IT+0x1dc>
 800970c:	2301      	movs	r3, #1
 800970e:	e000      	b.n	8009712 <HAL_TIM_PWM_Start_IT+0x1de>
 8009710:	2300      	movs	r3, #0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d007      	beq.n	8009726 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009724:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a23      	ldr	r2, [pc, #140]	@ (80097b8 <HAL_TIM_PWM_Start_IT+0x284>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d01d      	beq.n	800976c <HAL_TIM_PWM_Start_IT+0x238>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009738:	d018      	beq.n	800976c <HAL_TIM_PWM_Start_IT+0x238>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a23      	ldr	r2, [pc, #140]	@ (80097cc <HAL_TIM_PWM_Start_IT+0x298>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d013      	beq.n	800976c <HAL_TIM_PWM_Start_IT+0x238>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a21      	ldr	r2, [pc, #132]	@ (80097d0 <HAL_TIM_PWM_Start_IT+0x29c>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d00e      	beq.n	800976c <HAL_TIM_PWM_Start_IT+0x238>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a20      	ldr	r2, [pc, #128]	@ (80097d4 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d009      	beq.n	800976c <HAL_TIM_PWM_Start_IT+0x238>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a17      	ldr	r2, [pc, #92]	@ (80097bc <HAL_TIM_PWM_Start_IT+0x288>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d004      	beq.n	800976c <HAL_TIM_PWM_Start_IT+0x238>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a16      	ldr	r2, [pc, #88]	@ (80097c0 <HAL_TIM_PWM_Start_IT+0x28c>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d115      	bne.n	8009798 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	689a      	ldr	r2, [r3, #8]
 8009772:	4b19      	ldr	r3, [pc, #100]	@ (80097d8 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8009774:	4013      	ands	r3, r2
 8009776:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	2b06      	cmp	r3, #6
 800977c:	d015      	beq.n	80097aa <HAL_TIM_PWM_Start_IT+0x276>
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009784:	d011      	beq.n	80097aa <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f042 0201 	orr.w	r2, r2, #1
 8009794:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009796:	e008      	b.n	80097aa <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f042 0201 	orr.w	r2, r2, #1
 80097a6:	601a      	str	r2, [r3, #0]
 80097a8:	e000      	b.n	80097ac <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097aa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	40012c00 	.word	0x40012c00
 80097bc:	40013400 	.word	0x40013400
 80097c0:	40014000 	.word	0x40014000
 80097c4:	40014400 	.word	0x40014400
 80097c8:	40014800 	.word	0x40014800
 80097cc:	40000400 	.word	0x40000400
 80097d0:	40000800 	.word	0x40000800
 80097d4:	40000c00 	.word	0x40000c00
 80097d8:	00010007 	.word	0x00010007

080097dc <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	2b0c      	cmp	r3, #12
 80097ee:	d841      	bhi.n	8009874 <HAL_TIM_PWM_Stop_IT+0x98>
 80097f0:	a201      	add	r2, pc, #4	@ (adr r2, 80097f8 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80097f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f6:	bf00      	nop
 80097f8:	0800982d 	.word	0x0800982d
 80097fc:	08009875 	.word	0x08009875
 8009800:	08009875 	.word	0x08009875
 8009804:	08009875 	.word	0x08009875
 8009808:	0800983f 	.word	0x0800983f
 800980c:	08009875 	.word	0x08009875
 8009810:	08009875 	.word	0x08009875
 8009814:	08009875 	.word	0x08009875
 8009818:	08009851 	.word	0x08009851
 800981c:	08009875 	.word	0x08009875
 8009820:	08009875 	.word	0x08009875
 8009824:	08009875 	.word	0x08009875
 8009828:	08009863 	.word	0x08009863
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68da      	ldr	r2, [r3, #12]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f022 0202 	bic.w	r2, r2, #2
 800983a:	60da      	str	r2, [r3, #12]
      break;
 800983c:	e01d      	b.n	800987a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68da      	ldr	r2, [r3, #12]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f022 0204 	bic.w	r2, r2, #4
 800984c:	60da      	str	r2, [r3, #12]
      break;
 800984e:	e014      	b.n	800987a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68da      	ldr	r2, [r3, #12]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f022 0208 	bic.w	r2, r2, #8
 800985e:	60da      	str	r2, [r3, #12]
      break;
 8009860:	e00b      	b.n	800987a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68da      	ldr	r2, [r3, #12]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f022 0210 	bic.w	r2, r2, #16
 8009870:	60da      	str	r2, [r3, #12]
      break;
 8009872:	e002      	b.n	800987a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	73fb      	strb	r3, [r7, #15]
      break;
 8009878:	bf00      	nop
  }

  if (status == HAL_OK)
 800987a:	7bfb      	ldrb	r3, [r7, #15]
 800987c:	2b00      	cmp	r3, #0
 800987e:	f040 8081 	bne.w	8009984 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2200      	movs	r2, #0
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	4618      	mov	r0, r3
 800988c:	f000 ffae 	bl	800a7ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a3e      	ldr	r2, [pc, #248]	@ (8009990 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d013      	beq.n	80098c2 <HAL_TIM_PWM_Stop_IT+0xe6>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a3d      	ldr	r2, [pc, #244]	@ (8009994 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d00e      	beq.n	80098c2 <HAL_TIM_PWM_Stop_IT+0xe6>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a3b      	ldr	r2, [pc, #236]	@ (8009998 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d009      	beq.n	80098c2 <HAL_TIM_PWM_Stop_IT+0xe6>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a3a      	ldr	r2, [pc, #232]	@ (800999c <HAL_TIM_PWM_Stop_IT+0x1c0>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d004      	beq.n	80098c2 <HAL_TIM_PWM_Stop_IT+0xe6>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a38      	ldr	r2, [pc, #224]	@ (80099a0 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d101      	bne.n	80098c6 <HAL_TIM_PWM_Stop_IT+0xea>
 80098c2:	2301      	movs	r3, #1
 80098c4:	e000      	b.n	80098c8 <HAL_TIM_PWM_Stop_IT+0xec>
 80098c6:	2300      	movs	r3, #0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d017      	beq.n	80098fc <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6a1a      	ldr	r2, [r3, #32]
 80098d2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80098d6:	4013      	ands	r3, r2
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d10f      	bne.n	80098fc <HAL_TIM_PWM_Stop_IT+0x120>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6a1a      	ldr	r2, [r3, #32]
 80098e2:	f240 4344 	movw	r3, #1092	@ 0x444
 80098e6:	4013      	ands	r3, r2
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d107      	bne.n	80098fc <HAL_TIM_PWM_Stop_IT+0x120>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80098fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	6a1a      	ldr	r2, [r3, #32]
 8009902:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009906:	4013      	ands	r3, r2
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10f      	bne.n	800992c <HAL_TIM_PWM_Stop_IT+0x150>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	6a1a      	ldr	r2, [r3, #32]
 8009912:	f240 4344 	movw	r3, #1092	@ 0x444
 8009916:	4013      	ands	r3, r2
 8009918:	2b00      	cmp	r3, #0
 800991a:	d107      	bne.n	800992c <HAL_TIM_PWM_Stop_IT+0x150>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f022 0201 	bic.w	r2, r2, #1
 800992a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d104      	bne.n	800993c <HAL_TIM_PWM_Stop_IT+0x160>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800993a:	e023      	b.n	8009984 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	2b04      	cmp	r3, #4
 8009940:	d104      	bne.n	800994c <HAL_TIM_PWM_Stop_IT+0x170>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800994a:	e01b      	b.n	8009984 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	2b08      	cmp	r3, #8
 8009950:	d104      	bne.n	800995c <HAL_TIM_PWM_Stop_IT+0x180>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800995a:	e013      	b.n	8009984 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	2b0c      	cmp	r3, #12
 8009960:	d104      	bne.n	800996c <HAL_TIM_PWM_Stop_IT+0x190>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2201      	movs	r2, #1
 8009966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800996a:	e00b      	b.n	8009984 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	2b10      	cmp	r3, #16
 8009970:	d104      	bne.n	800997c <HAL_TIM_PWM_Stop_IT+0x1a0>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800997a:	e003      	b.n	8009984 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8009984:	7bfb      	ldrb	r3, [r7, #15]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	40012c00 	.word	0x40012c00
 8009994:	40013400 	.word	0x40013400
 8009998:	40014000 	.word	0x40014000
 800999c:	40014400 	.word	0x40014400
 80099a0:	40014800 	.word	0x40014800

080099a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	f003 0302 	and.w	r3, r3, #2
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d020      	beq.n	8009a08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f003 0302 	and.w	r3, r3, #2
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d01b      	beq.n	8009a08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f06f 0202 	mvn.w	r2, #2
 80099d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	699b      	ldr	r3, [r3, #24]
 80099e6:	f003 0303 	and.w	r3, r3, #3
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d003      	beq.n	80099f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fac7 	bl	8009f82 <HAL_TIM_IC_CaptureCallback>
 80099f4:	e005      	b.n	8009a02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 fab9 	bl	8009f6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 faca 	bl	8009f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	f003 0304 	and.w	r3, r3, #4
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d020      	beq.n	8009a54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f003 0304 	and.w	r3, r3, #4
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d01b      	beq.n	8009a54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f06f 0204 	mvn.w	r2, #4
 8009a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2202      	movs	r2, #2
 8009a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d003      	beq.n	8009a42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 faa1 	bl	8009f82 <HAL_TIM_IC_CaptureCallback>
 8009a40:	e005      	b.n	8009a4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fa93 	bl	8009f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 faa4 	bl	8009f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	f003 0308 	and.w	r3, r3, #8
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d020      	beq.n	8009aa0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f003 0308 	and.w	r3, r3, #8
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d01b      	beq.n	8009aa0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f06f 0208 	mvn.w	r2, #8
 8009a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2204      	movs	r2, #4
 8009a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	69db      	ldr	r3, [r3, #28]
 8009a7e:	f003 0303 	and.w	r3, r3, #3
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d003      	beq.n	8009a8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 fa7b 	bl	8009f82 <HAL_TIM_IC_CaptureCallback>
 8009a8c:	e005      	b.n	8009a9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fa6d 	bl	8009f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fa7e 	bl	8009f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	f003 0310 	and.w	r3, r3, #16
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d020      	beq.n	8009aec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f003 0310 	and.w	r3, r3, #16
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d01b      	beq.n	8009aec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f06f 0210 	mvn.w	r2, #16
 8009abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2208      	movs	r2, #8
 8009ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	69db      	ldr	r3, [r3, #28]
 8009aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d003      	beq.n	8009ada <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 fa55 	bl	8009f82 <HAL_TIM_IC_CaptureCallback>
 8009ad8:	e005      	b.n	8009ae6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fa47 	bl	8009f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fa58 	bl	8009f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00c      	beq.n	8009b10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f003 0301 	and.w	r3, r3, #1
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d007      	beq.n	8009b10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f06f 0201 	mvn.w	r2, #1
 8009b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7f8 fcea 	bl	80024e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d104      	bne.n	8009b24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00c      	beq.n	8009b3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d007      	beq.n	8009b3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 ff0f 	bl	800a95c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00c      	beq.n	8009b62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d007      	beq.n	8009b62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 ff07 	bl	800a970 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00c      	beq.n	8009b86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d007      	beq.n	8009b86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fa12 	bl	8009faa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	f003 0320 	and.w	r3, r3, #32
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00c      	beq.n	8009baa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f003 0320 	and.w	r3, r3, #32
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d007      	beq.n	8009baa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f06f 0220 	mvn.w	r2, #32
 8009ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 fecf 	bl	800a948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009baa:	bf00      	nop
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
	...

08009bb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d101      	bne.n	8009bd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009bce:	2302      	movs	r3, #2
 8009bd0:	e0ff      	b.n	8009dd2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2b14      	cmp	r3, #20
 8009bde:	f200 80f0 	bhi.w	8009dc2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009be2:	a201      	add	r2, pc, #4	@ (adr r2, 8009be8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be8:	08009c3d 	.word	0x08009c3d
 8009bec:	08009dc3 	.word	0x08009dc3
 8009bf0:	08009dc3 	.word	0x08009dc3
 8009bf4:	08009dc3 	.word	0x08009dc3
 8009bf8:	08009c7d 	.word	0x08009c7d
 8009bfc:	08009dc3 	.word	0x08009dc3
 8009c00:	08009dc3 	.word	0x08009dc3
 8009c04:	08009dc3 	.word	0x08009dc3
 8009c08:	08009cbf 	.word	0x08009cbf
 8009c0c:	08009dc3 	.word	0x08009dc3
 8009c10:	08009dc3 	.word	0x08009dc3
 8009c14:	08009dc3 	.word	0x08009dc3
 8009c18:	08009cff 	.word	0x08009cff
 8009c1c:	08009dc3 	.word	0x08009dc3
 8009c20:	08009dc3 	.word	0x08009dc3
 8009c24:	08009dc3 	.word	0x08009dc3
 8009c28:	08009d41 	.word	0x08009d41
 8009c2c:	08009dc3 	.word	0x08009dc3
 8009c30:	08009dc3 	.word	0x08009dc3
 8009c34:	08009dc3 	.word	0x08009dc3
 8009c38:	08009d81 	.word	0x08009d81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68b9      	ldr	r1, [r7, #8]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 fa62 	bl	800a10c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	699a      	ldr	r2, [r3, #24]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f042 0208 	orr.w	r2, r2, #8
 8009c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	699a      	ldr	r2, [r3, #24]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f022 0204 	bic.w	r2, r2, #4
 8009c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	6999      	ldr	r1, [r3, #24]
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	691a      	ldr	r2, [r3, #16]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	430a      	orrs	r2, r1
 8009c78:	619a      	str	r2, [r3, #24]
      break;
 8009c7a:	e0a5      	b.n	8009dc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	68b9      	ldr	r1, [r7, #8]
 8009c82:	4618      	mov	r0, r3
 8009c84:	f000 fad2 	bl	800a22c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	699a      	ldr	r2, [r3, #24]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	699a      	ldr	r2, [r3, #24]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	6999      	ldr	r1, [r3, #24]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	021a      	lsls	r2, r3, #8
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	430a      	orrs	r2, r1
 8009cba:	619a      	str	r2, [r3, #24]
      break;
 8009cbc:	e084      	b.n	8009dc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	68b9      	ldr	r1, [r7, #8]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f000 fb3b 	bl	800a340 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	69da      	ldr	r2, [r3, #28]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f042 0208 	orr.w	r2, r2, #8
 8009cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	69da      	ldr	r2, [r3, #28]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f022 0204 	bic.w	r2, r2, #4
 8009ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	69d9      	ldr	r1, [r3, #28]
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	691a      	ldr	r2, [r3, #16]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	430a      	orrs	r2, r1
 8009cfa:	61da      	str	r2, [r3, #28]
      break;
 8009cfc:	e064      	b.n	8009dc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68b9      	ldr	r1, [r7, #8]
 8009d04:	4618      	mov	r0, r3
 8009d06:	f000 fba3 	bl	800a450 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	69da      	ldr	r2, [r3, #28]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	69da      	ldr	r2, [r3, #28]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	69d9      	ldr	r1, [r3, #28]
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	021a      	lsls	r2, r3, #8
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	430a      	orrs	r2, r1
 8009d3c:	61da      	str	r2, [r3, #28]
      break;
 8009d3e:	e043      	b.n	8009dc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68b9      	ldr	r1, [r7, #8]
 8009d46:	4618      	mov	r0, r3
 8009d48:	f000 fbec 	bl	800a524 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f042 0208 	orr.w	r2, r2, #8
 8009d5a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f022 0204 	bic.w	r2, r2, #4
 8009d6a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	691a      	ldr	r2, [r3, #16]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009d7e:	e023      	b.n	8009dc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68b9      	ldr	r1, [r7, #8]
 8009d86:	4618      	mov	r0, r3
 8009d88:	f000 fc30 	bl	800a5ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009daa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	021a      	lsls	r2, r3, #8
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	430a      	orrs	r2, r1
 8009dbe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009dc0:	e002      	b.n	8009dc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8009dc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3718      	adds	r7, #24
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop

08009ddc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d101      	bne.n	8009df8 <HAL_TIM_ConfigClockSource+0x1c>
 8009df4:	2302      	movs	r3, #2
 8009df6:	e0b6      	b.n	8009f66 <HAL_TIM_ConfigClockSource+0x18a>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2202      	movs	r2, #2
 8009e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009e1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e34:	d03e      	beq.n	8009eb4 <HAL_TIM_ConfigClockSource+0xd8>
 8009e36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e3a:	f200 8087 	bhi.w	8009f4c <HAL_TIM_ConfigClockSource+0x170>
 8009e3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e42:	f000 8086 	beq.w	8009f52 <HAL_TIM_ConfigClockSource+0x176>
 8009e46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e4a:	d87f      	bhi.n	8009f4c <HAL_TIM_ConfigClockSource+0x170>
 8009e4c:	2b70      	cmp	r3, #112	@ 0x70
 8009e4e:	d01a      	beq.n	8009e86 <HAL_TIM_ConfigClockSource+0xaa>
 8009e50:	2b70      	cmp	r3, #112	@ 0x70
 8009e52:	d87b      	bhi.n	8009f4c <HAL_TIM_ConfigClockSource+0x170>
 8009e54:	2b60      	cmp	r3, #96	@ 0x60
 8009e56:	d050      	beq.n	8009efa <HAL_TIM_ConfigClockSource+0x11e>
 8009e58:	2b60      	cmp	r3, #96	@ 0x60
 8009e5a:	d877      	bhi.n	8009f4c <HAL_TIM_ConfigClockSource+0x170>
 8009e5c:	2b50      	cmp	r3, #80	@ 0x50
 8009e5e:	d03c      	beq.n	8009eda <HAL_TIM_ConfigClockSource+0xfe>
 8009e60:	2b50      	cmp	r3, #80	@ 0x50
 8009e62:	d873      	bhi.n	8009f4c <HAL_TIM_ConfigClockSource+0x170>
 8009e64:	2b40      	cmp	r3, #64	@ 0x40
 8009e66:	d058      	beq.n	8009f1a <HAL_TIM_ConfigClockSource+0x13e>
 8009e68:	2b40      	cmp	r3, #64	@ 0x40
 8009e6a:	d86f      	bhi.n	8009f4c <HAL_TIM_ConfigClockSource+0x170>
 8009e6c:	2b30      	cmp	r3, #48	@ 0x30
 8009e6e:	d064      	beq.n	8009f3a <HAL_TIM_ConfigClockSource+0x15e>
 8009e70:	2b30      	cmp	r3, #48	@ 0x30
 8009e72:	d86b      	bhi.n	8009f4c <HAL_TIM_ConfigClockSource+0x170>
 8009e74:	2b20      	cmp	r3, #32
 8009e76:	d060      	beq.n	8009f3a <HAL_TIM_ConfigClockSource+0x15e>
 8009e78:	2b20      	cmp	r3, #32
 8009e7a:	d867      	bhi.n	8009f4c <HAL_TIM_ConfigClockSource+0x170>
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d05c      	beq.n	8009f3a <HAL_TIM_ConfigClockSource+0x15e>
 8009e80:	2b10      	cmp	r3, #16
 8009e82:	d05a      	beq.n	8009f3a <HAL_TIM_ConfigClockSource+0x15e>
 8009e84:	e062      	b.n	8009f4c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e96:	f000 fc89 	bl	800a7ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009ea8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	68ba      	ldr	r2, [r7, #8]
 8009eb0:	609a      	str	r2, [r3, #8]
      break;
 8009eb2:	e04f      	b.n	8009f54 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009ec4:	f000 fc72 	bl	800a7ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	689a      	ldr	r2, [r3, #8]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009ed6:	609a      	str	r2, [r3, #8]
      break;
 8009ed8:	e03c      	b.n	8009f54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	f000 fbe6 	bl	800a6b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2150      	movs	r1, #80	@ 0x50
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f000 fc3f 	bl	800a776 <TIM_ITRx_SetConfig>
      break;
 8009ef8:	e02c      	b.n	8009f54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f06:	461a      	mov	r2, r3
 8009f08:	f000 fc05 	bl	800a716 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2160      	movs	r1, #96	@ 0x60
 8009f12:	4618      	mov	r0, r3
 8009f14:	f000 fc2f 	bl	800a776 <TIM_ITRx_SetConfig>
      break;
 8009f18:	e01c      	b.n	8009f54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f26:	461a      	mov	r2, r3
 8009f28:	f000 fbc6 	bl	800a6b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2140      	movs	r1, #64	@ 0x40
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 fc1f 	bl	800a776 <TIM_ITRx_SetConfig>
      break;
 8009f38:	e00c      	b.n	8009f54 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4619      	mov	r1, r3
 8009f44:	4610      	mov	r0, r2
 8009f46:	f000 fc16 	bl	800a776 <TIM_ITRx_SetConfig>
      break;
 8009f4a:	e003      	b.n	8009f54 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f50:	e000      	b.n	8009f54 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009f52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f6e:	b480      	push	{r7}
 8009f70:	b083      	sub	sp, #12
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f76:	bf00      	nop
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr

08009f82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f82:	b480      	push	{r7}
 8009f84:	b083      	sub	sp, #12
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f8a:	bf00      	nop
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f96:	b480      	push	{r7}
 8009f98:	b083      	sub	sp, #12
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f9e:	bf00      	nop
 8009fa0:	370c      	adds	r7, #12
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009faa:	b480      	push	{r7}
 8009fac:	b083      	sub	sp, #12
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009fb2:	bf00      	nop
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
	...

08009fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a46      	ldr	r2, [pc, #280]	@ (800a0ec <TIM_Base_SetConfig+0x12c>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d013      	beq.n	800a000 <TIM_Base_SetConfig+0x40>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fde:	d00f      	beq.n	800a000 <TIM_Base_SetConfig+0x40>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a43      	ldr	r2, [pc, #268]	@ (800a0f0 <TIM_Base_SetConfig+0x130>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d00b      	beq.n	800a000 <TIM_Base_SetConfig+0x40>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a42      	ldr	r2, [pc, #264]	@ (800a0f4 <TIM_Base_SetConfig+0x134>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d007      	beq.n	800a000 <TIM_Base_SetConfig+0x40>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a41      	ldr	r2, [pc, #260]	@ (800a0f8 <TIM_Base_SetConfig+0x138>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d003      	beq.n	800a000 <TIM_Base_SetConfig+0x40>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a40      	ldr	r2, [pc, #256]	@ (800a0fc <TIM_Base_SetConfig+0x13c>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d108      	bne.n	800a012 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	4313      	orrs	r3, r2
 800a010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a35      	ldr	r2, [pc, #212]	@ (800a0ec <TIM_Base_SetConfig+0x12c>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d01f      	beq.n	800a05a <TIM_Base_SetConfig+0x9a>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a020:	d01b      	beq.n	800a05a <TIM_Base_SetConfig+0x9a>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a32      	ldr	r2, [pc, #200]	@ (800a0f0 <TIM_Base_SetConfig+0x130>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d017      	beq.n	800a05a <TIM_Base_SetConfig+0x9a>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4a31      	ldr	r2, [pc, #196]	@ (800a0f4 <TIM_Base_SetConfig+0x134>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d013      	beq.n	800a05a <TIM_Base_SetConfig+0x9a>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a30      	ldr	r2, [pc, #192]	@ (800a0f8 <TIM_Base_SetConfig+0x138>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d00f      	beq.n	800a05a <TIM_Base_SetConfig+0x9a>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4a2f      	ldr	r2, [pc, #188]	@ (800a0fc <TIM_Base_SetConfig+0x13c>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d00b      	beq.n	800a05a <TIM_Base_SetConfig+0x9a>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a2e      	ldr	r2, [pc, #184]	@ (800a100 <TIM_Base_SetConfig+0x140>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d007      	beq.n	800a05a <TIM_Base_SetConfig+0x9a>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a2d      	ldr	r2, [pc, #180]	@ (800a104 <TIM_Base_SetConfig+0x144>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d003      	beq.n	800a05a <TIM_Base_SetConfig+0x9a>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a2c      	ldr	r2, [pc, #176]	@ (800a108 <TIM_Base_SetConfig+0x148>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d108      	bne.n	800a06c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	68fa      	ldr	r2, [r7, #12]
 800a068:	4313      	orrs	r3, r2
 800a06a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	695b      	ldr	r3, [r3, #20]
 800a076:	4313      	orrs	r3, r2
 800a078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	689a      	ldr	r2, [r3, #8]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a16      	ldr	r2, [pc, #88]	@ (800a0ec <TIM_Base_SetConfig+0x12c>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d00f      	beq.n	800a0b8 <TIM_Base_SetConfig+0xf8>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a18      	ldr	r2, [pc, #96]	@ (800a0fc <TIM_Base_SetConfig+0x13c>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d00b      	beq.n	800a0b8 <TIM_Base_SetConfig+0xf8>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a17      	ldr	r2, [pc, #92]	@ (800a100 <TIM_Base_SetConfig+0x140>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d007      	beq.n	800a0b8 <TIM_Base_SetConfig+0xf8>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a16      	ldr	r2, [pc, #88]	@ (800a104 <TIM_Base_SetConfig+0x144>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d003      	beq.n	800a0b8 <TIM_Base_SetConfig+0xf8>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a15      	ldr	r2, [pc, #84]	@ (800a108 <TIM_Base_SetConfig+0x148>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d103      	bne.n	800a0c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	691a      	ldr	r2, [r3, #16]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	f003 0301 	and.w	r3, r3, #1
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d105      	bne.n	800a0de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	f023 0201 	bic.w	r2, r3, #1
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	611a      	str	r2, [r3, #16]
  }
}
 800a0de:	bf00      	nop
 800a0e0:	3714      	adds	r7, #20
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	40012c00 	.word	0x40012c00
 800a0f0:	40000400 	.word	0x40000400
 800a0f4:	40000800 	.word	0x40000800
 800a0f8:	40000c00 	.word	0x40000c00
 800a0fc:	40013400 	.word	0x40013400
 800a100:	40014000 	.word	0x40014000
 800a104:	40014400 	.word	0x40014400
 800a108:	40014800 	.word	0x40014800

0800a10c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b087      	sub	sp, #28
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a1b      	ldr	r3, [r3, #32]
 800a120:	f023 0201 	bic.w	r2, r3, #1
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	699b      	ldr	r3, [r3, #24]
 800a132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a13a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a13e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f023 0303 	bic.w	r3, r3, #3
 800a146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	4313      	orrs	r3, r2
 800a150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f023 0302 	bic.w	r3, r3, #2
 800a158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	4313      	orrs	r3, r2
 800a162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a2c      	ldr	r2, [pc, #176]	@ (800a218 <TIM_OC1_SetConfig+0x10c>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d00f      	beq.n	800a18c <TIM_OC1_SetConfig+0x80>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a2b      	ldr	r2, [pc, #172]	@ (800a21c <TIM_OC1_SetConfig+0x110>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d00b      	beq.n	800a18c <TIM_OC1_SetConfig+0x80>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a2a      	ldr	r2, [pc, #168]	@ (800a220 <TIM_OC1_SetConfig+0x114>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d007      	beq.n	800a18c <TIM_OC1_SetConfig+0x80>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a29      	ldr	r2, [pc, #164]	@ (800a224 <TIM_OC1_SetConfig+0x118>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d003      	beq.n	800a18c <TIM_OC1_SetConfig+0x80>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a28      	ldr	r2, [pc, #160]	@ (800a228 <TIM_OC1_SetConfig+0x11c>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d10c      	bne.n	800a1a6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	f023 0308 	bic.w	r3, r3, #8
 800a192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	697a      	ldr	r2, [r7, #20]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	f023 0304 	bic.w	r3, r3, #4
 800a1a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a1b      	ldr	r2, [pc, #108]	@ (800a218 <TIM_OC1_SetConfig+0x10c>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d00f      	beq.n	800a1ce <TIM_OC1_SetConfig+0xc2>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a1a      	ldr	r2, [pc, #104]	@ (800a21c <TIM_OC1_SetConfig+0x110>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d00b      	beq.n	800a1ce <TIM_OC1_SetConfig+0xc2>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a19      	ldr	r2, [pc, #100]	@ (800a220 <TIM_OC1_SetConfig+0x114>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d007      	beq.n	800a1ce <TIM_OC1_SetConfig+0xc2>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a18      	ldr	r2, [pc, #96]	@ (800a224 <TIM_OC1_SetConfig+0x118>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d003      	beq.n	800a1ce <TIM_OC1_SetConfig+0xc2>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a17      	ldr	r2, [pc, #92]	@ (800a228 <TIM_OC1_SetConfig+0x11c>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d111      	bne.n	800a1f2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a1dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	685a      	ldr	r2, [r3, #4]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	697a      	ldr	r2, [r7, #20]
 800a20a:	621a      	str	r2, [r3, #32]
}
 800a20c:	bf00      	nop
 800a20e:	371c      	adds	r7, #28
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	40012c00 	.word	0x40012c00
 800a21c:	40013400 	.word	0x40013400
 800a220:	40014000 	.word	0x40014000
 800a224:	40014400 	.word	0x40014400
 800a228:	40014800 	.word	0x40014800

0800a22c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b087      	sub	sp, #28
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a1b      	ldr	r3, [r3, #32]
 800a240:	f023 0210 	bic.w	r2, r3, #16
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a25a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a25e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	021b      	lsls	r3, r3, #8
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	4313      	orrs	r3, r2
 800a272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	f023 0320 	bic.w	r3, r3, #32
 800a27a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	011b      	lsls	r3, r3, #4
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	4313      	orrs	r3, r2
 800a286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4a28      	ldr	r2, [pc, #160]	@ (800a32c <TIM_OC2_SetConfig+0x100>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d003      	beq.n	800a298 <TIM_OC2_SetConfig+0x6c>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4a27      	ldr	r2, [pc, #156]	@ (800a330 <TIM_OC2_SetConfig+0x104>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d10d      	bne.n	800a2b4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a29e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	011b      	lsls	r3, r3, #4
 800a2a6:	697a      	ldr	r2, [r7, #20]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a1d      	ldr	r2, [pc, #116]	@ (800a32c <TIM_OC2_SetConfig+0x100>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d00f      	beq.n	800a2dc <TIM_OC2_SetConfig+0xb0>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4a1c      	ldr	r2, [pc, #112]	@ (800a330 <TIM_OC2_SetConfig+0x104>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d00b      	beq.n	800a2dc <TIM_OC2_SetConfig+0xb0>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a1b      	ldr	r2, [pc, #108]	@ (800a334 <TIM_OC2_SetConfig+0x108>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d007      	beq.n	800a2dc <TIM_OC2_SetConfig+0xb0>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	4a1a      	ldr	r2, [pc, #104]	@ (800a338 <TIM_OC2_SetConfig+0x10c>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d003      	beq.n	800a2dc <TIM_OC2_SetConfig+0xb0>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	4a19      	ldr	r2, [pc, #100]	@ (800a33c <TIM_OC2_SetConfig+0x110>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d113      	bne.n	800a304 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a2e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a2ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	693a      	ldr	r2, [r7, #16]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	693a      	ldr	r2, [r7, #16]
 800a300:	4313      	orrs	r3, r2
 800a302:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	693a      	ldr	r2, [r7, #16]
 800a308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	685a      	ldr	r2, [r3, #4]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	697a      	ldr	r2, [r7, #20]
 800a31c:	621a      	str	r2, [r3, #32]
}
 800a31e:	bf00      	nop
 800a320:	371c      	adds	r7, #28
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	40012c00 	.word	0x40012c00
 800a330:	40013400 	.word	0x40013400
 800a334:	40014000 	.word	0x40014000
 800a338:	40014400 	.word	0x40014400
 800a33c:	40014800 	.word	0x40014800

0800a340 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a340:	b480      	push	{r7}
 800a342:	b087      	sub	sp, #28
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	69db      	ldr	r3, [r3, #28]
 800a366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a36e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f023 0303 	bic.w	r3, r3, #3
 800a37a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	4313      	orrs	r3, r2
 800a384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a38c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	021b      	lsls	r3, r3, #8
 800a394:	697a      	ldr	r2, [r7, #20]
 800a396:	4313      	orrs	r3, r2
 800a398:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4a27      	ldr	r2, [pc, #156]	@ (800a43c <TIM_OC3_SetConfig+0xfc>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d003      	beq.n	800a3aa <TIM_OC3_SetConfig+0x6a>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4a26      	ldr	r2, [pc, #152]	@ (800a440 <TIM_OC3_SetConfig+0x100>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d10d      	bne.n	800a3c6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a3b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	021b      	lsls	r3, r3, #8
 800a3b8:	697a      	ldr	r2, [r7, #20]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a3c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4a1c      	ldr	r2, [pc, #112]	@ (800a43c <TIM_OC3_SetConfig+0xfc>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d00f      	beq.n	800a3ee <TIM_OC3_SetConfig+0xae>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	4a1b      	ldr	r2, [pc, #108]	@ (800a440 <TIM_OC3_SetConfig+0x100>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d00b      	beq.n	800a3ee <TIM_OC3_SetConfig+0xae>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a1a      	ldr	r2, [pc, #104]	@ (800a444 <TIM_OC3_SetConfig+0x104>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d007      	beq.n	800a3ee <TIM_OC3_SetConfig+0xae>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a19      	ldr	r2, [pc, #100]	@ (800a448 <TIM_OC3_SetConfig+0x108>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d003      	beq.n	800a3ee <TIM_OC3_SetConfig+0xae>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a18      	ldr	r2, [pc, #96]	@ (800a44c <TIM_OC3_SetConfig+0x10c>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d113      	bne.n	800a416 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a3f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a3fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	695b      	ldr	r3, [r3, #20]
 800a402:	011b      	lsls	r3, r3, #4
 800a404:	693a      	ldr	r2, [r7, #16]
 800a406:	4313      	orrs	r3, r2
 800a408:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	011b      	lsls	r3, r3, #4
 800a410:	693a      	ldr	r2, [r7, #16]
 800a412:	4313      	orrs	r3, r2
 800a414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	685a      	ldr	r2, [r3, #4]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	621a      	str	r2, [r3, #32]
}
 800a430:	bf00      	nop
 800a432:	371c      	adds	r7, #28
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr
 800a43c:	40012c00 	.word	0x40012c00
 800a440:	40013400 	.word	0x40013400
 800a444:	40014000 	.word	0x40014000
 800a448:	40014400 	.word	0x40014400
 800a44c:	40014800 	.word	0x40014800

0800a450 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a450:	b480      	push	{r7}
 800a452:	b087      	sub	sp, #28
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a1b      	ldr	r3, [r3, #32]
 800a45e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a1b      	ldr	r3, [r3, #32]
 800a464:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a47e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a48a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	021b      	lsls	r3, r3, #8
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	4313      	orrs	r3, r2
 800a496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a49e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	031b      	lsls	r3, r3, #12
 800a4a6:	693a      	ldr	r2, [r7, #16]
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a18      	ldr	r2, [pc, #96]	@ (800a510 <TIM_OC4_SetConfig+0xc0>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d00f      	beq.n	800a4d4 <TIM_OC4_SetConfig+0x84>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4a17      	ldr	r2, [pc, #92]	@ (800a514 <TIM_OC4_SetConfig+0xc4>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d00b      	beq.n	800a4d4 <TIM_OC4_SetConfig+0x84>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4a16      	ldr	r2, [pc, #88]	@ (800a518 <TIM_OC4_SetConfig+0xc8>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d007      	beq.n	800a4d4 <TIM_OC4_SetConfig+0x84>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a15      	ldr	r2, [pc, #84]	@ (800a51c <TIM_OC4_SetConfig+0xcc>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d003      	beq.n	800a4d4 <TIM_OC4_SetConfig+0x84>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	4a14      	ldr	r2, [pc, #80]	@ (800a520 <TIM_OC4_SetConfig+0xd0>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d109      	bne.n	800a4e8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a4da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	695b      	ldr	r3, [r3, #20]
 800a4e0:	019b      	lsls	r3, r3, #6
 800a4e2:	697a      	ldr	r2, [r7, #20]
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	685a      	ldr	r2, [r3, #4]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	693a      	ldr	r2, [r7, #16]
 800a500:	621a      	str	r2, [r3, #32]
}
 800a502:	bf00      	nop
 800a504:	371c      	adds	r7, #28
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop
 800a510:	40012c00 	.word	0x40012c00
 800a514:	40013400 	.word	0x40013400
 800a518:	40014000 	.word	0x40014000
 800a51c:	40014400 	.word	0x40014400
 800a520:	40014800 	.word	0x40014800

0800a524 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a524:	b480      	push	{r7}
 800a526:	b087      	sub	sp, #28
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a1b      	ldr	r3, [r3, #32]
 800a532:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6a1b      	ldr	r3, [r3, #32]
 800a538:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	4313      	orrs	r3, r2
 800a560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a568:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	041b      	lsls	r3, r3, #16
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	4313      	orrs	r3, r2
 800a574:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4a17      	ldr	r2, [pc, #92]	@ (800a5d8 <TIM_OC5_SetConfig+0xb4>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d00f      	beq.n	800a59e <TIM_OC5_SetConfig+0x7a>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4a16      	ldr	r2, [pc, #88]	@ (800a5dc <TIM_OC5_SetConfig+0xb8>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d00b      	beq.n	800a59e <TIM_OC5_SetConfig+0x7a>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a15      	ldr	r2, [pc, #84]	@ (800a5e0 <TIM_OC5_SetConfig+0xbc>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d007      	beq.n	800a59e <TIM_OC5_SetConfig+0x7a>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a14      	ldr	r2, [pc, #80]	@ (800a5e4 <TIM_OC5_SetConfig+0xc0>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d003      	beq.n	800a59e <TIM_OC5_SetConfig+0x7a>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a13      	ldr	r2, [pc, #76]	@ (800a5e8 <TIM_OC5_SetConfig+0xc4>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d109      	bne.n	800a5b2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	695b      	ldr	r3, [r3, #20]
 800a5aa:	021b      	lsls	r3, r3, #8
 800a5ac:	697a      	ldr	r2, [r7, #20]
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	697a      	ldr	r2, [r7, #20]
 800a5b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	685a      	ldr	r2, [r3, #4]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	693a      	ldr	r2, [r7, #16]
 800a5ca:	621a      	str	r2, [r3, #32]
}
 800a5cc:	bf00      	nop
 800a5ce:	371c      	adds	r7, #28
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr
 800a5d8:	40012c00 	.word	0x40012c00
 800a5dc:	40013400 	.word	0x40013400
 800a5e0:	40014000 	.word	0x40014000
 800a5e4:	40014400 	.word	0x40014400
 800a5e8:	40014800 	.word	0x40014800

0800a5ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b087      	sub	sp, #28
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a1b      	ldr	r3, [r3, #32]
 800a5fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a1b      	ldr	r3, [r3, #32]
 800a600:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a61a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a61e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	021b      	lsls	r3, r3, #8
 800a626:	68fa      	ldr	r2, [r7, #12]
 800a628:	4313      	orrs	r3, r2
 800a62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	051b      	lsls	r3, r3, #20
 800a63a:	693a      	ldr	r2, [r7, #16]
 800a63c:	4313      	orrs	r3, r2
 800a63e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4a18      	ldr	r2, [pc, #96]	@ (800a6a4 <TIM_OC6_SetConfig+0xb8>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d00f      	beq.n	800a668 <TIM_OC6_SetConfig+0x7c>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	4a17      	ldr	r2, [pc, #92]	@ (800a6a8 <TIM_OC6_SetConfig+0xbc>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d00b      	beq.n	800a668 <TIM_OC6_SetConfig+0x7c>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	4a16      	ldr	r2, [pc, #88]	@ (800a6ac <TIM_OC6_SetConfig+0xc0>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d007      	beq.n	800a668 <TIM_OC6_SetConfig+0x7c>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	4a15      	ldr	r2, [pc, #84]	@ (800a6b0 <TIM_OC6_SetConfig+0xc4>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d003      	beq.n	800a668 <TIM_OC6_SetConfig+0x7c>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4a14      	ldr	r2, [pc, #80]	@ (800a6b4 <TIM_OC6_SetConfig+0xc8>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d109      	bne.n	800a67c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a66e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	695b      	ldr	r3, [r3, #20]
 800a674:	029b      	lsls	r3, r3, #10
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	4313      	orrs	r3, r2
 800a67a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	68fa      	ldr	r2, [r7, #12]
 800a686:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	685a      	ldr	r2, [r3, #4]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	693a      	ldr	r2, [r7, #16]
 800a694:	621a      	str	r2, [r3, #32]
}
 800a696:	bf00      	nop
 800a698:	371c      	adds	r7, #28
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	40012c00 	.word	0x40012c00
 800a6a8:	40013400 	.word	0x40013400
 800a6ac:	40014000 	.word	0x40014000
 800a6b0:	40014400 	.word	0x40014400
 800a6b4:	40014800 	.word	0x40014800

0800a6b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6a1b      	ldr	r3, [r3, #32]
 800a6c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6a1b      	ldr	r3, [r3, #32]
 800a6ce:	f023 0201 	bic.w	r2, r3, #1
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a6e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	011b      	lsls	r3, r3, #4
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	f023 030a 	bic.w	r3, r3, #10
 800a6f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6f6:	697a      	ldr	r2, [r7, #20]
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	697a      	ldr	r2, [r7, #20]
 800a708:	621a      	str	r2, [r3, #32]
}
 800a70a:	bf00      	nop
 800a70c:	371c      	adds	r7, #28
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr

0800a716 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a716:	b480      	push	{r7}
 800a718:	b087      	sub	sp, #28
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	60f8      	str	r0, [r7, #12]
 800a71e:	60b9      	str	r1, [r7, #8]
 800a720:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	6a1b      	ldr	r3, [r3, #32]
 800a726:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6a1b      	ldr	r3, [r3, #32]
 800a72c:	f023 0210 	bic.w	r2, r3, #16
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	699b      	ldr	r3, [r3, #24]
 800a738:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a740:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	031b      	lsls	r3, r3, #12
 800a746:	693a      	ldr	r2, [r7, #16]
 800a748:	4313      	orrs	r3, r2
 800a74a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a752:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	011b      	lsls	r3, r3, #4
 800a758:	697a      	ldr	r2, [r7, #20]
 800a75a:	4313      	orrs	r3, r2
 800a75c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	697a      	ldr	r2, [r7, #20]
 800a768:	621a      	str	r2, [r3, #32]
}
 800a76a:	bf00      	nop
 800a76c:	371c      	adds	r7, #28
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a776:	b480      	push	{r7}
 800a778:	b085      	sub	sp, #20
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
 800a77e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a78c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a78e:	683a      	ldr	r2, [r7, #0]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	4313      	orrs	r3, r2
 800a794:	f043 0307 	orr.w	r3, r3, #7
 800a798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	609a      	str	r2, [r3, #8]
}
 800a7a0:	bf00      	nop
 800a7a2:	3714      	adds	r7, #20
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b087      	sub	sp, #28
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
 800a7b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	021a      	lsls	r2, r3, #8
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	431a      	orrs	r2, r3
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	697a      	ldr	r2, [r7, #20]
 800a7de:	609a      	str	r2, [r3, #8]
}
 800a7e0:	bf00      	nop
 800a7e2:	371c      	adds	r7, #28
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b087      	sub	sp, #28
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	f003 031f 	and.w	r3, r3, #31
 800a7fe:	2201      	movs	r2, #1
 800a800:	fa02 f303 	lsl.w	r3, r2, r3
 800a804:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6a1a      	ldr	r2, [r3, #32]
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	43db      	mvns	r3, r3
 800a80e:	401a      	ands	r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6a1a      	ldr	r2, [r3, #32]
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	f003 031f 	and.w	r3, r3, #31
 800a81e:	6879      	ldr	r1, [r7, #4]
 800a820:	fa01 f303 	lsl.w	r3, r1, r3
 800a824:	431a      	orrs	r2, r3
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	621a      	str	r2, [r3, #32]
}
 800a82a:	bf00      	nop
 800a82c:	371c      	adds	r7, #28
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
	...

0800a838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d101      	bne.n	800a850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a84c:	2302      	movs	r3, #2
 800a84e:	e068      	b.n	800a922 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2202      	movs	r2, #2
 800a85c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a2e      	ldr	r2, [pc, #184]	@ (800a930 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d004      	beq.n	800a884 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a2d      	ldr	r2, [pc, #180]	@ (800a934 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d108      	bne.n	800a896 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a88a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	4313      	orrs	r3, r2
 800a894:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a89c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a1e      	ldr	r2, [pc, #120]	@ (800a930 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d01d      	beq.n	800a8f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8c2:	d018      	beq.n	800a8f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a1b      	ldr	r2, [pc, #108]	@ (800a938 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d013      	beq.n	800a8f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a1a      	ldr	r2, [pc, #104]	@ (800a93c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d00e      	beq.n	800a8f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a18      	ldr	r2, [pc, #96]	@ (800a940 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d009      	beq.n	800a8f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a13      	ldr	r2, [pc, #76]	@ (800a934 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d004      	beq.n	800a8f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a14      	ldr	r2, [pc, #80]	@ (800a944 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d10c      	bne.n	800a910 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	4313      	orrs	r3, r2
 800a906:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	40012c00 	.word	0x40012c00
 800a934:	40013400 	.word	0x40013400
 800a938:	40000400 	.word	0x40000400
 800a93c:	40000800 	.word	0x40000800
 800a940:	40000c00 	.word	0x40000c00
 800a944:	40014000 	.word	0x40014000

0800a948 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a950:	bf00      	nop
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d101      	bne.n	800a996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	e040      	b.n	800aa18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d106      	bne.n	800a9ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f7f8 fb58 	bl	800305c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2224      	movs	r2, #36	@ 0x24
 800a9b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f022 0201 	bic.w	r2, r2, #1
 800a9c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d002      	beq.n	800a9d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fb6a 	bl	800b0a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f8af 	bl	800ab34 <UART_SetConfig>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d101      	bne.n	800a9e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e01b      	b.n	800aa18 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a9ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	689a      	ldr	r2, [r3, #8]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a9fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f042 0201 	orr.w	r2, r2, #1
 800aa0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 fbe9 	bl	800b1e8 <UART_CheckIdleState>
 800aa16:	4603      	mov	r3, r0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3708      	adds	r7, #8
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b08a      	sub	sp, #40	@ 0x28
 800aa24:	af02      	add	r7, sp, #8
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	603b      	str	r3, [r7, #0]
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa34:	2b20      	cmp	r3, #32
 800aa36:	d177      	bne.n	800ab28 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d002      	beq.n	800aa44 <HAL_UART_Transmit+0x24>
 800aa3e:	88fb      	ldrh	r3, [r7, #6]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d101      	bne.n	800aa48 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	e070      	b.n	800ab2a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2221      	movs	r2, #33	@ 0x21
 800aa54:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aa56:	f7f9 fa6b 	bl	8003f30 <HAL_GetTick>
 800aa5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	88fa      	ldrh	r2, [r7, #6]
 800aa60:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	88fa      	ldrh	r2, [r7, #6]
 800aa68:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa74:	d108      	bne.n	800aa88 <HAL_UART_Transmit+0x68>
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d104      	bne.n	800aa88 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	61bb      	str	r3, [r7, #24]
 800aa86:	e003      	b.n	800aa90 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800aa90:	e02f      	b.n	800aaf2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	2180      	movs	r1, #128	@ 0x80
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f000 fc4b 	bl	800b338 <UART_WaitOnFlagUntilTimeout>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d004      	beq.n	800aab2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2220      	movs	r2, #32
 800aaac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800aaae:	2303      	movs	r3, #3
 800aab0:	e03b      	b.n	800ab2a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10b      	bne.n	800aad0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	881a      	ldrh	r2, [r3, #0]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aac4:	b292      	uxth	r2, r2
 800aac6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	3302      	adds	r3, #2
 800aacc:	61bb      	str	r3, [r7, #24]
 800aace:	e007      	b.n	800aae0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	781a      	ldrb	r2, [r3, #0]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	3301      	adds	r3, #1
 800aade:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	3b01      	subs	r3, #1
 800aaea:	b29a      	uxth	r2, r3
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1c9      	bne.n	800aa92 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	2200      	movs	r2, #0
 800ab06:	2140      	movs	r1, #64	@ 0x40
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f000 fc15 	bl	800b338 <UART_WaitOnFlagUntilTimeout>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d004      	beq.n	800ab1e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2220      	movs	r2, #32
 800ab18:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	e005      	b.n	800ab2a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2220      	movs	r2, #32
 800ab22:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800ab24:	2300      	movs	r3, #0
 800ab26:	e000      	b.n	800ab2a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800ab28:	2302      	movs	r3, #2
  }
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3720      	adds	r7, #32
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
	...

0800ab34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab38:	b08a      	sub	sp, #40	@ 0x28
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	689a      	ldr	r2, [r3, #8]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	431a      	orrs	r2, r3
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	695b      	ldr	r3, [r3, #20]
 800ab52:	431a      	orrs	r2, r3
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	69db      	ldr	r3, [r3, #28]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	4ba4      	ldr	r3, [pc, #656]	@ (800adf4 <UART_SetConfig+0x2c0>)
 800ab64:	4013      	ands	r3, r2
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	6812      	ldr	r2, [r2, #0]
 800ab6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab6c:	430b      	orrs	r3, r1
 800ab6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	68da      	ldr	r2, [r3, #12]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	430a      	orrs	r2, r1
 800ab84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a99      	ldr	r2, [pc, #612]	@ (800adf8 <UART_SetConfig+0x2c4>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d004      	beq.n	800aba0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abb0:	430a      	orrs	r2, r1
 800abb2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a90      	ldr	r2, [pc, #576]	@ (800adfc <UART_SetConfig+0x2c8>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d126      	bne.n	800ac0c <UART_SetConfig+0xd8>
 800abbe:	4b90      	ldr	r3, [pc, #576]	@ (800ae00 <UART_SetConfig+0x2cc>)
 800abc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abc4:	f003 0303 	and.w	r3, r3, #3
 800abc8:	2b03      	cmp	r3, #3
 800abca:	d81b      	bhi.n	800ac04 <UART_SetConfig+0xd0>
 800abcc:	a201      	add	r2, pc, #4	@ (adr r2, 800abd4 <UART_SetConfig+0xa0>)
 800abce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd2:	bf00      	nop
 800abd4:	0800abe5 	.word	0x0800abe5
 800abd8:	0800abf5 	.word	0x0800abf5
 800abdc:	0800abed 	.word	0x0800abed
 800abe0:	0800abfd 	.word	0x0800abfd
 800abe4:	2301      	movs	r3, #1
 800abe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800abea:	e116      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800abec:	2302      	movs	r3, #2
 800abee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800abf2:	e112      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800abf4:	2304      	movs	r3, #4
 800abf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800abfa:	e10e      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800abfc:	2308      	movs	r3, #8
 800abfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ac02:	e10a      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800ac04:	2310      	movs	r3, #16
 800ac06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ac0a:	e106      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a7c      	ldr	r2, [pc, #496]	@ (800ae04 <UART_SetConfig+0x2d0>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d138      	bne.n	800ac88 <UART_SetConfig+0x154>
 800ac16:	4b7a      	ldr	r3, [pc, #488]	@ (800ae00 <UART_SetConfig+0x2cc>)
 800ac18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac1c:	f003 030c 	and.w	r3, r3, #12
 800ac20:	2b0c      	cmp	r3, #12
 800ac22:	d82d      	bhi.n	800ac80 <UART_SetConfig+0x14c>
 800ac24:	a201      	add	r2, pc, #4	@ (adr r2, 800ac2c <UART_SetConfig+0xf8>)
 800ac26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac2a:	bf00      	nop
 800ac2c:	0800ac61 	.word	0x0800ac61
 800ac30:	0800ac81 	.word	0x0800ac81
 800ac34:	0800ac81 	.word	0x0800ac81
 800ac38:	0800ac81 	.word	0x0800ac81
 800ac3c:	0800ac71 	.word	0x0800ac71
 800ac40:	0800ac81 	.word	0x0800ac81
 800ac44:	0800ac81 	.word	0x0800ac81
 800ac48:	0800ac81 	.word	0x0800ac81
 800ac4c:	0800ac69 	.word	0x0800ac69
 800ac50:	0800ac81 	.word	0x0800ac81
 800ac54:	0800ac81 	.word	0x0800ac81
 800ac58:	0800ac81 	.word	0x0800ac81
 800ac5c:	0800ac79 	.word	0x0800ac79
 800ac60:	2300      	movs	r3, #0
 800ac62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ac66:	e0d8      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800ac68:	2302      	movs	r3, #2
 800ac6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ac6e:	e0d4      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800ac70:	2304      	movs	r3, #4
 800ac72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ac76:	e0d0      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800ac78:	2308      	movs	r3, #8
 800ac7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ac7e:	e0cc      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800ac80:	2310      	movs	r3, #16
 800ac82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ac86:	e0c8      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a5e      	ldr	r2, [pc, #376]	@ (800ae08 <UART_SetConfig+0x2d4>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d125      	bne.n	800acde <UART_SetConfig+0x1aa>
 800ac92:	4b5b      	ldr	r3, [pc, #364]	@ (800ae00 <UART_SetConfig+0x2cc>)
 800ac94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac98:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ac9c:	2b30      	cmp	r3, #48	@ 0x30
 800ac9e:	d016      	beq.n	800acce <UART_SetConfig+0x19a>
 800aca0:	2b30      	cmp	r3, #48	@ 0x30
 800aca2:	d818      	bhi.n	800acd6 <UART_SetConfig+0x1a2>
 800aca4:	2b20      	cmp	r3, #32
 800aca6:	d00a      	beq.n	800acbe <UART_SetConfig+0x18a>
 800aca8:	2b20      	cmp	r3, #32
 800acaa:	d814      	bhi.n	800acd6 <UART_SetConfig+0x1a2>
 800acac:	2b00      	cmp	r3, #0
 800acae:	d002      	beq.n	800acb6 <UART_SetConfig+0x182>
 800acb0:	2b10      	cmp	r3, #16
 800acb2:	d008      	beq.n	800acc6 <UART_SetConfig+0x192>
 800acb4:	e00f      	b.n	800acd6 <UART_SetConfig+0x1a2>
 800acb6:	2300      	movs	r3, #0
 800acb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800acbc:	e0ad      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800acbe:	2302      	movs	r3, #2
 800acc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800acc4:	e0a9      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800acc6:	2304      	movs	r3, #4
 800acc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800accc:	e0a5      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800acce:	2308      	movs	r3, #8
 800acd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800acd4:	e0a1      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800acd6:	2310      	movs	r3, #16
 800acd8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800acdc:	e09d      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a4a      	ldr	r2, [pc, #296]	@ (800ae0c <UART_SetConfig+0x2d8>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d125      	bne.n	800ad34 <UART_SetConfig+0x200>
 800ace8:	4b45      	ldr	r3, [pc, #276]	@ (800ae00 <UART_SetConfig+0x2cc>)
 800acea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800acf2:	2bc0      	cmp	r3, #192	@ 0xc0
 800acf4:	d016      	beq.n	800ad24 <UART_SetConfig+0x1f0>
 800acf6:	2bc0      	cmp	r3, #192	@ 0xc0
 800acf8:	d818      	bhi.n	800ad2c <UART_SetConfig+0x1f8>
 800acfa:	2b80      	cmp	r3, #128	@ 0x80
 800acfc:	d00a      	beq.n	800ad14 <UART_SetConfig+0x1e0>
 800acfe:	2b80      	cmp	r3, #128	@ 0x80
 800ad00:	d814      	bhi.n	800ad2c <UART_SetConfig+0x1f8>
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d002      	beq.n	800ad0c <UART_SetConfig+0x1d8>
 800ad06:	2b40      	cmp	r3, #64	@ 0x40
 800ad08:	d008      	beq.n	800ad1c <UART_SetConfig+0x1e8>
 800ad0a:	e00f      	b.n	800ad2c <UART_SetConfig+0x1f8>
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad12:	e082      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800ad14:	2302      	movs	r3, #2
 800ad16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad1a:	e07e      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800ad1c:	2304      	movs	r3, #4
 800ad1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad22:	e07a      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800ad24:	2308      	movs	r3, #8
 800ad26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad2a:	e076      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800ad2c:	2310      	movs	r3, #16
 800ad2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad32:	e072      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a35      	ldr	r2, [pc, #212]	@ (800ae10 <UART_SetConfig+0x2dc>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d12a      	bne.n	800ad94 <UART_SetConfig+0x260>
 800ad3e:	4b30      	ldr	r3, [pc, #192]	@ (800ae00 <UART_SetConfig+0x2cc>)
 800ad40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad4c:	d01a      	beq.n	800ad84 <UART_SetConfig+0x250>
 800ad4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad52:	d81b      	bhi.n	800ad8c <UART_SetConfig+0x258>
 800ad54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad58:	d00c      	beq.n	800ad74 <UART_SetConfig+0x240>
 800ad5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad5e:	d815      	bhi.n	800ad8c <UART_SetConfig+0x258>
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d003      	beq.n	800ad6c <UART_SetConfig+0x238>
 800ad64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad68:	d008      	beq.n	800ad7c <UART_SetConfig+0x248>
 800ad6a:	e00f      	b.n	800ad8c <UART_SetConfig+0x258>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad72:	e052      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800ad74:	2302      	movs	r3, #2
 800ad76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad7a:	e04e      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800ad7c:	2304      	movs	r3, #4
 800ad7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad82:	e04a      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800ad84:	2308      	movs	r3, #8
 800ad86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad8a:	e046      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800ad8c:	2310      	movs	r3, #16
 800ad8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad92:	e042      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a17      	ldr	r2, [pc, #92]	@ (800adf8 <UART_SetConfig+0x2c4>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d13a      	bne.n	800ae14 <UART_SetConfig+0x2e0>
 800ad9e:	4b18      	ldr	r3, [pc, #96]	@ (800ae00 <UART_SetConfig+0x2cc>)
 800ada0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ada4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ada8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800adac:	d01a      	beq.n	800ade4 <UART_SetConfig+0x2b0>
 800adae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800adb2:	d81b      	bhi.n	800adec <UART_SetConfig+0x2b8>
 800adb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800adb8:	d00c      	beq.n	800add4 <UART_SetConfig+0x2a0>
 800adba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800adbe:	d815      	bhi.n	800adec <UART_SetConfig+0x2b8>
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d003      	beq.n	800adcc <UART_SetConfig+0x298>
 800adc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800adc8:	d008      	beq.n	800addc <UART_SetConfig+0x2a8>
 800adca:	e00f      	b.n	800adec <UART_SetConfig+0x2b8>
 800adcc:	2300      	movs	r3, #0
 800adce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800add2:	e022      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800add4:	2302      	movs	r3, #2
 800add6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800adda:	e01e      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800addc:	2304      	movs	r3, #4
 800adde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ade2:	e01a      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800ade4:	2308      	movs	r3, #8
 800ade6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800adea:	e016      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800adec:	2310      	movs	r3, #16
 800adee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800adf2:	e012      	b.n	800ae1a <UART_SetConfig+0x2e6>
 800adf4:	efff69f3 	.word	0xefff69f3
 800adf8:	40008000 	.word	0x40008000
 800adfc:	40013800 	.word	0x40013800
 800ae00:	40021000 	.word	0x40021000
 800ae04:	40004400 	.word	0x40004400
 800ae08:	40004800 	.word	0x40004800
 800ae0c:	40004c00 	.word	0x40004c00
 800ae10:	40005000 	.word	0x40005000
 800ae14:	2310      	movs	r3, #16
 800ae16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a9f      	ldr	r2, [pc, #636]	@ (800b09c <UART_SetConfig+0x568>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d17a      	bne.n	800af1a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ae24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ae28:	2b08      	cmp	r3, #8
 800ae2a:	d824      	bhi.n	800ae76 <UART_SetConfig+0x342>
 800ae2c:	a201      	add	r2, pc, #4	@ (adr r2, 800ae34 <UART_SetConfig+0x300>)
 800ae2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae32:	bf00      	nop
 800ae34:	0800ae59 	.word	0x0800ae59
 800ae38:	0800ae77 	.word	0x0800ae77
 800ae3c:	0800ae61 	.word	0x0800ae61
 800ae40:	0800ae77 	.word	0x0800ae77
 800ae44:	0800ae67 	.word	0x0800ae67
 800ae48:	0800ae77 	.word	0x0800ae77
 800ae4c:	0800ae77 	.word	0x0800ae77
 800ae50:	0800ae77 	.word	0x0800ae77
 800ae54:	0800ae6f 	.word	0x0800ae6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae58:	f7fd f87e 	bl	8007f58 <HAL_RCC_GetPCLK1Freq>
 800ae5c:	61f8      	str	r0, [r7, #28]
        break;
 800ae5e:	e010      	b.n	800ae82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae60:	4b8f      	ldr	r3, [pc, #572]	@ (800b0a0 <UART_SetConfig+0x56c>)
 800ae62:	61fb      	str	r3, [r7, #28]
        break;
 800ae64:	e00d      	b.n	800ae82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae66:	f7fc ffdf 	bl	8007e28 <HAL_RCC_GetSysClockFreq>
 800ae6a:	61f8      	str	r0, [r7, #28]
        break;
 800ae6c:	e009      	b.n	800ae82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae72:	61fb      	str	r3, [r7, #28]
        break;
 800ae74:	e005      	b.n	800ae82 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800ae76:	2300      	movs	r3, #0
 800ae78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800ae80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f000 80fb 	beq.w	800b080 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	685a      	ldr	r2, [r3, #4]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	005b      	lsls	r3, r3, #1
 800ae92:	4413      	add	r3, r2
 800ae94:	69fa      	ldr	r2, [r7, #28]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d305      	bcc.n	800aea6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aea0:	69fa      	ldr	r2, [r7, #28]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d903      	bls.n	800aeae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800aeac:	e0e8      	b.n	800b080 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	461c      	mov	r4, r3
 800aeb4:	4615      	mov	r5, r2
 800aeb6:	f04f 0200 	mov.w	r2, #0
 800aeba:	f04f 0300 	mov.w	r3, #0
 800aebe:	022b      	lsls	r3, r5, #8
 800aec0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800aec4:	0222      	lsls	r2, r4, #8
 800aec6:	68f9      	ldr	r1, [r7, #12]
 800aec8:	6849      	ldr	r1, [r1, #4]
 800aeca:	0849      	lsrs	r1, r1, #1
 800aecc:	2000      	movs	r0, #0
 800aece:	4688      	mov	r8, r1
 800aed0:	4681      	mov	r9, r0
 800aed2:	eb12 0a08 	adds.w	sl, r2, r8
 800aed6:	eb43 0b09 	adc.w	fp, r3, r9
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	603b      	str	r3, [r7, #0]
 800aee2:	607a      	str	r2, [r7, #4]
 800aee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aee8:	4650      	mov	r0, sl
 800aeea:	4659      	mov	r1, fp
 800aeec:	f7f5 fecc 	bl	8000c88 <__aeabi_uldivmod>
 800aef0:	4602      	mov	r2, r0
 800aef2:	460b      	mov	r3, r1
 800aef4:	4613      	mov	r3, r2
 800aef6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aefe:	d308      	bcc.n	800af12 <UART_SetConfig+0x3de>
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af06:	d204      	bcs.n	800af12 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	69ba      	ldr	r2, [r7, #24]
 800af0e:	60da      	str	r2, [r3, #12]
 800af10:	e0b6      	b.n	800b080 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800af12:	2301      	movs	r3, #1
 800af14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800af18:	e0b2      	b.n	800b080 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	69db      	ldr	r3, [r3, #28]
 800af1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af22:	d15e      	bne.n	800afe2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800af24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800af28:	2b08      	cmp	r3, #8
 800af2a:	d828      	bhi.n	800af7e <UART_SetConfig+0x44a>
 800af2c:	a201      	add	r2, pc, #4	@ (adr r2, 800af34 <UART_SetConfig+0x400>)
 800af2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af32:	bf00      	nop
 800af34:	0800af59 	.word	0x0800af59
 800af38:	0800af61 	.word	0x0800af61
 800af3c:	0800af69 	.word	0x0800af69
 800af40:	0800af7f 	.word	0x0800af7f
 800af44:	0800af6f 	.word	0x0800af6f
 800af48:	0800af7f 	.word	0x0800af7f
 800af4c:	0800af7f 	.word	0x0800af7f
 800af50:	0800af7f 	.word	0x0800af7f
 800af54:	0800af77 	.word	0x0800af77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af58:	f7fc fffe 	bl	8007f58 <HAL_RCC_GetPCLK1Freq>
 800af5c:	61f8      	str	r0, [r7, #28]
        break;
 800af5e:	e014      	b.n	800af8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af60:	f7fd f810 	bl	8007f84 <HAL_RCC_GetPCLK2Freq>
 800af64:	61f8      	str	r0, [r7, #28]
        break;
 800af66:	e010      	b.n	800af8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af68:	4b4d      	ldr	r3, [pc, #308]	@ (800b0a0 <UART_SetConfig+0x56c>)
 800af6a:	61fb      	str	r3, [r7, #28]
        break;
 800af6c:	e00d      	b.n	800af8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af6e:	f7fc ff5b 	bl	8007e28 <HAL_RCC_GetSysClockFreq>
 800af72:	61f8      	str	r0, [r7, #28]
        break;
 800af74:	e009      	b.n	800af8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af7a:	61fb      	str	r3, [r7, #28]
        break;
 800af7c:	e005      	b.n	800af8a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800af7e:	2300      	movs	r3, #0
 800af80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800af88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d077      	beq.n	800b080 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	005a      	lsls	r2, r3, #1
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	085b      	lsrs	r3, r3, #1
 800af9a:	441a      	add	r2, r3
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800afa4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	2b0f      	cmp	r3, #15
 800afaa:	d916      	bls.n	800afda <UART_SetConfig+0x4a6>
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afb2:	d212      	bcs.n	800afda <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	f023 030f 	bic.w	r3, r3, #15
 800afbc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	085b      	lsrs	r3, r3, #1
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	f003 0307 	and.w	r3, r3, #7
 800afc8:	b29a      	uxth	r2, r3
 800afca:	8afb      	ldrh	r3, [r7, #22]
 800afcc:	4313      	orrs	r3, r2
 800afce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	8afa      	ldrh	r2, [r7, #22]
 800afd6:	60da      	str	r2, [r3, #12]
 800afd8:	e052      	b.n	800b080 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800afe0:	e04e      	b.n	800b080 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800afe2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800afe6:	2b08      	cmp	r3, #8
 800afe8:	d827      	bhi.n	800b03a <UART_SetConfig+0x506>
 800afea:	a201      	add	r2, pc, #4	@ (adr r2, 800aff0 <UART_SetConfig+0x4bc>)
 800afec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff0:	0800b015 	.word	0x0800b015
 800aff4:	0800b01d 	.word	0x0800b01d
 800aff8:	0800b025 	.word	0x0800b025
 800affc:	0800b03b 	.word	0x0800b03b
 800b000:	0800b02b 	.word	0x0800b02b
 800b004:	0800b03b 	.word	0x0800b03b
 800b008:	0800b03b 	.word	0x0800b03b
 800b00c:	0800b03b 	.word	0x0800b03b
 800b010:	0800b033 	.word	0x0800b033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b014:	f7fc ffa0 	bl	8007f58 <HAL_RCC_GetPCLK1Freq>
 800b018:	61f8      	str	r0, [r7, #28]
        break;
 800b01a:	e014      	b.n	800b046 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b01c:	f7fc ffb2 	bl	8007f84 <HAL_RCC_GetPCLK2Freq>
 800b020:	61f8      	str	r0, [r7, #28]
        break;
 800b022:	e010      	b.n	800b046 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b024:	4b1e      	ldr	r3, [pc, #120]	@ (800b0a0 <UART_SetConfig+0x56c>)
 800b026:	61fb      	str	r3, [r7, #28]
        break;
 800b028:	e00d      	b.n	800b046 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b02a:	f7fc fefd 	bl	8007e28 <HAL_RCC_GetSysClockFreq>
 800b02e:	61f8      	str	r0, [r7, #28]
        break;
 800b030:	e009      	b.n	800b046 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b032:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b036:	61fb      	str	r3, [r7, #28]
        break;
 800b038:	e005      	b.n	800b046 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800b03a:	2300      	movs	r3, #0
 800b03c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b03e:	2301      	movs	r3, #1
 800b040:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800b044:	bf00      	nop
    }

    if (pclk != 0U)
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d019      	beq.n	800b080 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	085a      	lsrs	r2, r3, #1
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	441a      	add	r2, r3
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b05e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b060:	69bb      	ldr	r3, [r7, #24]
 800b062:	2b0f      	cmp	r3, #15
 800b064:	d909      	bls.n	800b07a <UART_SetConfig+0x546>
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b06c:	d205      	bcs.n	800b07a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	b29a      	uxth	r2, r3
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	60da      	str	r2, [r3, #12]
 800b078:	e002      	b.n	800b080 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2200      	movs	r2, #0
 800b08a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b08c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800b090:	4618      	mov	r0, r3
 800b092:	3728      	adds	r7, #40	@ 0x28
 800b094:	46bd      	mov	sp, r7
 800b096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b09a:	bf00      	nop
 800b09c:	40008000 	.word	0x40008000
 800b0a0:	00f42400 	.word	0x00f42400

0800b0a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0b0:	f003 0308 	and.w	r3, r3, #8
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00a      	beq.n	800b0ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	430a      	orrs	r2, r1
 800b0cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d2:	f003 0301 	and.w	r3, r3, #1
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d00a      	beq.n	800b0f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	430a      	orrs	r2, r1
 800b0ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f4:	f003 0302 	and.w	r3, r3, #2
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00a      	beq.n	800b112 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	430a      	orrs	r2, r1
 800b110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b116:	f003 0304 	and.w	r3, r3, #4
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00a      	beq.n	800b134 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	430a      	orrs	r2, r1
 800b132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b138:	f003 0310 	and.w	r3, r3, #16
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d00a      	beq.n	800b156 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	430a      	orrs	r2, r1
 800b154:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b15a:	f003 0320 	and.w	r3, r3, #32
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00a      	beq.n	800b178 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	430a      	orrs	r2, r1
 800b176:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b17c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b180:	2b00      	cmp	r3, #0
 800b182:	d01a      	beq.n	800b1ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	430a      	orrs	r2, r1
 800b198:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b19e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1a2:	d10a      	bne.n	800b1ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	430a      	orrs	r2, r1
 800b1b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d00a      	beq.n	800b1dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	430a      	orrs	r2, r1
 800b1da:	605a      	str	r2, [r3, #4]
  }
}
 800b1dc:	bf00      	nop
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b098      	sub	sp, #96	@ 0x60
 800b1ec:	af02      	add	r7, sp, #8
 800b1ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b1f8:	f7f8 fe9a 	bl	8003f30 <HAL_GetTick>
 800b1fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 0308 	and.w	r3, r3, #8
 800b208:	2b08      	cmp	r3, #8
 800b20a:	d12e      	bne.n	800b26a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b20c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b210:	9300      	str	r3, [sp, #0]
 800b212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b214:	2200      	movs	r2, #0
 800b216:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 f88c 	bl	800b338 <UART_WaitOnFlagUntilTimeout>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d021      	beq.n	800b26a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22e:	e853 3f00 	ldrex	r3, [r3]
 800b232:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b236:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b23a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	461a      	mov	r2, r3
 800b242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b244:	647b      	str	r3, [r7, #68]	@ 0x44
 800b246:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b248:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b24a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b24c:	e841 2300 	strex	r3, r2, [r1]
 800b250:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b254:	2b00      	cmp	r3, #0
 800b256:	d1e6      	bne.n	800b226 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2220      	movs	r2, #32
 800b25c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b266:	2303      	movs	r3, #3
 800b268:	e062      	b.n	800b330 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f003 0304 	and.w	r3, r3, #4
 800b274:	2b04      	cmp	r3, #4
 800b276:	d149      	bne.n	800b30c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b278:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b280:	2200      	movs	r2, #0
 800b282:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 f856 	bl	800b338 <UART_WaitOnFlagUntilTimeout>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d03c      	beq.n	800b30c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29a:	e853 3f00 	ldrex	r3, [r3]
 800b29e:	623b      	str	r3, [r7, #32]
   return(result);
 800b2a0:	6a3b      	ldr	r3, [r7, #32]
 800b2a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b2a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2b8:	e841 2300 	strex	r3, r2, [r1]
 800b2bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1e6      	bne.n	800b292 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	3308      	adds	r3, #8
 800b2ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	e853 3f00 	ldrex	r3, [r3]
 800b2d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f023 0301 	bic.w	r3, r3, #1
 800b2da:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	3308      	adds	r3, #8
 800b2e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b2e4:	61fa      	str	r2, [r7, #28]
 800b2e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e8:	69b9      	ldr	r1, [r7, #24]
 800b2ea:	69fa      	ldr	r2, [r7, #28]
 800b2ec:	e841 2300 	strex	r3, r2, [r1]
 800b2f0:	617b      	str	r3, [r7, #20]
   return(result);
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1e5      	bne.n	800b2c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2220      	movs	r2, #32
 800b2fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b308:	2303      	movs	r3, #3
 800b30a:	e011      	b.n	800b330 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2220      	movs	r2, #32
 800b310:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2220      	movs	r2, #32
 800b316:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3758      	adds	r7, #88	@ 0x58
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	603b      	str	r3, [r7, #0]
 800b344:	4613      	mov	r3, r2
 800b346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b348:	e04f      	b.n	800b3ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b350:	d04b      	beq.n	800b3ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b352:	f7f8 fded 	bl	8003f30 <HAL_GetTick>
 800b356:	4602      	mov	r2, r0
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	1ad3      	subs	r3, r2, r3
 800b35c:	69ba      	ldr	r2, [r7, #24]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d302      	bcc.n	800b368 <UART_WaitOnFlagUntilTimeout+0x30>
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d101      	bne.n	800b36c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b368:	2303      	movs	r3, #3
 800b36a:	e04e      	b.n	800b40a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f003 0304 	and.w	r3, r3, #4
 800b376:	2b00      	cmp	r3, #0
 800b378:	d037      	beq.n	800b3ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	2b80      	cmp	r3, #128	@ 0x80
 800b37e:	d034      	beq.n	800b3ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	2b40      	cmp	r3, #64	@ 0x40
 800b384:	d031      	beq.n	800b3ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	69db      	ldr	r3, [r3, #28]
 800b38c:	f003 0308 	and.w	r3, r3, #8
 800b390:	2b08      	cmp	r3, #8
 800b392:	d110      	bne.n	800b3b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2208      	movs	r2, #8
 800b39a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f000 f838 	bl	800b412 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2208      	movs	r2, #8
 800b3a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e029      	b.n	800b40a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	69db      	ldr	r3, [r3, #28]
 800b3bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b3c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b3c4:	d111      	bne.n	800b3ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b3ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f000 f81e 	bl	800b412 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2220      	movs	r2, #32
 800b3da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b3e6:	2303      	movs	r3, #3
 800b3e8:	e00f      	b.n	800b40a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	69da      	ldr	r2, [r3, #28]
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	4013      	ands	r3, r2
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	bf0c      	ite	eq
 800b3fa:	2301      	moveq	r3, #1
 800b3fc:	2300      	movne	r3, #0
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	461a      	mov	r2, r3
 800b402:	79fb      	ldrb	r3, [r7, #7]
 800b404:	429a      	cmp	r2, r3
 800b406:	d0a0      	beq.n	800b34a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b412:	b480      	push	{r7}
 800b414:	b095      	sub	sp, #84	@ 0x54
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b422:	e853 3f00 	ldrex	r3, [r3]
 800b426:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b42a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b42e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	461a      	mov	r2, r3
 800b436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b438:	643b      	str	r3, [r7, #64]	@ 0x40
 800b43a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b43e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b440:	e841 2300 	strex	r3, r2, [r1]
 800b444:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d1e6      	bne.n	800b41a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	3308      	adds	r3, #8
 800b452:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b454:	6a3b      	ldr	r3, [r7, #32]
 800b456:	e853 3f00 	ldrex	r3, [r3]
 800b45a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	f023 0301 	bic.w	r3, r3, #1
 800b462:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	3308      	adds	r3, #8
 800b46a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b46c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b46e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b470:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b474:	e841 2300 	strex	r3, r2, [r1]
 800b478:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d1e5      	bne.n	800b44c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b484:	2b01      	cmp	r3, #1
 800b486:	d118      	bne.n	800b4ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	e853 3f00 	ldrex	r3, [r3]
 800b494:	60bb      	str	r3, [r7, #8]
   return(result);
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	f023 0310 	bic.w	r3, r3, #16
 800b49c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4a6:	61bb      	str	r3, [r7, #24]
 800b4a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4aa:	6979      	ldr	r1, [r7, #20]
 800b4ac:	69ba      	ldr	r2, [r7, #24]
 800b4ae:	e841 2300 	strex	r3, r2, [r1]
 800b4b2:	613b      	str	r3, [r7, #16]
   return(result);
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d1e6      	bne.n	800b488 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2220      	movs	r2, #32
 800b4be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b4ce:	bf00      	nop
 800b4d0:	3754      	adds	r7, #84	@ 0x54
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr

0800b4da <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b4da:	b084      	sub	sp, #16
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	f107 001c 	add.w	r0, r7, #28
 800b4e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 fa69 	bl	800b9d0 <USB_CoreReset>
 800b4fe:	4603      	mov	r3, r0
 800b500:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800b502:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b506:	2b00      	cmp	r3, #0
 800b508:	d106      	bne.n	800b518 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b50e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	639a      	str	r2, [r3, #56]	@ 0x38
 800b516:	e005      	b.n	800b524 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b51c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800b524:	7bfb      	ldrb	r3, [r7, #15]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b530:	b004      	add	sp, #16
 800b532:	4770      	bx	lr

0800b534 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	f023 0201 	bic.w	r2, r3, #1
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b548:	2300      	movs	r3, #0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	370c      	adds	r7, #12
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr

0800b556 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b084      	sub	sp, #16
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	460b      	mov	r3, r1
 800b560:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b562:	2300      	movs	r3, #0
 800b564:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b572:	78fb      	ldrb	r3, [r7, #3]
 800b574:	2b01      	cmp	r3, #1
 800b576:	d115      	bne.n	800b5a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b584:	200a      	movs	r0, #10
 800b586:	f7f8 fcdf 	bl	8003f48 <HAL_Delay>
      ms += 10U;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	330a      	adds	r3, #10
 800b58e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 fa0f 	bl	800b9b4 <USB_GetMode>
 800b596:	4603      	mov	r3, r0
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d01e      	beq.n	800b5da <USB_SetCurrentMode+0x84>
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2bc7      	cmp	r3, #199	@ 0xc7
 800b5a0:	d9f0      	bls.n	800b584 <USB_SetCurrentMode+0x2e>
 800b5a2:	e01a      	b.n	800b5da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b5a4:	78fb      	ldrb	r3, [r7, #3]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d115      	bne.n	800b5d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b5b6:	200a      	movs	r0, #10
 800b5b8:	f7f8 fcc6 	bl	8003f48 <HAL_Delay>
      ms += 10U;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	330a      	adds	r3, #10
 800b5c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f9f6 	bl	800b9b4 <USB_GetMode>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d005      	beq.n	800b5da <USB_SetCurrentMode+0x84>
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2bc7      	cmp	r3, #199	@ 0xc7
 800b5d2:	d9f0      	bls.n	800b5b6 <USB_SetCurrentMode+0x60>
 800b5d4:	e001      	b.n	800b5da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e005      	b.n	800b5e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2bc8      	cmp	r3, #200	@ 0xc8
 800b5de:	d101      	bne.n	800b5e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	e000      	b.n	800b5e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
	...

0800b5f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b5f0:	b084      	sub	sp, #16
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b086      	sub	sp, #24
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
 800b5fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b5fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b602:	2300      	movs	r3, #0
 800b604:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b60a:	2300      	movs	r3, #0
 800b60c:	613b      	str	r3, [r7, #16]
 800b60e:	e009      	b.n	800b624 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	3340      	adds	r3, #64	@ 0x40
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	4413      	add	r3, r2
 800b61a:	2200      	movs	r2, #0
 800b61c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	3301      	adds	r3, #1
 800b622:	613b      	str	r3, [r7, #16]
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	2b0e      	cmp	r3, #14
 800b628:	d9f2      	bls.n	800b610 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b62a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d11c      	bne.n	800b66c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b640:	f043 0302 	orr.w	r3, r3, #2
 800b644:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b64a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	601a      	str	r2, [r3, #0]
 800b66a:	e005      	b.n	800b678 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b670:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b67e:	461a      	mov	r2, r3
 800b680:	2300      	movs	r3, #0
 800b682:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b684:	2103      	movs	r1, #3
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 f95a 	bl	800b940 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b68c:	2110      	movs	r1, #16
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 f8f6 	bl	800b880 <USB_FlushTxFifo>
 800b694:	4603      	mov	r3, r0
 800b696:	2b00      	cmp	r3, #0
 800b698:	d001      	beq.n	800b69e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800b69a:	2301      	movs	r3, #1
 800b69c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 f920 	bl	800b8e4 <USB_FlushRxFifo>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d001      	beq.n	800b6ae <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	613b      	str	r3, [r7, #16]
 800b6d6:	e043      	b.n	800b760 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	015a      	lsls	r2, r3, #5
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	4413      	add	r3, r2
 800b6e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b6ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b6ee:	d118      	bne.n	800b722 <USB_DevInit+0x132>
    {
      if (i == 0U)
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d10a      	bne.n	800b70c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	015a      	lsls	r2, r3, #5
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	4413      	add	r3, r2
 800b6fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b702:	461a      	mov	r2, r3
 800b704:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b708:	6013      	str	r3, [r2, #0]
 800b70a:	e013      	b.n	800b734 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	015a      	lsls	r2, r3, #5
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	4413      	add	r3, r2
 800b714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b718:	461a      	mov	r2, r3
 800b71a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b71e:	6013      	str	r3, [r2, #0]
 800b720:	e008      	b.n	800b734 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	015a      	lsls	r2, r3, #5
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	4413      	add	r3, r2
 800b72a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b72e:	461a      	mov	r2, r3
 800b730:	2300      	movs	r3, #0
 800b732:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	015a      	lsls	r2, r3, #5
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	4413      	add	r3, r2
 800b73c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b740:	461a      	mov	r2, r3
 800b742:	2300      	movs	r3, #0
 800b744:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	015a      	lsls	r2, r3, #5
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	4413      	add	r3, r2
 800b74e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b752:	461a      	mov	r2, r3
 800b754:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b758:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	3301      	adds	r3, #1
 800b75e:	613b      	str	r3, [r7, #16]
 800b760:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b764:	461a      	mov	r2, r3
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	4293      	cmp	r3, r2
 800b76a:	d3b5      	bcc.n	800b6d8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b76c:	2300      	movs	r3, #0
 800b76e:	613b      	str	r3, [r7, #16]
 800b770:	e043      	b.n	800b7fa <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	015a      	lsls	r2, r3, #5
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	4413      	add	r3, r2
 800b77a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b784:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b788:	d118      	bne.n	800b7bc <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d10a      	bne.n	800b7a6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	015a      	lsls	r2, r3, #5
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	4413      	add	r3, r2
 800b798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b79c:	461a      	mov	r2, r3
 800b79e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b7a2:	6013      	str	r3, [r2, #0]
 800b7a4:	e013      	b.n	800b7ce <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	015a      	lsls	r2, r3, #5
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b7b8:	6013      	str	r3, [r2, #0]
 800b7ba:	e008      	b.n	800b7ce <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	015a      	lsls	r2, r3, #5
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	015a      	lsls	r2, r3, #5
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7da:	461a      	mov	r2, r3
 800b7dc:	2300      	movs	r3, #0
 800b7de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	015a      	lsls	r2, r3, #5
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b7f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	613b      	str	r3, [r7, #16]
 800b7fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b7fe:	461a      	mov	r2, r3
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	4293      	cmp	r3, r2
 800b804:	d3b5      	bcc.n	800b772 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b818:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2200      	movs	r2, #0
 800b81e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b826:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	f043 0210 	orr.w	r2, r3, #16
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	699a      	ldr	r2, [r3, #24]
 800b838:	4b10      	ldr	r3, [pc, #64]	@ (800b87c <USB_DevInit+0x28c>)
 800b83a:	4313      	orrs	r3, r2
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b840:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b844:	2b00      	cmp	r3, #0
 800b846:	d005      	beq.n	800b854 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	699b      	ldr	r3, [r3, #24]
 800b84c:	f043 0208 	orr.w	r2, r3, #8
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b854:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d107      	bne.n	800b86c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	699b      	ldr	r3, [r3, #24]
 800b860:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b864:	f043 0304 	orr.w	r3, r3, #4
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b86c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3718      	adds	r7, #24
 800b872:	46bd      	mov	sp, r7
 800b874:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b878:	b004      	add	sp, #16
 800b87a:	4770      	bx	lr
 800b87c:	803c3800 	.word	0x803c3800

0800b880 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b88a:	2300      	movs	r3, #0
 800b88c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	3301      	adds	r3, #1
 800b892:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b89a:	d901      	bls.n	800b8a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b89c:	2303      	movs	r3, #3
 800b89e:	e01b      	b.n	800b8d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	691b      	ldr	r3, [r3, #16]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	daf2      	bge.n	800b88e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	019b      	lsls	r3, r3, #6
 800b8b0:	f043 0220 	orr.w	r2, r3, #32
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b8c4:	d901      	bls.n	800b8ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b8c6:	2303      	movs	r3, #3
 800b8c8:	e006      	b.n	800b8d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	691b      	ldr	r3, [r3, #16]
 800b8ce:	f003 0320 	and.w	r3, r3, #32
 800b8d2:	2b20      	cmp	r3, #32
 800b8d4:	d0f0      	beq.n	800b8b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3714      	adds	r7, #20
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b8fc:	d901      	bls.n	800b902 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b8fe:	2303      	movs	r3, #3
 800b900:	e018      	b.n	800b934 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	691b      	ldr	r3, [r3, #16]
 800b906:	2b00      	cmp	r3, #0
 800b908:	daf2      	bge.n	800b8f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b90a:	2300      	movs	r3, #0
 800b90c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2210      	movs	r2, #16
 800b912:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	3301      	adds	r3, #1
 800b918:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b920:	d901      	bls.n	800b926 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b922:	2303      	movs	r3, #3
 800b924:	e006      	b.n	800b934 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	691b      	ldr	r3, [r3, #16]
 800b92a:	f003 0310 	and.w	r3, r3, #16
 800b92e:	2b10      	cmp	r3, #16
 800b930:	d0f0      	beq.n	800b914 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3714      	adds	r7, #20
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	460b      	mov	r3, r1
 800b94a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	78fb      	ldrb	r3, [r7, #3]
 800b95a:	68f9      	ldr	r1, [r7, #12]
 800b95c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b960:	4313      	orrs	r3, r2
 800b962:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b964:	2300      	movs	r3, #0
}
 800b966:	4618      	mov	r0, r3
 800b968:	3714      	adds	r7, #20
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr

0800b972 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b972:	b480      	push	{r7}
 800b974:	b085      	sub	sp, #20
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	68fa      	ldr	r2, [r7, #12]
 800b988:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b98c:	f023 0303 	bic.w	r3, r3, #3
 800b990:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b9a0:	f043 0302 	orr.w	r3, r3, #2
 800b9a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3714      	adds	r7, #20
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	695b      	ldr	r3, [r3, #20]
 800b9c0:	f003 0301 	and.w	r3, r3, #1
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	370c      	adds	r7, #12
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr

0800b9d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b9e8:	d901      	bls.n	800b9ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b9ea:	2303      	movs	r3, #3
 800b9ec:	e01b      	b.n	800ba26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	691b      	ldr	r3, [r3, #16]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	daf2      	bge.n	800b9dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	691b      	ldr	r3, [r3, #16]
 800b9fe:	f043 0201 	orr.w	r2, r3, #1
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ba12:	d901      	bls.n	800ba18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ba14:	2303      	movs	r3, #3
 800ba16:	e006      	b.n	800ba26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	691b      	ldr	r3, [r3, #16]
 800ba1c:	f003 0301 	and.w	r3, r3, #1
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d0f0      	beq.n	800ba06 <USB_CoreReset+0x36>

  return HAL_OK;
 800ba24:	2300      	movs	r3, #0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3714      	adds	r7, #20
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr

0800ba32 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b08c      	sub	sp, #48	@ 0x30
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	603b      	str	r3, [r7, #0]
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	71fb      	strb	r3, [r7, #7]
 800ba3e:	460b      	mov	r3, r1
 800ba40:	71bb      	strb	r3, [r7, #6]
 800ba42:	4613      	mov	r3, r2
 800ba44:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800ba46:	79fb      	ldrb	r3, [r7, #7]
 800ba48:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800ba4a:	79bb      	ldrb	r3, [r7, #6]
 800ba4c:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 800ba4e:	797b      	ldrb	r3, [r7, #5]
 800ba50:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ba52:	f107 030c 	add.w	r3, r7, #12
 800ba56:	2207      	movs	r2, #7
 800ba58:	2100      	movs	r1, #0
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f002 fa98 	bl	800df90 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ba60:	f107 0318 	add.w	r3, r7, #24
 800ba64:	2218      	movs	r2, #24
 800ba66:	2100      	movs	r1, #0
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f002 fa91 	bl	800df90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800ba6e:	233f      	movs	r3, #63	@ 0x3f
 800ba70:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800ba72:	238a      	movs	r3, #138	@ 0x8a
 800ba74:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800ba76:	f107 0314 	add.w	r3, r7, #20
 800ba7a:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 800ba80:	f107 030c 	add.w	r3, r7, #12
 800ba84:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800ba86:	2307      	movs	r3, #7
 800ba88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800ba8a:	f107 0318 	add.w	r3, r7, #24
 800ba8e:	2100      	movs	r1, #0
 800ba90:	4618      	mov	r0, r3
 800ba92:	f000 ff41 	bl	800c918 <hci_send_req>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	da01      	bge.n	800baa0 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800ba9c:	23ff      	movs	r3, #255	@ 0xff
 800ba9e:	e014      	b.n	800baca <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800baa0:	7b3b      	ldrb	r3, [r7, #12]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d001      	beq.n	800baaa <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800baa6:	7b3b      	ldrb	r3, [r7, #12]
 800baa8:	e00f      	b.n	800baca <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800baaa:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800baae:	b29a      	uxth	r2, r3
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800bab4:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800bab8:	b29a      	uxth	r2, r3
 800baba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800babc:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800babe:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800bac2:	b29a      	uxth	r2, r3
 800bac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bac6:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3730      	adds	r7, #48	@ 0x30
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b08e      	sub	sp, #56	@ 0x38
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
 800badc:	603b      	str	r3, [r7, #0]
 800bade:	4603      	mov	r3, r0
 800bae0:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 800bae2:	7bfb      	ldrb	r3, [r7, #15]
 800bae4:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800bae6:	f107 0314 	add.w	r3, r7, #20
 800baea:	2207      	movs	r2, #7
 800baec:	2100      	movs	r1, #0
 800baee:	4618      	mov	r0, r3
 800baf0:	f002 fa4e 	bl	800df90 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800baf4:	f107 0320 	add.w	r3, r7, #32
 800baf8:	2218      	movs	r2, #24
 800bafa:	2100      	movs	r1, #0
 800bafc:	4618      	mov	r0, r3
 800bafe:	f002 fa47 	bl	800df90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800bb02:	233f      	movs	r3, #63	@ 0x3f
 800bb04:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 800bb06:	238a      	movs	r3, #138	@ 0x8a
 800bb08:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 800bb0a:	f107 031c 	add.w	r3, r7, #28
 800bb0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 800bb10:	2301      	movs	r3, #1
 800bb12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 800bb14:	f107 0314 	add.w	r3, r7, #20
 800bb18:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 800bb1a:	2307      	movs	r3, #7
 800bb1c:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800bb1e:	f107 0320 	add.w	r3, r7, #32
 800bb22:	2100      	movs	r1, #0
 800bb24:	4618      	mov	r0, r3
 800bb26:	f000 fef7 	bl	800c918 <hci_send_req>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	da01      	bge.n	800bb34 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 800bb30:	23ff      	movs	r3, #255	@ 0xff
 800bb32:	e014      	b.n	800bb5e <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800bb34:	7d3b      	ldrb	r3, [r7, #20]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d001      	beq.n	800bb3e <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 800bb3a:	7d3b      	ldrb	r3, [r7, #20]
 800bb3c:	e00f      	b.n	800bb5e <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 800bb3e:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800bb42:	b29a      	uxth	r2, r3
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800bb48:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800bb52:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800bb56:	b29a      	uxth	r2, r3
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3738      	adds	r7, #56	@ 0x38
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800bb66:	b590      	push	{r4, r7, lr}
 800bb68:	b095      	sub	sp, #84	@ 0x54
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	4608      	mov	r0, r1
 800bb70:	4611      	mov	r1, r2
 800bb72:	461a      	mov	r2, r3
 800bb74:	4623      	mov	r3, r4
 800bb76:	71fb      	strb	r3, [r7, #7]
 800bb78:	4603      	mov	r3, r0
 800bb7a:	80bb      	strh	r3, [r7, #4]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	807b      	strh	r3, [r7, #2]
 800bb80:	4613      	mov	r3, r2
 800bb82:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800bb84:	2300      	movs	r3, #0
 800bb86:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800bb8a:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800bb8e:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800bb92:	4413      	add	r3, r2
 800bb94:	330e      	adds	r3, #14
 800bb96:	2b28      	cmp	r3, #40	@ 0x28
 800bb98:	d901      	bls.n	800bb9e <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800bb9a:	2342      	movs	r3, #66	@ 0x42
 800bb9c:	e0c9      	b.n	800bd32 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 800bb9e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bba2:	3350      	adds	r3, #80	@ 0x50
 800bba4:	443b      	add	r3, r7
 800bba6:	79fa      	ldrb	r2, [r7, #7]
 800bba8:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800bbac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800bbb6:	88bb      	ldrh	r3, [r7, #4]
 800bbb8:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800bbba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bbbe:	f107 0208 	add.w	r2, r7, #8
 800bbc2:	4413      	add	r3, r2
 800bbc4:	88ba      	ldrh	r2, [r7, #4]
 800bbc6:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800bbc8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bbcc:	3302      	adds	r3, #2
 800bbce:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800bbd2:	887b      	ldrh	r3, [r7, #2]
 800bbd4:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800bbd6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bbda:	f107 0208 	add.w	r2, r7, #8
 800bbde:	4413      	add	r3, r2
 800bbe0:	887a      	ldrh	r2, [r7, #2]
 800bbe2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800bbe4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bbe8:	3302      	adds	r3, #2
 800bbea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 800bbee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bbf2:	3350      	adds	r3, #80	@ 0x50
 800bbf4:	443b      	add	r3, r7
 800bbf6:	79ba      	ldrb	r2, [r7, #6]
 800bbf8:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800bbfc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bc00:	3301      	adds	r3, #1
 800bc02:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800bc06:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bc0a:	3350      	adds	r3, #80	@ 0x50
 800bc0c:	443b      	add	r3, r7
 800bc0e:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800bc12:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800bc16:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 800bc20:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bc24:	3350      	adds	r3, #80	@ 0x50
 800bc26:	443b      	add	r3, r7
 800bc28:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800bc2c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800bc30:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bc34:	3301      	adds	r3, #1
 800bc36:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800bc3a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bc3e:	f107 0208 	add.w	r2, r7, #8
 800bc42:	4413      	add	r3, r2
 800bc44:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800bc48:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f002 fa1f 	bl	800e08e <memcpy>
  indx +=  LocalNameLen;
 800bc50:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800bc54:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800bc58:	4413      	add	r3, r2
 800bc5a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800bc5e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bc62:	3350      	adds	r3, #80	@ 0x50
 800bc64:	443b      	add	r3, r7
 800bc66:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 800bc6a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800bc6e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bc72:	3301      	adds	r3, #1
 800bc74:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800bc78:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bc7c:	f107 0208 	add.w	r2, r7, #8
 800bc80:	4413      	add	r3, r2
 800bc82:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 800bc86:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f002 fa00 	bl	800e08e <memcpy>
  indx +=  ServiceUUIDLen;  
 800bc8e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800bc92:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800bc96:	4413      	add	r3, r2
 800bc98:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800bc9c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800bca0:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800bca4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bca8:	f107 0208 	add.w	r2, r7, #8
 800bcac:	4413      	add	r3, r2
 800bcae:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 800bcb2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800bcb4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bcb8:	3302      	adds	r3, #2
 800bcba:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800bcbe:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800bcc2:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800bcc6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bcca:	f107 0208 	add.w	r2, r7, #8
 800bcce:	4413      	add	r3, r2
 800bcd0:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 800bcd4:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800bcd6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bcda:	3302      	adds	r3, #2
 800bcdc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bce0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800bce4:	2218      	movs	r2, #24
 800bce6:	2100      	movs	r1, #0
 800bce8:	4618      	mov	r0, r3
 800bcea:	f002 f951 	bl	800df90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800bcee:	233f      	movs	r3, #63	@ 0x3f
 800bcf0:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800bcf2:	2383      	movs	r3, #131	@ 0x83
 800bcf4:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 800bcf6:	f107 0308 	add.w	r3, r7, #8
 800bcfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 800bcfc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bd00:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 800bd02:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 800bd06:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800bd0c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800bd10:	2100      	movs	r1, #0
 800bd12:	4618      	mov	r0, r3
 800bd14:	f000 fe00 	bl	800c918 <hci_send_req>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	da01      	bge.n	800bd22 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 800bd1e:	23ff      	movs	r3, #255	@ 0xff
 800bd20:	e007      	b.n	800bd32 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 800bd22:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d002      	beq.n	800bd30 <aci_gap_set_discoverable+0x1ca>
    return status;
 800bd2a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bd2e:	e000      	b.n	800bd32 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3754      	adds	r7, #84	@ 0x54
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd90      	pop	{r4, r7, pc}

0800bd3a <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800bd3a:	b590      	push	{r4, r7, lr}
 800bd3c:	b091      	sub	sp, #68	@ 0x44
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	603a      	str	r2, [r7, #0]
 800bd42:	461a      	mov	r2, r3
 800bd44:	4603      	mov	r3, r0
 800bd46:	71fb      	strb	r3, [r7, #7]
 800bd48:	460b      	mov	r3, r1
 800bd4a:	71bb      	strb	r3, [r7, #6]
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800bd50:	79fb      	ldrb	r3, [r7, #7]
 800bd52:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800bd54:	79bb      	ldrb	r3, [r7, #6]
 800bd56:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 800bd58:	79bb      	ldrb	r3, [r7, #6]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d00a      	beq.n	800bd74 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800bd5e:	683a      	ldr	r2, [r7, #0]
 800bd60:	f107 030e 	add.w	r3, r7, #14
 800bd64:	6814      	ldr	r4, [r2, #0]
 800bd66:	6850      	ldr	r0, [r2, #4]
 800bd68:	6891      	ldr	r1, [r2, #8]
 800bd6a:	68d2      	ldr	r2, [r2, #12]
 800bd6c:	601c      	str	r4, [r3, #0]
 800bd6e:	6058      	str	r0, [r3, #4]
 800bd70:	6099      	str	r1, [r3, #8]
 800bd72:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800bd74:	797b      	ldrb	r3, [r7, #5]
 800bd76:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 800bd78:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800bd7c:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800bd7e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800bd82:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800bd86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd88:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 800bd8c:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800bd90:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bd94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800bd98:	2218      	movs	r2, #24
 800bd9a:	2100      	movs	r1, #0
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f002 f8f7 	bl	800df90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800bda2:	233f      	movs	r3, #63	@ 0x3f
 800bda4:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800bda6:	2386      	movs	r3, #134	@ 0x86
 800bda8:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 800bdaa:	f107 030c 	add.w	r3, r7, #12
 800bdae:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 800bdb0:	231a      	movs	r3, #26
 800bdb2:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 800bdb4:	f107 030b 	add.w	r3, r7, #11
 800bdb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800bdbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800bdc2:	2100      	movs	r1, #0
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f000 fda7 	bl	800c918 <hci_send_req>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	da01      	bge.n	800bdd4 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 800bdd0:	23ff      	movs	r3, #255	@ 0xff
 800bdd2:	e005      	b.n	800bde0 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 800bdd4:	7afb      	ldrb	r3, [r7, #11]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d001      	beq.n	800bdde <aci_gap_set_auth_requirement+0xa4>
    return status;
 800bdda:	7afb      	ldrb	r3, [r7, #11]
 800bddc:	e000      	b.n	800bde0 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 800bdde:	2300      	movs	r3, #0
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3744      	adds	r7, #68	@ 0x44
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd90      	pop	{r4, r7, pc}

0800bde8 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b092      	sub	sp, #72	@ 0x48
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	4603      	mov	r3, r0
 800bdf0:	6039      	str	r1, [r7, #0]
 800bdf2:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 800bdfa:	79fb      	ldrb	r3, [r7, #7]
 800bdfc:	2b1f      	cmp	r3, #31
 800bdfe:	d901      	bls.n	800be04 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 800be00:	2342      	movs	r3, #66	@ 0x42
 800be02:	e03e      	b.n	800be82 <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 800be04:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800be08:	3348      	adds	r3, #72	@ 0x48
 800be0a:	443b      	add	r3, r7
 800be0c:	79fa      	ldrb	r2, [r7, #7]
 800be0e:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 800be12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800be16:	3301      	adds	r3, #1
 800be18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800be1c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800be20:	f107 0208 	add.w	r2, r7, #8
 800be24:	4413      	add	r3, r2
 800be26:	79fa      	ldrb	r2, [r7, #7]
 800be28:	6839      	ldr	r1, [r7, #0]
 800be2a:	4618      	mov	r0, r3
 800be2c:	f002 f92f 	bl	800e08e <memcpy>
  indx +=  AdvLen;
 800be30:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800be34:	79fb      	ldrb	r3, [r7, #7]
 800be36:	4413      	add	r3, r2
 800be38:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800be3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800be40:	2218      	movs	r2, #24
 800be42:	2100      	movs	r1, #0
 800be44:	4618      	mov	r0, r3
 800be46:	f002 f8a3 	bl	800df90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800be4a:	233f      	movs	r3, #63	@ 0x3f
 800be4c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800be4e:	238e      	movs	r3, #142	@ 0x8e
 800be50:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 800be52:	f107 0308 	add.w	r3, r7, #8
 800be56:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 800be58:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800be5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 800be5e:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800be62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 800be64:	2301      	movs	r3, #1
 800be66:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 800be68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800be6c:	2100      	movs	r1, #0
 800be6e:	4618      	mov	r0, r3
 800be70:	f000 fd52 	bl	800c918 <hci_send_req>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	da01      	bge.n	800be7e <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 800be7a:	23ff      	movs	r3, #255	@ 0xff
 800be7c:	e001      	b.n	800be82 <aci_gap_update_adv_data+0x9a>
    
  return status;
 800be7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800be82:	4618      	mov	r0, r3
 800be84:	3748      	adds	r7, #72	@ 0x48
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}

0800be8a <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800be8a:	b580      	push	{r7, lr}
 800be8c:	b088      	sub	sp, #32
 800be8e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800be90:	f107 0308 	add.w	r3, r7, #8
 800be94:	2218      	movs	r2, #24
 800be96:	2100      	movs	r1, #0
 800be98:	4618      	mov	r0, r3
 800be9a:	f002 f879 	bl	800df90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800be9e:	233f      	movs	r3, #63	@ 0x3f
 800bea0:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800bea2:	f240 1301 	movw	r3, #257	@ 0x101
 800bea6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800bea8:	1dfb      	adds	r3, r7, #7
 800beaa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800beac:	2301      	movs	r3, #1
 800beae:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800beb0:	f107 0308 	add.w	r3, r7, #8
 800beb4:	2100      	movs	r1, #0
 800beb6:	4618      	mov	r0, r3
 800beb8:	f000 fd2e 	bl	800c918 <hci_send_req>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	da01      	bge.n	800bec6 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800bec2:	23ff      	movs	r3, #255	@ 0xff
 800bec4:	e000      	b.n	800bec8 <aci_gatt_init+0x3e>

  return status;
 800bec6:	79fb      	ldrb	r3, [r7, #7]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3720      	adds	r7, #32
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b090      	sub	sp, #64	@ 0x40
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6039      	str	r1, [r7, #0]
 800bed8:	4611      	mov	r1, r2
 800beda:	461a      	mov	r2, r3
 800bedc:	4603      	mov	r3, r0
 800bede:	71fb      	strb	r3, [r7, #7]
 800bee0:	460b      	mov	r3, r1
 800bee2:	71bb      	strb	r3, [r7, #6]
 800bee4:	4613      	mov	r3, r2
 800bee6:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800bee8:	2300      	movs	r3, #0
 800beea:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 800beee:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800bef2:	3340      	adds	r3, #64	@ 0x40
 800bef4:	443b      	add	r3, r7
 800bef6:	79fa      	ldrb	r2, [r7, #7]
 800bef8:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800befc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800bf00:	3301      	adds	r3, #1
 800bf02:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800bf06:	79fb      	ldrb	r3, [r7, #7]
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d103      	bne.n	800bf14 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 800bf0c:	2302      	movs	r3, #2
 800bf0e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bf12:	e002      	b.n	800bf1a <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 800bf14:	2310      	movs	r3, #16
 800bf16:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800bf1a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800bf1e:	f107 020c 	add.w	r2, r7, #12
 800bf22:	4413      	add	r3, r2
 800bf24:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800bf28:	6839      	ldr	r1, [r7, #0]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f002 f8af 	bl	800e08e <memcpy>
  indx +=  uuid_len;
 800bf30:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800bf34:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bf38:	4413      	add	r3, r2
 800bf3a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 800bf3e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800bf42:	3340      	adds	r3, #64	@ 0x40
 800bf44:	443b      	add	r3, r7
 800bf46:	79ba      	ldrb	r2, [r7, #6]
 800bf48:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800bf4c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800bf50:	3301      	adds	r3, #1
 800bf52:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 800bf56:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800bf5a:	3340      	adds	r3, #64	@ 0x40
 800bf5c:	443b      	add	r3, r7
 800bf5e:	797a      	ldrb	r2, [r7, #5]
 800bf60:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800bf64:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800bf68:	3301      	adds	r3, #1
 800bf6a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800bf6e:	f107 0320 	add.w	r3, r7, #32
 800bf72:	2203      	movs	r2, #3
 800bf74:	2100      	movs	r1, #0
 800bf76:	4618      	mov	r0, r3
 800bf78:	f002 f80a 	bl	800df90 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bf7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bf80:	2218      	movs	r2, #24
 800bf82:	2100      	movs	r1, #0
 800bf84:	4618      	mov	r0, r3
 800bf86:	f002 f803 	bl	800df90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800bf8a:	233f      	movs	r3, #63	@ 0x3f
 800bf8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800bf8e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800bf92:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 800bf94:	f107 030c 	add.w	r3, r7, #12
 800bf98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 800bf9a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800bf9e:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 800bfa0:	f107 0320 	add.w	r3, r7, #32
 800bfa4:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800bfa6:	2303      	movs	r3, #3
 800bfa8:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800bfaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bfae:	2100      	movs	r1, #0
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f000 fcb1 	bl	800c918 <hci_send_req>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	da01      	bge.n	800bfc0 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 800bfbc:	23ff      	movs	r3, #255	@ 0xff
 800bfbe:	e00c      	b.n	800bfda <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 800bfc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d002      	beq.n	800bfce <aci_gatt_add_serv+0xfe>
    return resp.status;
 800bfc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bfcc:	e005      	b.n	800bfda <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 800bfce:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfd6:	801a      	strh	r2, [r3, #0]

  return 0;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3740      	adds	r7, #64	@ 0x40
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b092      	sub	sp, #72	@ 0x48
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	603a      	str	r2, [r7, #0]
 800bfea:	461a      	mov	r2, r3
 800bfec:	4603      	mov	r3, r0
 800bfee:	80fb      	strh	r3, [r7, #6]
 800bff0:	460b      	mov	r3, r1
 800bff2:	717b      	strb	r3, [r7, #5]
 800bff4:	4613      	mov	r3, r2
 800bff6:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800bff8:	2300      	movs	r3, #0
 800bffa:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 800bffe:	88fb      	ldrh	r3, [r7, #6]
 800c000:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800c002:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c006:	f107 020c 	add.w	r2, r7, #12
 800c00a:	4413      	add	r3, r2
 800c00c:	88fa      	ldrh	r2, [r7, #6]
 800c00e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800c010:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c014:	3302      	adds	r3, #2
 800c016:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 800c01a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c01e:	3348      	adds	r3, #72	@ 0x48
 800c020:	443b      	add	r3, r7
 800c022:	797a      	ldrb	r2, [r7, #5]
 800c024:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800c028:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c02c:	3301      	adds	r3, #1
 800c02e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800c032:	797b      	ldrb	r3, [r7, #5]
 800c034:	2b01      	cmp	r3, #1
 800c036:	d103      	bne.n	800c040 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 800c038:	2302      	movs	r3, #2
 800c03a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c03e:	e002      	b.n	800c046 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 800c040:	2310      	movs	r3, #16
 800c042:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800c046:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c04a:	f107 020c 	add.w	r2, r7, #12
 800c04e:	4413      	add	r3, r2
 800c050:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800c054:	6839      	ldr	r1, [r7, #0]
 800c056:	4618      	mov	r0, r3
 800c058:	f002 f819 	bl	800e08e <memcpy>
  indx +=  uuid_len;
 800c05c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800c060:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c064:	4413      	add	r3, r2
 800c066:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 800c06a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c06e:	3348      	adds	r3, #72	@ 0x48
 800c070:	443b      	add	r3, r7
 800c072:	793a      	ldrb	r2, [r7, #4]
 800c074:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800c078:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c07c:	3301      	adds	r3, #1
 800c07e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 800c082:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c086:	3348      	adds	r3, #72	@ 0x48
 800c088:	443b      	add	r3, r7
 800c08a:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 800c08e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800c092:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c096:	3301      	adds	r3, #1
 800c098:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 800c09c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c0a0:	3348      	adds	r3, #72	@ 0x48
 800c0a2:	443b      	add	r3, r7
 800c0a4:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800c0a8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800c0ac:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 800c0b6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c0ba:	3348      	adds	r3, #72	@ 0x48
 800c0bc:	443b      	add	r3, r7
 800c0be:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 800c0c2:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800c0c6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 800c0d0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c0d4:	3348      	adds	r3, #72	@ 0x48
 800c0d6:	443b      	add	r3, r7
 800c0d8:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800c0dc:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800c0e0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 800c0ea:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c0ee:	3348      	adds	r3, #72	@ 0x48
 800c0f0:	443b      	add	r3, r7
 800c0f2:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800c0f6:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800c0fa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c0fe:	3301      	adds	r3, #1
 800c100:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800c104:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c108:	2203      	movs	r2, #3
 800c10a:	2100      	movs	r1, #0
 800c10c:	4618      	mov	r0, r3
 800c10e:	f001 ff3f 	bl	800df90 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c112:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c116:	2218      	movs	r2, #24
 800c118:	2100      	movs	r1, #0
 800c11a:	4618      	mov	r0, r3
 800c11c:	f001 ff38 	bl	800df90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800c120:	233f      	movs	r3, #63	@ 0x3f
 800c122:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800c124:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800c128:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 800c12a:	f107 030c 	add.w	r3, r7, #12
 800c12e:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 800c130:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c134:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 800c136:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800c13c:	2303      	movs	r3, #3
 800c13e:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800c140:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c144:	2100      	movs	r1, #0
 800c146:	4618      	mov	r0, r3
 800c148:	f000 fbe6 	bl	800c918 <hci_send_req>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	da01      	bge.n	800c156 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 800c152:	23ff      	movs	r3, #255	@ 0xff
 800c154:	e00c      	b.n	800c170 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 800c156:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d002      	beq.n	800c164 <aci_gatt_add_char+0x182>
    return resp.status;
 800c15e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c162:	e005      	b.n	800c170 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 800c164:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 800c168:	b29a      	uxth	r2, r3
 800c16a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c16c:	801a      	strh	r2, [r3, #0]

  return 0;
 800c16e:	2300      	movs	r3, #0
}
 800c170:	4618      	mov	r0, r3
 800c172:	3748      	adds	r7, #72	@ 0x48
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800c178:	b590      	push	{r4, r7, lr}
 800c17a:	b0ab      	sub	sp, #172	@ 0xac
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	4604      	mov	r4, r0
 800c180:	4608      	mov	r0, r1
 800c182:	4611      	mov	r1, r2
 800c184:	461a      	mov	r2, r3
 800c186:	4623      	mov	r3, r4
 800c188:	80fb      	strh	r3, [r7, #6]
 800c18a:	4603      	mov	r3, r0
 800c18c:	80bb      	strh	r3, [r7, #4]
 800c18e:	460b      	mov	r3, r1
 800c190:	70fb      	strb	r3, [r7, #3]
 800c192:	4613      	mov	r3, r2
 800c194:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800c196:	2300      	movs	r3, #0
 800c198:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800c19c:	78bb      	ldrb	r3, [r7, #2]
 800c19e:	2b7a      	cmp	r3, #122	@ 0x7a
 800c1a0:	d901      	bls.n	800c1a6 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 800c1a2:	2342      	movs	r3, #66	@ 0x42
 800c1a4:	e074      	b.n	800c290 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 800c1a6:	88fb      	ldrh	r3, [r7, #6]
 800c1a8:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800c1aa:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c1ae:	f107 0208 	add.w	r2, r7, #8
 800c1b2:	4413      	add	r3, r2
 800c1b4:	88fa      	ldrh	r2, [r7, #6]
 800c1b6:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800c1b8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c1bc:	3302      	adds	r3, #2
 800c1be:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 800c1c2:	88bb      	ldrh	r3, [r7, #4]
 800c1c4:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800c1c6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c1ca:	f107 0208 	add.w	r2, r7, #8
 800c1ce:	4413      	add	r3, r2
 800c1d0:	88ba      	ldrh	r2, [r7, #4]
 800c1d2:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800c1d4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c1d8:	3302      	adds	r3, #2
 800c1da:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 800c1de:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c1e2:	33a8      	adds	r3, #168	@ 0xa8
 800c1e4:	443b      	add	r3, r7
 800c1e6:	78fa      	ldrb	r2, [r7, #3]
 800c1e8:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800c1ec:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 800c1f6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c1fa:	33a8      	adds	r3, #168	@ 0xa8
 800c1fc:	443b      	add	r3, r7
 800c1fe:	78ba      	ldrb	r2, [r7, #2]
 800c200:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800c204:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c208:	3301      	adds	r3, #1
 800c20a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800c20e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c212:	f107 0208 	add.w	r2, r7, #8
 800c216:	4413      	add	r3, r2
 800c218:	78ba      	ldrb	r2, [r7, #2]
 800c21a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800c21e:	4618      	mov	r0, r3
 800c220:	f001 ff35 	bl	800e08e <memcpy>
  indx +=  charValueLen;
 800c224:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800c228:	78bb      	ldrb	r3, [r7, #2]
 800c22a:	4413      	add	r3, r2
 800c22c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c230:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800c234:	2218      	movs	r2, #24
 800c236:	2100      	movs	r1, #0
 800c238:	4618      	mov	r0, r3
 800c23a:	f001 fea9 	bl	800df90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800c23e:	233f      	movs	r3, #63	@ 0x3f
 800c240:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800c244:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800c248:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 800c24c:	f107 0308 	add.w	r3, r7, #8
 800c250:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 800c254:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 800c25c:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 800c260:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 800c264:	2301      	movs	r3, #1
 800c266:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800c26a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800c26e:	2100      	movs	r1, #0
 800c270:	4618      	mov	r0, r3
 800c272:	f000 fb51 	bl	800c918 <hci_send_req>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	da01      	bge.n	800c280 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 800c27c:	23ff      	movs	r3, #255	@ 0xff
 800c27e:	e007      	b.n	800c290 <aci_gatt_update_char_value+0x118>

  if (status) {
 800c280:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800c284:	2b00      	cmp	r3, #0
 800c286:	d002      	beq.n	800c28e <aci_gatt_update_char_value+0x116>
    return status;
 800c288:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800c28c:	e000      	b.n	800c290 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 800c28e:	2300      	movs	r3, #0
}
 800c290:	4618      	mov	r0, r3
 800c292:	37ac      	adds	r7, #172	@ 0xac
 800c294:	46bd      	mov	sp, r7
 800c296:	bd90      	pop	{r4, r7, pc}

0800c298 <aci_gatt_write_response>:
                                   uint16_t attr_handle,
                                   uint8_t write_status,
                                   uint8_t err_code,
                                   uint8_t att_val_len,
                                   uint8_t *att_val)
{
 800c298:	b590      	push	{r4, r7, lr}
 800c29a:	b0ab      	sub	sp, #172	@ 0xac
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	4604      	mov	r4, r0
 800c2a0:	4608      	mov	r0, r1
 800c2a2:	4611      	mov	r1, r2
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	4623      	mov	r3, r4
 800c2a8:	80fb      	strh	r3, [r7, #6]
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	80bb      	strh	r3, [r7, #4]
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	70fb      	strb	r3, [r7, #3]
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  
  if ((att_val_len+7) > HCI_MAX_PAYLOAD_SIZE)
 800c2bc:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 800c2c0:	2b79      	cmp	r3, #121	@ 0x79
 800c2c2:	d901      	bls.n	800c2c8 <aci_gatt_write_response+0x30>
    return BLE_STATUS_INVALID_PARAMS;
 800c2c4:	2342      	movs	r3, #66	@ 0x42
 800c2c6:	e083      	b.n	800c3d0 <aci_gatt_write_response+0x138>

  conn_handle = htobs(conn_handle);  
 800c2c8:	88fb      	ldrh	r3, [r7, #6]
 800c2ca:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 800c2cc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c2d0:	f107 0208 	add.w	r2, r7, #8
 800c2d4:	4413      	add	r3, r2
 800c2d6:	88fa      	ldrh	r2, [r7, #6]
 800c2d8:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800c2da:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c2de:	3302      	adds	r3, #2
 800c2e0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  attr_handle = htobs(attr_handle);
 800c2e4:	88bb      	ldrh	r3, [r7, #4]
 800c2e6:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 800c2e8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c2ec:	f107 0208 	add.w	r2, r7, #8
 800c2f0:	4413      	add	r3, r2
 800c2f2:	88ba      	ldrh	r2, [r7, #4]
 800c2f4:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800c2f6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c2fa:	3302      	adds	r3, #2
 800c2fc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = write_status;
 800c300:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c304:	33a8      	adds	r3, #168	@ 0xa8
 800c306:	443b      	add	r3, r7
 800c308:	78fa      	ldrb	r2, [r7, #3]
 800c30a:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx += 1;
 800c30e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c312:	3301      	adds	r3, #1
 800c314:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = err_code;
 800c318:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c31c:	33a8      	adds	r3, #168	@ 0xa8
 800c31e:	443b      	add	r3, r7
 800c320:	78ba      	ldrb	r2, [r7, #2]
 800c322:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx += 1;
 800c326:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c32a:	3301      	adds	r3, #1
 800c32c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = att_val_len;
 800c330:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c334:	33a8      	adds	r3, #168	@ 0xa8
 800c336:	443b      	add	r3, r7
 800c338:	f897 20b8 	ldrb.w	r2, [r7, #184]	@ 0xb8
 800c33c:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx += 1;
 800c340:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c344:	3301      	adds	r3, #1
 800c346:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  BLUENRG_memcpy(buffer + indx, att_val, att_val_len);
 800c34a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c34e:	f107 0208 	add.w	r2, r7, #8
 800c352:	4413      	add	r3, r2
 800c354:	f897 20b8 	ldrb.w	r2, [r7, #184]	@ 0xb8
 800c358:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800c35c:	4618      	mov	r0, r3
 800c35e:	f001 fe96 	bl	800e08e <memcpy>
  indx += att_val_len;
 800c362:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800c366:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 800c36a:	4413      	add	r3, r2
 800c36c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c370:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800c374:	2218      	movs	r2, #24
 800c376:	2100      	movs	r1, #0
 800c378:	4618      	mov	r0, r3
 800c37a:	f001 fe09 	bl	800df90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800c37e:	233f      	movs	r3, #63	@ 0x3f
 800c380:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_WRITE_RESPONSE;
 800c384:	f44f 7393 	mov.w	r3, #294	@ 0x126
 800c388:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 800c38c:	f107 0308 	add.w	r3, r7, #8
 800c390:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 800c394:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c398:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 800c39c:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 800c3a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800c3aa:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f000 fab1 	bl	800c918 <hci_send_req>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	da01      	bge.n	800c3c0 <aci_gatt_write_response+0x128>
    return BLE_STATUS_TIMEOUT;
 800c3bc:	23ff      	movs	r3, #255	@ 0xff
 800c3be:	e007      	b.n	800c3d0 <aci_gatt_write_response+0x138>

  if (status) {
 800c3c0:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d002      	beq.n	800c3ce <aci_gatt_write_response+0x136>
    return status;
 800c3c8:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800c3cc:	e000      	b.n	800c3d0 <aci_gatt_write_response+0x138>
  }

  return 0;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	37ac      	adds	r7, #172	@ 0xac
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd90      	pop	{r4, r7, pc}

0800c3d8 <aci_gatt_allow_read>:

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b08a      	sub	sp, #40	@ 0x28
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	4603      	mov	r3, r0
 800c3e0:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800c3e2:	88fb      	ldrh	r3, [r7, #6]
 800c3e4:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 800c3e6:	f107 0310 	add.w	r3, r7, #16
 800c3ea:	2218      	movs	r2, #24
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f001 fdce 	bl	800df90 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 800c3f4:	233f      	movs	r3, #63	@ 0x3f
 800c3f6:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800c3f8:	f240 1327 	movw	r3, #295	@ 0x127
 800c3fc:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800c3fe:	f107 030c 	add.w	r3, r7, #12
 800c402:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800c404:	2302      	movs	r3, #2
 800c406:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 800c408:	f107 030b 	add.w	r3, r7, #11
 800c40c:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 800c40e:	2301      	movs	r3, #1
 800c410:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 800c412:	f107 0310 	add.w	r3, r7, #16
 800c416:	2100      	movs	r1, #0
 800c418:	4618      	mov	r0, r3
 800c41a:	f000 fa7d 	bl	800c918 <hci_send_req>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	da01      	bge.n	800c428 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800c424:	23ff      	movs	r3, #255	@ 0xff
 800c426:	e000      	b.n	800c42a <aci_gatt_allow_read+0x52>

    return status;
 800c428:	7afb      	ldrb	r3, [r7, #11]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3728      	adds	r7, #40	@ 0x28
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b0ac      	sub	sp, #176	@ 0xb0
 800c436:	af00      	add	r7, sp, #0
 800c438:	60ba      	str	r2, [r7, #8]
 800c43a:	607b      	str	r3, [r7, #4]
 800c43c:	4603      	mov	r3, r0
 800c43e:	73fb      	strb	r3, [r7, #15]
 800c440:	460b      	mov	r3, r1
 800c442:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 800c444:	7bfb      	ldrb	r3, [r7, #15]
 800c446:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c44a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800c44e:	2218      	movs	r2, #24
 800c450:	2100      	movs	r1, #0
 800c452:	4618      	mov	r0, r3
 800c454:	f001 fd9c 	bl	800df90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800c458:	233f      	movs	r3, #63	@ 0x3f
 800c45a:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800c45e:	230d      	movs	r3, #13
 800c460:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 800c464:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800c468:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 800c46c:	2301      	movs	r3, #1
 800c46e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 800c472:	f107 0314 	add.w	r3, r7, #20
 800c476:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 800c47a:	2380      	movs	r3, #128	@ 0x80
 800c47c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 800c480:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800c484:	2100      	movs	r1, #0
 800c486:	4618      	mov	r0, r3
 800c488:	f000 fa46 	bl	800c918 <hci_send_req>
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	da01      	bge.n	800c496 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 800c492:	23ff      	movs	r3, #255	@ 0xff
 800c494:	e01e      	b.n	800c4d4 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 800c496:	7d3b      	ldrb	r3, [r7, #20]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d001      	beq.n	800c4a0 <aci_hal_read_config_data+0x6e>
    return rp.status;
 800c49c:	7d3b      	ldrb	r3, [r7, #20]
 800c49e:	e019      	b.n	800c4d4 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 800c4a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	b2da      	uxtb	r2, r3
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	89bb      	ldrh	r3, [r7, #12]
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d201      	bcs.n	800c4be <aci_hal_read_config_data+0x8c>
 800c4ba:	89ba      	ldrh	r2, [r7, #12]
 800c4bc:	e002      	b.n	800c4c4 <aci_hal_read_config_data+0x92>
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	f107 0314 	add.w	r3, r7, #20
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f001 fdde 	bl	800e08e <memcpy>
  
  return 0;
 800c4d2:	2300      	movs	r3, #0
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	37b0      	adds	r7, #176	@ 0xb0
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b08a      	sub	sp, #40	@ 0x28
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	460a      	mov	r2, r1
 800c4e6:	71fb      	strb	r3, [r7, #7]
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800c4ec:	79fb      	ldrb	r3, [r7, #7]
 800c4ee:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800c4f0:	79bb      	ldrb	r3, [r7, #6]
 800c4f2:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c4f4:	f107 0310 	add.w	r3, r7, #16
 800c4f8:	2218      	movs	r2, #24
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f001 fd47 	bl	800df90 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800c502:	233f      	movs	r3, #63	@ 0x3f
 800c504:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800c506:	230f      	movs	r3, #15
 800c508:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800c50a:	f107 030c 	add.w	r3, r7, #12
 800c50e:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800c510:	2302      	movs	r3, #2
 800c512:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800c514:	f107 030b 	add.w	r3, r7, #11
 800c518:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800c51a:	2301      	movs	r3, #1
 800c51c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800c51e:	f107 0310 	add.w	r3, r7, #16
 800c522:	2100      	movs	r1, #0
 800c524:	4618      	mov	r0, r3
 800c526:	f000 f9f7 	bl	800c918 <hci_send_req>
 800c52a:	4603      	mov	r3, r0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	da01      	bge.n	800c534 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800c530:	23ff      	movs	r3, #255	@ 0xff
 800c532:	e000      	b.n	800c536 <aci_hal_set_tx_power_level+0x5a>

  return status;
 800c534:	7afb      	ldrb	r3, [r7, #11]
}
 800c536:	4618      	mov	r0, r3
 800c538:	3728      	adds	r7, #40	@ 0x28
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800c53e:	b590      	push	{r4, r7, lr}
 800c540:	b089      	sub	sp, #36	@ 0x24
 800c542:	af02      	add	r7, sp, #8
 800c544:	6078      	str	r0, [r7, #4]
 800c546:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800c548:	f107 0410 	add.w	r4, r7, #16
 800c54c:	f107 0215 	add.w	r2, r7, #21
 800c550:	f107 0112 	add.w	r1, r7, #18
 800c554:	f107 0016 	add.w	r0, r7, #22
 800c558:	f107 030e 	add.w	r3, r7, #14
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	4623      	mov	r3, r4
 800c560:	f000 f853 	bl	800c60a <hci_le_read_local_version>
 800c564:	4603      	mov	r3, r0
 800c566:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800c568:	7dfb      	ldrb	r3, [r7, #23]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d126      	bne.n	800c5bc <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800c56e:	8a7b      	ldrh	r3, [r7, #18]
 800c570:	0a1b      	lsrs	r3, r3, #8
 800c572:	b29b      	uxth	r3, r3
 800c574:	b2da      	uxtb	r2, r3
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800c57a:	8a7b      	ldrh	r3, [r7, #18]
 800c57c:	021b      	lsls	r3, r3, #8
 800c57e:	b29a      	uxth	r2, r3
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	881b      	ldrh	r3, [r3, #0]
 800c588:	b21a      	sxth	r2, r3
 800c58a:	89fb      	ldrh	r3, [r7, #14]
 800c58c:	091b      	lsrs	r3, r3, #4
 800c58e:	b29b      	uxth	r3, r3
 800c590:	011b      	lsls	r3, r3, #4
 800c592:	b21b      	sxth	r3, r3
 800c594:	b2db      	uxtb	r3, r3
 800c596:	b21b      	sxth	r3, r3
 800c598:	4313      	orrs	r3, r2
 800c59a:	b21b      	sxth	r3, r3
 800c59c:	b29a      	uxth	r2, r3
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	881b      	ldrh	r3, [r3, #0]
 800c5a6:	b21a      	sxth	r2, r3
 800c5a8:	89fb      	ldrh	r3, [r7, #14]
 800c5aa:	b21b      	sxth	r3, r3
 800c5ac:	f003 030f 	and.w	r3, r3, #15
 800c5b0:	b21b      	sxth	r3, r3
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	b21b      	sxth	r3, r3
 800c5b6:	b29a      	uxth	r2, r3
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800c5bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	371c      	adds	r7, #28
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd90      	pop	{r4, r7, pc}

0800c5c6 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b088      	sub	sp, #32
 800c5ca:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c5cc:	f107 0308 	add.w	r3, r7, #8
 800c5d0:	2218      	movs	r2, #24
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f001 fcdb 	bl	800df90 <memset>
  rq.ogf = OGF_HOST_CTL;
 800c5da:	2303      	movs	r3, #3
 800c5dc:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800c5de:	2303      	movs	r3, #3
 800c5e0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c5e2:	1dfb      	adds	r3, r7, #7
 800c5e4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800c5ea:	f107 0308 	add.w	r3, r7, #8
 800c5ee:	2100      	movs	r1, #0
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f000 f991 	bl	800c918 <hci_send_req>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	da01      	bge.n	800c600 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800c5fc:	23ff      	movs	r3, #255	@ 0xff
 800c5fe:	e000      	b.n	800c602 <hci_reset+0x3c>
  
  return status;  
 800c600:	79fb      	ldrb	r3, [r7, #7]
}
 800c602:	4618      	mov	r0, r3
 800c604:	3720      	adds	r7, #32
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}

0800c60a <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b08e      	sub	sp, #56	@ 0x38
 800c60e:	af00      	add	r7, sp, #0
 800c610:	60f8      	str	r0, [r7, #12]
 800c612:	60b9      	str	r1, [r7, #8]
 800c614:	607a      	str	r2, [r7, #4]
 800c616:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800c618:	f107 0314 	add.w	r3, r7, #20
 800c61c:	2209      	movs	r2, #9
 800c61e:	2100      	movs	r1, #0
 800c620:	4618      	mov	r0, r3
 800c622:	f001 fcb5 	bl	800df90 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c626:	f107 0320 	add.w	r3, r7, #32
 800c62a:	2218      	movs	r2, #24
 800c62c:	2100      	movs	r1, #0
 800c62e:	4618      	mov	r0, r3
 800c630:	f001 fcae 	bl	800df90 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800c634:	2304      	movs	r3, #4
 800c636:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800c638:	2301      	movs	r3, #1
 800c63a:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 800c63c:	2300      	movs	r3, #0
 800c63e:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 800c640:	2300      	movs	r3, #0
 800c642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 800c644:	f107 0314 	add.w	r3, r7, #20
 800c648:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800c64a:	2309      	movs	r3, #9
 800c64c:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800c64e:	f107 0320 	add.w	r3, r7, #32
 800c652:	2100      	movs	r1, #0
 800c654:	4618      	mov	r0, r3
 800c656:	f000 f95f 	bl	800c918 <hci_send_req>
 800c65a:	4603      	mov	r3, r0
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	da01      	bge.n	800c664 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800c660:	23ff      	movs	r3, #255	@ 0xff
 800c662:	e018      	b.n	800c696 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800c664:	7d3b      	ldrb	r3, [r7, #20]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d001      	beq.n	800c66e <hci_le_read_local_version+0x64>
    return resp.status;
 800c66a:	7d3b      	ldrb	r3, [r7, #20]
 800c66c:	e013      	b.n	800c696 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800c66e:	7d7a      	ldrb	r2, [r7, #21]
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800c674:	8afa      	ldrh	r2, [r7, #22]
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800c67a:	7e3a      	ldrb	r2, [r7, #24]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800c680:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800c684:	b29a      	uxth	r2, r3
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800c68a:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800c68e:	b29a      	uxth	r2, r3
 800c690:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c692:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800c694:	2300      	movs	r3, #0
}
 800c696:	4618      	mov	r0, r3
 800c698:	3738      	adds	r7, #56	@ 0x38
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}

0800c69e <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b092      	sub	sp, #72	@ 0x48
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	6039      	str	r1, [r7, #0]
 800c6a8:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800c6aa:	f107 0310 	add.w	r3, r7, #16
 800c6ae:	2220      	movs	r2, #32
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f001 fc6c 	bl	800df90 <memset>
  scan_resp_cp.length = length;
 800c6b8:	79fb      	ldrb	r3, [r7, #7]
 800c6ba:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800c6bc:	79fb      	ldrb	r3, [r7, #7]
 800c6be:	2b1f      	cmp	r3, #31
 800c6c0:	bf28      	it	cs
 800c6c2:	231f      	movcs	r3, #31
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	f107 0310 	add.w	r3, r7, #16
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	6839      	ldr	r1, [r7, #0]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f001 fcdc 	bl	800e08e <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c6d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c6da:	2218      	movs	r2, #24
 800c6dc:	2100      	movs	r1, #0
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f001 fc56 	bl	800df90 <memset>
  rq.ogf = OGF_LE_CTL;
 800c6e4:	2308      	movs	r3, #8
 800c6e6:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800c6e8:	2309      	movs	r3, #9
 800c6ea:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 800c6ec:	f107 0310 	add.w	r3, r7, #16
 800c6f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800c6f2:	2320      	movs	r3, #32
 800c6f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 800c6f6:	f107 030f 	add.w	r3, r7, #15
 800c6fa:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800c700:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c704:	2100      	movs	r1, #0
 800c706:	4618      	mov	r0, r3
 800c708:	f000 f906 	bl	800c918 <hci_send_req>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	da01      	bge.n	800c716 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800c712:	23ff      	movs	r3, #255	@ 0xff
 800c714:	e000      	b.n	800c718 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800c716:	7bfb      	ldrb	r3, [r7, #15]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3748      	adds	r7, #72	@ 0x48
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800c720:	b480      	push	{r7}
 800c722:	b085      	sub	sp, #20
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	3308      	adds	r3, #8
 800c72c:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	2b04      	cmp	r3, #4
 800c734:	d001      	beq.n	800c73a <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800c736:	2301      	movs	r3, #1
 800c738:	e00c      	b.n	800c754 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	3302      	adds	r3, #2
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	461a      	mov	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c748:	3b03      	subs	r3, #3
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d001      	beq.n	800c752 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800c74e:	2302      	movs	r3, #2
 800c750:	e000      	b.n	800c754 <verify_packet+0x34>
  
  return 0;      
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b0a6      	sub	sp, #152	@ 0x98
 800c764:	af00      	add	r7, sp, #0
 800c766:	607b      	str	r3, [r7, #4]
 800c768:	4603      	mov	r3, r0
 800c76a:	81fb      	strh	r3, [r7, #14]
 800c76c:	460b      	mov	r3, r1
 800c76e:	81bb      	strh	r3, [r7, #12]
 800c770:	4613      	mov	r3, r2
 800c772:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800c774:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c77c:	b21a      	sxth	r2, r3
 800c77e:	89fb      	ldrh	r3, [r7, #14]
 800c780:	029b      	lsls	r3, r3, #10
 800c782:	b21b      	sxth	r3, r3
 800c784:	4313      	orrs	r3, r2
 800c786:	b21b      	sxth	r3, r3
 800c788:	b29b      	uxth	r3, r3
 800c78a:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800c78c:	7afb      	ldrb	r3, [r7, #11]
 800c78e:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800c790:	2301      	movs	r3, #1
 800c792:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800c794:	f107 0318 	add.w	r3, r7, #24
 800c798:	3301      	adds	r3, #1
 800c79a:	461a      	mov	r2, r3
 800c79c:	f107 0314 	add.w	r3, r7, #20
 800c7a0:	8819      	ldrh	r1, [r3, #0]
 800c7a2:	789b      	ldrb	r3, [r3, #2]
 800c7a4:	8011      	strh	r1, [r2, #0]
 800c7a6:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800c7a8:	f107 0318 	add.w	r3, r7, #24
 800c7ac:	3304      	adds	r3, #4
 800c7ae:	7afa      	ldrb	r2, [r7, #11]
 800c7b0:	6879      	ldr	r1, [r7, #4]
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f001 fc6b 	bl	800e08e <memcpy>
  
  if (hciContext.io.Send)
 800c7b8:	4b08      	ldr	r3, [pc, #32]	@ (800c7dc <send_cmd+0x7c>)
 800c7ba:	691b      	ldr	r3, [r3, #16]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d009      	beq.n	800c7d4 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800c7c0:	4b06      	ldr	r3, [pc, #24]	@ (800c7dc <send_cmd+0x7c>)
 800c7c2:	691b      	ldr	r3, [r3, #16]
 800c7c4:	7afa      	ldrb	r2, [r7, #11]
 800c7c6:	b292      	uxth	r2, r2
 800c7c8:	3204      	adds	r2, #4
 800c7ca:	b291      	uxth	r1, r2
 800c7cc:	f107 0218 	add.w	r2, r7, #24
 800c7d0:	4610      	mov	r0, r2
 800c7d2:	4798      	blx	r3
  }
}
 800c7d4:	bf00      	nop
 800c7d6:	3798      	adds	r7, #152	@ 0x98
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	20000f68 	.word	0x20000f68

0800c7e0 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800c7ea:	e00a      	b.n	800c802 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800c7ec:	f107 030c 	add.w	r3, r7, #12
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	6838      	ldr	r0, [r7, #0]
 800c7f4:	f000 fae8 	bl	800cdc8 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 fa4f 	bl	800cca0 <list_insert_head>
  while (!list_is_empty(src_list))
 800c802:	6838      	ldr	r0, [r7, #0]
 800c804:	f000 fa2a 	bl	800cc5c <list_is_empty>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d0ee      	beq.n	800c7ec <move_list+0xc>
  }
}
 800c80e:	bf00      	nop
 800c810:	bf00      	nop
 800c812:	3710      	adds	r7, #16
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800c81e:	e009      	b.n	800c834 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800c820:	1d3b      	adds	r3, r7, #4
 800c822:	4619      	mov	r1, r3
 800c824:	4809      	ldr	r0, [pc, #36]	@ (800c84c <free_event_list+0x34>)
 800c826:	f000 faa8 	bl	800cd7a <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4619      	mov	r1, r3
 800c82e:	4808      	ldr	r0, [pc, #32]	@ (800c850 <free_event_list+0x38>)
 800c830:	f000 fa5c 	bl	800ccec <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800c834:	4806      	ldr	r0, [pc, #24]	@ (800c850 <free_event_list+0x38>)
 800c836:	f000 faee 	bl	800ce16 <list_get_size>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	ddef      	ble.n	800c820 <free_event_list+0x8>
  }
}
 800c840:	bf00      	nop
 800c842:	bf00      	nop
 800c844:	3708      	adds	r7, #8
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	20000ca4 	.word	0x20000ca4
 800c850:	20000c9c 	.word	0x20000c9c

0800c854 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d002      	beq.n	800c86a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800c864:	4a18      	ldr	r2, [pc, #96]	@ (800c8c8 <hci_init+0x74>)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800c86a:	4818      	ldr	r0, [pc, #96]	@ (800c8cc <hci_init+0x78>)
 800c86c:	f000 f9e6 	bl	800cc3c <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800c870:	4817      	ldr	r0, [pc, #92]	@ (800c8d0 <hci_init+0x7c>)
 800c872:	f000 f9e3 	bl	800cc3c <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800c876:	f7f5 f89d 	bl	80019b4 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800c87a:	2300      	movs	r3, #0
 800c87c:	73fb      	strb	r3, [r7, #15]
 800c87e:	e00c      	b.n	800c89a <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800c880:	7bfb      	ldrb	r3, [r7, #15]
 800c882:	228c      	movs	r2, #140	@ 0x8c
 800c884:	fb02 f303 	mul.w	r3, r2, r3
 800c888:	4a12      	ldr	r2, [pc, #72]	@ (800c8d4 <hci_init+0x80>)
 800c88a:	4413      	add	r3, r2
 800c88c:	4619      	mov	r1, r3
 800c88e:	480f      	ldr	r0, [pc, #60]	@ (800c8cc <hci_init+0x78>)
 800c890:	f000 fa2c 	bl	800ccec <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800c894:	7bfb      	ldrb	r3, [r7, #15]
 800c896:	3301      	adds	r3, #1
 800c898:	73fb      	strb	r3, [r7, #15]
 800c89a:	7bfb      	ldrb	r3, [r7, #15]
 800c89c:	2b04      	cmp	r3, #4
 800c89e:	d9ef      	bls.n	800c880 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800c8a0:	4b09      	ldr	r3, [pc, #36]	@ (800c8c8 <hci_init+0x74>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d003      	beq.n	800c8b0 <hci_init+0x5c>
 800c8a8:	4b07      	ldr	r3, [pc, #28]	@ (800c8c8 <hci_init+0x74>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800c8b0:	4b05      	ldr	r3, [pc, #20]	@ (800c8c8 <hci_init+0x74>)
 800c8b2:	689b      	ldr	r3, [r3, #8]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d002      	beq.n	800c8be <hci_init+0x6a>
 800c8b8:	4b03      	ldr	r3, [pc, #12]	@ (800c8c8 <hci_init+0x74>)
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	4798      	blx	r3
}
 800c8be:	bf00      	nop
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	20000f68 	.word	0x20000f68
 800c8cc:	20000c9c 	.word	0x20000c9c
 800c8d0:	20000ca4 	.word	0x20000ca4
 800c8d4:	20000cac 	.word	0x20000cac

0800c8d8 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4a0b      	ldr	r2, [pc, #44]	@ (800c914 <hci_register_io_bus+0x3c>)
 800c8e6:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	4a09      	ldr	r2, [pc, #36]	@ (800c914 <hci_register_io_bus+0x3c>)
 800c8ee:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	4a07      	ldr	r2, [pc, #28]	@ (800c914 <hci_register_io_bus+0x3c>)
 800c8f6:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	699b      	ldr	r3, [r3, #24]
 800c8fc:	4a05      	ldr	r2, [pc, #20]	@ (800c914 <hci_register_io_bus+0x3c>)
 800c8fe:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	689b      	ldr	r3, [r3, #8]
 800c904:	4a03      	ldr	r2, [pc, #12]	@ (800c914 <hci_register_io_bus+0x3c>)
 800c906:	6093      	str	r3, [r2, #8]
}
 800c908:	bf00      	nop
 800c90a:	370c      	adds	r7, #12
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr
 800c914:	20000f68 	.word	0x20000f68

0800c918 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b08e      	sub	sp, #56	@ 0x38
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	460b      	mov	r3, r1
 800c922:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	885b      	ldrh	r3, [r3, #2]
 800c928:	b21b      	sxth	r3, r3
 800c92a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c92e:	b21a      	sxth	r2, r3
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	881b      	ldrh	r3, [r3, #0]
 800c934:	029b      	lsls	r3, r3, #10
 800c936:	b21b      	sxth	r3, r3
 800c938:	4313      	orrs	r3, r2
 800c93a:	b21b      	sxth	r3, r3
 800c93c:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800c93e:	2300      	movs	r3, #0
 800c940:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800c942:	f107 0308 	add.w	r3, r7, #8
 800c946:	4618      	mov	r0, r3
 800c948:	f000 f978 	bl	800cc3c <list_init_head>

  free_event_list();
 800c94c:	f7ff ff64 	bl	800c818 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	8818      	ldrh	r0, [r3, #0]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	8859      	ldrh	r1, [r3, #2]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	f7ff fefd 	bl	800c760 <send_cmd>
  
  if (async)
 800c966:	78fb      	ldrb	r3, [r7, #3]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d001      	beq.n	800c970 <hci_send_req+0x58>
  {
    return 0;
 800c96c:	2300      	movs	r3, #0
 800c96e:	e0e2      	b.n	800cb36 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800c970:	f7f7 fade 	bl	8003f30 <HAL_GetTick>
 800c974:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800c976:	f7f7 fadb 	bl	8003f30 <HAL_GetTick>
 800c97a:	4602      	mov	r2, r0
 800c97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c97e:	1ad3      	subs	r3, r2, r3
 800c980:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c984:	f200 80b3 	bhi.w	800caee <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800c988:	486d      	ldr	r0, [pc, #436]	@ (800cb40 <hci_send_req+0x228>)
 800c98a:	f000 f967 	bl	800cc5c <list_is_empty>
 800c98e:	4603      	mov	r3, r0
 800c990:	2b00      	cmp	r3, #0
 800c992:	d000      	beq.n	800c996 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800c994:	e7ef      	b.n	800c976 <hci_send_req+0x5e>
      {
        break;
 800c996:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800c998:	f107 0310 	add.w	r3, r7, #16
 800c99c:	4619      	mov	r1, r3
 800c99e:	4868      	ldr	r0, [pc, #416]	@ (800cb40 <hci_send_req+0x228>)
 800c9a0:	f000 f9eb 	bl	800cd7a <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	3308      	adds	r3, #8
 800c9a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800c9aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	2b04      	cmp	r3, #4
 800c9b0:	d17f      	bne.n	800cab2 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 800c9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	3308      	adds	r3, #8
 800c9bc:	3303      	adds	r3, #3
 800c9be:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c9c6:	3b03      	subs	r3, #3
 800c9c8:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800c9ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	2b3e      	cmp	r3, #62	@ 0x3e
 800c9d0:	d04c      	beq.n	800ca6c <hci_send_req+0x154>
 800c9d2:	2b3e      	cmp	r3, #62	@ 0x3e
 800c9d4:	dc68      	bgt.n	800caa8 <hci_send_req+0x190>
 800c9d6:	2b10      	cmp	r3, #16
 800c9d8:	f000 808b 	beq.w	800caf2 <hci_send_req+0x1da>
 800c9dc:	2b10      	cmp	r3, #16
 800c9de:	dc63      	bgt.n	800caa8 <hci_send_req+0x190>
 800c9e0:	2b0e      	cmp	r3, #14
 800c9e2:	d023      	beq.n	800ca2c <hci_send_req+0x114>
 800c9e4:	2b0f      	cmp	r3, #15
 800c9e6:	d15f      	bne.n	800caa8 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ea:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800c9ec:	69bb      	ldr	r3, [r7, #24]
 800c9ee:	885b      	ldrh	r3, [r3, #2]
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d17e      	bne.n	800caf6 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	2b0f      	cmp	r3, #15
 800c9fe:	d004      	beq.n	800ca0a <hci_send_req+0xf2>
          if (cs->status) {
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d051      	beq.n	800caac <hci_send_req+0x194>
            goto failed;
 800ca08:	e078      	b.n	800cafc <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	695a      	ldr	r2, [r3, #20]
 800ca0e:	6a3b      	ldr	r3, [r7, #32]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	bf28      	it	cs
 800ca14:	461a      	movcs	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6918      	ldr	r0, [r3, #16]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	695b      	ldr	r3, [r3, #20]
 800ca22:	461a      	mov	r2, r3
 800ca24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ca26:	f001 fb32 	bl	800e08e <memcpy>
        goto done;
 800ca2a:	e078      	b.n	800cb1e <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800ca2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca2e:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d15d      	bne.n	800cafa <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca40:	3303      	adds	r3, #3
 800ca42:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800ca44:	6a3b      	ldr	r3, [r7, #32]
 800ca46:	3b03      	subs	r3, #3
 800ca48:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	695a      	ldr	r2, [r3, #20]
 800ca4e:	6a3b      	ldr	r3, [r7, #32]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	bf28      	it	cs
 800ca54:	461a      	movcs	r2, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6918      	ldr	r0, [r3, #16]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	695b      	ldr	r3, [r3, #20]
 800ca62:	461a      	mov	r2, r3
 800ca64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ca66:	f001 fb12 	bl	800e08e <memcpy>
        goto done;
 800ca6a:	e058      	b.n	800cb1e <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800ca6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6e:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800ca70:	69fb      	ldr	r3, [r7, #28]
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	461a      	mov	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d118      	bne.n	800cab0 <hci_send_req+0x198>
          break;
      
        len -= 1;
 800ca7e:	6a3b      	ldr	r3, [r7, #32]
 800ca80:	3b01      	subs	r3, #1
 800ca82:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	695a      	ldr	r2, [r3, #20]
 800ca88:	6a3b      	ldr	r3, [r7, #32]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	bf28      	it	cs
 800ca8e:	461a      	movcs	r2, r3
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6918      	ldr	r0, [r3, #16]
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	1c59      	adds	r1, r3, #1
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	695b      	ldr	r3, [r3, #20]
 800caa0:	461a      	mov	r2, r3
 800caa2:	f001 faf4 	bl	800e08e <memcpy>
        goto done;
 800caa6:	e03a      	b.n	800cb1e <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800caa8:	bf00      	nop
 800caaa:	e002      	b.n	800cab2 <hci_send_req+0x19a>
          break;
 800caac:	bf00      	nop
 800caae:	e000      	b.n	800cab2 <hci_send_req+0x19a>
          break;
 800cab0:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800cab2:	4824      	ldr	r0, [pc, #144]	@ (800cb44 <hci_send_req+0x22c>)
 800cab4:	f000 f8d2 	bl	800cc5c <list_is_empty>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d00d      	beq.n	800cada <hci_send_req+0x1c2>
 800cabe:	4820      	ldr	r0, [pc, #128]	@ (800cb40 <hci_send_req+0x228>)
 800cac0:	f000 f8cc 	bl	800cc5c <list_is_empty>
 800cac4:	4603      	mov	r3, r0
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d007      	beq.n	800cada <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	4619      	mov	r1, r3
 800cace:	481d      	ldr	r0, [pc, #116]	@ (800cb44 <hci_send_req+0x22c>)
 800cad0:	f000 f90c 	bl	800ccec <list_insert_tail>
      hciReadPacket=NULL;
 800cad4:	2300      	movs	r3, #0
 800cad6:	613b      	str	r3, [r7, #16]
 800cad8:	e008      	b.n	800caec <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800cada:	693a      	ldr	r2, [r7, #16]
 800cadc:	f107 0308 	add.w	r3, r7, #8
 800cae0:	4611      	mov	r1, r2
 800cae2:	4618      	mov	r0, r3
 800cae4:	f000 f902 	bl	800ccec <list_insert_tail>
      hciReadPacket=NULL;
 800cae8:	2300      	movs	r3, #0
 800caea:	613b      	str	r3, [r7, #16]
  {
 800caec:	e740      	b.n	800c970 <hci_send_req+0x58>
        goto failed;
 800caee:	bf00      	nop
 800caf0:	e004      	b.n	800cafc <hci_send_req+0x1e4>
        goto failed;
 800caf2:	bf00      	nop
 800caf4:	e002      	b.n	800cafc <hci_send_req+0x1e4>
          goto failed;
 800caf6:	bf00      	nop
 800caf8:	e000      	b.n	800cafc <hci_send_req+0x1e4>
          goto failed;
 800cafa:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d004      	beq.n	800cb0c <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	4619      	mov	r1, r3
 800cb06:	480f      	ldr	r0, [pc, #60]	@ (800cb44 <hci_send_req+0x22c>)
 800cb08:	f000 f8ca 	bl	800cca0 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800cb0c:	f107 0308 	add.w	r3, r7, #8
 800cb10:	4619      	mov	r1, r3
 800cb12:	480b      	ldr	r0, [pc, #44]	@ (800cb40 <hci_send_req+0x228>)
 800cb14:	f7ff fe64 	bl	800c7e0 <move_list>

  return -1;
 800cb18:	f04f 33ff 	mov.w	r3, #4294967295
 800cb1c:	e00b      	b.n	800cb36 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	4619      	mov	r1, r3
 800cb22:	4808      	ldr	r0, [pc, #32]	@ (800cb44 <hci_send_req+0x22c>)
 800cb24:	f000 f8bc 	bl	800cca0 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800cb28:	f107 0308 	add.w	r3, r7, #8
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	4804      	ldr	r0, [pc, #16]	@ (800cb40 <hci_send_req+0x228>)
 800cb30:	f7ff fe56 	bl	800c7e0 <move_list>

  return 0;
 800cb34:	2300      	movs	r3, #0
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3738      	adds	r7, #56	@ 0x38
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	20000ca4 	.word	0x20000ca4
 800cb44:	20000c9c 	.word	0x20000c9c

0800cb48 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800cb52:	e013      	b.n	800cb7c <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800cb54:	1d3b      	adds	r3, r7, #4
 800cb56:	4619      	mov	r1, r3
 800cb58:	480e      	ldr	r0, [pc, #56]	@ (800cb94 <hci_user_evt_proc+0x4c>)
 800cb5a:	f000 f90e 	bl	800cd7a <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800cb5e:	4b0e      	ldr	r3, [pc, #56]	@ (800cb98 <hci_user_evt_proc+0x50>)
 800cb60:	69db      	ldr	r3, [r3, #28]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d005      	beq.n	800cb72 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800cb66:	4b0c      	ldr	r3, [pc, #48]	@ (800cb98 <hci_user_evt_proc+0x50>)
 800cb68:	69db      	ldr	r3, [r3, #28]
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	3208      	adds	r2, #8
 800cb6e:	4610      	mov	r0, r2
 800cb70:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	4619      	mov	r1, r3
 800cb76:	4809      	ldr	r0, [pc, #36]	@ (800cb9c <hci_user_evt_proc+0x54>)
 800cb78:	f000 f8b8 	bl	800ccec <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800cb7c:	4805      	ldr	r0, [pc, #20]	@ (800cb94 <hci_user_evt_proc+0x4c>)
 800cb7e:	f000 f86d 	bl	800cc5c <list_is_empty>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d0e5      	beq.n	800cb54 <hci_user_evt_proc+0xc>
  }
}
 800cb88:	bf00      	nop
 800cb8a:	bf00      	nop
 800cb8c:	3708      	adds	r7, #8
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	20000ca4 	.word	0x20000ca4
 800cb98:	20000f68 	.word	0x20000f68
 800cb9c:	20000c9c 	.word	0x20000c9c

0800cba0 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b086      	sub	sp, #24
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800cbac:	2300      	movs	r3, #0
 800cbae:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800cbb0:	481f      	ldr	r0, [pc, #124]	@ (800cc30 <hci_notify_asynch_evt+0x90>)
 800cbb2:	f000 f853 	bl	800cc5c <list_is_empty>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d132      	bne.n	800cc22 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800cbbc:	f107 030c 	add.w	r3, r7, #12
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	481b      	ldr	r0, [pc, #108]	@ (800cc30 <hci_notify_asynch_evt+0x90>)
 800cbc4:	f000 f8d9 	bl	800cd7a <list_remove_head>
    
    if (hciContext.io.Receive)
 800cbc8:	4b1a      	ldr	r3, [pc, #104]	@ (800cc34 <hci_notify_asynch_evt+0x94>)
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d02a      	beq.n	800cc26 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800cbd0:	4b18      	ldr	r3, [pc, #96]	@ (800cc34 <hci_notify_asynch_evt+0x94>)
 800cbd2:	68db      	ldr	r3, [r3, #12]
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	3208      	adds	r2, #8
 800cbd8:	2180      	movs	r1, #128	@ 0x80
 800cbda:	4610      	mov	r0, r2
 800cbdc:	4798      	blx	r3
 800cbde:	4603      	mov	r3, r0
 800cbe0:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800cbe2:	7cfb      	ldrb	r3, [r7, #19]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d016      	beq.n	800cc16 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	7cfa      	ldrb	r2, [r7, #19]
 800cbec:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7ff fd94 	bl	800c720 <verify_packet>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d105      	bne.n	800cc0a <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	4619      	mov	r1, r3
 800cc02:	480d      	ldr	r0, [pc, #52]	@ (800cc38 <hci_notify_asynch_evt+0x98>)
 800cc04:	f000 f872 	bl	800ccec <list_insert_tail>
 800cc08:	e00d      	b.n	800cc26 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	4808      	ldr	r0, [pc, #32]	@ (800cc30 <hci_notify_asynch_evt+0x90>)
 800cc10:	f000 f846 	bl	800cca0 <list_insert_head>
 800cc14:	e007      	b.n	800cc26 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	4619      	mov	r1, r3
 800cc1a:	4805      	ldr	r0, [pc, #20]	@ (800cc30 <hci_notify_asynch_evt+0x90>)
 800cc1c:	f000 f840 	bl	800cca0 <list_insert_head>
 800cc20:	e001      	b.n	800cc26 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800cc22:	2301      	movs	r3, #1
 800cc24:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800cc26:	697b      	ldr	r3, [r7, #20]

}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3718      	adds	r7, #24
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	20000c9c 	.word	0x20000c9c
 800cc34:	20000f68 	.word	0x20000f68
 800cc38:	20000ca4 	.word	0x20000ca4

0800cc3c <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b083      	sub	sp, #12
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	605a      	str	r2, [r3, #4]
}
 800cc50:	bf00      	nop
 800cc52:	370c      	adds	r7, #12
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b087      	sub	sp, #28
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc64:	f3ef 8310 	mrs	r3, PRIMASK
 800cc68:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cc6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc6e:	b672      	cpsid	i
}
 800cc70:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d102      	bne.n	800cc82 <list_is_empty+0x26>
  {
    return_value = 1;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	75fb      	strb	r3, [r7, #23]
 800cc80:	e001      	b.n	800cc86 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800cc82:	2300      	movs	r3, #0
 800cc84:	75fb      	strb	r3, [r7, #23]
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	f383 8810 	msr	PRIMASK, r3
}
 800cc90:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800cc92:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	371c      	adds	r7, #28
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b087      	sub	sp, #28
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccaa:	f3ef 8310 	mrs	r3, PRIMASK
 800ccae:	60fb      	str	r3, [r7, #12]
  return(result);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ccb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ccb4:	b672      	cpsid	i
}
 800ccb6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	683a      	ldr	r2, [r7, #0]
 800ccca:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	683a      	ldr	r2, [r7, #0]
 800ccd2:	605a      	str	r2, [r3, #4]
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	f383 8810 	msr	PRIMASK, r3
}
 800ccde:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800cce0:	bf00      	nop
 800cce2:	371c      	adds	r7, #28
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b087      	sub	sp, #28
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccf6:	f3ef 8310 	mrs	r3, PRIMASK
 800ccfa:	60fb      	str	r3, [r7, #12]
  return(result);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ccfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd00:	b672      	cpsid	i
}
 800cd02:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	685a      	ldr	r2, [r3, #4]
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	683a      	ldr	r2, [r7, #0]
 800cd16:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	683a      	ldr	r2, [r7, #0]
 800cd1e:	601a      	str	r2, [r3, #0]
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	f383 8810 	msr	PRIMASK, r3
}
 800cd2a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800cd2c:	bf00      	nop
 800cd2e:	371c      	adds	r7, #28
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b087      	sub	sp, #28
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd40:	f3ef 8310 	mrs	r3, PRIMASK
 800cd44:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd46:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cd48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd4a:	b672      	cpsid	i
}
 800cd4c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	6812      	ldr	r2, [r2, #0]
 800cd56:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	6852      	ldr	r2, [r2, #4]
 800cd60:	605a      	str	r2, [r3, #4]
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	f383 8810 	msr	PRIMASK, r3
}
 800cd6c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800cd6e:	bf00      	nop
 800cd70:	371c      	adds	r7, #28
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr

0800cd7a <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b086      	sub	sp, #24
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
 800cd82:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd84:	f3ef 8310 	mrs	r3, PRIMASK
 800cd88:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd8a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cd8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd8e:	b672      	cpsid	i
}
 800cd90:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681a      	ldr	r2, [r3, #0]
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7ff ffca 	bl	800cd38 <list_remove_node>
  (*node)->next = NULL;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	605a      	str	r2, [r3, #4]
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	f383 8810 	msr	PRIMASK, r3
}
 800cdbe:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800cdc0:	bf00      	nop
 800cdc2:	3718      	adds	r7, #24
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b086      	sub	sp, #24
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdd2:	f3ef 8310 	mrs	r3, PRIMASK
 800cdd6:	60fb      	str	r3, [r7, #12]
  return(result);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cdda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cddc:	b672      	cpsid	i
}
 800cdde:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	685a      	ldr	r2, [r3, #4]
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7ff ffa3 	bl	800cd38 <list_remove_node>
  (*node)->next = NULL;
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	605a      	str	r2, [r3, #4]
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	f383 8810 	msr	PRIMASK, r3
}
 800ce0c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800ce0e:	bf00      	nop
 800ce10:	3718      	adds	r7, #24
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800ce16:	b480      	push	{r7}
 800ce18:	b089      	sub	sp, #36	@ 0x24
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
  int size = 0;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce22:	f3ef 8310 	mrs	r3, PRIMASK
 800ce26:	613b      	str	r3, [r7, #16]
  return(result);
 800ce28:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ce2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce2c:	b672      	cpsid	i
}
 800ce2e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800ce36:	e005      	b.n	800ce44 <list_get_size+0x2e>
  {
    size++;
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800ce3e:	69bb      	ldr	r3, [r7, #24]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800ce44:	69ba      	ldr	r2, [r7, #24]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d1f5      	bne.n	800ce38 <list_get_size+0x22>
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f383 8810 	msr	PRIMASK, r3
}
 800ce56:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800ce58:	69fb      	ldr	r3, [r7, #28]
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3724      	adds	r7, #36	@ 0x24
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce64:	4770      	bx	lr

0800ce66 <__cvt>:
 800ce66:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce6a:	ec57 6b10 	vmov	r6, r7, d0
 800ce6e:	2f00      	cmp	r7, #0
 800ce70:	460c      	mov	r4, r1
 800ce72:	4619      	mov	r1, r3
 800ce74:	463b      	mov	r3, r7
 800ce76:	bfbb      	ittet	lt
 800ce78:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ce7c:	461f      	movlt	r7, r3
 800ce7e:	2300      	movge	r3, #0
 800ce80:	232d      	movlt	r3, #45	@ 0x2d
 800ce82:	700b      	strb	r3, [r1, #0]
 800ce84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce86:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ce8a:	4691      	mov	r9, r2
 800ce8c:	f023 0820 	bic.w	r8, r3, #32
 800ce90:	bfbc      	itt	lt
 800ce92:	4632      	movlt	r2, r6
 800ce94:	4616      	movlt	r6, r2
 800ce96:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ce9a:	d005      	beq.n	800cea8 <__cvt+0x42>
 800ce9c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cea0:	d100      	bne.n	800cea4 <__cvt+0x3e>
 800cea2:	3401      	adds	r4, #1
 800cea4:	2102      	movs	r1, #2
 800cea6:	e000      	b.n	800ceaa <__cvt+0x44>
 800cea8:	2103      	movs	r1, #3
 800ceaa:	ab03      	add	r3, sp, #12
 800ceac:	9301      	str	r3, [sp, #4]
 800ceae:	ab02      	add	r3, sp, #8
 800ceb0:	9300      	str	r3, [sp, #0]
 800ceb2:	ec47 6b10 	vmov	d0, r6, r7
 800ceb6:	4653      	mov	r3, sl
 800ceb8:	4622      	mov	r2, r4
 800ceba:	f001 f985 	bl	800e1c8 <_dtoa_r>
 800cebe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cec2:	4605      	mov	r5, r0
 800cec4:	d119      	bne.n	800cefa <__cvt+0x94>
 800cec6:	f019 0f01 	tst.w	r9, #1
 800ceca:	d00e      	beq.n	800ceea <__cvt+0x84>
 800cecc:	eb00 0904 	add.w	r9, r0, r4
 800ced0:	2200      	movs	r2, #0
 800ced2:	2300      	movs	r3, #0
 800ced4:	4630      	mov	r0, r6
 800ced6:	4639      	mov	r1, r7
 800ced8:	f7f3 fdf6 	bl	8000ac8 <__aeabi_dcmpeq>
 800cedc:	b108      	cbz	r0, 800cee2 <__cvt+0x7c>
 800cede:	f8cd 900c 	str.w	r9, [sp, #12]
 800cee2:	2230      	movs	r2, #48	@ 0x30
 800cee4:	9b03      	ldr	r3, [sp, #12]
 800cee6:	454b      	cmp	r3, r9
 800cee8:	d31e      	bcc.n	800cf28 <__cvt+0xc2>
 800ceea:	9b03      	ldr	r3, [sp, #12]
 800ceec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ceee:	1b5b      	subs	r3, r3, r5
 800cef0:	4628      	mov	r0, r5
 800cef2:	6013      	str	r3, [r2, #0]
 800cef4:	b004      	add	sp, #16
 800cef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cefa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cefe:	eb00 0904 	add.w	r9, r0, r4
 800cf02:	d1e5      	bne.n	800ced0 <__cvt+0x6a>
 800cf04:	7803      	ldrb	r3, [r0, #0]
 800cf06:	2b30      	cmp	r3, #48	@ 0x30
 800cf08:	d10a      	bne.n	800cf20 <__cvt+0xba>
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	4630      	mov	r0, r6
 800cf10:	4639      	mov	r1, r7
 800cf12:	f7f3 fdd9 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf16:	b918      	cbnz	r0, 800cf20 <__cvt+0xba>
 800cf18:	f1c4 0401 	rsb	r4, r4, #1
 800cf1c:	f8ca 4000 	str.w	r4, [sl]
 800cf20:	f8da 3000 	ldr.w	r3, [sl]
 800cf24:	4499      	add	r9, r3
 800cf26:	e7d3      	b.n	800ced0 <__cvt+0x6a>
 800cf28:	1c59      	adds	r1, r3, #1
 800cf2a:	9103      	str	r1, [sp, #12]
 800cf2c:	701a      	strb	r2, [r3, #0]
 800cf2e:	e7d9      	b.n	800cee4 <__cvt+0x7e>

0800cf30 <__exponent>:
 800cf30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf32:	2900      	cmp	r1, #0
 800cf34:	bfba      	itte	lt
 800cf36:	4249      	neglt	r1, r1
 800cf38:	232d      	movlt	r3, #45	@ 0x2d
 800cf3a:	232b      	movge	r3, #43	@ 0x2b
 800cf3c:	2909      	cmp	r1, #9
 800cf3e:	7002      	strb	r2, [r0, #0]
 800cf40:	7043      	strb	r3, [r0, #1]
 800cf42:	dd29      	ble.n	800cf98 <__exponent+0x68>
 800cf44:	f10d 0307 	add.w	r3, sp, #7
 800cf48:	461d      	mov	r5, r3
 800cf4a:	270a      	movs	r7, #10
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	fbb1 f6f7 	udiv	r6, r1, r7
 800cf52:	fb07 1416 	mls	r4, r7, r6, r1
 800cf56:	3430      	adds	r4, #48	@ 0x30
 800cf58:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cf5c:	460c      	mov	r4, r1
 800cf5e:	2c63      	cmp	r4, #99	@ 0x63
 800cf60:	f103 33ff 	add.w	r3, r3, #4294967295
 800cf64:	4631      	mov	r1, r6
 800cf66:	dcf1      	bgt.n	800cf4c <__exponent+0x1c>
 800cf68:	3130      	adds	r1, #48	@ 0x30
 800cf6a:	1e94      	subs	r4, r2, #2
 800cf6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cf70:	1c41      	adds	r1, r0, #1
 800cf72:	4623      	mov	r3, r4
 800cf74:	42ab      	cmp	r3, r5
 800cf76:	d30a      	bcc.n	800cf8e <__exponent+0x5e>
 800cf78:	f10d 0309 	add.w	r3, sp, #9
 800cf7c:	1a9b      	subs	r3, r3, r2
 800cf7e:	42ac      	cmp	r4, r5
 800cf80:	bf88      	it	hi
 800cf82:	2300      	movhi	r3, #0
 800cf84:	3302      	adds	r3, #2
 800cf86:	4403      	add	r3, r0
 800cf88:	1a18      	subs	r0, r3, r0
 800cf8a:	b003      	add	sp, #12
 800cf8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf8e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cf92:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cf96:	e7ed      	b.n	800cf74 <__exponent+0x44>
 800cf98:	2330      	movs	r3, #48	@ 0x30
 800cf9a:	3130      	adds	r1, #48	@ 0x30
 800cf9c:	7083      	strb	r3, [r0, #2]
 800cf9e:	70c1      	strb	r1, [r0, #3]
 800cfa0:	1d03      	adds	r3, r0, #4
 800cfa2:	e7f1      	b.n	800cf88 <__exponent+0x58>

0800cfa4 <_printf_float>:
 800cfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa8:	b08d      	sub	sp, #52	@ 0x34
 800cfaa:	460c      	mov	r4, r1
 800cfac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cfb0:	4616      	mov	r6, r2
 800cfb2:	461f      	mov	r7, r3
 800cfb4:	4605      	mov	r5, r0
 800cfb6:	f000 fff3 	bl	800dfa0 <_localeconv_r>
 800cfba:	6803      	ldr	r3, [r0, #0]
 800cfbc:	9304      	str	r3, [sp, #16]
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7f3 f956 	bl	8000270 <strlen>
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfc8:	f8d8 3000 	ldr.w	r3, [r8]
 800cfcc:	9005      	str	r0, [sp, #20]
 800cfce:	3307      	adds	r3, #7
 800cfd0:	f023 0307 	bic.w	r3, r3, #7
 800cfd4:	f103 0208 	add.w	r2, r3, #8
 800cfd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cfdc:	f8d4 b000 	ldr.w	fp, [r4]
 800cfe0:	f8c8 2000 	str.w	r2, [r8]
 800cfe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cfe8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cfec:	9307      	str	r3, [sp, #28]
 800cfee:	f8cd 8018 	str.w	r8, [sp, #24]
 800cff2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cff6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cffa:	4b9c      	ldr	r3, [pc, #624]	@ (800d26c <_printf_float+0x2c8>)
 800cffc:	f04f 32ff 	mov.w	r2, #4294967295
 800d000:	f7f3 fd94 	bl	8000b2c <__aeabi_dcmpun>
 800d004:	bb70      	cbnz	r0, 800d064 <_printf_float+0xc0>
 800d006:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d00a:	4b98      	ldr	r3, [pc, #608]	@ (800d26c <_printf_float+0x2c8>)
 800d00c:	f04f 32ff 	mov.w	r2, #4294967295
 800d010:	f7f3 fd6e 	bl	8000af0 <__aeabi_dcmple>
 800d014:	bb30      	cbnz	r0, 800d064 <_printf_float+0xc0>
 800d016:	2200      	movs	r2, #0
 800d018:	2300      	movs	r3, #0
 800d01a:	4640      	mov	r0, r8
 800d01c:	4649      	mov	r1, r9
 800d01e:	f7f3 fd5d 	bl	8000adc <__aeabi_dcmplt>
 800d022:	b110      	cbz	r0, 800d02a <_printf_float+0x86>
 800d024:	232d      	movs	r3, #45	@ 0x2d
 800d026:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d02a:	4a91      	ldr	r2, [pc, #580]	@ (800d270 <_printf_float+0x2cc>)
 800d02c:	4b91      	ldr	r3, [pc, #580]	@ (800d274 <_printf_float+0x2d0>)
 800d02e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d032:	bf94      	ite	ls
 800d034:	4690      	movls	r8, r2
 800d036:	4698      	movhi	r8, r3
 800d038:	2303      	movs	r3, #3
 800d03a:	6123      	str	r3, [r4, #16]
 800d03c:	f02b 0304 	bic.w	r3, fp, #4
 800d040:	6023      	str	r3, [r4, #0]
 800d042:	f04f 0900 	mov.w	r9, #0
 800d046:	9700      	str	r7, [sp, #0]
 800d048:	4633      	mov	r3, r6
 800d04a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d04c:	4621      	mov	r1, r4
 800d04e:	4628      	mov	r0, r5
 800d050:	f000 f9d2 	bl	800d3f8 <_printf_common>
 800d054:	3001      	adds	r0, #1
 800d056:	f040 808d 	bne.w	800d174 <_printf_float+0x1d0>
 800d05a:	f04f 30ff 	mov.w	r0, #4294967295
 800d05e:	b00d      	add	sp, #52	@ 0x34
 800d060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d064:	4642      	mov	r2, r8
 800d066:	464b      	mov	r3, r9
 800d068:	4640      	mov	r0, r8
 800d06a:	4649      	mov	r1, r9
 800d06c:	f7f3 fd5e 	bl	8000b2c <__aeabi_dcmpun>
 800d070:	b140      	cbz	r0, 800d084 <_printf_float+0xe0>
 800d072:	464b      	mov	r3, r9
 800d074:	2b00      	cmp	r3, #0
 800d076:	bfbc      	itt	lt
 800d078:	232d      	movlt	r3, #45	@ 0x2d
 800d07a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d07e:	4a7e      	ldr	r2, [pc, #504]	@ (800d278 <_printf_float+0x2d4>)
 800d080:	4b7e      	ldr	r3, [pc, #504]	@ (800d27c <_printf_float+0x2d8>)
 800d082:	e7d4      	b.n	800d02e <_printf_float+0x8a>
 800d084:	6863      	ldr	r3, [r4, #4]
 800d086:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d08a:	9206      	str	r2, [sp, #24]
 800d08c:	1c5a      	adds	r2, r3, #1
 800d08e:	d13b      	bne.n	800d108 <_printf_float+0x164>
 800d090:	2306      	movs	r3, #6
 800d092:	6063      	str	r3, [r4, #4]
 800d094:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d098:	2300      	movs	r3, #0
 800d09a:	6022      	str	r2, [r4, #0]
 800d09c:	9303      	str	r3, [sp, #12]
 800d09e:	ab0a      	add	r3, sp, #40	@ 0x28
 800d0a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d0a4:	ab09      	add	r3, sp, #36	@ 0x24
 800d0a6:	9300      	str	r3, [sp, #0]
 800d0a8:	6861      	ldr	r1, [r4, #4]
 800d0aa:	ec49 8b10 	vmov	d0, r8, r9
 800d0ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d0b2:	4628      	mov	r0, r5
 800d0b4:	f7ff fed7 	bl	800ce66 <__cvt>
 800d0b8:	9b06      	ldr	r3, [sp, #24]
 800d0ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d0bc:	2b47      	cmp	r3, #71	@ 0x47
 800d0be:	4680      	mov	r8, r0
 800d0c0:	d129      	bne.n	800d116 <_printf_float+0x172>
 800d0c2:	1cc8      	adds	r0, r1, #3
 800d0c4:	db02      	blt.n	800d0cc <_printf_float+0x128>
 800d0c6:	6863      	ldr	r3, [r4, #4]
 800d0c8:	4299      	cmp	r1, r3
 800d0ca:	dd41      	ble.n	800d150 <_printf_float+0x1ac>
 800d0cc:	f1aa 0a02 	sub.w	sl, sl, #2
 800d0d0:	fa5f fa8a 	uxtb.w	sl, sl
 800d0d4:	3901      	subs	r1, #1
 800d0d6:	4652      	mov	r2, sl
 800d0d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d0dc:	9109      	str	r1, [sp, #36]	@ 0x24
 800d0de:	f7ff ff27 	bl	800cf30 <__exponent>
 800d0e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d0e4:	1813      	adds	r3, r2, r0
 800d0e6:	2a01      	cmp	r2, #1
 800d0e8:	4681      	mov	r9, r0
 800d0ea:	6123      	str	r3, [r4, #16]
 800d0ec:	dc02      	bgt.n	800d0f4 <_printf_float+0x150>
 800d0ee:	6822      	ldr	r2, [r4, #0]
 800d0f0:	07d2      	lsls	r2, r2, #31
 800d0f2:	d501      	bpl.n	800d0f8 <_printf_float+0x154>
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	6123      	str	r3, [r4, #16]
 800d0f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d0a2      	beq.n	800d046 <_printf_float+0xa2>
 800d100:	232d      	movs	r3, #45	@ 0x2d
 800d102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d106:	e79e      	b.n	800d046 <_printf_float+0xa2>
 800d108:	9a06      	ldr	r2, [sp, #24]
 800d10a:	2a47      	cmp	r2, #71	@ 0x47
 800d10c:	d1c2      	bne.n	800d094 <_printf_float+0xf0>
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d1c0      	bne.n	800d094 <_printf_float+0xf0>
 800d112:	2301      	movs	r3, #1
 800d114:	e7bd      	b.n	800d092 <_printf_float+0xee>
 800d116:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d11a:	d9db      	bls.n	800d0d4 <_printf_float+0x130>
 800d11c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d120:	d118      	bne.n	800d154 <_printf_float+0x1b0>
 800d122:	2900      	cmp	r1, #0
 800d124:	6863      	ldr	r3, [r4, #4]
 800d126:	dd0b      	ble.n	800d140 <_printf_float+0x19c>
 800d128:	6121      	str	r1, [r4, #16]
 800d12a:	b913      	cbnz	r3, 800d132 <_printf_float+0x18e>
 800d12c:	6822      	ldr	r2, [r4, #0]
 800d12e:	07d0      	lsls	r0, r2, #31
 800d130:	d502      	bpl.n	800d138 <_printf_float+0x194>
 800d132:	3301      	adds	r3, #1
 800d134:	440b      	add	r3, r1
 800d136:	6123      	str	r3, [r4, #16]
 800d138:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d13a:	f04f 0900 	mov.w	r9, #0
 800d13e:	e7db      	b.n	800d0f8 <_printf_float+0x154>
 800d140:	b913      	cbnz	r3, 800d148 <_printf_float+0x1a4>
 800d142:	6822      	ldr	r2, [r4, #0]
 800d144:	07d2      	lsls	r2, r2, #31
 800d146:	d501      	bpl.n	800d14c <_printf_float+0x1a8>
 800d148:	3302      	adds	r3, #2
 800d14a:	e7f4      	b.n	800d136 <_printf_float+0x192>
 800d14c:	2301      	movs	r3, #1
 800d14e:	e7f2      	b.n	800d136 <_printf_float+0x192>
 800d150:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d156:	4299      	cmp	r1, r3
 800d158:	db05      	blt.n	800d166 <_printf_float+0x1c2>
 800d15a:	6823      	ldr	r3, [r4, #0]
 800d15c:	6121      	str	r1, [r4, #16]
 800d15e:	07d8      	lsls	r0, r3, #31
 800d160:	d5ea      	bpl.n	800d138 <_printf_float+0x194>
 800d162:	1c4b      	adds	r3, r1, #1
 800d164:	e7e7      	b.n	800d136 <_printf_float+0x192>
 800d166:	2900      	cmp	r1, #0
 800d168:	bfd4      	ite	le
 800d16a:	f1c1 0202 	rsble	r2, r1, #2
 800d16e:	2201      	movgt	r2, #1
 800d170:	4413      	add	r3, r2
 800d172:	e7e0      	b.n	800d136 <_printf_float+0x192>
 800d174:	6823      	ldr	r3, [r4, #0]
 800d176:	055a      	lsls	r2, r3, #21
 800d178:	d407      	bmi.n	800d18a <_printf_float+0x1e6>
 800d17a:	6923      	ldr	r3, [r4, #16]
 800d17c:	4642      	mov	r2, r8
 800d17e:	4631      	mov	r1, r6
 800d180:	4628      	mov	r0, r5
 800d182:	47b8      	blx	r7
 800d184:	3001      	adds	r0, #1
 800d186:	d12b      	bne.n	800d1e0 <_printf_float+0x23c>
 800d188:	e767      	b.n	800d05a <_printf_float+0xb6>
 800d18a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d18e:	f240 80dd 	bls.w	800d34c <_printf_float+0x3a8>
 800d192:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d196:	2200      	movs	r2, #0
 800d198:	2300      	movs	r3, #0
 800d19a:	f7f3 fc95 	bl	8000ac8 <__aeabi_dcmpeq>
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	d033      	beq.n	800d20a <_printf_float+0x266>
 800d1a2:	4a37      	ldr	r2, [pc, #220]	@ (800d280 <_printf_float+0x2dc>)
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	4631      	mov	r1, r6
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	47b8      	blx	r7
 800d1ac:	3001      	adds	r0, #1
 800d1ae:	f43f af54 	beq.w	800d05a <_printf_float+0xb6>
 800d1b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d1b6:	4543      	cmp	r3, r8
 800d1b8:	db02      	blt.n	800d1c0 <_printf_float+0x21c>
 800d1ba:	6823      	ldr	r3, [r4, #0]
 800d1bc:	07d8      	lsls	r0, r3, #31
 800d1be:	d50f      	bpl.n	800d1e0 <_printf_float+0x23c>
 800d1c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1c4:	4631      	mov	r1, r6
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	47b8      	blx	r7
 800d1ca:	3001      	adds	r0, #1
 800d1cc:	f43f af45 	beq.w	800d05a <_printf_float+0xb6>
 800d1d0:	f04f 0900 	mov.w	r9, #0
 800d1d4:	f108 38ff 	add.w	r8, r8, #4294967295
 800d1d8:	f104 0a1a 	add.w	sl, r4, #26
 800d1dc:	45c8      	cmp	r8, r9
 800d1de:	dc09      	bgt.n	800d1f4 <_printf_float+0x250>
 800d1e0:	6823      	ldr	r3, [r4, #0]
 800d1e2:	079b      	lsls	r3, r3, #30
 800d1e4:	f100 8103 	bmi.w	800d3ee <_printf_float+0x44a>
 800d1e8:	68e0      	ldr	r0, [r4, #12]
 800d1ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1ec:	4298      	cmp	r0, r3
 800d1ee:	bfb8      	it	lt
 800d1f0:	4618      	movlt	r0, r3
 800d1f2:	e734      	b.n	800d05e <_printf_float+0xba>
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	4652      	mov	r2, sl
 800d1f8:	4631      	mov	r1, r6
 800d1fa:	4628      	mov	r0, r5
 800d1fc:	47b8      	blx	r7
 800d1fe:	3001      	adds	r0, #1
 800d200:	f43f af2b 	beq.w	800d05a <_printf_float+0xb6>
 800d204:	f109 0901 	add.w	r9, r9, #1
 800d208:	e7e8      	b.n	800d1dc <_printf_float+0x238>
 800d20a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	dc39      	bgt.n	800d284 <_printf_float+0x2e0>
 800d210:	4a1b      	ldr	r2, [pc, #108]	@ (800d280 <_printf_float+0x2dc>)
 800d212:	2301      	movs	r3, #1
 800d214:	4631      	mov	r1, r6
 800d216:	4628      	mov	r0, r5
 800d218:	47b8      	blx	r7
 800d21a:	3001      	adds	r0, #1
 800d21c:	f43f af1d 	beq.w	800d05a <_printf_float+0xb6>
 800d220:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d224:	ea59 0303 	orrs.w	r3, r9, r3
 800d228:	d102      	bne.n	800d230 <_printf_float+0x28c>
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	07d9      	lsls	r1, r3, #31
 800d22e:	d5d7      	bpl.n	800d1e0 <_printf_float+0x23c>
 800d230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d234:	4631      	mov	r1, r6
 800d236:	4628      	mov	r0, r5
 800d238:	47b8      	blx	r7
 800d23a:	3001      	adds	r0, #1
 800d23c:	f43f af0d 	beq.w	800d05a <_printf_float+0xb6>
 800d240:	f04f 0a00 	mov.w	sl, #0
 800d244:	f104 0b1a 	add.w	fp, r4, #26
 800d248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d24a:	425b      	negs	r3, r3
 800d24c:	4553      	cmp	r3, sl
 800d24e:	dc01      	bgt.n	800d254 <_printf_float+0x2b0>
 800d250:	464b      	mov	r3, r9
 800d252:	e793      	b.n	800d17c <_printf_float+0x1d8>
 800d254:	2301      	movs	r3, #1
 800d256:	465a      	mov	r2, fp
 800d258:	4631      	mov	r1, r6
 800d25a:	4628      	mov	r0, r5
 800d25c:	47b8      	blx	r7
 800d25e:	3001      	adds	r0, #1
 800d260:	f43f aefb 	beq.w	800d05a <_printf_float+0xb6>
 800d264:	f10a 0a01 	add.w	sl, sl, #1
 800d268:	e7ee      	b.n	800d248 <_printf_float+0x2a4>
 800d26a:	bf00      	nop
 800d26c:	7fefffff 	.word	0x7fefffff
 800d270:	080119c0 	.word	0x080119c0
 800d274:	080119c4 	.word	0x080119c4
 800d278:	080119c8 	.word	0x080119c8
 800d27c:	080119cc 	.word	0x080119cc
 800d280:	080119d0 	.word	0x080119d0
 800d284:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d286:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d28a:	4553      	cmp	r3, sl
 800d28c:	bfa8      	it	ge
 800d28e:	4653      	movge	r3, sl
 800d290:	2b00      	cmp	r3, #0
 800d292:	4699      	mov	r9, r3
 800d294:	dc36      	bgt.n	800d304 <_printf_float+0x360>
 800d296:	f04f 0b00 	mov.w	fp, #0
 800d29a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d29e:	f104 021a 	add.w	r2, r4, #26
 800d2a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d2a4:	9306      	str	r3, [sp, #24]
 800d2a6:	eba3 0309 	sub.w	r3, r3, r9
 800d2aa:	455b      	cmp	r3, fp
 800d2ac:	dc31      	bgt.n	800d312 <_printf_float+0x36e>
 800d2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2b0:	459a      	cmp	sl, r3
 800d2b2:	dc3a      	bgt.n	800d32a <_printf_float+0x386>
 800d2b4:	6823      	ldr	r3, [r4, #0]
 800d2b6:	07da      	lsls	r2, r3, #31
 800d2b8:	d437      	bmi.n	800d32a <_printf_float+0x386>
 800d2ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2bc:	ebaa 0903 	sub.w	r9, sl, r3
 800d2c0:	9b06      	ldr	r3, [sp, #24]
 800d2c2:	ebaa 0303 	sub.w	r3, sl, r3
 800d2c6:	4599      	cmp	r9, r3
 800d2c8:	bfa8      	it	ge
 800d2ca:	4699      	movge	r9, r3
 800d2cc:	f1b9 0f00 	cmp.w	r9, #0
 800d2d0:	dc33      	bgt.n	800d33a <_printf_float+0x396>
 800d2d2:	f04f 0800 	mov.w	r8, #0
 800d2d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2da:	f104 0b1a 	add.w	fp, r4, #26
 800d2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2e0:	ebaa 0303 	sub.w	r3, sl, r3
 800d2e4:	eba3 0309 	sub.w	r3, r3, r9
 800d2e8:	4543      	cmp	r3, r8
 800d2ea:	f77f af79 	ble.w	800d1e0 <_printf_float+0x23c>
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	465a      	mov	r2, fp
 800d2f2:	4631      	mov	r1, r6
 800d2f4:	4628      	mov	r0, r5
 800d2f6:	47b8      	blx	r7
 800d2f8:	3001      	adds	r0, #1
 800d2fa:	f43f aeae 	beq.w	800d05a <_printf_float+0xb6>
 800d2fe:	f108 0801 	add.w	r8, r8, #1
 800d302:	e7ec      	b.n	800d2de <_printf_float+0x33a>
 800d304:	4642      	mov	r2, r8
 800d306:	4631      	mov	r1, r6
 800d308:	4628      	mov	r0, r5
 800d30a:	47b8      	blx	r7
 800d30c:	3001      	adds	r0, #1
 800d30e:	d1c2      	bne.n	800d296 <_printf_float+0x2f2>
 800d310:	e6a3      	b.n	800d05a <_printf_float+0xb6>
 800d312:	2301      	movs	r3, #1
 800d314:	4631      	mov	r1, r6
 800d316:	4628      	mov	r0, r5
 800d318:	9206      	str	r2, [sp, #24]
 800d31a:	47b8      	blx	r7
 800d31c:	3001      	adds	r0, #1
 800d31e:	f43f ae9c 	beq.w	800d05a <_printf_float+0xb6>
 800d322:	9a06      	ldr	r2, [sp, #24]
 800d324:	f10b 0b01 	add.w	fp, fp, #1
 800d328:	e7bb      	b.n	800d2a2 <_printf_float+0x2fe>
 800d32a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d32e:	4631      	mov	r1, r6
 800d330:	4628      	mov	r0, r5
 800d332:	47b8      	blx	r7
 800d334:	3001      	adds	r0, #1
 800d336:	d1c0      	bne.n	800d2ba <_printf_float+0x316>
 800d338:	e68f      	b.n	800d05a <_printf_float+0xb6>
 800d33a:	9a06      	ldr	r2, [sp, #24]
 800d33c:	464b      	mov	r3, r9
 800d33e:	4442      	add	r2, r8
 800d340:	4631      	mov	r1, r6
 800d342:	4628      	mov	r0, r5
 800d344:	47b8      	blx	r7
 800d346:	3001      	adds	r0, #1
 800d348:	d1c3      	bne.n	800d2d2 <_printf_float+0x32e>
 800d34a:	e686      	b.n	800d05a <_printf_float+0xb6>
 800d34c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d350:	f1ba 0f01 	cmp.w	sl, #1
 800d354:	dc01      	bgt.n	800d35a <_printf_float+0x3b6>
 800d356:	07db      	lsls	r3, r3, #31
 800d358:	d536      	bpl.n	800d3c8 <_printf_float+0x424>
 800d35a:	2301      	movs	r3, #1
 800d35c:	4642      	mov	r2, r8
 800d35e:	4631      	mov	r1, r6
 800d360:	4628      	mov	r0, r5
 800d362:	47b8      	blx	r7
 800d364:	3001      	adds	r0, #1
 800d366:	f43f ae78 	beq.w	800d05a <_printf_float+0xb6>
 800d36a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d36e:	4631      	mov	r1, r6
 800d370:	4628      	mov	r0, r5
 800d372:	47b8      	blx	r7
 800d374:	3001      	adds	r0, #1
 800d376:	f43f ae70 	beq.w	800d05a <_printf_float+0xb6>
 800d37a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d37e:	2200      	movs	r2, #0
 800d380:	2300      	movs	r3, #0
 800d382:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d386:	f7f3 fb9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d38a:	b9c0      	cbnz	r0, 800d3be <_printf_float+0x41a>
 800d38c:	4653      	mov	r3, sl
 800d38e:	f108 0201 	add.w	r2, r8, #1
 800d392:	4631      	mov	r1, r6
 800d394:	4628      	mov	r0, r5
 800d396:	47b8      	blx	r7
 800d398:	3001      	adds	r0, #1
 800d39a:	d10c      	bne.n	800d3b6 <_printf_float+0x412>
 800d39c:	e65d      	b.n	800d05a <_printf_float+0xb6>
 800d39e:	2301      	movs	r3, #1
 800d3a0:	465a      	mov	r2, fp
 800d3a2:	4631      	mov	r1, r6
 800d3a4:	4628      	mov	r0, r5
 800d3a6:	47b8      	blx	r7
 800d3a8:	3001      	adds	r0, #1
 800d3aa:	f43f ae56 	beq.w	800d05a <_printf_float+0xb6>
 800d3ae:	f108 0801 	add.w	r8, r8, #1
 800d3b2:	45d0      	cmp	r8, sl
 800d3b4:	dbf3      	blt.n	800d39e <_printf_float+0x3fa>
 800d3b6:	464b      	mov	r3, r9
 800d3b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d3bc:	e6df      	b.n	800d17e <_printf_float+0x1da>
 800d3be:	f04f 0800 	mov.w	r8, #0
 800d3c2:	f104 0b1a 	add.w	fp, r4, #26
 800d3c6:	e7f4      	b.n	800d3b2 <_printf_float+0x40e>
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	4642      	mov	r2, r8
 800d3cc:	e7e1      	b.n	800d392 <_printf_float+0x3ee>
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	464a      	mov	r2, r9
 800d3d2:	4631      	mov	r1, r6
 800d3d4:	4628      	mov	r0, r5
 800d3d6:	47b8      	blx	r7
 800d3d8:	3001      	adds	r0, #1
 800d3da:	f43f ae3e 	beq.w	800d05a <_printf_float+0xb6>
 800d3de:	f108 0801 	add.w	r8, r8, #1
 800d3e2:	68e3      	ldr	r3, [r4, #12]
 800d3e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d3e6:	1a5b      	subs	r3, r3, r1
 800d3e8:	4543      	cmp	r3, r8
 800d3ea:	dcf0      	bgt.n	800d3ce <_printf_float+0x42a>
 800d3ec:	e6fc      	b.n	800d1e8 <_printf_float+0x244>
 800d3ee:	f04f 0800 	mov.w	r8, #0
 800d3f2:	f104 0919 	add.w	r9, r4, #25
 800d3f6:	e7f4      	b.n	800d3e2 <_printf_float+0x43e>

0800d3f8 <_printf_common>:
 800d3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3fc:	4616      	mov	r6, r2
 800d3fe:	4698      	mov	r8, r3
 800d400:	688a      	ldr	r2, [r1, #8]
 800d402:	690b      	ldr	r3, [r1, #16]
 800d404:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d408:	4293      	cmp	r3, r2
 800d40a:	bfb8      	it	lt
 800d40c:	4613      	movlt	r3, r2
 800d40e:	6033      	str	r3, [r6, #0]
 800d410:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d414:	4607      	mov	r7, r0
 800d416:	460c      	mov	r4, r1
 800d418:	b10a      	cbz	r2, 800d41e <_printf_common+0x26>
 800d41a:	3301      	adds	r3, #1
 800d41c:	6033      	str	r3, [r6, #0]
 800d41e:	6823      	ldr	r3, [r4, #0]
 800d420:	0699      	lsls	r1, r3, #26
 800d422:	bf42      	ittt	mi
 800d424:	6833      	ldrmi	r3, [r6, #0]
 800d426:	3302      	addmi	r3, #2
 800d428:	6033      	strmi	r3, [r6, #0]
 800d42a:	6825      	ldr	r5, [r4, #0]
 800d42c:	f015 0506 	ands.w	r5, r5, #6
 800d430:	d106      	bne.n	800d440 <_printf_common+0x48>
 800d432:	f104 0a19 	add.w	sl, r4, #25
 800d436:	68e3      	ldr	r3, [r4, #12]
 800d438:	6832      	ldr	r2, [r6, #0]
 800d43a:	1a9b      	subs	r3, r3, r2
 800d43c:	42ab      	cmp	r3, r5
 800d43e:	dc26      	bgt.n	800d48e <_printf_common+0x96>
 800d440:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d444:	6822      	ldr	r2, [r4, #0]
 800d446:	3b00      	subs	r3, #0
 800d448:	bf18      	it	ne
 800d44a:	2301      	movne	r3, #1
 800d44c:	0692      	lsls	r2, r2, #26
 800d44e:	d42b      	bmi.n	800d4a8 <_printf_common+0xb0>
 800d450:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d454:	4641      	mov	r1, r8
 800d456:	4638      	mov	r0, r7
 800d458:	47c8      	blx	r9
 800d45a:	3001      	adds	r0, #1
 800d45c:	d01e      	beq.n	800d49c <_printf_common+0xa4>
 800d45e:	6823      	ldr	r3, [r4, #0]
 800d460:	6922      	ldr	r2, [r4, #16]
 800d462:	f003 0306 	and.w	r3, r3, #6
 800d466:	2b04      	cmp	r3, #4
 800d468:	bf02      	ittt	eq
 800d46a:	68e5      	ldreq	r5, [r4, #12]
 800d46c:	6833      	ldreq	r3, [r6, #0]
 800d46e:	1aed      	subeq	r5, r5, r3
 800d470:	68a3      	ldr	r3, [r4, #8]
 800d472:	bf0c      	ite	eq
 800d474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d478:	2500      	movne	r5, #0
 800d47a:	4293      	cmp	r3, r2
 800d47c:	bfc4      	itt	gt
 800d47e:	1a9b      	subgt	r3, r3, r2
 800d480:	18ed      	addgt	r5, r5, r3
 800d482:	2600      	movs	r6, #0
 800d484:	341a      	adds	r4, #26
 800d486:	42b5      	cmp	r5, r6
 800d488:	d11a      	bne.n	800d4c0 <_printf_common+0xc8>
 800d48a:	2000      	movs	r0, #0
 800d48c:	e008      	b.n	800d4a0 <_printf_common+0xa8>
 800d48e:	2301      	movs	r3, #1
 800d490:	4652      	mov	r2, sl
 800d492:	4641      	mov	r1, r8
 800d494:	4638      	mov	r0, r7
 800d496:	47c8      	blx	r9
 800d498:	3001      	adds	r0, #1
 800d49a:	d103      	bne.n	800d4a4 <_printf_common+0xac>
 800d49c:	f04f 30ff 	mov.w	r0, #4294967295
 800d4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4a4:	3501      	adds	r5, #1
 800d4a6:	e7c6      	b.n	800d436 <_printf_common+0x3e>
 800d4a8:	18e1      	adds	r1, r4, r3
 800d4aa:	1c5a      	adds	r2, r3, #1
 800d4ac:	2030      	movs	r0, #48	@ 0x30
 800d4ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d4b2:	4422      	add	r2, r4
 800d4b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d4b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d4bc:	3302      	adds	r3, #2
 800d4be:	e7c7      	b.n	800d450 <_printf_common+0x58>
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	4622      	mov	r2, r4
 800d4c4:	4641      	mov	r1, r8
 800d4c6:	4638      	mov	r0, r7
 800d4c8:	47c8      	blx	r9
 800d4ca:	3001      	adds	r0, #1
 800d4cc:	d0e6      	beq.n	800d49c <_printf_common+0xa4>
 800d4ce:	3601      	adds	r6, #1
 800d4d0:	e7d9      	b.n	800d486 <_printf_common+0x8e>
	...

0800d4d4 <_printf_i>:
 800d4d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d8:	7e0f      	ldrb	r7, [r1, #24]
 800d4da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d4dc:	2f78      	cmp	r7, #120	@ 0x78
 800d4de:	4691      	mov	r9, r2
 800d4e0:	4680      	mov	r8, r0
 800d4e2:	460c      	mov	r4, r1
 800d4e4:	469a      	mov	sl, r3
 800d4e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d4ea:	d807      	bhi.n	800d4fc <_printf_i+0x28>
 800d4ec:	2f62      	cmp	r7, #98	@ 0x62
 800d4ee:	d80a      	bhi.n	800d506 <_printf_i+0x32>
 800d4f0:	2f00      	cmp	r7, #0
 800d4f2:	f000 80d2 	beq.w	800d69a <_printf_i+0x1c6>
 800d4f6:	2f58      	cmp	r7, #88	@ 0x58
 800d4f8:	f000 80b9 	beq.w	800d66e <_printf_i+0x19a>
 800d4fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d500:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d504:	e03a      	b.n	800d57c <_printf_i+0xa8>
 800d506:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d50a:	2b15      	cmp	r3, #21
 800d50c:	d8f6      	bhi.n	800d4fc <_printf_i+0x28>
 800d50e:	a101      	add	r1, pc, #4	@ (adr r1, 800d514 <_printf_i+0x40>)
 800d510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d514:	0800d56d 	.word	0x0800d56d
 800d518:	0800d581 	.word	0x0800d581
 800d51c:	0800d4fd 	.word	0x0800d4fd
 800d520:	0800d4fd 	.word	0x0800d4fd
 800d524:	0800d4fd 	.word	0x0800d4fd
 800d528:	0800d4fd 	.word	0x0800d4fd
 800d52c:	0800d581 	.word	0x0800d581
 800d530:	0800d4fd 	.word	0x0800d4fd
 800d534:	0800d4fd 	.word	0x0800d4fd
 800d538:	0800d4fd 	.word	0x0800d4fd
 800d53c:	0800d4fd 	.word	0x0800d4fd
 800d540:	0800d681 	.word	0x0800d681
 800d544:	0800d5ab 	.word	0x0800d5ab
 800d548:	0800d63b 	.word	0x0800d63b
 800d54c:	0800d4fd 	.word	0x0800d4fd
 800d550:	0800d4fd 	.word	0x0800d4fd
 800d554:	0800d6a3 	.word	0x0800d6a3
 800d558:	0800d4fd 	.word	0x0800d4fd
 800d55c:	0800d5ab 	.word	0x0800d5ab
 800d560:	0800d4fd 	.word	0x0800d4fd
 800d564:	0800d4fd 	.word	0x0800d4fd
 800d568:	0800d643 	.word	0x0800d643
 800d56c:	6833      	ldr	r3, [r6, #0]
 800d56e:	1d1a      	adds	r2, r3, #4
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	6032      	str	r2, [r6, #0]
 800d574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d578:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d57c:	2301      	movs	r3, #1
 800d57e:	e09d      	b.n	800d6bc <_printf_i+0x1e8>
 800d580:	6833      	ldr	r3, [r6, #0]
 800d582:	6820      	ldr	r0, [r4, #0]
 800d584:	1d19      	adds	r1, r3, #4
 800d586:	6031      	str	r1, [r6, #0]
 800d588:	0606      	lsls	r6, r0, #24
 800d58a:	d501      	bpl.n	800d590 <_printf_i+0xbc>
 800d58c:	681d      	ldr	r5, [r3, #0]
 800d58e:	e003      	b.n	800d598 <_printf_i+0xc4>
 800d590:	0645      	lsls	r5, r0, #25
 800d592:	d5fb      	bpl.n	800d58c <_printf_i+0xb8>
 800d594:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d598:	2d00      	cmp	r5, #0
 800d59a:	da03      	bge.n	800d5a4 <_printf_i+0xd0>
 800d59c:	232d      	movs	r3, #45	@ 0x2d
 800d59e:	426d      	negs	r5, r5
 800d5a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5a4:	4859      	ldr	r0, [pc, #356]	@ (800d70c <_printf_i+0x238>)
 800d5a6:	230a      	movs	r3, #10
 800d5a8:	e011      	b.n	800d5ce <_printf_i+0xfa>
 800d5aa:	6821      	ldr	r1, [r4, #0]
 800d5ac:	6833      	ldr	r3, [r6, #0]
 800d5ae:	0608      	lsls	r0, r1, #24
 800d5b0:	f853 5b04 	ldr.w	r5, [r3], #4
 800d5b4:	d402      	bmi.n	800d5bc <_printf_i+0xe8>
 800d5b6:	0649      	lsls	r1, r1, #25
 800d5b8:	bf48      	it	mi
 800d5ba:	b2ad      	uxthmi	r5, r5
 800d5bc:	2f6f      	cmp	r7, #111	@ 0x6f
 800d5be:	4853      	ldr	r0, [pc, #332]	@ (800d70c <_printf_i+0x238>)
 800d5c0:	6033      	str	r3, [r6, #0]
 800d5c2:	bf14      	ite	ne
 800d5c4:	230a      	movne	r3, #10
 800d5c6:	2308      	moveq	r3, #8
 800d5c8:	2100      	movs	r1, #0
 800d5ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d5ce:	6866      	ldr	r6, [r4, #4]
 800d5d0:	60a6      	str	r6, [r4, #8]
 800d5d2:	2e00      	cmp	r6, #0
 800d5d4:	bfa2      	ittt	ge
 800d5d6:	6821      	ldrge	r1, [r4, #0]
 800d5d8:	f021 0104 	bicge.w	r1, r1, #4
 800d5dc:	6021      	strge	r1, [r4, #0]
 800d5de:	b90d      	cbnz	r5, 800d5e4 <_printf_i+0x110>
 800d5e0:	2e00      	cmp	r6, #0
 800d5e2:	d04b      	beq.n	800d67c <_printf_i+0x1a8>
 800d5e4:	4616      	mov	r6, r2
 800d5e6:	fbb5 f1f3 	udiv	r1, r5, r3
 800d5ea:	fb03 5711 	mls	r7, r3, r1, r5
 800d5ee:	5dc7      	ldrb	r7, [r0, r7]
 800d5f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d5f4:	462f      	mov	r7, r5
 800d5f6:	42bb      	cmp	r3, r7
 800d5f8:	460d      	mov	r5, r1
 800d5fa:	d9f4      	bls.n	800d5e6 <_printf_i+0x112>
 800d5fc:	2b08      	cmp	r3, #8
 800d5fe:	d10b      	bne.n	800d618 <_printf_i+0x144>
 800d600:	6823      	ldr	r3, [r4, #0]
 800d602:	07df      	lsls	r7, r3, #31
 800d604:	d508      	bpl.n	800d618 <_printf_i+0x144>
 800d606:	6923      	ldr	r3, [r4, #16]
 800d608:	6861      	ldr	r1, [r4, #4]
 800d60a:	4299      	cmp	r1, r3
 800d60c:	bfde      	ittt	le
 800d60e:	2330      	movle	r3, #48	@ 0x30
 800d610:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d614:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d618:	1b92      	subs	r2, r2, r6
 800d61a:	6122      	str	r2, [r4, #16]
 800d61c:	f8cd a000 	str.w	sl, [sp]
 800d620:	464b      	mov	r3, r9
 800d622:	aa03      	add	r2, sp, #12
 800d624:	4621      	mov	r1, r4
 800d626:	4640      	mov	r0, r8
 800d628:	f7ff fee6 	bl	800d3f8 <_printf_common>
 800d62c:	3001      	adds	r0, #1
 800d62e:	d14a      	bne.n	800d6c6 <_printf_i+0x1f2>
 800d630:	f04f 30ff 	mov.w	r0, #4294967295
 800d634:	b004      	add	sp, #16
 800d636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d63a:	6823      	ldr	r3, [r4, #0]
 800d63c:	f043 0320 	orr.w	r3, r3, #32
 800d640:	6023      	str	r3, [r4, #0]
 800d642:	4833      	ldr	r0, [pc, #204]	@ (800d710 <_printf_i+0x23c>)
 800d644:	2778      	movs	r7, #120	@ 0x78
 800d646:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d64a:	6823      	ldr	r3, [r4, #0]
 800d64c:	6831      	ldr	r1, [r6, #0]
 800d64e:	061f      	lsls	r7, r3, #24
 800d650:	f851 5b04 	ldr.w	r5, [r1], #4
 800d654:	d402      	bmi.n	800d65c <_printf_i+0x188>
 800d656:	065f      	lsls	r7, r3, #25
 800d658:	bf48      	it	mi
 800d65a:	b2ad      	uxthmi	r5, r5
 800d65c:	6031      	str	r1, [r6, #0]
 800d65e:	07d9      	lsls	r1, r3, #31
 800d660:	bf44      	itt	mi
 800d662:	f043 0320 	orrmi.w	r3, r3, #32
 800d666:	6023      	strmi	r3, [r4, #0]
 800d668:	b11d      	cbz	r5, 800d672 <_printf_i+0x19e>
 800d66a:	2310      	movs	r3, #16
 800d66c:	e7ac      	b.n	800d5c8 <_printf_i+0xf4>
 800d66e:	4827      	ldr	r0, [pc, #156]	@ (800d70c <_printf_i+0x238>)
 800d670:	e7e9      	b.n	800d646 <_printf_i+0x172>
 800d672:	6823      	ldr	r3, [r4, #0]
 800d674:	f023 0320 	bic.w	r3, r3, #32
 800d678:	6023      	str	r3, [r4, #0]
 800d67a:	e7f6      	b.n	800d66a <_printf_i+0x196>
 800d67c:	4616      	mov	r6, r2
 800d67e:	e7bd      	b.n	800d5fc <_printf_i+0x128>
 800d680:	6833      	ldr	r3, [r6, #0]
 800d682:	6825      	ldr	r5, [r4, #0]
 800d684:	6961      	ldr	r1, [r4, #20]
 800d686:	1d18      	adds	r0, r3, #4
 800d688:	6030      	str	r0, [r6, #0]
 800d68a:	062e      	lsls	r6, r5, #24
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	d501      	bpl.n	800d694 <_printf_i+0x1c0>
 800d690:	6019      	str	r1, [r3, #0]
 800d692:	e002      	b.n	800d69a <_printf_i+0x1c6>
 800d694:	0668      	lsls	r0, r5, #25
 800d696:	d5fb      	bpl.n	800d690 <_printf_i+0x1bc>
 800d698:	8019      	strh	r1, [r3, #0]
 800d69a:	2300      	movs	r3, #0
 800d69c:	6123      	str	r3, [r4, #16]
 800d69e:	4616      	mov	r6, r2
 800d6a0:	e7bc      	b.n	800d61c <_printf_i+0x148>
 800d6a2:	6833      	ldr	r3, [r6, #0]
 800d6a4:	1d1a      	adds	r2, r3, #4
 800d6a6:	6032      	str	r2, [r6, #0]
 800d6a8:	681e      	ldr	r6, [r3, #0]
 800d6aa:	6862      	ldr	r2, [r4, #4]
 800d6ac:	2100      	movs	r1, #0
 800d6ae:	4630      	mov	r0, r6
 800d6b0:	f7f2 fd8e 	bl	80001d0 <memchr>
 800d6b4:	b108      	cbz	r0, 800d6ba <_printf_i+0x1e6>
 800d6b6:	1b80      	subs	r0, r0, r6
 800d6b8:	6060      	str	r0, [r4, #4]
 800d6ba:	6863      	ldr	r3, [r4, #4]
 800d6bc:	6123      	str	r3, [r4, #16]
 800d6be:	2300      	movs	r3, #0
 800d6c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6c4:	e7aa      	b.n	800d61c <_printf_i+0x148>
 800d6c6:	6923      	ldr	r3, [r4, #16]
 800d6c8:	4632      	mov	r2, r6
 800d6ca:	4649      	mov	r1, r9
 800d6cc:	4640      	mov	r0, r8
 800d6ce:	47d0      	blx	sl
 800d6d0:	3001      	adds	r0, #1
 800d6d2:	d0ad      	beq.n	800d630 <_printf_i+0x15c>
 800d6d4:	6823      	ldr	r3, [r4, #0]
 800d6d6:	079b      	lsls	r3, r3, #30
 800d6d8:	d413      	bmi.n	800d702 <_printf_i+0x22e>
 800d6da:	68e0      	ldr	r0, [r4, #12]
 800d6dc:	9b03      	ldr	r3, [sp, #12]
 800d6de:	4298      	cmp	r0, r3
 800d6e0:	bfb8      	it	lt
 800d6e2:	4618      	movlt	r0, r3
 800d6e4:	e7a6      	b.n	800d634 <_printf_i+0x160>
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	4632      	mov	r2, r6
 800d6ea:	4649      	mov	r1, r9
 800d6ec:	4640      	mov	r0, r8
 800d6ee:	47d0      	blx	sl
 800d6f0:	3001      	adds	r0, #1
 800d6f2:	d09d      	beq.n	800d630 <_printf_i+0x15c>
 800d6f4:	3501      	adds	r5, #1
 800d6f6:	68e3      	ldr	r3, [r4, #12]
 800d6f8:	9903      	ldr	r1, [sp, #12]
 800d6fa:	1a5b      	subs	r3, r3, r1
 800d6fc:	42ab      	cmp	r3, r5
 800d6fe:	dcf2      	bgt.n	800d6e6 <_printf_i+0x212>
 800d700:	e7eb      	b.n	800d6da <_printf_i+0x206>
 800d702:	2500      	movs	r5, #0
 800d704:	f104 0619 	add.w	r6, r4, #25
 800d708:	e7f5      	b.n	800d6f6 <_printf_i+0x222>
 800d70a:	bf00      	nop
 800d70c:	080119d2 	.word	0x080119d2
 800d710:	080119e3 	.word	0x080119e3

0800d714 <_scanf_float>:
 800d714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d718:	b087      	sub	sp, #28
 800d71a:	4617      	mov	r7, r2
 800d71c:	9303      	str	r3, [sp, #12]
 800d71e:	688b      	ldr	r3, [r1, #8]
 800d720:	1e5a      	subs	r2, r3, #1
 800d722:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d726:	bf81      	itttt	hi
 800d728:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d72c:	eb03 0b05 	addhi.w	fp, r3, r5
 800d730:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d734:	608b      	strhi	r3, [r1, #8]
 800d736:	680b      	ldr	r3, [r1, #0]
 800d738:	460a      	mov	r2, r1
 800d73a:	f04f 0500 	mov.w	r5, #0
 800d73e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d742:	f842 3b1c 	str.w	r3, [r2], #28
 800d746:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d74a:	4680      	mov	r8, r0
 800d74c:	460c      	mov	r4, r1
 800d74e:	bf98      	it	ls
 800d750:	f04f 0b00 	movls.w	fp, #0
 800d754:	9201      	str	r2, [sp, #4]
 800d756:	4616      	mov	r6, r2
 800d758:	46aa      	mov	sl, r5
 800d75a:	46a9      	mov	r9, r5
 800d75c:	9502      	str	r5, [sp, #8]
 800d75e:	68a2      	ldr	r2, [r4, #8]
 800d760:	b152      	cbz	r2, 800d778 <_scanf_float+0x64>
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	2b4e      	cmp	r3, #78	@ 0x4e
 800d768:	d864      	bhi.n	800d834 <_scanf_float+0x120>
 800d76a:	2b40      	cmp	r3, #64	@ 0x40
 800d76c:	d83c      	bhi.n	800d7e8 <_scanf_float+0xd4>
 800d76e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d772:	b2c8      	uxtb	r0, r1
 800d774:	280e      	cmp	r0, #14
 800d776:	d93a      	bls.n	800d7ee <_scanf_float+0xda>
 800d778:	f1b9 0f00 	cmp.w	r9, #0
 800d77c:	d003      	beq.n	800d786 <_scanf_float+0x72>
 800d77e:	6823      	ldr	r3, [r4, #0]
 800d780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d784:	6023      	str	r3, [r4, #0]
 800d786:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d78a:	f1ba 0f01 	cmp.w	sl, #1
 800d78e:	f200 8117 	bhi.w	800d9c0 <_scanf_float+0x2ac>
 800d792:	9b01      	ldr	r3, [sp, #4]
 800d794:	429e      	cmp	r6, r3
 800d796:	f200 8108 	bhi.w	800d9aa <_scanf_float+0x296>
 800d79a:	2001      	movs	r0, #1
 800d79c:	b007      	add	sp, #28
 800d79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7a2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d7a6:	2a0d      	cmp	r2, #13
 800d7a8:	d8e6      	bhi.n	800d778 <_scanf_float+0x64>
 800d7aa:	a101      	add	r1, pc, #4	@ (adr r1, 800d7b0 <_scanf_float+0x9c>)
 800d7ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d7b0:	0800d8f7 	.word	0x0800d8f7
 800d7b4:	0800d779 	.word	0x0800d779
 800d7b8:	0800d779 	.word	0x0800d779
 800d7bc:	0800d779 	.word	0x0800d779
 800d7c0:	0800d957 	.word	0x0800d957
 800d7c4:	0800d92f 	.word	0x0800d92f
 800d7c8:	0800d779 	.word	0x0800d779
 800d7cc:	0800d779 	.word	0x0800d779
 800d7d0:	0800d905 	.word	0x0800d905
 800d7d4:	0800d779 	.word	0x0800d779
 800d7d8:	0800d779 	.word	0x0800d779
 800d7dc:	0800d779 	.word	0x0800d779
 800d7e0:	0800d779 	.word	0x0800d779
 800d7e4:	0800d8bd 	.word	0x0800d8bd
 800d7e8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d7ec:	e7db      	b.n	800d7a6 <_scanf_float+0x92>
 800d7ee:	290e      	cmp	r1, #14
 800d7f0:	d8c2      	bhi.n	800d778 <_scanf_float+0x64>
 800d7f2:	a001      	add	r0, pc, #4	@ (adr r0, 800d7f8 <_scanf_float+0xe4>)
 800d7f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d7f8:	0800d8ad 	.word	0x0800d8ad
 800d7fc:	0800d779 	.word	0x0800d779
 800d800:	0800d8ad 	.word	0x0800d8ad
 800d804:	0800d943 	.word	0x0800d943
 800d808:	0800d779 	.word	0x0800d779
 800d80c:	0800d855 	.word	0x0800d855
 800d810:	0800d893 	.word	0x0800d893
 800d814:	0800d893 	.word	0x0800d893
 800d818:	0800d893 	.word	0x0800d893
 800d81c:	0800d893 	.word	0x0800d893
 800d820:	0800d893 	.word	0x0800d893
 800d824:	0800d893 	.word	0x0800d893
 800d828:	0800d893 	.word	0x0800d893
 800d82c:	0800d893 	.word	0x0800d893
 800d830:	0800d893 	.word	0x0800d893
 800d834:	2b6e      	cmp	r3, #110	@ 0x6e
 800d836:	d809      	bhi.n	800d84c <_scanf_float+0x138>
 800d838:	2b60      	cmp	r3, #96	@ 0x60
 800d83a:	d8b2      	bhi.n	800d7a2 <_scanf_float+0x8e>
 800d83c:	2b54      	cmp	r3, #84	@ 0x54
 800d83e:	d07b      	beq.n	800d938 <_scanf_float+0x224>
 800d840:	2b59      	cmp	r3, #89	@ 0x59
 800d842:	d199      	bne.n	800d778 <_scanf_float+0x64>
 800d844:	2d07      	cmp	r5, #7
 800d846:	d197      	bne.n	800d778 <_scanf_float+0x64>
 800d848:	2508      	movs	r5, #8
 800d84a:	e02c      	b.n	800d8a6 <_scanf_float+0x192>
 800d84c:	2b74      	cmp	r3, #116	@ 0x74
 800d84e:	d073      	beq.n	800d938 <_scanf_float+0x224>
 800d850:	2b79      	cmp	r3, #121	@ 0x79
 800d852:	e7f6      	b.n	800d842 <_scanf_float+0x12e>
 800d854:	6821      	ldr	r1, [r4, #0]
 800d856:	05c8      	lsls	r0, r1, #23
 800d858:	d51b      	bpl.n	800d892 <_scanf_float+0x17e>
 800d85a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d85e:	6021      	str	r1, [r4, #0]
 800d860:	f109 0901 	add.w	r9, r9, #1
 800d864:	f1bb 0f00 	cmp.w	fp, #0
 800d868:	d003      	beq.n	800d872 <_scanf_float+0x15e>
 800d86a:	3201      	adds	r2, #1
 800d86c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d870:	60a2      	str	r2, [r4, #8]
 800d872:	68a3      	ldr	r3, [r4, #8]
 800d874:	3b01      	subs	r3, #1
 800d876:	60a3      	str	r3, [r4, #8]
 800d878:	6923      	ldr	r3, [r4, #16]
 800d87a:	3301      	adds	r3, #1
 800d87c:	6123      	str	r3, [r4, #16]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	3b01      	subs	r3, #1
 800d882:	2b00      	cmp	r3, #0
 800d884:	607b      	str	r3, [r7, #4]
 800d886:	f340 8087 	ble.w	800d998 <_scanf_float+0x284>
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	3301      	adds	r3, #1
 800d88e:	603b      	str	r3, [r7, #0]
 800d890:	e765      	b.n	800d75e <_scanf_float+0x4a>
 800d892:	eb1a 0105 	adds.w	r1, sl, r5
 800d896:	f47f af6f 	bne.w	800d778 <_scanf_float+0x64>
 800d89a:	6822      	ldr	r2, [r4, #0]
 800d89c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d8a0:	6022      	str	r2, [r4, #0]
 800d8a2:	460d      	mov	r5, r1
 800d8a4:	468a      	mov	sl, r1
 800d8a6:	f806 3b01 	strb.w	r3, [r6], #1
 800d8aa:	e7e2      	b.n	800d872 <_scanf_float+0x15e>
 800d8ac:	6822      	ldr	r2, [r4, #0]
 800d8ae:	0610      	lsls	r0, r2, #24
 800d8b0:	f57f af62 	bpl.w	800d778 <_scanf_float+0x64>
 800d8b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d8b8:	6022      	str	r2, [r4, #0]
 800d8ba:	e7f4      	b.n	800d8a6 <_scanf_float+0x192>
 800d8bc:	f1ba 0f00 	cmp.w	sl, #0
 800d8c0:	d10e      	bne.n	800d8e0 <_scanf_float+0x1cc>
 800d8c2:	f1b9 0f00 	cmp.w	r9, #0
 800d8c6:	d10e      	bne.n	800d8e6 <_scanf_float+0x1d2>
 800d8c8:	6822      	ldr	r2, [r4, #0]
 800d8ca:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d8ce:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d8d2:	d108      	bne.n	800d8e6 <_scanf_float+0x1d2>
 800d8d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d8d8:	6022      	str	r2, [r4, #0]
 800d8da:	f04f 0a01 	mov.w	sl, #1
 800d8de:	e7e2      	b.n	800d8a6 <_scanf_float+0x192>
 800d8e0:	f1ba 0f02 	cmp.w	sl, #2
 800d8e4:	d055      	beq.n	800d992 <_scanf_float+0x27e>
 800d8e6:	2d01      	cmp	r5, #1
 800d8e8:	d002      	beq.n	800d8f0 <_scanf_float+0x1dc>
 800d8ea:	2d04      	cmp	r5, #4
 800d8ec:	f47f af44 	bne.w	800d778 <_scanf_float+0x64>
 800d8f0:	3501      	adds	r5, #1
 800d8f2:	b2ed      	uxtb	r5, r5
 800d8f4:	e7d7      	b.n	800d8a6 <_scanf_float+0x192>
 800d8f6:	f1ba 0f01 	cmp.w	sl, #1
 800d8fa:	f47f af3d 	bne.w	800d778 <_scanf_float+0x64>
 800d8fe:	f04f 0a02 	mov.w	sl, #2
 800d902:	e7d0      	b.n	800d8a6 <_scanf_float+0x192>
 800d904:	b97d      	cbnz	r5, 800d926 <_scanf_float+0x212>
 800d906:	f1b9 0f00 	cmp.w	r9, #0
 800d90a:	f47f af38 	bne.w	800d77e <_scanf_float+0x6a>
 800d90e:	6822      	ldr	r2, [r4, #0]
 800d910:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d914:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d918:	f040 8108 	bne.w	800db2c <_scanf_float+0x418>
 800d91c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d920:	6022      	str	r2, [r4, #0]
 800d922:	2501      	movs	r5, #1
 800d924:	e7bf      	b.n	800d8a6 <_scanf_float+0x192>
 800d926:	2d03      	cmp	r5, #3
 800d928:	d0e2      	beq.n	800d8f0 <_scanf_float+0x1dc>
 800d92a:	2d05      	cmp	r5, #5
 800d92c:	e7de      	b.n	800d8ec <_scanf_float+0x1d8>
 800d92e:	2d02      	cmp	r5, #2
 800d930:	f47f af22 	bne.w	800d778 <_scanf_float+0x64>
 800d934:	2503      	movs	r5, #3
 800d936:	e7b6      	b.n	800d8a6 <_scanf_float+0x192>
 800d938:	2d06      	cmp	r5, #6
 800d93a:	f47f af1d 	bne.w	800d778 <_scanf_float+0x64>
 800d93e:	2507      	movs	r5, #7
 800d940:	e7b1      	b.n	800d8a6 <_scanf_float+0x192>
 800d942:	6822      	ldr	r2, [r4, #0]
 800d944:	0591      	lsls	r1, r2, #22
 800d946:	f57f af17 	bpl.w	800d778 <_scanf_float+0x64>
 800d94a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d94e:	6022      	str	r2, [r4, #0]
 800d950:	f8cd 9008 	str.w	r9, [sp, #8]
 800d954:	e7a7      	b.n	800d8a6 <_scanf_float+0x192>
 800d956:	6822      	ldr	r2, [r4, #0]
 800d958:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d95c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d960:	d006      	beq.n	800d970 <_scanf_float+0x25c>
 800d962:	0550      	lsls	r0, r2, #21
 800d964:	f57f af08 	bpl.w	800d778 <_scanf_float+0x64>
 800d968:	f1b9 0f00 	cmp.w	r9, #0
 800d96c:	f000 80de 	beq.w	800db2c <_scanf_float+0x418>
 800d970:	0591      	lsls	r1, r2, #22
 800d972:	bf58      	it	pl
 800d974:	9902      	ldrpl	r1, [sp, #8]
 800d976:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d97a:	bf58      	it	pl
 800d97c:	eba9 0101 	subpl.w	r1, r9, r1
 800d980:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d984:	bf58      	it	pl
 800d986:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d98a:	6022      	str	r2, [r4, #0]
 800d98c:	f04f 0900 	mov.w	r9, #0
 800d990:	e789      	b.n	800d8a6 <_scanf_float+0x192>
 800d992:	f04f 0a03 	mov.w	sl, #3
 800d996:	e786      	b.n	800d8a6 <_scanf_float+0x192>
 800d998:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d99c:	4639      	mov	r1, r7
 800d99e:	4640      	mov	r0, r8
 800d9a0:	4798      	blx	r3
 800d9a2:	2800      	cmp	r0, #0
 800d9a4:	f43f aedb 	beq.w	800d75e <_scanf_float+0x4a>
 800d9a8:	e6e6      	b.n	800d778 <_scanf_float+0x64>
 800d9aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d9ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d9b2:	463a      	mov	r2, r7
 800d9b4:	4640      	mov	r0, r8
 800d9b6:	4798      	blx	r3
 800d9b8:	6923      	ldr	r3, [r4, #16]
 800d9ba:	3b01      	subs	r3, #1
 800d9bc:	6123      	str	r3, [r4, #16]
 800d9be:	e6e8      	b.n	800d792 <_scanf_float+0x7e>
 800d9c0:	1e6b      	subs	r3, r5, #1
 800d9c2:	2b06      	cmp	r3, #6
 800d9c4:	d824      	bhi.n	800da10 <_scanf_float+0x2fc>
 800d9c6:	2d02      	cmp	r5, #2
 800d9c8:	d836      	bhi.n	800da38 <_scanf_float+0x324>
 800d9ca:	9b01      	ldr	r3, [sp, #4]
 800d9cc:	429e      	cmp	r6, r3
 800d9ce:	f67f aee4 	bls.w	800d79a <_scanf_float+0x86>
 800d9d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d9d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d9da:	463a      	mov	r2, r7
 800d9dc:	4640      	mov	r0, r8
 800d9de:	4798      	blx	r3
 800d9e0:	6923      	ldr	r3, [r4, #16]
 800d9e2:	3b01      	subs	r3, #1
 800d9e4:	6123      	str	r3, [r4, #16]
 800d9e6:	e7f0      	b.n	800d9ca <_scanf_float+0x2b6>
 800d9e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d9ec:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d9f0:	463a      	mov	r2, r7
 800d9f2:	4640      	mov	r0, r8
 800d9f4:	4798      	blx	r3
 800d9f6:	6923      	ldr	r3, [r4, #16]
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	6123      	str	r3, [r4, #16]
 800d9fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da00:	fa5f fa8a 	uxtb.w	sl, sl
 800da04:	f1ba 0f02 	cmp.w	sl, #2
 800da08:	d1ee      	bne.n	800d9e8 <_scanf_float+0x2d4>
 800da0a:	3d03      	subs	r5, #3
 800da0c:	b2ed      	uxtb	r5, r5
 800da0e:	1b76      	subs	r6, r6, r5
 800da10:	6823      	ldr	r3, [r4, #0]
 800da12:	05da      	lsls	r2, r3, #23
 800da14:	d530      	bpl.n	800da78 <_scanf_float+0x364>
 800da16:	055b      	lsls	r3, r3, #21
 800da18:	d511      	bpl.n	800da3e <_scanf_float+0x32a>
 800da1a:	9b01      	ldr	r3, [sp, #4]
 800da1c:	429e      	cmp	r6, r3
 800da1e:	f67f aebc 	bls.w	800d79a <_scanf_float+0x86>
 800da22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800da2a:	463a      	mov	r2, r7
 800da2c:	4640      	mov	r0, r8
 800da2e:	4798      	blx	r3
 800da30:	6923      	ldr	r3, [r4, #16]
 800da32:	3b01      	subs	r3, #1
 800da34:	6123      	str	r3, [r4, #16]
 800da36:	e7f0      	b.n	800da1a <_scanf_float+0x306>
 800da38:	46aa      	mov	sl, r5
 800da3a:	46b3      	mov	fp, r6
 800da3c:	e7de      	b.n	800d9fc <_scanf_float+0x2e8>
 800da3e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800da42:	6923      	ldr	r3, [r4, #16]
 800da44:	2965      	cmp	r1, #101	@ 0x65
 800da46:	f103 33ff 	add.w	r3, r3, #4294967295
 800da4a:	f106 35ff 	add.w	r5, r6, #4294967295
 800da4e:	6123      	str	r3, [r4, #16]
 800da50:	d00c      	beq.n	800da6c <_scanf_float+0x358>
 800da52:	2945      	cmp	r1, #69	@ 0x45
 800da54:	d00a      	beq.n	800da6c <_scanf_float+0x358>
 800da56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da5a:	463a      	mov	r2, r7
 800da5c:	4640      	mov	r0, r8
 800da5e:	4798      	blx	r3
 800da60:	6923      	ldr	r3, [r4, #16]
 800da62:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800da66:	3b01      	subs	r3, #1
 800da68:	1eb5      	subs	r5, r6, #2
 800da6a:	6123      	str	r3, [r4, #16]
 800da6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da70:	463a      	mov	r2, r7
 800da72:	4640      	mov	r0, r8
 800da74:	4798      	blx	r3
 800da76:	462e      	mov	r6, r5
 800da78:	6822      	ldr	r2, [r4, #0]
 800da7a:	f012 0210 	ands.w	r2, r2, #16
 800da7e:	d001      	beq.n	800da84 <_scanf_float+0x370>
 800da80:	2000      	movs	r0, #0
 800da82:	e68b      	b.n	800d79c <_scanf_float+0x88>
 800da84:	7032      	strb	r2, [r6, #0]
 800da86:	6823      	ldr	r3, [r4, #0]
 800da88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800da8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da90:	d11c      	bne.n	800dacc <_scanf_float+0x3b8>
 800da92:	9b02      	ldr	r3, [sp, #8]
 800da94:	454b      	cmp	r3, r9
 800da96:	eba3 0209 	sub.w	r2, r3, r9
 800da9a:	d123      	bne.n	800dae4 <_scanf_float+0x3d0>
 800da9c:	9901      	ldr	r1, [sp, #4]
 800da9e:	2200      	movs	r2, #0
 800daa0:	4640      	mov	r0, r8
 800daa2:	f002 fd09 	bl	80104b8 <_strtod_r>
 800daa6:	9b03      	ldr	r3, [sp, #12]
 800daa8:	6821      	ldr	r1, [r4, #0]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f011 0f02 	tst.w	r1, #2
 800dab0:	ec57 6b10 	vmov	r6, r7, d0
 800dab4:	f103 0204 	add.w	r2, r3, #4
 800dab8:	d01f      	beq.n	800dafa <_scanf_float+0x3e6>
 800daba:	9903      	ldr	r1, [sp, #12]
 800dabc:	600a      	str	r2, [r1, #0]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	e9c3 6700 	strd	r6, r7, [r3]
 800dac4:	68e3      	ldr	r3, [r4, #12]
 800dac6:	3301      	adds	r3, #1
 800dac8:	60e3      	str	r3, [r4, #12]
 800daca:	e7d9      	b.n	800da80 <_scanf_float+0x36c>
 800dacc:	9b04      	ldr	r3, [sp, #16]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d0e4      	beq.n	800da9c <_scanf_float+0x388>
 800dad2:	9905      	ldr	r1, [sp, #20]
 800dad4:	230a      	movs	r3, #10
 800dad6:	3101      	adds	r1, #1
 800dad8:	4640      	mov	r0, r8
 800dada:	f002 fd6d 	bl	80105b8 <_strtol_r>
 800dade:	9b04      	ldr	r3, [sp, #16]
 800dae0:	9e05      	ldr	r6, [sp, #20]
 800dae2:	1ac2      	subs	r2, r0, r3
 800dae4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800dae8:	429e      	cmp	r6, r3
 800daea:	bf28      	it	cs
 800daec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800daf0:	4910      	ldr	r1, [pc, #64]	@ (800db34 <_scanf_float+0x420>)
 800daf2:	4630      	mov	r0, r6
 800daf4:	f000 f954 	bl	800dda0 <siprintf>
 800daf8:	e7d0      	b.n	800da9c <_scanf_float+0x388>
 800dafa:	f011 0f04 	tst.w	r1, #4
 800dafe:	9903      	ldr	r1, [sp, #12]
 800db00:	600a      	str	r2, [r1, #0]
 800db02:	d1dc      	bne.n	800dabe <_scanf_float+0x3aa>
 800db04:	681d      	ldr	r5, [r3, #0]
 800db06:	4632      	mov	r2, r6
 800db08:	463b      	mov	r3, r7
 800db0a:	4630      	mov	r0, r6
 800db0c:	4639      	mov	r1, r7
 800db0e:	f7f3 f80d 	bl	8000b2c <__aeabi_dcmpun>
 800db12:	b128      	cbz	r0, 800db20 <_scanf_float+0x40c>
 800db14:	4808      	ldr	r0, [pc, #32]	@ (800db38 <_scanf_float+0x424>)
 800db16:	f000 fac9 	bl	800e0ac <nanf>
 800db1a:	ed85 0a00 	vstr	s0, [r5]
 800db1e:	e7d1      	b.n	800dac4 <_scanf_float+0x3b0>
 800db20:	4630      	mov	r0, r6
 800db22:	4639      	mov	r1, r7
 800db24:	f7f3 f860 	bl	8000be8 <__aeabi_d2f>
 800db28:	6028      	str	r0, [r5, #0]
 800db2a:	e7cb      	b.n	800dac4 <_scanf_float+0x3b0>
 800db2c:	f04f 0900 	mov.w	r9, #0
 800db30:	e629      	b.n	800d786 <_scanf_float+0x72>
 800db32:	bf00      	nop
 800db34:	080119f4 	.word	0x080119f4
 800db38:	08011d8d 	.word	0x08011d8d

0800db3c <std>:
 800db3c:	2300      	movs	r3, #0
 800db3e:	b510      	push	{r4, lr}
 800db40:	4604      	mov	r4, r0
 800db42:	e9c0 3300 	strd	r3, r3, [r0]
 800db46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db4a:	6083      	str	r3, [r0, #8]
 800db4c:	8181      	strh	r1, [r0, #12]
 800db4e:	6643      	str	r3, [r0, #100]	@ 0x64
 800db50:	81c2      	strh	r2, [r0, #14]
 800db52:	6183      	str	r3, [r0, #24]
 800db54:	4619      	mov	r1, r3
 800db56:	2208      	movs	r2, #8
 800db58:	305c      	adds	r0, #92	@ 0x5c
 800db5a:	f000 fa19 	bl	800df90 <memset>
 800db5e:	4b0d      	ldr	r3, [pc, #52]	@ (800db94 <std+0x58>)
 800db60:	6263      	str	r3, [r4, #36]	@ 0x24
 800db62:	4b0d      	ldr	r3, [pc, #52]	@ (800db98 <std+0x5c>)
 800db64:	62a3      	str	r3, [r4, #40]	@ 0x28
 800db66:	4b0d      	ldr	r3, [pc, #52]	@ (800db9c <std+0x60>)
 800db68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800db6a:	4b0d      	ldr	r3, [pc, #52]	@ (800dba0 <std+0x64>)
 800db6c:	6323      	str	r3, [r4, #48]	@ 0x30
 800db6e:	4b0d      	ldr	r3, [pc, #52]	@ (800dba4 <std+0x68>)
 800db70:	6224      	str	r4, [r4, #32]
 800db72:	429c      	cmp	r4, r3
 800db74:	d006      	beq.n	800db84 <std+0x48>
 800db76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800db7a:	4294      	cmp	r4, r2
 800db7c:	d002      	beq.n	800db84 <std+0x48>
 800db7e:	33d0      	adds	r3, #208	@ 0xd0
 800db80:	429c      	cmp	r4, r3
 800db82:	d105      	bne.n	800db90 <std+0x54>
 800db84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800db88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db8c:	f000 ba7c 	b.w	800e088 <__retarget_lock_init_recursive>
 800db90:	bd10      	pop	{r4, pc}
 800db92:	bf00      	nop
 800db94:	0800dde1 	.word	0x0800dde1
 800db98:	0800de03 	.word	0x0800de03
 800db9c:	0800de3b 	.word	0x0800de3b
 800dba0:	0800de5f 	.word	0x0800de5f
 800dba4:	20000f88 	.word	0x20000f88

0800dba8 <stdio_exit_handler>:
 800dba8:	4a02      	ldr	r2, [pc, #8]	@ (800dbb4 <stdio_exit_handler+0xc>)
 800dbaa:	4903      	ldr	r1, [pc, #12]	@ (800dbb8 <stdio_exit_handler+0x10>)
 800dbac:	4803      	ldr	r0, [pc, #12]	@ (800dbbc <stdio_exit_handler+0x14>)
 800dbae:	f000 b869 	b.w	800dc84 <_fwalk_sglue>
 800dbb2:	bf00      	nop
 800dbb4:	20000048 	.word	0x20000048
 800dbb8:	08010bf9 	.word	0x08010bf9
 800dbbc:	20000058 	.word	0x20000058

0800dbc0 <cleanup_stdio>:
 800dbc0:	6841      	ldr	r1, [r0, #4]
 800dbc2:	4b0c      	ldr	r3, [pc, #48]	@ (800dbf4 <cleanup_stdio+0x34>)
 800dbc4:	4299      	cmp	r1, r3
 800dbc6:	b510      	push	{r4, lr}
 800dbc8:	4604      	mov	r4, r0
 800dbca:	d001      	beq.n	800dbd0 <cleanup_stdio+0x10>
 800dbcc:	f003 f814 	bl	8010bf8 <_fflush_r>
 800dbd0:	68a1      	ldr	r1, [r4, #8]
 800dbd2:	4b09      	ldr	r3, [pc, #36]	@ (800dbf8 <cleanup_stdio+0x38>)
 800dbd4:	4299      	cmp	r1, r3
 800dbd6:	d002      	beq.n	800dbde <cleanup_stdio+0x1e>
 800dbd8:	4620      	mov	r0, r4
 800dbda:	f003 f80d 	bl	8010bf8 <_fflush_r>
 800dbde:	68e1      	ldr	r1, [r4, #12]
 800dbe0:	4b06      	ldr	r3, [pc, #24]	@ (800dbfc <cleanup_stdio+0x3c>)
 800dbe2:	4299      	cmp	r1, r3
 800dbe4:	d004      	beq.n	800dbf0 <cleanup_stdio+0x30>
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbec:	f003 b804 	b.w	8010bf8 <_fflush_r>
 800dbf0:	bd10      	pop	{r4, pc}
 800dbf2:	bf00      	nop
 800dbf4:	20000f88 	.word	0x20000f88
 800dbf8:	20000ff0 	.word	0x20000ff0
 800dbfc:	20001058 	.word	0x20001058

0800dc00 <global_stdio_init.part.0>:
 800dc00:	b510      	push	{r4, lr}
 800dc02:	4b0b      	ldr	r3, [pc, #44]	@ (800dc30 <global_stdio_init.part.0+0x30>)
 800dc04:	4c0b      	ldr	r4, [pc, #44]	@ (800dc34 <global_stdio_init.part.0+0x34>)
 800dc06:	4a0c      	ldr	r2, [pc, #48]	@ (800dc38 <global_stdio_init.part.0+0x38>)
 800dc08:	601a      	str	r2, [r3, #0]
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	2104      	movs	r1, #4
 800dc10:	f7ff ff94 	bl	800db3c <std>
 800dc14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dc18:	2201      	movs	r2, #1
 800dc1a:	2109      	movs	r1, #9
 800dc1c:	f7ff ff8e 	bl	800db3c <std>
 800dc20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dc24:	2202      	movs	r2, #2
 800dc26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc2a:	2112      	movs	r1, #18
 800dc2c:	f7ff bf86 	b.w	800db3c <std>
 800dc30:	200010c0 	.word	0x200010c0
 800dc34:	20000f88 	.word	0x20000f88
 800dc38:	0800dba9 	.word	0x0800dba9

0800dc3c <__sfp_lock_acquire>:
 800dc3c:	4801      	ldr	r0, [pc, #4]	@ (800dc44 <__sfp_lock_acquire+0x8>)
 800dc3e:	f000 ba24 	b.w	800e08a <__retarget_lock_acquire_recursive>
 800dc42:	bf00      	nop
 800dc44:	200010c9 	.word	0x200010c9

0800dc48 <__sfp_lock_release>:
 800dc48:	4801      	ldr	r0, [pc, #4]	@ (800dc50 <__sfp_lock_release+0x8>)
 800dc4a:	f000 ba1f 	b.w	800e08c <__retarget_lock_release_recursive>
 800dc4e:	bf00      	nop
 800dc50:	200010c9 	.word	0x200010c9

0800dc54 <__sinit>:
 800dc54:	b510      	push	{r4, lr}
 800dc56:	4604      	mov	r4, r0
 800dc58:	f7ff fff0 	bl	800dc3c <__sfp_lock_acquire>
 800dc5c:	6a23      	ldr	r3, [r4, #32]
 800dc5e:	b11b      	cbz	r3, 800dc68 <__sinit+0x14>
 800dc60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc64:	f7ff bff0 	b.w	800dc48 <__sfp_lock_release>
 800dc68:	4b04      	ldr	r3, [pc, #16]	@ (800dc7c <__sinit+0x28>)
 800dc6a:	6223      	str	r3, [r4, #32]
 800dc6c:	4b04      	ldr	r3, [pc, #16]	@ (800dc80 <__sinit+0x2c>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d1f5      	bne.n	800dc60 <__sinit+0xc>
 800dc74:	f7ff ffc4 	bl	800dc00 <global_stdio_init.part.0>
 800dc78:	e7f2      	b.n	800dc60 <__sinit+0xc>
 800dc7a:	bf00      	nop
 800dc7c:	0800dbc1 	.word	0x0800dbc1
 800dc80:	200010c0 	.word	0x200010c0

0800dc84 <_fwalk_sglue>:
 800dc84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc88:	4607      	mov	r7, r0
 800dc8a:	4688      	mov	r8, r1
 800dc8c:	4614      	mov	r4, r2
 800dc8e:	2600      	movs	r6, #0
 800dc90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc94:	f1b9 0901 	subs.w	r9, r9, #1
 800dc98:	d505      	bpl.n	800dca6 <_fwalk_sglue+0x22>
 800dc9a:	6824      	ldr	r4, [r4, #0]
 800dc9c:	2c00      	cmp	r4, #0
 800dc9e:	d1f7      	bne.n	800dc90 <_fwalk_sglue+0xc>
 800dca0:	4630      	mov	r0, r6
 800dca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dca6:	89ab      	ldrh	r3, [r5, #12]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d907      	bls.n	800dcbc <_fwalk_sglue+0x38>
 800dcac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	d003      	beq.n	800dcbc <_fwalk_sglue+0x38>
 800dcb4:	4629      	mov	r1, r5
 800dcb6:	4638      	mov	r0, r7
 800dcb8:	47c0      	blx	r8
 800dcba:	4306      	orrs	r6, r0
 800dcbc:	3568      	adds	r5, #104	@ 0x68
 800dcbe:	e7e9      	b.n	800dc94 <_fwalk_sglue+0x10>

0800dcc0 <iprintf>:
 800dcc0:	b40f      	push	{r0, r1, r2, r3}
 800dcc2:	b507      	push	{r0, r1, r2, lr}
 800dcc4:	4906      	ldr	r1, [pc, #24]	@ (800dce0 <iprintf+0x20>)
 800dcc6:	ab04      	add	r3, sp, #16
 800dcc8:	6808      	ldr	r0, [r1, #0]
 800dcca:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcce:	6881      	ldr	r1, [r0, #8]
 800dcd0:	9301      	str	r3, [sp, #4]
 800dcd2:	f002 fdf5 	bl	80108c0 <_vfiprintf_r>
 800dcd6:	b003      	add	sp, #12
 800dcd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcdc:	b004      	add	sp, #16
 800dcde:	4770      	bx	lr
 800dce0:	20000054 	.word	0x20000054

0800dce4 <_puts_r>:
 800dce4:	6a03      	ldr	r3, [r0, #32]
 800dce6:	b570      	push	{r4, r5, r6, lr}
 800dce8:	6884      	ldr	r4, [r0, #8]
 800dcea:	4605      	mov	r5, r0
 800dcec:	460e      	mov	r6, r1
 800dcee:	b90b      	cbnz	r3, 800dcf4 <_puts_r+0x10>
 800dcf0:	f7ff ffb0 	bl	800dc54 <__sinit>
 800dcf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dcf6:	07db      	lsls	r3, r3, #31
 800dcf8:	d405      	bmi.n	800dd06 <_puts_r+0x22>
 800dcfa:	89a3      	ldrh	r3, [r4, #12]
 800dcfc:	0598      	lsls	r0, r3, #22
 800dcfe:	d402      	bmi.n	800dd06 <_puts_r+0x22>
 800dd00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd02:	f000 f9c2 	bl	800e08a <__retarget_lock_acquire_recursive>
 800dd06:	89a3      	ldrh	r3, [r4, #12]
 800dd08:	0719      	lsls	r1, r3, #28
 800dd0a:	d502      	bpl.n	800dd12 <_puts_r+0x2e>
 800dd0c:	6923      	ldr	r3, [r4, #16]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d135      	bne.n	800dd7e <_puts_r+0x9a>
 800dd12:	4621      	mov	r1, r4
 800dd14:	4628      	mov	r0, r5
 800dd16:	f000 f8e5 	bl	800dee4 <__swsetup_r>
 800dd1a:	b380      	cbz	r0, 800dd7e <_puts_r+0x9a>
 800dd1c:	f04f 35ff 	mov.w	r5, #4294967295
 800dd20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd22:	07da      	lsls	r2, r3, #31
 800dd24:	d405      	bmi.n	800dd32 <_puts_r+0x4e>
 800dd26:	89a3      	ldrh	r3, [r4, #12]
 800dd28:	059b      	lsls	r3, r3, #22
 800dd2a:	d402      	bmi.n	800dd32 <_puts_r+0x4e>
 800dd2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd2e:	f000 f9ad 	bl	800e08c <__retarget_lock_release_recursive>
 800dd32:	4628      	mov	r0, r5
 800dd34:	bd70      	pop	{r4, r5, r6, pc}
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	da04      	bge.n	800dd44 <_puts_r+0x60>
 800dd3a:	69a2      	ldr	r2, [r4, #24]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	dc17      	bgt.n	800dd70 <_puts_r+0x8c>
 800dd40:	290a      	cmp	r1, #10
 800dd42:	d015      	beq.n	800dd70 <_puts_r+0x8c>
 800dd44:	6823      	ldr	r3, [r4, #0]
 800dd46:	1c5a      	adds	r2, r3, #1
 800dd48:	6022      	str	r2, [r4, #0]
 800dd4a:	7019      	strb	r1, [r3, #0]
 800dd4c:	68a3      	ldr	r3, [r4, #8]
 800dd4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dd52:	3b01      	subs	r3, #1
 800dd54:	60a3      	str	r3, [r4, #8]
 800dd56:	2900      	cmp	r1, #0
 800dd58:	d1ed      	bne.n	800dd36 <_puts_r+0x52>
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	da11      	bge.n	800dd82 <_puts_r+0x9e>
 800dd5e:	4622      	mov	r2, r4
 800dd60:	210a      	movs	r1, #10
 800dd62:	4628      	mov	r0, r5
 800dd64:	f000 f87f 	bl	800de66 <__swbuf_r>
 800dd68:	3001      	adds	r0, #1
 800dd6a:	d0d7      	beq.n	800dd1c <_puts_r+0x38>
 800dd6c:	250a      	movs	r5, #10
 800dd6e:	e7d7      	b.n	800dd20 <_puts_r+0x3c>
 800dd70:	4622      	mov	r2, r4
 800dd72:	4628      	mov	r0, r5
 800dd74:	f000 f877 	bl	800de66 <__swbuf_r>
 800dd78:	3001      	adds	r0, #1
 800dd7a:	d1e7      	bne.n	800dd4c <_puts_r+0x68>
 800dd7c:	e7ce      	b.n	800dd1c <_puts_r+0x38>
 800dd7e:	3e01      	subs	r6, #1
 800dd80:	e7e4      	b.n	800dd4c <_puts_r+0x68>
 800dd82:	6823      	ldr	r3, [r4, #0]
 800dd84:	1c5a      	adds	r2, r3, #1
 800dd86:	6022      	str	r2, [r4, #0]
 800dd88:	220a      	movs	r2, #10
 800dd8a:	701a      	strb	r2, [r3, #0]
 800dd8c:	e7ee      	b.n	800dd6c <_puts_r+0x88>
	...

0800dd90 <puts>:
 800dd90:	4b02      	ldr	r3, [pc, #8]	@ (800dd9c <puts+0xc>)
 800dd92:	4601      	mov	r1, r0
 800dd94:	6818      	ldr	r0, [r3, #0]
 800dd96:	f7ff bfa5 	b.w	800dce4 <_puts_r>
 800dd9a:	bf00      	nop
 800dd9c:	20000054 	.word	0x20000054

0800dda0 <siprintf>:
 800dda0:	b40e      	push	{r1, r2, r3}
 800dda2:	b500      	push	{lr}
 800dda4:	b09c      	sub	sp, #112	@ 0x70
 800dda6:	ab1d      	add	r3, sp, #116	@ 0x74
 800dda8:	9002      	str	r0, [sp, #8]
 800ddaa:	9006      	str	r0, [sp, #24]
 800ddac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ddb0:	4809      	ldr	r0, [pc, #36]	@ (800ddd8 <siprintf+0x38>)
 800ddb2:	9107      	str	r1, [sp, #28]
 800ddb4:	9104      	str	r1, [sp, #16]
 800ddb6:	4909      	ldr	r1, [pc, #36]	@ (800dddc <siprintf+0x3c>)
 800ddb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddbc:	9105      	str	r1, [sp, #20]
 800ddbe:	6800      	ldr	r0, [r0, #0]
 800ddc0:	9301      	str	r3, [sp, #4]
 800ddc2:	a902      	add	r1, sp, #8
 800ddc4:	f002 fc56 	bl	8010674 <_svfiprintf_r>
 800ddc8:	9b02      	ldr	r3, [sp, #8]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	701a      	strb	r2, [r3, #0]
 800ddce:	b01c      	add	sp, #112	@ 0x70
 800ddd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddd4:	b003      	add	sp, #12
 800ddd6:	4770      	bx	lr
 800ddd8:	20000054 	.word	0x20000054
 800dddc:	ffff0208 	.word	0xffff0208

0800dde0 <__sread>:
 800dde0:	b510      	push	{r4, lr}
 800dde2:	460c      	mov	r4, r1
 800dde4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dde8:	f000 f900 	bl	800dfec <_read_r>
 800ddec:	2800      	cmp	r0, #0
 800ddee:	bfab      	itete	ge
 800ddf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ddf2:	89a3      	ldrhlt	r3, [r4, #12]
 800ddf4:	181b      	addge	r3, r3, r0
 800ddf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ddfa:	bfac      	ite	ge
 800ddfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ddfe:	81a3      	strhlt	r3, [r4, #12]
 800de00:	bd10      	pop	{r4, pc}

0800de02 <__swrite>:
 800de02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de06:	461f      	mov	r7, r3
 800de08:	898b      	ldrh	r3, [r1, #12]
 800de0a:	05db      	lsls	r3, r3, #23
 800de0c:	4605      	mov	r5, r0
 800de0e:	460c      	mov	r4, r1
 800de10:	4616      	mov	r6, r2
 800de12:	d505      	bpl.n	800de20 <__swrite+0x1e>
 800de14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de18:	2302      	movs	r3, #2
 800de1a:	2200      	movs	r2, #0
 800de1c:	f000 f8d4 	bl	800dfc8 <_lseek_r>
 800de20:	89a3      	ldrh	r3, [r4, #12]
 800de22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800de2a:	81a3      	strh	r3, [r4, #12]
 800de2c:	4632      	mov	r2, r6
 800de2e:	463b      	mov	r3, r7
 800de30:	4628      	mov	r0, r5
 800de32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de36:	f000 b8eb 	b.w	800e010 <_write_r>

0800de3a <__sseek>:
 800de3a:	b510      	push	{r4, lr}
 800de3c:	460c      	mov	r4, r1
 800de3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de42:	f000 f8c1 	bl	800dfc8 <_lseek_r>
 800de46:	1c43      	adds	r3, r0, #1
 800de48:	89a3      	ldrh	r3, [r4, #12]
 800de4a:	bf15      	itete	ne
 800de4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800de4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800de52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800de56:	81a3      	strheq	r3, [r4, #12]
 800de58:	bf18      	it	ne
 800de5a:	81a3      	strhne	r3, [r4, #12]
 800de5c:	bd10      	pop	{r4, pc}

0800de5e <__sclose>:
 800de5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de62:	f000 b8a1 	b.w	800dfa8 <_close_r>

0800de66 <__swbuf_r>:
 800de66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de68:	460e      	mov	r6, r1
 800de6a:	4614      	mov	r4, r2
 800de6c:	4605      	mov	r5, r0
 800de6e:	b118      	cbz	r0, 800de78 <__swbuf_r+0x12>
 800de70:	6a03      	ldr	r3, [r0, #32]
 800de72:	b90b      	cbnz	r3, 800de78 <__swbuf_r+0x12>
 800de74:	f7ff feee 	bl	800dc54 <__sinit>
 800de78:	69a3      	ldr	r3, [r4, #24]
 800de7a:	60a3      	str	r3, [r4, #8]
 800de7c:	89a3      	ldrh	r3, [r4, #12]
 800de7e:	071a      	lsls	r2, r3, #28
 800de80:	d501      	bpl.n	800de86 <__swbuf_r+0x20>
 800de82:	6923      	ldr	r3, [r4, #16]
 800de84:	b943      	cbnz	r3, 800de98 <__swbuf_r+0x32>
 800de86:	4621      	mov	r1, r4
 800de88:	4628      	mov	r0, r5
 800de8a:	f000 f82b 	bl	800dee4 <__swsetup_r>
 800de8e:	b118      	cbz	r0, 800de98 <__swbuf_r+0x32>
 800de90:	f04f 37ff 	mov.w	r7, #4294967295
 800de94:	4638      	mov	r0, r7
 800de96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de98:	6823      	ldr	r3, [r4, #0]
 800de9a:	6922      	ldr	r2, [r4, #16]
 800de9c:	1a98      	subs	r0, r3, r2
 800de9e:	6963      	ldr	r3, [r4, #20]
 800dea0:	b2f6      	uxtb	r6, r6
 800dea2:	4283      	cmp	r3, r0
 800dea4:	4637      	mov	r7, r6
 800dea6:	dc05      	bgt.n	800deb4 <__swbuf_r+0x4e>
 800dea8:	4621      	mov	r1, r4
 800deaa:	4628      	mov	r0, r5
 800deac:	f002 fea4 	bl	8010bf8 <_fflush_r>
 800deb0:	2800      	cmp	r0, #0
 800deb2:	d1ed      	bne.n	800de90 <__swbuf_r+0x2a>
 800deb4:	68a3      	ldr	r3, [r4, #8]
 800deb6:	3b01      	subs	r3, #1
 800deb8:	60a3      	str	r3, [r4, #8]
 800deba:	6823      	ldr	r3, [r4, #0]
 800debc:	1c5a      	adds	r2, r3, #1
 800debe:	6022      	str	r2, [r4, #0]
 800dec0:	701e      	strb	r6, [r3, #0]
 800dec2:	6962      	ldr	r2, [r4, #20]
 800dec4:	1c43      	adds	r3, r0, #1
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d004      	beq.n	800ded4 <__swbuf_r+0x6e>
 800deca:	89a3      	ldrh	r3, [r4, #12]
 800decc:	07db      	lsls	r3, r3, #31
 800dece:	d5e1      	bpl.n	800de94 <__swbuf_r+0x2e>
 800ded0:	2e0a      	cmp	r6, #10
 800ded2:	d1df      	bne.n	800de94 <__swbuf_r+0x2e>
 800ded4:	4621      	mov	r1, r4
 800ded6:	4628      	mov	r0, r5
 800ded8:	f002 fe8e 	bl	8010bf8 <_fflush_r>
 800dedc:	2800      	cmp	r0, #0
 800dede:	d0d9      	beq.n	800de94 <__swbuf_r+0x2e>
 800dee0:	e7d6      	b.n	800de90 <__swbuf_r+0x2a>
	...

0800dee4 <__swsetup_r>:
 800dee4:	b538      	push	{r3, r4, r5, lr}
 800dee6:	4b29      	ldr	r3, [pc, #164]	@ (800df8c <__swsetup_r+0xa8>)
 800dee8:	4605      	mov	r5, r0
 800deea:	6818      	ldr	r0, [r3, #0]
 800deec:	460c      	mov	r4, r1
 800deee:	b118      	cbz	r0, 800def8 <__swsetup_r+0x14>
 800def0:	6a03      	ldr	r3, [r0, #32]
 800def2:	b90b      	cbnz	r3, 800def8 <__swsetup_r+0x14>
 800def4:	f7ff feae 	bl	800dc54 <__sinit>
 800def8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800defc:	0719      	lsls	r1, r3, #28
 800defe:	d422      	bmi.n	800df46 <__swsetup_r+0x62>
 800df00:	06da      	lsls	r2, r3, #27
 800df02:	d407      	bmi.n	800df14 <__swsetup_r+0x30>
 800df04:	2209      	movs	r2, #9
 800df06:	602a      	str	r2, [r5, #0]
 800df08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df0c:	81a3      	strh	r3, [r4, #12]
 800df0e:	f04f 30ff 	mov.w	r0, #4294967295
 800df12:	e033      	b.n	800df7c <__swsetup_r+0x98>
 800df14:	0758      	lsls	r0, r3, #29
 800df16:	d512      	bpl.n	800df3e <__swsetup_r+0x5a>
 800df18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df1a:	b141      	cbz	r1, 800df2e <__swsetup_r+0x4a>
 800df1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df20:	4299      	cmp	r1, r3
 800df22:	d002      	beq.n	800df2a <__swsetup_r+0x46>
 800df24:	4628      	mov	r0, r5
 800df26:	f000 ff13 	bl	800ed50 <_free_r>
 800df2a:	2300      	movs	r3, #0
 800df2c:	6363      	str	r3, [r4, #52]	@ 0x34
 800df2e:	89a3      	ldrh	r3, [r4, #12]
 800df30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800df34:	81a3      	strh	r3, [r4, #12]
 800df36:	2300      	movs	r3, #0
 800df38:	6063      	str	r3, [r4, #4]
 800df3a:	6923      	ldr	r3, [r4, #16]
 800df3c:	6023      	str	r3, [r4, #0]
 800df3e:	89a3      	ldrh	r3, [r4, #12]
 800df40:	f043 0308 	orr.w	r3, r3, #8
 800df44:	81a3      	strh	r3, [r4, #12]
 800df46:	6923      	ldr	r3, [r4, #16]
 800df48:	b94b      	cbnz	r3, 800df5e <__swsetup_r+0x7a>
 800df4a:	89a3      	ldrh	r3, [r4, #12]
 800df4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800df50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df54:	d003      	beq.n	800df5e <__swsetup_r+0x7a>
 800df56:	4621      	mov	r1, r4
 800df58:	4628      	mov	r0, r5
 800df5a:	f002 fe9b 	bl	8010c94 <__smakebuf_r>
 800df5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df62:	f013 0201 	ands.w	r2, r3, #1
 800df66:	d00a      	beq.n	800df7e <__swsetup_r+0x9a>
 800df68:	2200      	movs	r2, #0
 800df6a:	60a2      	str	r2, [r4, #8]
 800df6c:	6962      	ldr	r2, [r4, #20]
 800df6e:	4252      	negs	r2, r2
 800df70:	61a2      	str	r2, [r4, #24]
 800df72:	6922      	ldr	r2, [r4, #16]
 800df74:	b942      	cbnz	r2, 800df88 <__swsetup_r+0xa4>
 800df76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800df7a:	d1c5      	bne.n	800df08 <__swsetup_r+0x24>
 800df7c:	bd38      	pop	{r3, r4, r5, pc}
 800df7e:	0799      	lsls	r1, r3, #30
 800df80:	bf58      	it	pl
 800df82:	6962      	ldrpl	r2, [r4, #20]
 800df84:	60a2      	str	r2, [r4, #8]
 800df86:	e7f4      	b.n	800df72 <__swsetup_r+0x8e>
 800df88:	2000      	movs	r0, #0
 800df8a:	e7f7      	b.n	800df7c <__swsetup_r+0x98>
 800df8c:	20000054 	.word	0x20000054

0800df90 <memset>:
 800df90:	4402      	add	r2, r0
 800df92:	4603      	mov	r3, r0
 800df94:	4293      	cmp	r3, r2
 800df96:	d100      	bne.n	800df9a <memset+0xa>
 800df98:	4770      	bx	lr
 800df9a:	f803 1b01 	strb.w	r1, [r3], #1
 800df9e:	e7f9      	b.n	800df94 <memset+0x4>

0800dfa0 <_localeconv_r>:
 800dfa0:	4800      	ldr	r0, [pc, #0]	@ (800dfa4 <_localeconv_r+0x4>)
 800dfa2:	4770      	bx	lr
 800dfa4:	20000194 	.word	0x20000194

0800dfa8 <_close_r>:
 800dfa8:	b538      	push	{r3, r4, r5, lr}
 800dfaa:	4d06      	ldr	r5, [pc, #24]	@ (800dfc4 <_close_r+0x1c>)
 800dfac:	2300      	movs	r3, #0
 800dfae:	4604      	mov	r4, r0
 800dfb0:	4608      	mov	r0, r1
 800dfb2:	602b      	str	r3, [r5, #0]
 800dfb4:	f7f5 fa42 	bl	800343c <_close>
 800dfb8:	1c43      	adds	r3, r0, #1
 800dfba:	d102      	bne.n	800dfc2 <_close_r+0x1a>
 800dfbc:	682b      	ldr	r3, [r5, #0]
 800dfbe:	b103      	cbz	r3, 800dfc2 <_close_r+0x1a>
 800dfc0:	6023      	str	r3, [r4, #0]
 800dfc2:	bd38      	pop	{r3, r4, r5, pc}
 800dfc4:	200010c4 	.word	0x200010c4

0800dfc8 <_lseek_r>:
 800dfc8:	b538      	push	{r3, r4, r5, lr}
 800dfca:	4d07      	ldr	r5, [pc, #28]	@ (800dfe8 <_lseek_r+0x20>)
 800dfcc:	4604      	mov	r4, r0
 800dfce:	4608      	mov	r0, r1
 800dfd0:	4611      	mov	r1, r2
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	602a      	str	r2, [r5, #0]
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	f7f5 fa57 	bl	800348a <_lseek>
 800dfdc:	1c43      	adds	r3, r0, #1
 800dfde:	d102      	bne.n	800dfe6 <_lseek_r+0x1e>
 800dfe0:	682b      	ldr	r3, [r5, #0]
 800dfe2:	b103      	cbz	r3, 800dfe6 <_lseek_r+0x1e>
 800dfe4:	6023      	str	r3, [r4, #0]
 800dfe6:	bd38      	pop	{r3, r4, r5, pc}
 800dfe8:	200010c4 	.word	0x200010c4

0800dfec <_read_r>:
 800dfec:	b538      	push	{r3, r4, r5, lr}
 800dfee:	4d07      	ldr	r5, [pc, #28]	@ (800e00c <_read_r+0x20>)
 800dff0:	4604      	mov	r4, r0
 800dff2:	4608      	mov	r0, r1
 800dff4:	4611      	mov	r1, r2
 800dff6:	2200      	movs	r2, #0
 800dff8:	602a      	str	r2, [r5, #0]
 800dffa:	461a      	mov	r2, r3
 800dffc:	f7f5 f9e5 	bl	80033ca <_read>
 800e000:	1c43      	adds	r3, r0, #1
 800e002:	d102      	bne.n	800e00a <_read_r+0x1e>
 800e004:	682b      	ldr	r3, [r5, #0]
 800e006:	b103      	cbz	r3, 800e00a <_read_r+0x1e>
 800e008:	6023      	str	r3, [r4, #0]
 800e00a:	bd38      	pop	{r3, r4, r5, pc}
 800e00c:	200010c4 	.word	0x200010c4

0800e010 <_write_r>:
 800e010:	b538      	push	{r3, r4, r5, lr}
 800e012:	4d07      	ldr	r5, [pc, #28]	@ (800e030 <_write_r+0x20>)
 800e014:	4604      	mov	r4, r0
 800e016:	4608      	mov	r0, r1
 800e018:	4611      	mov	r1, r2
 800e01a:	2200      	movs	r2, #0
 800e01c:	602a      	str	r2, [r5, #0]
 800e01e:	461a      	mov	r2, r3
 800e020:	f7f5 f9f0 	bl	8003404 <_write>
 800e024:	1c43      	adds	r3, r0, #1
 800e026:	d102      	bne.n	800e02e <_write_r+0x1e>
 800e028:	682b      	ldr	r3, [r5, #0]
 800e02a:	b103      	cbz	r3, 800e02e <_write_r+0x1e>
 800e02c:	6023      	str	r3, [r4, #0]
 800e02e:	bd38      	pop	{r3, r4, r5, pc}
 800e030:	200010c4 	.word	0x200010c4

0800e034 <__errno>:
 800e034:	4b01      	ldr	r3, [pc, #4]	@ (800e03c <__errno+0x8>)
 800e036:	6818      	ldr	r0, [r3, #0]
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	20000054 	.word	0x20000054

0800e040 <__libc_init_array>:
 800e040:	b570      	push	{r4, r5, r6, lr}
 800e042:	4d0d      	ldr	r5, [pc, #52]	@ (800e078 <__libc_init_array+0x38>)
 800e044:	4c0d      	ldr	r4, [pc, #52]	@ (800e07c <__libc_init_array+0x3c>)
 800e046:	1b64      	subs	r4, r4, r5
 800e048:	10a4      	asrs	r4, r4, #2
 800e04a:	2600      	movs	r6, #0
 800e04c:	42a6      	cmp	r6, r4
 800e04e:	d109      	bne.n	800e064 <__libc_init_array+0x24>
 800e050:	4d0b      	ldr	r5, [pc, #44]	@ (800e080 <__libc_init_array+0x40>)
 800e052:	4c0c      	ldr	r4, [pc, #48]	@ (800e084 <__libc_init_array+0x44>)
 800e054:	f003 fade 	bl	8011614 <_init>
 800e058:	1b64      	subs	r4, r4, r5
 800e05a:	10a4      	asrs	r4, r4, #2
 800e05c:	2600      	movs	r6, #0
 800e05e:	42a6      	cmp	r6, r4
 800e060:	d105      	bne.n	800e06e <__libc_init_array+0x2e>
 800e062:	bd70      	pop	{r4, r5, r6, pc}
 800e064:	f855 3b04 	ldr.w	r3, [r5], #4
 800e068:	4798      	blx	r3
 800e06a:	3601      	adds	r6, #1
 800e06c:	e7ee      	b.n	800e04c <__libc_init_array+0xc>
 800e06e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e072:	4798      	blx	r3
 800e074:	3601      	adds	r6, #1
 800e076:	e7f2      	b.n	800e05e <__libc_init_array+0x1e>
 800e078:	08011df8 	.word	0x08011df8
 800e07c:	08011df8 	.word	0x08011df8
 800e080:	08011df8 	.word	0x08011df8
 800e084:	08011dfc 	.word	0x08011dfc

0800e088 <__retarget_lock_init_recursive>:
 800e088:	4770      	bx	lr

0800e08a <__retarget_lock_acquire_recursive>:
 800e08a:	4770      	bx	lr

0800e08c <__retarget_lock_release_recursive>:
 800e08c:	4770      	bx	lr

0800e08e <memcpy>:
 800e08e:	440a      	add	r2, r1
 800e090:	4291      	cmp	r1, r2
 800e092:	f100 33ff 	add.w	r3, r0, #4294967295
 800e096:	d100      	bne.n	800e09a <memcpy+0xc>
 800e098:	4770      	bx	lr
 800e09a:	b510      	push	{r4, lr}
 800e09c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0a4:	4291      	cmp	r1, r2
 800e0a6:	d1f9      	bne.n	800e09c <memcpy+0xe>
 800e0a8:	bd10      	pop	{r4, pc}
	...

0800e0ac <nanf>:
 800e0ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e0b4 <nanf+0x8>
 800e0b0:	4770      	bx	lr
 800e0b2:	bf00      	nop
 800e0b4:	7fc00000 	.word	0x7fc00000

0800e0b8 <quorem>:
 800e0b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0bc:	6903      	ldr	r3, [r0, #16]
 800e0be:	690c      	ldr	r4, [r1, #16]
 800e0c0:	42a3      	cmp	r3, r4
 800e0c2:	4607      	mov	r7, r0
 800e0c4:	db7e      	blt.n	800e1c4 <quorem+0x10c>
 800e0c6:	3c01      	subs	r4, #1
 800e0c8:	f101 0814 	add.w	r8, r1, #20
 800e0cc:	00a3      	lsls	r3, r4, #2
 800e0ce:	f100 0514 	add.w	r5, r0, #20
 800e0d2:	9300      	str	r3, [sp, #0]
 800e0d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0d8:	9301      	str	r3, [sp, #4]
 800e0da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e0de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e0ea:	fbb2 f6f3 	udiv	r6, r2, r3
 800e0ee:	d32e      	bcc.n	800e14e <quorem+0x96>
 800e0f0:	f04f 0a00 	mov.w	sl, #0
 800e0f4:	46c4      	mov	ip, r8
 800e0f6:	46ae      	mov	lr, r5
 800e0f8:	46d3      	mov	fp, sl
 800e0fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e0fe:	b298      	uxth	r0, r3
 800e100:	fb06 a000 	mla	r0, r6, r0, sl
 800e104:	0c02      	lsrs	r2, r0, #16
 800e106:	0c1b      	lsrs	r3, r3, #16
 800e108:	fb06 2303 	mla	r3, r6, r3, r2
 800e10c:	f8de 2000 	ldr.w	r2, [lr]
 800e110:	b280      	uxth	r0, r0
 800e112:	b292      	uxth	r2, r2
 800e114:	1a12      	subs	r2, r2, r0
 800e116:	445a      	add	r2, fp
 800e118:	f8de 0000 	ldr.w	r0, [lr]
 800e11c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e120:	b29b      	uxth	r3, r3
 800e122:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e126:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e12a:	b292      	uxth	r2, r2
 800e12c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e130:	45e1      	cmp	r9, ip
 800e132:	f84e 2b04 	str.w	r2, [lr], #4
 800e136:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e13a:	d2de      	bcs.n	800e0fa <quorem+0x42>
 800e13c:	9b00      	ldr	r3, [sp, #0]
 800e13e:	58eb      	ldr	r3, [r5, r3]
 800e140:	b92b      	cbnz	r3, 800e14e <quorem+0x96>
 800e142:	9b01      	ldr	r3, [sp, #4]
 800e144:	3b04      	subs	r3, #4
 800e146:	429d      	cmp	r5, r3
 800e148:	461a      	mov	r2, r3
 800e14a:	d32f      	bcc.n	800e1ac <quorem+0xf4>
 800e14c:	613c      	str	r4, [r7, #16]
 800e14e:	4638      	mov	r0, r7
 800e150:	f001 f9c2 	bl	800f4d8 <__mcmp>
 800e154:	2800      	cmp	r0, #0
 800e156:	db25      	blt.n	800e1a4 <quorem+0xec>
 800e158:	4629      	mov	r1, r5
 800e15a:	2000      	movs	r0, #0
 800e15c:	f858 2b04 	ldr.w	r2, [r8], #4
 800e160:	f8d1 c000 	ldr.w	ip, [r1]
 800e164:	fa1f fe82 	uxth.w	lr, r2
 800e168:	fa1f f38c 	uxth.w	r3, ip
 800e16c:	eba3 030e 	sub.w	r3, r3, lr
 800e170:	4403      	add	r3, r0
 800e172:	0c12      	lsrs	r2, r2, #16
 800e174:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e178:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e182:	45c1      	cmp	r9, r8
 800e184:	f841 3b04 	str.w	r3, [r1], #4
 800e188:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e18c:	d2e6      	bcs.n	800e15c <quorem+0xa4>
 800e18e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e196:	b922      	cbnz	r2, 800e1a2 <quorem+0xea>
 800e198:	3b04      	subs	r3, #4
 800e19a:	429d      	cmp	r5, r3
 800e19c:	461a      	mov	r2, r3
 800e19e:	d30b      	bcc.n	800e1b8 <quorem+0x100>
 800e1a0:	613c      	str	r4, [r7, #16]
 800e1a2:	3601      	adds	r6, #1
 800e1a4:	4630      	mov	r0, r6
 800e1a6:	b003      	add	sp, #12
 800e1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ac:	6812      	ldr	r2, [r2, #0]
 800e1ae:	3b04      	subs	r3, #4
 800e1b0:	2a00      	cmp	r2, #0
 800e1b2:	d1cb      	bne.n	800e14c <quorem+0x94>
 800e1b4:	3c01      	subs	r4, #1
 800e1b6:	e7c6      	b.n	800e146 <quorem+0x8e>
 800e1b8:	6812      	ldr	r2, [r2, #0]
 800e1ba:	3b04      	subs	r3, #4
 800e1bc:	2a00      	cmp	r2, #0
 800e1be:	d1ef      	bne.n	800e1a0 <quorem+0xe8>
 800e1c0:	3c01      	subs	r4, #1
 800e1c2:	e7ea      	b.n	800e19a <quorem+0xe2>
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	e7ee      	b.n	800e1a6 <quorem+0xee>

0800e1c8 <_dtoa_r>:
 800e1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1cc:	69c7      	ldr	r7, [r0, #28]
 800e1ce:	b099      	sub	sp, #100	@ 0x64
 800e1d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e1d4:	ec55 4b10 	vmov	r4, r5, d0
 800e1d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e1da:	9109      	str	r1, [sp, #36]	@ 0x24
 800e1dc:	4683      	mov	fp, r0
 800e1de:	920e      	str	r2, [sp, #56]	@ 0x38
 800e1e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e1e2:	b97f      	cbnz	r7, 800e204 <_dtoa_r+0x3c>
 800e1e4:	2010      	movs	r0, #16
 800e1e6:	f000 fdfd 	bl	800ede4 <malloc>
 800e1ea:	4602      	mov	r2, r0
 800e1ec:	f8cb 001c 	str.w	r0, [fp, #28]
 800e1f0:	b920      	cbnz	r0, 800e1fc <_dtoa_r+0x34>
 800e1f2:	4ba7      	ldr	r3, [pc, #668]	@ (800e490 <_dtoa_r+0x2c8>)
 800e1f4:	21ef      	movs	r1, #239	@ 0xef
 800e1f6:	48a7      	ldr	r0, [pc, #668]	@ (800e494 <_dtoa_r+0x2cc>)
 800e1f8:	f002 fdee 	bl	8010dd8 <__assert_func>
 800e1fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e200:	6007      	str	r7, [r0, #0]
 800e202:	60c7      	str	r7, [r0, #12]
 800e204:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e208:	6819      	ldr	r1, [r3, #0]
 800e20a:	b159      	cbz	r1, 800e224 <_dtoa_r+0x5c>
 800e20c:	685a      	ldr	r2, [r3, #4]
 800e20e:	604a      	str	r2, [r1, #4]
 800e210:	2301      	movs	r3, #1
 800e212:	4093      	lsls	r3, r2
 800e214:	608b      	str	r3, [r1, #8]
 800e216:	4658      	mov	r0, fp
 800e218:	f000 feda 	bl	800efd0 <_Bfree>
 800e21c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e220:	2200      	movs	r2, #0
 800e222:	601a      	str	r2, [r3, #0]
 800e224:	1e2b      	subs	r3, r5, #0
 800e226:	bfb9      	ittee	lt
 800e228:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e22c:	9303      	strlt	r3, [sp, #12]
 800e22e:	2300      	movge	r3, #0
 800e230:	6033      	strge	r3, [r6, #0]
 800e232:	9f03      	ldr	r7, [sp, #12]
 800e234:	4b98      	ldr	r3, [pc, #608]	@ (800e498 <_dtoa_r+0x2d0>)
 800e236:	bfbc      	itt	lt
 800e238:	2201      	movlt	r2, #1
 800e23a:	6032      	strlt	r2, [r6, #0]
 800e23c:	43bb      	bics	r3, r7
 800e23e:	d112      	bne.n	800e266 <_dtoa_r+0x9e>
 800e240:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e242:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e246:	6013      	str	r3, [r2, #0]
 800e248:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e24c:	4323      	orrs	r3, r4
 800e24e:	f000 854d 	beq.w	800ecec <_dtoa_r+0xb24>
 800e252:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e254:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e4ac <_dtoa_r+0x2e4>
 800e258:	2b00      	cmp	r3, #0
 800e25a:	f000 854f 	beq.w	800ecfc <_dtoa_r+0xb34>
 800e25e:	f10a 0303 	add.w	r3, sl, #3
 800e262:	f000 bd49 	b.w	800ecf8 <_dtoa_r+0xb30>
 800e266:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e26a:	2200      	movs	r2, #0
 800e26c:	ec51 0b17 	vmov	r0, r1, d7
 800e270:	2300      	movs	r3, #0
 800e272:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e276:	f7f2 fc27 	bl	8000ac8 <__aeabi_dcmpeq>
 800e27a:	4680      	mov	r8, r0
 800e27c:	b158      	cbz	r0, 800e296 <_dtoa_r+0xce>
 800e27e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e280:	2301      	movs	r3, #1
 800e282:	6013      	str	r3, [r2, #0]
 800e284:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e286:	b113      	cbz	r3, 800e28e <_dtoa_r+0xc6>
 800e288:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e28a:	4b84      	ldr	r3, [pc, #528]	@ (800e49c <_dtoa_r+0x2d4>)
 800e28c:	6013      	str	r3, [r2, #0]
 800e28e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e4b0 <_dtoa_r+0x2e8>
 800e292:	f000 bd33 	b.w	800ecfc <_dtoa_r+0xb34>
 800e296:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e29a:	aa16      	add	r2, sp, #88	@ 0x58
 800e29c:	a917      	add	r1, sp, #92	@ 0x5c
 800e29e:	4658      	mov	r0, fp
 800e2a0:	f001 fa3a 	bl	800f718 <__d2b>
 800e2a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e2a8:	4681      	mov	r9, r0
 800e2aa:	2e00      	cmp	r6, #0
 800e2ac:	d077      	beq.n	800e39e <_dtoa_r+0x1d6>
 800e2ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e2b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e2c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e2c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	4b74      	ldr	r3, [pc, #464]	@ (800e4a0 <_dtoa_r+0x2d8>)
 800e2ce:	f7f1 ffdb 	bl	8000288 <__aeabi_dsub>
 800e2d2:	a369      	add	r3, pc, #420	@ (adr r3, 800e478 <_dtoa_r+0x2b0>)
 800e2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d8:	f7f2 f98e 	bl	80005f8 <__aeabi_dmul>
 800e2dc:	a368      	add	r3, pc, #416	@ (adr r3, 800e480 <_dtoa_r+0x2b8>)
 800e2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e2:	f7f1 ffd3 	bl	800028c <__adddf3>
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	460d      	mov	r5, r1
 800e2ec:	f7f2 f91a 	bl	8000524 <__aeabi_i2d>
 800e2f0:	a365      	add	r3, pc, #404	@ (adr r3, 800e488 <_dtoa_r+0x2c0>)
 800e2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f6:	f7f2 f97f 	bl	80005f8 <__aeabi_dmul>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	4620      	mov	r0, r4
 800e300:	4629      	mov	r1, r5
 800e302:	f7f1 ffc3 	bl	800028c <__adddf3>
 800e306:	4604      	mov	r4, r0
 800e308:	460d      	mov	r5, r1
 800e30a:	f7f2 fc25 	bl	8000b58 <__aeabi_d2iz>
 800e30e:	2200      	movs	r2, #0
 800e310:	4607      	mov	r7, r0
 800e312:	2300      	movs	r3, #0
 800e314:	4620      	mov	r0, r4
 800e316:	4629      	mov	r1, r5
 800e318:	f7f2 fbe0 	bl	8000adc <__aeabi_dcmplt>
 800e31c:	b140      	cbz	r0, 800e330 <_dtoa_r+0x168>
 800e31e:	4638      	mov	r0, r7
 800e320:	f7f2 f900 	bl	8000524 <__aeabi_i2d>
 800e324:	4622      	mov	r2, r4
 800e326:	462b      	mov	r3, r5
 800e328:	f7f2 fbce 	bl	8000ac8 <__aeabi_dcmpeq>
 800e32c:	b900      	cbnz	r0, 800e330 <_dtoa_r+0x168>
 800e32e:	3f01      	subs	r7, #1
 800e330:	2f16      	cmp	r7, #22
 800e332:	d851      	bhi.n	800e3d8 <_dtoa_r+0x210>
 800e334:	4b5b      	ldr	r3, [pc, #364]	@ (800e4a4 <_dtoa_r+0x2dc>)
 800e336:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e342:	f7f2 fbcb 	bl	8000adc <__aeabi_dcmplt>
 800e346:	2800      	cmp	r0, #0
 800e348:	d048      	beq.n	800e3dc <_dtoa_r+0x214>
 800e34a:	3f01      	subs	r7, #1
 800e34c:	2300      	movs	r3, #0
 800e34e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e350:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e352:	1b9b      	subs	r3, r3, r6
 800e354:	1e5a      	subs	r2, r3, #1
 800e356:	bf44      	itt	mi
 800e358:	f1c3 0801 	rsbmi	r8, r3, #1
 800e35c:	2300      	movmi	r3, #0
 800e35e:	9208      	str	r2, [sp, #32]
 800e360:	bf54      	ite	pl
 800e362:	f04f 0800 	movpl.w	r8, #0
 800e366:	9308      	strmi	r3, [sp, #32]
 800e368:	2f00      	cmp	r7, #0
 800e36a:	db39      	blt.n	800e3e0 <_dtoa_r+0x218>
 800e36c:	9b08      	ldr	r3, [sp, #32]
 800e36e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e370:	443b      	add	r3, r7
 800e372:	9308      	str	r3, [sp, #32]
 800e374:	2300      	movs	r3, #0
 800e376:	930a      	str	r3, [sp, #40]	@ 0x28
 800e378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e37a:	2b09      	cmp	r3, #9
 800e37c:	d864      	bhi.n	800e448 <_dtoa_r+0x280>
 800e37e:	2b05      	cmp	r3, #5
 800e380:	bfc4      	itt	gt
 800e382:	3b04      	subgt	r3, #4
 800e384:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e388:	f1a3 0302 	sub.w	r3, r3, #2
 800e38c:	bfcc      	ite	gt
 800e38e:	2400      	movgt	r4, #0
 800e390:	2401      	movle	r4, #1
 800e392:	2b03      	cmp	r3, #3
 800e394:	d863      	bhi.n	800e45e <_dtoa_r+0x296>
 800e396:	e8df f003 	tbb	[pc, r3]
 800e39a:	372a      	.short	0x372a
 800e39c:	5535      	.short	0x5535
 800e39e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e3a2:	441e      	add	r6, r3
 800e3a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e3a8:	2b20      	cmp	r3, #32
 800e3aa:	bfc1      	itttt	gt
 800e3ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e3b0:	409f      	lslgt	r7, r3
 800e3b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e3b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e3ba:	bfd6      	itet	le
 800e3bc:	f1c3 0320 	rsble	r3, r3, #32
 800e3c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800e3c4:	fa04 f003 	lslle.w	r0, r4, r3
 800e3c8:	f7f2 f89c 	bl	8000504 <__aeabi_ui2d>
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e3d2:	3e01      	subs	r6, #1
 800e3d4:	9214      	str	r2, [sp, #80]	@ 0x50
 800e3d6:	e777      	b.n	800e2c8 <_dtoa_r+0x100>
 800e3d8:	2301      	movs	r3, #1
 800e3da:	e7b8      	b.n	800e34e <_dtoa_r+0x186>
 800e3dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800e3de:	e7b7      	b.n	800e350 <_dtoa_r+0x188>
 800e3e0:	427b      	negs	r3, r7
 800e3e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	eba8 0807 	sub.w	r8, r8, r7
 800e3ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e3ec:	e7c4      	b.n	800e378 <_dtoa_r+0x1b0>
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	dc35      	bgt.n	800e464 <_dtoa_r+0x29c>
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	9300      	str	r3, [sp, #0]
 800e3fc:	9307      	str	r3, [sp, #28]
 800e3fe:	461a      	mov	r2, r3
 800e400:	920e      	str	r2, [sp, #56]	@ 0x38
 800e402:	e00b      	b.n	800e41c <_dtoa_r+0x254>
 800e404:	2301      	movs	r3, #1
 800e406:	e7f3      	b.n	800e3f0 <_dtoa_r+0x228>
 800e408:	2300      	movs	r3, #0
 800e40a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e40c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e40e:	18fb      	adds	r3, r7, r3
 800e410:	9300      	str	r3, [sp, #0]
 800e412:	3301      	adds	r3, #1
 800e414:	2b01      	cmp	r3, #1
 800e416:	9307      	str	r3, [sp, #28]
 800e418:	bfb8      	it	lt
 800e41a:	2301      	movlt	r3, #1
 800e41c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e420:	2100      	movs	r1, #0
 800e422:	2204      	movs	r2, #4
 800e424:	f102 0514 	add.w	r5, r2, #20
 800e428:	429d      	cmp	r5, r3
 800e42a:	d91f      	bls.n	800e46c <_dtoa_r+0x2a4>
 800e42c:	6041      	str	r1, [r0, #4]
 800e42e:	4658      	mov	r0, fp
 800e430:	f000 fd8e 	bl	800ef50 <_Balloc>
 800e434:	4682      	mov	sl, r0
 800e436:	2800      	cmp	r0, #0
 800e438:	d13c      	bne.n	800e4b4 <_dtoa_r+0x2ec>
 800e43a:	4b1b      	ldr	r3, [pc, #108]	@ (800e4a8 <_dtoa_r+0x2e0>)
 800e43c:	4602      	mov	r2, r0
 800e43e:	f240 11af 	movw	r1, #431	@ 0x1af
 800e442:	e6d8      	b.n	800e1f6 <_dtoa_r+0x2e>
 800e444:	2301      	movs	r3, #1
 800e446:	e7e0      	b.n	800e40a <_dtoa_r+0x242>
 800e448:	2401      	movs	r4, #1
 800e44a:	2300      	movs	r3, #0
 800e44c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e44e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e450:	f04f 33ff 	mov.w	r3, #4294967295
 800e454:	9300      	str	r3, [sp, #0]
 800e456:	9307      	str	r3, [sp, #28]
 800e458:	2200      	movs	r2, #0
 800e45a:	2312      	movs	r3, #18
 800e45c:	e7d0      	b.n	800e400 <_dtoa_r+0x238>
 800e45e:	2301      	movs	r3, #1
 800e460:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e462:	e7f5      	b.n	800e450 <_dtoa_r+0x288>
 800e464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e466:	9300      	str	r3, [sp, #0]
 800e468:	9307      	str	r3, [sp, #28]
 800e46a:	e7d7      	b.n	800e41c <_dtoa_r+0x254>
 800e46c:	3101      	adds	r1, #1
 800e46e:	0052      	lsls	r2, r2, #1
 800e470:	e7d8      	b.n	800e424 <_dtoa_r+0x25c>
 800e472:	bf00      	nop
 800e474:	f3af 8000 	nop.w
 800e478:	636f4361 	.word	0x636f4361
 800e47c:	3fd287a7 	.word	0x3fd287a7
 800e480:	8b60c8b3 	.word	0x8b60c8b3
 800e484:	3fc68a28 	.word	0x3fc68a28
 800e488:	509f79fb 	.word	0x509f79fb
 800e48c:	3fd34413 	.word	0x3fd34413
 800e490:	08011a06 	.word	0x08011a06
 800e494:	08011a1d 	.word	0x08011a1d
 800e498:	7ff00000 	.word	0x7ff00000
 800e49c:	080119d1 	.word	0x080119d1
 800e4a0:	3ff80000 	.word	0x3ff80000
 800e4a4:	08011b18 	.word	0x08011b18
 800e4a8:	08011a75 	.word	0x08011a75
 800e4ac:	08011a02 	.word	0x08011a02
 800e4b0:	080119d0 	.word	0x080119d0
 800e4b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e4b8:	6018      	str	r0, [r3, #0]
 800e4ba:	9b07      	ldr	r3, [sp, #28]
 800e4bc:	2b0e      	cmp	r3, #14
 800e4be:	f200 80a4 	bhi.w	800e60a <_dtoa_r+0x442>
 800e4c2:	2c00      	cmp	r4, #0
 800e4c4:	f000 80a1 	beq.w	800e60a <_dtoa_r+0x442>
 800e4c8:	2f00      	cmp	r7, #0
 800e4ca:	dd33      	ble.n	800e534 <_dtoa_r+0x36c>
 800e4cc:	4bad      	ldr	r3, [pc, #692]	@ (800e784 <_dtoa_r+0x5bc>)
 800e4ce:	f007 020f 	and.w	r2, r7, #15
 800e4d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4d6:	ed93 7b00 	vldr	d7, [r3]
 800e4da:	05f8      	lsls	r0, r7, #23
 800e4dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e4e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e4e4:	d516      	bpl.n	800e514 <_dtoa_r+0x34c>
 800e4e6:	4ba8      	ldr	r3, [pc, #672]	@ (800e788 <_dtoa_r+0x5c0>)
 800e4e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e4ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e4f0:	f7f2 f9ac 	bl	800084c <__aeabi_ddiv>
 800e4f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4f8:	f004 040f 	and.w	r4, r4, #15
 800e4fc:	2603      	movs	r6, #3
 800e4fe:	4da2      	ldr	r5, [pc, #648]	@ (800e788 <_dtoa_r+0x5c0>)
 800e500:	b954      	cbnz	r4, 800e518 <_dtoa_r+0x350>
 800e502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e50a:	f7f2 f99f 	bl	800084c <__aeabi_ddiv>
 800e50e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e512:	e028      	b.n	800e566 <_dtoa_r+0x39e>
 800e514:	2602      	movs	r6, #2
 800e516:	e7f2      	b.n	800e4fe <_dtoa_r+0x336>
 800e518:	07e1      	lsls	r1, r4, #31
 800e51a:	d508      	bpl.n	800e52e <_dtoa_r+0x366>
 800e51c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e520:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e524:	f7f2 f868 	bl	80005f8 <__aeabi_dmul>
 800e528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e52c:	3601      	adds	r6, #1
 800e52e:	1064      	asrs	r4, r4, #1
 800e530:	3508      	adds	r5, #8
 800e532:	e7e5      	b.n	800e500 <_dtoa_r+0x338>
 800e534:	f000 80d2 	beq.w	800e6dc <_dtoa_r+0x514>
 800e538:	427c      	negs	r4, r7
 800e53a:	4b92      	ldr	r3, [pc, #584]	@ (800e784 <_dtoa_r+0x5bc>)
 800e53c:	4d92      	ldr	r5, [pc, #584]	@ (800e788 <_dtoa_r+0x5c0>)
 800e53e:	f004 020f 	and.w	r2, r4, #15
 800e542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e54e:	f7f2 f853 	bl	80005f8 <__aeabi_dmul>
 800e552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e556:	1124      	asrs	r4, r4, #4
 800e558:	2300      	movs	r3, #0
 800e55a:	2602      	movs	r6, #2
 800e55c:	2c00      	cmp	r4, #0
 800e55e:	f040 80b2 	bne.w	800e6c6 <_dtoa_r+0x4fe>
 800e562:	2b00      	cmp	r3, #0
 800e564:	d1d3      	bne.n	800e50e <_dtoa_r+0x346>
 800e566:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e568:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	f000 80b7 	beq.w	800e6e0 <_dtoa_r+0x518>
 800e572:	4b86      	ldr	r3, [pc, #536]	@ (800e78c <_dtoa_r+0x5c4>)
 800e574:	2200      	movs	r2, #0
 800e576:	4620      	mov	r0, r4
 800e578:	4629      	mov	r1, r5
 800e57a:	f7f2 faaf 	bl	8000adc <__aeabi_dcmplt>
 800e57e:	2800      	cmp	r0, #0
 800e580:	f000 80ae 	beq.w	800e6e0 <_dtoa_r+0x518>
 800e584:	9b07      	ldr	r3, [sp, #28]
 800e586:	2b00      	cmp	r3, #0
 800e588:	f000 80aa 	beq.w	800e6e0 <_dtoa_r+0x518>
 800e58c:	9b00      	ldr	r3, [sp, #0]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	dd37      	ble.n	800e602 <_dtoa_r+0x43a>
 800e592:	1e7b      	subs	r3, r7, #1
 800e594:	9304      	str	r3, [sp, #16]
 800e596:	4620      	mov	r0, r4
 800e598:	4b7d      	ldr	r3, [pc, #500]	@ (800e790 <_dtoa_r+0x5c8>)
 800e59a:	2200      	movs	r2, #0
 800e59c:	4629      	mov	r1, r5
 800e59e:	f7f2 f82b 	bl	80005f8 <__aeabi_dmul>
 800e5a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5a6:	9c00      	ldr	r4, [sp, #0]
 800e5a8:	3601      	adds	r6, #1
 800e5aa:	4630      	mov	r0, r6
 800e5ac:	f7f1 ffba 	bl	8000524 <__aeabi_i2d>
 800e5b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5b4:	f7f2 f820 	bl	80005f8 <__aeabi_dmul>
 800e5b8:	4b76      	ldr	r3, [pc, #472]	@ (800e794 <_dtoa_r+0x5cc>)
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f7f1 fe66 	bl	800028c <__adddf3>
 800e5c0:	4605      	mov	r5, r0
 800e5c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e5c6:	2c00      	cmp	r4, #0
 800e5c8:	f040 808d 	bne.w	800e6e6 <_dtoa_r+0x51e>
 800e5cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5d0:	4b71      	ldr	r3, [pc, #452]	@ (800e798 <_dtoa_r+0x5d0>)
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	f7f1 fe58 	bl	8000288 <__aeabi_dsub>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	460b      	mov	r3, r1
 800e5dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e5e0:	462a      	mov	r2, r5
 800e5e2:	4633      	mov	r3, r6
 800e5e4:	f7f2 fa98 	bl	8000b18 <__aeabi_dcmpgt>
 800e5e8:	2800      	cmp	r0, #0
 800e5ea:	f040 828b 	bne.w	800eb04 <_dtoa_r+0x93c>
 800e5ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5f2:	462a      	mov	r2, r5
 800e5f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e5f8:	f7f2 fa70 	bl	8000adc <__aeabi_dcmplt>
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	f040 8128 	bne.w	800e852 <_dtoa_r+0x68a>
 800e602:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e606:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e60a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	f2c0 815a 	blt.w	800e8c6 <_dtoa_r+0x6fe>
 800e612:	2f0e      	cmp	r7, #14
 800e614:	f300 8157 	bgt.w	800e8c6 <_dtoa_r+0x6fe>
 800e618:	4b5a      	ldr	r3, [pc, #360]	@ (800e784 <_dtoa_r+0x5bc>)
 800e61a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e61e:	ed93 7b00 	vldr	d7, [r3]
 800e622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e624:	2b00      	cmp	r3, #0
 800e626:	ed8d 7b00 	vstr	d7, [sp]
 800e62a:	da03      	bge.n	800e634 <_dtoa_r+0x46c>
 800e62c:	9b07      	ldr	r3, [sp, #28]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	f340 8101 	ble.w	800e836 <_dtoa_r+0x66e>
 800e634:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e638:	4656      	mov	r6, sl
 800e63a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e63e:	4620      	mov	r0, r4
 800e640:	4629      	mov	r1, r5
 800e642:	f7f2 f903 	bl	800084c <__aeabi_ddiv>
 800e646:	f7f2 fa87 	bl	8000b58 <__aeabi_d2iz>
 800e64a:	4680      	mov	r8, r0
 800e64c:	f7f1 ff6a 	bl	8000524 <__aeabi_i2d>
 800e650:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e654:	f7f1 ffd0 	bl	80005f8 <__aeabi_dmul>
 800e658:	4602      	mov	r2, r0
 800e65a:	460b      	mov	r3, r1
 800e65c:	4620      	mov	r0, r4
 800e65e:	4629      	mov	r1, r5
 800e660:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e664:	f7f1 fe10 	bl	8000288 <__aeabi_dsub>
 800e668:	f806 4b01 	strb.w	r4, [r6], #1
 800e66c:	9d07      	ldr	r5, [sp, #28]
 800e66e:	eba6 040a 	sub.w	r4, r6, sl
 800e672:	42a5      	cmp	r5, r4
 800e674:	4602      	mov	r2, r0
 800e676:	460b      	mov	r3, r1
 800e678:	f040 8117 	bne.w	800e8aa <_dtoa_r+0x6e2>
 800e67c:	f7f1 fe06 	bl	800028c <__adddf3>
 800e680:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e684:	4604      	mov	r4, r0
 800e686:	460d      	mov	r5, r1
 800e688:	f7f2 fa46 	bl	8000b18 <__aeabi_dcmpgt>
 800e68c:	2800      	cmp	r0, #0
 800e68e:	f040 80f9 	bne.w	800e884 <_dtoa_r+0x6bc>
 800e692:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e696:	4620      	mov	r0, r4
 800e698:	4629      	mov	r1, r5
 800e69a:	f7f2 fa15 	bl	8000ac8 <__aeabi_dcmpeq>
 800e69e:	b118      	cbz	r0, 800e6a8 <_dtoa_r+0x4e0>
 800e6a0:	f018 0f01 	tst.w	r8, #1
 800e6a4:	f040 80ee 	bne.w	800e884 <_dtoa_r+0x6bc>
 800e6a8:	4649      	mov	r1, r9
 800e6aa:	4658      	mov	r0, fp
 800e6ac:	f000 fc90 	bl	800efd0 <_Bfree>
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	7033      	strb	r3, [r6, #0]
 800e6b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e6b6:	3701      	adds	r7, #1
 800e6b8:	601f      	str	r7, [r3, #0]
 800e6ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f000 831d 	beq.w	800ecfc <_dtoa_r+0xb34>
 800e6c2:	601e      	str	r6, [r3, #0]
 800e6c4:	e31a      	b.n	800ecfc <_dtoa_r+0xb34>
 800e6c6:	07e2      	lsls	r2, r4, #31
 800e6c8:	d505      	bpl.n	800e6d6 <_dtoa_r+0x50e>
 800e6ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e6ce:	f7f1 ff93 	bl	80005f8 <__aeabi_dmul>
 800e6d2:	3601      	adds	r6, #1
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	1064      	asrs	r4, r4, #1
 800e6d8:	3508      	adds	r5, #8
 800e6da:	e73f      	b.n	800e55c <_dtoa_r+0x394>
 800e6dc:	2602      	movs	r6, #2
 800e6de:	e742      	b.n	800e566 <_dtoa_r+0x39e>
 800e6e0:	9c07      	ldr	r4, [sp, #28]
 800e6e2:	9704      	str	r7, [sp, #16]
 800e6e4:	e761      	b.n	800e5aa <_dtoa_r+0x3e2>
 800e6e6:	4b27      	ldr	r3, [pc, #156]	@ (800e784 <_dtoa_r+0x5bc>)
 800e6e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e6ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e6ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e6f2:	4454      	add	r4, sl
 800e6f4:	2900      	cmp	r1, #0
 800e6f6:	d053      	beq.n	800e7a0 <_dtoa_r+0x5d8>
 800e6f8:	4928      	ldr	r1, [pc, #160]	@ (800e79c <_dtoa_r+0x5d4>)
 800e6fa:	2000      	movs	r0, #0
 800e6fc:	f7f2 f8a6 	bl	800084c <__aeabi_ddiv>
 800e700:	4633      	mov	r3, r6
 800e702:	462a      	mov	r2, r5
 800e704:	f7f1 fdc0 	bl	8000288 <__aeabi_dsub>
 800e708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e70c:	4656      	mov	r6, sl
 800e70e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e712:	f7f2 fa21 	bl	8000b58 <__aeabi_d2iz>
 800e716:	4605      	mov	r5, r0
 800e718:	f7f1 ff04 	bl	8000524 <__aeabi_i2d>
 800e71c:	4602      	mov	r2, r0
 800e71e:	460b      	mov	r3, r1
 800e720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e724:	f7f1 fdb0 	bl	8000288 <__aeabi_dsub>
 800e728:	3530      	adds	r5, #48	@ 0x30
 800e72a:	4602      	mov	r2, r0
 800e72c:	460b      	mov	r3, r1
 800e72e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e732:	f806 5b01 	strb.w	r5, [r6], #1
 800e736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e73a:	f7f2 f9cf 	bl	8000adc <__aeabi_dcmplt>
 800e73e:	2800      	cmp	r0, #0
 800e740:	d171      	bne.n	800e826 <_dtoa_r+0x65e>
 800e742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e746:	4911      	ldr	r1, [pc, #68]	@ (800e78c <_dtoa_r+0x5c4>)
 800e748:	2000      	movs	r0, #0
 800e74a:	f7f1 fd9d 	bl	8000288 <__aeabi_dsub>
 800e74e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e752:	f7f2 f9c3 	bl	8000adc <__aeabi_dcmplt>
 800e756:	2800      	cmp	r0, #0
 800e758:	f040 8095 	bne.w	800e886 <_dtoa_r+0x6be>
 800e75c:	42a6      	cmp	r6, r4
 800e75e:	f43f af50 	beq.w	800e602 <_dtoa_r+0x43a>
 800e762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e766:	4b0a      	ldr	r3, [pc, #40]	@ (800e790 <_dtoa_r+0x5c8>)
 800e768:	2200      	movs	r2, #0
 800e76a:	f7f1 ff45 	bl	80005f8 <__aeabi_dmul>
 800e76e:	4b08      	ldr	r3, [pc, #32]	@ (800e790 <_dtoa_r+0x5c8>)
 800e770:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e774:	2200      	movs	r2, #0
 800e776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e77a:	f7f1 ff3d 	bl	80005f8 <__aeabi_dmul>
 800e77e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e782:	e7c4      	b.n	800e70e <_dtoa_r+0x546>
 800e784:	08011b18 	.word	0x08011b18
 800e788:	08011af0 	.word	0x08011af0
 800e78c:	3ff00000 	.word	0x3ff00000
 800e790:	40240000 	.word	0x40240000
 800e794:	401c0000 	.word	0x401c0000
 800e798:	40140000 	.word	0x40140000
 800e79c:	3fe00000 	.word	0x3fe00000
 800e7a0:	4631      	mov	r1, r6
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	f7f1 ff28 	bl	80005f8 <__aeabi_dmul>
 800e7a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e7ac:	9415      	str	r4, [sp, #84]	@ 0x54
 800e7ae:	4656      	mov	r6, sl
 800e7b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7b4:	f7f2 f9d0 	bl	8000b58 <__aeabi_d2iz>
 800e7b8:	4605      	mov	r5, r0
 800e7ba:	f7f1 feb3 	bl	8000524 <__aeabi_i2d>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7c6:	f7f1 fd5f 	bl	8000288 <__aeabi_dsub>
 800e7ca:	3530      	adds	r5, #48	@ 0x30
 800e7cc:	f806 5b01 	strb.w	r5, [r6], #1
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	42a6      	cmp	r6, r4
 800e7d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e7da:	f04f 0200 	mov.w	r2, #0
 800e7de:	d124      	bne.n	800e82a <_dtoa_r+0x662>
 800e7e0:	4bac      	ldr	r3, [pc, #688]	@ (800ea94 <_dtoa_r+0x8cc>)
 800e7e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e7e6:	f7f1 fd51 	bl	800028c <__adddf3>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7f2:	f7f2 f991 	bl	8000b18 <__aeabi_dcmpgt>
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	d145      	bne.n	800e886 <_dtoa_r+0x6be>
 800e7fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e7fe:	49a5      	ldr	r1, [pc, #660]	@ (800ea94 <_dtoa_r+0x8cc>)
 800e800:	2000      	movs	r0, #0
 800e802:	f7f1 fd41 	bl	8000288 <__aeabi_dsub>
 800e806:	4602      	mov	r2, r0
 800e808:	460b      	mov	r3, r1
 800e80a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e80e:	f7f2 f965 	bl	8000adc <__aeabi_dcmplt>
 800e812:	2800      	cmp	r0, #0
 800e814:	f43f aef5 	beq.w	800e602 <_dtoa_r+0x43a>
 800e818:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e81a:	1e73      	subs	r3, r6, #1
 800e81c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e81e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e822:	2b30      	cmp	r3, #48	@ 0x30
 800e824:	d0f8      	beq.n	800e818 <_dtoa_r+0x650>
 800e826:	9f04      	ldr	r7, [sp, #16]
 800e828:	e73e      	b.n	800e6a8 <_dtoa_r+0x4e0>
 800e82a:	4b9b      	ldr	r3, [pc, #620]	@ (800ea98 <_dtoa_r+0x8d0>)
 800e82c:	f7f1 fee4 	bl	80005f8 <__aeabi_dmul>
 800e830:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e834:	e7bc      	b.n	800e7b0 <_dtoa_r+0x5e8>
 800e836:	d10c      	bne.n	800e852 <_dtoa_r+0x68a>
 800e838:	4b98      	ldr	r3, [pc, #608]	@ (800ea9c <_dtoa_r+0x8d4>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e840:	f7f1 feda 	bl	80005f8 <__aeabi_dmul>
 800e844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e848:	f7f2 f95c 	bl	8000b04 <__aeabi_dcmpge>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	f000 8157 	beq.w	800eb00 <_dtoa_r+0x938>
 800e852:	2400      	movs	r4, #0
 800e854:	4625      	mov	r5, r4
 800e856:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e858:	43db      	mvns	r3, r3
 800e85a:	9304      	str	r3, [sp, #16]
 800e85c:	4656      	mov	r6, sl
 800e85e:	2700      	movs	r7, #0
 800e860:	4621      	mov	r1, r4
 800e862:	4658      	mov	r0, fp
 800e864:	f000 fbb4 	bl	800efd0 <_Bfree>
 800e868:	2d00      	cmp	r5, #0
 800e86a:	d0dc      	beq.n	800e826 <_dtoa_r+0x65e>
 800e86c:	b12f      	cbz	r7, 800e87a <_dtoa_r+0x6b2>
 800e86e:	42af      	cmp	r7, r5
 800e870:	d003      	beq.n	800e87a <_dtoa_r+0x6b2>
 800e872:	4639      	mov	r1, r7
 800e874:	4658      	mov	r0, fp
 800e876:	f000 fbab 	bl	800efd0 <_Bfree>
 800e87a:	4629      	mov	r1, r5
 800e87c:	4658      	mov	r0, fp
 800e87e:	f000 fba7 	bl	800efd0 <_Bfree>
 800e882:	e7d0      	b.n	800e826 <_dtoa_r+0x65e>
 800e884:	9704      	str	r7, [sp, #16]
 800e886:	4633      	mov	r3, r6
 800e888:	461e      	mov	r6, r3
 800e88a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e88e:	2a39      	cmp	r2, #57	@ 0x39
 800e890:	d107      	bne.n	800e8a2 <_dtoa_r+0x6da>
 800e892:	459a      	cmp	sl, r3
 800e894:	d1f8      	bne.n	800e888 <_dtoa_r+0x6c0>
 800e896:	9a04      	ldr	r2, [sp, #16]
 800e898:	3201      	adds	r2, #1
 800e89a:	9204      	str	r2, [sp, #16]
 800e89c:	2230      	movs	r2, #48	@ 0x30
 800e89e:	f88a 2000 	strb.w	r2, [sl]
 800e8a2:	781a      	ldrb	r2, [r3, #0]
 800e8a4:	3201      	adds	r2, #1
 800e8a6:	701a      	strb	r2, [r3, #0]
 800e8a8:	e7bd      	b.n	800e826 <_dtoa_r+0x65e>
 800e8aa:	4b7b      	ldr	r3, [pc, #492]	@ (800ea98 <_dtoa_r+0x8d0>)
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f7f1 fea3 	bl	80005f8 <__aeabi_dmul>
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	4604      	mov	r4, r0
 800e8b8:	460d      	mov	r5, r1
 800e8ba:	f7f2 f905 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	f43f aebb 	beq.w	800e63a <_dtoa_r+0x472>
 800e8c4:	e6f0      	b.n	800e6a8 <_dtoa_r+0x4e0>
 800e8c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e8c8:	2a00      	cmp	r2, #0
 800e8ca:	f000 80db 	beq.w	800ea84 <_dtoa_r+0x8bc>
 800e8ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8d0:	2a01      	cmp	r2, #1
 800e8d2:	f300 80bf 	bgt.w	800ea54 <_dtoa_r+0x88c>
 800e8d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e8d8:	2a00      	cmp	r2, #0
 800e8da:	f000 80b7 	beq.w	800ea4c <_dtoa_r+0x884>
 800e8de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e8e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e8e4:	4646      	mov	r6, r8
 800e8e6:	9a08      	ldr	r2, [sp, #32]
 800e8e8:	2101      	movs	r1, #1
 800e8ea:	441a      	add	r2, r3
 800e8ec:	4658      	mov	r0, fp
 800e8ee:	4498      	add	r8, r3
 800e8f0:	9208      	str	r2, [sp, #32]
 800e8f2:	f000 fc6b 	bl	800f1cc <__i2b>
 800e8f6:	4605      	mov	r5, r0
 800e8f8:	b15e      	cbz	r6, 800e912 <_dtoa_r+0x74a>
 800e8fa:	9b08      	ldr	r3, [sp, #32]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	dd08      	ble.n	800e912 <_dtoa_r+0x74a>
 800e900:	42b3      	cmp	r3, r6
 800e902:	9a08      	ldr	r2, [sp, #32]
 800e904:	bfa8      	it	ge
 800e906:	4633      	movge	r3, r6
 800e908:	eba8 0803 	sub.w	r8, r8, r3
 800e90c:	1af6      	subs	r6, r6, r3
 800e90e:	1ad3      	subs	r3, r2, r3
 800e910:	9308      	str	r3, [sp, #32]
 800e912:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e914:	b1f3      	cbz	r3, 800e954 <_dtoa_r+0x78c>
 800e916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e918:	2b00      	cmp	r3, #0
 800e91a:	f000 80b7 	beq.w	800ea8c <_dtoa_r+0x8c4>
 800e91e:	b18c      	cbz	r4, 800e944 <_dtoa_r+0x77c>
 800e920:	4629      	mov	r1, r5
 800e922:	4622      	mov	r2, r4
 800e924:	4658      	mov	r0, fp
 800e926:	f000 fd11 	bl	800f34c <__pow5mult>
 800e92a:	464a      	mov	r2, r9
 800e92c:	4601      	mov	r1, r0
 800e92e:	4605      	mov	r5, r0
 800e930:	4658      	mov	r0, fp
 800e932:	f000 fc61 	bl	800f1f8 <__multiply>
 800e936:	4649      	mov	r1, r9
 800e938:	9004      	str	r0, [sp, #16]
 800e93a:	4658      	mov	r0, fp
 800e93c:	f000 fb48 	bl	800efd0 <_Bfree>
 800e940:	9b04      	ldr	r3, [sp, #16]
 800e942:	4699      	mov	r9, r3
 800e944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e946:	1b1a      	subs	r2, r3, r4
 800e948:	d004      	beq.n	800e954 <_dtoa_r+0x78c>
 800e94a:	4649      	mov	r1, r9
 800e94c:	4658      	mov	r0, fp
 800e94e:	f000 fcfd 	bl	800f34c <__pow5mult>
 800e952:	4681      	mov	r9, r0
 800e954:	2101      	movs	r1, #1
 800e956:	4658      	mov	r0, fp
 800e958:	f000 fc38 	bl	800f1cc <__i2b>
 800e95c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e95e:	4604      	mov	r4, r0
 800e960:	2b00      	cmp	r3, #0
 800e962:	f000 81cf 	beq.w	800ed04 <_dtoa_r+0xb3c>
 800e966:	461a      	mov	r2, r3
 800e968:	4601      	mov	r1, r0
 800e96a:	4658      	mov	r0, fp
 800e96c:	f000 fcee 	bl	800f34c <__pow5mult>
 800e970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e972:	2b01      	cmp	r3, #1
 800e974:	4604      	mov	r4, r0
 800e976:	f300 8095 	bgt.w	800eaa4 <_dtoa_r+0x8dc>
 800e97a:	9b02      	ldr	r3, [sp, #8]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	f040 8087 	bne.w	800ea90 <_dtoa_r+0x8c8>
 800e982:	9b03      	ldr	r3, [sp, #12]
 800e984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e988:	2b00      	cmp	r3, #0
 800e98a:	f040 8089 	bne.w	800eaa0 <_dtoa_r+0x8d8>
 800e98e:	9b03      	ldr	r3, [sp, #12]
 800e990:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e994:	0d1b      	lsrs	r3, r3, #20
 800e996:	051b      	lsls	r3, r3, #20
 800e998:	b12b      	cbz	r3, 800e9a6 <_dtoa_r+0x7de>
 800e99a:	9b08      	ldr	r3, [sp, #32]
 800e99c:	3301      	adds	r3, #1
 800e99e:	9308      	str	r3, [sp, #32]
 800e9a0:	f108 0801 	add.w	r8, r8, #1
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e9a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f000 81b0 	beq.w	800ed10 <_dtoa_r+0xb48>
 800e9b0:	6923      	ldr	r3, [r4, #16]
 800e9b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e9b6:	6918      	ldr	r0, [r3, #16]
 800e9b8:	f000 fbbc 	bl	800f134 <__hi0bits>
 800e9bc:	f1c0 0020 	rsb	r0, r0, #32
 800e9c0:	9b08      	ldr	r3, [sp, #32]
 800e9c2:	4418      	add	r0, r3
 800e9c4:	f010 001f 	ands.w	r0, r0, #31
 800e9c8:	d077      	beq.n	800eaba <_dtoa_r+0x8f2>
 800e9ca:	f1c0 0320 	rsb	r3, r0, #32
 800e9ce:	2b04      	cmp	r3, #4
 800e9d0:	dd6b      	ble.n	800eaaa <_dtoa_r+0x8e2>
 800e9d2:	9b08      	ldr	r3, [sp, #32]
 800e9d4:	f1c0 001c 	rsb	r0, r0, #28
 800e9d8:	4403      	add	r3, r0
 800e9da:	4480      	add	r8, r0
 800e9dc:	4406      	add	r6, r0
 800e9de:	9308      	str	r3, [sp, #32]
 800e9e0:	f1b8 0f00 	cmp.w	r8, #0
 800e9e4:	dd05      	ble.n	800e9f2 <_dtoa_r+0x82a>
 800e9e6:	4649      	mov	r1, r9
 800e9e8:	4642      	mov	r2, r8
 800e9ea:	4658      	mov	r0, fp
 800e9ec:	f000 fd08 	bl	800f400 <__lshift>
 800e9f0:	4681      	mov	r9, r0
 800e9f2:	9b08      	ldr	r3, [sp, #32]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	dd05      	ble.n	800ea04 <_dtoa_r+0x83c>
 800e9f8:	4621      	mov	r1, r4
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	4658      	mov	r0, fp
 800e9fe:	f000 fcff 	bl	800f400 <__lshift>
 800ea02:	4604      	mov	r4, r0
 800ea04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d059      	beq.n	800eabe <_dtoa_r+0x8f6>
 800ea0a:	4621      	mov	r1, r4
 800ea0c:	4648      	mov	r0, r9
 800ea0e:	f000 fd63 	bl	800f4d8 <__mcmp>
 800ea12:	2800      	cmp	r0, #0
 800ea14:	da53      	bge.n	800eabe <_dtoa_r+0x8f6>
 800ea16:	1e7b      	subs	r3, r7, #1
 800ea18:	9304      	str	r3, [sp, #16]
 800ea1a:	4649      	mov	r1, r9
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	220a      	movs	r2, #10
 800ea20:	4658      	mov	r0, fp
 800ea22:	f000 faf7 	bl	800f014 <__multadd>
 800ea26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea28:	4681      	mov	r9, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	f000 8172 	beq.w	800ed14 <_dtoa_r+0xb4c>
 800ea30:	2300      	movs	r3, #0
 800ea32:	4629      	mov	r1, r5
 800ea34:	220a      	movs	r2, #10
 800ea36:	4658      	mov	r0, fp
 800ea38:	f000 faec 	bl	800f014 <__multadd>
 800ea3c:	9b00      	ldr	r3, [sp, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	4605      	mov	r5, r0
 800ea42:	dc67      	bgt.n	800eb14 <_dtoa_r+0x94c>
 800ea44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea46:	2b02      	cmp	r3, #2
 800ea48:	dc41      	bgt.n	800eace <_dtoa_r+0x906>
 800ea4a:	e063      	b.n	800eb14 <_dtoa_r+0x94c>
 800ea4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ea4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ea52:	e746      	b.n	800e8e2 <_dtoa_r+0x71a>
 800ea54:	9b07      	ldr	r3, [sp, #28]
 800ea56:	1e5c      	subs	r4, r3, #1
 800ea58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea5a:	42a3      	cmp	r3, r4
 800ea5c:	bfbf      	itttt	lt
 800ea5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ea60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ea62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ea64:	1ae3      	sublt	r3, r4, r3
 800ea66:	bfb4      	ite	lt
 800ea68:	18d2      	addlt	r2, r2, r3
 800ea6a:	1b1c      	subge	r4, r3, r4
 800ea6c:	9b07      	ldr	r3, [sp, #28]
 800ea6e:	bfbc      	itt	lt
 800ea70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ea72:	2400      	movlt	r4, #0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	bfb5      	itete	lt
 800ea78:	eba8 0603 	sublt.w	r6, r8, r3
 800ea7c:	9b07      	ldrge	r3, [sp, #28]
 800ea7e:	2300      	movlt	r3, #0
 800ea80:	4646      	movge	r6, r8
 800ea82:	e730      	b.n	800e8e6 <_dtoa_r+0x71e>
 800ea84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ea86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ea88:	4646      	mov	r6, r8
 800ea8a:	e735      	b.n	800e8f8 <_dtoa_r+0x730>
 800ea8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea8e:	e75c      	b.n	800e94a <_dtoa_r+0x782>
 800ea90:	2300      	movs	r3, #0
 800ea92:	e788      	b.n	800e9a6 <_dtoa_r+0x7de>
 800ea94:	3fe00000 	.word	0x3fe00000
 800ea98:	40240000 	.word	0x40240000
 800ea9c:	40140000 	.word	0x40140000
 800eaa0:	9b02      	ldr	r3, [sp, #8]
 800eaa2:	e780      	b.n	800e9a6 <_dtoa_r+0x7de>
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800eaa8:	e782      	b.n	800e9b0 <_dtoa_r+0x7e8>
 800eaaa:	d099      	beq.n	800e9e0 <_dtoa_r+0x818>
 800eaac:	9a08      	ldr	r2, [sp, #32]
 800eaae:	331c      	adds	r3, #28
 800eab0:	441a      	add	r2, r3
 800eab2:	4498      	add	r8, r3
 800eab4:	441e      	add	r6, r3
 800eab6:	9208      	str	r2, [sp, #32]
 800eab8:	e792      	b.n	800e9e0 <_dtoa_r+0x818>
 800eaba:	4603      	mov	r3, r0
 800eabc:	e7f6      	b.n	800eaac <_dtoa_r+0x8e4>
 800eabe:	9b07      	ldr	r3, [sp, #28]
 800eac0:	9704      	str	r7, [sp, #16]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	dc20      	bgt.n	800eb08 <_dtoa_r+0x940>
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaca:	2b02      	cmp	r3, #2
 800eacc:	dd1e      	ble.n	800eb0c <_dtoa_r+0x944>
 800eace:	9b00      	ldr	r3, [sp, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	f47f aec0 	bne.w	800e856 <_dtoa_r+0x68e>
 800ead6:	4621      	mov	r1, r4
 800ead8:	2205      	movs	r2, #5
 800eada:	4658      	mov	r0, fp
 800eadc:	f000 fa9a 	bl	800f014 <__multadd>
 800eae0:	4601      	mov	r1, r0
 800eae2:	4604      	mov	r4, r0
 800eae4:	4648      	mov	r0, r9
 800eae6:	f000 fcf7 	bl	800f4d8 <__mcmp>
 800eaea:	2800      	cmp	r0, #0
 800eaec:	f77f aeb3 	ble.w	800e856 <_dtoa_r+0x68e>
 800eaf0:	4656      	mov	r6, sl
 800eaf2:	2331      	movs	r3, #49	@ 0x31
 800eaf4:	f806 3b01 	strb.w	r3, [r6], #1
 800eaf8:	9b04      	ldr	r3, [sp, #16]
 800eafa:	3301      	adds	r3, #1
 800eafc:	9304      	str	r3, [sp, #16]
 800eafe:	e6ae      	b.n	800e85e <_dtoa_r+0x696>
 800eb00:	9c07      	ldr	r4, [sp, #28]
 800eb02:	9704      	str	r7, [sp, #16]
 800eb04:	4625      	mov	r5, r4
 800eb06:	e7f3      	b.n	800eaf0 <_dtoa_r+0x928>
 800eb08:	9b07      	ldr	r3, [sp, #28]
 800eb0a:	9300      	str	r3, [sp, #0]
 800eb0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	f000 8104 	beq.w	800ed1c <_dtoa_r+0xb54>
 800eb14:	2e00      	cmp	r6, #0
 800eb16:	dd05      	ble.n	800eb24 <_dtoa_r+0x95c>
 800eb18:	4629      	mov	r1, r5
 800eb1a:	4632      	mov	r2, r6
 800eb1c:	4658      	mov	r0, fp
 800eb1e:	f000 fc6f 	bl	800f400 <__lshift>
 800eb22:	4605      	mov	r5, r0
 800eb24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d05a      	beq.n	800ebe0 <_dtoa_r+0xa18>
 800eb2a:	6869      	ldr	r1, [r5, #4]
 800eb2c:	4658      	mov	r0, fp
 800eb2e:	f000 fa0f 	bl	800ef50 <_Balloc>
 800eb32:	4606      	mov	r6, r0
 800eb34:	b928      	cbnz	r0, 800eb42 <_dtoa_r+0x97a>
 800eb36:	4b84      	ldr	r3, [pc, #528]	@ (800ed48 <_dtoa_r+0xb80>)
 800eb38:	4602      	mov	r2, r0
 800eb3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eb3e:	f7ff bb5a 	b.w	800e1f6 <_dtoa_r+0x2e>
 800eb42:	692a      	ldr	r2, [r5, #16]
 800eb44:	3202      	adds	r2, #2
 800eb46:	0092      	lsls	r2, r2, #2
 800eb48:	f105 010c 	add.w	r1, r5, #12
 800eb4c:	300c      	adds	r0, #12
 800eb4e:	f7ff fa9e 	bl	800e08e <memcpy>
 800eb52:	2201      	movs	r2, #1
 800eb54:	4631      	mov	r1, r6
 800eb56:	4658      	mov	r0, fp
 800eb58:	f000 fc52 	bl	800f400 <__lshift>
 800eb5c:	f10a 0301 	add.w	r3, sl, #1
 800eb60:	9307      	str	r3, [sp, #28]
 800eb62:	9b00      	ldr	r3, [sp, #0]
 800eb64:	4453      	add	r3, sl
 800eb66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb68:	9b02      	ldr	r3, [sp, #8]
 800eb6a:	f003 0301 	and.w	r3, r3, #1
 800eb6e:	462f      	mov	r7, r5
 800eb70:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb72:	4605      	mov	r5, r0
 800eb74:	9b07      	ldr	r3, [sp, #28]
 800eb76:	4621      	mov	r1, r4
 800eb78:	3b01      	subs	r3, #1
 800eb7a:	4648      	mov	r0, r9
 800eb7c:	9300      	str	r3, [sp, #0]
 800eb7e:	f7ff fa9b 	bl	800e0b8 <quorem>
 800eb82:	4639      	mov	r1, r7
 800eb84:	9002      	str	r0, [sp, #8]
 800eb86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800eb8a:	4648      	mov	r0, r9
 800eb8c:	f000 fca4 	bl	800f4d8 <__mcmp>
 800eb90:	462a      	mov	r2, r5
 800eb92:	9008      	str	r0, [sp, #32]
 800eb94:	4621      	mov	r1, r4
 800eb96:	4658      	mov	r0, fp
 800eb98:	f000 fcba 	bl	800f510 <__mdiff>
 800eb9c:	68c2      	ldr	r2, [r0, #12]
 800eb9e:	4606      	mov	r6, r0
 800eba0:	bb02      	cbnz	r2, 800ebe4 <_dtoa_r+0xa1c>
 800eba2:	4601      	mov	r1, r0
 800eba4:	4648      	mov	r0, r9
 800eba6:	f000 fc97 	bl	800f4d8 <__mcmp>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	4631      	mov	r1, r6
 800ebae:	4658      	mov	r0, fp
 800ebb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800ebb2:	f000 fa0d 	bl	800efd0 <_Bfree>
 800ebb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ebba:	9e07      	ldr	r6, [sp, #28]
 800ebbc:	ea43 0102 	orr.w	r1, r3, r2
 800ebc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebc2:	4319      	orrs	r1, r3
 800ebc4:	d110      	bne.n	800ebe8 <_dtoa_r+0xa20>
 800ebc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ebca:	d029      	beq.n	800ec20 <_dtoa_r+0xa58>
 800ebcc:	9b08      	ldr	r3, [sp, #32]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	dd02      	ble.n	800ebd8 <_dtoa_r+0xa10>
 800ebd2:	9b02      	ldr	r3, [sp, #8]
 800ebd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ebd8:	9b00      	ldr	r3, [sp, #0]
 800ebda:	f883 8000 	strb.w	r8, [r3]
 800ebde:	e63f      	b.n	800e860 <_dtoa_r+0x698>
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	e7bb      	b.n	800eb5c <_dtoa_r+0x994>
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	e7e1      	b.n	800ebac <_dtoa_r+0x9e4>
 800ebe8:	9b08      	ldr	r3, [sp, #32]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	db04      	blt.n	800ebf8 <_dtoa_r+0xa30>
 800ebee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ebf0:	430b      	orrs	r3, r1
 800ebf2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ebf4:	430b      	orrs	r3, r1
 800ebf6:	d120      	bne.n	800ec3a <_dtoa_r+0xa72>
 800ebf8:	2a00      	cmp	r2, #0
 800ebfa:	dded      	ble.n	800ebd8 <_dtoa_r+0xa10>
 800ebfc:	4649      	mov	r1, r9
 800ebfe:	2201      	movs	r2, #1
 800ec00:	4658      	mov	r0, fp
 800ec02:	f000 fbfd 	bl	800f400 <__lshift>
 800ec06:	4621      	mov	r1, r4
 800ec08:	4681      	mov	r9, r0
 800ec0a:	f000 fc65 	bl	800f4d8 <__mcmp>
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	dc03      	bgt.n	800ec1a <_dtoa_r+0xa52>
 800ec12:	d1e1      	bne.n	800ebd8 <_dtoa_r+0xa10>
 800ec14:	f018 0f01 	tst.w	r8, #1
 800ec18:	d0de      	beq.n	800ebd8 <_dtoa_r+0xa10>
 800ec1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec1e:	d1d8      	bne.n	800ebd2 <_dtoa_r+0xa0a>
 800ec20:	9a00      	ldr	r2, [sp, #0]
 800ec22:	2339      	movs	r3, #57	@ 0x39
 800ec24:	7013      	strb	r3, [r2, #0]
 800ec26:	4633      	mov	r3, r6
 800ec28:	461e      	mov	r6, r3
 800ec2a:	3b01      	subs	r3, #1
 800ec2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ec30:	2a39      	cmp	r2, #57	@ 0x39
 800ec32:	d052      	beq.n	800ecda <_dtoa_r+0xb12>
 800ec34:	3201      	adds	r2, #1
 800ec36:	701a      	strb	r2, [r3, #0]
 800ec38:	e612      	b.n	800e860 <_dtoa_r+0x698>
 800ec3a:	2a00      	cmp	r2, #0
 800ec3c:	dd07      	ble.n	800ec4e <_dtoa_r+0xa86>
 800ec3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec42:	d0ed      	beq.n	800ec20 <_dtoa_r+0xa58>
 800ec44:	9a00      	ldr	r2, [sp, #0]
 800ec46:	f108 0301 	add.w	r3, r8, #1
 800ec4a:	7013      	strb	r3, [r2, #0]
 800ec4c:	e608      	b.n	800e860 <_dtoa_r+0x698>
 800ec4e:	9b07      	ldr	r3, [sp, #28]
 800ec50:	9a07      	ldr	r2, [sp, #28]
 800ec52:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ec56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d028      	beq.n	800ecae <_dtoa_r+0xae6>
 800ec5c:	4649      	mov	r1, r9
 800ec5e:	2300      	movs	r3, #0
 800ec60:	220a      	movs	r2, #10
 800ec62:	4658      	mov	r0, fp
 800ec64:	f000 f9d6 	bl	800f014 <__multadd>
 800ec68:	42af      	cmp	r7, r5
 800ec6a:	4681      	mov	r9, r0
 800ec6c:	f04f 0300 	mov.w	r3, #0
 800ec70:	f04f 020a 	mov.w	r2, #10
 800ec74:	4639      	mov	r1, r7
 800ec76:	4658      	mov	r0, fp
 800ec78:	d107      	bne.n	800ec8a <_dtoa_r+0xac2>
 800ec7a:	f000 f9cb 	bl	800f014 <__multadd>
 800ec7e:	4607      	mov	r7, r0
 800ec80:	4605      	mov	r5, r0
 800ec82:	9b07      	ldr	r3, [sp, #28]
 800ec84:	3301      	adds	r3, #1
 800ec86:	9307      	str	r3, [sp, #28]
 800ec88:	e774      	b.n	800eb74 <_dtoa_r+0x9ac>
 800ec8a:	f000 f9c3 	bl	800f014 <__multadd>
 800ec8e:	4629      	mov	r1, r5
 800ec90:	4607      	mov	r7, r0
 800ec92:	2300      	movs	r3, #0
 800ec94:	220a      	movs	r2, #10
 800ec96:	4658      	mov	r0, fp
 800ec98:	f000 f9bc 	bl	800f014 <__multadd>
 800ec9c:	4605      	mov	r5, r0
 800ec9e:	e7f0      	b.n	800ec82 <_dtoa_r+0xaba>
 800eca0:	9b00      	ldr	r3, [sp, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	bfcc      	ite	gt
 800eca6:	461e      	movgt	r6, r3
 800eca8:	2601      	movle	r6, #1
 800ecaa:	4456      	add	r6, sl
 800ecac:	2700      	movs	r7, #0
 800ecae:	4649      	mov	r1, r9
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	4658      	mov	r0, fp
 800ecb4:	f000 fba4 	bl	800f400 <__lshift>
 800ecb8:	4621      	mov	r1, r4
 800ecba:	4681      	mov	r9, r0
 800ecbc:	f000 fc0c 	bl	800f4d8 <__mcmp>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	dcb0      	bgt.n	800ec26 <_dtoa_r+0xa5e>
 800ecc4:	d102      	bne.n	800eccc <_dtoa_r+0xb04>
 800ecc6:	f018 0f01 	tst.w	r8, #1
 800ecca:	d1ac      	bne.n	800ec26 <_dtoa_r+0xa5e>
 800eccc:	4633      	mov	r3, r6
 800ecce:	461e      	mov	r6, r3
 800ecd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ecd4:	2a30      	cmp	r2, #48	@ 0x30
 800ecd6:	d0fa      	beq.n	800ecce <_dtoa_r+0xb06>
 800ecd8:	e5c2      	b.n	800e860 <_dtoa_r+0x698>
 800ecda:	459a      	cmp	sl, r3
 800ecdc:	d1a4      	bne.n	800ec28 <_dtoa_r+0xa60>
 800ecde:	9b04      	ldr	r3, [sp, #16]
 800ece0:	3301      	adds	r3, #1
 800ece2:	9304      	str	r3, [sp, #16]
 800ece4:	2331      	movs	r3, #49	@ 0x31
 800ece6:	f88a 3000 	strb.w	r3, [sl]
 800ecea:	e5b9      	b.n	800e860 <_dtoa_r+0x698>
 800ecec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ecee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ed4c <_dtoa_r+0xb84>
 800ecf2:	b11b      	cbz	r3, 800ecfc <_dtoa_r+0xb34>
 800ecf4:	f10a 0308 	add.w	r3, sl, #8
 800ecf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ecfa:	6013      	str	r3, [r2, #0]
 800ecfc:	4650      	mov	r0, sl
 800ecfe:	b019      	add	sp, #100	@ 0x64
 800ed00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed06:	2b01      	cmp	r3, #1
 800ed08:	f77f ae37 	ble.w	800e97a <_dtoa_r+0x7b2>
 800ed0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed10:	2001      	movs	r0, #1
 800ed12:	e655      	b.n	800e9c0 <_dtoa_r+0x7f8>
 800ed14:	9b00      	ldr	r3, [sp, #0]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	f77f aed6 	ble.w	800eac8 <_dtoa_r+0x900>
 800ed1c:	4656      	mov	r6, sl
 800ed1e:	4621      	mov	r1, r4
 800ed20:	4648      	mov	r0, r9
 800ed22:	f7ff f9c9 	bl	800e0b8 <quorem>
 800ed26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ed2a:	f806 8b01 	strb.w	r8, [r6], #1
 800ed2e:	9b00      	ldr	r3, [sp, #0]
 800ed30:	eba6 020a 	sub.w	r2, r6, sl
 800ed34:	4293      	cmp	r3, r2
 800ed36:	ddb3      	ble.n	800eca0 <_dtoa_r+0xad8>
 800ed38:	4649      	mov	r1, r9
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	220a      	movs	r2, #10
 800ed3e:	4658      	mov	r0, fp
 800ed40:	f000 f968 	bl	800f014 <__multadd>
 800ed44:	4681      	mov	r9, r0
 800ed46:	e7ea      	b.n	800ed1e <_dtoa_r+0xb56>
 800ed48:	08011a75 	.word	0x08011a75
 800ed4c:	080119f9 	.word	0x080119f9

0800ed50 <_free_r>:
 800ed50:	b538      	push	{r3, r4, r5, lr}
 800ed52:	4605      	mov	r5, r0
 800ed54:	2900      	cmp	r1, #0
 800ed56:	d041      	beq.n	800eddc <_free_r+0x8c>
 800ed58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed5c:	1f0c      	subs	r4, r1, #4
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	bfb8      	it	lt
 800ed62:	18e4      	addlt	r4, r4, r3
 800ed64:	f000 f8e8 	bl	800ef38 <__malloc_lock>
 800ed68:	4a1d      	ldr	r2, [pc, #116]	@ (800ede0 <_free_r+0x90>)
 800ed6a:	6813      	ldr	r3, [r2, #0]
 800ed6c:	b933      	cbnz	r3, 800ed7c <_free_r+0x2c>
 800ed6e:	6063      	str	r3, [r4, #4]
 800ed70:	6014      	str	r4, [r2, #0]
 800ed72:	4628      	mov	r0, r5
 800ed74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed78:	f000 b8e4 	b.w	800ef44 <__malloc_unlock>
 800ed7c:	42a3      	cmp	r3, r4
 800ed7e:	d908      	bls.n	800ed92 <_free_r+0x42>
 800ed80:	6820      	ldr	r0, [r4, #0]
 800ed82:	1821      	adds	r1, r4, r0
 800ed84:	428b      	cmp	r3, r1
 800ed86:	bf01      	itttt	eq
 800ed88:	6819      	ldreq	r1, [r3, #0]
 800ed8a:	685b      	ldreq	r3, [r3, #4]
 800ed8c:	1809      	addeq	r1, r1, r0
 800ed8e:	6021      	streq	r1, [r4, #0]
 800ed90:	e7ed      	b.n	800ed6e <_free_r+0x1e>
 800ed92:	461a      	mov	r2, r3
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	b10b      	cbz	r3, 800ed9c <_free_r+0x4c>
 800ed98:	42a3      	cmp	r3, r4
 800ed9a:	d9fa      	bls.n	800ed92 <_free_r+0x42>
 800ed9c:	6811      	ldr	r1, [r2, #0]
 800ed9e:	1850      	adds	r0, r2, r1
 800eda0:	42a0      	cmp	r0, r4
 800eda2:	d10b      	bne.n	800edbc <_free_r+0x6c>
 800eda4:	6820      	ldr	r0, [r4, #0]
 800eda6:	4401      	add	r1, r0
 800eda8:	1850      	adds	r0, r2, r1
 800edaa:	4283      	cmp	r3, r0
 800edac:	6011      	str	r1, [r2, #0]
 800edae:	d1e0      	bne.n	800ed72 <_free_r+0x22>
 800edb0:	6818      	ldr	r0, [r3, #0]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	6053      	str	r3, [r2, #4]
 800edb6:	4408      	add	r0, r1
 800edb8:	6010      	str	r0, [r2, #0]
 800edba:	e7da      	b.n	800ed72 <_free_r+0x22>
 800edbc:	d902      	bls.n	800edc4 <_free_r+0x74>
 800edbe:	230c      	movs	r3, #12
 800edc0:	602b      	str	r3, [r5, #0]
 800edc2:	e7d6      	b.n	800ed72 <_free_r+0x22>
 800edc4:	6820      	ldr	r0, [r4, #0]
 800edc6:	1821      	adds	r1, r4, r0
 800edc8:	428b      	cmp	r3, r1
 800edca:	bf04      	itt	eq
 800edcc:	6819      	ldreq	r1, [r3, #0]
 800edce:	685b      	ldreq	r3, [r3, #4]
 800edd0:	6063      	str	r3, [r4, #4]
 800edd2:	bf04      	itt	eq
 800edd4:	1809      	addeq	r1, r1, r0
 800edd6:	6021      	streq	r1, [r4, #0]
 800edd8:	6054      	str	r4, [r2, #4]
 800edda:	e7ca      	b.n	800ed72 <_free_r+0x22>
 800eddc:	bd38      	pop	{r3, r4, r5, pc}
 800edde:	bf00      	nop
 800ede0:	200010d0 	.word	0x200010d0

0800ede4 <malloc>:
 800ede4:	4b02      	ldr	r3, [pc, #8]	@ (800edf0 <malloc+0xc>)
 800ede6:	4601      	mov	r1, r0
 800ede8:	6818      	ldr	r0, [r3, #0]
 800edea:	f000 b825 	b.w	800ee38 <_malloc_r>
 800edee:	bf00      	nop
 800edf0:	20000054 	.word	0x20000054

0800edf4 <sbrk_aligned>:
 800edf4:	b570      	push	{r4, r5, r6, lr}
 800edf6:	4e0f      	ldr	r6, [pc, #60]	@ (800ee34 <sbrk_aligned+0x40>)
 800edf8:	460c      	mov	r4, r1
 800edfa:	6831      	ldr	r1, [r6, #0]
 800edfc:	4605      	mov	r5, r0
 800edfe:	b911      	cbnz	r1, 800ee06 <sbrk_aligned+0x12>
 800ee00:	f001 ffd2 	bl	8010da8 <_sbrk_r>
 800ee04:	6030      	str	r0, [r6, #0]
 800ee06:	4621      	mov	r1, r4
 800ee08:	4628      	mov	r0, r5
 800ee0a:	f001 ffcd 	bl	8010da8 <_sbrk_r>
 800ee0e:	1c43      	adds	r3, r0, #1
 800ee10:	d103      	bne.n	800ee1a <sbrk_aligned+0x26>
 800ee12:	f04f 34ff 	mov.w	r4, #4294967295
 800ee16:	4620      	mov	r0, r4
 800ee18:	bd70      	pop	{r4, r5, r6, pc}
 800ee1a:	1cc4      	adds	r4, r0, #3
 800ee1c:	f024 0403 	bic.w	r4, r4, #3
 800ee20:	42a0      	cmp	r0, r4
 800ee22:	d0f8      	beq.n	800ee16 <sbrk_aligned+0x22>
 800ee24:	1a21      	subs	r1, r4, r0
 800ee26:	4628      	mov	r0, r5
 800ee28:	f001 ffbe 	bl	8010da8 <_sbrk_r>
 800ee2c:	3001      	adds	r0, #1
 800ee2e:	d1f2      	bne.n	800ee16 <sbrk_aligned+0x22>
 800ee30:	e7ef      	b.n	800ee12 <sbrk_aligned+0x1e>
 800ee32:	bf00      	nop
 800ee34:	200010cc 	.word	0x200010cc

0800ee38 <_malloc_r>:
 800ee38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee3c:	1ccd      	adds	r5, r1, #3
 800ee3e:	f025 0503 	bic.w	r5, r5, #3
 800ee42:	3508      	adds	r5, #8
 800ee44:	2d0c      	cmp	r5, #12
 800ee46:	bf38      	it	cc
 800ee48:	250c      	movcc	r5, #12
 800ee4a:	2d00      	cmp	r5, #0
 800ee4c:	4606      	mov	r6, r0
 800ee4e:	db01      	blt.n	800ee54 <_malloc_r+0x1c>
 800ee50:	42a9      	cmp	r1, r5
 800ee52:	d904      	bls.n	800ee5e <_malloc_r+0x26>
 800ee54:	230c      	movs	r3, #12
 800ee56:	6033      	str	r3, [r6, #0]
 800ee58:	2000      	movs	r0, #0
 800ee5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ef34 <_malloc_r+0xfc>
 800ee62:	f000 f869 	bl	800ef38 <__malloc_lock>
 800ee66:	f8d8 3000 	ldr.w	r3, [r8]
 800ee6a:	461c      	mov	r4, r3
 800ee6c:	bb44      	cbnz	r4, 800eec0 <_malloc_r+0x88>
 800ee6e:	4629      	mov	r1, r5
 800ee70:	4630      	mov	r0, r6
 800ee72:	f7ff ffbf 	bl	800edf4 <sbrk_aligned>
 800ee76:	1c43      	adds	r3, r0, #1
 800ee78:	4604      	mov	r4, r0
 800ee7a:	d158      	bne.n	800ef2e <_malloc_r+0xf6>
 800ee7c:	f8d8 4000 	ldr.w	r4, [r8]
 800ee80:	4627      	mov	r7, r4
 800ee82:	2f00      	cmp	r7, #0
 800ee84:	d143      	bne.n	800ef0e <_malloc_r+0xd6>
 800ee86:	2c00      	cmp	r4, #0
 800ee88:	d04b      	beq.n	800ef22 <_malloc_r+0xea>
 800ee8a:	6823      	ldr	r3, [r4, #0]
 800ee8c:	4639      	mov	r1, r7
 800ee8e:	4630      	mov	r0, r6
 800ee90:	eb04 0903 	add.w	r9, r4, r3
 800ee94:	f001 ff88 	bl	8010da8 <_sbrk_r>
 800ee98:	4581      	cmp	r9, r0
 800ee9a:	d142      	bne.n	800ef22 <_malloc_r+0xea>
 800ee9c:	6821      	ldr	r1, [r4, #0]
 800ee9e:	1a6d      	subs	r5, r5, r1
 800eea0:	4629      	mov	r1, r5
 800eea2:	4630      	mov	r0, r6
 800eea4:	f7ff ffa6 	bl	800edf4 <sbrk_aligned>
 800eea8:	3001      	adds	r0, #1
 800eeaa:	d03a      	beq.n	800ef22 <_malloc_r+0xea>
 800eeac:	6823      	ldr	r3, [r4, #0]
 800eeae:	442b      	add	r3, r5
 800eeb0:	6023      	str	r3, [r4, #0]
 800eeb2:	f8d8 3000 	ldr.w	r3, [r8]
 800eeb6:	685a      	ldr	r2, [r3, #4]
 800eeb8:	bb62      	cbnz	r2, 800ef14 <_malloc_r+0xdc>
 800eeba:	f8c8 7000 	str.w	r7, [r8]
 800eebe:	e00f      	b.n	800eee0 <_malloc_r+0xa8>
 800eec0:	6822      	ldr	r2, [r4, #0]
 800eec2:	1b52      	subs	r2, r2, r5
 800eec4:	d420      	bmi.n	800ef08 <_malloc_r+0xd0>
 800eec6:	2a0b      	cmp	r2, #11
 800eec8:	d917      	bls.n	800eefa <_malloc_r+0xc2>
 800eeca:	1961      	adds	r1, r4, r5
 800eecc:	42a3      	cmp	r3, r4
 800eece:	6025      	str	r5, [r4, #0]
 800eed0:	bf18      	it	ne
 800eed2:	6059      	strne	r1, [r3, #4]
 800eed4:	6863      	ldr	r3, [r4, #4]
 800eed6:	bf08      	it	eq
 800eed8:	f8c8 1000 	streq.w	r1, [r8]
 800eedc:	5162      	str	r2, [r4, r5]
 800eede:	604b      	str	r3, [r1, #4]
 800eee0:	4630      	mov	r0, r6
 800eee2:	f000 f82f 	bl	800ef44 <__malloc_unlock>
 800eee6:	f104 000b 	add.w	r0, r4, #11
 800eeea:	1d23      	adds	r3, r4, #4
 800eeec:	f020 0007 	bic.w	r0, r0, #7
 800eef0:	1ac2      	subs	r2, r0, r3
 800eef2:	bf1c      	itt	ne
 800eef4:	1a1b      	subne	r3, r3, r0
 800eef6:	50a3      	strne	r3, [r4, r2]
 800eef8:	e7af      	b.n	800ee5a <_malloc_r+0x22>
 800eefa:	6862      	ldr	r2, [r4, #4]
 800eefc:	42a3      	cmp	r3, r4
 800eefe:	bf0c      	ite	eq
 800ef00:	f8c8 2000 	streq.w	r2, [r8]
 800ef04:	605a      	strne	r2, [r3, #4]
 800ef06:	e7eb      	b.n	800eee0 <_malloc_r+0xa8>
 800ef08:	4623      	mov	r3, r4
 800ef0a:	6864      	ldr	r4, [r4, #4]
 800ef0c:	e7ae      	b.n	800ee6c <_malloc_r+0x34>
 800ef0e:	463c      	mov	r4, r7
 800ef10:	687f      	ldr	r7, [r7, #4]
 800ef12:	e7b6      	b.n	800ee82 <_malloc_r+0x4a>
 800ef14:	461a      	mov	r2, r3
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	42a3      	cmp	r3, r4
 800ef1a:	d1fb      	bne.n	800ef14 <_malloc_r+0xdc>
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	6053      	str	r3, [r2, #4]
 800ef20:	e7de      	b.n	800eee0 <_malloc_r+0xa8>
 800ef22:	230c      	movs	r3, #12
 800ef24:	6033      	str	r3, [r6, #0]
 800ef26:	4630      	mov	r0, r6
 800ef28:	f000 f80c 	bl	800ef44 <__malloc_unlock>
 800ef2c:	e794      	b.n	800ee58 <_malloc_r+0x20>
 800ef2e:	6005      	str	r5, [r0, #0]
 800ef30:	e7d6      	b.n	800eee0 <_malloc_r+0xa8>
 800ef32:	bf00      	nop
 800ef34:	200010d0 	.word	0x200010d0

0800ef38 <__malloc_lock>:
 800ef38:	4801      	ldr	r0, [pc, #4]	@ (800ef40 <__malloc_lock+0x8>)
 800ef3a:	f7ff b8a6 	b.w	800e08a <__retarget_lock_acquire_recursive>
 800ef3e:	bf00      	nop
 800ef40:	200010c8 	.word	0x200010c8

0800ef44 <__malloc_unlock>:
 800ef44:	4801      	ldr	r0, [pc, #4]	@ (800ef4c <__malloc_unlock+0x8>)
 800ef46:	f7ff b8a1 	b.w	800e08c <__retarget_lock_release_recursive>
 800ef4a:	bf00      	nop
 800ef4c:	200010c8 	.word	0x200010c8

0800ef50 <_Balloc>:
 800ef50:	b570      	push	{r4, r5, r6, lr}
 800ef52:	69c6      	ldr	r6, [r0, #28]
 800ef54:	4604      	mov	r4, r0
 800ef56:	460d      	mov	r5, r1
 800ef58:	b976      	cbnz	r6, 800ef78 <_Balloc+0x28>
 800ef5a:	2010      	movs	r0, #16
 800ef5c:	f7ff ff42 	bl	800ede4 <malloc>
 800ef60:	4602      	mov	r2, r0
 800ef62:	61e0      	str	r0, [r4, #28]
 800ef64:	b920      	cbnz	r0, 800ef70 <_Balloc+0x20>
 800ef66:	4b18      	ldr	r3, [pc, #96]	@ (800efc8 <_Balloc+0x78>)
 800ef68:	4818      	ldr	r0, [pc, #96]	@ (800efcc <_Balloc+0x7c>)
 800ef6a:	216b      	movs	r1, #107	@ 0x6b
 800ef6c:	f001 ff34 	bl	8010dd8 <__assert_func>
 800ef70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef74:	6006      	str	r6, [r0, #0]
 800ef76:	60c6      	str	r6, [r0, #12]
 800ef78:	69e6      	ldr	r6, [r4, #28]
 800ef7a:	68f3      	ldr	r3, [r6, #12]
 800ef7c:	b183      	cbz	r3, 800efa0 <_Balloc+0x50>
 800ef7e:	69e3      	ldr	r3, [r4, #28]
 800ef80:	68db      	ldr	r3, [r3, #12]
 800ef82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ef86:	b9b8      	cbnz	r0, 800efb8 <_Balloc+0x68>
 800ef88:	2101      	movs	r1, #1
 800ef8a:	fa01 f605 	lsl.w	r6, r1, r5
 800ef8e:	1d72      	adds	r2, r6, #5
 800ef90:	0092      	lsls	r2, r2, #2
 800ef92:	4620      	mov	r0, r4
 800ef94:	f001 ff3e 	bl	8010e14 <_calloc_r>
 800ef98:	b160      	cbz	r0, 800efb4 <_Balloc+0x64>
 800ef9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ef9e:	e00e      	b.n	800efbe <_Balloc+0x6e>
 800efa0:	2221      	movs	r2, #33	@ 0x21
 800efa2:	2104      	movs	r1, #4
 800efa4:	4620      	mov	r0, r4
 800efa6:	f001 ff35 	bl	8010e14 <_calloc_r>
 800efaa:	69e3      	ldr	r3, [r4, #28]
 800efac:	60f0      	str	r0, [r6, #12]
 800efae:	68db      	ldr	r3, [r3, #12]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d1e4      	bne.n	800ef7e <_Balloc+0x2e>
 800efb4:	2000      	movs	r0, #0
 800efb6:	bd70      	pop	{r4, r5, r6, pc}
 800efb8:	6802      	ldr	r2, [r0, #0]
 800efba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800efbe:	2300      	movs	r3, #0
 800efc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800efc4:	e7f7      	b.n	800efb6 <_Balloc+0x66>
 800efc6:	bf00      	nop
 800efc8:	08011a06 	.word	0x08011a06
 800efcc:	08011a86 	.word	0x08011a86

0800efd0 <_Bfree>:
 800efd0:	b570      	push	{r4, r5, r6, lr}
 800efd2:	69c6      	ldr	r6, [r0, #28]
 800efd4:	4605      	mov	r5, r0
 800efd6:	460c      	mov	r4, r1
 800efd8:	b976      	cbnz	r6, 800eff8 <_Bfree+0x28>
 800efda:	2010      	movs	r0, #16
 800efdc:	f7ff ff02 	bl	800ede4 <malloc>
 800efe0:	4602      	mov	r2, r0
 800efe2:	61e8      	str	r0, [r5, #28]
 800efe4:	b920      	cbnz	r0, 800eff0 <_Bfree+0x20>
 800efe6:	4b09      	ldr	r3, [pc, #36]	@ (800f00c <_Bfree+0x3c>)
 800efe8:	4809      	ldr	r0, [pc, #36]	@ (800f010 <_Bfree+0x40>)
 800efea:	218f      	movs	r1, #143	@ 0x8f
 800efec:	f001 fef4 	bl	8010dd8 <__assert_func>
 800eff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eff4:	6006      	str	r6, [r0, #0]
 800eff6:	60c6      	str	r6, [r0, #12]
 800eff8:	b13c      	cbz	r4, 800f00a <_Bfree+0x3a>
 800effa:	69eb      	ldr	r3, [r5, #28]
 800effc:	6862      	ldr	r2, [r4, #4]
 800effe:	68db      	ldr	r3, [r3, #12]
 800f000:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f004:	6021      	str	r1, [r4, #0]
 800f006:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f00a:	bd70      	pop	{r4, r5, r6, pc}
 800f00c:	08011a06 	.word	0x08011a06
 800f010:	08011a86 	.word	0x08011a86

0800f014 <__multadd>:
 800f014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f018:	690d      	ldr	r5, [r1, #16]
 800f01a:	4607      	mov	r7, r0
 800f01c:	460c      	mov	r4, r1
 800f01e:	461e      	mov	r6, r3
 800f020:	f101 0c14 	add.w	ip, r1, #20
 800f024:	2000      	movs	r0, #0
 800f026:	f8dc 3000 	ldr.w	r3, [ip]
 800f02a:	b299      	uxth	r1, r3
 800f02c:	fb02 6101 	mla	r1, r2, r1, r6
 800f030:	0c1e      	lsrs	r6, r3, #16
 800f032:	0c0b      	lsrs	r3, r1, #16
 800f034:	fb02 3306 	mla	r3, r2, r6, r3
 800f038:	b289      	uxth	r1, r1
 800f03a:	3001      	adds	r0, #1
 800f03c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f040:	4285      	cmp	r5, r0
 800f042:	f84c 1b04 	str.w	r1, [ip], #4
 800f046:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f04a:	dcec      	bgt.n	800f026 <__multadd+0x12>
 800f04c:	b30e      	cbz	r6, 800f092 <__multadd+0x7e>
 800f04e:	68a3      	ldr	r3, [r4, #8]
 800f050:	42ab      	cmp	r3, r5
 800f052:	dc19      	bgt.n	800f088 <__multadd+0x74>
 800f054:	6861      	ldr	r1, [r4, #4]
 800f056:	4638      	mov	r0, r7
 800f058:	3101      	adds	r1, #1
 800f05a:	f7ff ff79 	bl	800ef50 <_Balloc>
 800f05e:	4680      	mov	r8, r0
 800f060:	b928      	cbnz	r0, 800f06e <__multadd+0x5a>
 800f062:	4602      	mov	r2, r0
 800f064:	4b0c      	ldr	r3, [pc, #48]	@ (800f098 <__multadd+0x84>)
 800f066:	480d      	ldr	r0, [pc, #52]	@ (800f09c <__multadd+0x88>)
 800f068:	21ba      	movs	r1, #186	@ 0xba
 800f06a:	f001 feb5 	bl	8010dd8 <__assert_func>
 800f06e:	6922      	ldr	r2, [r4, #16]
 800f070:	3202      	adds	r2, #2
 800f072:	f104 010c 	add.w	r1, r4, #12
 800f076:	0092      	lsls	r2, r2, #2
 800f078:	300c      	adds	r0, #12
 800f07a:	f7ff f808 	bl	800e08e <memcpy>
 800f07e:	4621      	mov	r1, r4
 800f080:	4638      	mov	r0, r7
 800f082:	f7ff ffa5 	bl	800efd0 <_Bfree>
 800f086:	4644      	mov	r4, r8
 800f088:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f08c:	3501      	adds	r5, #1
 800f08e:	615e      	str	r6, [r3, #20]
 800f090:	6125      	str	r5, [r4, #16]
 800f092:	4620      	mov	r0, r4
 800f094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f098:	08011a75 	.word	0x08011a75
 800f09c:	08011a86 	.word	0x08011a86

0800f0a0 <__s2b>:
 800f0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0a4:	460c      	mov	r4, r1
 800f0a6:	4615      	mov	r5, r2
 800f0a8:	461f      	mov	r7, r3
 800f0aa:	2209      	movs	r2, #9
 800f0ac:	3308      	adds	r3, #8
 800f0ae:	4606      	mov	r6, r0
 800f0b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0b4:	2100      	movs	r1, #0
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	db09      	blt.n	800f0d0 <__s2b+0x30>
 800f0bc:	4630      	mov	r0, r6
 800f0be:	f7ff ff47 	bl	800ef50 <_Balloc>
 800f0c2:	b940      	cbnz	r0, 800f0d6 <__s2b+0x36>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	4b19      	ldr	r3, [pc, #100]	@ (800f12c <__s2b+0x8c>)
 800f0c8:	4819      	ldr	r0, [pc, #100]	@ (800f130 <__s2b+0x90>)
 800f0ca:	21d3      	movs	r1, #211	@ 0xd3
 800f0cc:	f001 fe84 	bl	8010dd8 <__assert_func>
 800f0d0:	0052      	lsls	r2, r2, #1
 800f0d2:	3101      	adds	r1, #1
 800f0d4:	e7f0      	b.n	800f0b8 <__s2b+0x18>
 800f0d6:	9b08      	ldr	r3, [sp, #32]
 800f0d8:	6143      	str	r3, [r0, #20]
 800f0da:	2d09      	cmp	r5, #9
 800f0dc:	f04f 0301 	mov.w	r3, #1
 800f0e0:	6103      	str	r3, [r0, #16]
 800f0e2:	dd16      	ble.n	800f112 <__s2b+0x72>
 800f0e4:	f104 0909 	add.w	r9, r4, #9
 800f0e8:	46c8      	mov	r8, r9
 800f0ea:	442c      	add	r4, r5
 800f0ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f0f0:	4601      	mov	r1, r0
 800f0f2:	3b30      	subs	r3, #48	@ 0x30
 800f0f4:	220a      	movs	r2, #10
 800f0f6:	4630      	mov	r0, r6
 800f0f8:	f7ff ff8c 	bl	800f014 <__multadd>
 800f0fc:	45a0      	cmp	r8, r4
 800f0fe:	d1f5      	bne.n	800f0ec <__s2b+0x4c>
 800f100:	f1a5 0408 	sub.w	r4, r5, #8
 800f104:	444c      	add	r4, r9
 800f106:	1b2d      	subs	r5, r5, r4
 800f108:	1963      	adds	r3, r4, r5
 800f10a:	42bb      	cmp	r3, r7
 800f10c:	db04      	blt.n	800f118 <__s2b+0x78>
 800f10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f112:	340a      	adds	r4, #10
 800f114:	2509      	movs	r5, #9
 800f116:	e7f6      	b.n	800f106 <__s2b+0x66>
 800f118:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f11c:	4601      	mov	r1, r0
 800f11e:	3b30      	subs	r3, #48	@ 0x30
 800f120:	220a      	movs	r2, #10
 800f122:	4630      	mov	r0, r6
 800f124:	f7ff ff76 	bl	800f014 <__multadd>
 800f128:	e7ee      	b.n	800f108 <__s2b+0x68>
 800f12a:	bf00      	nop
 800f12c:	08011a75 	.word	0x08011a75
 800f130:	08011a86 	.word	0x08011a86

0800f134 <__hi0bits>:
 800f134:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f138:	4603      	mov	r3, r0
 800f13a:	bf36      	itet	cc
 800f13c:	0403      	lslcc	r3, r0, #16
 800f13e:	2000      	movcs	r0, #0
 800f140:	2010      	movcc	r0, #16
 800f142:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f146:	bf3c      	itt	cc
 800f148:	021b      	lslcc	r3, r3, #8
 800f14a:	3008      	addcc	r0, #8
 800f14c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f150:	bf3c      	itt	cc
 800f152:	011b      	lslcc	r3, r3, #4
 800f154:	3004      	addcc	r0, #4
 800f156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f15a:	bf3c      	itt	cc
 800f15c:	009b      	lslcc	r3, r3, #2
 800f15e:	3002      	addcc	r0, #2
 800f160:	2b00      	cmp	r3, #0
 800f162:	db05      	blt.n	800f170 <__hi0bits+0x3c>
 800f164:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f168:	f100 0001 	add.w	r0, r0, #1
 800f16c:	bf08      	it	eq
 800f16e:	2020      	moveq	r0, #32
 800f170:	4770      	bx	lr

0800f172 <__lo0bits>:
 800f172:	6803      	ldr	r3, [r0, #0]
 800f174:	4602      	mov	r2, r0
 800f176:	f013 0007 	ands.w	r0, r3, #7
 800f17a:	d00b      	beq.n	800f194 <__lo0bits+0x22>
 800f17c:	07d9      	lsls	r1, r3, #31
 800f17e:	d421      	bmi.n	800f1c4 <__lo0bits+0x52>
 800f180:	0798      	lsls	r0, r3, #30
 800f182:	bf49      	itett	mi
 800f184:	085b      	lsrmi	r3, r3, #1
 800f186:	089b      	lsrpl	r3, r3, #2
 800f188:	2001      	movmi	r0, #1
 800f18a:	6013      	strmi	r3, [r2, #0]
 800f18c:	bf5c      	itt	pl
 800f18e:	6013      	strpl	r3, [r2, #0]
 800f190:	2002      	movpl	r0, #2
 800f192:	4770      	bx	lr
 800f194:	b299      	uxth	r1, r3
 800f196:	b909      	cbnz	r1, 800f19c <__lo0bits+0x2a>
 800f198:	0c1b      	lsrs	r3, r3, #16
 800f19a:	2010      	movs	r0, #16
 800f19c:	b2d9      	uxtb	r1, r3
 800f19e:	b909      	cbnz	r1, 800f1a4 <__lo0bits+0x32>
 800f1a0:	3008      	adds	r0, #8
 800f1a2:	0a1b      	lsrs	r3, r3, #8
 800f1a4:	0719      	lsls	r1, r3, #28
 800f1a6:	bf04      	itt	eq
 800f1a8:	091b      	lsreq	r3, r3, #4
 800f1aa:	3004      	addeq	r0, #4
 800f1ac:	0799      	lsls	r1, r3, #30
 800f1ae:	bf04      	itt	eq
 800f1b0:	089b      	lsreq	r3, r3, #2
 800f1b2:	3002      	addeq	r0, #2
 800f1b4:	07d9      	lsls	r1, r3, #31
 800f1b6:	d403      	bmi.n	800f1c0 <__lo0bits+0x4e>
 800f1b8:	085b      	lsrs	r3, r3, #1
 800f1ba:	f100 0001 	add.w	r0, r0, #1
 800f1be:	d003      	beq.n	800f1c8 <__lo0bits+0x56>
 800f1c0:	6013      	str	r3, [r2, #0]
 800f1c2:	4770      	bx	lr
 800f1c4:	2000      	movs	r0, #0
 800f1c6:	4770      	bx	lr
 800f1c8:	2020      	movs	r0, #32
 800f1ca:	4770      	bx	lr

0800f1cc <__i2b>:
 800f1cc:	b510      	push	{r4, lr}
 800f1ce:	460c      	mov	r4, r1
 800f1d0:	2101      	movs	r1, #1
 800f1d2:	f7ff febd 	bl	800ef50 <_Balloc>
 800f1d6:	4602      	mov	r2, r0
 800f1d8:	b928      	cbnz	r0, 800f1e6 <__i2b+0x1a>
 800f1da:	4b05      	ldr	r3, [pc, #20]	@ (800f1f0 <__i2b+0x24>)
 800f1dc:	4805      	ldr	r0, [pc, #20]	@ (800f1f4 <__i2b+0x28>)
 800f1de:	f240 1145 	movw	r1, #325	@ 0x145
 800f1e2:	f001 fdf9 	bl	8010dd8 <__assert_func>
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	6144      	str	r4, [r0, #20]
 800f1ea:	6103      	str	r3, [r0, #16]
 800f1ec:	bd10      	pop	{r4, pc}
 800f1ee:	bf00      	nop
 800f1f0:	08011a75 	.word	0x08011a75
 800f1f4:	08011a86 	.word	0x08011a86

0800f1f8 <__multiply>:
 800f1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1fc:	4614      	mov	r4, r2
 800f1fe:	690a      	ldr	r2, [r1, #16]
 800f200:	6923      	ldr	r3, [r4, #16]
 800f202:	429a      	cmp	r2, r3
 800f204:	bfa8      	it	ge
 800f206:	4623      	movge	r3, r4
 800f208:	460f      	mov	r7, r1
 800f20a:	bfa4      	itt	ge
 800f20c:	460c      	movge	r4, r1
 800f20e:	461f      	movge	r7, r3
 800f210:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f214:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f218:	68a3      	ldr	r3, [r4, #8]
 800f21a:	6861      	ldr	r1, [r4, #4]
 800f21c:	eb0a 0609 	add.w	r6, sl, r9
 800f220:	42b3      	cmp	r3, r6
 800f222:	b085      	sub	sp, #20
 800f224:	bfb8      	it	lt
 800f226:	3101      	addlt	r1, #1
 800f228:	f7ff fe92 	bl	800ef50 <_Balloc>
 800f22c:	b930      	cbnz	r0, 800f23c <__multiply+0x44>
 800f22e:	4602      	mov	r2, r0
 800f230:	4b44      	ldr	r3, [pc, #272]	@ (800f344 <__multiply+0x14c>)
 800f232:	4845      	ldr	r0, [pc, #276]	@ (800f348 <__multiply+0x150>)
 800f234:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f238:	f001 fdce 	bl	8010dd8 <__assert_func>
 800f23c:	f100 0514 	add.w	r5, r0, #20
 800f240:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f244:	462b      	mov	r3, r5
 800f246:	2200      	movs	r2, #0
 800f248:	4543      	cmp	r3, r8
 800f24a:	d321      	bcc.n	800f290 <__multiply+0x98>
 800f24c:	f107 0114 	add.w	r1, r7, #20
 800f250:	f104 0214 	add.w	r2, r4, #20
 800f254:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f258:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f25c:	9302      	str	r3, [sp, #8]
 800f25e:	1b13      	subs	r3, r2, r4
 800f260:	3b15      	subs	r3, #21
 800f262:	f023 0303 	bic.w	r3, r3, #3
 800f266:	3304      	adds	r3, #4
 800f268:	f104 0715 	add.w	r7, r4, #21
 800f26c:	42ba      	cmp	r2, r7
 800f26e:	bf38      	it	cc
 800f270:	2304      	movcc	r3, #4
 800f272:	9301      	str	r3, [sp, #4]
 800f274:	9b02      	ldr	r3, [sp, #8]
 800f276:	9103      	str	r1, [sp, #12]
 800f278:	428b      	cmp	r3, r1
 800f27a:	d80c      	bhi.n	800f296 <__multiply+0x9e>
 800f27c:	2e00      	cmp	r6, #0
 800f27e:	dd03      	ble.n	800f288 <__multiply+0x90>
 800f280:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f284:	2b00      	cmp	r3, #0
 800f286:	d05b      	beq.n	800f340 <__multiply+0x148>
 800f288:	6106      	str	r6, [r0, #16]
 800f28a:	b005      	add	sp, #20
 800f28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f290:	f843 2b04 	str.w	r2, [r3], #4
 800f294:	e7d8      	b.n	800f248 <__multiply+0x50>
 800f296:	f8b1 a000 	ldrh.w	sl, [r1]
 800f29a:	f1ba 0f00 	cmp.w	sl, #0
 800f29e:	d024      	beq.n	800f2ea <__multiply+0xf2>
 800f2a0:	f104 0e14 	add.w	lr, r4, #20
 800f2a4:	46a9      	mov	r9, r5
 800f2a6:	f04f 0c00 	mov.w	ip, #0
 800f2aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f2ae:	f8d9 3000 	ldr.w	r3, [r9]
 800f2b2:	fa1f fb87 	uxth.w	fp, r7
 800f2b6:	b29b      	uxth	r3, r3
 800f2b8:	fb0a 330b 	mla	r3, sl, fp, r3
 800f2bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f2c0:	f8d9 7000 	ldr.w	r7, [r9]
 800f2c4:	4463      	add	r3, ip
 800f2c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f2ca:	fb0a c70b 	mla	r7, sl, fp, ip
 800f2ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f2d8:	4572      	cmp	r2, lr
 800f2da:	f849 3b04 	str.w	r3, [r9], #4
 800f2de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f2e2:	d8e2      	bhi.n	800f2aa <__multiply+0xb2>
 800f2e4:	9b01      	ldr	r3, [sp, #4]
 800f2e6:	f845 c003 	str.w	ip, [r5, r3]
 800f2ea:	9b03      	ldr	r3, [sp, #12]
 800f2ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f2f0:	3104      	adds	r1, #4
 800f2f2:	f1b9 0f00 	cmp.w	r9, #0
 800f2f6:	d021      	beq.n	800f33c <__multiply+0x144>
 800f2f8:	682b      	ldr	r3, [r5, #0]
 800f2fa:	f104 0c14 	add.w	ip, r4, #20
 800f2fe:	46ae      	mov	lr, r5
 800f300:	f04f 0a00 	mov.w	sl, #0
 800f304:	f8bc b000 	ldrh.w	fp, [ip]
 800f308:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f30c:	fb09 770b 	mla	r7, r9, fp, r7
 800f310:	4457      	add	r7, sl
 800f312:	b29b      	uxth	r3, r3
 800f314:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f318:	f84e 3b04 	str.w	r3, [lr], #4
 800f31c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f320:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f324:	f8be 3000 	ldrh.w	r3, [lr]
 800f328:	fb09 330a 	mla	r3, r9, sl, r3
 800f32c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f330:	4562      	cmp	r2, ip
 800f332:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f336:	d8e5      	bhi.n	800f304 <__multiply+0x10c>
 800f338:	9f01      	ldr	r7, [sp, #4]
 800f33a:	51eb      	str	r3, [r5, r7]
 800f33c:	3504      	adds	r5, #4
 800f33e:	e799      	b.n	800f274 <__multiply+0x7c>
 800f340:	3e01      	subs	r6, #1
 800f342:	e79b      	b.n	800f27c <__multiply+0x84>
 800f344:	08011a75 	.word	0x08011a75
 800f348:	08011a86 	.word	0x08011a86

0800f34c <__pow5mult>:
 800f34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f350:	4615      	mov	r5, r2
 800f352:	f012 0203 	ands.w	r2, r2, #3
 800f356:	4607      	mov	r7, r0
 800f358:	460e      	mov	r6, r1
 800f35a:	d007      	beq.n	800f36c <__pow5mult+0x20>
 800f35c:	4c25      	ldr	r4, [pc, #148]	@ (800f3f4 <__pow5mult+0xa8>)
 800f35e:	3a01      	subs	r2, #1
 800f360:	2300      	movs	r3, #0
 800f362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f366:	f7ff fe55 	bl	800f014 <__multadd>
 800f36a:	4606      	mov	r6, r0
 800f36c:	10ad      	asrs	r5, r5, #2
 800f36e:	d03d      	beq.n	800f3ec <__pow5mult+0xa0>
 800f370:	69fc      	ldr	r4, [r7, #28]
 800f372:	b97c      	cbnz	r4, 800f394 <__pow5mult+0x48>
 800f374:	2010      	movs	r0, #16
 800f376:	f7ff fd35 	bl	800ede4 <malloc>
 800f37a:	4602      	mov	r2, r0
 800f37c:	61f8      	str	r0, [r7, #28]
 800f37e:	b928      	cbnz	r0, 800f38c <__pow5mult+0x40>
 800f380:	4b1d      	ldr	r3, [pc, #116]	@ (800f3f8 <__pow5mult+0xac>)
 800f382:	481e      	ldr	r0, [pc, #120]	@ (800f3fc <__pow5mult+0xb0>)
 800f384:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f388:	f001 fd26 	bl	8010dd8 <__assert_func>
 800f38c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f390:	6004      	str	r4, [r0, #0]
 800f392:	60c4      	str	r4, [r0, #12]
 800f394:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f39c:	b94c      	cbnz	r4, 800f3b2 <__pow5mult+0x66>
 800f39e:	f240 2171 	movw	r1, #625	@ 0x271
 800f3a2:	4638      	mov	r0, r7
 800f3a4:	f7ff ff12 	bl	800f1cc <__i2b>
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	6003      	str	r3, [r0, #0]
 800f3b2:	f04f 0900 	mov.w	r9, #0
 800f3b6:	07eb      	lsls	r3, r5, #31
 800f3b8:	d50a      	bpl.n	800f3d0 <__pow5mult+0x84>
 800f3ba:	4631      	mov	r1, r6
 800f3bc:	4622      	mov	r2, r4
 800f3be:	4638      	mov	r0, r7
 800f3c0:	f7ff ff1a 	bl	800f1f8 <__multiply>
 800f3c4:	4631      	mov	r1, r6
 800f3c6:	4680      	mov	r8, r0
 800f3c8:	4638      	mov	r0, r7
 800f3ca:	f7ff fe01 	bl	800efd0 <_Bfree>
 800f3ce:	4646      	mov	r6, r8
 800f3d0:	106d      	asrs	r5, r5, #1
 800f3d2:	d00b      	beq.n	800f3ec <__pow5mult+0xa0>
 800f3d4:	6820      	ldr	r0, [r4, #0]
 800f3d6:	b938      	cbnz	r0, 800f3e8 <__pow5mult+0x9c>
 800f3d8:	4622      	mov	r2, r4
 800f3da:	4621      	mov	r1, r4
 800f3dc:	4638      	mov	r0, r7
 800f3de:	f7ff ff0b 	bl	800f1f8 <__multiply>
 800f3e2:	6020      	str	r0, [r4, #0]
 800f3e4:	f8c0 9000 	str.w	r9, [r0]
 800f3e8:	4604      	mov	r4, r0
 800f3ea:	e7e4      	b.n	800f3b6 <__pow5mult+0x6a>
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3f2:	bf00      	nop
 800f3f4:	08011ae0 	.word	0x08011ae0
 800f3f8:	08011a06 	.word	0x08011a06
 800f3fc:	08011a86 	.word	0x08011a86

0800f400 <__lshift>:
 800f400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f404:	460c      	mov	r4, r1
 800f406:	6849      	ldr	r1, [r1, #4]
 800f408:	6923      	ldr	r3, [r4, #16]
 800f40a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f40e:	68a3      	ldr	r3, [r4, #8]
 800f410:	4607      	mov	r7, r0
 800f412:	4691      	mov	r9, r2
 800f414:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f418:	f108 0601 	add.w	r6, r8, #1
 800f41c:	42b3      	cmp	r3, r6
 800f41e:	db0b      	blt.n	800f438 <__lshift+0x38>
 800f420:	4638      	mov	r0, r7
 800f422:	f7ff fd95 	bl	800ef50 <_Balloc>
 800f426:	4605      	mov	r5, r0
 800f428:	b948      	cbnz	r0, 800f43e <__lshift+0x3e>
 800f42a:	4602      	mov	r2, r0
 800f42c:	4b28      	ldr	r3, [pc, #160]	@ (800f4d0 <__lshift+0xd0>)
 800f42e:	4829      	ldr	r0, [pc, #164]	@ (800f4d4 <__lshift+0xd4>)
 800f430:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f434:	f001 fcd0 	bl	8010dd8 <__assert_func>
 800f438:	3101      	adds	r1, #1
 800f43a:	005b      	lsls	r3, r3, #1
 800f43c:	e7ee      	b.n	800f41c <__lshift+0x1c>
 800f43e:	2300      	movs	r3, #0
 800f440:	f100 0114 	add.w	r1, r0, #20
 800f444:	f100 0210 	add.w	r2, r0, #16
 800f448:	4618      	mov	r0, r3
 800f44a:	4553      	cmp	r3, sl
 800f44c:	db33      	blt.n	800f4b6 <__lshift+0xb6>
 800f44e:	6920      	ldr	r0, [r4, #16]
 800f450:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f454:	f104 0314 	add.w	r3, r4, #20
 800f458:	f019 091f 	ands.w	r9, r9, #31
 800f45c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f460:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f464:	d02b      	beq.n	800f4be <__lshift+0xbe>
 800f466:	f1c9 0e20 	rsb	lr, r9, #32
 800f46a:	468a      	mov	sl, r1
 800f46c:	2200      	movs	r2, #0
 800f46e:	6818      	ldr	r0, [r3, #0]
 800f470:	fa00 f009 	lsl.w	r0, r0, r9
 800f474:	4310      	orrs	r0, r2
 800f476:	f84a 0b04 	str.w	r0, [sl], #4
 800f47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f47e:	459c      	cmp	ip, r3
 800f480:	fa22 f20e 	lsr.w	r2, r2, lr
 800f484:	d8f3      	bhi.n	800f46e <__lshift+0x6e>
 800f486:	ebac 0304 	sub.w	r3, ip, r4
 800f48a:	3b15      	subs	r3, #21
 800f48c:	f023 0303 	bic.w	r3, r3, #3
 800f490:	3304      	adds	r3, #4
 800f492:	f104 0015 	add.w	r0, r4, #21
 800f496:	4584      	cmp	ip, r0
 800f498:	bf38      	it	cc
 800f49a:	2304      	movcc	r3, #4
 800f49c:	50ca      	str	r2, [r1, r3]
 800f49e:	b10a      	cbz	r2, 800f4a4 <__lshift+0xa4>
 800f4a0:	f108 0602 	add.w	r6, r8, #2
 800f4a4:	3e01      	subs	r6, #1
 800f4a6:	4638      	mov	r0, r7
 800f4a8:	612e      	str	r6, [r5, #16]
 800f4aa:	4621      	mov	r1, r4
 800f4ac:	f7ff fd90 	bl	800efd0 <_Bfree>
 800f4b0:	4628      	mov	r0, r5
 800f4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800f4ba:	3301      	adds	r3, #1
 800f4bc:	e7c5      	b.n	800f44a <__lshift+0x4a>
 800f4be:	3904      	subs	r1, #4
 800f4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f4c8:	459c      	cmp	ip, r3
 800f4ca:	d8f9      	bhi.n	800f4c0 <__lshift+0xc0>
 800f4cc:	e7ea      	b.n	800f4a4 <__lshift+0xa4>
 800f4ce:	bf00      	nop
 800f4d0:	08011a75 	.word	0x08011a75
 800f4d4:	08011a86 	.word	0x08011a86

0800f4d8 <__mcmp>:
 800f4d8:	690a      	ldr	r2, [r1, #16]
 800f4da:	4603      	mov	r3, r0
 800f4dc:	6900      	ldr	r0, [r0, #16]
 800f4de:	1a80      	subs	r0, r0, r2
 800f4e0:	b530      	push	{r4, r5, lr}
 800f4e2:	d10e      	bne.n	800f502 <__mcmp+0x2a>
 800f4e4:	3314      	adds	r3, #20
 800f4e6:	3114      	adds	r1, #20
 800f4e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f4ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f4f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f4f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f4f8:	4295      	cmp	r5, r2
 800f4fa:	d003      	beq.n	800f504 <__mcmp+0x2c>
 800f4fc:	d205      	bcs.n	800f50a <__mcmp+0x32>
 800f4fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f502:	bd30      	pop	{r4, r5, pc}
 800f504:	42a3      	cmp	r3, r4
 800f506:	d3f3      	bcc.n	800f4f0 <__mcmp+0x18>
 800f508:	e7fb      	b.n	800f502 <__mcmp+0x2a>
 800f50a:	2001      	movs	r0, #1
 800f50c:	e7f9      	b.n	800f502 <__mcmp+0x2a>
	...

0800f510 <__mdiff>:
 800f510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f514:	4689      	mov	r9, r1
 800f516:	4606      	mov	r6, r0
 800f518:	4611      	mov	r1, r2
 800f51a:	4648      	mov	r0, r9
 800f51c:	4614      	mov	r4, r2
 800f51e:	f7ff ffdb 	bl	800f4d8 <__mcmp>
 800f522:	1e05      	subs	r5, r0, #0
 800f524:	d112      	bne.n	800f54c <__mdiff+0x3c>
 800f526:	4629      	mov	r1, r5
 800f528:	4630      	mov	r0, r6
 800f52a:	f7ff fd11 	bl	800ef50 <_Balloc>
 800f52e:	4602      	mov	r2, r0
 800f530:	b928      	cbnz	r0, 800f53e <__mdiff+0x2e>
 800f532:	4b3f      	ldr	r3, [pc, #252]	@ (800f630 <__mdiff+0x120>)
 800f534:	f240 2137 	movw	r1, #567	@ 0x237
 800f538:	483e      	ldr	r0, [pc, #248]	@ (800f634 <__mdiff+0x124>)
 800f53a:	f001 fc4d 	bl	8010dd8 <__assert_func>
 800f53e:	2301      	movs	r3, #1
 800f540:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f544:	4610      	mov	r0, r2
 800f546:	b003      	add	sp, #12
 800f548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f54c:	bfbc      	itt	lt
 800f54e:	464b      	movlt	r3, r9
 800f550:	46a1      	movlt	r9, r4
 800f552:	4630      	mov	r0, r6
 800f554:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f558:	bfba      	itte	lt
 800f55a:	461c      	movlt	r4, r3
 800f55c:	2501      	movlt	r5, #1
 800f55e:	2500      	movge	r5, #0
 800f560:	f7ff fcf6 	bl	800ef50 <_Balloc>
 800f564:	4602      	mov	r2, r0
 800f566:	b918      	cbnz	r0, 800f570 <__mdiff+0x60>
 800f568:	4b31      	ldr	r3, [pc, #196]	@ (800f630 <__mdiff+0x120>)
 800f56a:	f240 2145 	movw	r1, #581	@ 0x245
 800f56e:	e7e3      	b.n	800f538 <__mdiff+0x28>
 800f570:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f574:	6926      	ldr	r6, [r4, #16]
 800f576:	60c5      	str	r5, [r0, #12]
 800f578:	f109 0310 	add.w	r3, r9, #16
 800f57c:	f109 0514 	add.w	r5, r9, #20
 800f580:	f104 0e14 	add.w	lr, r4, #20
 800f584:	f100 0b14 	add.w	fp, r0, #20
 800f588:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f58c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f590:	9301      	str	r3, [sp, #4]
 800f592:	46d9      	mov	r9, fp
 800f594:	f04f 0c00 	mov.w	ip, #0
 800f598:	9b01      	ldr	r3, [sp, #4]
 800f59a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f59e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f5a2:	9301      	str	r3, [sp, #4]
 800f5a4:	fa1f f38a 	uxth.w	r3, sl
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	b283      	uxth	r3, r0
 800f5ac:	1acb      	subs	r3, r1, r3
 800f5ae:	0c00      	lsrs	r0, r0, #16
 800f5b0:	4463      	add	r3, ip
 800f5b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f5b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f5ba:	b29b      	uxth	r3, r3
 800f5bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f5c0:	4576      	cmp	r6, lr
 800f5c2:	f849 3b04 	str.w	r3, [r9], #4
 800f5c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f5ca:	d8e5      	bhi.n	800f598 <__mdiff+0x88>
 800f5cc:	1b33      	subs	r3, r6, r4
 800f5ce:	3b15      	subs	r3, #21
 800f5d0:	f023 0303 	bic.w	r3, r3, #3
 800f5d4:	3415      	adds	r4, #21
 800f5d6:	3304      	adds	r3, #4
 800f5d8:	42a6      	cmp	r6, r4
 800f5da:	bf38      	it	cc
 800f5dc:	2304      	movcc	r3, #4
 800f5de:	441d      	add	r5, r3
 800f5e0:	445b      	add	r3, fp
 800f5e2:	461e      	mov	r6, r3
 800f5e4:	462c      	mov	r4, r5
 800f5e6:	4544      	cmp	r4, r8
 800f5e8:	d30e      	bcc.n	800f608 <__mdiff+0xf8>
 800f5ea:	f108 0103 	add.w	r1, r8, #3
 800f5ee:	1b49      	subs	r1, r1, r5
 800f5f0:	f021 0103 	bic.w	r1, r1, #3
 800f5f4:	3d03      	subs	r5, #3
 800f5f6:	45a8      	cmp	r8, r5
 800f5f8:	bf38      	it	cc
 800f5fa:	2100      	movcc	r1, #0
 800f5fc:	440b      	add	r3, r1
 800f5fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f602:	b191      	cbz	r1, 800f62a <__mdiff+0x11a>
 800f604:	6117      	str	r7, [r2, #16]
 800f606:	e79d      	b.n	800f544 <__mdiff+0x34>
 800f608:	f854 1b04 	ldr.w	r1, [r4], #4
 800f60c:	46e6      	mov	lr, ip
 800f60e:	0c08      	lsrs	r0, r1, #16
 800f610:	fa1c fc81 	uxtah	ip, ip, r1
 800f614:	4471      	add	r1, lr
 800f616:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f61a:	b289      	uxth	r1, r1
 800f61c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f620:	f846 1b04 	str.w	r1, [r6], #4
 800f624:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f628:	e7dd      	b.n	800f5e6 <__mdiff+0xd6>
 800f62a:	3f01      	subs	r7, #1
 800f62c:	e7e7      	b.n	800f5fe <__mdiff+0xee>
 800f62e:	bf00      	nop
 800f630:	08011a75 	.word	0x08011a75
 800f634:	08011a86 	.word	0x08011a86

0800f638 <__ulp>:
 800f638:	b082      	sub	sp, #8
 800f63a:	ed8d 0b00 	vstr	d0, [sp]
 800f63e:	9a01      	ldr	r2, [sp, #4]
 800f640:	4b0f      	ldr	r3, [pc, #60]	@ (800f680 <__ulp+0x48>)
 800f642:	4013      	ands	r3, r2
 800f644:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f648:	2b00      	cmp	r3, #0
 800f64a:	dc08      	bgt.n	800f65e <__ulp+0x26>
 800f64c:	425b      	negs	r3, r3
 800f64e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f652:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f656:	da04      	bge.n	800f662 <__ulp+0x2a>
 800f658:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f65c:	4113      	asrs	r3, r2
 800f65e:	2200      	movs	r2, #0
 800f660:	e008      	b.n	800f674 <__ulp+0x3c>
 800f662:	f1a2 0314 	sub.w	r3, r2, #20
 800f666:	2b1e      	cmp	r3, #30
 800f668:	bfda      	itte	le
 800f66a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f66e:	40da      	lsrle	r2, r3
 800f670:	2201      	movgt	r2, #1
 800f672:	2300      	movs	r3, #0
 800f674:	4619      	mov	r1, r3
 800f676:	4610      	mov	r0, r2
 800f678:	ec41 0b10 	vmov	d0, r0, r1
 800f67c:	b002      	add	sp, #8
 800f67e:	4770      	bx	lr
 800f680:	7ff00000 	.word	0x7ff00000

0800f684 <__b2d>:
 800f684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f688:	6906      	ldr	r6, [r0, #16]
 800f68a:	f100 0814 	add.w	r8, r0, #20
 800f68e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f692:	1f37      	subs	r7, r6, #4
 800f694:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f698:	4610      	mov	r0, r2
 800f69a:	f7ff fd4b 	bl	800f134 <__hi0bits>
 800f69e:	f1c0 0320 	rsb	r3, r0, #32
 800f6a2:	280a      	cmp	r0, #10
 800f6a4:	600b      	str	r3, [r1, #0]
 800f6a6:	491b      	ldr	r1, [pc, #108]	@ (800f714 <__b2d+0x90>)
 800f6a8:	dc15      	bgt.n	800f6d6 <__b2d+0x52>
 800f6aa:	f1c0 0c0b 	rsb	ip, r0, #11
 800f6ae:	fa22 f30c 	lsr.w	r3, r2, ip
 800f6b2:	45b8      	cmp	r8, r7
 800f6b4:	ea43 0501 	orr.w	r5, r3, r1
 800f6b8:	bf34      	ite	cc
 800f6ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f6be:	2300      	movcs	r3, #0
 800f6c0:	3015      	adds	r0, #21
 800f6c2:	fa02 f000 	lsl.w	r0, r2, r0
 800f6c6:	fa23 f30c 	lsr.w	r3, r3, ip
 800f6ca:	4303      	orrs	r3, r0
 800f6cc:	461c      	mov	r4, r3
 800f6ce:	ec45 4b10 	vmov	d0, r4, r5
 800f6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6d6:	45b8      	cmp	r8, r7
 800f6d8:	bf3a      	itte	cc
 800f6da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f6de:	f1a6 0708 	subcc.w	r7, r6, #8
 800f6e2:	2300      	movcs	r3, #0
 800f6e4:	380b      	subs	r0, #11
 800f6e6:	d012      	beq.n	800f70e <__b2d+0x8a>
 800f6e8:	f1c0 0120 	rsb	r1, r0, #32
 800f6ec:	fa23 f401 	lsr.w	r4, r3, r1
 800f6f0:	4082      	lsls	r2, r0
 800f6f2:	4322      	orrs	r2, r4
 800f6f4:	4547      	cmp	r7, r8
 800f6f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f6fa:	bf8c      	ite	hi
 800f6fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f700:	2200      	movls	r2, #0
 800f702:	4083      	lsls	r3, r0
 800f704:	40ca      	lsrs	r2, r1
 800f706:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f70a:	4313      	orrs	r3, r2
 800f70c:	e7de      	b.n	800f6cc <__b2d+0x48>
 800f70e:	ea42 0501 	orr.w	r5, r2, r1
 800f712:	e7db      	b.n	800f6cc <__b2d+0x48>
 800f714:	3ff00000 	.word	0x3ff00000

0800f718 <__d2b>:
 800f718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f71c:	460f      	mov	r7, r1
 800f71e:	2101      	movs	r1, #1
 800f720:	ec59 8b10 	vmov	r8, r9, d0
 800f724:	4616      	mov	r6, r2
 800f726:	f7ff fc13 	bl	800ef50 <_Balloc>
 800f72a:	4604      	mov	r4, r0
 800f72c:	b930      	cbnz	r0, 800f73c <__d2b+0x24>
 800f72e:	4602      	mov	r2, r0
 800f730:	4b23      	ldr	r3, [pc, #140]	@ (800f7c0 <__d2b+0xa8>)
 800f732:	4824      	ldr	r0, [pc, #144]	@ (800f7c4 <__d2b+0xac>)
 800f734:	f240 310f 	movw	r1, #783	@ 0x30f
 800f738:	f001 fb4e 	bl	8010dd8 <__assert_func>
 800f73c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f740:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f744:	b10d      	cbz	r5, 800f74a <__d2b+0x32>
 800f746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f74a:	9301      	str	r3, [sp, #4]
 800f74c:	f1b8 0300 	subs.w	r3, r8, #0
 800f750:	d023      	beq.n	800f79a <__d2b+0x82>
 800f752:	4668      	mov	r0, sp
 800f754:	9300      	str	r3, [sp, #0]
 800f756:	f7ff fd0c 	bl	800f172 <__lo0bits>
 800f75a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f75e:	b1d0      	cbz	r0, 800f796 <__d2b+0x7e>
 800f760:	f1c0 0320 	rsb	r3, r0, #32
 800f764:	fa02 f303 	lsl.w	r3, r2, r3
 800f768:	430b      	orrs	r3, r1
 800f76a:	40c2      	lsrs	r2, r0
 800f76c:	6163      	str	r3, [r4, #20]
 800f76e:	9201      	str	r2, [sp, #4]
 800f770:	9b01      	ldr	r3, [sp, #4]
 800f772:	61a3      	str	r3, [r4, #24]
 800f774:	2b00      	cmp	r3, #0
 800f776:	bf0c      	ite	eq
 800f778:	2201      	moveq	r2, #1
 800f77a:	2202      	movne	r2, #2
 800f77c:	6122      	str	r2, [r4, #16]
 800f77e:	b1a5      	cbz	r5, 800f7aa <__d2b+0x92>
 800f780:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f784:	4405      	add	r5, r0
 800f786:	603d      	str	r5, [r7, #0]
 800f788:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f78c:	6030      	str	r0, [r6, #0]
 800f78e:	4620      	mov	r0, r4
 800f790:	b003      	add	sp, #12
 800f792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f796:	6161      	str	r1, [r4, #20]
 800f798:	e7ea      	b.n	800f770 <__d2b+0x58>
 800f79a:	a801      	add	r0, sp, #4
 800f79c:	f7ff fce9 	bl	800f172 <__lo0bits>
 800f7a0:	9b01      	ldr	r3, [sp, #4]
 800f7a2:	6163      	str	r3, [r4, #20]
 800f7a4:	3020      	adds	r0, #32
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	e7e8      	b.n	800f77c <__d2b+0x64>
 800f7aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f7ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f7b2:	6038      	str	r0, [r7, #0]
 800f7b4:	6918      	ldr	r0, [r3, #16]
 800f7b6:	f7ff fcbd 	bl	800f134 <__hi0bits>
 800f7ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f7be:	e7e5      	b.n	800f78c <__d2b+0x74>
 800f7c0:	08011a75 	.word	0x08011a75
 800f7c4:	08011a86 	.word	0x08011a86

0800f7c8 <__ratio>:
 800f7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7cc:	b085      	sub	sp, #20
 800f7ce:	e9cd 1000 	strd	r1, r0, [sp]
 800f7d2:	a902      	add	r1, sp, #8
 800f7d4:	f7ff ff56 	bl	800f684 <__b2d>
 800f7d8:	9800      	ldr	r0, [sp, #0]
 800f7da:	a903      	add	r1, sp, #12
 800f7dc:	ec55 4b10 	vmov	r4, r5, d0
 800f7e0:	f7ff ff50 	bl	800f684 <__b2d>
 800f7e4:	9b01      	ldr	r3, [sp, #4]
 800f7e6:	6919      	ldr	r1, [r3, #16]
 800f7e8:	9b00      	ldr	r3, [sp, #0]
 800f7ea:	691b      	ldr	r3, [r3, #16]
 800f7ec:	1ac9      	subs	r1, r1, r3
 800f7ee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f7f2:	1a9b      	subs	r3, r3, r2
 800f7f4:	ec5b ab10 	vmov	sl, fp, d0
 800f7f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	bfce      	itee	gt
 800f800:	462a      	movgt	r2, r5
 800f802:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f806:	465a      	movle	r2, fp
 800f808:	462f      	mov	r7, r5
 800f80a:	46d9      	mov	r9, fp
 800f80c:	bfcc      	ite	gt
 800f80e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f812:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f816:	464b      	mov	r3, r9
 800f818:	4652      	mov	r2, sl
 800f81a:	4620      	mov	r0, r4
 800f81c:	4639      	mov	r1, r7
 800f81e:	f7f1 f815 	bl	800084c <__aeabi_ddiv>
 800f822:	ec41 0b10 	vmov	d0, r0, r1
 800f826:	b005      	add	sp, #20
 800f828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f82c <__copybits>:
 800f82c:	3901      	subs	r1, #1
 800f82e:	b570      	push	{r4, r5, r6, lr}
 800f830:	1149      	asrs	r1, r1, #5
 800f832:	6914      	ldr	r4, [r2, #16]
 800f834:	3101      	adds	r1, #1
 800f836:	f102 0314 	add.w	r3, r2, #20
 800f83a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f83e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f842:	1f05      	subs	r5, r0, #4
 800f844:	42a3      	cmp	r3, r4
 800f846:	d30c      	bcc.n	800f862 <__copybits+0x36>
 800f848:	1aa3      	subs	r3, r4, r2
 800f84a:	3b11      	subs	r3, #17
 800f84c:	f023 0303 	bic.w	r3, r3, #3
 800f850:	3211      	adds	r2, #17
 800f852:	42a2      	cmp	r2, r4
 800f854:	bf88      	it	hi
 800f856:	2300      	movhi	r3, #0
 800f858:	4418      	add	r0, r3
 800f85a:	2300      	movs	r3, #0
 800f85c:	4288      	cmp	r0, r1
 800f85e:	d305      	bcc.n	800f86c <__copybits+0x40>
 800f860:	bd70      	pop	{r4, r5, r6, pc}
 800f862:	f853 6b04 	ldr.w	r6, [r3], #4
 800f866:	f845 6f04 	str.w	r6, [r5, #4]!
 800f86a:	e7eb      	b.n	800f844 <__copybits+0x18>
 800f86c:	f840 3b04 	str.w	r3, [r0], #4
 800f870:	e7f4      	b.n	800f85c <__copybits+0x30>

0800f872 <__any_on>:
 800f872:	f100 0214 	add.w	r2, r0, #20
 800f876:	6900      	ldr	r0, [r0, #16]
 800f878:	114b      	asrs	r3, r1, #5
 800f87a:	4298      	cmp	r0, r3
 800f87c:	b510      	push	{r4, lr}
 800f87e:	db11      	blt.n	800f8a4 <__any_on+0x32>
 800f880:	dd0a      	ble.n	800f898 <__any_on+0x26>
 800f882:	f011 011f 	ands.w	r1, r1, #31
 800f886:	d007      	beq.n	800f898 <__any_on+0x26>
 800f888:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f88c:	fa24 f001 	lsr.w	r0, r4, r1
 800f890:	fa00 f101 	lsl.w	r1, r0, r1
 800f894:	428c      	cmp	r4, r1
 800f896:	d10b      	bne.n	800f8b0 <__any_on+0x3e>
 800f898:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d803      	bhi.n	800f8a8 <__any_on+0x36>
 800f8a0:	2000      	movs	r0, #0
 800f8a2:	bd10      	pop	{r4, pc}
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	e7f7      	b.n	800f898 <__any_on+0x26>
 800f8a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f8ac:	2900      	cmp	r1, #0
 800f8ae:	d0f5      	beq.n	800f89c <__any_on+0x2a>
 800f8b0:	2001      	movs	r0, #1
 800f8b2:	e7f6      	b.n	800f8a2 <__any_on+0x30>

0800f8b4 <sulp>:
 800f8b4:	b570      	push	{r4, r5, r6, lr}
 800f8b6:	4604      	mov	r4, r0
 800f8b8:	460d      	mov	r5, r1
 800f8ba:	ec45 4b10 	vmov	d0, r4, r5
 800f8be:	4616      	mov	r6, r2
 800f8c0:	f7ff feba 	bl	800f638 <__ulp>
 800f8c4:	ec51 0b10 	vmov	r0, r1, d0
 800f8c8:	b17e      	cbz	r6, 800f8ea <sulp+0x36>
 800f8ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f8ce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	dd09      	ble.n	800f8ea <sulp+0x36>
 800f8d6:	051b      	lsls	r3, r3, #20
 800f8d8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f8dc:	2400      	movs	r4, #0
 800f8de:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f8e2:	4622      	mov	r2, r4
 800f8e4:	462b      	mov	r3, r5
 800f8e6:	f7f0 fe87 	bl	80005f8 <__aeabi_dmul>
 800f8ea:	ec41 0b10 	vmov	d0, r0, r1
 800f8ee:	bd70      	pop	{r4, r5, r6, pc}

0800f8f0 <_strtod_l>:
 800f8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8f4:	b09f      	sub	sp, #124	@ 0x7c
 800f8f6:	460c      	mov	r4, r1
 800f8f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	921a      	str	r2, [sp, #104]	@ 0x68
 800f8fe:	9005      	str	r0, [sp, #20]
 800f900:	f04f 0a00 	mov.w	sl, #0
 800f904:	f04f 0b00 	mov.w	fp, #0
 800f908:	460a      	mov	r2, r1
 800f90a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f90c:	7811      	ldrb	r1, [r2, #0]
 800f90e:	292b      	cmp	r1, #43	@ 0x2b
 800f910:	d04a      	beq.n	800f9a8 <_strtod_l+0xb8>
 800f912:	d838      	bhi.n	800f986 <_strtod_l+0x96>
 800f914:	290d      	cmp	r1, #13
 800f916:	d832      	bhi.n	800f97e <_strtod_l+0x8e>
 800f918:	2908      	cmp	r1, #8
 800f91a:	d832      	bhi.n	800f982 <_strtod_l+0x92>
 800f91c:	2900      	cmp	r1, #0
 800f91e:	d03b      	beq.n	800f998 <_strtod_l+0xa8>
 800f920:	2200      	movs	r2, #0
 800f922:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f924:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f926:	782a      	ldrb	r2, [r5, #0]
 800f928:	2a30      	cmp	r2, #48	@ 0x30
 800f92a:	f040 80b3 	bne.w	800fa94 <_strtod_l+0x1a4>
 800f92e:	786a      	ldrb	r2, [r5, #1]
 800f930:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f934:	2a58      	cmp	r2, #88	@ 0x58
 800f936:	d16e      	bne.n	800fa16 <_strtod_l+0x126>
 800f938:	9302      	str	r3, [sp, #8]
 800f93a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f93c:	9301      	str	r3, [sp, #4]
 800f93e:	ab1a      	add	r3, sp, #104	@ 0x68
 800f940:	9300      	str	r3, [sp, #0]
 800f942:	4a8e      	ldr	r2, [pc, #568]	@ (800fb7c <_strtod_l+0x28c>)
 800f944:	9805      	ldr	r0, [sp, #20]
 800f946:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f948:	a919      	add	r1, sp, #100	@ 0x64
 800f94a:	f001 fadf 	bl	8010f0c <__gethex>
 800f94e:	f010 060f 	ands.w	r6, r0, #15
 800f952:	4604      	mov	r4, r0
 800f954:	d005      	beq.n	800f962 <_strtod_l+0x72>
 800f956:	2e06      	cmp	r6, #6
 800f958:	d128      	bne.n	800f9ac <_strtod_l+0xbc>
 800f95a:	3501      	adds	r5, #1
 800f95c:	2300      	movs	r3, #0
 800f95e:	9519      	str	r5, [sp, #100]	@ 0x64
 800f960:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f962:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f964:	2b00      	cmp	r3, #0
 800f966:	f040 858e 	bne.w	8010486 <_strtod_l+0xb96>
 800f96a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f96c:	b1cb      	cbz	r3, 800f9a2 <_strtod_l+0xb2>
 800f96e:	4652      	mov	r2, sl
 800f970:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f974:	ec43 2b10 	vmov	d0, r2, r3
 800f978:	b01f      	add	sp, #124	@ 0x7c
 800f97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f97e:	2920      	cmp	r1, #32
 800f980:	d1ce      	bne.n	800f920 <_strtod_l+0x30>
 800f982:	3201      	adds	r2, #1
 800f984:	e7c1      	b.n	800f90a <_strtod_l+0x1a>
 800f986:	292d      	cmp	r1, #45	@ 0x2d
 800f988:	d1ca      	bne.n	800f920 <_strtod_l+0x30>
 800f98a:	2101      	movs	r1, #1
 800f98c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f98e:	1c51      	adds	r1, r2, #1
 800f990:	9119      	str	r1, [sp, #100]	@ 0x64
 800f992:	7852      	ldrb	r2, [r2, #1]
 800f994:	2a00      	cmp	r2, #0
 800f996:	d1c5      	bne.n	800f924 <_strtod_l+0x34>
 800f998:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f99a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	f040 8570 	bne.w	8010482 <_strtod_l+0xb92>
 800f9a2:	4652      	mov	r2, sl
 800f9a4:	465b      	mov	r3, fp
 800f9a6:	e7e5      	b.n	800f974 <_strtod_l+0x84>
 800f9a8:	2100      	movs	r1, #0
 800f9aa:	e7ef      	b.n	800f98c <_strtod_l+0x9c>
 800f9ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f9ae:	b13a      	cbz	r2, 800f9c0 <_strtod_l+0xd0>
 800f9b0:	2135      	movs	r1, #53	@ 0x35
 800f9b2:	a81c      	add	r0, sp, #112	@ 0x70
 800f9b4:	f7ff ff3a 	bl	800f82c <__copybits>
 800f9b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f9ba:	9805      	ldr	r0, [sp, #20]
 800f9bc:	f7ff fb08 	bl	800efd0 <_Bfree>
 800f9c0:	3e01      	subs	r6, #1
 800f9c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f9c4:	2e04      	cmp	r6, #4
 800f9c6:	d806      	bhi.n	800f9d6 <_strtod_l+0xe6>
 800f9c8:	e8df f006 	tbb	[pc, r6]
 800f9cc:	201d0314 	.word	0x201d0314
 800f9d0:	14          	.byte	0x14
 800f9d1:	00          	.byte	0x00
 800f9d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f9d6:	05e1      	lsls	r1, r4, #23
 800f9d8:	bf48      	it	mi
 800f9da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f9de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f9e2:	0d1b      	lsrs	r3, r3, #20
 800f9e4:	051b      	lsls	r3, r3, #20
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d1bb      	bne.n	800f962 <_strtod_l+0x72>
 800f9ea:	f7fe fb23 	bl	800e034 <__errno>
 800f9ee:	2322      	movs	r3, #34	@ 0x22
 800f9f0:	6003      	str	r3, [r0, #0]
 800f9f2:	e7b6      	b.n	800f962 <_strtod_l+0x72>
 800f9f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f9f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f9fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fa00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fa04:	e7e7      	b.n	800f9d6 <_strtod_l+0xe6>
 800fa06:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800fb84 <_strtod_l+0x294>
 800fa0a:	e7e4      	b.n	800f9d6 <_strtod_l+0xe6>
 800fa0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800fa10:	f04f 3aff 	mov.w	sl, #4294967295
 800fa14:	e7df      	b.n	800f9d6 <_strtod_l+0xe6>
 800fa16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fa18:	1c5a      	adds	r2, r3, #1
 800fa1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800fa1c:	785b      	ldrb	r3, [r3, #1]
 800fa1e:	2b30      	cmp	r3, #48	@ 0x30
 800fa20:	d0f9      	beq.n	800fa16 <_strtod_l+0x126>
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d09d      	beq.n	800f962 <_strtod_l+0x72>
 800fa26:	2301      	movs	r3, #1
 800fa28:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fa2c:	930c      	str	r3, [sp, #48]	@ 0x30
 800fa2e:	2300      	movs	r3, #0
 800fa30:	9308      	str	r3, [sp, #32]
 800fa32:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa34:	461f      	mov	r7, r3
 800fa36:	220a      	movs	r2, #10
 800fa38:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800fa3a:	7805      	ldrb	r5, [r0, #0]
 800fa3c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800fa40:	b2d9      	uxtb	r1, r3
 800fa42:	2909      	cmp	r1, #9
 800fa44:	d928      	bls.n	800fa98 <_strtod_l+0x1a8>
 800fa46:	494e      	ldr	r1, [pc, #312]	@ (800fb80 <_strtod_l+0x290>)
 800fa48:	2201      	movs	r2, #1
 800fa4a:	f001 f979 	bl	8010d40 <strncmp>
 800fa4e:	2800      	cmp	r0, #0
 800fa50:	d032      	beq.n	800fab8 <_strtod_l+0x1c8>
 800fa52:	2000      	movs	r0, #0
 800fa54:	462a      	mov	r2, r5
 800fa56:	4681      	mov	r9, r0
 800fa58:	463d      	mov	r5, r7
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	2a65      	cmp	r2, #101	@ 0x65
 800fa5e:	d001      	beq.n	800fa64 <_strtod_l+0x174>
 800fa60:	2a45      	cmp	r2, #69	@ 0x45
 800fa62:	d114      	bne.n	800fa8e <_strtod_l+0x19e>
 800fa64:	b91d      	cbnz	r5, 800fa6e <_strtod_l+0x17e>
 800fa66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa68:	4302      	orrs	r2, r0
 800fa6a:	d095      	beq.n	800f998 <_strtod_l+0xa8>
 800fa6c:	2500      	movs	r5, #0
 800fa6e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800fa70:	1c62      	adds	r2, r4, #1
 800fa72:	9219      	str	r2, [sp, #100]	@ 0x64
 800fa74:	7862      	ldrb	r2, [r4, #1]
 800fa76:	2a2b      	cmp	r2, #43	@ 0x2b
 800fa78:	d077      	beq.n	800fb6a <_strtod_l+0x27a>
 800fa7a:	2a2d      	cmp	r2, #45	@ 0x2d
 800fa7c:	d07b      	beq.n	800fb76 <_strtod_l+0x286>
 800fa7e:	f04f 0c00 	mov.w	ip, #0
 800fa82:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800fa86:	2909      	cmp	r1, #9
 800fa88:	f240 8082 	bls.w	800fb90 <_strtod_l+0x2a0>
 800fa8c:	9419      	str	r4, [sp, #100]	@ 0x64
 800fa8e:	f04f 0800 	mov.w	r8, #0
 800fa92:	e0a2      	b.n	800fbda <_strtod_l+0x2ea>
 800fa94:	2300      	movs	r3, #0
 800fa96:	e7c7      	b.n	800fa28 <_strtod_l+0x138>
 800fa98:	2f08      	cmp	r7, #8
 800fa9a:	bfd5      	itete	le
 800fa9c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800fa9e:	9908      	ldrgt	r1, [sp, #32]
 800faa0:	fb02 3301 	mlale	r3, r2, r1, r3
 800faa4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800faa8:	f100 0001 	add.w	r0, r0, #1
 800faac:	bfd4      	ite	le
 800faae:	930a      	strle	r3, [sp, #40]	@ 0x28
 800fab0:	9308      	strgt	r3, [sp, #32]
 800fab2:	3701      	adds	r7, #1
 800fab4:	9019      	str	r0, [sp, #100]	@ 0x64
 800fab6:	e7bf      	b.n	800fa38 <_strtod_l+0x148>
 800fab8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800faba:	1c5a      	adds	r2, r3, #1
 800fabc:	9219      	str	r2, [sp, #100]	@ 0x64
 800fabe:	785a      	ldrb	r2, [r3, #1]
 800fac0:	b37f      	cbz	r7, 800fb22 <_strtod_l+0x232>
 800fac2:	4681      	mov	r9, r0
 800fac4:	463d      	mov	r5, r7
 800fac6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800faca:	2b09      	cmp	r3, #9
 800facc:	d912      	bls.n	800faf4 <_strtod_l+0x204>
 800face:	2301      	movs	r3, #1
 800fad0:	e7c4      	b.n	800fa5c <_strtod_l+0x16c>
 800fad2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fad4:	1c5a      	adds	r2, r3, #1
 800fad6:	9219      	str	r2, [sp, #100]	@ 0x64
 800fad8:	785a      	ldrb	r2, [r3, #1]
 800fada:	3001      	adds	r0, #1
 800fadc:	2a30      	cmp	r2, #48	@ 0x30
 800fade:	d0f8      	beq.n	800fad2 <_strtod_l+0x1e2>
 800fae0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800fae4:	2b08      	cmp	r3, #8
 800fae6:	f200 84d3 	bhi.w	8010490 <_strtod_l+0xba0>
 800faea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800faec:	930c      	str	r3, [sp, #48]	@ 0x30
 800faee:	4681      	mov	r9, r0
 800faf0:	2000      	movs	r0, #0
 800faf2:	4605      	mov	r5, r0
 800faf4:	3a30      	subs	r2, #48	@ 0x30
 800faf6:	f100 0301 	add.w	r3, r0, #1
 800fafa:	d02a      	beq.n	800fb52 <_strtod_l+0x262>
 800fafc:	4499      	add	r9, r3
 800fafe:	eb00 0c05 	add.w	ip, r0, r5
 800fb02:	462b      	mov	r3, r5
 800fb04:	210a      	movs	r1, #10
 800fb06:	4563      	cmp	r3, ip
 800fb08:	d10d      	bne.n	800fb26 <_strtod_l+0x236>
 800fb0a:	1c69      	adds	r1, r5, #1
 800fb0c:	4401      	add	r1, r0
 800fb0e:	4428      	add	r0, r5
 800fb10:	2808      	cmp	r0, #8
 800fb12:	dc16      	bgt.n	800fb42 <_strtod_l+0x252>
 800fb14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fb16:	230a      	movs	r3, #10
 800fb18:	fb03 2300 	mla	r3, r3, r0, r2
 800fb1c:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb1e:	2300      	movs	r3, #0
 800fb20:	e018      	b.n	800fb54 <_strtod_l+0x264>
 800fb22:	4638      	mov	r0, r7
 800fb24:	e7da      	b.n	800fadc <_strtod_l+0x1ec>
 800fb26:	2b08      	cmp	r3, #8
 800fb28:	f103 0301 	add.w	r3, r3, #1
 800fb2c:	dc03      	bgt.n	800fb36 <_strtod_l+0x246>
 800fb2e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800fb30:	434e      	muls	r6, r1
 800fb32:	960a      	str	r6, [sp, #40]	@ 0x28
 800fb34:	e7e7      	b.n	800fb06 <_strtod_l+0x216>
 800fb36:	2b10      	cmp	r3, #16
 800fb38:	bfde      	ittt	le
 800fb3a:	9e08      	ldrle	r6, [sp, #32]
 800fb3c:	434e      	mulle	r6, r1
 800fb3e:	9608      	strle	r6, [sp, #32]
 800fb40:	e7e1      	b.n	800fb06 <_strtod_l+0x216>
 800fb42:	280f      	cmp	r0, #15
 800fb44:	dceb      	bgt.n	800fb1e <_strtod_l+0x22e>
 800fb46:	9808      	ldr	r0, [sp, #32]
 800fb48:	230a      	movs	r3, #10
 800fb4a:	fb03 2300 	mla	r3, r3, r0, r2
 800fb4e:	9308      	str	r3, [sp, #32]
 800fb50:	e7e5      	b.n	800fb1e <_strtod_l+0x22e>
 800fb52:	4629      	mov	r1, r5
 800fb54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fb56:	1c50      	adds	r0, r2, #1
 800fb58:	9019      	str	r0, [sp, #100]	@ 0x64
 800fb5a:	7852      	ldrb	r2, [r2, #1]
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	460d      	mov	r5, r1
 800fb60:	e7b1      	b.n	800fac6 <_strtod_l+0x1d6>
 800fb62:	f04f 0900 	mov.w	r9, #0
 800fb66:	2301      	movs	r3, #1
 800fb68:	e77d      	b.n	800fa66 <_strtod_l+0x176>
 800fb6a:	f04f 0c00 	mov.w	ip, #0
 800fb6e:	1ca2      	adds	r2, r4, #2
 800fb70:	9219      	str	r2, [sp, #100]	@ 0x64
 800fb72:	78a2      	ldrb	r2, [r4, #2]
 800fb74:	e785      	b.n	800fa82 <_strtod_l+0x192>
 800fb76:	f04f 0c01 	mov.w	ip, #1
 800fb7a:	e7f8      	b.n	800fb6e <_strtod_l+0x27e>
 800fb7c:	08011bf8 	.word	0x08011bf8
 800fb80:	08011be0 	.word	0x08011be0
 800fb84:	7ff00000 	.word	0x7ff00000
 800fb88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fb8a:	1c51      	adds	r1, r2, #1
 800fb8c:	9119      	str	r1, [sp, #100]	@ 0x64
 800fb8e:	7852      	ldrb	r2, [r2, #1]
 800fb90:	2a30      	cmp	r2, #48	@ 0x30
 800fb92:	d0f9      	beq.n	800fb88 <_strtod_l+0x298>
 800fb94:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800fb98:	2908      	cmp	r1, #8
 800fb9a:	f63f af78 	bhi.w	800fa8e <_strtod_l+0x19e>
 800fb9e:	3a30      	subs	r2, #48	@ 0x30
 800fba0:	920e      	str	r2, [sp, #56]	@ 0x38
 800fba2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fba4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800fba6:	f04f 080a 	mov.w	r8, #10
 800fbaa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fbac:	1c56      	adds	r6, r2, #1
 800fbae:	9619      	str	r6, [sp, #100]	@ 0x64
 800fbb0:	7852      	ldrb	r2, [r2, #1]
 800fbb2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800fbb6:	f1be 0f09 	cmp.w	lr, #9
 800fbba:	d939      	bls.n	800fc30 <_strtod_l+0x340>
 800fbbc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fbbe:	1a76      	subs	r6, r6, r1
 800fbc0:	2e08      	cmp	r6, #8
 800fbc2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800fbc6:	dc03      	bgt.n	800fbd0 <_strtod_l+0x2e0>
 800fbc8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fbca:	4588      	cmp	r8, r1
 800fbcc:	bfa8      	it	ge
 800fbce:	4688      	movge	r8, r1
 800fbd0:	f1bc 0f00 	cmp.w	ip, #0
 800fbd4:	d001      	beq.n	800fbda <_strtod_l+0x2ea>
 800fbd6:	f1c8 0800 	rsb	r8, r8, #0
 800fbda:	2d00      	cmp	r5, #0
 800fbdc:	d14e      	bne.n	800fc7c <_strtod_l+0x38c>
 800fbde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fbe0:	4308      	orrs	r0, r1
 800fbe2:	f47f aebe 	bne.w	800f962 <_strtod_l+0x72>
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	f47f aed6 	bne.w	800f998 <_strtod_l+0xa8>
 800fbec:	2a69      	cmp	r2, #105	@ 0x69
 800fbee:	d028      	beq.n	800fc42 <_strtod_l+0x352>
 800fbf0:	dc25      	bgt.n	800fc3e <_strtod_l+0x34e>
 800fbf2:	2a49      	cmp	r2, #73	@ 0x49
 800fbf4:	d025      	beq.n	800fc42 <_strtod_l+0x352>
 800fbf6:	2a4e      	cmp	r2, #78	@ 0x4e
 800fbf8:	f47f aece 	bne.w	800f998 <_strtod_l+0xa8>
 800fbfc:	499b      	ldr	r1, [pc, #620]	@ (800fe6c <_strtod_l+0x57c>)
 800fbfe:	a819      	add	r0, sp, #100	@ 0x64
 800fc00:	f001 fba6 	bl	8011350 <__match>
 800fc04:	2800      	cmp	r0, #0
 800fc06:	f43f aec7 	beq.w	800f998 <_strtod_l+0xa8>
 800fc0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	2b28      	cmp	r3, #40	@ 0x28
 800fc10:	d12e      	bne.n	800fc70 <_strtod_l+0x380>
 800fc12:	4997      	ldr	r1, [pc, #604]	@ (800fe70 <_strtod_l+0x580>)
 800fc14:	aa1c      	add	r2, sp, #112	@ 0x70
 800fc16:	a819      	add	r0, sp, #100	@ 0x64
 800fc18:	f001 fbae 	bl	8011378 <__hexnan>
 800fc1c:	2805      	cmp	r0, #5
 800fc1e:	d127      	bne.n	800fc70 <_strtod_l+0x380>
 800fc20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fc22:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800fc26:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800fc2a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800fc2e:	e698      	b.n	800f962 <_strtod_l+0x72>
 800fc30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fc32:	fb08 2101 	mla	r1, r8, r1, r2
 800fc36:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800fc3a:	920e      	str	r2, [sp, #56]	@ 0x38
 800fc3c:	e7b5      	b.n	800fbaa <_strtod_l+0x2ba>
 800fc3e:	2a6e      	cmp	r2, #110	@ 0x6e
 800fc40:	e7da      	b.n	800fbf8 <_strtod_l+0x308>
 800fc42:	498c      	ldr	r1, [pc, #560]	@ (800fe74 <_strtod_l+0x584>)
 800fc44:	a819      	add	r0, sp, #100	@ 0x64
 800fc46:	f001 fb83 	bl	8011350 <__match>
 800fc4a:	2800      	cmp	r0, #0
 800fc4c:	f43f aea4 	beq.w	800f998 <_strtod_l+0xa8>
 800fc50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fc52:	4989      	ldr	r1, [pc, #548]	@ (800fe78 <_strtod_l+0x588>)
 800fc54:	3b01      	subs	r3, #1
 800fc56:	a819      	add	r0, sp, #100	@ 0x64
 800fc58:	9319      	str	r3, [sp, #100]	@ 0x64
 800fc5a:	f001 fb79 	bl	8011350 <__match>
 800fc5e:	b910      	cbnz	r0, 800fc66 <_strtod_l+0x376>
 800fc60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fc62:	3301      	adds	r3, #1
 800fc64:	9319      	str	r3, [sp, #100]	@ 0x64
 800fc66:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800fe88 <_strtod_l+0x598>
 800fc6a:	f04f 0a00 	mov.w	sl, #0
 800fc6e:	e678      	b.n	800f962 <_strtod_l+0x72>
 800fc70:	4882      	ldr	r0, [pc, #520]	@ (800fe7c <_strtod_l+0x58c>)
 800fc72:	f001 f8a9 	bl	8010dc8 <nan>
 800fc76:	ec5b ab10 	vmov	sl, fp, d0
 800fc7a:	e672      	b.n	800f962 <_strtod_l+0x72>
 800fc7c:	eba8 0309 	sub.w	r3, r8, r9
 800fc80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fc82:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc84:	2f00      	cmp	r7, #0
 800fc86:	bf08      	it	eq
 800fc88:	462f      	moveq	r7, r5
 800fc8a:	2d10      	cmp	r5, #16
 800fc8c:	462c      	mov	r4, r5
 800fc8e:	bfa8      	it	ge
 800fc90:	2410      	movge	r4, #16
 800fc92:	f7f0 fc37 	bl	8000504 <__aeabi_ui2d>
 800fc96:	2d09      	cmp	r5, #9
 800fc98:	4682      	mov	sl, r0
 800fc9a:	468b      	mov	fp, r1
 800fc9c:	dc13      	bgt.n	800fcc6 <_strtod_l+0x3d6>
 800fc9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	f43f ae5e 	beq.w	800f962 <_strtod_l+0x72>
 800fca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fca8:	dd78      	ble.n	800fd9c <_strtod_l+0x4ac>
 800fcaa:	2b16      	cmp	r3, #22
 800fcac:	dc5f      	bgt.n	800fd6e <_strtod_l+0x47e>
 800fcae:	4974      	ldr	r1, [pc, #464]	@ (800fe80 <_strtod_l+0x590>)
 800fcb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fcb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcb8:	4652      	mov	r2, sl
 800fcba:	465b      	mov	r3, fp
 800fcbc:	f7f0 fc9c 	bl	80005f8 <__aeabi_dmul>
 800fcc0:	4682      	mov	sl, r0
 800fcc2:	468b      	mov	fp, r1
 800fcc4:	e64d      	b.n	800f962 <_strtod_l+0x72>
 800fcc6:	4b6e      	ldr	r3, [pc, #440]	@ (800fe80 <_strtod_l+0x590>)
 800fcc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fccc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800fcd0:	f7f0 fc92 	bl	80005f8 <__aeabi_dmul>
 800fcd4:	4682      	mov	sl, r0
 800fcd6:	9808      	ldr	r0, [sp, #32]
 800fcd8:	468b      	mov	fp, r1
 800fcda:	f7f0 fc13 	bl	8000504 <__aeabi_ui2d>
 800fcde:	4602      	mov	r2, r0
 800fce0:	460b      	mov	r3, r1
 800fce2:	4650      	mov	r0, sl
 800fce4:	4659      	mov	r1, fp
 800fce6:	f7f0 fad1 	bl	800028c <__adddf3>
 800fcea:	2d0f      	cmp	r5, #15
 800fcec:	4682      	mov	sl, r0
 800fcee:	468b      	mov	fp, r1
 800fcf0:	ddd5      	ble.n	800fc9e <_strtod_l+0x3ae>
 800fcf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcf4:	1b2c      	subs	r4, r5, r4
 800fcf6:	441c      	add	r4, r3
 800fcf8:	2c00      	cmp	r4, #0
 800fcfa:	f340 8096 	ble.w	800fe2a <_strtod_l+0x53a>
 800fcfe:	f014 030f 	ands.w	r3, r4, #15
 800fd02:	d00a      	beq.n	800fd1a <_strtod_l+0x42a>
 800fd04:	495e      	ldr	r1, [pc, #376]	@ (800fe80 <_strtod_l+0x590>)
 800fd06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fd0a:	4652      	mov	r2, sl
 800fd0c:	465b      	mov	r3, fp
 800fd0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd12:	f7f0 fc71 	bl	80005f8 <__aeabi_dmul>
 800fd16:	4682      	mov	sl, r0
 800fd18:	468b      	mov	fp, r1
 800fd1a:	f034 040f 	bics.w	r4, r4, #15
 800fd1e:	d073      	beq.n	800fe08 <_strtod_l+0x518>
 800fd20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800fd24:	dd48      	ble.n	800fdb8 <_strtod_l+0x4c8>
 800fd26:	2400      	movs	r4, #0
 800fd28:	46a0      	mov	r8, r4
 800fd2a:	940a      	str	r4, [sp, #40]	@ 0x28
 800fd2c:	46a1      	mov	r9, r4
 800fd2e:	9a05      	ldr	r2, [sp, #20]
 800fd30:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800fe88 <_strtod_l+0x598>
 800fd34:	2322      	movs	r3, #34	@ 0x22
 800fd36:	6013      	str	r3, [r2, #0]
 800fd38:	f04f 0a00 	mov.w	sl, #0
 800fd3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	f43f ae0f 	beq.w	800f962 <_strtod_l+0x72>
 800fd44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd46:	9805      	ldr	r0, [sp, #20]
 800fd48:	f7ff f942 	bl	800efd0 <_Bfree>
 800fd4c:	9805      	ldr	r0, [sp, #20]
 800fd4e:	4649      	mov	r1, r9
 800fd50:	f7ff f93e 	bl	800efd0 <_Bfree>
 800fd54:	9805      	ldr	r0, [sp, #20]
 800fd56:	4641      	mov	r1, r8
 800fd58:	f7ff f93a 	bl	800efd0 <_Bfree>
 800fd5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fd5e:	9805      	ldr	r0, [sp, #20]
 800fd60:	f7ff f936 	bl	800efd0 <_Bfree>
 800fd64:	9805      	ldr	r0, [sp, #20]
 800fd66:	4621      	mov	r1, r4
 800fd68:	f7ff f932 	bl	800efd0 <_Bfree>
 800fd6c:	e5f9      	b.n	800f962 <_strtod_l+0x72>
 800fd6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800fd74:	4293      	cmp	r3, r2
 800fd76:	dbbc      	blt.n	800fcf2 <_strtod_l+0x402>
 800fd78:	4c41      	ldr	r4, [pc, #260]	@ (800fe80 <_strtod_l+0x590>)
 800fd7a:	f1c5 050f 	rsb	r5, r5, #15
 800fd7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fd82:	4652      	mov	r2, sl
 800fd84:	465b      	mov	r3, fp
 800fd86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd8a:	f7f0 fc35 	bl	80005f8 <__aeabi_dmul>
 800fd8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd90:	1b5d      	subs	r5, r3, r5
 800fd92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fd96:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fd9a:	e78f      	b.n	800fcbc <_strtod_l+0x3cc>
 800fd9c:	3316      	adds	r3, #22
 800fd9e:	dba8      	blt.n	800fcf2 <_strtod_l+0x402>
 800fda0:	4b37      	ldr	r3, [pc, #220]	@ (800fe80 <_strtod_l+0x590>)
 800fda2:	eba9 0808 	sub.w	r8, r9, r8
 800fda6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800fdaa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fdae:	4650      	mov	r0, sl
 800fdb0:	4659      	mov	r1, fp
 800fdb2:	f7f0 fd4b 	bl	800084c <__aeabi_ddiv>
 800fdb6:	e783      	b.n	800fcc0 <_strtod_l+0x3d0>
 800fdb8:	4b32      	ldr	r3, [pc, #200]	@ (800fe84 <_strtod_l+0x594>)
 800fdba:	9308      	str	r3, [sp, #32]
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	1124      	asrs	r4, r4, #4
 800fdc0:	4650      	mov	r0, sl
 800fdc2:	4659      	mov	r1, fp
 800fdc4:	461e      	mov	r6, r3
 800fdc6:	2c01      	cmp	r4, #1
 800fdc8:	dc21      	bgt.n	800fe0e <_strtod_l+0x51e>
 800fdca:	b10b      	cbz	r3, 800fdd0 <_strtod_l+0x4e0>
 800fdcc:	4682      	mov	sl, r0
 800fdce:	468b      	mov	fp, r1
 800fdd0:	492c      	ldr	r1, [pc, #176]	@ (800fe84 <_strtod_l+0x594>)
 800fdd2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800fdd6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800fdda:	4652      	mov	r2, sl
 800fddc:	465b      	mov	r3, fp
 800fdde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fde2:	f7f0 fc09 	bl	80005f8 <__aeabi_dmul>
 800fde6:	4b28      	ldr	r3, [pc, #160]	@ (800fe88 <_strtod_l+0x598>)
 800fde8:	460a      	mov	r2, r1
 800fdea:	400b      	ands	r3, r1
 800fdec:	4927      	ldr	r1, [pc, #156]	@ (800fe8c <_strtod_l+0x59c>)
 800fdee:	428b      	cmp	r3, r1
 800fdf0:	4682      	mov	sl, r0
 800fdf2:	d898      	bhi.n	800fd26 <_strtod_l+0x436>
 800fdf4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800fdf8:	428b      	cmp	r3, r1
 800fdfa:	bf86      	itte	hi
 800fdfc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800fe90 <_strtod_l+0x5a0>
 800fe00:	f04f 3aff 	movhi.w	sl, #4294967295
 800fe04:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800fe08:	2300      	movs	r3, #0
 800fe0a:	9308      	str	r3, [sp, #32]
 800fe0c:	e07a      	b.n	800ff04 <_strtod_l+0x614>
 800fe0e:	07e2      	lsls	r2, r4, #31
 800fe10:	d505      	bpl.n	800fe1e <_strtod_l+0x52e>
 800fe12:	9b08      	ldr	r3, [sp, #32]
 800fe14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe18:	f7f0 fbee 	bl	80005f8 <__aeabi_dmul>
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	9a08      	ldr	r2, [sp, #32]
 800fe20:	3208      	adds	r2, #8
 800fe22:	3601      	adds	r6, #1
 800fe24:	1064      	asrs	r4, r4, #1
 800fe26:	9208      	str	r2, [sp, #32]
 800fe28:	e7cd      	b.n	800fdc6 <_strtod_l+0x4d6>
 800fe2a:	d0ed      	beq.n	800fe08 <_strtod_l+0x518>
 800fe2c:	4264      	negs	r4, r4
 800fe2e:	f014 020f 	ands.w	r2, r4, #15
 800fe32:	d00a      	beq.n	800fe4a <_strtod_l+0x55a>
 800fe34:	4b12      	ldr	r3, [pc, #72]	@ (800fe80 <_strtod_l+0x590>)
 800fe36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe3a:	4650      	mov	r0, sl
 800fe3c:	4659      	mov	r1, fp
 800fe3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe42:	f7f0 fd03 	bl	800084c <__aeabi_ddiv>
 800fe46:	4682      	mov	sl, r0
 800fe48:	468b      	mov	fp, r1
 800fe4a:	1124      	asrs	r4, r4, #4
 800fe4c:	d0dc      	beq.n	800fe08 <_strtod_l+0x518>
 800fe4e:	2c1f      	cmp	r4, #31
 800fe50:	dd20      	ble.n	800fe94 <_strtod_l+0x5a4>
 800fe52:	2400      	movs	r4, #0
 800fe54:	46a0      	mov	r8, r4
 800fe56:	940a      	str	r4, [sp, #40]	@ 0x28
 800fe58:	46a1      	mov	r9, r4
 800fe5a:	9a05      	ldr	r2, [sp, #20]
 800fe5c:	2322      	movs	r3, #34	@ 0x22
 800fe5e:	f04f 0a00 	mov.w	sl, #0
 800fe62:	f04f 0b00 	mov.w	fp, #0
 800fe66:	6013      	str	r3, [r2, #0]
 800fe68:	e768      	b.n	800fd3c <_strtod_l+0x44c>
 800fe6a:	bf00      	nop
 800fe6c:	080119cd 	.word	0x080119cd
 800fe70:	08011be4 	.word	0x08011be4
 800fe74:	080119c5 	.word	0x080119c5
 800fe78:	080119fc 	.word	0x080119fc
 800fe7c:	08011d8d 	.word	0x08011d8d
 800fe80:	08011b18 	.word	0x08011b18
 800fe84:	08011af0 	.word	0x08011af0
 800fe88:	7ff00000 	.word	0x7ff00000
 800fe8c:	7ca00000 	.word	0x7ca00000
 800fe90:	7fefffff 	.word	0x7fefffff
 800fe94:	f014 0310 	ands.w	r3, r4, #16
 800fe98:	bf18      	it	ne
 800fe9a:	236a      	movne	r3, #106	@ 0x6a
 800fe9c:	4ea9      	ldr	r6, [pc, #676]	@ (8010144 <_strtod_l+0x854>)
 800fe9e:	9308      	str	r3, [sp, #32]
 800fea0:	4650      	mov	r0, sl
 800fea2:	4659      	mov	r1, fp
 800fea4:	2300      	movs	r3, #0
 800fea6:	07e2      	lsls	r2, r4, #31
 800fea8:	d504      	bpl.n	800feb4 <_strtod_l+0x5c4>
 800feaa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800feae:	f7f0 fba3 	bl	80005f8 <__aeabi_dmul>
 800feb2:	2301      	movs	r3, #1
 800feb4:	1064      	asrs	r4, r4, #1
 800feb6:	f106 0608 	add.w	r6, r6, #8
 800feba:	d1f4      	bne.n	800fea6 <_strtod_l+0x5b6>
 800febc:	b10b      	cbz	r3, 800fec2 <_strtod_l+0x5d2>
 800febe:	4682      	mov	sl, r0
 800fec0:	468b      	mov	fp, r1
 800fec2:	9b08      	ldr	r3, [sp, #32]
 800fec4:	b1b3      	cbz	r3, 800fef4 <_strtod_l+0x604>
 800fec6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800feca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800fece:	2b00      	cmp	r3, #0
 800fed0:	4659      	mov	r1, fp
 800fed2:	dd0f      	ble.n	800fef4 <_strtod_l+0x604>
 800fed4:	2b1f      	cmp	r3, #31
 800fed6:	dd55      	ble.n	800ff84 <_strtod_l+0x694>
 800fed8:	2b34      	cmp	r3, #52	@ 0x34
 800feda:	bfde      	ittt	le
 800fedc:	f04f 33ff 	movle.w	r3, #4294967295
 800fee0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800fee4:	4093      	lslle	r3, r2
 800fee6:	f04f 0a00 	mov.w	sl, #0
 800feea:	bfcc      	ite	gt
 800feec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800fef0:	ea03 0b01 	andle.w	fp, r3, r1
 800fef4:	2200      	movs	r2, #0
 800fef6:	2300      	movs	r3, #0
 800fef8:	4650      	mov	r0, sl
 800fefa:	4659      	mov	r1, fp
 800fefc:	f7f0 fde4 	bl	8000ac8 <__aeabi_dcmpeq>
 800ff00:	2800      	cmp	r0, #0
 800ff02:	d1a6      	bne.n	800fe52 <_strtod_l+0x562>
 800ff04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff06:	9300      	str	r3, [sp, #0]
 800ff08:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ff0a:	9805      	ldr	r0, [sp, #20]
 800ff0c:	462b      	mov	r3, r5
 800ff0e:	463a      	mov	r2, r7
 800ff10:	f7ff f8c6 	bl	800f0a0 <__s2b>
 800ff14:	900a      	str	r0, [sp, #40]	@ 0x28
 800ff16:	2800      	cmp	r0, #0
 800ff18:	f43f af05 	beq.w	800fd26 <_strtod_l+0x436>
 800ff1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff1e:	2a00      	cmp	r2, #0
 800ff20:	eba9 0308 	sub.w	r3, r9, r8
 800ff24:	bfa8      	it	ge
 800ff26:	2300      	movge	r3, #0
 800ff28:	9312      	str	r3, [sp, #72]	@ 0x48
 800ff2a:	2400      	movs	r4, #0
 800ff2c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ff30:	9316      	str	r3, [sp, #88]	@ 0x58
 800ff32:	46a0      	mov	r8, r4
 800ff34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff36:	9805      	ldr	r0, [sp, #20]
 800ff38:	6859      	ldr	r1, [r3, #4]
 800ff3a:	f7ff f809 	bl	800ef50 <_Balloc>
 800ff3e:	4681      	mov	r9, r0
 800ff40:	2800      	cmp	r0, #0
 800ff42:	f43f aef4 	beq.w	800fd2e <_strtod_l+0x43e>
 800ff46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff48:	691a      	ldr	r2, [r3, #16]
 800ff4a:	3202      	adds	r2, #2
 800ff4c:	f103 010c 	add.w	r1, r3, #12
 800ff50:	0092      	lsls	r2, r2, #2
 800ff52:	300c      	adds	r0, #12
 800ff54:	f7fe f89b 	bl	800e08e <memcpy>
 800ff58:	ec4b ab10 	vmov	d0, sl, fp
 800ff5c:	9805      	ldr	r0, [sp, #20]
 800ff5e:	aa1c      	add	r2, sp, #112	@ 0x70
 800ff60:	a91b      	add	r1, sp, #108	@ 0x6c
 800ff62:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ff66:	f7ff fbd7 	bl	800f718 <__d2b>
 800ff6a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ff6c:	2800      	cmp	r0, #0
 800ff6e:	f43f aede 	beq.w	800fd2e <_strtod_l+0x43e>
 800ff72:	9805      	ldr	r0, [sp, #20]
 800ff74:	2101      	movs	r1, #1
 800ff76:	f7ff f929 	bl	800f1cc <__i2b>
 800ff7a:	4680      	mov	r8, r0
 800ff7c:	b948      	cbnz	r0, 800ff92 <_strtod_l+0x6a2>
 800ff7e:	f04f 0800 	mov.w	r8, #0
 800ff82:	e6d4      	b.n	800fd2e <_strtod_l+0x43e>
 800ff84:	f04f 32ff 	mov.w	r2, #4294967295
 800ff88:	fa02 f303 	lsl.w	r3, r2, r3
 800ff8c:	ea03 0a0a 	and.w	sl, r3, sl
 800ff90:	e7b0      	b.n	800fef4 <_strtod_l+0x604>
 800ff92:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ff94:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ff96:	2d00      	cmp	r5, #0
 800ff98:	bfab      	itete	ge
 800ff9a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ff9c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ff9e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ffa0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ffa2:	bfac      	ite	ge
 800ffa4:	18ef      	addge	r7, r5, r3
 800ffa6:	1b5e      	sublt	r6, r3, r5
 800ffa8:	9b08      	ldr	r3, [sp, #32]
 800ffaa:	1aed      	subs	r5, r5, r3
 800ffac:	4415      	add	r5, r2
 800ffae:	4b66      	ldr	r3, [pc, #408]	@ (8010148 <_strtod_l+0x858>)
 800ffb0:	3d01      	subs	r5, #1
 800ffb2:	429d      	cmp	r5, r3
 800ffb4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ffb8:	da50      	bge.n	801005c <_strtod_l+0x76c>
 800ffba:	1b5b      	subs	r3, r3, r5
 800ffbc:	2b1f      	cmp	r3, #31
 800ffbe:	eba2 0203 	sub.w	r2, r2, r3
 800ffc2:	f04f 0101 	mov.w	r1, #1
 800ffc6:	dc3d      	bgt.n	8010044 <_strtod_l+0x754>
 800ffc8:	fa01 f303 	lsl.w	r3, r1, r3
 800ffcc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ffce:	2300      	movs	r3, #0
 800ffd0:	9310      	str	r3, [sp, #64]	@ 0x40
 800ffd2:	18bd      	adds	r5, r7, r2
 800ffd4:	9b08      	ldr	r3, [sp, #32]
 800ffd6:	42af      	cmp	r7, r5
 800ffd8:	4416      	add	r6, r2
 800ffda:	441e      	add	r6, r3
 800ffdc:	463b      	mov	r3, r7
 800ffde:	bfa8      	it	ge
 800ffe0:	462b      	movge	r3, r5
 800ffe2:	42b3      	cmp	r3, r6
 800ffe4:	bfa8      	it	ge
 800ffe6:	4633      	movge	r3, r6
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	bfc2      	ittt	gt
 800ffec:	1aed      	subgt	r5, r5, r3
 800ffee:	1af6      	subgt	r6, r6, r3
 800fff0:	1aff      	subgt	r7, r7, r3
 800fff2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	dd16      	ble.n	8010026 <_strtod_l+0x736>
 800fff8:	4641      	mov	r1, r8
 800fffa:	9805      	ldr	r0, [sp, #20]
 800fffc:	461a      	mov	r2, r3
 800fffe:	f7ff f9a5 	bl	800f34c <__pow5mult>
 8010002:	4680      	mov	r8, r0
 8010004:	2800      	cmp	r0, #0
 8010006:	d0ba      	beq.n	800ff7e <_strtod_l+0x68e>
 8010008:	4601      	mov	r1, r0
 801000a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801000c:	9805      	ldr	r0, [sp, #20]
 801000e:	f7ff f8f3 	bl	800f1f8 <__multiply>
 8010012:	900e      	str	r0, [sp, #56]	@ 0x38
 8010014:	2800      	cmp	r0, #0
 8010016:	f43f ae8a 	beq.w	800fd2e <_strtod_l+0x43e>
 801001a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801001c:	9805      	ldr	r0, [sp, #20]
 801001e:	f7fe ffd7 	bl	800efd0 <_Bfree>
 8010022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010024:	931a      	str	r3, [sp, #104]	@ 0x68
 8010026:	2d00      	cmp	r5, #0
 8010028:	dc1d      	bgt.n	8010066 <_strtod_l+0x776>
 801002a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801002c:	2b00      	cmp	r3, #0
 801002e:	dd23      	ble.n	8010078 <_strtod_l+0x788>
 8010030:	4649      	mov	r1, r9
 8010032:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010034:	9805      	ldr	r0, [sp, #20]
 8010036:	f7ff f989 	bl	800f34c <__pow5mult>
 801003a:	4681      	mov	r9, r0
 801003c:	b9e0      	cbnz	r0, 8010078 <_strtod_l+0x788>
 801003e:	f04f 0900 	mov.w	r9, #0
 8010042:	e674      	b.n	800fd2e <_strtod_l+0x43e>
 8010044:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010048:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801004c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010050:	35e2      	adds	r5, #226	@ 0xe2
 8010052:	fa01 f305 	lsl.w	r3, r1, r5
 8010056:	9310      	str	r3, [sp, #64]	@ 0x40
 8010058:	9113      	str	r1, [sp, #76]	@ 0x4c
 801005a:	e7ba      	b.n	800ffd2 <_strtod_l+0x6e2>
 801005c:	2300      	movs	r3, #0
 801005e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010060:	2301      	movs	r3, #1
 8010062:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010064:	e7b5      	b.n	800ffd2 <_strtod_l+0x6e2>
 8010066:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010068:	9805      	ldr	r0, [sp, #20]
 801006a:	462a      	mov	r2, r5
 801006c:	f7ff f9c8 	bl	800f400 <__lshift>
 8010070:	901a      	str	r0, [sp, #104]	@ 0x68
 8010072:	2800      	cmp	r0, #0
 8010074:	d1d9      	bne.n	801002a <_strtod_l+0x73a>
 8010076:	e65a      	b.n	800fd2e <_strtod_l+0x43e>
 8010078:	2e00      	cmp	r6, #0
 801007a:	dd07      	ble.n	801008c <_strtod_l+0x79c>
 801007c:	4649      	mov	r1, r9
 801007e:	9805      	ldr	r0, [sp, #20]
 8010080:	4632      	mov	r2, r6
 8010082:	f7ff f9bd 	bl	800f400 <__lshift>
 8010086:	4681      	mov	r9, r0
 8010088:	2800      	cmp	r0, #0
 801008a:	d0d8      	beq.n	801003e <_strtod_l+0x74e>
 801008c:	2f00      	cmp	r7, #0
 801008e:	dd08      	ble.n	80100a2 <_strtod_l+0x7b2>
 8010090:	4641      	mov	r1, r8
 8010092:	9805      	ldr	r0, [sp, #20]
 8010094:	463a      	mov	r2, r7
 8010096:	f7ff f9b3 	bl	800f400 <__lshift>
 801009a:	4680      	mov	r8, r0
 801009c:	2800      	cmp	r0, #0
 801009e:	f43f ae46 	beq.w	800fd2e <_strtod_l+0x43e>
 80100a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80100a4:	9805      	ldr	r0, [sp, #20]
 80100a6:	464a      	mov	r2, r9
 80100a8:	f7ff fa32 	bl	800f510 <__mdiff>
 80100ac:	4604      	mov	r4, r0
 80100ae:	2800      	cmp	r0, #0
 80100b0:	f43f ae3d 	beq.w	800fd2e <_strtod_l+0x43e>
 80100b4:	68c3      	ldr	r3, [r0, #12]
 80100b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80100b8:	2300      	movs	r3, #0
 80100ba:	60c3      	str	r3, [r0, #12]
 80100bc:	4641      	mov	r1, r8
 80100be:	f7ff fa0b 	bl	800f4d8 <__mcmp>
 80100c2:	2800      	cmp	r0, #0
 80100c4:	da46      	bge.n	8010154 <_strtod_l+0x864>
 80100c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100c8:	ea53 030a 	orrs.w	r3, r3, sl
 80100cc:	d16c      	bne.n	80101a8 <_strtod_l+0x8b8>
 80100ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d168      	bne.n	80101a8 <_strtod_l+0x8b8>
 80100d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80100da:	0d1b      	lsrs	r3, r3, #20
 80100dc:	051b      	lsls	r3, r3, #20
 80100de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80100e2:	d961      	bls.n	80101a8 <_strtod_l+0x8b8>
 80100e4:	6963      	ldr	r3, [r4, #20]
 80100e6:	b913      	cbnz	r3, 80100ee <_strtod_l+0x7fe>
 80100e8:	6923      	ldr	r3, [r4, #16]
 80100ea:	2b01      	cmp	r3, #1
 80100ec:	dd5c      	ble.n	80101a8 <_strtod_l+0x8b8>
 80100ee:	4621      	mov	r1, r4
 80100f0:	2201      	movs	r2, #1
 80100f2:	9805      	ldr	r0, [sp, #20]
 80100f4:	f7ff f984 	bl	800f400 <__lshift>
 80100f8:	4641      	mov	r1, r8
 80100fa:	4604      	mov	r4, r0
 80100fc:	f7ff f9ec 	bl	800f4d8 <__mcmp>
 8010100:	2800      	cmp	r0, #0
 8010102:	dd51      	ble.n	80101a8 <_strtod_l+0x8b8>
 8010104:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010108:	9a08      	ldr	r2, [sp, #32]
 801010a:	0d1b      	lsrs	r3, r3, #20
 801010c:	051b      	lsls	r3, r3, #20
 801010e:	2a00      	cmp	r2, #0
 8010110:	d06b      	beq.n	80101ea <_strtod_l+0x8fa>
 8010112:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010116:	d868      	bhi.n	80101ea <_strtod_l+0x8fa>
 8010118:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801011c:	f67f ae9d 	bls.w	800fe5a <_strtod_l+0x56a>
 8010120:	4b0a      	ldr	r3, [pc, #40]	@ (801014c <_strtod_l+0x85c>)
 8010122:	4650      	mov	r0, sl
 8010124:	4659      	mov	r1, fp
 8010126:	2200      	movs	r2, #0
 8010128:	f7f0 fa66 	bl	80005f8 <__aeabi_dmul>
 801012c:	4b08      	ldr	r3, [pc, #32]	@ (8010150 <_strtod_l+0x860>)
 801012e:	400b      	ands	r3, r1
 8010130:	4682      	mov	sl, r0
 8010132:	468b      	mov	fp, r1
 8010134:	2b00      	cmp	r3, #0
 8010136:	f47f ae05 	bne.w	800fd44 <_strtod_l+0x454>
 801013a:	9a05      	ldr	r2, [sp, #20]
 801013c:	2322      	movs	r3, #34	@ 0x22
 801013e:	6013      	str	r3, [r2, #0]
 8010140:	e600      	b.n	800fd44 <_strtod_l+0x454>
 8010142:	bf00      	nop
 8010144:	08011c10 	.word	0x08011c10
 8010148:	fffffc02 	.word	0xfffffc02
 801014c:	39500000 	.word	0x39500000
 8010150:	7ff00000 	.word	0x7ff00000
 8010154:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010158:	d165      	bne.n	8010226 <_strtod_l+0x936>
 801015a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801015c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010160:	b35a      	cbz	r2, 80101ba <_strtod_l+0x8ca>
 8010162:	4a9f      	ldr	r2, [pc, #636]	@ (80103e0 <_strtod_l+0xaf0>)
 8010164:	4293      	cmp	r3, r2
 8010166:	d12b      	bne.n	80101c0 <_strtod_l+0x8d0>
 8010168:	9b08      	ldr	r3, [sp, #32]
 801016a:	4651      	mov	r1, sl
 801016c:	b303      	cbz	r3, 80101b0 <_strtod_l+0x8c0>
 801016e:	4b9d      	ldr	r3, [pc, #628]	@ (80103e4 <_strtod_l+0xaf4>)
 8010170:	465a      	mov	r2, fp
 8010172:	4013      	ands	r3, r2
 8010174:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010178:	f04f 32ff 	mov.w	r2, #4294967295
 801017c:	d81b      	bhi.n	80101b6 <_strtod_l+0x8c6>
 801017e:	0d1b      	lsrs	r3, r3, #20
 8010180:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010184:	fa02 f303 	lsl.w	r3, r2, r3
 8010188:	4299      	cmp	r1, r3
 801018a:	d119      	bne.n	80101c0 <_strtod_l+0x8d0>
 801018c:	4b96      	ldr	r3, [pc, #600]	@ (80103e8 <_strtod_l+0xaf8>)
 801018e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010190:	429a      	cmp	r2, r3
 8010192:	d102      	bne.n	801019a <_strtod_l+0x8aa>
 8010194:	3101      	adds	r1, #1
 8010196:	f43f adca 	beq.w	800fd2e <_strtod_l+0x43e>
 801019a:	4b92      	ldr	r3, [pc, #584]	@ (80103e4 <_strtod_l+0xaf4>)
 801019c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801019e:	401a      	ands	r2, r3
 80101a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80101a4:	f04f 0a00 	mov.w	sl, #0
 80101a8:	9b08      	ldr	r3, [sp, #32]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d1b8      	bne.n	8010120 <_strtod_l+0x830>
 80101ae:	e5c9      	b.n	800fd44 <_strtod_l+0x454>
 80101b0:	f04f 33ff 	mov.w	r3, #4294967295
 80101b4:	e7e8      	b.n	8010188 <_strtod_l+0x898>
 80101b6:	4613      	mov	r3, r2
 80101b8:	e7e6      	b.n	8010188 <_strtod_l+0x898>
 80101ba:	ea53 030a 	orrs.w	r3, r3, sl
 80101be:	d0a1      	beq.n	8010104 <_strtod_l+0x814>
 80101c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80101c2:	b1db      	cbz	r3, 80101fc <_strtod_l+0x90c>
 80101c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80101c6:	4213      	tst	r3, r2
 80101c8:	d0ee      	beq.n	80101a8 <_strtod_l+0x8b8>
 80101ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101cc:	9a08      	ldr	r2, [sp, #32]
 80101ce:	4650      	mov	r0, sl
 80101d0:	4659      	mov	r1, fp
 80101d2:	b1bb      	cbz	r3, 8010204 <_strtod_l+0x914>
 80101d4:	f7ff fb6e 	bl	800f8b4 <sulp>
 80101d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80101dc:	ec53 2b10 	vmov	r2, r3, d0
 80101e0:	f7f0 f854 	bl	800028c <__adddf3>
 80101e4:	4682      	mov	sl, r0
 80101e6:	468b      	mov	fp, r1
 80101e8:	e7de      	b.n	80101a8 <_strtod_l+0x8b8>
 80101ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80101ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80101f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80101f6:	f04f 3aff 	mov.w	sl, #4294967295
 80101fa:	e7d5      	b.n	80101a8 <_strtod_l+0x8b8>
 80101fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80101fe:	ea13 0f0a 	tst.w	r3, sl
 8010202:	e7e1      	b.n	80101c8 <_strtod_l+0x8d8>
 8010204:	f7ff fb56 	bl	800f8b4 <sulp>
 8010208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801020c:	ec53 2b10 	vmov	r2, r3, d0
 8010210:	f7f0 f83a 	bl	8000288 <__aeabi_dsub>
 8010214:	2200      	movs	r2, #0
 8010216:	2300      	movs	r3, #0
 8010218:	4682      	mov	sl, r0
 801021a:	468b      	mov	fp, r1
 801021c:	f7f0 fc54 	bl	8000ac8 <__aeabi_dcmpeq>
 8010220:	2800      	cmp	r0, #0
 8010222:	d0c1      	beq.n	80101a8 <_strtod_l+0x8b8>
 8010224:	e619      	b.n	800fe5a <_strtod_l+0x56a>
 8010226:	4641      	mov	r1, r8
 8010228:	4620      	mov	r0, r4
 801022a:	f7ff facd 	bl	800f7c8 <__ratio>
 801022e:	ec57 6b10 	vmov	r6, r7, d0
 8010232:	2200      	movs	r2, #0
 8010234:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010238:	4630      	mov	r0, r6
 801023a:	4639      	mov	r1, r7
 801023c:	f7f0 fc58 	bl	8000af0 <__aeabi_dcmple>
 8010240:	2800      	cmp	r0, #0
 8010242:	d06f      	beq.n	8010324 <_strtod_l+0xa34>
 8010244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010246:	2b00      	cmp	r3, #0
 8010248:	d17a      	bne.n	8010340 <_strtod_l+0xa50>
 801024a:	f1ba 0f00 	cmp.w	sl, #0
 801024e:	d158      	bne.n	8010302 <_strtod_l+0xa12>
 8010250:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010252:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010256:	2b00      	cmp	r3, #0
 8010258:	d15a      	bne.n	8010310 <_strtod_l+0xa20>
 801025a:	4b64      	ldr	r3, [pc, #400]	@ (80103ec <_strtod_l+0xafc>)
 801025c:	2200      	movs	r2, #0
 801025e:	4630      	mov	r0, r6
 8010260:	4639      	mov	r1, r7
 8010262:	f7f0 fc3b 	bl	8000adc <__aeabi_dcmplt>
 8010266:	2800      	cmp	r0, #0
 8010268:	d159      	bne.n	801031e <_strtod_l+0xa2e>
 801026a:	4630      	mov	r0, r6
 801026c:	4639      	mov	r1, r7
 801026e:	4b60      	ldr	r3, [pc, #384]	@ (80103f0 <_strtod_l+0xb00>)
 8010270:	2200      	movs	r2, #0
 8010272:	f7f0 f9c1 	bl	80005f8 <__aeabi_dmul>
 8010276:	4606      	mov	r6, r0
 8010278:	460f      	mov	r7, r1
 801027a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801027e:	9606      	str	r6, [sp, #24]
 8010280:	9307      	str	r3, [sp, #28]
 8010282:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010286:	4d57      	ldr	r5, [pc, #348]	@ (80103e4 <_strtod_l+0xaf4>)
 8010288:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801028c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801028e:	401d      	ands	r5, r3
 8010290:	4b58      	ldr	r3, [pc, #352]	@ (80103f4 <_strtod_l+0xb04>)
 8010292:	429d      	cmp	r5, r3
 8010294:	f040 80b2 	bne.w	80103fc <_strtod_l+0xb0c>
 8010298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801029a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801029e:	ec4b ab10 	vmov	d0, sl, fp
 80102a2:	f7ff f9c9 	bl	800f638 <__ulp>
 80102a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80102aa:	ec51 0b10 	vmov	r0, r1, d0
 80102ae:	f7f0 f9a3 	bl	80005f8 <__aeabi_dmul>
 80102b2:	4652      	mov	r2, sl
 80102b4:	465b      	mov	r3, fp
 80102b6:	f7ef ffe9 	bl	800028c <__adddf3>
 80102ba:	460b      	mov	r3, r1
 80102bc:	4949      	ldr	r1, [pc, #292]	@ (80103e4 <_strtod_l+0xaf4>)
 80102be:	4a4e      	ldr	r2, [pc, #312]	@ (80103f8 <_strtod_l+0xb08>)
 80102c0:	4019      	ands	r1, r3
 80102c2:	4291      	cmp	r1, r2
 80102c4:	4682      	mov	sl, r0
 80102c6:	d942      	bls.n	801034e <_strtod_l+0xa5e>
 80102c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80102ca:	4b47      	ldr	r3, [pc, #284]	@ (80103e8 <_strtod_l+0xaf8>)
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d103      	bne.n	80102d8 <_strtod_l+0x9e8>
 80102d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80102d2:	3301      	adds	r3, #1
 80102d4:	f43f ad2b 	beq.w	800fd2e <_strtod_l+0x43e>
 80102d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80103e8 <_strtod_l+0xaf8>
 80102dc:	f04f 3aff 	mov.w	sl, #4294967295
 80102e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80102e2:	9805      	ldr	r0, [sp, #20]
 80102e4:	f7fe fe74 	bl	800efd0 <_Bfree>
 80102e8:	9805      	ldr	r0, [sp, #20]
 80102ea:	4649      	mov	r1, r9
 80102ec:	f7fe fe70 	bl	800efd0 <_Bfree>
 80102f0:	9805      	ldr	r0, [sp, #20]
 80102f2:	4641      	mov	r1, r8
 80102f4:	f7fe fe6c 	bl	800efd0 <_Bfree>
 80102f8:	9805      	ldr	r0, [sp, #20]
 80102fa:	4621      	mov	r1, r4
 80102fc:	f7fe fe68 	bl	800efd0 <_Bfree>
 8010300:	e618      	b.n	800ff34 <_strtod_l+0x644>
 8010302:	f1ba 0f01 	cmp.w	sl, #1
 8010306:	d103      	bne.n	8010310 <_strtod_l+0xa20>
 8010308:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801030a:	2b00      	cmp	r3, #0
 801030c:	f43f ada5 	beq.w	800fe5a <_strtod_l+0x56a>
 8010310:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80103c0 <_strtod_l+0xad0>
 8010314:	4f35      	ldr	r7, [pc, #212]	@ (80103ec <_strtod_l+0xafc>)
 8010316:	ed8d 7b06 	vstr	d7, [sp, #24]
 801031a:	2600      	movs	r6, #0
 801031c:	e7b1      	b.n	8010282 <_strtod_l+0x992>
 801031e:	4f34      	ldr	r7, [pc, #208]	@ (80103f0 <_strtod_l+0xb00>)
 8010320:	2600      	movs	r6, #0
 8010322:	e7aa      	b.n	801027a <_strtod_l+0x98a>
 8010324:	4b32      	ldr	r3, [pc, #200]	@ (80103f0 <_strtod_l+0xb00>)
 8010326:	4630      	mov	r0, r6
 8010328:	4639      	mov	r1, r7
 801032a:	2200      	movs	r2, #0
 801032c:	f7f0 f964 	bl	80005f8 <__aeabi_dmul>
 8010330:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010332:	4606      	mov	r6, r0
 8010334:	460f      	mov	r7, r1
 8010336:	2b00      	cmp	r3, #0
 8010338:	d09f      	beq.n	801027a <_strtod_l+0x98a>
 801033a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801033e:	e7a0      	b.n	8010282 <_strtod_l+0x992>
 8010340:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80103c8 <_strtod_l+0xad8>
 8010344:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010348:	ec57 6b17 	vmov	r6, r7, d7
 801034c:	e799      	b.n	8010282 <_strtod_l+0x992>
 801034e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010352:	9b08      	ldr	r3, [sp, #32]
 8010354:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010358:	2b00      	cmp	r3, #0
 801035a:	d1c1      	bne.n	80102e0 <_strtod_l+0x9f0>
 801035c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010360:	0d1b      	lsrs	r3, r3, #20
 8010362:	051b      	lsls	r3, r3, #20
 8010364:	429d      	cmp	r5, r3
 8010366:	d1bb      	bne.n	80102e0 <_strtod_l+0x9f0>
 8010368:	4630      	mov	r0, r6
 801036a:	4639      	mov	r1, r7
 801036c:	f7f0 fca4 	bl	8000cb8 <__aeabi_d2lz>
 8010370:	f7f0 f914 	bl	800059c <__aeabi_l2d>
 8010374:	4602      	mov	r2, r0
 8010376:	460b      	mov	r3, r1
 8010378:	4630      	mov	r0, r6
 801037a:	4639      	mov	r1, r7
 801037c:	f7ef ff84 	bl	8000288 <__aeabi_dsub>
 8010380:	460b      	mov	r3, r1
 8010382:	4602      	mov	r2, r0
 8010384:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010388:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801038c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801038e:	ea46 060a 	orr.w	r6, r6, sl
 8010392:	431e      	orrs	r6, r3
 8010394:	d06f      	beq.n	8010476 <_strtod_l+0xb86>
 8010396:	a30e      	add	r3, pc, #56	@ (adr r3, 80103d0 <_strtod_l+0xae0>)
 8010398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039c:	f7f0 fb9e 	bl	8000adc <__aeabi_dcmplt>
 80103a0:	2800      	cmp	r0, #0
 80103a2:	f47f accf 	bne.w	800fd44 <_strtod_l+0x454>
 80103a6:	a30c      	add	r3, pc, #48	@ (adr r3, 80103d8 <_strtod_l+0xae8>)
 80103a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80103b0:	f7f0 fbb2 	bl	8000b18 <__aeabi_dcmpgt>
 80103b4:	2800      	cmp	r0, #0
 80103b6:	d093      	beq.n	80102e0 <_strtod_l+0x9f0>
 80103b8:	e4c4      	b.n	800fd44 <_strtod_l+0x454>
 80103ba:	bf00      	nop
 80103bc:	f3af 8000 	nop.w
 80103c0:	00000000 	.word	0x00000000
 80103c4:	bff00000 	.word	0xbff00000
 80103c8:	00000000 	.word	0x00000000
 80103cc:	3ff00000 	.word	0x3ff00000
 80103d0:	94a03595 	.word	0x94a03595
 80103d4:	3fdfffff 	.word	0x3fdfffff
 80103d8:	35afe535 	.word	0x35afe535
 80103dc:	3fe00000 	.word	0x3fe00000
 80103e0:	000fffff 	.word	0x000fffff
 80103e4:	7ff00000 	.word	0x7ff00000
 80103e8:	7fefffff 	.word	0x7fefffff
 80103ec:	3ff00000 	.word	0x3ff00000
 80103f0:	3fe00000 	.word	0x3fe00000
 80103f4:	7fe00000 	.word	0x7fe00000
 80103f8:	7c9fffff 	.word	0x7c9fffff
 80103fc:	9b08      	ldr	r3, [sp, #32]
 80103fe:	b323      	cbz	r3, 801044a <_strtod_l+0xb5a>
 8010400:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010404:	d821      	bhi.n	801044a <_strtod_l+0xb5a>
 8010406:	a328      	add	r3, pc, #160	@ (adr r3, 80104a8 <_strtod_l+0xbb8>)
 8010408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040c:	4630      	mov	r0, r6
 801040e:	4639      	mov	r1, r7
 8010410:	f7f0 fb6e 	bl	8000af0 <__aeabi_dcmple>
 8010414:	b1a0      	cbz	r0, 8010440 <_strtod_l+0xb50>
 8010416:	4639      	mov	r1, r7
 8010418:	4630      	mov	r0, r6
 801041a:	f7f0 fbc5 	bl	8000ba8 <__aeabi_d2uiz>
 801041e:	2801      	cmp	r0, #1
 8010420:	bf38      	it	cc
 8010422:	2001      	movcc	r0, #1
 8010424:	f7f0 f86e 	bl	8000504 <__aeabi_ui2d>
 8010428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801042a:	4606      	mov	r6, r0
 801042c:	460f      	mov	r7, r1
 801042e:	b9fb      	cbnz	r3, 8010470 <_strtod_l+0xb80>
 8010430:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010434:	9014      	str	r0, [sp, #80]	@ 0x50
 8010436:	9315      	str	r3, [sp, #84]	@ 0x54
 8010438:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801043c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010440:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010442:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010446:	1b5b      	subs	r3, r3, r5
 8010448:	9311      	str	r3, [sp, #68]	@ 0x44
 801044a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801044e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010452:	f7ff f8f1 	bl	800f638 <__ulp>
 8010456:	4650      	mov	r0, sl
 8010458:	ec53 2b10 	vmov	r2, r3, d0
 801045c:	4659      	mov	r1, fp
 801045e:	f7f0 f8cb 	bl	80005f8 <__aeabi_dmul>
 8010462:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010466:	f7ef ff11 	bl	800028c <__adddf3>
 801046a:	4682      	mov	sl, r0
 801046c:	468b      	mov	fp, r1
 801046e:	e770      	b.n	8010352 <_strtod_l+0xa62>
 8010470:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010474:	e7e0      	b.n	8010438 <_strtod_l+0xb48>
 8010476:	a30e      	add	r3, pc, #56	@ (adr r3, 80104b0 <_strtod_l+0xbc0>)
 8010478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047c:	f7f0 fb2e 	bl	8000adc <__aeabi_dcmplt>
 8010480:	e798      	b.n	80103b4 <_strtod_l+0xac4>
 8010482:	2300      	movs	r3, #0
 8010484:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010486:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010488:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801048a:	6013      	str	r3, [r2, #0]
 801048c:	f7ff ba6d 	b.w	800f96a <_strtod_l+0x7a>
 8010490:	2a65      	cmp	r2, #101	@ 0x65
 8010492:	f43f ab66 	beq.w	800fb62 <_strtod_l+0x272>
 8010496:	2a45      	cmp	r2, #69	@ 0x45
 8010498:	f43f ab63 	beq.w	800fb62 <_strtod_l+0x272>
 801049c:	2301      	movs	r3, #1
 801049e:	f7ff bb9e 	b.w	800fbde <_strtod_l+0x2ee>
 80104a2:	bf00      	nop
 80104a4:	f3af 8000 	nop.w
 80104a8:	ffc00000 	.word	0xffc00000
 80104ac:	41dfffff 	.word	0x41dfffff
 80104b0:	94a03595 	.word	0x94a03595
 80104b4:	3fcfffff 	.word	0x3fcfffff

080104b8 <_strtod_r>:
 80104b8:	4b01      	ldr	r3, [pc, #4]	@ (80104c0 <_strtod_r+0x8>)
 80104ba:	f7ff ba19 	b.w	800f8f0 <_strtod_l>
 80104be:	bf00      	nop
 80104c0:	200000a4 	.word	0x200000a4

080104c4 <_strtol_l.constprop.0>:
 80104c4:	2b24      	cmp	r3, #36	@ 0x24
 80104c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104ca:	4686      	mov	lr, r0
 80104cc:	4690      	mov	r8, r2
 80104ce:	d801      	bhi.n	80104d4 <_strtol_l.constprop.0+0x10>
 80104d0:	2b01      	cmp	r3, #1
 80104d2:	d106      	bne.n	80104e2 <_strtol_l.constprop.0+0x1e>
 80104d4:	f7fd fdae 	bl	800e034 <__errno>
 80104d8:	2316      	movs	r3, #22
 80104da:	6003      	str	r3, [r0, #0]
 80104dc:	2000      	movs	r0, #0
 80104de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104e2:	4834      	ldr	r0, [pc, #208]	@ (80105b4 <_strtol_l.constprop.0+0xf0>)
 80104e4:	460d      	mov	r5, r1
 80104e6:	462a      	mov	r2, r5
 80104e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80104ec:	5d06      	ldrb	r6, [r0, r4]
 80104ee:	f016 0608 	ands.w	r6, r6, #8
 80104f2:	d1f8      	bne.n	80104e6 <_strtol_l.constprop.0+0x22>
 80104f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80104f6:	d12d      	bne.n	8010554 <_strtol_l.constprop.0+0x90>
 80104f8:	782c      	ldrb	r4, [r5, #0]
 80104fa:	2601      	movs	r6, #1
 80104fc:	1c95      	adds	r5, r2, #2
 80104fe:	f033 0210 	bics.w	r2, r3, #16
 8010502:	d109      	bne.n	8010518 <_strtol_l.constprop.0+0x54>
 8010504:	2c30      	cmp	r4, #48	@ 0x30
 8010506:	d12a      	bne.n	801055e <_strtol_l.constprop.0+0x9a>
 8010508:	782a      	ldrb	r2, [r5, #0]
 801050a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801050e:	2a58      	cmp	r2, #88	@ 0x58
 8010510:	d125      	bne.n	801055e <_strtol_l.constprop.0+0x9a>
 8010512:	786c      	ldrb	r4, [r5, #1]
 8010514:	2310      	movs	r3, #16
 8010516:	3502      	adds	r5, #2
 8010518:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801051c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010520:	2200      	movs	r2, #0
 8010522:	fbbc f9f3 	udiv	r9, ip, r3
 8010526:	4610      	mov	r0, r2
 8010528:	fb03 ca19 	mls	sl, r3, r9, ip
 801052c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010530:	2f09      	cmp	r7, #9
 8010532:	d81b      	bhi.n	801056c <_strtol_l.constprop.0+0xa8>
 8010534:	463c      	mov	r4, r7
 8010536:	42a3      	cmp	r3, r4
 8010538:	dd27      	ble.n	801058a <_strtol_l.constprop.0+0xc6>
 801053a:	1c57      	adds	r7, r2, #1
 801053c:	d007      	beq.n	801054e <_strtol_l.constprop.0+0x8a>
 801053e:	4581      	cmp	r9, r0
 8010540:	d320      	bcc.n	8010584 <_strtol_l.constprop.0+0xc0>
 8010542:	d101      	bne.n	8010548 <_strtol_l.constprop.0+0x84>
 8010544:	45a2      	cmp	sl, r4
 8010546:	db1d      	blt.n	8010584 <_strtol_l.constprop.0+0xc0>
 8010548:	fb00 4003 	mla	r0, r0, r3, r4
 801054c:	2201      	movs	r2, #1
 801054e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010552:	e7eb      	b.n	801052c <_strtol_l.constprop.0+0x68>
 8010554:	2c2b      	cmp	r4, #43	@ 0x2b
 8010556:	bf04      	itt	eq
 8010558:	782c      	ldrbeq	r4, [r5, #0]
 801055a:	1c95      	addeq	r5, r2, #2
 801055c:	e7cf      	b.n	80104fe <_strtol_l.constprop.0+0x3a>
 801055e:	2b00      	cmp	r3, #0
 8010560:	d1da      	bne.n	8010518 <_strtol_l.constprop.0+0x54>
 8010562:	2c30      	cmp	r4, #48	@ 0x30
 8010564:	bf0c      	ite	eq
 8010566:	2308      	moveq	r3, #8
 8010568:	230a      	movne	r3, #10
 801056a:	e7d5      	b.n	8010518 <_strtol_l.constprop.0+0x54>
 801056c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010570:	2f19      	cmp	r7, #25
 8010572:	d801      	bhi.n	8010578 <_strtol_l.constprop.0+0xb4>
 8010574:	3c37      	subs	r4, #55	@ 0x37
 8010576:	e7de      	b.n	8010536 <_strtol_l.constprop.0+0x72>
 8010578:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801057c:	2f19      	cmp	r7, #25
 801057e:	d804      	bhi.n	801058a <_strtol_l.constprop.0+0xc6>
 8010580:	3c57      	subs	r4, #87	@ 0x57
 8010582:	e7d8      	b.n	8010536 <_strtol_l.constprop.0+0x72>
 8010584:	f04f 32ff 	mov.w	r2, #4294967295
 8010588:	e7e1      	b.n	801054e <_strtol_l.constprop.0+0x8a>
 801058a:	1c53      	adds	r3, r2, #1
 801058c:	d108      	bne.n	80105a0 <_strtol_l.constprop.0+0xdc>
 801058e:	2322      	movs	r3, #34	@ 0x22
 8010590:	f8ce 3000 	str.w	r3, [lr]
 8010594:	4660      	mov	r0, ip
 8010596:	f1b8 0f00 	cmp.w	r8, #0
 801059a:	d0a0      	beq.n	80104de <_strtol_l.constprop.0+0x1a>
 801059c:	1e69      	subs	r1, r5, #1
 801059e:	e006      	b.n	80105ae <_strtol_l.constprop.0+0xea>
 80105a0:	b106      	cbz	r6, 80105a4 <_strtol_l.constprop.0+0xe0>
 80105a2:	4240      	negs	r0, r0
 80105a4:	f1b8 0f00 	cmp.w	r8, #0
 80105a8:	d099      	beq.n	80104de <_strtol_l.constprop.0+0x1a>
 80105aa:	2a00      	cmp	r2, #0
 80105ac:	d1f6      	bne.n	801059c <_strtol_l.constprop.0+0xd8>
 80105ae:	f8c8 1000 	str.w	r1, [r8]
 80105b2:	e794      	b.n	80104de <_strtol_l.constprop.0+0x1a>
 80105b4:	08011c39 	.word	0x08011c39

080105b8 <_strtol_r>:
 80105b8:	f7ff bf84 	b.w	80104c4 <_strtol_l.constprop.0>

080105bc <__ssputs_r>:
 80105bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105c0:	688e      	ldr	r6, [r1, #8]
 80105c2:	461f      	mov	r7, r3
 80105c4:	42be      	cmp	r6, r7
 80105c6:	680b      	ldr	r3, [r1, #0]
 80105c8:	4682      	mov	sl, r0
 80105ca:	460c      	mov	r4, r1
 80105cc:	4690      	mov	r8, r2
 80105ce:	d82d      	bhi.n	801062c <__ssputs_r+0x70>
 80105d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80105d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80105d8:	d026      	beq.n	8010628 <__ssputs_r+0x6c>
 80105da:	6965      	ldr	r5, [r4, #20]
 80105dc:	6909      	ldr	r1, [r1, #16]
 80105de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80105e2:	eba3 0901 	sub.w	r9, r3, r1
 80105e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80105ea:	1c7b      	adds	r3, r7, #1
 80105ec:	444b      	add	r3, r9
 80105ee:	106d      	asrs	r5, r5, #1
 80105f0:	429d      	cmp	r5, r3
 80105f2:	bf38      	it	cc
 80105f4:	461d      	movcc	r5, r3
 80105f6:	0553      	lsls	r3, r2, #21
 80105f8:	d527      	bpl.n	801064a <__ssputs_r+0x8e>
 80105fa:	4629      	mov	r1, r5
 80105fc:	f7fe fc1c 	bl	800ee38 <_malloc_r>
 8010600:	4606      	mov	r6, r0
 8010602:	b360      	cbz	r0, 801065e <__ssputs_r+0xa2>
 8010604:	6921      	ldr	r1, [r4, #16]
 8010606:	464a      	mov	r2, r9
 8010608:	f7fd fd41 	bl	800e08e <memcpy>
 801060c:	89a3      	ldrh	r3, [r4, #12]
 801060e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010616:	81a3      	strh	r3, [r4, #12]
 8010618:	6126      	str	r6, [r4, #16]
 801061a:	6165      	str	r5, [r4, #20]
 801061c:	444e      	add	r6, r9
 801061e:	eba5 0509 	sub.w	r5, r5, r9
 8010622:	6026      	str	r6, [r4, #0]
 8010624:	60a5      	str	r5, [r4, #8]
 8010626:	463e      	mov	r6, r7
 8010628:	42be      	cmp	r6, r7
 801062a:	d900      	bls.n	801062e <__ssputs_r+0x72>
 801062c:	463e      	mov	r6, r7
 801062e:	6820      	ldr	r0, [r4, #0]
 8010630:	4632      	mov	r2, r6
 8010632:	4641      	mov	r1, r8
 8010634:	f000 fb6a 	bl	8010d0c <memmove>
 8010638:	68a3      	ldr	r3, [r4, #8]
 801063a:	1b9b      	subs	r3, r3, r6
 801063c:	60a3      	str	r3, [r4, #8]
 801063e:	6823      	ldr	r3, [r4, #0]
 8010640:	4433      	add	r3, r6
 8010642:	6023      	str	r3, [r4, #0]
 8010644:	2000      	movs	r0, #0
 8010646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801064a:	462a      	mov	r2, r5
 801064c:	f000 ff41 	bl	80114d2 <_realloc_r>
 8010650:	4606      	mov	r6, r0
 8010652:	2800      	cmp	r0, #0
 8010654:	d1e0      	bne.n	8010618 <__ssputs_r+0x5c>
 8010656:	6921      	ldr	r1, [r4, #16]
 8010658:	4650      	mov	r0, sl
 801065a:	f7fe fb79 	bl	800ed50 <_free_r>
 801065e:	230c      	movs	r3, #12
 8010660:	f8ca 3000 	str.w	r3, [sl]
 8010664:	89a3      	ldrh	r3, [r4, #12]
 8010666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801066a:	81a3      	strh	r3, [r4, #12]
 801066c:	f04f 30ff 	mov.w	r0, #4294967295
 8010670:	e7e9      	b.n	8010646 <__ssputs_r+0x8a>
	...

08010674 <_svfiprintf_r>:
 8010674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010678:	4698      	mov	r8, r3
 801067a:	898b      	ldrh	r3, [r1, #12]
 801067c:	061b      	lsls	r3, r3, #24
 801067e:	b09d      	sub	sp, #116	@ 0x74
 8010680:	4607      	mov	r7, r0
 8010682:	460d      	mov	r5, r1
 8010684:	4614      	mov	r4, r2
 8010686:	d510      	bpl.n	80106aa <_svfiprintf_r+0x36>
 8010688:	690b      	ldr	r3, [r1, #16]
 801068a:	b973      	cbnz	r3, 80106aa <_svfiprintf_r+0x36>
 801068c:	2140      	movs	r1, #64	@ 0x40
 801068e:	f7fe fbd3 	bl	800ee38 <_malloc_r>
 8010692:	6028      	str	r0, [r5, #0]
 8010694:	6128      	str	r0, [r5, #16]
 8010696:	b930      	cbnz	r0, 80106a6 <_svfiprintf_r+0x32>
 8010698:	230c      	movs	r3, #12
 801069a:	603b      	str	r3, [r7, #0]
 801069c:	f04f 30ff 	mov.w	r0, #4294967295
 80106a0:	b01d      	add	sp, #116	@ 0x74
 80106a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a6:	2340      	movs	r3, #64	@ 0x40
 80106a8:	616b      	str	r3, [r5, #20]
 80106aa:	2300      	movs	r3, #0
 80106ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80106ae:	2320      	movs	r3, #32
 80106b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80106b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80106b8:	2330      	movs	r3, #48	@ 0x30
 80106ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010858 <_svfiprintf_r+0x1e4>
 80106be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80106c2:	f04f 0901 	mov.w	r9, #1
 80106c6:	4623      	mov	r3, r4
 80106c8:	469a      	mov	sl, r3
 80106ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106ce:	b10a      	cbz	r2, 80106d4 <_svfiprintf_r+0x60>
 80106d0:	2a25      	cmp	r2, #37	@ 0x25
 80106d2:	d1f9      	bne.n	80106c8 <_svfiprintf_r+0x54>
 80106d4:	ebba 0b04 	subs.w	fp, sl, r4
 80106d8:	d00b      	beq.n	80106f2 <_svfiprintf_r+0x7e>
 80106da:	465b      	mov	r3, fp
 80106dc:	4622      	mov	r2, r4
 80106de:	4629      	mov	r1, r5
 80106e0:	4638      	mov	r0, r7
 80106e2:	f7ff ff6b 	bl	80105bc <__ssputs_r>
 80106e6:	3001      	adds	r0, #1
 80106e8:	f000 80a7 	beq.w	801083a <_svfiprintf_r+0x1c6>
 80106ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80106ee:	445a      	add	r2, fp
 80106f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80106f2:	f89a 3000 	ldrb.w	r3, [sl]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	f000 809f 	beq.w	801083a <_svfiprintf_r+0x1c6>
 80106fc:	2300      	movs	r3, #0
 80106fe:	f04f 32ff 	mov.w	r2, #4294967295
 8010702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010706:	f10a 0a01 	add.w	sl, sl, #1
 801070a:	9304      	str	r3, [sp, #16]
 801070c:	9307      	str	r3, [sp, #28]
 801070e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010712:	931a      	str	r3, [sp, #104]	@ 0x68
 8010714:	4654      	mov	r4, sl
 8010716:	2205      	movs	r2, #5
 8010718:	f814 1b01 	ldrb.w	r1, [r4], #1
 801071c:	484e      	ldr	r0, [pc, #312]	@ (8010858 <_svfiprintf_r+0x1e4>)
 801071e:	f7ef fd57 	bl	80001d0 <memchr>
 8010722:	9a04      	ldr	r2, [sp, #16]
 8010724:	b9d8      	cbnz	r0, 801075e <_svfiprintf_r+0xea>
 8010726:	06d0      	lsls	r0, r2, #27
 8010728:	bf44      	itt	mi
 801072a:	2320      	movmi	r3, #32
 801072c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010730:	0711      	lsls	r1, r2, #28
 8010732:	bf44      	itt	mi
 8010734:	232b      	movmi	r3, #43	@ 0x2b
 8010736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801073a:	f89a 3000 	ldrb.w	r3, [sl]
 801073e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010740:	d015      	beq.n	801076e <_svfiprintf_r+0xfa>
 8010742:	9a07      	ldr	r2, [sp, #28]
 8010744:	4654      	mov	r4, sl
 8010746:	2000      	movs	r0, #0
 8010748:	f04f 0c0a 	mov.w	ip, #10
 801074c:	4621      	mov	r1, r4
 801074e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010752:	3b30      	subs	r3, #48	@ 0x30
 8010754:	2b09      	cmp	r3, #9
 8010756:	d94b      	bls.n	80107f0 <_svfiprintf_r+0x17c>
 8010758:	b1b0      	cbz	r0, 8010788 <_svfiprintf_r+0x114>
 801075a:	9207      	str	r2, [sp, #28]
 801075c:	e014      	b.n	8010788 <_svfiprintf_r+0x114>
 801075e:	eba0 0308 	sub.w	r3, r0, r8
 8010762:	fa09 f303 	lsl.w	r3, r9, r3
 8010766:	4313      	orrs	r3, r2
 8010768:	9304      	str	r3, [sp, #16]
 801076a:	46a2      	mov	sl, r4
 801076c:	e7d2      	b.n	8010714 <_svfiprintf_r+0xa0>
 801076e:	9b03      	ldr	r3, [sp, #12]
 8010770:	1d19      	adds	r1, r3, #4
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	9103      	str	r1, [sp, #12]
 8010776:	2b00      	cmp	r3, #0
 8010778:	bfbb      	ittet	lt
 801077a:	425b      	neglt	r3, r3
 801077c:	f042 0202 	orrlt.w	r2, r2, #2
 8010780:	9307      	strge	r3, [sp, #28]
 8010782:	9307      	strlt	r3, [sp, #28]
 8010784:	bfb8      	it	lt
 8010786:	9204      	strlt	r2, [sp, #16]
 8010788:	7823      	ldrb	r3, [r4, #0]
 801078a:	2b2e      	cmp	r3, #46	@ 0x2e
 801078c:	d10a      	bne.n	80107a4 <_svfiprintf_r+0x130>
 801078e:	7863      	ldrb	r3, [r4, #1]
 8010790:	2b2a      	cmp	r3, #42	@ 0x2a
 8010792:	d132      	bne.n	80107fa <_svfiprintf_r+0x186>
 8010794:	9b03      	ldr	r3, [sp, #12]
 8010796:	1d1a      	adds	r2, r3, #4
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	9203      	str	r2, [sp, #12]
 801079c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80107a0:	3402      	adds	r4, #2
 80107a2:	9305      	str	r3, [sp, #20]
 80107a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010868 <_svfiprintf_r+0x1f4>
 80107a8:	7821      	ldrb	r1, [r4, #0]
 80107aa:	2203      	movs	r2, #3
 80107ac:	4650      	mov	r0, sl
 80107ae:	f7ef fd0f 	bl	80001d0 <memchr>
 80107b2:	b138      	cbz	r0, 80107c4 <_svfiprintf_r+0x150>
 80107b4:	9b04      	ldr	r3, [sp, #16]
 80107b6:	eba0 000a 	sub.w	r0, r0, sl
 80107ba:	2240      	movs	r2, #64	@ 0x40
 80107bc:	4082      	lsls	r2, r0
 80107be:	4313      	orrs	r3, r2
 80107c0:	3401      	adds	r4, #1
 80107c2:	9304      	str	r3, [sp, #16]
 80107c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107c8:	4824      	ldr	r0, [pc, #144]	@ (801085c <_svfiprintf_r+0x1e8>)
 80107ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80107ce:	2206      	movs	r2, #6
 80107d0:	f7ef fcfe 	bl	80001d0 <memchr>
 80107d4:	2800      	cmp	r0, #0
 80107d6:	d036      	beq.n	8010846 <_svfiprintf_r+0x1d2>
 80107d8:	4b21      	ldr	r3, [pc, #132]	@ (8010860 <_svfiprintf_r+0x1ec>)
 80107da:	bb1b      	cbnz	r3, 8010824 <_svfiprintf_r+0x1b0>
 80107dc:	9b03      	ldr	r3, [sp, #12]
 80107de:	3307      	adds	r3, #7
 80107e0:	f023 0307 	bic.w	r3, r3, #7
 80107e4:	3308      	adds	r3, #8
 80107e6:	9303      	str	r3, [sp, #12]
 80107e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107ea:	4433      	add	r3, r6
 80107ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80107ee:	e76a      	b.n	80106c6 <_svfiprintf_r+0x52>
 80107f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80107f4:	460c      	mov	r4, r1
 80107f6:	2001      	movs	r0, #1
 80107f8:	e7a8      	b.n	801074c <_svfiprintf_r+0xd8>
 80107fa:	2300      	movs	r3, #0
 80107fc:	3401      	adds	r4, #1
 80107fe:	9305      	str	r3, [sp, #20]
 8010800:	4619      	mov	r1, r3
 8010802:	f04f 0c0a 	mov.w	ip, #10
 8010806:	4620      	mov	r0, r4
 8010808:	f810 2b01 	ldrb.w	r2, [r0], #1
 801080c:	3a30      	subs	r2, #48	@ 0x30
 801080e:	2a09      	cmp	r2, #9
 8010810:	d903      	bls.n	801081a <_svfiprintf_r+0x1a6>
 8010812:	2b00      	cmp	r3, #0
 8010814:	d0c6      	beq.n	80107a4 <_svfiprintf_r+0x130>
 8010816:	9105      	str	r1, [sp, #20]
 8010818:	e7c4      	b.n	80107a4 <_svfiprintf_r+0x130>
 801081a:	fb0c 2101 	mla	r1, ip, r1, r2
 801081e:	4604      	mov	r4, r0
 8010820:	2301      	movs	r3, #1
 8010822:	e7f0      	b.n	8010806 <_svfiprintf_r+0x192>
 8010824:	ab03      	add	r3, sp, #12
 8010826:	9300      	str	r3, [sp, #0]
 8010828:	462a      	mov	r2, r5
 801082a:	4b0e      	ldr	r3, [pc, #56]	@ (8010864 <_svfiprintf_r+0x1f0>)
 801082c:	a904      	add	r1, sp, #16
 801082e:	4638      	mov	r0, r7
 8010830:	f7fc fbb8 	bl	800cfa4 <_printf_float>
 8010834:	1c42      	adds	r2, r0, #1
 8010836:	4606      	mov	r6, r0
 8010838:	d1d6      	bne.n	80107e8 <_svfiprintf_r+0x174>
 801083a:	89ab      	ldrh	r3, [r5, #12]
 801083c:	065b      	lsls	r3, r3, #25
 801083e:	f53f af2d 	bmi.w	801069c <_svfiprintf_r+0x28>
 8010842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010844:	e72c      	b.n	80106a0 <_svfiprintf_r+0x2c>
 8010846:	ab03      	add	r3, sp, #12
 8010848:	9300      	str	r3, [sp, #0]
 801084a:	462a      	mov	r2, r5
 801084c:	4b05      	ldr	r3, [pc, #20]	@ (8010864 <_svfiprintf_r+0x1f0>)
 801084e:	a904      	add	r1, sp, #16
 8010850:	4638      	mov	r0, r7
 8010852:	f7fc fe3f 	bl	800d4d4 <_printf_i>
 8010856:	e7ed      	b.n	8010834 <_svfiprintf_r+0x1c0>
 8010858:	08011d39 	.word	0x08011d39
 801085c:	08011d43 	.word	0x08011d43
 8010860:	0800cfa5 	.word	0x0800cfa5
 8010864:	080105bd 	.word	0x080105bd
 8010868:	08011d3f 	.word	0x08011d3f

0801086c <__sfputc_r>:
 801086c:	6893      	ldr	r3, [r2, #8]
 801086e:	3b01      	subs	r3, #1
 8010870:	2b00      	cmp	r3, #0
 8010872:	b410      	push	{r4}
 8010874:	6093      	str	r3, [r2, #8]
 8010876:	da08      	bge.n	801088a <__sfputc_r+0x1e>
 8010878:	6994      	ldr	r4, [r2, #24]
 801087a:	42a3      	cmp	r3, r4
 801087c:	db01      	blt.n	8010882 <__sfputc_r+0x16>
 801087e:	290a      	cmp	r1, #10
 8010880:	d103      	bne.n	801088a <__sfputc_r+0x1e>
 8010882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010886:	f7fd baee 	b.w	800de66 <__swbuf_r>
 801088a:	6813      	ldr	r3, [r2, #0]
 801088c:	1c58      	adds	r0, r3, #1
 801088e:	6010      	str	r0, [r2, #0]
 8010890:	7019      	strb	r1, [r3, #0]
 8010892:	4608      	mov	r0, r1
 8010894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010898:	4770      	bx	lr

0801089a <__sfputs_r>:
 801089a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801089c:	4606      	mov	r6, r0
 801089e:	460f      	mov	r7, r1
 80108a0:	4614      	mov	r4, r2
 80108a2:	18d5      	adds	r5, r2, r3
 80108a4:	42ac      	cmp	r4, r5
 80108a6:	d101      	bne.n	80108ac <__sfputs_r+0x12>
 80108a8:	2000      	movs	r0, #0
 80108aa:	e007      	b.n	80108bc <__sfputs_r+0x22>
 80108ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108b0:	463a      	mov	r2, r7
 80108b2:	4630      	mov	r0, r6
 80108b4:	f7ff ffda 	bl	801086c <__sfputc_r>
 80108b8:	1c43      	adds	r3, r0, #1
 80108ba:	d1f3      	bne.n	80108a4 <__sfputs_r+0xa>
 80108bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080108c0 <_vfiprintf_r>:
 80108c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c4:	460d      	mov	r5, r1
 80108c6:	b09d      	sub	sp, #116	@ 0x74
 80108c8:	4614      	mov	r4, r2
 80108ca:	4698      	mov	r8, r3
 80108cc:	4606      	mov	r6, r0
 80108ce:	b118      	cbz	r0, 80108d8 <_vfiprintf_r+0x18>
 80108d0:	6a03      	ldr	r3, [r0, #32]
 80108d2:	b90b      	cbnz	r3, 80108d8 <_vfiprintf_r+0x18>
 80108d4:	f7fd f9be 	bl	800dc54 <__sinit>
 80108d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80108da:	07d9      	lsls	r1, r3, #31
 80108dc:	d405      	bmi.n	80108ea <_vfiprintf_r+0x2a>
 80108de:	89ab      	ldrh	r3, [r5, #12]
 80108e0:	059a      	lsls	r2, r3, #22
 80108e2:	d402      	bmi.n	80108ea <_vfiprintf_r+0x2a>
 80108e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80108e6:	f7fd fbd0 	bl	800e08a <__retarget_lock_acquire_recursive>
 80108ea:	89ab      	ldrh	r3, [r5, #12]
 80108ec:	071b      	lsls	r3, r3, #28
 80108ee:	d501      	bpl.n	80108f4 <_vfiprintf_r+0x34>
 80108f0:	692b      	ldr	r3, [r5, #16]
 80108f2:	b99b      	cbnz	r3, 801091c <_vfiprintf_r+0x5c>
 80108f4:	4629      	mov	r1, r5
 80108f6:	4630      	mov	r0, r6
 80108f8:	f7fd faf4 	bl	800dee4 <__swsetup_r>
 80108fc:	b170      	cbz	r0, 801091c <_vfiprintf_r+0x5c>
 80108fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010900:	07dc      	lsls	r4, r3, #31
 8010902:	d504      	bpl.n	801090e <_vfiprintf_r+0x4e>
 8010904:	f04f 30ff 	mov.w	r0, #4294967295
 8010908:	b01d      	add	sp, #116	@ 0x74
 801090a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801090e:	89ab      	ldrh	r3, [r5, #12]
 8010910:	0598      	lsls	r0, r3, #22
 8010912:	d4f7      	bmi.n	8010904 <_vfiprintf_r+0x44>
 8010914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010916:	f7fd fbb9 	bl	800e08c <__retarget_lock_release_recursive>
 801091a:	e7f3      	b.n	8010904 <_vfiprintf_r+0x44>
 801091c:	2300      	movs	r3, #0
 801091e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010920:	2320      	movs	r3, #32
 8010922:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010926:	f8cd 800c 	str.w	r8, [sp, #12]
 801092a:	2330      	movs	r3, #48	@ 0x30
 801092c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010adc <_vfiprintf_r+0x21c>
 8010930:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010934:	f04f 0901 	mov.w	r9, #1
 8010938:	4623      	mov	r3, r4
 801093a:	469a      	mov	sl, r3
 801093c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010940:	b10a      	cbz	r2, 8010946 <_vfiprintf_r+0x86>
 8010942:	2a25      	cmp	r2, #37	@ 0x25
 8010944:	d1f9      	bne.n	801093a <_vfiprintf_r+0x7a>
 8010946:	ebba 0b04 	subs.w	fp, sl, r4
 801094a:	d00b      	beq.n	8010964 <_vfiprintf_r+0xa4>
 801094c:	465b      	mov	r3, fp
 801094e:	4622      	mov	r2, r4
 8010950:	4629      	mov	r1, r5
 8010952:	4630      	mov	r0, r6
 8010954:	f7ff ffa1 	bl	801089a <__sfputs_r>
 8010958:	3001      	adds	r0, #1
 801095a:	f000 80a7 	beq.w	8010aac <_vfiprintf_r+0x1ec>
 801095e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010960:	445a      	add	r2, fp
 8010962:	9209      	str	r2, [sp, #36]	@ 0x24
 8010964:	f89a 3000 	ldrb.w	r3, [sl]
 8010968:	2b00      	cmp	r3, #0
 801096a:	f000 809f 	beq.w	8010aac <_vfiprintf_r+0x1ec>
 801096e:	2300      	movs	r3, #0
 8010970:	f04f 32ff 	mov.w	r2, #4294967295
 8010974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010978:	f10a 0a01 	add.w	sl, sl, #1
 801097c:	9304      	str	r3, [sp, #16]
 801097e:	9307      	str	r3, [sp, #28]
 8010980:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010984:	931a      	str	r3, [sp, #104]	@ 0x68
 8010986:	4654      	mov	r4, sl
 8010988:	2205      	movs	r2, #5
 801098a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801098e:	4853      	ldr	r0, [pc, #332]	@ (8010adc <_vfiprintf_r+0x21c>)
 8010990:	f7ef fc1e 	bl	80001d0 <memchr>
 8010994:	9a04      	ldr	r2, [sp, #16]
 8010996:	b9d8      	cbnz	r0, 80109d0 <_vfiprintf_r+0x110>
 8010998:	06d1      	lsls	r1, r2, #27
 801099a:	bf44      	itt	mi
 801099c:	2320      	movmi	r3, #32
 801099e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109a2:	0713      	lsls	r3, r2, #28
 80109a4:	bf44      	itt	mi
 80109a6:	232b      	movmi	r3, #43	@ 0x2b
 80109a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109ac:	f89a 3000 	ldrb.w	r3, [sl]
 80109b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80109b2:	d015      	beq.n	80109e0 <_vfiprintf_r+0x120>
 80109b4:	9a07      	ldr	r2, [sp, #28]
 80109b6:	4654      	mov	r4, sl
 80109b8:	2000      	movs	r0, #0
 80109ba:	f04f 0c0a 	mov.w	ip, #10
 80109be:	4621      	mov	r1, r4
 80109c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109c4:	3b30      	subs	r3, #48	@ 0x30
 80109c6:	2b09      	cmp	r3, #9
 80109c8:	d94b      	bls.n	8010a62 <_vfiprintf_r+0x1a2>
 80109ca:	b1b0      	cbz	r0, 80109fa <_vfiprintf_r+0x13a>
 80109cc:	9207      	str	r2, [sp, #28]
 80109ce:	e014      	b.n	80109fa <_vfiprintf_r+0x13a>
 80109d0:	eba0 0308 	sub.w	r3, r0, r8
 80109d4:	fa09 f303 	lsl.w	r3, r9, r3
 80109d8:	4313      	orrs	r3, r2
 80109da:	9304      	str	r3, [sp, #16]
 80109dc:	46a2      	mov	sl, r4
 80109de:	e7d2      	b.n	8010986 <_vfiprintf_r+0xc6>
 80109e0:	9b03      	ldr	r3, [sp, #12]
 80109e2:	1d19      	adds	r1, r3, #4
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	9103      	str	r1, [sp, #12]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	bfbb      	ittet	lt
 80109ec:	425b      	neglt	r3, r3
 80109ee:	f042 0202 	orrlt.w	r2, r2, #2
 80109f2:	9307      	strge	r3, [sp, #28]
 80109f4:	9307      	strlt	r3, [sp, #28]
 80109f6:	bfb8      	it	lt
 80109f8:	9204      	strlt	r2, [sp, #16]
 80109fa:	7823      	ldrb	r3, [r4, #0]
 80109fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80109fe:	d10a      	bne.n	8010a16 <_vfiprintf_r+0x156>
 8010a00:	7863      	ldrb	r3, [r4, #1]
 8010a02:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a04:	d132      	bne.n	8010a6c <_vfiprintf_r+0x1ac>
 8010a06:	9b03      	ldr	r3, [sp, #12]
 8010a08:	1d1a      	adds	r2, r3, #4
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	9203      	str	r2, [sp, #12]
 8010a0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010a12:	3402      	adds	r4, #2
 8010a14:	9305      	str	r3, [sp, #20]
 8010a16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010aec <_vfiprintf_r+0x22c>
 8010a1a:	7821      	ldrb	r1, [r4, #0]
 8010a1c:	2203      	movs	r2, #3
 8010a1e:	4650      	mov	r0, sl
 8010a20:	f7ef fbd6 	bl	80001d0 <memchr>
 8010a24:	b138      	cbz	r0, 8010a36 <_vfiprintf_r+0x176>
 8010a26:	9b04      	ldr	r3, [sp, #16]
 8010a28:	eba0 000a 	sub.w	r0, r0, sl
 8010a2c:	2240      	movs	r2, #64	@ 0x40
 8010a2e:	4082      	lsls	r2, r0
 8010a30:	4313      	orrs	r3, r2
 8010a32:	3401      	adds	r4, #1
 8010a34:	9304      	str	r3, [sp, #16]
 8010a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a3a:	4829      	ldr	r0, [pc, #164]	@ (8010ae0 <_vfiprintf_r+0x220>)
 8010a3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010a40:	2206      	movs	r2, #6
 8010a42:	f7ef fbc5 	bl	80001d0 <memchr>
 8010a46:	2800      	cmp	r0, #0
 8010a48:	d03f      	beq.n	8010aca <_vfiprintf_r+0x20a>
 8010a4a:	4b26      	ldr	r3, [pc, #152]	@ (8010ae4 <_vfiprintf_r+0x224>)
 8010a4c:	bb1b      	cbnz	r3, 8010a96 <_vfiprintf_r+0x1d6>
 8010a4e:	9b03      	ldr	r3, [sp, #12]
 8010a50:	3307      	adds	r3, #7
 8010a52:	f023 0307 	bic.w	r3, r3, #7
 8010a56:	3308      	adds	r3, #8
 8010a58:	9303      	str	r3, [sp, #12]
 8010a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a5c:	443b      	add	r3, r7
 8010a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a60:	e76a      	b.n	8010938 <_vfiprintf_r+0x78>
 8010a62:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a66:	460c      	mov	r4, r1
 8010a68:	2001      	movs	r0, #1
 8010a6a:	e7a8      	b.n	80109be <_vfiprintf_r+0xfe>
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	3401      	adds	r4, #1
 8010a70:	9305      	str	r3, [sp, #20]
 8010a72:	4619      	mov	r1, r3
 8010a74:	f04f 0c0a 	mov.w	ip, #10
 8010a78:	4620      	mov	r0, r4
 8010a7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a7e:	3a30      	subs	r2, #48	@ 0x30
 8010a80:	2a09      	cmp	r2, #9
 8010a82:	d903      	bls.n	8010a8c <_vfiprintf_r+0x1cc>
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d0c6      	beq.n	8010a16 <_vfiprintf_r+0x156>
 8010a88:	9105      	str	r1, [sp, #20]
 8010a8a:	e7c4      	b.n	8010a16 <_vfiprintf_r+0x156>
 8010a8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a90:	4604      	mov	r4, r0
 8010a92:	2301      	movs	r3, #1
 8010a94:	e7f0      	b.n	8010a78 <_vfiprintf_r+0x1b8>
 8010a96:	ab03      	add	r3, sp, #12
 8010a98:	9300      	str	r3, [sp, #0]
 8010a9a:	462a      	mov	r2, r5
 8010a9c:	4b12      	ldr	r3, [pc, #72]	@ (8010ae8 <_vfiprintf_r+0x228>)
 8010a9e:	a904      	add	r1, sp, #16
 8010aa0:	4630      	mov	r0, r6
 8010aa2:	f7fc fa7f 	bl	800cfa4 <_printf_float>
 8010aa6:	4607      	mov	r7, r0
 8010aa8:	1c78      	adds	r0, r7, #1
 8010aaa:	d1d6      	bne.n	8010a5a <_vfiprintf_r+0x19a>
 8010aac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010aae:	07d9      	lsls	r1, r3, #31
 8010ab0:	d405      	bmi.n	8010abe <_vfiprintf_r+0x1fe>
 8010ab2:	89ab      	ldrh	r3, [r5, #12]
 8010ab4:	059a      	lsls	r2, r3, #22
 8010ab6:	d402      	bmi.n	8010abe <_vfiprintf_r+0x1fe>
 8010ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010aba:	f7fd fae7 	bl	800e08c <__retarget_lock_release_recursive>
 8010abe:	89ab      	ldrh	r3, [r5, #12]
 8010ac0:	065b      	lsls	r3, r3, #25
 8010ac2:	f53f af1f 	bmi.w	8010904 <_vfiprintf_r+0x44>
 8010ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ac8:	e71e      	b.n	8010908 <_vfiprintf_r+0x48>
 8010aca:	ab03      	add	r3, sp, #12
 8010acc:	9300      	str	r3, [sp, #0]
 8010ace:	462a      	mov	r2, r5
 8010ad0:	4b05      	ldr	r3, [pc, #20]	@ (8010ae8 <_vfiprintf_r+0x228>)
 8010ad2:	a904      	add	r1, sp, #16
 8010ad4:	4630      	mov	r0, r6
 8010ad6:	f7fc fcfd 	bl	800d4d4 <_printf_i>
 8010ada:	e7e4      	b.n	8010aa6 <_vfiprintf_r+0x1e6>
 8010adc:	08011d39 	.word	0x08011d39
 8010ae0:	08011d43 	.word	0x08011d43
 8010ae4:	0800cfa5 	.word	0x0800cfa5
 8010ae8:	0801089b 	.word	0x0801089b
 8010aec:	08011d3f 	.word	0x08011d3f

08010af0 <__sflush_r>:
 8010af0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010af8:	0716      	lsls	r6, r2, #28
 8010afa:	4605      	mov	r5, r0
 8010afc:	460c      	mov	r4, r1
 8010afe:	d454      	bmi.n	8010baa <__sflush_r+0xba>
 8010b00:	684b      	ldr	r3, [r1, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	dc02      	bgt.n	8010b0c <__sflush_r+0x1c>
 8010b06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	dd48      	ble.n	8010b9e <__sflush_r+0xae>
 8010b0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b0e:	2e00      	cmp	r6, #0
 8010b10:	d045      	beq.n	8010b9e <__sflush_r+0xae>
 8010b12:	2300      	movs	r3, #0
 8010b14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010b18:	682f      	ldr	r7, [r5, #0]
 8010b1a:	6a21      	ldr	r1, [r4, #32]
 8010b1c:	602b      	str	r3, [r5, #0]
 8010b1e:	d030      	beq.n	8010b82 <__sflush_r+0x92>
 8010b20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010b22:	89a3      	ldrh	r3, [r4, #12]
 8010b24:	0759      	lsls	r1, r3, #29
 8010b26:	d505      	bpl.n	8010b34 <__sflush_r+0x44>
 8010b28:	6863      	ldr	r3, [r4, #4]
 8010b2a:	1ad2      	subs	r2, r2, r3
 8010b2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010b2e:	b10b      	cbz	r3, 8010b34 <__sflush_r+0x44>
 8010b30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010b32:	1ad2      	subs	r2, r2, r3
 8010b34:	2300      	movs	r3, #0
 8010b36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b38:	6a21      	ldr	r1, [r4, #32]
 8010b3a:	4628      	mov	r0, r5
 8010b3c:	47b0      	blx	r6
 8010b3e:	1c43      	adds	r3, r0, #1
 8010b40:	89a3      	ldrh	r3, [r4, #12]
 8010b42:	d106      	bne.n	8010b52 <__sflush_r+0x62>
 8010b44:	6829      	ldr	r1, [r5, #0]
 8010b46:	291d      	cmp	r1, #29
 8010b48:	d82b      	bhi.n	8010ba2 <__sflush_r+0xb2>
 8010b4a:	4a2a      	ldr	r2, [pc, #168]	@ (8010bf4 <__sflush_r+0x104>)
 8010b4c:	410a      	asrs	r2, r1
 8010b4e:	07d6      	lsls	r6, r2, #31
 8010b50:	d427      	bmi.n	8010ba2 <__sflush_r+0xb2>
 8010b52:	2200      	movs	r2, #0
 8010b54:	6062      	str	r2, [r4, #4]
 8010b56:	04d9      	lsls	r1, r3, #19
 8010b58:	6922      	ldr	r2, [r4, #16]
 8010b5a:	6022      	str	r2, [r4, #0]
 8010b5c:	d504      	bpl.n	8010b68 <__sflush_r+0x78>
 8010b5e:	1c42      	adds	r2, r0, #1
 8010b60:	d101      	bne.n	8010b66 <__sflush_r+0x76>
 8010b62:	682b      	ldr	r3, [r5, #0]
 8010b64:	b903      	cbnz	r3, 8010b68 <__sflush_r+0x78>
 8010b66:	6560      	str	r0, [r4, #84]	@ 0x54
 8010b68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010b6a:	602f      	str	r7, [r5, #0]
 8010b6c:	b1b9      	cbz	r1, 8010b9e <__sflush_r+0xae>
 8010b6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010b72:	4299      	cmp	r1, r3
 8010b74:	d002      	beq.n	8010b7c <__sflush_r+0x8c>
 8010b76:	4628      	mov	r0, r5
 8010b78:	f7fe f8ea 	bl	800ed50 <_free_r>
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010b80:	e00d      	b.n	8010b9e <__sflush_r+0xae>
 8010b82:	2301      	movs	r3, #1
 8010b84:	4628      	mov	r0, r5
 8010b86:	47b0      	blx	r6
 8010b88:	4602      	mov	r2, r0
 8010b8a:	1c50      	adds	r0, r2, #1
 8010b8c:	d1c9      	bne.n	8010b22 <__sflush_r+0x32>
 8010b8e:	682b      	ldr	r3, [r5, #0]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d0c6      	beq.n	8010b22 <__sflush_r+0x32>
 8010b94:	2b1d      	cmp	r3, #29
 8010b96:	d001      	beq.n	8010b9c <__sflush_r+0xac>
 8010b98:	2b16      	cmp	r3, #22
 8010b9a:	d11e      	bne.n	8010bda <__sflush_r+0xea>
 8010b9c:	602f      	str	r7, [r5, #0]
 8010b9e:	2000      	movs	r0, #0
 8010ba0:	e022      	b.n	8010be8 <__sflush_r+0xf8>
 8010ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ba6:	b21b      	sxth	r3, r3
 8010ba8:	e01b      	b.n	8010be2 <__sflush_r+0xf2>
 8010baa:	690f      	ldr	r7, [r1, #16]
 8010bac:	2f00      	cmp	r7, #0
 8010bae:	d0f6      	beq.n	8010b9e <__sflush_r+0xae>
 8010bb0:	0793      	lsls	r3, r2, #30
 8010bb2:	680e      	ldr	r6, [r1, #0]
 8010bb4:	bf08      	it	eq
 8010bb6:	694b      	ldreq	r3, [r1, #20]
 8010bb8:	600f      	str	r7, [r1, #0]
 8010bba:	bf18      	it	ne
 8010bbc:	2300      	movne	r3, #0
 8010bbe:	eba6 0807 	sub.w	r8, r6, r7
 8010bc2:	608b      	str	r3, [r1, #8]
 8010bc4:	f1b8 0f00 	cmp.w	r8, #0
 8010bc8:	dde9      	ble.n	8010b9e <__sflush_r+0xae>
 8010bca:	6a21      	ldr	r1, [r4, #32]
 8010bcc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010bce:	4643      	mov	r3, r8
 8010bd0:	463a      	mov	r2, r7
 8010bd2:	4628      	mov	r0, r5
 8010bd4:	47b0      	blx	r6
 8010bd6:	2800      	cmp	r0, #0
 8010bd8:	dc08      	bgt.n	8010bec <__sflush_r+0xfc>
 8010bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010be2:	81a3      	strh	r3, [r4, #12]
 8010be4:	f04f 30ff 	mov.w	r0, #4294967295
 8010be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bec:	4407      	add	r7, r0
 8010bee:	eba8 0800 	sub.w	r8, r8, r0
 8010bf2:	e7e7      	b.n	8010bc4 <__sflush_r+0xd4>
 8010bf4:	dfbffffe 	.word	0xdfbffffe

08010bf8 <_fflush_r>:
 8010bf8:	b538      	push	{r3, r4, r5, lr}
 8010bfa:	690b      	ldr	r3, [r1, #16]
 8010bfc:	4605      	mov	r5, r0
 8010bfe:	460c      	mov	r4, r1
 8010c00:	b913      	cbnz	r3, 8010c08 <_fflush_r+0x10>
 8010c02:	2500      	movs	r5, #0
 8010c04:	4628      	mov	r0, r5
 8010c06:	bd38      	pop	{r3, r4, r5, pc}
 8010c08:	b118      	cbz	r0, 8010c12 <_fflush_r+0x1a>
 8010c0a:	6a03      	ldr	r3, [r0, #32]
 8010c0c:	b90b      	cbnz	r3, 8010c12 <_fflush_r+0x1a>
 8010c0e:	f7fd f821 	bl	800dc54 <__sinit>
 8010c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d0f3      	beq.n	8010c02 <_fflush_r+0xa>
 8010c1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010c1c:	07d0      	lsls	r0, r2, #31
 8010c1e:	d404      	bmi.n	8010c2a <_fflush_r+0x32>
 8010c20:	0599      	lsls	r1, r3, #22
 8010c22:	d402      	bmi.n	8010c2a <_fflush_r+0x32>
 8010c24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c26:	f7fd fa30 	bl	800e08a <__retarget_lock_acquire_recursive>
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	4621      	mov	r1, r4
 8010c2e:	f7ff ff5f 	bl	8010af0 <__sflush_r>
 8010c32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010c34:	07da      	lsls	r2, r3, #31
 8010c36:	4605      	mov	r5, r0
 8010c38:	d4e4      	bmi.n	8010c04 <_fflush_r+0xc>
 8010c3a:	89a3      	ldrh	r3, [r4, #12]
 8010c3c:	059b      	lsls	r3, r3, #22
 8010c3e:	d4e1      	bmi.n	8010c04 <_fflush_r+0xc>
 8010c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c42:	f7fd fa23 	bl	800e08c <__retarget_lock_release_recursive>
 8010c46:	e7dd      	b.n	8010c04 <_fflush_r+0xc>

08010c48 <__swhatbuf_r>:
 8010c48:	b570      	push	{r4, r5, r6, lr}
 8010c4a:	460c      	mov	r4, r1
 8010c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c50:	2900      	cmp	r1, #0
 8010c52:	b096      	sub	sp, #88	@ 0x58
 8010c54:	4615      	mov	r5, r2
 8010c56:	461e      	mov	r6, r3
 8010c58:	da0d      	bge.n	8010c76 <__swhatbuf_r+0x2e>
 8010c5a:	89a3      	ldrh	r3, [r4, #12]
 8010c5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010c60:	f04f 0100 	mov.w	r1, #0
 8010c64:	bf14      	ite	ne
 8010c66:	2340      	movne	r3, #64	@ 0x40
 8010c68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010c6c:	2000      	movs	r0, #0
 8010c6e:	6031      	str	r1, [r6, #0]
 8010c70:	602b      	str	r3, [r5, #0]
 8010c72:	b016      	add	sp, #88	@ 0x58
 8010c74:	bd70      	pop	{r4, r5, r6, pc}
 8010c76:	466a      	mov	r2, sp
 8010c78:	f000 f874 	bl	8010d64 <_fstat_r>
 8010c7c:	2800      	cmp	r0, #0
 8010c7e:	dbec      	blt.n	8010c5a <__swhatbuf_r+0x12>
 8010c80:	9901      	ldr	r1, [sp, #4]
 8010c82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010c86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010c8a:	4259      	negs	r1, r3
 8010c8c:	4159      	adcs	r1, r3
 8010c8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c92:	e7eb      	b.n	8010c6c <__swhatbuf_r+0x24>

08010c94 <__smakebuf_r>:
 8010c94:	898b      	ldrh	r3, [r1, #12]
 8010c96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c98:	079d      	lsls	r5, r3, #30
 8010c9a:	4606      	mov	r6, r0
 8010c9c:	460c      	mov	r4, r1
 8010c9e:	d507      	bpl.n	8010cb0 <__smakebuf_r+0x1c>
 8010ca0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010ca4:	6023      	str	r3, [r4, #0]
 8010ca6:	6123      	str	r3, [r4, #16]
 8010ca8:	2301      	movs	r3, #1
 8010caa:	6163      	str	r3, [r4, #20]
 8010cac:	b003      	add	sp, #12
 8010cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cb0:	ab01      	add	r3, sp, #4
 8010cb2:	466a      	mov	r2, sp
 8010cb4:	f7ff ffc8 	bl	8010c48 <__swhatbuf_r>
 8010cb8:	9f00      	ldr	r7, [sp, #0]
 8010cba:	4605      	mov	r5, r0
 8010cbc:	4639      	mov	r1, r7
 8010cbe:	4630      	mov	r0, r6
 8010cc0:	f7fe f8ba 	bl	800ee38 <_malloc_r>
 8010cc4:	b948      	cbnz	r0, 8010cda <__smakebuf_r+0x46>
 8010cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cca:	059a      	lsls	r2, r3, #22
 8010ccc:	d4ee      	bmi.n	8010cac <__smakebuf_r+0x18>
 8010cce:	f023 0303 	bic.w	r3, r3, #3
 8010cd2:	f043 0302 	orr.w	r3, r3, #2
 8010cd6:	81a3      	strh	r3, [r4, #12]
 8010cd8:	e7e2      	b.n	8010ca0 <__smakebuf_r+0xc>
 8010cda:	89a3      	ldrh	r3, [r4, #12]
 8010cdc:	6020      	str	r0, [r4, #0]
 8010cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ce2:	81a3      	strh	r3, [r4, #12]
 8010ce4:	9b01      	ldr	r3, [sp, #4]
 8010ce6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010cea:	b15b      	cbz	r3, 8010d04 <__smakebuf_r+0x70>
 8010cec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cf0:	4630      	mov	r0, r6
 8010cf2:	f000 f849 	bl	8010d88 <_isatty_r>
 8010cf6:	b128      	cbz	r0, 8010d04 <__smakebuf_r+0x70>
 8010cf8:	89a3      	ldrh	r3, [r4, #12]
 8010cfa:	f023 0303 	bic.w	r3, r3, #3
 8010cfe:	f043 0301 	orr.w	r3, r3, #1
 8010d02:	81a3      	strh	r3, [r4, #12]
 8010d04:	89a3      	ldrh	r3, [r4, #12]
 8010d06:	431d      	orrs	r5, r3
 8010d08:	81a5      	strh	r5, [r4, #12]
 8010d0a:	e7cf      	b.n	8010cac <__smakebuf_r+0x18>

08010d0c <memmove>:
 8010d0c:	4288      	cmp	r0, r1
 8010d0e:	b510      	push	{r4, lr}
 8010d10:	eb01 0402 	add.w	r4, r1, r2
 8010d14:	d902      	bls.n	8010d1c <memmove+0x10>
 8010d16:	4284      	cmp	r4, r0
 8010d18:	4623      	mov	r3, r4
 8010d1a:	d807      	bhi.n	8010d2c <memmove+0x20>
 8010d1c:	1e43      	subs	r3, r0, #1
 8010d1e:	42a1      	cmp	r1, r4
 8010d20:	d008      	beq.n	8010d34 <memmove+0x28>
 8010d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d2a:	e7f8      	b.n	8010d1e <memmove+0x12>
 8010d2c:	4402      	add	r2, r0
 8010d2e:	4601      	mov	r1, r0
 8010d30:	428a      	cmp	r2, r1
 8010d32:	d100      	bne.n	8010d36 <memmove+0x2a>
 8010d34:	bd10      	pop	{r4, pc}
 8010d36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d3e:	e7f7      	b.n	8010d30 <memmove+0x24>

08010d40 <strncmp>:
 8010d40:	b510      	push	{r4, lr}
 8010d42:	b16a      	cbz	r2, 8010d60 <strncmp+0x20>
 8010d44:	3901      	subs	r1, #1
 8010d46:	1884      	adds	r4, r0, r2
 8010d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d4c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010d50:	429a      	cmp	r2, r3
 8010d52:	d103      	bne.n	8010d5c <strncmp+0x1c>
 8010d54:	42a0      	cmp	r0, r4
 8010d56:	d001      	beq.n	8010d5c <strncmp+0x1c>
 8010d58:	2a00      	cmp	r2, #0
 8010d5a:	d1f5      	bne.n	8010d48 <strncmp+0x8>
 8010d5c:	1ad0      	subs	r0, r2, r3
 8010d5e:	bd10      	pop	{r4, pc}
 8010d60:	4610      	mov	r0, r2
 8010d62:	e7fc      	b.n	8010d5e <strncmp+0x1e>

08010d64 <_fstat_r>:
 8010d64:	b538      	push	{r3, r4, r5, lr}
 8010d66:	4d07      	ldr	r5, [pc, #28]	@ (8010d84 <_fstat_r+0x20>)
 8010d68:	2300      	movs	r3, #0
 8010d6a:	4604      	mov	r4, r0
 8010d6c:	4608      	mov	r0, r1
 8010d6e:	4611      	mov	r1, r2
 8010d70:	602b      	str	r3, [r5, #0]
 8010d72:	f7f2 fb6f 	bl	8003454 <_fstat>
 8010d76:	1c43      	adds	r3, r0, #1
 8010d78:	d102      	bne.n	8010d80 <_fstat_r+0x1c>
 8010d7a:	682b      	ldr	r3, [r5, #0]
 8010d7c:	b103      	cbz	r3, 8010d80 <_fstat_r+0x1c>
 8010d7e:	6023      	str	r3, [r4, #0]
 8010d80:	bd38      	pop	{r3, r4, r5, pc}
 8010d82:	bf00      	nop
 8010d84:	200010c4 	.word	0x200010c4

08010d88 <_isatty_r>:
 8010d88:	b538      	push	{r3, r4, r5, lr}
 8010d8a:	4d06      	ldr	r5, [pc, #24]	@ (8010da4 <_isatty_r+0x1c>)
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	4604      	mov	r4, r0
 8010d90:	4608      	mov	r0, r1
 8010d92:	602b      	str	r3, [r5, #0]
 8010d94:	f7f2 fb6e 	bl	8003474 <_isatty>
 8010d98:	1c43      	adds	r3, r0, #1
 8010d9a:	d102      	bne.n	8010da2 <_isatty_r+0x1a>
 8010d9c:	682b      	ldr	r3, [r5, #0]
 8010d9e:	b103      	cbz	r3, 8010da2 <_isatty_r+0x1a>
 8010da0:	6023      	str	r3, [r4, #0]
 8010da2:	bd38      	pop	{r3, r4, r5, pc}
 8010da4:	200010c4 	.word	0x200010c4

08010da8 <_sbrk_r>:
 8010da8:	b538      	push	{r3, r4, r5, lr}
 8010daa:	4d06      	ldr	r5, [pc, #24]	@ (8010dc4 <_sbrk_r+0x1c>)
 8010dac:	2300      	movs	r3, #0
 8010dae:	4604      	mov	r4, r0
 8010db0:	4608      	mov	r0, r1
 8010db2:	602b      	str	r3, [r5, #0]
 8010db4:	f7f2 fb76 	bl	80034a4 <_sbrk>
 8010db8:	1c43      	adds	r3, r0, #1
 8010dba:	d102      	bne.n	8010dc2 <_sbrk_r+0x1a>
 8010dbc:	682b      	ldr	r3, [r5, #0]
 8010dbe:	b103      	cbz	r3, 8010dc2 <_sbrk_r+0x1a>
 8010dc0:	6023      	str	r3, [r4, #0]
 8010dc2:	bd38      	pop	{r3, r4, r5, pc}
 8010dc4:	200010c4 	.word	0x200010c4

08010dc8 <nan>:
 8010dc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010dd0 <nan+0x8>
 8010dcc:	4770      	bx	lr
 8010dce:	bf00      	nop
 8010dd0:	00000000 	.word	0x00000000
 8010dd4:	7ff80000 	.word	0x7ff80000

08010dd8 <__assert_func>:
 8010dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010dda:	4614      	mov	r4, r2
 8010ddc:	461a      	mov	r2, r3
 8010dde:	4b09      	ldr	r3, [pc, #36]	@ (8010e04 <__assert_func+0x2c>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	4605      	mov	r5, r0
 8010de4:	68d8      	ldr	r0, [r3, #12]
 8010de6:	b954      	cbnz	r4, 8010dfe <__assert_func+0x26>
 8010de8:	4b07      	ldr	r3, [pc, #28]	@ (8010e08 <__assert_func+0x30>)
 8010dea:	461c      	mov	r4, r3
 8010dec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010df0:	9100      	str	r1, [sp, #0]
 8010df2:	462b      	mov	r3, r5
 8010df4:	4905      	ldr	r1, [pc, #20]	@ (8010e0c <__assert_func+0x34>)
 8010df6:	f000 fba7 	bl	8011548 <fiprintf>
 8010dfa:	f000 fbb7 	bl	801156c <abort>
 8010dfe:	4b04      	ldr	r3, [pc, #16]	@ (8010e10 <__assert_func+0x38>)
 8010e00:	e7f4      	b.n	8010dec <__assert_func+0x14>
 8010e02:	bf00      	nop
 8010e04:	20000054 	.word	0x20000054
 8010e08:	08011d8d 	.word	0x08011d8d
 8010e0c:	08011d5f 	.word	0x08011d5f
 8010e10:	08011d52 	.word	0x08011d52

08010e14 <_calloc_r>:
 8010e14:	b570      	push	{r4, r5, r6, lr}
 8010e16:	fba1 5402 	umull	r5, r4, r1, r2
 8010e1a:	b93c      	cbnz	r4, 8010e2c <_calloc_r+0x18>
 8010e1c:	4629      	mov	r1, r5
 8010e1e:	f7fe f80b 	bl	800ee38 <_malloc_r>
 8010e22:	4606      	mov	r6, r0
 8010e24:	b928      	cbnz	r0, 8010e32 <_calloc_r+0x1e>
 8010e26:	2600      	movs	r6, #0
 8010e28:	4630      	mov	r0, r6
 8010e2a:	bd70      	pop	{r4, r5, r6, pc}
 8010e2c:	220c      	movs	r2, #12
 8010e2e:	6002      	str	r2, [r0, #0]
 8010e30:	e7f9      	b.n	8010e26 <_calloc_r+0x12>
 8010e32:	462a      	mov	r2, r5
 8010e34:	4621      	mov	r1, r4
 8010e36:	f7fd f8ab 	bl	800df90 <memset>
 8010e3a:	e7f5      	b.n	8010e28 <_calloc_r+0x14>

08010e3c <rshift>:
 8010e3c:	6903      	ldr	r3, [r0, #16]
 8010e3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010e42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e46:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010e4a:	f100 0414 	add.w	r4, r0, #20
 8010e4e:	dd45      	ble.n	8010edc <rshift+0xa0>
 8010e50:	f011 011f 	ands.w	r1, r1, #31
 8010e54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010e58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010e5c:	d10c      	bne.n	8010e78 <rshift+0x3c>
 8010e5e:	f100 0710 	add.w	r7, r0, #16
 8010e62:	4629      	mov	r1, r5
 8010e64:	42b1      	cmp	r1, r6
 8010e66:	d334      	bcc.n	8010ed2 <rshift+0x96>
 8010e68:	1a9b      	subs	r3, r3, r2
 8010e6a:	009b      	lsls	r3, r3, #2
 8010e6c:	1eea      	subs	r2, r5, #3
 8010e6e:	4296      	cmp	r6, r2
 8010e70:	bf38      	it	cc
 8010e72:	2300      	movcc	r3, #0
 8010e74:	4423      	add	r3, r4
 8010e76:	e015      	b.n	8010ea4 <rshift+0x68>
 8010e78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010e7c:	f1c1 0820 	rsb	r8, r1, #32
 8010e80:	40cf      	lsrs	r7, r1
 8010e82:	f105 0e04 	add.w	lr, r5, #4
 8010e86:	46a1      	mov	r9, r4
 8010e88:	4576      	cmp	r6, lr
 8010e8a:	46f4      	mov	ip, lr
 8010e8c:	d815      	bhi.n	8010eba <rshift+0x7e>
 8010e8e:	1a9a      	subs	r2, r3, r2
 8010e90:	0092      	lsls	r2, r2, #2
 8010e92:	3a04      	subs	r2, #4
 8010e94:	3501      	adds	r5, #1
 8010e96:	42ae      	cmp	r6, r5
 8010e98:	bf38      	it	cc
 8010e9a:	2200      	movcc	r2, #0
 8010e9c:	18a3      	adds	r3, r4, r2
 8010e9e:	50a7      	str	r7, [r4, r2]
 8010ea0:	b107      	cbz	r7, 8010ea4 <rshift+0x68>
 8010ea2:	3304      	adds	r3, #4
 8010ea4:	1b1a      	subs	r2, r3, r4
 8010ea6:	42a3      	cmp	r3, r4
 8010ea8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010eac:	bf08      	it	eq
 8010eae:	2300      	moveq	r3, #0
 8010eb0:	6102      	str	r2, [r0, #16]
 8010eb2:	bf08      	it	eq
 8010eb4:	6143      	streq	r3, [r0, #20]
 8010eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010eba:	f8dc c000 	ldr.w	ip, [ip]
 8010ebe:	fa0c fc08 	lsl.w	ip, ip, r8
 8010ec2:	ea4c 0707 	orr.w	r7, ip, r7
 8010ec6:	f849 7b04 	str.w	r7, [r9], #4
 8010eca:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010ece:	40cf      	lsrs	r7, r1
 8010ed0:	e7da      	b.n	8010e88 <rshift+0x4c>
 8010ed2:	f851 cb04 	ldr.w	ip, [r1], #4
 8010ed6:	f847 cf04 	str.w	ip, [r7, #4]!
 8010eda:	e7c3      	b.n	8010e64 <rshift+0x28>
 8010edc:	4623      	mov	r3, r4
 8010ede:	e7e1      	b.n	8010ea4 <rshift+0x68>

08010ee0 <__hexdig_fun>:
 8010ee0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010ee4:	2b09      	cmp	r3, #9
 8010ee6:	d802      	bhi.n	8010eee <__hexdig_fun+0xe>
 8010ee8:	3820      	subs	r0, #32
 8010eea:	b2c0      	uxtb	r0, r0
 8010eec:	4770      	bx	lr
 8010eee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010ef2:	2b05      	cmp	r3, #5
 8010ef4:	d801      	bhi.n	8010efa <__hexdig_fun+0x1a>
 8010ef6:	3847      	subs	r0, #71	@ 0x47
 8010ef8:	e7f7      	b.n	8010eea <__hexdig_fun+0xa>
 8010efa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010efe:	2b05      	cmp	r3, #5
 8010f00:	d801      	bhi.n	8010f06 <__hexdig_fun+0x26>
 8010f02:	3827      	subs	r0, #39	@ 0x27
 8010f04:	e7f1      	b.n	8010eea <__hexdig_fun+0xa>
 8010f06:	2000      	movs	r0, #0
 8010f08:	4770      	bx	lr
	...

08010f0c <__gethex>:
 8010f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f10:	b085      	sub	sp, #20
 8010f12:	468a      	mov	sl, r1
 8010f14:	9302      	str	r3, [sp, #8]
 8010f16:	680b      	ldr	r3, [r1, #0]
 8010f18:	9001      	str	r0, [sp, #4]
 8010f1a:	4690      	mov	r8, r2
 8010f1c:	1c9c      	adds	r4, r3, #2
 8010f1e:	46a1      	mov	r9, r4
 8010f20:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010f24:	2830      	cmp	r0, #48	@ 0x30
 8010f26:	d0fa      	beq.n	8010f1e <__gethex+0x12>
 8010f28:	eba9 0303 	sub.w	r3, r9, r3
 8010f2c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010f30:	f7ff ffd6 	bl	8010ee0 <__hexdig_fun>
 8010f34:	4605      	mov	r5, r0
 8010f36:	2800      	cmp	r0, #0
 8010f38:	d168      	bne.n	801100c <__gethex+0x100>
 8010f3a:	49a0      	ldr	r1, [pc, #640]	@ (80111bc <__gethex+0x2b0>)
 8010f3c:	2201      	movs	r2, #1
 8010f3e:	4648      	mov	r0, r9
 8010f40:	f7ff fefe 	bl	8010d40 <strncmp>
 8010f44:	4607      	mov	r7, r0
 8010f46:	2800      	cmp	r0, #0
 8010f48:	d167      	bne.n	801101a <__gethex+0x10e>
 8010f4a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010f4e:	4626      	mov	r6, r4
 8010f50:	f7ff ffc6 	bl	8010ee0 <__hexdig_fun>
 8010f54:	2800      	cmp	r0, #0
 8010f56:	d062      	beq.n	801101e <__gethex+0x112>
 8010f58:	4623      	mov	r3, r4
 8010f5a:	7818      	ldrb	r0, [r3, #0]
 8010f5c:	2830      	cmp	r0, #48	@ 0x30
 8010f5e:	4699      	mov	r9, r3
 8010f60:	f103 0301 	add.w	r3, r3, #1
 8010f64:	d0f9      	beq.n	8010f5a <__gethex+0x4e>
 8010f66:	f7ff ffbb 	bl	8010ee0 <__hexdig_fun>
 8010f6a:	fab0 f580 	clz	r5, r0
 8010f6e:	096d      	lsrs	r5, r5, #5
 8010f70:	f04f 0b01 	mov.w	fp, #1
 8010f74:	464a      	mov	r2, r9
 8010f76:	4616      	mov	r6, r2
 8010f78:	3201      	adds	r2, #1
 8010f7a:	7830      	ldrb	r0, [r6, #0]
 8010f7c:	f7ff ffb0 	bl	8010ee0 <__hexdig_fun>
 8010f80:	2800      	cmp	r0, #0
 8010f82:	d1f8      	bne.n	8010f76 <__gethex+0x6a>
 8010f84:	498d      	ldr	r1, [pc, #564]	@ (80111bc <__gethex+0x2b0>)
 8010f86:	2201      	movs	r2, #1
 8010f88:	4630      	mov	r0, r6
 8010f8a:	f7ff fed9 	bl	8010d40 <strncmp>
 8010f8e:	2800      	cmp	r0, #0
 8010f90:	d13f      	bne.n	8011012 <__gethex+0x106>
 8010f92:	b944      	cbnz	r4, 8010fa6 <__gethex+0x9a>
 8010f94:	1c74      	adds	r4, r6, #1
 8010f96:	4622      	mov	r2, r4
 8010f98:	4616      	mov	r6, r2
 8010f9a:	3201      	adds	r2, #1
 8010f9c:	7830      	ldrb	r0, [r6, #0]
 8010f9e:	f7ff ff9f 	bl	8010ee0 <__hexdig_fun>
 8010fa2:	2800      	cmp	r0, #0
 8010fa4:	d1f8      	bne.n	8010f98 <__gethex+0x8c>
 8010fa6:	1ba4      	subs	r4, r4, r6
 8010fa8:	00a7      	lsls	r7, r4, #2
 8010faa:	7833      	ldrb	r3, [r6, #0]
 8010fac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010fb0:	2b50      	cmp	r3, #80	@ 0x50
 8010fb2:	d13e      	bne.n	8011032 <__gethex+0x126>
 8010fb4:	7873      	ldrb	r3, [r6, #1]
 8010fb6:	2b2b      	cmp	r3, #43	@ 0x2b
 8010fb8:	d033      	beq.n	8011022 <__gethex+0x116>
 8010fba:	2b2d      	cmp	r3, #45	@ 0x2d
 8010fbc:	d034      	beq.n	8011028 <__gethex+0x11c>
 8010fbe:	1c71      	adds	r1, r6, #1
 8010fc0:	2400      	movs	r4, #0
 8010fc2:	7808      	ldrb	r0, [r1, #0]
 8010fc4:	f7ff ff8c 	bl	8010ee0 <__hexdig_fun>
 8010fc8:	1e43      	subs	r3, r0, #1
 8010fca:	b2db      	uxtb	r3, r3
 8010fcc:	2b18      	cmp	r3, #24
 8010fce:	d830      	bhi.n	8011032 <__gethex+0x126>
 8010fd0:	f1a0 0210 	sub.w	r2, r0, #16
 8010fd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010fd8:	f7ff ff82 	bl	8010ee0 <__hexdig_fun>
 8010fdc:	f100 3cff 	add.w	ip, r0, #4294967295
 8010fe0:	fa5f fc8c 	uxtb.w	ip, ip
 8010fe4:	f1bc 0f18 	cmp.w	ip, #24
 8010fe8:	f04f 030a 	mov.w	r3, #10
 8010fec:	d91e      	bls.n	801102c <__gethex+0x120>
 8010fee:	b104      	cbz	r4, 8010ff2 <__gethex+0xe6>
 8010ff0:	4252      	negs	r2, r2
 8010ff2:	4417      	add	r7, r2
 8010ff4:	f8ca 1000 	str.w	r1, [sl]
 8010ff8:	b1ed      	cbz	r5, 8011036 <__gethex+0x12a>
 8010ffa:	f1bb 0f00 	cmp.w	fp, #0
 8010ffe:	bf0c      	ite	eq
 8011000:	2506      	moveq	r5, #6
 8011002:	2500      	movne	r5, #0
 8011004:	4628      	mov	r0, r5
 8011006:	b005      	add	sp, #20
 8011008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801100c:	2500      	movs	r5, #0
 801100e:	462c      	mov	r4, r5
 8011010:	e7b0      	b.n	8010f74 <__gethex+0x68>
 8011012:	2c00      	cmp	r4, #0
 8011014:	d1c7      	bne.n	8010fa6 <__gethex+0x9a>
 8011016:	4627      	mov	r7, r4
 8011018:	e7c7      	b.n	8010faa <__gethex+0x9e>
 801101a:	464e      	mov	r6, r9
 801101c:	462f      	mov	r7, r5
 801101e:	2501      	movs	r5, #1
 8011020:	e7c3      	b.n	8010faa <__gethex+0x9e>
 8011022:	2400      	movs	r4, #0
 8011024:	1cb1      	adds	r1, r6, #2
 8011026:	e7cc      	b.n	8010fc2 <__gethex+0xb6>
 8011028:	2401      	movs	r4, #1
 801102a:	e7fb      	b.n	8011024 <__gethex+0x118>
 801102c:	fb03 0002 	mla	r0, r3, r2, r0
 8011030:	e7ce      	b.n	8010fd0 <__gethex+0xc4>
 8011032:	4631      	mov	r1, r6
 8011034:	e7de      	b.n	8010ff4 <__gethex+0xe8>
 8011036:	eba6 0309 	sub.w	r3, r6, r9
 801103a:	3b01      	subs	r3, #1
 801103c:	4629      	mov	r1, r5
 801103e:	2b07      	cmp	r3, #7
 8011040:	dc0a      	bgt.n	8011058 <__gethex+0x14c>
 8011042:	9801      	ldr	r0, [sp, #4]
 8011044:	f7fd ff84 	bl	800ef50 <_Balloc>
 8011048:	4604      	mov	r4, r0
 801104a:	b940      	cbnz	r0, 801105e <__gethex+0x152>
 801104c:	4b5c      	ldr	r3, [pc, #368]	@ (80111c0 <__gethex+0x2b4>)
 801104e:	4602      	mov	r2, r0
 8011050:	21e4      	movs	r1, #228	@ 0xe4
 8011052:	485c      	ldr	r0, [pc, #368]	@ (80111c4 <__gethex+0x2b8>)
 8011054:	f7ff fec0 	bl	8010dd8 <__assert_func>
 8011058:	3101      	adds	r1, #1
 801105a:	105b      	asrs	r3, r3, #1
 801105c:	e7ef      	b.n	801103e <__gethex+0x132>
 801105e:	f100 0a14 	add.w	sl, r0, #20
 8011062:	2300      	movs	r3, #0
 8011064:	4655      	mov	r5, sl
 8011066:	469b      	mov	fp, r3
 8011068:	45b1      	cmp	r9, r6
 801106a:	d337      	bcc.n	80110dc <__gethex+0x1d0>
 801106c:	f845 bb04 	str.w	fp, [r5], #4
 8011070:	eba5 050a 	sub.w	r5, r5, sl
 8011074:	10ad      	asrs	r5, r5, #2
 8011076:	6125      	str	r5, [r4, #16]
 8011078:	4658      	mov	r0, fp
 801107a:	f7fe f85b 	bl	800f134 <__hi0bits>
 801107e:	016d      	lsls	r5, r5, #5
 8011080:	f8d8 6000 	ldr.w	r6, [r8]
 8011084:	1a2d      	subs	r5, r5, r0
 8011086:	42b5      	cmp	r5, r6
 8011088:	dd54      	ble.n	8011134 <__gethex+0x228>
 801108a:	1bad      	subs	r5, r5, r6
 801108c:	4629      	mov	r1, r5
 801108e:	4620      	mov	r0, r4
 8011090:	f7fe fbef 	bl	800f872 <__any_on>
 8011094:	4681      	mov	r9, r0
 8011096:	b178      	cbz	r0, 80110b8 <__gethex+0x1ac>
 8011098:	1e6b      	subs	r3, r5, #1
 801109a:	1159      	asrs	r1, r3, #5
 801109c:	f003 021f 	and.w	r2, r3, #31
 80110a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80110a4:	f04f 0901 	mov.w	r9, #1
 80110a8:	fa09 f202 	lsl.w	r2, r9, r2
 80110ac:	420a      	tst	r2, r1
 80110ae:	d003      	beq.n	80110b8 <__gethex+0x1ac>
 80110b0:	454b      	cmp	r3, r9
 80110b2:	dc36      	bgt.n	8011122 <__gethex+0x216>
 80110b4:	f04f 0902 	mov.w	r9, #2
 80110b8:	4629      	mov	r1, r5
 80110ba:	4620      	mov	r0, r4
 80110bc:	f7ff febe 	bl	8010e3c <rshift>
 80110c0:	442f      	add	r7, r5
 80110c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80110c6:	42bb      	cmp	r3, r7
 80110c8:	da42      	bge.n	8011150 <__gethex+0x244>
 80110ca:	9801      	ldr	r0, [sp, #4]
 80110cc:	4621      	mov	r1, r4
 80110ce:	f7fd ff7f 	bl	800efd0 <_Bfree>
 80110d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80110d4:	2300      	movs	r3, #0
 80110d6:	6013      	str	r3, [r2, #0]
 80110d8:	25a3      	movs	r5, #163	@ 0xa3
 80110da:	e793      	b.n	8011004 <__gethex+0xf8>
 80110dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80110e0:	2a2e      	cmp	r2, #46	@ 0x2e
 80110e2:	d012      	beq.n	801110a <__gethex+0x1fe>
 80110e4:	2b20      	cmp	r3, #32
 80110e6:	d104      	bne.n	80110f2 <__gethex+0x1e6>
 80110e8:	f845 bb04 	str.w	fp, [r5], #4
 80110ec:	f04f 0b00 	mov.w	fp, #0
 80110f0:	465b      	mov	r3, fp
 80110f2:	7830      	ldrb	r0, [r6, #0]
 80110f4:	9303      	str	r3, [sp, #12]
 80110f6:	f7ff fef3 	bl	8010ee0 <__hexdig_fun>
 80110fa:	9b03      	ldr	r3, [sp, #12]
 80110fc:	f000 000f 	and.w	r0, r0, #15
 8011100:	4098      	lsls	r0, r3
 8011102:	ea4b 0b00 	orr.w	fp, fp, r0
 8011106:	3304      	adds	r3, #4
 8011108:	e7ae      	b.n	8011068 <__gethex+0x15c>
 801110a:	45b1      	cmp	r9, r6
 801110c:	d8ea      	bhi.n	80110e4 <__gethex+0x1d8>
 801110e:	492b      	ldr	r1, [pc, #172]	@ (80111bc <__gethex+0x2b0>)
 8011110:	9303      	str	r3, [sp, #12]
 8011112:	2201      	movs	r2, #1
 8011114:	4630      	mov	r0, r6
 8011116:	f7ff fe13 	bl	8010d40 <strncmp>
 801111a:	9b03      	ldr	r3, [sp, #12]
 801111c:	2800      	cmp	r0, #0
 801111e:	d1e1      	bne.n	80110e4 <__gethex+0x1d8>
 8011120:	e7a2      	b.n	8011068 <__gethex+0x15c>
 8011122:	1ea9      	subs	r1, r5, #2
 8011124:	4620      	mov	r0, r4
 8011126:	f7fe fba4 	bl	800f872 <__any_on>
 801112a:	2800      	cmp	r0, #0
 801112c:	d0c2      	beq.n	80110b4 <__gethex+0x1a8>
 801112e:	f04f 0903 	mov.w	r9, #3
 8011132:	e7c1      	b.n	80110b8 <__gethex+0x1ac>
 8011134:	da09      	bge.n	801114a <__gethex+0x23e>
 8011136:	1b75      	subs	r5, r6, r5
 8011138:	4621      	mov	r1, r4
 801113a:	9801      	ldr	r0, [sp, #4]
 801113c:	462a      	mov	r2, r5
 801113e:	f7fe f95f 	bl	800f400 <__lshift>
 8011142:	1b7f      	subs	r7, r7, r5
 8011144:	4604      	mov	r4, r0
 8011146:	f100 0a14 	add.w	sl, r0, #20
 801114a:	f04f 0900 	mov.w	r9, #0
 801114e:	e7b8      	b.n	80110c2 <__gethex+0x1b6>
 8011150:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011154:	42bd      	cmp	r5, r7
 8011156:	dd6f      	ble.n	8011238 <__gethex+0x32c>
 8011158:	1bed      	subs	r5, r5, r7
 801115a:	42ae      	cmp	r6, r5
 801115c:	dc34      	bgt.n	80111c8 <__gethex+0x2bc>
 801115e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011162:	2b02      	cmp	r3, #2
 8011164:	d022      	beq.n	80111ac <__gethex+0x2a0>
 8011166:	2b03      	cmp	r3, #3
 8011168:	d024      	beq.n	80111b4 <__gethex+0x2a8>
 801116a:	2b01      	cmp	r3, #1
 801116c:	d115      	bne.n	801119a <__gethex+0x28e>
 801116e:	42ae      	cmp	r6, r5
 8011170:	d113      	bne.n	801119a <__gethex+0x28e>
 8011172:	2e01      	cmp	r6, #1
 8011174:	d10b      	bne.n	801118e <__gethex+0x282>
 8011176:	9a02      	ldr	r2, [sp, #8]
 8011178:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801117c:	6013      	str	r3, [r2, #0]
 801117e:	2301      	movs	r3, #1
 8011180:	6123      	str	r3, [r4, #16]
 8011182:	f8ca 3000 	str.w	r3, [sl]
 8011186:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011188:	2562      	movs	r5, #98	@ 0x62
 801118a:	601c      	str	r4, [r3, #0]
 801118c:	e73a      	b.n	8011004 <__gethex+0xf8>
 801118e:	1e71      	subs	r1, r6, #1
 8011190:	4620      	mov	r0, r4
 8011192:	f7fe fb6e 	bl	800f872 <__any_on>
 8011196:	2800      	cmp	r0, #0
 8011198:	d1ed      	bne.n	8011176 <__gethex+0x26a>
 801119a:	9801      	ldr	r0, [sp, #4]
 801119c:	4621      	mov	r1, r4
 801119e:	f7fd ff17 	bl	800efd0 <_Bfree>
 80111a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80111a4:	2300      	movs	r3, #0
 80111a6:	6013      	str	r3, [r2, #0]
 80111a8:	2550      	movs	r5, #80	@ 0x50
 80111aa:	e72b      	b.n	8011004 <__gethex+0xf8>
 80111ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d1f3      	bne.n	801119a <__gethex+0x28e>
 80111b2:	e7e0      	b.n	8011176 <__gethex+0x26a>
 80111b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d1dd      	bne.n	8011176 <__gethex+0x26a>
 80111ba:	e7ee      	b.n	801119a <__gethex+0x28e>
 80111bc:	08011be0 	.word	0x08011be0
 80111c0:	08011a75 	.word	0x08011a75
 80111c4:	08011d8e 	.word	0x08011d8e
 80111c8:	1e6f      	subs	r7, r5, #1
 80111ca:	f1b9 0f00 	cmp.w	r9, #0
 80111ce:	d130      	bne.n	8011232 <__gethex+0x326>
 80111d0:	b127      	cbz	r7, 80111dc <__gethex+0x2d0>
 80111d2:	4639      	mov	r1, r7
 80111d4:	4620      	mov	r0, r4
 80111d6:	f7fe fb4c 	bl	800f872 <__any_on>
 80111da:	4681      	mov	r9, r0
 80111dc:	117a      	asrs	r2, r7, #5
 80111de:	2301      	movs	r3, #1
 80111e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80111e4:	f007 071f 	and.w	r7, r7, #31
 80111e8:	40bb      	lsls	r3, r7
 80111ea:	4213      	tst	r3, r2
 80111ec:	4629      	mov	r1, r5
 80111ee:	4620      	mov	r0, r4
 80111f0:	bf18      	it	ne
 80111f2:	f049 0902 	orrne.w	r9, r9, #2
 80111f6:	f7ff fe21 	bl	8010e3c <rshift>
 80111fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80111fe:	1b76      	subs	r6, r6, r5
 8011200:	2502      	movs	r5, #2
 8011202:	f1b9 0f00 	cmp.w	r9, #0
 8011206:	d047      	beq.n	8011298 <__gethex+0x38c>
 8011208:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801120c:	2b02      	cmp	r3, #2
 801120e:	d015      	beq.n	801123c <__gethex+0x330>
 8011210:	2b03      	cmp	r3, #3
 8011212:	d017      	beq.n	8011244 <__gethex+0x338>
 8011214:	2b01      	cmp	r3, #1
 8011216:	d109      	bne.n	801122c <__gethex+0x320>
 8011218:	f019 0f02 	tst.w	r9, #2
 801121c:	d006      	beq.n	801122c <__gethex+0x320>
 801121e:	f8da 3000 	ldr.w	r3, [sl]
 8011222:	ea49 0903 	orr.w	r9, r9, r3
 8011226:	f019 0f01 	tst.w	r9, #1
 801122a:	d10e      	bne.n	801124a <__gethex+0x33e>
 801122c:	f045 0510 	orr.w	r5, r5, #16
 8011230:	e032      	b.n	8011298 <__gethex+0x38c>
 8011232:	f04f 0901 	mov.w	r9, #1
 8011236:	e7d1      	b.n	80111dc <__gethex+0x2d0>
 8011238:	2501      	movs	r5, #1
 801123a:	e7e2      	b.n	8011202 <__gethex+0x2f6>
 801123c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801123e:	f1c3 0301 	rsb	r3, r3, #1
 8011242:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011246:	2b00      	cmp	r3, #0
 8011248:	d0f0      	beq.n	801122c <__gethex+0x320>
 801124a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801124e:	f104 0314 	add.w	r3, r4, #20
 8011252:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011256:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801125a:	f04f 0c00 	mov.w	ip, #0
 801125e:	4618      	mov	r0, r3
 8011260:	f853 2b04 	ldr.w	r2, [r3], #4
 8011264:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011268:	d01b      	beq.n	80112a2 <__gethex+0x396>
 801126a:	3201      	adds	r2, #1
 801126c:	6002      	str	r2, [r0, #0]
 801126e:	2d02      	cmp	r5, #2
 8011270:	f104 0314 	add.w	r3, r4, #20
 8011274:	d13c      	bne.n	80112f0 <__gethex+0x3e4>
 8011276:	f8d8 2000 	ldr.w	r2, [r8]
 801127a:	3a01      	subs	r2, #1
 801127c:	42b2      	cmp	r2, r6
 801127e:	d109      	bne.n	8011294 <__gethex+0x388>
 8011280:	1171      	asrs	r1, r6, #5
 8011282:	2201      	movs	r2, #1
 8011284:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011288:	f006 061f 	and.w	r6, r6, #31
 801128c:	fa02 f606 	lsl.w	r6, r2, r6
 8011290:	421e      	tst	r6, r3
 8011292:	d13a      	bne.n	801130a <__gethex+0x3fe>
 8011294:	f045 0520 	orr.w	r5, r5, #32
 8011298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801129a:	601c      	str	r4, [r3, #0]
 801129c:	9b02      	ldr	r3, [sp, #8]
 801129e:	601f      	str	r7, [r3, #0]
 80112a0:	e6b0      	b.n	8011004 <__gethex+0xf8>
 80112a2:	4299      	cmp	r1, r3
 80112a4:	f843 cc04 	str.w	ip, [r3, #-4]
 80112a8:	d8d9      	bhi.n	801125e <__gethex+0x352>
 80112aa:	68a3      	ldr	r3, [r4, #8]
 80112ac:	459b      	cmp	fp, r3
 80112ae:	db17      	blt.n	80112e0 <__gethex+0x3d4>
 80112b0:	6861      	ldr	r1, [r4, #4]
 80112b2:	9801      	ldr	r0, [sp, #4]
 80112b4:	3101      	adds	r1, #1
 80112b6:	f7fd fe4b 	bl	800ef50 <_Balloc>
 80112ba:	4681      	mov	r9, r0
 80112bc:	b918      	cbnz	r0, 80112c6 <__gethex+0x3ba>
 80112be:	4b1a      	ldr	r3, [pc, #104]	@ (8011328 <__gethex+0x41c>)
 80112c0:	4602      	mov	r2, r0
 80112c2:	2184      	movs	r1, #132	@ 0x84
 80112c4:	e6c5      	b.n	8011052 <__gethex+0x146>
 80112c6:	6922      	ldr	r2, [r4, #16]
 80112c8:	3202      	adds	r2, #2
 80112ca:	f104 010c 	add.w	r1, r4, #12
 80112ce:	0092      	lsls	r2, r2, #2
 80112d0:	300c      	adds	r0, #12
 80112d2:	f7fc fedc 	bl	800e08e <memcpy>
 80112d6:	4621      	mov	r1, r4
 80112d8:	9801      	ldr	r0, [sp, #4]
 80112da:	f7fd fe79 	bl	800efd0 <_Bfree>
 80112de:	464c      	mov	r4, r9
 80112e0:	6923      	ldr	r3, [r4, #16]
 80112e2:	1c5a      	adds	r2, r3, #1
 80112e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80112e8:	6122      	str	r2, [r4, #16]
 80112ea:	2201      	movs	r2, #1
 80112ec:	615a      	str	r2, [r3, #20]
 80112ee:	e7be      	b.n	801126e <__gethex+0x362>
 80112f0:	6922      	ldr	r2, [r4, #16]
 80112f2:	455a      	cmp	r2, fp
 80112f4:	dd0b      	ble.n	801130e <__gethex+0x402>
 80112f6:	2101      	movs	r1, #1
 80112f8:	4620      	mov	r0, r4
 80112fa:	f7ff fd9f 	bl	8010e3c <rshift>
 80112fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011302:	3701      	adds	r7, #1
 8011304:	42bb      	cmp	r3, r7
 8011306:	f6ff aee0 	blt.w	80110ca <__gethex+0x1be>
 801130a:	2501      	movs	r5, #1
 801130c:	e7c2      	b.n	8011294 <__gethex+0x388>
 801130e:	f016 061f 	ands.w	r6, r6, #31
 8011312:	d0fa      	beq.n	801130a <__gethex+0x3fe>
 8011314:	4453      	add	r3, sl
 8011316:	f1c6 0620 	rsb	r6, r6, #32
 801131a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801131e:	f7fd ff09 	bl	800f134 <__hi0bits>
 8011322:	42b0      	cmp	r0, r6
 8011324:	dbe7      	blt.n	80112f6 <__gethex+0x3ea>
 8011326:	e7f0      	b.n	801130a <__gethex+0x3fe>
 8011328:	08011a75 	.word	0x08011a75

0801132c <L_shift>:
 801132c:	f1c2 0208 	rsb	r2, r2, #8
 8011330:	0092      	lsls	r2, r2, #2
 8011332:	b570      	push	{r4, r5, r6, lr}
 8011334:	f1c2 0620 	rsb	r6, r2, #32
 8011338:	6843      	ldr	r3, [r0, #4]
 801133a:	6804      	ldr	r4, [r0, #0]
 801133c:	fa03 f506 	lsl.w	r5, r3, r6
 8011340:	432c      	orrs	r4, r5
 8011342:	40d3      	lsrs	r3, r2
 8011344:	6004      	str	r4, [r0, #0]
 8011346:	f840 3f04 	str.w	r3, [r0, #4]!
 801134a:	4288      	cmp	r0, r1
 801134c:	d3f4      	bcc.n	8011338 <L_shift+0xc>
 801134e:	bd70      	pop	{r4, r5, r6, pc}

08011350 <__match>:
 8011350:	b530      	push	{r4, r5, lr}
 8011352:	6803      	ldr	r3, [r0, #0]
 8011354:	3301      	adds	r3, #1
 8011356:	f811 4b01 	ldrb.w	r4, [r1], #1
 801135a:	b914      	cbnz	r4, 8011362 <__match+0x12>
 801135c:	6003      	str	r3, [r0, #0]
 801135e:	2001      	movs	r0, #1
 8011360:	bd30      	pop	{r4, r5, pc}
 8011362:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011366:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801136a:	2d19      	cmp	r5, #25
 801136c:	bf98      	it	ls
 801136e:	3220      	addls	r2, #32
 8011370:	42a2      	cmp	r2, r4
 8011372:	d0f0      	beq.n	8011356 <__match+0x6>
 8011374:	2000      	movs	r0, #0
 8011376:	e7f3      	b.n	8011360 <__match+0x10>

08011378 <__hexnan>:
 8011378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801137c:	680b      	ldr	r3, [r1, #0]
 801137e:	6801      	ldr	r1, [r0, #0]
 8011380:	115e      	asrs	r6, r3, #5
 8011382:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011386:	f013 031f 	ands.w	r3, r3, #31
 801138a:	b087      	sub	sp, #28
 801138c:	bf18      	it	ne
 801138e:	3604      	addne	r6, #4
 8011390:	2500      	movs	r5, #0
 8011392:	1f37      	subs	r7, r6, #4
 8011394:	4682      	mov	sl, r0
 8011396:	4690      	mov	r8, r2
 8011398:	9301      	str	r3, [sp, #4]
 801139a:	f846 5c04 	str.w	r5, [r6, #-4]
 801139e:	46b9      	mov	r9, r7
 80113a0:	463c      	mov	r4, r7
 80113a2:	9502      	str	r5, [sp, #8]
 80113a4:	46ab      	mov	fp, r5
 80113a6:	784a      	ldrb	r2, [r1, #1]
 80113a8:	1c4b      	adds	r3, r1, #1
 80113aa:	9303      	str	r3, [sp, #12]
 80113ac:	b342      	cbz	r2, 8011400 <__hexnan+0x88>
 80113ae:	4610      	mov	r0, r2
 80113b0:	9105      	str	r1, [sp, #20]
 80113b2:	9204      	str	r2, [sp, #16]
 80113b4:	f7ff fd94 	bl	8010ee0 <__hexdig_fun>
 80113b8:	2800      	cmp	r0, #0
 80113ba:	d151      	bne.n	8011460 <__hexnan+0xe8>
 80113bc:	9a04      	ldr	r2, [sp, #16]
 80113be:	9905      	ldr	r1, [sp, #20]
 80113c0:	2a20      	cmp	r2, #32
 80113c2:	d818      	bhi.n	80113f6 <__hexnan+0x7e>
 80113c4:	9b02      	ldr	r3, [sp, #8]
 80113c6:	459b      	cmp	fp, r3
 80113c8:	dd13      	ble.n	80113f2 <__hexnan+0x7a>
 80113ca:	454c      	cmp	r4, r9
 80113cc:	d206      	bcs.n	80113dc <__hexnan+0x64>
 80113ce:	2d07      	cmp	r5, #7
 80113d0:	dc04      	bgt.n	80113dc <__hexnan+0x64>
 80113d2:	462a      	mov	r2, r5
 80113d4:	4649      	mov	r1, r9
 80113d6:	4620      	mov	r0, r4
 80113d8:	f7ff ffa8 	bl	801132c <L_shift>
 80113dc:	4544      	cmp	r4, r8
 80113de:	d952      	bls.n	8011486 <__hexnan+0x10e>
 80113e0:	2300      	movs	r3, #0
 80113e2:	f1a4 0904 	sub.w	r9, r4, #4
 80113e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80113ea:	f8cd b008 	str.w	fp, [sp, #8]
 80113ee:	464c      	mov	r4, r9
 80113f0:	461d      	mov	r5, r3
 80113f2:	9903      	ldr	r1, [sp, #12]
 80113f4:	e7d7      	b.n	80113a6 <__hexnan+0x2e>
 80113f6:	2a29      	cmp	r2, #41	@ 0x29
 80113f8:	d157      	bne.n	80114aa <__hexnan+0x132>
 80113fa:	3102      	adds	r1, #2
 80113fc:	f8ca 1000 	str.w	r1, [sl]
 8011400:	f1bb 0f00 	cmp.w	fp, #0
 8011404:	d051      	beq.n	80114aa <__hexnan+0x132>
 8011406:	454c      	cmp	r4, r9
 8011408:	d206      	bcs.n	8011418 <__hexnan+0xa0>
 801140a:	2d07      	cmp	r5, #7
 801140c:	dc04      	bgt.n	8011418 <__hexnan+0xa0>
 801140e:	462a      	mov	r2, r5
 8011410:	4649      	mov	r1, r9
 8011412:	4620      	mov	r0, r4
 8011414:	f7ff ff8a 	bl	801132c <L_shift>
 8011418:	4544      	cmp	r4, r8
 801141a:	d936      	bls.n	801148a <__hexnan+0x112>
 801141c:	f1a8 0204 	sub.w	r2, r8, #4
 8011420:	4623      	mov	r3, r4
 8011422:	f853 1b04 	ldr.w	r1, [r3], #4
 8011426:	f842 1f04 	str.w	r1, [r2, #4]!
 801142a:	429f      	cmp	r7, r3
 801142c:	d2f9      	bcs.n	8011422 <__hexnan+0xaa>
 801142e:	1b3b      	subs	r3, r7, r4
 8011430:	f023 0303 	bic.w	r3, r3, #3
 8011434:	3304      	adds	r3, #4
 8011436:	3401      	adds	r4, #1
 8011438:	3e03      	subs	r6, #3
 801143a:	42b4      	cmp	r4, r6
 801143c:	bf88      	it	hi
 801143e:	2304      	movhi	r3, #4
 8011440:	4443      	add	r3, r8
 8011442:	2200      	movs	r2, #0
 8011444:	f843 2b04 	str.w	r2, [r3], #4
 8011448:	429f      	cmp	r7, r3
 801144a:	d2fb      	bcs.n	8011444 <__hexnan+0xcc>
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	b91b      	cbnz	r3, 8011458 <__hexnan+0xe0>
 8011450:	4547      	cmp	r7, r8
 8011452:	d128      	bne.n	80114a6 <__hexnan+0x12e>
 8011454:	2301      	movs	r3, #1
 8011456:	603b      	str	r3, [r7, #0]
 8011458:	2005      	movs	r0, #5
 801145a:	b007      	add	sp, #28
 801145c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011460:	3501      	adds	r5, #1
 8011462:	2d08      	cmp	r5, #8
 8011464:	f10b 0b01 	add.w	fp, fp, #1
 8011468:	dd06      	ble.n	8011478 <__hexnan+0x100>
 801146a:	4544      	cmp	r4, r8
 801146c:	d9c1      	bls.n	80113f2 <__hexnan+0x7a>
 801146e:	2300      	movs	r3, #0
 8011470:	f844 3c04 	str.w	r3, [r4, #-4]
 8011474:	2501      	movs	r5, #1
 8011476:	3c04      	subs	r4, #4
 8011478:	6822      	ldr	r2, [r4, #0]
 801147a:	f000 000f 	and.w	r0, r0, #15
 801147e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011482:	6020      	str	r0, [r4, #0]
 8011484:	e7b5      	b.n	80113f2 <__hexnan+0x7a>
 8011486:	2508      	movs	r5, #8
 8011488:	e7b3      	b.n	80113f2 <__hexnan+0x7a>
 801148a:	9b01      	ldr	r3, [sp, #4]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d0dd      	beq.n	801144c <__hexnan+0xd4>
 8011490:	f1c3 0320 	rsb	r3, r3, #32
 8011494:	f04f 32ff 	mov.w	r2, #4294967295
 8011498:	40da      	lsrs	r2, r3
 801149a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801149e:	4013      	ands	r3, r2
 80114a0:	f846 3c04 	str.w	r3, [r6, #-4]
 80114a4:	e7d2      	b.n	801144c <__hexnan+0xd4>
 80114a6:	3f04      	subs	r7, #4
 80114a8:	e7d0      	b.n	801144c <__hexnan+0xd4>
 80114aa:	2004      	movs	r0, #4
 80114ac:	e7d5      	b.n	801145a <__hexnan+0xe2>

080114ae <__ascii_mbtowc>:
 80114ae:	b082      	sub	sp, #8
 80114b0:	b901      	cbnz	r1, 80114b4 <__ascii_mbtowc+0x6>
 80114b2:	a901      	add	r1, sp, #4
 80114b4:	b142      	cbz	r2, 80114c8 <__ascii_mbtowc+0x1a>
 80114b6:	b14b      	cbz	r3, 80114cc <__ascii_mbtowc+0x1e>
 80114b8:	7813      	ldrb	r3, [r2, #0]
 80114ba:	600b      	str	r3, [r1, #0]
 80114bc:	7812      	ldrb	r2, [r2, #0]
 80114be:	1e10      	subs	r0, r2, #0
 80114c0:	bf18      	it	ne
 80114c2:	2001      	movne	r0, #1
 80114c4:	b002      	add	sp, #8
 80114c6:	4770      	bx	lr
 80114c8:	4610      	mov	r0, r2
 80114ca:	e7fb      	b.n	80114c4 <__ascii_mbtowc+0x16>
 80114cc:	f06f 0001 	mvn.w	r0, #1
 80114d0:	e7f8      	b.n	80114c4 <__ascii_mbtowc+0x16>

080114d2 <_realloc_r>:
 80114d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114d6:	4680      	mov	r8, r0
 80114d8:	4615      	mov	r5, r2
 80114da:	460c      	mov	r4, r1
 80114dc:	b921      	cbnz	r1, 80114e8 <_realloc_r+0x16>
 80114de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80114e2:	4611      	mov	r1, r2
 80114e4:	f7fd bca8 	b.w	800ee38 <_malloc_r>
 80114e8:	b92a      	cbnz	r2, 80114f6 <_realloc_r+0x24>
 80114ea:	f7fd fc31 	bl	800ed50 <_free_r>
 80114ee:	2400      	movs	r4, #0
 80114f0:	4620      	mov	r0, r4
 80114f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114f6:	f000 f840 	bl	801157a <_malloc_usable_size_r>
 80114fa:	4285      	cmp	r5, r0
 80114fc:	4606      	mov	r6, r0
 80114fe:	d802      	bhi.n	8011506 <_realloc_r+0x34>
 8011500:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011504:	d8f4      	bhi.n	80114f0 <_realloc_r+0x1e>
 8011506:	4629      	mov	r1, r5
 8011508:	4640      	mov	r0, r8
 801150a:	f7fd fc95 	bl	800ee38 <_malloc_r>
 801150e:	4607      	mov	r7, r0
 8011510:	2800      	cmp	r0, #0
 8011512:	d0ec      	beq.n	80114ee <_realloc_r+0x1c>
 8011514:	42b5      	cmp	r5, r6
 8011516:	462a      	mov	r2, r5
 8011518:	4621      	mov	r1, r4
 801151a:	bf28      	it	cs
 801151c:	4632      	movcs	r2, r6
 801151e:	f7fc fdb6 	bl	800e08e <memcpy>
 8011522:	4621      	mov	r1, r4
 8011524:	4640      	mov	r0, r8
 8011526:	f7fd fc13 	bl	800ed50 <_free_r>
 801152a:	463c      	mov	r4, r7
 801152c:	e7e0      	b.n	80114f0 <_realloc_r+0x1e>

0801152e <__ascii_wctomb>:
 801152e:	4603      	mov	r3, r0
 8011530:	4608      	mov	r0, r1
 8011532:	b141      	cbz	r1, 8011546 <__ascii_wctomb+0x18>
 8011534:	2aff      	cmp	r2, #255	@ 0xff
 8011536:	d904      	bls.n	8011542 <__ascii_wctomb+0x14>
 8011538:	228a      	movs	r2, #138	@ 0x8a
 801153a:	601a      	str	r2, [r3, #0]
 801153c:	f04f 30ff 	mov.w	r0, #4294967295
 8011540:	4770      	bx	lr
 8011542:	700a      	strb	r2, [r1, #0]
 8011544:	2001      	movs	r0, #1
 8011546:	4770      	bx	lr

08011548 <fiprintf>:
 8011548:	b40e      	push	{r1, r2, r3}
 801154a:	b503      	push	{r0, r1, lr}
 801154c:	4601      	mov	r1, r0
 801154e:	ab03      	add	r3, sp, #12
 8011550:	4805      	ldr	r0, [pc, #20]	@ (8011568 <fiprintf+0x20>)
 8011552:	f853 2b04 	ldr.w	r2, [r3], #4
 8011556:	6800      	ldr	r0, [r0, #0]
 8011558:	9301      	str	r3, [sp, #4]
 801155a:	f7ff f9b1 	bl	80108c0 <_vfiprintf_r>
 801155e:	b002      	add	sp, #8
 8011560:	f85d eb04 	ldr.w	lr, [sp], #4
 8011564:	b003      	add	sp, #12
 8011566:	4770      	bx	lr
 8011568:	20000054 	.word	0x20000054

0801156c <abort>:
 801156c:	b508      	push	{r3, lr}
 801156e:	2006      	movs	r0, #6
 8011570:	f000 f834 	bl	80115dc <raise>
 8011574:	2001      	movs	r0, #1
 8011576:	f7f1 ff1d 	bl	80033b4 <_exit>

0801157a <_malloc_usable_size_r>:
 801157a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801157e:	1f18      	subs	r0, r3, #4
 8011580:	2b00      	cmp	r3, #0
 8011582:	bfbc      	itt	lt
 8011584:	580b      	ldrlt	r3, [r1, r0]
 8011586:	18c0      	addlt	r0, r0, r3
 8011588:	4770      	bx	lr

0801158a <_raise_r>:
 801158a:	291f      	cmp	r1, #31
 801158c:	b538      	push	{r3, r4, r5, lr}
 801158e:	4605      	mov	r5, r0
 8011590:	460c      	mov	r4, r1
 8011592:	d904      	bls.n	801159e <_raise_r+0x14>
 8011594:	2316      	movs	r3, #22
 8011596:	6003      	str	r3, [r0, #0]
 8011598:	f04f 30ff 	mov.w	r0, #4294967295
 801159c:	bd38      	pop	{r3, r4, r5, pc}
 801159e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80115a0:	b112      	cbz	r2, 80115a8 <_raise_r+0x1e>
 80115a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80115a6:	b94b      	cbnz	r3, 80115bc <_raise_r+0x32>
 80115a8:	4628      	mov	r0, r5
 80115aa:	f000 f831 	bl	8011610 <_getpid_r>
 80115ae:	4622      	mov	r2, r4
 80115b0:	4601      	mov	r1, r0
 80115b2:	4628      	mov	r0, r5
 80115b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115b8:	f000 b818 	b.w	80115ec <_kill_r>
 80115bc:	2b01      	cmp	r3, #1
 80115be:	d00a      	beq.n	80115d6 <_raise_r+0x4c>
 80115c0:	1c59      	adds	r1, r3, #1
 80115c2:	d103      	bne.n	80115cc <_raise_r+0x42>
 80115c4:	2316      	movs	r3, #22
 80115c6:	6003      	str	r3, [r0, #0]
 80115c8:	2001      	movs	r0, #1
 80115ca:	e7e7      	b.n	801159c <_raise_r+0x12>
 80115cc:	2100      	movs	r1, #0
 80115ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80115d2:	4620      	mov	r0, r4
 80115d4:	4798      	blx	r3
 80115d6:	2000      	movs	r0, #0
 80115d8:	e7e0      	b.n	801159c <_raise_r+0x12>
	...

080115dc <raise>:
 80115dc:	4b02      	ldr	r3, [pc, #8]	@ (80115e8 <raise+0xc>)
 80115de:	4601      	mov	r1, r0
 80115e0:	6818      	ldr	r0, [r3, #0]
 80115e2:	f7ff bfd2 	b.w	801158a <_raise_r>
 80115e6:	bf00      	nop
 80115e8:	20000054 	.word	0x20000054

080115ec <_kill_r>:
 80115ec:	b538      	push	{r3, r4, r5, lr}
 80115ee:	4d07      	ldr	r5, [pc, #28]	@ (801160c <_kill_r+0x20>)
 80115f0:	2300      	movs	r3, #0
 80115f2:	4604      	mov	r4, r0
 80115f4:	4608      	mov	r0, r1
 80115f6:	4611      	mov	r1, r2
 80115f8:	602b      	str	r3, [r5, #0]
 80115fa:	f7f1 fecb 	bl	8003394 <_kill>
 80115fe:	1c43      	adds	r3, r0, #1
 8011600:	d102      	bne.n	8011608 <_kill_r+0x1c>
 8011602:	682b      	ldr	r3, [r5, #0]
 8011604:	b103      	cbz	r3, 8011608 <_kill_r+0x1c>
 8011606:	6023      	str	r3, [r4, #0]
 8011608:	bd38      	pop	{r3, r4, r5, pc}
 801160a:	bf00      	nop
 801160c:	200010c4 	.word	0x200010c4

08011610 <_getpid_r>:
 8011610:	f7f1 beb8 	b.w	8003384 <_getpid>

08011614 <_init>:
 8011614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011616:	bf00      	nop
 8011618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801161a:	bc08      	pop	{r3}
 801161c:	469e      	mov	lr, r3
 801161e:	4770      	bx	lr

08011620 <_fini>:
 8011620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011622:	bf00      	nop
 8011624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011626:	bc08      	pop	{r3}
 8011628:	469e      	mov	lr, r3
 801162a:	4770      	bx	lr
