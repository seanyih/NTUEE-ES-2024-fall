
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e844  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800e9d8  0800e9d8  0000f9d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef00  0800ef00  0001020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef00  0800ef00  0000ff00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef08  0800ef08  0001020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef08  0800ef08  0000ff08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ef0c  0800ef0c  0000ff0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800ef10  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a24  2000020c  0800f11c  0001020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c30  0800f11c  00010c30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023ec0  00000000  00000000  0001023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004338  00000000  00000000  000340fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021c0  00000000  00000000  00038438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a56  00000000  00000000  0003a5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ccfc  00000000  00000000  0003c04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026906  00000000  00000000  00068d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115f28  00000000  00000000  0008f650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a5578  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a8a8  00000000  00000000  001a55bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001afe64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e9bc 	.word	0x0800e9bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	0800e9bc 	.word	0x0800e9bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fe8:	b088      	sub	sp, #32
 8000fea:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fec:	f001 ff38 	bl	8002e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff0:	f000 f854 	bl	800109c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ff4:	f000 f8b4 	bl	8001160 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff8:	f000 fb92 	bl	8001720 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000ffc:	f000 f954 	bl	80012a8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001000:	f000 f98a 	bl	8001318 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001004:	f000 f9c8 	bl	8001398 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001008:	f000 f9ec 	bl	80013e4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800100c:	f000 fafa 	bl	8001604 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001010:	f000 fb28 	bl	8001664 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001014:	f000 fb56 	bl	80016c4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001018:	f000 f8d0 	bl	80011bc <MX_ADC1_Init>
  MX_TIM2_Init();
 800101c:	f000 fa20 	bl	8001460 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001020:	f000 fa6c 	bl	80014fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init(); //initialize the accelerometer's BSP.
 8001024:	f001 fcf2 	bl	8002a0c <BSP_ACCELERO_Init>
  uint8_t t = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001028:	2115      	movs	r1, #21
 800102a:	20d4      	movs	r0, #212	@ 0xd4
 800102c:	f001 fcb2 	bl	8002994 <SENSOR_IO_Read>
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, t ^ 0x10);
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	f083 0310 	eor.w	r3, r3, #16
 800103a:	b2db      	uxtb	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	2115      	movs	r1, #21
 8001040:	20d4      	movs	r0, #212	@ 0xd4
 8001042:	f001 fc8d 	bl	8002960 <SENSOR_IO_Write>
  printf("start\r\n");
 8001046:	4813      	ldr	r0, [pc, #76]	@ (8001094 <main+0xb0>)
 8001048:	f00a f876 	bl	800b138 <puts>

  // Accelerometer test
  BSP_ACCELERO_SetReadMode(ACCELERO_READ_FLOAT);
 800104c:	2001      	movs	r0, #1
 800104e:	f001 fd33 	bl	8002ab8 <BSP_ACCELERO_SetReadMode>
  float pDataXYZ[3];
  BSP_ACCELERO_AccGetXYZ_Float(pDataXYZ);
 8001052:	463b      	mov	r3, r7
 8001054:	4618      	mov	r0, r3
 8001056:	f001 fd17 	bl	8002a88 <BSP_ACCELERO_AccGetXYZ_Float>
  printf("acceleration test: %f, %f, %f \r\n", pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa73 	bl	8000548 <__aeabi_f2d>
 8001062:	4680      	mov	r8, r0
 8001064:	4689      	mov	r9, r1
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa6d 	bl	8000548 <__aeabi_f2d>
 800106e:	4604      	mov	r4, r0
 8001070:	460d      	mov	r5, r1
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fa67 	bl	8000548 <__aeabi_f2d>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001082:	e9cd 4500 	strd	r4, r5, [sp]
 8001086:	4642      	mov	r2, r8
 8001088:	464b      	mov	r3, r9
 800108a:	4803      	ldr	r0, [pc, #12]	@ (8001098 <main+0xb4>)
 800108c:	f009 ffec 	bl	800b068 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <main+0xac>
 8001094:	0800e9d8 	.word	0x0800e9d8
 8001098:	0800e9e0 	.word	0x0800e9e0

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b096      	sub	sp, #88	@ 0x58
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	2244      	movs	r2, #68	@ 0x44
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f00a f944 	bl	800b338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	463b      	mov	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010c2:	f005 f83d 	bl	8006140 <HAL_PWREx_ControlVoltageScaling>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010cc:	f000 fe2a 	bl	8001d24 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010d0:	f005 f818 	bl	8006104 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010d4:	4b21      	ldr	r3, [pc, #132]	@ (800115c <SystemClock_Config+0xc0>)
 80010d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010da:	4a20      	ldr	r2, [pc, #128]	@ (800115c <SystemClock_Config+0xc0>)
 80010dc:	f023 0318 	bic.w	r3, r3, #24
 80010e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010e4:	2314      	movs	r3, #20
 80010e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010ec:	2301      	movs	r3, #1
 80010ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010f4:	2360      	movs	r3, #96	@ 0x60
 80010f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f8:	2302      	movs	r3, #2
 80010fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010fc:	2301      	movs	r3, #1
 80010fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001100:	2301      	movs	r3, #1
 8001102:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001104:	2328      	movs	r3, #40	@ 0x28
 8001106:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001108:	2307      	movs	r3, #7
 800110a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800110c:	2302      	movs	r3, #2
 800110e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001110:	2302      	movs	r3, #2
 8001112:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4618      	mov	r0, r3
 800111a:	f005 f933 	bl	8006384 <HAL_RCC_OscConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001124:	f000 fdfe 	bl	8001d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001128:	230f      	movs	r3, #15
 800112a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112c:	2303      	movs	r3, #3
 800112e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	2104      	movs	r1, #4
 8001140:	4618      	mov	r0, r3
 8001142:	f005 fcfb 	bl	8006b3c <HAL_RCC_ClockConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800114c:	f000 fdea 	bl	8001d24 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001150:	f006 fa02 	bl	8007558 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001154:	bf00      	nop
 8001156:	3758      	adds	r7, #88	@ 0x58
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40021000 	.word	0x40021000

08001160 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0a2      	sub	sp, #136	@ 0x88
 8001164:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001166:	463b      	mov	r3, r7
 8001168:	2288      	movs	r2, #136	@ 0x88
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f00a f8e3 	bl	800b338 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001172:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001176:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001178:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800117c:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800117e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001182:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001184:	2301      	movs	r3, #1
 8001186:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001188:	2301      	movs	r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800118c:	2318      	movs	r3, #24
 800118e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001190:	2307      	movs	r3, #7
 8001192:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001194:	2302      	movs	r3, #2
 8001196:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001198:	2302      	movs	r3, #2
 800119a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800119c:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 80011a0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a2:	463b      	mov	r3, r7
 80011a4:	4618      	mov	r0, r3
 80011a6:	f005 feed 	bl	8006f84 <HAL_RCCEx_PeriphCLKConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80011b0:	f000 fdb8 	bl	8001d24 <Error_Handler>
  }
}
 80011b4:	bf00      	nop
 80011b6:	3788      	adds	r7, #136	@ 0x88
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	@ 0x28
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
 80011dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011de:	4b2f      	ldr	r3, [pc, #188]	@ (800129c <MX_ADC1_Init+0xe0>)
 80011e0:	4a2f      	ldr	r2, [pc, #188]	@ (80012a0 <MX_ADC1_Init+0xe4>)
 80011e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011e4:	4b2d      	ldr	r3, [pc, #180]	@ (800129c <MX_ADC1_Init+0xe0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ea:	4b2c      	ldr	r3, [pc, #176]	@ (800129c <MX_ADC1_Init+0xe0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f0:	4b2a      	ldr	r3, [pc, #168]	@ (800129c <MX_ADC1_Init+0xe0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011f6:	4b29      	ldr	r3, [pc, #164]	@ (800129c <MX_ADC1_Init+0xe0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011fc:	4b27      	ldr	r3, [pc, #156]	@ (800129c <MX_ADC1_Init+0xe0>)
 80011fe:	2204      	movs	r2, #4
 8001200:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001202:	4b26      	ldr	r3, [pc, #152]	@ (800129c <MX_ADC1_Init+0xe0>)
 8001204:	2200      	movs	r2, #0
 8001206:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001208:	4b24      	ldr	r3, [pc, #144]	@ (800129c <MX_ADC1_Init+0xe0>)
 800120a:	2200      	movs	r2, #0
 800120c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800120e:	4b23      	ldr	r3, [pc, #140]	@ (800129c <MX_ADC1_Init+0xe0>)
 8001210:	2201      	movs	r2, #1
 8001212:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001214:	4b21      	ldr	r3, [pc, #132]	@ (800129c <MX_ADC1_Init+0xe0>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800121c:	4b1f      	ldr	r3, [pc, #124]	@ (800129c <MX_ADC1_Init+0xe0>)
 800121e:	2200      	movs	r2, #0
 8001220:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001222:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <MX_ADC1_Init+0xe0>)
 8001224:	2200      	movs	r2, #0
 8001226:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001228:	4b1c      	ldr	r3, [pc, #112]	@ (800129c <MX_ADC1_Init+0xe0>)
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001230:	4b1a      	ldr	r3, [pc, #104]	@ (800129c <MX_ADC1_Init+0xe0>)
 8001232:	2200      	movs	r2, #0
 8001234:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001236:	4b19      	ldr	r3, [pc, #100]	@ (800129c <MX_ADC1_Init+0xe0>)
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800123e:	4817      	ldr	r0, [pc, #92]	@ (800129c <MX_ADC1_Init+0xe0>)
 8001240:	f002 f89c 	bl	800337c <HAL_ADC_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800124a:	f000 fd6b 	bl	8001d24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	4619      	mov	r1, r3
 8001258:	4810      	ldr	r0, [pc, #64]	@ (800129c <MX_ADC1_Init+0xe0>)
 800125a:	f003 fa19 	bl	8004690 <HAL_ADCEx_MultiModeConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001264:	f000 fd5e 	bl	8001d24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001268:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <MX_ADC1_Init+0xe8>)
 800126a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800126c:	2306      	movs	r3, #6
 800126e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001274:	237f      	movs	r3, #127	@ 0x7f
 8001276:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001278:	2304      	movs	r3, #4
 800127a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	@ (800129c <MX_ADC1_Init+0xe0>)
 8001286:	f002 fd33 	bl	8003cf0 <HAL_ADC_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001290:	f000 fd48 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	@ 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000228 	.word	0x20000228
 80012a0:	50040000 	.word	0x50040000
 80012a4:	3ac04000 	.word	0x3ac04000

080012a8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80012ac:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <MX_DFSDM1_Init+0x68>)
 80012ae:	4a19      	ldr	r2, [pc, #100]	@ (8001314 <MX_DFSDM1_Init+0x6c>)
 80012b0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80012b2:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <MX_DFSDM1_Init+0x68>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80012b8:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <MX_DFSDM1_Init+0x68>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80012be:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <MX_DFSDM1_Init+0x68>)
 80012c0:	2202      	movs	r2, #2
 80012c2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <MX_DFSDM1_Init+0x68>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <MX_DFSDM1_Init+0x68>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <MX_DFSDM1_Init+0x68>)
 80012d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012d6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80012d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <MX_DFSDM1_Init+0x68>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80012de:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <MX_DFSDM1_Init+0x68>)
 80012e0:	2204      	movs	r2, #4
 80012e2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <MX_DFSDM1_Init+0x68>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <MX_DFSDM1_Init+0x68>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80012f0:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <MX_DFSDM1_Init+0x68>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <MX_DFSDM1_Init+0x68>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	@ (8001310 <MX_DFSDM1_Init+0x68>)
 80012fe:	f003 fb89 	bl	8004a14 <HAL_DFSDM_ChannelInit>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001308:	f000 fd0c 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	2000028c 	.word	0x2000028c
 8001314:	40016020 	.word	0x40016020

08001318 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800131c:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <MX_I2C2_Init+0x74>)
 800131e:	4a1c      	ldr	r2, [pc, #112]	@ (8001390 <MX_I2C2_Init+0x78>)
 8001320:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8001322:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <MX_I2C2_Init+0x74>)
 8001324:	4a1b      	ldr	r2, [pc, #108]	@ (8001394 <MX_I2C2_Init+0x7c>)
 8001326:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001328:	4b18      	ldr	r3, [pc, #96]	@ (800138c <MX_I2C2_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132e:	4b17      	ldr	r3, [pc, #92]	@ (800138c <MX_I2C2_Init+0x74>)
 8001330:	2201      	movs	r2, #1
 8001332:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001334:	4b15      	ldr	r3, [pc, #84]	@ (800138c <MX_I2C2_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800133a:	4b14      	ldr	r3, [pc, #80]	@ (800138c <MX_I2C2_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001340:	4b12      	ldr	r3, [pc, #72]	@ (800138c <MX_I2C2_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001346:	4b11      	ldr	r3, [pc, #68]	@ (800138c <MX_I2C2_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800134c:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <MX_I2C2_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001352:	480e      	ldr	r0, [pc, #56]	@ (800138c <MX_I2C2_Init+0x74>)
 8001354:	f003 ff52 	bl	80051fc <HAL_I2C_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800135e:	f000 fce1 	bl	8001d24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001362:	2100      	movs	r1, #0
 8001364:	4809      	ldr	r0, [pc, #36]	@ (800138c <MX_I2C2_Init+0x74>)
 8001366:	f004 fd03 	bl	8005d70 <HAL_I2CEx_ConfigAnalogFilter>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001370:	f000 fcd8 	bl	8001d24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001374:	2100      	movs	r1, #0
 8001376:	4805      	ldr	r0, [pc, #20]	@ (800138c <MX_I2C2_Init+0x74>)
 8001378:	f004 fd45 	bl	8005e06 <HAL_I2CEx_ConfigDigitalFilter>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001382:	f000 fccf 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200002c4 	.word	0x200002c4
 8001390:	40005800 	.word	0x40005800
 8001394:	10d19ce4 	.word	0x10d19ce4

08001398 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800139c:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <MX_QUADSPI_Init+0x44>)
 800139e:	4a10      	ldr	r2, [pc, #64]	@ (80013e0 <MX_QUADSPI_Init+0x48>)
 80013a0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <MX_QUADSPI_Init+0x44>)
 80013a4:	2202      	movs	r2, #2
 80013a6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <MX_QUADSPI_Init+0x44>)
 80013aa:	2204      	movs	r2, #4
 80013ac:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <MX_QUADSPI_Init+0x44>)
 80013b0:	2210      	movs	r2, #16
 80013b2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80013b4:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <MX_QUADSPI_Init+0x44>)
 80013b6:	2217      	movs	r2, #23
 80013b8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80013ba:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <MX_QUADSPI_Init+0x44>)
 80013bc:	2200      	movs	r2, #0
 80013be:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <MX_QUADSPI_Init+0x44>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_QUADSPI_Init+0x44>)
 80013c8:	f004 ff20 	bl	800620c <HAL_QSPI_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80013d2:	f000 fca7 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000318 	.word	0x20000318
 80013e0:	a0001000 	.word	0xa0001000

080013e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <MX_SPI3_Init+0x74>)
 80013ea:	4a1c      	ldr	r2, [pc, #112]	@ (800145c <MX_SPI3_Init+0x78>)
 80013ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <MX_SPI3_Init+0x74>)
 80013f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013f6:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <MX_SPI3_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80013fc:	4b16      	ldr	r3, [pc, #88]	@ (8001458 <MX_SPI3_Init+0x74>)
 80013fe:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001402:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001404:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <MX_SPI3_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800140a:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <MX_SPI3_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001410:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <MX_SPI3_Init+0x74>)
 8001412:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001416:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001418:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <MX_SPI3_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <MX_SPI3_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <MX_SPI3_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800142a:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <MX_SPI3_Init+0x74>)
 800142c:	2200      	movs	r2, #0
 800142e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001430:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <MX_SPI3_Init+0x74>)
 8001432:	2207      	movs	r2, #7
 8001434:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <MX_SPI3_Init+0x74>)
 8001438:	2200      	movs	r2, #0
 800143a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <MX_SPI3_Init+0x74>)
 800143e:	2208      	movs	r2, #8
 8001440:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_SPI3_Init+0x74>)
 8001444:	f006 fa6a 	bl	800791c <HAL_SPI_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800144e:	f000 fc69 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000035c 	.word	0x2000035c
 800145c:	40003c00 	.word	0x40003c00

08001460 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001466:	f107 0310 	add.w	r3, r7, #16
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800147e:	4b1e      	ldr	r3, [pc, #120]	@ (80014f8 <MX_TIM2_Init+0x98>)
 8001480:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001484:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4999;
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <MX_TIM2_Init+0x98>)
 8001488:	f241 3287 	movw	r2, #4999	@ 0x1387
 800148c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148e:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <MX_TIM2_Init+0x98>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 8001494:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <MX_TIM2_Init+0x98>)
 8001496:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800149a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149c:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <MX_TIM2_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <MX_TIM2_Init+0x98>)
 80014a4:	2280      	movs	r2, #128	@ 0x80
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014a8:	4813      	ldr	r0, [pc, #76]	@ (80014f8 <MX_TIM2_Init+0x98>)
 80014aa:	f006 fada 	bl	8007a62 <HAL_TIM_Base_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80014b4:	f000 fc36 	bl	8001d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014be:	f107 0310 	add.w	r3, r7, #16
 80014c2:	4619      	mov	r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	@ (80014f8 <MX_TIM2_Init+0x98>)
 80014c6:	f007 f877 	bl	80085b8 <HAL_TIM_ConfigClockSource>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80014d0:	f000 fc28 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <MX_TIM2_Init+0x98>)
 80014e2:	f007 fd97 	bl	8009014 <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80014ec:	f000 fc1a 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200003c0 	.word	0x200003c0

080014fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08e      	sub	sp, #56	@ 0x38
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001502:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151c:	463b      	mov	r3, r7
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
 800152a:	615a      	str	r2, [r3, #20]
 800152c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800152e:	4b33      	ldr	r3, [pc, #204]	@ (80015fc <MX_TIM3_Init+0x100>)
 8001530:	4a33      	ldr	r2, [pc, #204]	@ (8001600 <MX_TIM3_Init+0x104>)
 8001532:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8001534:	4b31      	ldr	r3, [pc, #196]	@ (80015fc <MX_TIM3_Init+0x100>)
 8001536:	2209      	movs	r2, #9
 8001538:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153a:	4b30      	ldr	r3, [pc, #192]	@ (80015fc <MX_TIM3_Init+0x100>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7999;
 8001540:	4b2e      	ldr	r3, [pc, #184]	@ (80015fc <MX_TIM3_Init+0x100>)
 8001542:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001546:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001548:	4b2c      	ldr	r3, [pc, #176]	@ (80015fc <MX_TIM3_Init+0x100>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800154e:	4b2b      	ldr	r3, [pc, #172]	@ (80015fc <MX_TIM3_Init+0x100>)
 8001550:	2280      	movs	r2, #128	@ 0x80
 8001552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001554:	4829      	ldr	r0, [pc, #164]	@ (80015fc <MX_TIM3_Init+0x100>)
 8001556:	f006 fa84 	bl	8007a62 <HAL_TIM_Base_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001560:	f000 fbe0 	bl	8001d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001564:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001568:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800156a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800156e:	4619      	mov	r1, r3
 8001570:	4822      	ldr	r0, [pc, #136]	@ (80015fc <MX_TIM3_Init+0x100>)
 8001572:	f007 f821 	bl	80085b8 <HAL_TIM_ConfigClockSource>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800157c:	f000 fbd2 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001580:	481e      	ldr	r0, [pc, #120]	@ (80015fc <MX_TIM3_Init+0x100>)
 8001582:	f006 fb64 	bl	8007c4e <HAL_TIM_PWM_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800158c:	f000 fbca 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	4619      	mov	r1, r3
 800159e:	4817      	ldr	r0, [pc, #92]	@ (80015fc <MX_TIM3_Init+0x100>)
 80015a0:	f007 fd38 	bl	8009014 <HAL_TIMEx_MasterConfigSynchronization>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80015aa:	f000 fbbb 	bl	8001d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ae:	2360      	movs	r3, #96	@ 0x60
 80015b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3999;
 80015b2:	f640 739f 	movw	r3, #3999	@ 0xf9f
 80015b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	2200      	movs	r2, #0
 80015c4:	4619      	mov	r1, r3
 80015c6:	480d      	ldr	r0, [pc, #52]	@ (80015fc <MX_TIM3_Init+0x100>)
 80015c8:	f006 fee2 	bl	8008390 <HAL_TIM_PWM_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80015d2:	f000 fba7 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015d6:	463b      	mov	r3, r7
 80015d8:	220c      	movs	r2, #12
 80015da:	4619      	mov	r1, r3
 80015dc:	4807      	ldr	r0, [pc, #28]	@ (80015fc <MX_TIM3_Init+0x100>)
 80015de:	f006 fed7 	bl	8008390 <HAL_TIM_PWM_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80015e8:	f000 fb9c 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015ec:	4803      	ldr	r0, [pc, #12]	@ (80015fc <MX_TIM3_Init+0x100>)
 80015ee:	f000 fdfb 	bl	80021e8 <HAL_TIM_MspPostInit>

}
 80015f2:	bf00      	nop
 80015f4:	3738      	adds	r7, #56	@ 0x38
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2000040c 	.word	0x2000040c
 8001600:	40000400 	.word	0x40000400

08001604 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001608:	4b14      	ldr	r3, [pc, #80]	@ (800165c <MX_USART1_UART_Init+0x58>)
 800160a:	4a15      	ldr	r2, [pc, #84]	@ (8001660 <MX_USART1_UART_Init+0x5c>)
 800160c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800160e:	4b13      	ldr	r3, [pc, #76]	@ (800165c <MX_USART1_UART_Init+0x58>)
 8001610:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001614:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001616:	4b11      	ldr	r3, [pc, #68]	@ (800165c <MX_USART1_UART_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800161c:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <MX_USART1_UART_Init+0x58>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001622:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <MX_USART1_UART_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <MX_USART1_UART_Init+0x58>)
 800162a:	220c      	movs	r2, #12
 800162c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162e:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <MX_USART1_UART_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001634:	4b09      	ldr	r3, [pc, #36]	@ (800165c <MX_USART1_UART_Init+0x58>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800163a:	4b08      	ldr	r3, [pc, #32]	@ (800165c <MX_USART1_UART_Init+0x58>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <MX_USART1_UART_Init+0x58>)
 8001642:	2200      	movs	r2, #0
 8001644:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001646:	4805      	ldr	r0, [pc, #20]	@ (800165c <MX_USART1_UART_Init+0x58>)
 8001648:	f007 fd8a 	bl	8009160 <HAL_UART_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001652:	f000 fb67 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000458 	.word	0x20000458
 8001660:	40013800 	.word	0x40013800

08001664 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001668:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <MX_USART3_UART_Init+0x58>)
 800166a:	4a15      	ldr	r2, [pc, #84]	@ (80016c0 <MX_USART3_UART_Init+0x5c>)
 800166c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800166e:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <MX_USART3_UART_Init+0x58>)
 8001670:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001674:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001676:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <MX_USART3_UART_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800167c:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <MX_USART3_UART_Init+0x58>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001682:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <MX_USART3_UART_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <MX_USART3_UART_Init+0x58>)
 800168a:	220c      	movs	r2, #12
 800168c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168e:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <MX_USART3_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001694:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <MX_USART3_UART_Init+0x58>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800169a:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <MX_USART3_UART_Init+0x58>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <MX_USART3_UART_Init+0x58>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	@ (80016bc <MX_USART3_UART_Init+0x58>)
 80016a8:	f007 fd5a 	bl	8009160 <HAL_UART_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80016b2:	f000 fb37 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200004e0 	.word	0x200004e0
 80016c0:	40004800 	.word	0x40004800

080016c4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016c8:	4b14      	ldr	r3, [pc, #80]	@ (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80016ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80016d0:	4b12      	ldr	r3, [pc, #72]	@ (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016d2:	2206      	movs	r2, #6
 80016d4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016d8:	2202      	movs	r2, #2
 80016da:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016de:	2202      	movs	r2, #2
 80016e0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80016f4:	4b09      	ldr	r3, [pc, #36]	@ (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	@ (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001702:	2200      	movs	r2, #0
 8001704:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	@ (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001708:	f004 fbc9 	bl	8005e9e <HAL_PCD_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001712:	f000 fb07 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000568 	.word	0x20000568

08001720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	@ 0x28
 8001724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001736:	4bb1      	ldr	r3, [pc, #708]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	4ab0      	ldr	r2, [pc, #704]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 800173c:	f043 0310 	orr.w	r3, r3, #16
 8001740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001742:	4bae      	ldr	r3, [pc, #696]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	4bab      	ldr	r3, [pc, #684]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	4aaa      	ldr	r2, [pc, #680]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175a:	4ba8      	ldr	r3, [pc, #672]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	4ba5      	ldr	r3, [pc, #660]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	4aa4      	ldr	r2, [pc, #656]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001772:	4ba2      	ldr	r3, [pc, #648]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	4b9f      	ldr	r3, [pc, #636]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	4a9e      	ldr	r2, [pc, #632]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800178a:	4b9c      	ldr	r3, [pc, #624]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001796:	4b99      	ldr	r3, [pc, #612]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	4a98      	ldr	r2, [pc, #608]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 800179c:	f043 0308 	orr.w	r3, r3, #8
 80017a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a2:	4b96      	ldr	r3, [pc, #600]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80017b4:	4892      	ldr	r0, [pc, #584]	@ (8001a00 <MX_GPIO_Init+0x2e0>)
 80017b6:	f003 fcd7 	bl	8005168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	f248 1104 	movw	r1, #33028	@ 0x8104
 80017c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c4:	f003 fcd0 	bl	8005168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80017c8:	2200      	movs	r2, #0
 80017ca:	f24f 0104 	movw	r1, #61444	@ 0xf004
 80017ce:	488d      	ldr	r0, [pc, #564]	@ (8001a04 <MX_GPIO_Init+0x2e4>)
 80017d0:	f003 fcca 	bl	8005168 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	f241 0181 	movw	r1, #4225	@ 0x1081
 80017da:	488b      	ldr	r0, [pc, #556]	@ (8001a08 <MX_GPIO_Init+0x2e8>)
 80017dc:	f003 fcc4 	bl	8005168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80017e0:	2201      	movs	r2, #1
 80017e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017e6:	4888      	ldr	r0, [pc, #544]	@ (8001a08 <MX_GPIO_Init+0x2e8>)
 80017e8:	f003 fcbe 	bl	8005168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80017f2:	4886      	ldr	r0, [pc, #536]	@ (8001a0c <MX_GPIO_Init+0x2ec>)
 80017f4:	f003 fcb8 	bl	8005168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	2120      	movs	r1, #32
 80017fc:	4881      	ldr	r0, [pc, #516]	@ (8001a04 <MX_GPIO_Init+0x2e4>)
 80017fe:	f003 fcb3 	bl	8005168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001802:	2201      	movs	r2, #1
 8001804:	2101      	movs	r1, #1
 8001806:	487e      	ldr	r0, [pc, #504]	@ (8001a00 <MX_GPIO_Init+0x2e0>)
 8001808:	f003 fcae 	bl	8005168 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800180c:	f240 1315 	movw	r3, #277	@ 0x115
 8001810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001812:	2301      	movs	r3, #1
 8001814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	4876      	ldr	r0, [pc, #472]	@ (8001a00 <MX_GPIO_Init+0x2e0>)
 8001826:	f003 fa01 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800182a:	236a      	movs	r3, #106	@ 0x6a
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800182e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	4870      	ldr	r0, [pc, #448]	@ (8001a00 <MX_GPIO_Init+0x2e0>)
 8001840:	f003 f9f4 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001844:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800184a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	486c      	ldr	r0, [pc, #432]	@ (8001a0c <MX_GPIO_Init+0x2ec>)
 800185c:	f003 f9e6 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001860:	2303      	movs	r3, #3
 8001862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001870:	2308      	movs	r3, #8
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800187e:	f003 f9d5 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001882:	f248 1304 	movw	r3, #33028	@ 0x8104
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800189e:	f003 f9c5 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80018a2:	23e0      	movs	r3, #224	@ 0xe0
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ae:	2303      	movs	r3, #3
 80018b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018b2:	2305      	movs	r3, #5
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c0:	f003 f9b4 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80018c4:	2301      	movs	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	484a      	ldr	r0, [pc, #296]	@ (8001a04 <MX_GPIO_Init+0x2e4>)
 80018da:	f003 f9a7 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80018de:	f24f 0324 	movw	r3, #61476	@ 0xf024
 80018e2:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	4843      	ldr	r0, [pc, #268]	@ (8001a04 <MX_GPIO_Init+0x2e4>)
 80018f8:	f003 f998 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80018fc:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8001900:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001902:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	483d      	ldr	r0, [pc, #244]	@ (8001a08 <MX_GPIO_Init+0x2e8>)
 8001914:	f003 f98a 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001918:	f243 0381 	movw	r3, #12417	@ 0x3081
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	4835      	ldr	r0, [pc, #212]	@ (8001a08 <MX_GPIO_Init+0x2e8>)
 8001932:	f003 f97b 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001936:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800193a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	482f      	ldr	r0, [pc, #188]	@ (8001a0c <MX_GPIO_Init+0x2ec>)
 8001950:	f003 f96c 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001954:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800195a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800195e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	4828      	ldr	r0, [pc, #160]	@ (8001a0c <MX_GPIO_Init+0x2ec>)
 800196c:	f003 f95e 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001970:	2302      	movs	r3, #2
 8001972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001980:	2305      	movs	r3, #5
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4619      	mov	r1, r3
 800198a:	481f      	ldr	r0, [pc, #124]	@ (8001a08 <MX_GPIO_Init+0x2e8>)
 800198c:	f003 f94e 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001990:	2378      	movs	r3, #120	@ 0x78
 8001992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019a0:	2307      	movs	r3, #7
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	4817      	ldr	r0, [pc, #92]	@ (8001a08 <MX_GPIO_Init+0x2e8>)
 80019ac:	f003 f93e 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80019b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b6:	2312      	movs	r3, #18
 80019b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019c2:	2304      	movs	r3, #4
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	480d      	ldr	r0, [pc, #52]	@ (8001a04 <MX_GPIO_Init+0x2e4>)
 80019ce:	f003 f92d 	bl	8004c2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	2017      	movs	r0, #23
 80019d8:	f002 ffe5 	bl	80049a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019dc:	2017      	movs	r0, #23
 80019de:	f002 fffe 	bl	80049de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	2028      	movs	r0, #40	@ 0x28
 80019e8:	f002 ffdd 	bl	80049a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019ec:	2028      	movs	r0, #40	@ 0x28
 80019ee:	f002 fff6 	bl	80049de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019f2:	bf00      	nop
 80019f4:	3728      	adds	r7, #40	@ 0x28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	48001000 	.word	0x48001000
 8001a04:	48000400 	.word	0x48000400
 8001a08:	48000c00 	.word	0x48000c00
 8001a0c:	48000800 	.word	0x48000800

08001a10 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8001a10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a14:	b08a      	sub	sp, #40	@ 0x28
 8001a16:	af04      	add	r7, sp, #16
 8001a18:	6078      	str	r0, [r7, #4]
  float fpDataXYZ[3];

  if (htim->Instance == htim2.Instance) //if timer2 interrupt happens
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d122      	bne.n	8001a6c <HAL_TIM_PeriodElapsedCallback+0x5c>
  {
	  HAL_ADC_Start_IT(&hadc1); //call ADC1 to start
 8001a26:	4815      	ldr	r0, [pc, #84]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001a28:	f001 fdf8 	bl	800361c <HAL_ADC_Start_IT>

	  BSP_ACCELERO_AccGetXYZ_Float(fpDataXYZ);
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 f829 	bl	8002a88 <BSP_ACCELERO_AccGetXYZ_Float>
	   * */
//	  if(fpDataXYZ[1] > -20.f && fpDataXYZ[1] < 20.f) fpDataXYZ[1] = 0.f; // threshold



	  printf("acceleration: %f, %f, %f \r\n", fpDataXYZ[0], fpDataXYZ[1], fpDataXYZ[2]);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fd85 	bl	8000548 <__aeabi_f2d>
 8001a3e:	4680      	mov	r8, r0
 8001a40:	4689      	mov	r9, r1
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fd7f 	bl	8000548 <__aeabi_f2d>
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	460d      	mov	r5, r1
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd79 	bl	8000548 <__aeabi_f2d>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a5e:	e9cd 4500 	strd	r4, r5, [sp]
 8001a62:	4642      	mov	r2, r8
 8001a64:	464b      	mov	r3, r9
 8001a66:	4806      	ldr	r0, [pc, #24]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001a68:	f009 fafe 	bl	800b068 <iprintf>

  }

}
 8001a6c:	bf00      	nop
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a76:	bf00      	nop
 8001a78:	200003c0 	.word	0x200003c0
 8001a7c:	20000228 	.word	0x20000228
 8001a80:	0800ea04 	.word	0x0800ea04
 8001a84:	00000000 	.word	0x00000000

08001a88 <HAL_ADC_ConvCpltCallback>:
/*
void HAL_TIM_PWM_PulseFinishedCallback (TIM_HandleTypeDef * htim){
	printf("PWM");
}*/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){ //ADC conversion complete callback
 8001a88:	b5b0      	push	{r4, r5, r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	LIGHT = HAL_ADC_GetValue(&hadc1);
 8001a90:	485f      	ldr	r0, [pc, #380]	@ (8001c10 <HAL_ADC_ConvCpltCallback+0x188>)
 8001a92:	f001 fef1 	bl	8003878 <HAL_ADC_GetValue>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	4b5e      	ldr	r3, [pc, #376]	@ (8001c14 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001a9c:	801a      	strh	r2, [r3, #0]
	printf("light level (0-4095) %d", LIGHT);
 8001a9e:	4b5d      	ldr	r3, [pc, #372]	@ (8001c14 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	485c      	ldr	r0, [pc, #368]	@ (8001c18 <HAL_ADC_ConvCpltCallback+0x190>)
 8001aa6:	f009 fadf 	bl	800b068 <iprintf>
	printf("\r\n");
 8001aaa:	485c      	ldr	r0, [pc, #368]	@ (8001c1c <HAL_ADC_ConvCpltCallback+0x194>)
 8001aac:	f009 fb44 	bl	800b138 <puts>
	if(LIGHT > 2500){
 8001ab0:	4b58      	ldr	r3, [pc, #352]	@ (8001c14 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d90a      	bls.n	8001ad2 <HAL_ADC_ConvCpltCallback+0x4a>
		error_prev = 0; //stable. only minimum light needed
 8001abc:	4b58      	ldr	r3, [pc, #352]	@ (8001c20 <HAL_ADC_ConvCpltCallback+0x198>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	801a      	strh	r2, [r3, #0]
		error_pp = 0;
 8001ac2:	4b58      	ldr	r3, [pc, #352]	@ (8001c24 <HAL_ADC_ConvCpltCallback+0x19c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	801a      	strh	r2, [r3, #0]
		CCR = 499;
 8001ac8:	4b57      	ldr	r3, [pc, #348]	@ (8001c28 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001aca:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001ace:	801a      	strh	r2, [r3, #0]
 8001ad0:	e08d      	b.n	8001bee <HAL_ADC_ConvCpltCallback+0x166>
	}
	else{

		int16_t error = 2000 - LIGHT; //1300 is the target brightness
 8001ad2:	4b50      	ldr	r3, [pc, #320]	@ (8001c14 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	f5c3 63fa 	rsb	r3, r3, #2000	@ 0x7d0
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	81fb      	strh	r3, [r7, #14]

		//PID filter
		u_prev = u_prev + 1*error + 1.8*(error - error_prev) +0.2*(error - 2*error_prev + error_pp);
 8001ade:	4b53      	ldr	r3, [pc, #332]	@ (8001c2c <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aea:	4413      	add	r3, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fd19 	bl	8000524 <__aeabi_i2d>
 8001af2:	4604      	mov	r4, r0
 8001af4:	460d      	mov	r5, r1
 8001af6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001afa:	4a49      	ldr	r2, [pc, #292]	@ (8001c20 <HAL_ADC_ConvCpltCallback+0x198>)
 8001afc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b00:	1a9b      	subs	r3, r3, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fd0e 	bl	8000524 <__aeabi_i2d>
 8001b08:	a33d      	add	r3, pc, #244	@ (adr r3, 8001c00 <HAL_ADC_ConvCpltCallback+0x178>)
 8001b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0e:	f7fe fd73 	bl	80005f8 <__aeabi_dmul>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4620      	mov	r0, r4
 8001b18:	4629      	mov	r1, r5
 8001b1a:	f7fe fbb7 	bl	800028c <__adddf3>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4614      	mov	r4, r2
 8001b24:	461d      	mov	r5, r3
 8001b26:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c20 <HAL_ADC_ConvCpltCallback+0x198>)
 8001b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	4a3b      	ldr	r2, [pc, #236]	@ (8001c24 <HAL_ADC_ConvCpltCallback+0x19c>)
 8001b36:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fcf1 	bl	8000524 <__aeabi_i2d>
 8001b42:	a331      	add	r3, pc, #196	@ (adr r3, 8001c08 <HAL_ADC_ConvCpltCallback+0x180>)
 8001b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b48:	f7fe fd56 	bl	80005f8 <__aeabi_dmul>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4620      	mov	r0, r4
 8001b52:	4629      	mov	r1, r5
 8001b54:	f7fe fb9a 	bl	800028c <__adddf3>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f7fe fffa 	bl	8000b58 <__aeabi_d2iz>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b21a      	sxth	r2, r3
 8001b68:	4b30      	ldr	r3, [pc, #192]	@ (8001c2c <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001b6a:	801a      	strh	r2, [r3, #0]

		//Status update
		error_pp = error_prev;
 8001b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c20 <HAL_ADC_ConvCpltCallback+0x198>)
 8001b6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b72:	4b2c      	ldr	r3, [pc, #176]	@ (8001c24 <HAL_ADC_ConvCpltCallback+0x19c>)
 8001b74:	801a      	strh	r2, [r3, #0]
		error_prev = error;
 8001b76:	4a2a      	ldr	r2, [pc, #168]	@ (8001c20 <HAL_ADC_ConvCpltCallback+0x198>)
 8001b78:	89fb      	ldrh	r3, [r7, #14]
 8001b7a:	8013      	strh	r3, [r2, #0]

		//The value of u should be clamped as well
		if(u_prev < 0) u_prev = 0;
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c2c <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	da03      	bge.n	8001b8e <HAL_ADC_ConvCpltCallback+0x106>
 8001b86:	4b29      	ldr	r3, [pc, #164]	@ (8001c2c <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	801a      	strh	r2, [r3, #0]
 8001b8c:	e009      	b.n	8001ba2 <HAL_ADC_ConvCpltCallback+0x11a>
		else if(u_prev > 7999) u_prev = 7999;
 8001b8e:	4b27      	ldr	r3, [pc, #156]	@ (8001c2c <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001b90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b94:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001b98:	db03      	blt.n	8001ba2 <HAL_ADC_ConvCpltCallback+0x11a>
 8001b9a:	4b24      	ldr	r3, [pc, #144]	@ (8001c2c <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001b9c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001ba0:	801a      	strh	r2, [r3, #0]

		CCR = 1 * u_prev; //CCR can be proportional to it.
 8001ba2:	4b22      	ldr	r3, [pc, #136]	@ (8001c2c <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	4b1f      	ldr	r3, [pc, #124]	@ (8001c28 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001bac:	801a      	strh	r2, [r3, #0]
		//Clamp the value of CCR
		if(CCR < 499) CCR = 499;
 8001bae:	4b1e      	ldr	r3, [pc, #120]	@ (8001c28 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	f5b3 7ff9 	cmp.w	r3, #498	@ 0x1f2
 8001bb6:	d804      	bhi.n	8001bc2 <HAL_ADC_ConvCpltCallback+0x13a>
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c28 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001bba:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001bbe:	801a      	strh	r2, [r3, #0]
 8001bc0:	e008      	b.n	8001bd4 <HAL_ADC_ConvCpltCallback+0x14c>
		else if(CCR > 7999) CCR = 7999;
 8001bc2:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001bca:	d303      	bcc.n	8001bd4 <HAL_ADC_ConvCpltCallback+0x14c>
 8001bcc:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001bce:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001bd2:	801a      	strh	r2, [r3, #0]

		printf("CCR = %d", CCR);
 8001bd4:	4b14      	ldr	r3, [pc, #80]	@ (8001c28 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4815      	ldr	r0, [pc, #84]	@ (8001c30 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001bdc:	f009 fa44 	bl	800b068 <iprintf>
		printf(", u_prev = %d \r\n", u_prev);
 8001be0:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be6:	4619      	mov	r1, r3
 8001be8:	4812      	ldr	r0, [pc, #72]	@ (8001c34 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8001bea:	f009 fa3d 	bl	800b068 <iprintf>
	}

	//set the CCR value to the timer
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, CCR);
 8001bee:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001bf0:	881a      	ldrh	r2, [r3, #0]
 8001bf2:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001bf8:	bf00      	nop
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bdb0      	pop	{r4, r5, r7, pc}
 8001c00:	cccccccd 	.word	0xcccccccd
 8001c04:	3ffccccc 	.word	0x3ffccccc
 8001c08:	9999999a 	.word	0x9999999a
 8001c0c:	3fc99999 	.word	0x3fc99999
 8001c10:	20000228 	.word	0x20000228
 8001c14:	20000a50 	.word	0x20000a50
 8001c18:	0800ea20 	.word	0x0800ea20
 8001c1c:	0800ea38 	.word	0x0800ea38
 8001c20:	20000a52 	.word	0x20000a52
 8001c24:	20000a54 	.word	0x20000a54
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000a56 	.word	0x20000a56
 8001c30:	0800ea3c 	.word	0x0800ea3c
 8001c34:	0800ea48 	.word	0x0800ea48
 8001c38:	2000040c 	.word	0x2000040c

08001c3c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_EXTI13_Pin){ //if the interrupt is the button
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c4c:	d13c      	bne.n	8001cc8 <HAL_GPIO_EXTI_Callback+0x8c>
		HAL_GPIO_TogglePin(GPIOB, LED2_Pin); //switch the LED to on/off
 8001c4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c52:	481f      	ldr	r0, [pc, #124]	@ (8001cd0 <HAL_GPIO_EXTI_Callback+0x94>)
 8001c54:	f003 faa0 	bl	8005198 <HAL_GPIO_TogglePin>
		if(TIMER_IS_ON){
 8001c58:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd4 <HAL_GPIO_EXTI_Callback+0x98>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d023      	beq.n	8001ca8 <HAL_GPIO_EXTI_Callback+0x6c>
			printf("turned off\r\n");
 8001c60:	481d      	ldr	r0, [pc, #116]	@ (8001cd8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001c62:	f009 fa69 	bl	800b138 <puts>
			HAL_TIM_Base_Stop_IT(&htim2); //start timer
 8001c66:	481d      	ldr	r0, [pc, #116]	@ (8001cdc <HAL_GPIO_EXTI_Callback+0xa0>)
 8001c68:	f005 ffc2 	bl	8007bf0 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim3);
 8001c6c:	481c      	ldr	r0, [pc, #112]	@ (8001ce0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001c6e:	f005 ffbf 	bl	8007bf0 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001c72:	2100      	movs	r1, #0
 8001c74:	481a      	ldr	r0, [pc, #104]	@ (8001ce0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001c76:	f006 f99f 	bl	8007fb8 <HAL_TIM_PWM_Stop_IT>
			//HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_4);
			// PWM param reset
			LIGHT = 0;
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	801a      	strh	r2, [r3, #0]
			CCR = 499;
 8001c80:	4b19      	ldr	r3, [pc, #100]	@ (8001ce8 <HAL_GPIO_EXTI_Callback+0xac>)
 8001c82:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001c86:	801a      	strh	r2, [r3, #0]
			error_prev = 0;
 8001c88:	4b18      	ldr	r3, [pc, #96]	@ (8001cec <HAL_GPIO_EXTI_Callback+0xb0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	801a      	strh	r2, [r3, #0]
			error_pp = 0;
 8001c8e:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	801a      	strh	r2, [r3, #0]
			u_prev = 0;
 8001c94:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	801a      	strh	r2, [r3, #0]
			PID_INIT = 0;
 8001c9a:	4b17      	ldr	r3, [pc, #92]	@ (8001cf8 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]

			TIMER_IS_ON = 0;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <HAL_GPIO_EXTI_Callback+0x98>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
			//HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
			TIMER_IS_ON = 1;
		}
  }
}
 8001ca6:	e00f      	b.n	8001cc8 <HAL_GPIO_EXTI_Callback+0x8c>
			printf("turned on\r\n");
 8001ca8:	4814      	ldr	r0, [pc, #80]	@ (8001cfc <HAL_GPIO_EXTI_Callback+0xc0>)
 8001caa:	f009 fa45 	bl	800b138 <puts>
			HAL_TIM_Base_Start_IT(&htim2); //start timer
 8001cae:	480b      	ldr	r0, [pc, #44]	@ (8001cdc <HAL_GPIO_EXTI_Callback+0xa0>)
 8001cb0:	f005 ff2e 	bl	8007b10 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim3);
 8001cb4:	480a      	ldr	r0, [pc, #40]	@ (8001ce0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001cb6:	f005 ff2b 	bl	8007b10 <HAL_TIM_Base_Start_IT>
			HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4808      	ldr	r0, [pc, #32]	@ (8001ce0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001cbe:	f006 f827 	bl	8007d10 <HAL_TIM_PWM_Start_IT>
			TIMER_IS_ON = 1;
 8001cc2:	4b04      	ldr	r3, [pc, #16]	@ (8001cd4 <HAL_GPIO_EXTI_Callback+0x98>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	48000400 	.word	0x48000400
 8001cd4:	20000a4c 	.word	0x20000a4c
 8001cd8:	0800ea5c 	.word	0x0800ea5c
 8001cdc:	200003c0 	.word	0x200003c0
 8001ce0:	2000040c 	.word	0x2000040c
 8001ce4:	20000a50 	.word	0x20000a50
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	20000a52 	.word	0x20000a52
 8001cf0:	20000a54 	.word	0x20000a54
 8001cf4:	20000a56 	.word	0x20000a56
 8001cf8:	20000a58 	.word	0x20000a58
 8001cfc:	0800ea68 	.word	0x0800ea68

08001d00 <__io_putchar>:

int __io_putchar(int ch)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	//ITM_SendChar(ch);
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001d08:	1d39      	adds	r1, r7, #4
 8001d0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4803      	ldr	r0, [pc, #12]	@ (8001d20 <__io_putchar+0x20>)
 8001d12:	f007 fa73 	bl	80091fc <HAL_UART_Transmit>
    return (ch);
 8001d16:	687b      	ldr	r3, [r7, #4]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000458 	.word	0x20000458

08001d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d28:	b672      	cpsid	i
}
 8001d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("error handler called \r\n");
 8001d2c:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <Error_Handler+0x14>)
 8001d2e:	f009 fa03 	bl	800b138 <puts>
  while (1)
 8001d32:	bf00      	nop
 8001d34:	e7fd      	b.n	8001d32 <Error_Handler+0xe>
 8001d36:	bf00      	nop
 8001d38:	0800ea74 	.word	0x0800ea74

08001d3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d42:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <HAL_MspInit+0x44>)
 8001d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d46:	4a0e      	ldr	r2, [pc, #56]	@ (8001d80 <HAL_MspInit+0x44>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <HAL_MspInit+0x44>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <HAL_MspInit+0x44>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5e:	4a08      	ldr	r2, [pc, #32]	@ (8001d80 <HAL_MspInit+0x44>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_MspInit+0x44>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000

08001d84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	@ 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a25      	ldr	r2, [pc, #148]	@ (8001e38 <HAL_ADC_MspInit+0xb4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d144      	bne.n	8001e30 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001da6:	4b25      	ldr	r3, [pc, #148]	@ (8001e3c <HAL_ADC_MspInit+0xb8>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001daa:	4a24      	ldr	r2, [pc, #144]	@ (8001e3c <HAL_ADC_MspInit+0xb8>)
 8001dac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001db0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001db2:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <HAL_ADC_MspInit+0xb8>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <HAL_ADC_MspInit+0xb8>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e3c <HAL_ADC_MspInit+0xb8>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dca:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <HAL_ADC_MspInit+0xb8>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <HAL_ADC_MspInit+0xb8>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dda:	4a18      	ldr	r2, [pc, #96]	@ (8001e3c <HAL_ADC_MspInit+0xb8>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de2:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <HAL_ADC_MspInit+0xb8>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN4
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001dee:	233f      	movs	r3, #63	@ 0x3f
 8001df0:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001df2:	230b      	movs	r3, #11
 8001df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480f      	ldr	r0, [pc, #60]	@ (8001e40 <HAL_ADC_MspInit+0xbc>)
 8001e02:	f002 ff13 	bl	8004c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001e06:	2310      	movs	r3, #16
 8001e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001e0a:	230b      	movs	r3, #11
 8001e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4619      	mov	r1, r3
 8001e18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e1c:	f002 ff06 	bl	8004c2c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2100      	movs	r1, #0
 8001e24:	2012      	movs	r0, #18
 8001e26:	f002 fdbe 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001e2a:	2012      	movs	r0, #18
 8001e2c:	f002 fdd7 	bl	80049de <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e30:	bf00      	nop
 8001e32:	3728      	adds	r7, #40	@ 0x28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	50040000 	.word	0x50040000
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	48000800 	.word	0x48000800

08001e44 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b0ac      	sub	sp, #176	@ 0xb0
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2288      	movs	r2, #136	@ 0x88
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f009 fa67 	bl	800b338 <memset>
  if(DFSDM1_Init == 0)
 8001e6a:	4b25      	ldr	r3, [pc, #148]	@ (8001f00 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d142      	bne.n	8001ef8 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001e72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e7e:	f107 0314 	add.w	r3, r7, #20
 8001e82:	4618      	mov	r0, r3
 8001e84:	f005 f87e 	bl	8006f84 <HAL_RCCEx_PeriphCLKConfig>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001e8e:	f7ff ff49 	bl	8001d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001e92:	4b1c      	ldr	r3, [pc, #112]	@ (8001f04 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e96:	4a1b      	ldr	r2, [pc, #108]	@ (8001f04 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e9e:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ea2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eaa:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eae:	4a15      	ldr	r2, [pc, #84]	@ (8001f04 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001eb0:	f043 0310 	orr.w	r3, r3, #16
 8001eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eb6:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001ec2:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001ec6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001edc:	2306      	movs	r3, #6
 8001ede:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ee2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4807      	ldr	r0, [pc, #28]	@ (8001f08 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001eea:	f002 fe9f 	bl	8004c2c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001eee:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	4a02      	ldr	r2, [pc, #8]	@ (8001f00 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001ef6:	6013      	str	r3, [r2, #0]
  }

}
 8001ef8:	bf00      	nop
 8001efa:	37b0      	adds	r7, #176	@ 0xb0
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000a5c 	.word	0x20000a5c
 8001f04:	40021000 	.word	0x40021000
 8001f08:	48001000 	.word	0x48001000

08001f0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b0ac      	sub	sp, #176	@ 0xb0
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	2288      	movs	r2, #136	@ 0x88
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f009 fa03 	bl	800b338 <memset>
  if(hi2c->Instance==I2C2)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a21      	ldr	r2, [pc, #132]	@ (8001fbc <HAL_I2C_MspInit+0xb0>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d13b      	bne.n	8001fb4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f3c:	2380      	movs	r3, #128	@ 0x80
 8001f3e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f40:	2300      	movs	r3, #0
 8001f42:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f005 f81b 	bl	8006f84 <HAL_RCCEx_PeriphCLKConfig>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f54:	f7ff fee6 	bl	8001d24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f58:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <HAL_I2C_MspInit+0xb4>)
 8001f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5c:	4a18      	ldr	r2, [pc, #96]	@ (8001fc0 <HAL_I2C_MspInit+0xb4>)
 8001f5e:	f043 0302 	orr.w	r3, r3, #2
 8001f62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f64:	4b16      	ldr	r3, [pc, #88]	@ (8001fc0 <HAL_I2C_MspInit+0xb4>)
 8001f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001f70:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f78:	2312      	movs	r3, #18
 8001f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f90:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f94:	4619      	mov	r1, r3
 8001f96:	480b      	ldr	r0, [pc, #44]	@ (8001fc4 <HAL_I2C_MspInit+0xb8>)
 8001f98:	f002 fe48 	bl	8004c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f9c:	4b08      	ldr	r3, [pc, #32]	@ (8001fc0 <HAL_I2C_MspInit+0xb4>)
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa0:	4a07      	ldr	r2, [pc, #28]	@ (8001fc0 <HAL_I2C_MspInit+0xb4>)
 8001fa2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa8:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <HAL_I2C_MspInit+0xb4>)
 8001faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001fb4:	bf00      	nop
 8001fb6:	37b0      	adds	r7, #176	@ 0xb0
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40005800 	.word	0x40005800
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	48000400 	.word	0x48000400

08001fc8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8002004 <HAL_I2C_MspDeInit+0x3c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d10f      	bne.n	8001ffa <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001fda:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <HAL_I2C_MspDeInit+0x40>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fde:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <HAL_I2C_MspDeInit+0x40>)
 8001fe0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001fe4:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001fe6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fea:	4808      	ldr	r0, [pc, #32]	@ (800200c <HAL_I2C_MspDeInit+0x44>)
 8001fec:	f002 ffc8 	bl	8004f80 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001ff0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ff4:	4805      	ldr	r0, [pc, #20]	@ (800200c <HAL_I2C_MspDeInit+0x44>)
 8001ff6:	f002 ffc3 	bl	8004f80 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40005800 	.word	0x40005800
 8002008:	40021000 	.word	0x40021000
 800200c:	48000400 	.word	0x48000400

08002010 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	@ 0x28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a17      	ldr	r2, [pc, #92]	@ (800208c <HAL_QSPI_MspInit+0x7c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d128      	bne.n	8002084 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002032:	4b17      	ldr	r3, [pc, #92]	@ (8002090 <HAL_QSPI_MspInit+0x80>)
 8002034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002036:	4a16      	ldr	r2, [pc, #88]	@ (8002090 <HAL_QSPI_MspInit+0x80>)
 8002038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800203c:	6513      	str	r3, [r2, #80]	@ 0x50
 800203e:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <HAL_QSPI_MspInit+0x80>)
 8002040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800204a:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <HAL_QSPI_MspInit+0x80>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204e:	4a10      	ldr	r2, [pc, #64]	@ (8002090 <HAL_QSPI_MspInit+0x80>)
 8002050:	f043 0310 	orr.w	r3, r3, #16
 8002054:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002056:	4b0e      	ldr	r3, [pc, #56]	@ (8002090 <HAL_QSPI_MspInit+0x80>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002062:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002066:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002074:	230a      	movs	r3, #10
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4619      	mov	r1, r3
 800207e:	4805      	ldr	r0, [pc, #20]	@ (8002094 <HAL_QSPI_MspInit+0x84>)
 8002080:	f002 fdd4 	bl	8004c2c <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002084:	bf00      	nop
 8002086:	3728      	adds	r7, #40	@ 0x28
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	a0001000 	.word	0xa0001000
 8002090:	40021000 	.word	0x40021000
 8002094:	48001000 	.word	0x48001000

08002098 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	@ 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a17      	ldr	r2, [pc, #92]	@ (8002114 <HAL_SPI_MspInit+0x7c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d128      	bne.n	800210c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020ba:	4b17      	ldr	r3, [pc, #92]	@ (8002118 <HAL_SPI_MspInit+0x80>)
 80020bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020be:	4a16      	ldr	r2, [pc, #88]	@ (8002118 <HAL_SPI_MspInit+0x80>)
 80020c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80020c6:	4b14      	ldr	r3, [pc, #80]	@ (8002118 <HAL_SPI_MspInit+0x80>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d2:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <HAL_SPI_MspInit+0x80>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d6:	4a10      	ldr	r2, [pc, #64]	@ (8002118 <HAL_SPI_MspInit+0x80>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020de:	4b0e      	ldr	r3, [pc, #56]	@ (8002118 <HAL_SPI_MspInit+0x80>)
 80020e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80020ea:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80020ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f8:	2303      	movs	r3, #3
 80020fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020fc:	2306      	movs	r3, #6
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	4619      	mov	r1, r3
 8002106:	4805      	ldr	r0, [pc, #20]	@ (800211c <HAL_SPI_MspInit+0x84>)
 8002108:	f002 fd90 	bl	8004c2c <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800210c:	bf00      	nop
 800210e:	3728      	adds	r7, #40	@ 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40003c00 	.word	0x40003c00
 8002118:	40021000 	.word	0x40021000
 800211c:	48000800 	.word	0x48000800

08002120 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	@ 0x28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002140:	d131      	bne.n	80021a6 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002142:	4b27      	ldr	r3, [pc, #156]	@ (80021e0 <HAL_TIM_Base_MspInit+0xc0>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002146:	4a26      	ldr	r2, [pc, #152]	@ (80021e0 <HAL_TIM_Base_MspInit+0xc0>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6593      	str	r3, [r2, #88]	@ 0x58
 800214e:	4b24      	ldr	r3, [pc, #144]	@ (80021e0 <HAL_TIM_Base_MspInit+0xc0>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215a:	4b21      	ldr	r3, [pc, #132]	@ (80021e0 <HAL_TIM_Base_MspInit+0xc0>)
 800215c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215e:	4a20      	ldr	r2, [pc, #128]	@ (80021e0 <HAL_TIM_Base_MspInit+0xc0>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002166:	4b1e      	ldr	r3, [pc, #120]	@ (80021e0 <HAL_TIM_Base_MspInit+0xc0>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 8002172:	2308      	movs	r3, #8
 8002174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217e:	2300      	movs	r3, #0
 8002180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002182:	2301      	movs	r3, #1
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	4619      	mov	r1, r3
 800218c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002190:	f002 fd4c 	bl	8004c2c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	201c      	movs	r0, #28
 800219a:	f002 fc04 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800219e:	201c      	movs	r0, #28
 80021a0:	f002 fc1d 	bl	80049de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021a4:	e018      	b.n	80021d8 <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM3)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a0e      	ldr	r2, [pc, #56]	@ (80021e4 <HAL_TIM_Base_MspInit+0xc4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d113      	bne.n	80021d8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021b0:	4b0b      	ldr	r3, [pc, #44]	@ (80021e0 <HAL_TIM_Base_MspInit+0xc0>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b4:	4a0a      	ldr	r2, [pc, #40]	@ (80021e0 <HAL_TIM_Base_MspInit+0xc0>)
 80021b6:	f043 0302 	orr.w	r3, r3, #2
 80021ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80021bc:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <HAL_TIM_Base_MspInit+0xc0>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2100      	movs	r1, #0
 80021cc:	201d      	movs	r0, #29
 80021ce:	f002 fbea 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021d2:	201d      	movs	r0, #29
 80021d4:	f002 fc03 	bl	80049de <HAL_NVIC_EnableIRQ>
}
 80021d8:	bf00      	nop
 80021da:	3728      	adds	r7, #40	@ 0x28
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40000400 	.word	0x40000400

080021e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 030c 	add.w	r3, r7, #12
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a11      	ldr	r2, [pc, #68]	@ (800224c <HAL_TIM_MspPostInit+0x64>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d11b      	bne.n	8002242 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220a:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <HAL_TIM_MspPostInit+0x68>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	4a10      	ldr	r2, [pc, #64]	@ (8002250 <HAL_TIM_MspPostInit+0x68>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002216:	4b0e      	ldr	r3, [pc, #56]	@ (8002250 <HAL_TIM_MspPostInit+0x68>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8002222:	2312      	movs	r3, #18
 8002224:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002232:	2302      	movs	r3, #2
 8002234:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	4619      	mov	r1, r3
 800223c:	4805      	ldr	r0, [pc, #20]	@ (8002254 <HAL_TIM_MspPostInit+0x6c>)
 800223e:	f002 fcf5 	bl	8004c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002242:	bf00      	nop
 8002244:	3720      	adds	r7, #32
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40000400 	.word	0x40000400
 8002250:	40021000 	.word	0x40021000
 8002254:	48000400 	.word	0x48000400

08002258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b0ae      	sub	sp, #184	@ 0xb8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002270:	f107 031c 	add.w	r3, r7, #28
 8002274:	2288      	movs	r2, #136	@ 0x88
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f009 f85d 	bl	800b338 <memset>
  if(huart->Instance==USART1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a42      	ldr	r2, [pc, #264]	@ (800238c <HAL_UART_MspInit+0x134>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d13b      	bne.n	8002300 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002288:	2301      	movs	r3, #1
 800228a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800228c:	2300      	movs	r3, #0
 800228e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002290:	f107 031c 	add.w	r3, r7, #28
 8002294:	4618      	mov	r0, r3
 8002296:	f004 fe75 	bl	8006f84 <HAL_RCCEx_PeriphCLKConfig>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022a0:	f7ff fd40 	bl	8001d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002390 <HAL_UART_MspInit+0x138>)
 80022a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a8:	4a39      	ldr	r2, [pc, #228]	@ (8002390 <HAL_UART_MspInit+0x138>)
 80022aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80022b0:	4b37      	ldr	r3, [pc, #220]	@ (8002390 <HAL_UART_MspInit+0x138>)
 80022b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022bc:	4b34      	ldr	r3, [pc, #208]	@ (8002390 <HAL_UART_MspInit+0x138>)
 80022be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c0:	4a33      	ldr	r2, [pc, #204]	@ (8002390 <HAL_UART_MspInit+0x138>)
 80022c2:	f043 0302 	orr.w	r3, r3, #2
 80022c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022c8:	4b31      	ldr	r3, [pc, #196]	@ (8002390 <HAL_UART_MspInit+0x138>)
 80022ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80022d4:	23c0      	movs	r3, #192	@ 0xc0
 80022d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e6:	2303      	movs	r3, #3
 80022e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022ec:	2307      	movs	r3, #7
 80022ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80022f6:	4619      	mov	r1, r3
 80022f8:	4826      	ldr	r0, [pc, #152]	@ (8002394 <HAL_UART_MspInit+0x13c>)
 80022fa:	f002 fc97 	bl	8004c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022fe:	e040      	b.n	8002382 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a24      	ldr	r2, [pc, #144]	@ (8002398 <HAL_UART_MspInit+0x140>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d13b      	bne.n	8002382 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800230a:	2304      	movs	r3, #4
 800230c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800230e:	2300      	movs	r3, #0
 8002310:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002312:	f107 031c 	add.w	r3, r7, #28
 8002316:	4618      	mov	r0, r3
 8002318:	f004 fe34 	bl	8006f84 <HAL_RCCEx_PeriphCLKConfig>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8002322:	f7ff fcff 	bl	8001d24 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002326:	4b1a      	ldr	r3, [pc, #104]	@ (8002390 <HAL_UART_MspInit+0x138>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232a:	4a19      	ldr	r2, [pc, #100]	@ (8002390 <HAL_UART_MspInit+0x138>)
 800232c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002330:	6593      	str	r3, [r2, #88]	@ 0x58
 8002332:	4b17      	ldr	r3, [pc, #92]	@ (8002390 <HAL_UART_MspInit+0x138>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002336:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800233e:	4b14      	ldr	r3, [pc, #80]	@ (8002390 <HAL_UART_MspInit+0x138>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002342:	4a13      	ldr	r2, [pc, #76]	@ (8002390 <HAL_UART_MspInit+0x138>)
 8002344:	f043 0308 	orr.w	r3, r3, #8
 8002348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800234a:	4b11      	ldr	r3, [pc, #68]	@ (8002390 <HAL_UART_MspInit+0x138>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002356:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800235a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236a:	2303      	movs	r3, #3
 800236c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002370:	2307      	movs	r3, #7
 8002372:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002376:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800237a:	4619      	mov	r1, r3
 800237c:	4807      	ldr	r0, [pc, #28]	@ (800239c <HAL_UART_MspInit+0x144>)
 800237e:	f002 fc55 	bl	8004c2c <HAL_GPIO_Init>
}
 8002382:	bf00      	nop
 8002384:	37b8      	adds	r7, #184	@ 0xb8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40013800 	.word	0x40013800
 8002390:	40021000 	.word	0x40021000
 8002394:	48000400 	.word	0x48000400
 8002398:	40004800 	.word	0x40004800
 800239c:	48000c00 	.word	0x48000c00

080023a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023c0:	d154      	bne.n	800246c <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002474 <HAL_PCD_MspInit+0xd4>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c6:	4a2b      	ldr	r2, [pc, #172]	@ (8002474 <HAL_PCD_MspInit+0xd4>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ce:	4b29      	ldr	r3, [pc, #164]	@ (8002474 <HAL_PCD_MspInit+0xd4>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80023da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4619      	mov	r1, r3
 80023ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023f2:	f002 fc1b 	bl	8004c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80023f6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80023fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002404:	2303      	movs	r3, #3
 8002406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002408:	230a      	movs	r3, #10
 800240a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	4619      	mov	r1, r3
 8002412:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002416:	f002 fc09 	bl	8004c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800241a:	4b16      	ldr	r3, [pc, #88]	@ (8002474 <HAL_PCD_MspInit+0xd4>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241e:	4a15      	ldr	r2, [pc, #84]	@ (8002474 <HAL_PCD_MspInit+0xd4>)
 8002420:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002426:	4b13      	ldr	r3, [pc, #76]	@ (8002474 <HAL_PCD_MspInit+0xd4>)
 8002428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002432:	4b10      	ldr	r3, [pc, #64]	@ (8002474 <HAL_PCD_MspInit+0xd4>)
 8002434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d114      	bne.n	8002468 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	4b0d      	ldr	r3, [pc, #52]	@ (8002474 <HAL_PCD_MspInit+0xd4>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002442:	4a0c      	ldr	r2, [pc, #48]	@ (8002474 <HAL_PCD_MspInit+0xd4>)
 8002444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002448:	6593      	str	r3, [r2, #88]	@ 0x58
 800244a:	4b0a      	ldr	r3, [pc, #40]	@ (8002474 <HAL_PCD_MspInit+0xd4>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002456:	f003 fec9 	bl	80061ec <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800245a:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <HAL_PCD_MspInit+0xd4>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245e:	4a05      	ldr	r2, [pc, #20]	@ (8002474 <HAL_PCD_MspInit+0xd4>)
 8002460:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002464:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002466:	e001      	b.n	800246c <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8002468:	f003 fec0 	bl	80061ec <HAL_PWREx_EnableVddUSB>
}
 800246c:	bf00      	nop
 800246e:	3728      	adds	r7, #40	@ 0x28
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000

08002478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800247c:	bf00      	nop
 800247e:	e7fd      	b.n	800247c <NMI_Handler+0x4>

08002480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002484:	bf00      	nop
 8002486:	e7fd      	b.n	8002484 <HardFault_Handler+0x4>

08002488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800248c:	bf00      	nop
 800248e:	e7fd      	b.n	800248c <MemManage_Handler+0x4>

08002490 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002494:	bf00      	nop
 8002496:	e7fd      	b.n	8002494 <BusFault_Handler+0x4>

08002498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800249c:	bf00      	nop
 800249e:	e7fd      	b.n	800249c <UsageFault_Handler+0x4>

080024a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ce:	f000 fd1b 	bl	8002f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80024dc:	4802      	ldr	r0, [pc, #8]	@ (80024e8 <ADC1_2_IRQHandler+0x10>)
 80024de:	f001 f9d9 	bl	8003894 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000228 	.word	0x20000228

080024ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80024f0:	2020      	movs	r0, #32
 80024f2:	f002 fe6b 	bl	80051cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80024f6:	2040      	movs	r0, #64	@ 0x40
 80024f8:	f002 fe68 	bl	80051cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80024fc:	2080      	movs	r0, #128	@ 0x80
 80024fe:	f002 fe65 	bl	80051cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002502:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002506:	f002 fe61 	bl	80051cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002514:	4802      	ldr	r0, [pc, #8]	@ (8002520 <TIM2_IRQHandler+0x10>)
 8002516:	f005 fe33 	bl	8008180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	200003c0 	.word	0x200003c0

08002524 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002528:	4802      	ldr	r0, [pc, #8]	@ (8002534 <TIM3_IRQHandler+0x10>)
 800252a:	f005 fe29 	bl	8008180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	2000040c 	.word	0x2000040c

08002538 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800253c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002540:	f002 fe44 	bl	80051cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002544:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002548:	f002 fe40 	bl	80051cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800254c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002550:	f002 fe3c 	bl	80051cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002554:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002558:	f002 fe38 	bl	80051cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800255c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002560:	f002 fe34 	bl	80051cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}

08002568 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return 1;
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <_kill>:

int _kill(int pid, int sig)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002582:	f008 ff2b 	bl	800b3dc <__errno>
 8002586:	4603      	mov	r3, r0
 8002588:	2216      	movs	r2, #22
 800258a:	601a      	str	r2, [r3, #0]
  return -1;
 800258c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <_exit>:

void _exit (int status)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025a0:	f04f 31ff 	mov.w	r1, #4294967295
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ffe7 	bl	8002578 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025aa:	bf00      	nop
 80025ac:	e7fd      	b.n	80025aa <_exit+0x12>

080025ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	e00a      	b.n	80025d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025c0:	f3af 8000 	nop.w
 80025c4:	4601      	mov	r1, r0
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	60ba      	str	r2, [r7, #8]
 80025cc:	b2ca      	uxtb	r2, r1
 80025ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3301      	adds	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	429a      	cmp	r2, r3
 80025dc:	dbf0      	blt.n	80025c0 <_read+0x12>
  }

  return len;
 80025de:	687b      	ldr	r3, [r7, #4]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	e009      	b.n	800260e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	60ba      	str	r2, [r7, #8]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fb7c 	bl	8001d00 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	3301      	adds	r3, #1
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	dbf1      	blt.n	80025fa <_write+0x12>
  }
  return len;
 8002616:	687b      	ldr	r3, [r7, #4]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <_close>:

int _close(int file)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002648:	605a      	str	r2, [r3, #4]
  return 0;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <_isatty>:

int _isatty(int file)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002660:	2301      	movs	r3, #1
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002690:	4a14      	ldr	r2, [pc, #80]	@ (80026e4 <_sbrk+0x5c>)
 8002692:	4b15      	ldr	r3, [pc, #84]	@ (80026e8 <_sbrk+0x60>)
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800269c:	4b13      	ldr	r3, [pc, #76]	@ (80026ec <_sbrk+0x64>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a4:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <_sbrk+0x64>)
 80026a6:	4a12      	ldr	r2, [pc, #72]	@ (80026f0 <_sbrk+0x68>)
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026aa:	4b10      	ldr	r3, [pc, #64]	@ (80026ec <_sbrk+0x64>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d207      	bcs.n	80026c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026b8:	f008 fe90 	bl	800b3dc <__errno>
 80026bc:	4603      	mov	r3, r0
 80026be:	220c      	movs	r2, #12
 80026c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295
 80026c6:	e009      	b.n	80026dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026c8:	4b08      	ldr	r3, [pc, #32]	@ (80026ec <_sbrk+0x64>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ce:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <_sbrk+0x64>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	4a05      	ldr	r2, [pc, #20]	@ (80026ec <_sbrk+0x64>)
 80026d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026da:	68fb      	ldr	r3, [r7, #12]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20018000 	.word	0x20018000
 80026e8:	00000400 	.word	0x00000400
 80026ec:	20000a60 	.word	0x20000a60
 80026f0:	20000c30 	.word	0x20000c30

080026f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026f8:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <SystemInit+0x20>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fe:	4a05      	ldr	r2, [pc, #20]	@ (8002714 <SystemInit+0x20>)
 8002700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002718:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002750 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800271c:	f7ff ffea 	bl	80026f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002720:	480c      	ldr	r0, [pc, #48]	@ (8002754 <LoopForever+0x6>)
  ldr r1, =_edata
 8002722:	490d      	ldr	r1, [pc, #52]	@ (8002758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002724:	4a0d      	ldr	r2, [pc, #52]	@ (800275c <LoopForever+0xe>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002728:	e002      	b.n	8002730 <LoopCopyDataInit>

0800272a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800272c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272e:	3304      	adds	r3, #4

08002730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002734:	d3f9      	bcc.n	800272a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002736:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002738:	4c0a      	ldr	r4, [pc, #40]	@ (8002764 <LoopForever+0x16>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800273c:	e001      	b.n	8002742 <LoopFillZerobss>

0800273e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002740:	3204      	adds	r2, #4

08002742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002744:	d3fb      	bcc.n	800273e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002746:	f008 fe4f 	bl	800b3e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800274a:	f7fe fc4b 	bl	8000fe4 <main>

0800274e <LoopForever>:

LoopForever:
    b LoopForever
 800274e:	e7fe      	b.n	800274e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002750:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002758:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800275c:	0800ef10 	.word	0x0800ef10
  ldr r2, =_sbss
 8002760:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002764:	20000c30 	.word	0x20000c30

08002768 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002768:	e7fe      	b.n	8002768 <ADC3_IRQHandler>
	...

0800276c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	@ 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002774:	4b27      	ldr	r3, [pc, #156]	@ (8002814 <I2Cx_MspInit+0xa8>)
 8002776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002778:	4a26      	ldr	r2, [pc, #152]	@ (8002814 <I2Cx_MspInit+0xa8>)
 800277a:	f043 0302 	orr.w	r3, r3, #2
 800277e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002780:	4b24      	ldr	r3, [pc, #144]	@ (8002814 <I2Cx_MspInit+0xa8>)
 8002782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800278c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002790:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002792:	2312      	movs	r3, #18
 8002794:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002796:	2301      	movs	r3, #1
 8002798:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279a:	2303      	movs	r3, #3
 800279c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800279e:	2304      	movs	r3, #4
 80027a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	4619      	mov	r1, r3
 80027a8:	481b      	ldr	r0, [pc, #108]	@ (8002818 <I2Cx_MspInit+0xac>)
 80027aa:	f002 fa3f 	bl	8004c2c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4619      	mov	r1, r3
 80027b4:	4818      	ldr	r0, [pc, #96]	@ (8002818 <I2Cx_MspInit+0xac>)
 80027b6:	f002 fa39 	bl	8004c2c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80027ba:	4b16      	ldr	r3, [pc, #88]	@ (8002814 <I2Cx_MspInit+0xa8>)
 80027bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027be:	4a15      	ldr	r2, [pc, #84]	@ (8002814 <I2Cx_MspInit+0xa8>)
 80027c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80027c6:	4b13      	ldr	r3, [pc, #76]	@ (8002814 <I2Cx_MspInit+0xa8>)
 80027c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <I2Cx_MspInit+0xa8>)
 80027d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002814 <I2Cx_MspInit+0xa8>)
 80027d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027dc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80027de:	4b0d      	ldr	r3, [pc, #52]	@ (8002814 <I2Cx_MspInit+0xa8>)
 80027e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002814 <I2Cx_MspInit+0xa8>)
 80027e4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80027e8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	210f      	movs	r1, #15
 80027ee:	2021      	movs	r0, #33	@ 0x21
 80027f0:	f002 f8d9 	bl	80049a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80027f4:	2021      	movs	r0, #33	@ 0x21
 80027f6:	f002 f8f2 	bl	80049de <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	210f      	movs	r1, #15
 80027fe:	2022      	movs	r0, #34	@ 0x22
 8002800:	f002 f8d1 	bl	80049a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002804:	2022      	movs	r0, #34	@ 0x22
 8002806:	f002 f8ea 	bl	80049de <HAL_NVIC_EnableIRQ>
}
 800280a:	bf00      	nop
 800280c:	3728      	adds	r7, #40	@ 0x28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	48000400 	.word	0x48000400

0800281c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a12      	ldr	r2, [pc, #72]	@ (8002870 <I2Cx_Init+0x54>)
 8002828:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a11      	ldr	r2, [pc, #68]	@ (8002874 <I2Cx_Init+0x58>)
 800282e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff ff89 	bl	800276c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f002 fcce 	bl	80051fc <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002860:	2100      	movs	r1, #0
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f003 fa84 	bl	8005d70 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40005800 	.word	0x40005800
 8002874:	00702681 	.word	0x00702681

08002878 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	@ 0x28
 800287c:	af04      	add	r7, sp, #16
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	4608      	mov	r0, r1
 8002882:	4611      	mov	r1, r2
 8002884:	461a      	mov	r2, r3
 8002886:	4603      	mov	r3, r0
 8002888:	72fb      	strb	r3, [r7, #11]
 800288a:	460b      	mov	r3, r1
 800288c:	813b      	strh	r3, [r7, #8]
 800288e:	4613      	mov	r3, r2
 8002890:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002896:	7afb      	ldrb	r3, [r7, #11]
 8002898:	b299      	uxth	r1, r3
 800289a:	88f8      	ldrh	r0, [r7, #6]
 800289c:	893a      	ldrh	r2, [r7, #8]
 800289e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028a2:	9302      	str	r3, [sp, #8]
 80028a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	4603      	mov	r3, r0
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f002 fe82 	bl	80055b8 <HAL_I2C_Mem_Read>
 80028b4:	4603      	mov	r3, r0
 80028b6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d004      	beq.n	80028c8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80028be:	7afb      	ldrb	r3, [r7, #11]
 80028c0:	4619      	mov	r1, r3
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f832 	bl	800292c <I2Cx_Error>
  }
  return status;
 80028c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b08a      	sub	sp, #40	@ 0x28
 80028d6:	af04      	add	r7, sp, #16
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	4608      	mov	r0, r1
 80028dc:	4611      	mov	r1, r2
 80028de:	461a      	mov	r2, r3
 80028e0:	4603      	mov	r3, r0
 80028e2:	72fb      	strb	r3, [r7, #11]
 80028e4:	460b      	mov	r3, r1
 80028e6:	813b      	strh	r3, [r7, #8]
 80028e8:	4613      	mov	r3, r2
 80028ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80028f0:	7afb      	ldrb	r3, [r7, #11]
 80028f2:	b299      	uxth	r1, r3
 80028f4:	88f8      	ldrh	r0, [r7, #6]
 80028f6:	893a      	ldrh	r2, [r7, #8]
 80028f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028fc:	9302      	str	r3, [sp, #8]
 80028fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	4603      	mov	r3, r0
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f002 fd41 	bl	8005390 <HAL_I2C_Mem_Write>
 800290e:	4603      	mov	r3, r0
 8002910:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002912:	7dfb      	ldrb	r3, [r7, #23]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d004      	beq.n	8002922 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002918:	7afb      	ldrb	r3, [r7, #11]
 800291a:	4619      	mov	r1, r3
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f805 	bl	800292c <I2Cx_Error>
  }
  return status;
 8002922:	7dfb      	ldrb	r3, [r7, #23]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f002 fcfa 	bl	8005332 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ff6c 	bl	800281c <I2Cx_Init>
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002950:	4802      	ldr	r0, [pc, #8]	@ (800295c <SENSOR_IO_Init+0x10>)
 8002952:	f7ff ff63 	bl	800281c <I2Cx_Init>
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000a64 	.word	0x20000a64

08002960 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af02      	add	r7, sp, #8
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
 800296a:	460b      	mov	r3, r1
 800296c:	71bb      	strb	r3, [r7, #6]
 800296e:	4613      	mov	r3, r2
 8002970:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002972:	79bb      	ldrb	r3, [r7, #6]
 8002974:	b29a      	uxth	r2, r3
 8002976:	79f9      	ldrb	r1, [r7, #7]
 8002978:	2301      	movs	r3, #1
 800297a:	9301      	str	r3, [sp, #4]
 800297c:	1d7b      	adds	r3, r7, #5
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	2301      	movs	r3, #1
 8002982:	4803      	ldr	r0, [pc, #12]	@ (8002990 <SENSOR_IO_Write+0x30>)
 8002984:	f7ff ffa5 	bl	80028d2 <I2Cx_WriteMultiple>
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000a64 	.word	0x20000a64

08002994 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af02      	add	r7, sp, #8
 800299a:	4603      	mov	r3, r0
 800299c:	460a      	mov	r2, r1
 800299e:	71fb      	strb	r3, [r7, #7]
 80029a0:	4613      	mov	r3, r2
 80029a2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80029a8:	79bb      	ldrb	r3, [r7, #6]
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	79f9      	ldrb	r1, [r7, #7]
 80029ae:	2301      	movs	r3, #1
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	f107 030f 	add.w	r3, r7, #15
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2301      	movs	r3, #1
 80029ba:	4804      	ldr	r0, [pc, #16]	@ (80029cc <SENSOR_IO_Read+0x38>)
 80029bc:	f7ff ff5c 	bl	8002878 <I2Cx_ReadMultiple>

  return read_value;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000a64 	.word	0x20000a64

080029d0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	603a      	str	r2, [r7, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
 80029de:	460b      	mov	r3, r1
 80029e0:	71bb      	strb	r3, [r7, #6]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80029e6:	79bb      	ldrb	r3, [r7, #6]
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	79f9      	ldrb	r1, [r7, #7]
 80029ec:	88bb      	ldrh	r3, [r7, #4]
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	2301      	movs	r3, #1
 80029f6:	4804      	ldr	r0, [pc, #16]	@ (8002a08 <SENSOR_IO_ReadMultiple+0x38>)
 80029f8:	f7ff ff3e 	bl	8002878 <I2Cx_ReadMultiple>
 80029fc:	4603      	mov	r3, r0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000a64 	.word	0x20000a64

08002a0c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002a16:	2300      	movs	r3, #0
 8002a18:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002a1a:	4b19      	ldr	r3, [pc, #100]	@ (8002a80 <BSP_ACCELERO_Init+0x74>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	4798      	blx	r3
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b6a      	cmp	r3, #106	@ 0x6a
 8002a24:	d002      	beq.n	8002a2c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	73fb      	strb	r3, [r7, #15]
 8002a2a:	e024      	b.n	8002a76 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002a2c:	4b15      	ldr	r3, [pc, #84]	@ (8002a84 <BSP_ACCELERO_Init+0x78>)
 8002a2e:	4a14      	ldr	r2, [pc, #80]	@ (8002a80 <BSP_ACCELERO_Init+0x74>)
 8002a30:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8002a32:	2330      	movs	r3, #48	@ 0x30
 8002a34:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002a3e:	2340      	movs	r3, #64	@ 0x40
 8002a40:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8002a4a:	797a      	ldrb	r2, [r7, #5]
 8002a4c:	7abb      	ldrb	r3, [r7, #10]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002a54:	7a3b      	ldrb	r3, [r7, #8]
 8002a56:	f043 0304 	orr.w	r3, r3, #4
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	021b      	lsls	r3, r3, #8
 8002a5e:	b21a      	sxth	r2, r3
 8002a60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	b21b      	sxth	r3, r3
 8002a68:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002a6a:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <BSP_ACCELERO_Init+0x78>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	89ba      	ldrh	r2, [r7, #12]
 8002a72:	4610      	mov	r0, r2
 8002a74:	4798      	blx	r3
  }  

  return ret;
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20000008 	.word	0x20000008
 8002a84:	20000ab8 	.word	0x20000ab8

08002a88 <BSP_ACCELERO_AccGetXYZ_Float>:
  }
}

/////////////////////////////////USER DEFINED/////////////////////////////////////////
void BSP_ACCELERO_AccGetXYZ_Float(float *pDataXYZ)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  if(AccelerometerDrv != NULL)
 8002a90:	4b08      	ldr	r3, [pc, #32]	@ (8002ab4 <BSP_ACCELERO_AccGetXYZ_Float+0x2c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d009      	beq.n	8002aac <BSP_ACCELERO_AccGetXYZ_Float+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002a98:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <BSP_ACCELERO_AccGetXYZ_Float+0x2c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d004      	beq.n	8002aac <BSP_ACCELERO_AccGetXYZ_Float+0x24>
    {
        AccelerometerDrv->GetXYZ(pDataXYZ);
 8002aa2:	4b04      	ldr	r3, [pc, #16]	@ (8002ab4 <BSP_ACCELERO_AccGetXYZ_Float+0x2c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
    }
  }
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000ab8 	.word	0x20000ab8

08002ab8 <BSP_ACCELERO_SetReadMode>:

void BSP_ACCELERO_SetReadMode(int mode){
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	if(mode == 1){
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d103      	bne.n	8002ace <BSP_ACCELERO_SetReadMode+0x16>
		Lsm6dslAccDrv_SetReadType(1);
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f000 f9b0 	bl	8002e2c <Lsm6dslAccDrv_SetReadType>
	}else{
		Lsm6dslAccDrv_SetReadType(0);
	}
}
 8002acc:	e002      	b.n	8002ad4 <BSP_ACCELERO_SetReadMode+0x1c>
		Lsm6dslAccDrv_SetReadType(0);
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f000 f9ac 	bl	8002e2c <Lsm6dslAccDrv_SetReadType>
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002aea:	2110      	movs	r1, #16
 8002aec:	20d4      	movs	r0, #212	@ 0xd4
 8002aee:	f7ff ff51 	bl	8002994 <SENSOR_IO_Read>
 8002af2:	4603      	mov	r3, r0
 8002af4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002afa:	7bbb      	ldrb	r3, [r7, #14]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002b02:	7bba      	ldrb	r2, [r7, #14]
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002b0a:	7bbb      	ldrb	r3, [r7, #14]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2110      	movs	r1, #16
 8002b10:	20d4      	movs	r0, #212	@ 0xd4
 8002b12:	f7ff ff25 	bl	8002960 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002b16:	2112      	movs	r1, #18
 8002b18:	20d4      	movs	r0, #212	@ 0xd4
 8002b1a:	f7ff ff3b 	bl	8002994 <SENSOR_IO_Read>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002b2a:	7bbb      	ldrb	r3, [r7, #14]
 8002b2c:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8002b30:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002b32:	7bba      	ldrb	r2, [r7, #14]
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002b3a:	7bbb      	ldrb	r3, [r7, #14]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2112      	movs	r1, #18
 8002b40:	20d4      	movs	r0, #212	@ 0xd4
 8002b42:	f7ff ff0d 	bl	8002960 <SENSOR_IO_Write>
}
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002b54:	2300      	movs	r3, #0
 8002b56:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002b58:	2110      	movs	r1, #16
 8002b5a:	20d4      	movs	r0, #212	@ 0xd4
 8002b5c:	f7ff ff1a 	bl	8002994 <SENSOR_IO_Read>
 8002b60:	4603      	mov	r3, r0
 8002b62:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2110      	movs	r1, #16
 8002b72:	20d4      	movs	r0, #212	@ 0xd4
 8002b74:	f7ff fef4 	bl	8002960 <SENSOR_IO_Write>
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002b84:	f7ff fee2 	bl	800294c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002b88:	210f      	movs	r1, #15
 8002b8a:	20d4      	movs	r0, #212	@ 0xd4
 8002b8c:	f7ff ff02 	bl	8002994 <SENSOR_IO_Read>
 8002b90:	4603      	mov	r3, r0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002ba4:	2115      	movs	r1, #21
 8002ba6:	20d4      	movs	r0, #212	@ 0xd4
 8002ba8:	f7ff fef4 	bl	8002994 <SENSOR_IO_Read>
 8002bac:	4603      	mov	r3, r0
 8002bae:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	f023 0310 	bic.w	r3, r3, #16
 8002bb6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	f043 0310 	orr.w	r3, r3, #16
 8002bc4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	2115      	movs	r1, #21
 8002bcc:	20d4      	movs	r0, #212	@ 0xd4
 8002bce:	f7ff fec7 	bl	8002960 <SENSOR_IO_Write>
}
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002bf2:	2110      	movs	r1, #16
 8002bf4:	20d4      	movs	r0, #212	@ 0xd4
 8002bf6:	f7ff fecd 	bl	8002994 <SENSOR_IO_Read>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002bfe:	f107 0208 	add.w	r2, r7, #8
 8002c02:	2306      	movs	r3, #6
 8002c04:	2128      	movs	r1, #40	@ 0x28
 8002c06:	20d4      	movs	r0, #212	@ 0xd4
 8002c08:	f7ff fee2 	bl	80029d0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	77fb      	strb	r3, [r7, #31]
 8002c10:	e01a      	b.n	8002c48 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002c12:	7ffb      	ldrb	r3, [r7, #31]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	3301      	adds	r3, #1
 8002c18:	3320      	adds	r3, #32
 8002c1a:	443b      	add	r3, r7
 8002c1c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002c20:	021b      	lsls	r3, r3, #8
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	7ffa      	ldrb	r2, [r7, #31]
 8002c26:	0052      	lsls	r2, r2, #1
 8002c28:	3220      	adds	r2, #32
 8002c2a:	443a      	add	r2, r7
 8002c2c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002c30:	4413      	add	r3, r2
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	7ffb      	ldrb	r3, [r7, #31]
 8002c36:	b212      	sxth	r2, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	3320      	adds	r3, #32
 8002c3c:	443b      	add	r3, r7
 8002c3e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002c42:	7ffb      	ldrb	r3, [r7, #31]
 8002c44:	3301      	adds	r3, #1
 8002c46:	77fb      	strb	r3, [r7, #31]
 8002c48:	7ffb      	ldrb	r3, [r7, #31]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d9e1      	bls.n	8002c12 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b0c      	cmp	r3, #12
 8002c56:	d829      	bhi.n	8002cac <LSM6DSL_AccReadXYZ+0xd0>
 8002c58:	a201      	add	r2, pc, #4	@ (adr r2, 8002c60 <LSM6DSL_AccReadXYZ+0x84>)
 8002c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5e:	bf00      	nop
 8002c60:	08002c95 	.word	0x08002c95
 8002c64:	08002cad 	.word	0x08002cad
 8002c68:	08002cad 	.word	0x08002cad
 8002c6c:	08002cad 	.word	0x08002cad
 8002c70:	08002ca7 	.word	0x08002ca7
 8002c74:	08002cad 	.word	0x08002cad
 8002c78:	08002cad 	.word	0x08002cad
 8002c7c:	08002cad 	.word	0x08002cad
 8002c80:	08002c9b 	.word	0x08002c9b
 8002c84:	08002cad 	.word	0x08002cad
 8002c88:	08002cad 	.word	0x08002cad
 8002c8c:	08002cad 	.word	0x08002cad
 8002c90:	08002ca1 	.word	0x08002ca1
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002c94:	4b18      	ldr	r3, [pc, #96]	@ (8002cf8 <LSM6DSL_AccReadXYZ+0x11c>)
 8002c96:	61bb      	str	r3, [r7, #24]
    break;
 8002c98:	e008      	b.n	8002cac <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002c9a:	4b18      	ldr	r3, [pc, #96]	@ (8002cfc <LSM6DSL_AccReadXYZ+0x120>)
 8002c9c:	61bb      	str	r3, [r7, #24]
    break;
 8002c9e:	e005      	b.n	8002cac <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002ca0:	4b17      	ldr	r3, [pc, #92]	@ (8002d00 <LSM6DSL_AccReadXYZ+0x124>)
 8002ca2:	61bb      	str	r3, [r7, #24]
    break;
 8002ca4:	e002      	b.n	8002cac <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002ca6:	4b17      	ldr	r3, [pc, #92]	@ (8002d04 <LSM6DSL_AccReadXYZ+0x128>)
 8002ca8:	61bb      	str	r3, [r7, #24]
    break;    
 8002caa:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002cac:	2300      	movs	r3, #0
 8002cae:	77fb      	strb	r3, [r7, #31]
 8002cb0:	e01a      	b.n	8002ce8 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002cb2:	7ffb      	ldrb	r3, [r7, #31]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	3320      	adds	r3, #32
 8002cb8:	443b      	add	r3, r7
 8002cba:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cce:	7ffb      	ldrb	r3, [r7, #31]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cda:	ee17 2a90 	vmov	r2, s15
 8002cde:	b212      	sxth	r2, r2
 8002ce0:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002ce2:	7ffb      	ldrb	r3, [r7, #31]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	77fb      	strb	r3, [r7, #31]
 8002ce8:	7ffb      	ldrb	r3, [r7, #31]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d9e1      	bls.n	8002cb2 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8002cee:	bf00      	nop
 8002cf0:	bf00      	nop
 8002cf2:	3720      	adds	r7, #32
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	3d79db23 	.word	0x3d79db23
 8002cfc:	3df9db23 	.word	0x3df9db23
 8002d00:	3e79db23 	.word	0x3e79db23
 8002d04:	3ef9db23 	.word	0x3ef9db23

08002d08 <LSM6DSL_AccReadXYZ_Float>:


//////////////////////////////////USER DEFINED FUNCTION///////////////////////////

void LSM6DSL_AccReadXYZ_Float(float* pData) //int16_t -> float
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]

  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002d1e:	2110      	movs	r1, #16
 8002d20:	20d4      	movs	r0, #212	@ 0xd4
 8002d22:	f7ff fe37 	bl	8002994 <SENSOR_IO_Read>
 8002d26:	4603      	mov	r3, r0
 8002d28:	75fb      	strb	r3, [r7, #23]

  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002d2a:	f107 0208 	add.w	r2, r7, #8
 8002d2e:	2306      	movs	r3, #6
 8002d30:	2128      	movs	r1, #40	@ 0x28
 8002d32:	20d4      	movs	r0, #212	@ 0xd4
 8002d34:	f7ff fe4c 	bl	80029d0 <SENSOR_IO_ReadMultiple>

  for(i=0; i<3; i++)
 8002d38:	2300      	movs	r3, #0
 8002d3a:	77fb      	strb	r3, [r7, #31]
 8002d3c:	e01a      	b.n	8002d74 <LSM6DSL_AccReadXYZ_Float+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002d3e:	7ffb      	ldrb	r3, [r7, #31]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	3301      	adds	r3, #1
 8002d44:	3320      	adds	r3, #32
 8002d46:	443b      	add	r3, r7
 8002d48:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	7ffa      	ldrb	r2, [r7, #31]
 8002d52:	0052      	lsls	r2, r2, #1
 8002d54:	3220      	adds	r2, #32
 8002d56:	443a      	add	r2, r7
 8002d58:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	7ffb      	ldrb	r3, [r7, #31]
 8002d62:	b212      	sxth	r2, r2
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	3320      	adds	r3, #32
 8002d68:	443b      	add	r3, r7
 8002d6a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002d6e:	7ffb      	ldrb	r3, [r7, #31]
 8002d70:	3301      	adds	r3, #1
 8002d72:	77fb      	strb	r3, [r7, #31]
 8002d74:	7ffb      	ldrb	r3, [r7, #31]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d9e1      	bls.n	8002d3e <LSM6DSL_AccReadXYZ_Float+0x36>
  }

  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002d7a:	7dfb      	ldrb	r3, [r7, #23]
 8002d7c:	f003 030c 	and.w	r3, r3, #12
 8002d80:	2b0c      	cmp	r3, #12
 8002d82:	d829      	bhi.n	8002dd8 <LSM6DSL_AccReadXYZ_Float+0xd0>
 8002d84:	a201      	add	r2, pc, #4	@ (adr r2, 8002d8c <LSM6DSL_AccReadXYZ_Float+0x84>)
 8002d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8a:	bf00      	nop
 8002d8c:	08002dc1 	.word	0x08002dc1
 8002d90:	08002dd9 	.word	0x08002dd9
 8002d94:	08002dd9 	.word	0x08002dd9
 8002d98:	08002dd9 	.word	0x08002dd9
 8002d9c:	08002dd3 	.word	0x08002dd3
 8002da0:	08002dd9 	.word	0x08002dd9
 8002da4:	08002dd9 	.word	0x08002dd9
 8002da8:	08002dd9 	.word	0x08002dd9
 8002dac:	08002dc7 	.word	0x08002dc7
 8002db0:	08002dd9 	.word	0x08002dd9
 8002db4:	08002dd9 	.word	0x08002dd9
 8002db8:	08002dd9 	.word	0x08002dd9
 8002dbc:	08002dcd 	.word	0x08002dcd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002dc0:	4b16      	ldr	r3, [pc, #88]	@ (8002e1c <LSM6DSL_AccReadXYZ_Float+0x114>)
 8002dc2:	61bb      	str	r3, [r7, #24]
    break;
 8002dc4:	e008      	b.n	8002dd8 <LSM6DSL_AccReadXYZ_Float+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002dc6:	4b16      	ldr	r3, [pc, #88]	@ (8002e20 <LSM6DSL_AccReadXYZ_Float+0x118>)
 8002dc8:	61bb      	str	r3, [r7, #24]
    break;
 8002dca:	e005      	b.n	8002dd8 <LSM6DSL_AccReadXYZ_Float+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002dcc:	4b15      	ldr	r3, [pc, #84]	@ (8002e24 <LSM6DSL_AccReadXYZ_Float+0x11c>)
 8002dce:	61bb      	str	r3, [r7, #24]
    break;
 8002dd0:	e002      	b.n	8002dd8 <LSM6DSL_AccReadXYZ_Float+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002dd2:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <LSM6DSL_AccReadXYZ_Float+0x120>)
 8002dd4:	61bb      	str	r3, [r7, #24]
    break;
 8002dd6:	bf00      	nop
  }

  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002dd8:	2300      	movs	r3, #0
 8002dda:	77fb      	strb	r3, [r7, #31]
 8002ddc:	e016      	b.n	8002e0c <LSM6DSL_AccReadXYZ_Float+0x104>
  {
    pData[i]= (pnRawData[i] * sensitivity);
 8002dde:	7ffb      	ldrb	r3, [r7, #31]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	3320      	adds	r3, #32
 8002de4:	443b      	add	r3, r7
 8002de6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002df2:	7ffb      	ldrb	r3, [r7, #31]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e02:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8002e06:	7ffb      	ldrb	r3, [r7, #31]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	77fb      	strb	r3, [r7, #31]
 8002e0c:	7ffb      	ldrb	r3, [r7, #31]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d9e5      	bls.n	8002dde <LSM6DSL_AccReadXYZ_Float+0xd6>
  }
}
 8002e12:	bf00      	nop
 8002e14:	bf00      	nop
 8002e16:	3720      	adds	r7, #32
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	3d79db23 	.word	0x3d79db23
 8002e20:	3df9db23 	.word	0x3df9db23
 8002e24:	3e79db23 	.word	0x3e79db23
 8002e28:	3ef9db23 	.word	0x3ef9db23

08002e2c <Lsm6dslAccDrv_SetReadType>:

void Lsm6dslAccDrv_SetReadType(int mode){
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	if(mode == 1){
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d103      	bne.n	8002e42 <Lsm6dslAccDrv_SetReadType+0x16>
		Lsm6dslAccDrv.GetXYZ = LSM6DSL_AccReadXYZ_Float;
 8002e3a:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <Lsm6dslAccDrv_SetReadType+0x28>)
 8002e3c:	4a06      	ldr	r2, [pc, #24]	@ (8002e58 <Lsm6dslAccDrv_SetReadType+0x2c>)
 8002e3e:	631a      	str	r2, [r3, #48]	@ 0x30
	}else{
		Lsm6dslAccDrv.GetXYZ = LSM6DSL_AccReadXYZ;
	}
}
 8002e40:	e002      	b.n	8002e48 <Lsm6dslAccDrv_SetReadType+0x1c>
		Lsm6dslAccDrv.GetXYZ = LSM6DSL_AccReadXYZ;
 8002e42:	4b04      	ldr	r3, [pc, #16]	@ (8002e54 <Lsm6dslAccDrv_SetReadType+0x28>)
 8002e44:	4a05      	ldr	r2, [pc, #20]	@ (8002e5c <Lsm6dslAccDrv_SetReadType+0x30>)
 8002e46:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	20000008 	.word	0x20000008
 8002e58:	08002d09 	.word	0x08002d09
 8002e5c:	08002bdd 	.word	0x08002bdd

08002e60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e6a:	2003      	movs	r0, #3
 8002e6c:	f001 fd90 	bl	8004990 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e70:	2000      	movs	r0, #0
 8002e72:	f000 f80d 	bl	8002e90 <HAL_InitTick>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	71fb      	strb	r3, [r7, #7]
 8002e80:	e001      	b.n	8002e86 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e82:	f7fe ff5b 	bl	8001d3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e86:	79fb      	ldrb	r3, [r7, #7]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e9c:	4b17      	ldr	r3, [pc, #92]	@ (8002efc <HAL_InitTick+0x6c>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d023      	beq.n	8002eec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ea4:	4b16      	ldr	r3, [pc, #88]	@ (8002f00 <HAL_InitTick+0x70>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4b14      	ldr	r3, [pc, #80]	@ (8002efc <HAL_InitTick+0x6c>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	4619      	mov	r1, r3
 8002eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f001 fd9d 	bl	80049fa <HAL_SYSTICK_Config>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10f      	bne.n	8002ee6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b0f      	cmp	r3, #15
 8002eca:	d809      	bhi.n	8002ee0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ecc:	2200      	movs	r2, #0
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed4:	f001 fd67 	bl	80049a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f04 <HAL_InitTick+0x74>)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e007      	b.n	8002ef0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
 8002ee4:	e004      	b.n	8002ef0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
 8002eea:	e001      	b.n	8002ef0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000040 	.word	0x20000040
 8002f00:	20000004 	.word	0x20000004
 8002f04:	2000003c 	.word	0x2000003c

08002f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f0c:	4b06      	ldr	r3, [pc, #24]	@ (8002f28 <HAL_IncTick+0x20>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <HAL_IncTick+0x24>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4413      	add	r3, r2
 8002f18:	4a04      	ldr	r2, [pc, #16]	@ (8002f2c <HAL_IncTick+0x24>)
 8002f1a:	6013      	str	r3, [r2, #0]
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20000040 	.word	0x20000040
 8002f2c:	20000abc 	.word	0x20000abc

08002f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return uwTick;
 8002f34:	4b03      	ldr	r3, [pc, #12]	@ (8002f44 <HAL_GetTick+0x14>)
 8002f36:	681b      	ldr	r3, [r3, #0]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20000abc 	.word	0x20000abc

08002f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f50:	f7ff ffee 	bl	8002f30 <HAL_GetTick>
 8002f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f60:	d005      	beq.n	8002f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f62:	4b0a      	ldr	r3, [pc, #40]	@ (8002f8c <HAL_Delay+0x44>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f6e:	bf00      	nop
 8002f70:	f7ff ffde 	bl	8002f30 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d8f7      	bhi.n	8002f70 <HAL_Delay+0x28>
  {
  }
}
 8002f80:	bf00      	nop
 8002f82:	bf00      	nop
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000040 	.word	0x20000040

08002f90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	609a      	str	r2, [r3, #8]
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
 8002fbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	609a      	str	r2, [r3, #8]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	3360      	adds	r3, #96	@ 0x60
 800300a:	461a      	mov	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b08      	ldr	r3, [pc, #32]	@ (800303c <LL_ADC_SetOffset+0x44>)
 800301a:	4013      	ands	r3, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	4313      	orrs	r3, r2
 8003028:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003030:	bf00      	nop
 8003032:	371c      	adds	r7, #28
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	03fff000 	.word	0x03fff000

08003040 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3360      	adds	r3, #96	@ 0x60
 800304e:	461a      	mov	r2, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3360      	adds	r3, #96	@ 0x60
 800307c:	461a      	mov	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	431a      	orrs	r2, r3
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003096:	bf00      	nop
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	3330      	adds	r3, #48	@ 0x30
 80030d8:	461a      	mov	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	4413      	add	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	211f      	movs	r1, #31
 80030f4:	fa01 f303 	lsl.w	r3, r1, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	401a      	ands	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	0e9b      	lsrs	r3, r3, #26
 8003100:	f003 011f 	and.w	r1, r3, #31
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	fa01 f303 	lsl.w	r3, r1, r3
 800310e:	431a      	orrs	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003114:	bf00      	nop
 8003116:	371c      	adds	r7, #28
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003146:	b480      	push	{r7}
 8003148:	b087      	sub	sp, #28
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3314      	adds	r3, #20
 8003156:	461a      	mov	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	0e5b      	lsrs	r3, r3, #25
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	4413      	add	r3, r2
 8003164:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	0d1b      	lsrs	r3, r3, #20
 800316e:	f003 031f 	and.w	r3, r3, #31
 8003172:	2107      	movs	r1, #7
 8003174:	fa01 f303 	lsl.w	r3, r1, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	401a      	ands	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	0d1b      	lsrs	r3, r3, #20
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	431a      	orrs	r2, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003190:	bf00      	nop
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b4:	43db      	mvns	r3, r3
 80031b6:	401a      	ands	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f003 0318 	and.w	r3, r3, #24
 80031be:	4908      	ldr	r1, [pc, #32]	@ (80031e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80031c0:	40d9      	lsrs	r1, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	400b      	ands	r3, r1
 80031c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ca:	431a      	orrs	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80031d2:	bf00      	nop
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	0007ffff 	.word	0x0007ffff

080031e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 031f 	and.w	r3, r3, #31
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800322c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6093      	str	r3, [r2, #8]
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003250:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003254:	d101      	bne.n	800325a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003278:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800327c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032a4:	d101      	bne.n	80032aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032cc:	f043 0201 	orr.w	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <LL_ADC_IsEnabled+0x18>
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <LL_ADC_IsEnabled+0x1a>
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003316:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800331a:	f043 0204 	orr.w	r2, r3, #4
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b04      	cmp	r3, #4
 8003340:	d101      	bne.n	8003346 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b08      	cmp	r3, #8
 8003366:	d101      	bne.n	800336c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b089      	sub	sp, #36	@ 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e130      	b.n	80035f8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d109      	bne.n	80033b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7fe fced 	bl	8001d84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ff3f 	bl	8003240 <LL_ADC_IsDeepPowerDownEnabled>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ff25 	bl	800321c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff ff5a 	bl	8003290 <LL_ADC_IsInternalRegulatorEnabled>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d115      	bne.n	800340e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff ff3e 	bl	8003268 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033ec:	4b84      	ldr	r3, [pc, #528]	@ (8003600 <HAL_ADC_Init+0x284>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	4a84      	ldr	r2, [pc, #528]	@ (8003604 <HAL_ADC_Init+0x288>)
 80033f4:	fba2 2303 	umull	r2, r3, r2, r3
 80033f8:	099b      	lsrs	r3, r3, #6
 80033fa:	3301      	adds	r3, #1
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003400:	e002      	b.n	8003408 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3b01      	subs	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f9      	bne.n	8003402 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff ff3c 	bl	8003290 <LL_ADC_IsInternalRegulatorEnabled>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10d      	bne.n	800343a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003422:	f043 0210 	orr.w	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342e:	f043 0201 	orr.w	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff ff75 	bl	800332e <LL_ADC_REG_IsConversionOngoing>
 8003444:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	2b00      	cmp	r3, #0
 8003450:	f040 80c9 	bne.w	80035e6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f040 80c5 	bne.w	80035e6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003460:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003464:	f043 0202 	orr.w	r2, r3, #2
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff35 	bl	80032e0 <LL_ADC_IsEnabled>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d115      	bne.n	80034a8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800347c:	4862      	ldr	r0, [pc, #392]	@ (8003608 <HAL_ADC_Init+0x28c>)
 800347e:	f7ff ff2f 	bl	80032e0 <LL_ADC_IsEnabled>
 8003482:	4604      	mov	r4, r0
 8003484:	4861      	ldr	r0, [pc, #388]	@ (800360c <HAL_ADC_Init+0x290>)
 8003486:	f7ff ff2b 	bl	80032e0 <LL_ADC_IsEnabled>
 800348a:	4603      	mov	r3, r0
 800348c:	431c      	orrs	r4, r3
 800348e:	4860      	ldr	r0, [pc, #384]	@ (8003610 <HAL_ADC_Init+0x294>)
 8003490:	f7ff ff26 	bl	80032e0 <LL_ADC_IsEnabled>
 8003494:	4603      	mov	r3, r0
 8003496:	4323      	orrs	r3, r4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d105      	bne.n	80034a8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4619      	mov	r1, r3
 80034a2:	485c      	ldr	r0, [pc, #368]	@ (8003614 <HAL_ADC_Init+0x298>)
 80034a4:	f7ff fd74 	bl	8002f90 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7e5b      	ldrb	r3, [r3, #25]
 80034ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80034b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80034be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d106      	bne.n	80034e4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034da:	3b01      	subs	r3, #1
 80034dc:	045b      	lsls	r3, r3, #17
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d009      	beq.n	8003500 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	4b44      	ldr	r3, [pc, #272]	@ (8003618 <HAL_ADC_Init+0x29c>)
 8003508:	4013      	ands	r3, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6812      	ldr	r2, [r2, #0]
 800350e:	69b9      	ldr	r1, [r7, #24]
 8003510:	430b      	orrs	r3, r1
 8003512:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff ff1b 	bl	8003354 <LL_ADC_INJ_IsConversionOngoing>
 800351e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d13d      	bne.n	80035a2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d13a      	bne.n	80035a2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003530:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003538:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003548:	f023 0302 	bic.w	r3, r3, #2
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	69b9      	ldr	r1, [r7, #24]
 8003552:	430b      	orrs	r3, r1
 8003554:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800355c:	2b01      	cmp	r3, #1
 800355e:	d118      	bne.n	8003592 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800356a:	f023 0304 	bic.w	r3, r3, #4
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003576:	4311      	orrs	r1, r2
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800357c:	4311      	orrs	r1, r2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003582:	430a      	orrs	r2, r1
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	611a      	str	r2, [r3, #16]
 8003590:	e007      	b.n	80035a2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0201 	bic.w	r2, r2, #1
 80035a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d10c      	bne.n	80035c4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b0:	f023 010f 	bic.w	r1, r3, #15
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	1e5a      	subs	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80035c2:	e007      	b.n	80035d4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 020f 	bic.w	r2, r2, #15
 80035d2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d8:	f023 0303 	bic.w	r3, r3, #3
 80035dc:	f043 0201 	orr.w	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80035e4:	e007      	b.n	80035f6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ea:	f043 0210 	orr.w	r2, r3, #16
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80035f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3724      	adds	r7, #36	@ 0x24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd90      	pop	{r4, r7, pc}
 8003600:	20000004 	.word	0x20000004
 8003604:	053e2d63 	.word	0x053e2d63
 8003608:	50040000 	.word	0x50040000
 800360c:	50040100 	.word	0x50040100
 8003610:	50040200 	.word	0x50040200
 8003614:	50040300 	.word	0x50040300
 8003618:	fff0c007 	.word	0xfff0c007

0800361c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003624:	4891      	ldr	r0, [pc, #580]	@ (800386c <HAL_ADC_Start_IT+0x250>)
 8003626:	f7ff fddd 	bl	80031e4 <LL_ADC_GetMultimode>
 800362a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fe7c 	bl	800332e <LL_ADC_REG_IsConversionOngoing>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	f040 8110 	bne.w	800385e <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_ADC_Start_IT+0x30>
 8003648:	2302      	movs	r3, #2
 800364a:	e10b      	b.n	8003864 <HAL_ADC_Start_IT+0x248>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 ff3d 	bl	80044d4 <ADC_Enable>
 800365a:	4603      	mov	r3, r0
 800365c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800365e:	7dfb      	ldrb	r3, [r7, #23]
 8003660:	2b00      	cmp	r3, #0
 8003662:	f040 80f7 	bne.w	8003854 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800366a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a7c      	ldr	r2, [pc, #496]	@ (8003870 <HAL_ADC_Start_IT+0x254>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d002      	beq.n	800368a <HAL_ADC_Start_IT+0x6e>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	e000      	b.n	800368c <HAL_ADC_Start_IT+0x70>
 800368a:	4b7a      	ldr	r3, [pc, #488]	@ (8003874 <HAL_ADC_Start_IT+0x258>)
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	4293      	cmp	r3, r2
 8003692:	d002      	beq.n	800369a <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d105      	bne.n	80036a6 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d006      	beq.n	80036c0 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b6:	f023 0206 	bic.w	r2, r3, #6
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80036be:	e002      	b.n	80036c6 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	221c      	movs	r2, #28
 80036cc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 021c 	bic.w	r2, r2, #28
 80036e4:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d108      	bne.n	8003700 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0208 	orr.w	r2, r2, #8
 80036fc:	605a      	str	r2, [r3, #4]
          break;
 80036fe:	e008      	b.n	8003712 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0204 	orr.w	r2, r2, #4
 800370e:	605a      	str	r2, [r3, #4]
          break;
 8003710:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003716:	2b00      	cmp	r3, #0
 8003718:	d107      	bne.n	800372a <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0210 	orr.w	r2, r2, #16
 8003728:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a50      	ldr	r2, [pc, #320]	@ (8003870 <HAL_ADC_Start_IT+0x254>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d002      	beq.n	800373a <HAL_ADC_Start_IT+0x11e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	e000      	b.n	800373c <HAL_ADC_Start_IT+0x120>
 800373a:	4b4e      	ldr	r3, [pc, #312]	@ (8003874 <HAL_ADC_Start_IT+0x258>)
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	4293      	cmp	r3, r2
 8003742:	d008      	beq.n	8003756 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b05      	cmp	r3, #5
 800374e:	d002      	beq.n	8003756 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b09      	cmp	r3, #9
 8003754:	d13a      	bne.n	80037cc <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d02d      	beq.n	80037c0 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003768:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800376c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	2b08      	cmp	r3, #8
 800377a:	d110      	bne.n	800379e <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0220 	bic.w	r2, r2, #32
 800378a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800379a:	605a      	str	r2, [r3, #4]
              break;
 800379c:	e010      	b.n	80037c0 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037ac:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0220 	orr.w	r2, r2, #32
 80037bc:	605a      	str	r2, [r3, #4]
              break;
 80037be:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fd9e 	bl	8003306 <LL_ADC_REG_StartConversion>
 80037ca:	e04a      	b.n	8003862 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a24      	ldr	r2, [pc, #144]	@ (8003870 <HAL_ADC_Start_IT+0x254>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d002      	beq.n	80037e8 <HAL_ADC_Start_IT+0x1cc>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	e000      	b.n	80037ea <HAL_ADC_Start_IT+0x1ce>
 80037e8:	4b22      	ldr	r3, [pc, #136]	@ (8003874 <HAL_ADC_Start_IT+0x258>)
 80037ea:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d034      	beq.n	8003862 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003800:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d110      	bne.n	8003832 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0220 	bic.w	r2, r2, #32
 800381e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800382e:	605a      	str	r2, [r3, #4]
              break;
 8003830:	e017      	b.n	8003862 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003840:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 0220 	orr.w	r2, r2, #32
 8003850:	605a      	str	r2, [r3, #4]
              break;
 8003852:	e006      	b.n	8003862 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800385c:	e001      	b.n	8003862 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800385e:	2302      	movs	r3, #2
 8003860:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003862:	7dfb      	ldrb	r3, [r7, #23]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	50040300 	.word	0x50040300
 8003870:	50040100 	.word	0x50040100
 8003874:	50040000 	.word	0x50040000

08003878 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
	...

08003894 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	@ 0x28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800389c:	2300      	movs	r3, #0
 800389e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038b0:	4882      	ldr	r0, [pc, #520]	@ (8003abc <HAL_ADC_IRQHandler+0x228>)
 80038b2:	f7ff fc97 	bl	80031e4 <LL_ADC_GetMultimode>
 80038b6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d017      	beq.n	80038f2 <HAL_ADC_IRQHandler+0x5e>
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d012      	beq.n	80038f2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d105      	bne.n	80038e4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038dc:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fec9 	bl	800467c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2202      	movs	r2, #2
 80038f0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <HAL_ADC_IRQHandler+0x72>
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10a      	bne.n	800391c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 8083 	beq.w	8003a18 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d07d      	beq.n	8003a18 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	d105      	bne.n	8003934 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff fbb2 	bl	80030a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d062      	beq.n	8003a0a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a5d      	ldr	r2, [pc, #372]	@ (8003ac0 <HAL_ADC_IRQHandler+0x22c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d002      	beq.n	8003954 <HAL_ADC_IRQHandler+0xc0>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	e000      	b.n	8003956 <HAL_ADC_IRQHandler+0xc2>
 8003954:	4b5b      	ldr	r3, [pc, #364]	@ (8003ac4 <HAL_ADC_IRQHandler+0x230>)
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	4293      	cmp	r3, r2
 800395c:	d008      	beq.n	8003970 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2b05      	cmp	r3, #5
 8003968:	d002      	beq.n	8003970 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b09      	cmp	r3, #9
 800396e:	d104      	bne.n	800397a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	623b      	str	r3, [r7, #32]
 8003978:	e00c      	b.n	8003994 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a50      	ldr	r2, [pc, #320]	@ (8003ac0 <HAL_ADC_IRQHandler+0x22c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d002      	beq.n	800398a <HAL_ADC_IRQHandler+0xf6>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	e000      	b.n	800398c <HAL_ADC_IRQHandler+0xf8>
 800398a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ac4 <HAL_ADC_IRQHandler+0x230>)
 800398c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d135      	bne.n	8003a0a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0308 	and.w	r3, r3, #8
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d12e      	bne.n	8003a0a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff fcbc 	bl	800332e <LL_ADC_REG_IsConversionOngoing>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d11a      	bne.n	80039f2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 020c 	bic.w	r2, r2, #12
 80039ca:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d112      	bne.n	8003a0a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e8:	f043 0201 	orr.w	r2, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80039f0:	e00b      	b.n	8003a0a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f6:	f043 0210 	orr.w	r2, r3, #16
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a02:	f043 0201 	orr.w	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fe f83c 	bl	8001a88 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	220c      	movs	r2, #12
 8003a16:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d004      	beq.n	8003a2c <HAL_ADC_IRQHandler+0x198>
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10b      	bne.n	8003a44 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 809f 	beq.w	8003b76 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8099 	beq.w	8003b76 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d105      	bne.n	8003a5c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a54:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fb5d 	bl	8003120 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003a66:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fb18 	bl	80030a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a72:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a11      	ldr	r2, [pc, #68]	@ (8003ac0 <HAL_ADC_IRQHandler+0x22c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d002      	beq.n	8003a84 <HAL_ADC_IRQHandler+0x1f0>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	e000      	b.n	8003a86 <HAL_ADC_IRQHandler+0x1f2>
 8003a84:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac4 <HAL_ADC_IRQHandler+0x230>)
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6812      	ldr	r2, [r2, #0]
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d008      	beq.n	8003aa0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2b06      	cmp	r3, #6
 8003a98:	d002      	beq.n	8003aa0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b07      	cmp	r3, #7
 8003a9e:	d104      	bne.n	8003aaa <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	623b      	str	r3, [r7, #32]
 8003aa8:	e013      	b.n	8003ad2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a04      	ldr	r2, [pc, #16]	@ (8003ac0 <HAL_ADC_IRQHandler+0x22c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d009      	beq.n	8003ac8 <HAL_ADC_IRQHandler+0x234>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	e007      	b.n	8003aca <HAL_ADC_IRQHandler+0x236>
 8003aba:	bf00      	nop
 8003abc:	50040300 	.word	0x50040300
 8003ac0:	50040100 	.word	0x50040100
 8003ac4:	50040000 	.word	0x50040000
 8003ac8:	4b7d      	ldr	r3, [pc, #500]	@ (8003cc0 <HAL_ADC_IRQHandler+0x42c>)
 8003aca:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d047      	beq.n	8003b68 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d007      	beq.n	8003af2 <HAL_ADC_IRQHandler+0x25e>
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d03f      	beq.n	8003b68 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d13a      	bne.n	8003b68 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003afc:	2b40      	cmp	r3, #64	@ 0x40
 8003afe:	d133      	bne.n	8003b68 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d12e      	bne.n	8003b68 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff fc20 	bl	8003354 <LL_ADC_INJ_IsConversionOngoing>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d11a      	bne.n	8003b50 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b28:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d112      	bne.n	8003b68 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b46:	f043 0201 	orr.w	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	655a      	str	r2, [r3, #84]	@ 0x54
 8003b4e:	e00b      	b.n	8003b68 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b54:	f043 0210 	orr.w	r2, r3, #16
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b60:	f043 0201 	orr.w	r2, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fd5f 	bl	800462c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2260      	movs	r2, #96	@ 0x60
 8003b74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d011      	beq.n	8003ba4 <HAL_ADC_IRQHandler+0x310>
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00c      	beq.n	8003ba4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b8e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f896 	bl	8003cc8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2280      	movs	r2, #128	@ 0x80
 8003ba2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d012      	beq.n	8003bd4 <HAL_ADC_IRQHandler+0x340>
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bbc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 fd45 	bl	8004654 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003bd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d012      	beq.n	8003c04 <HAL_ADC_IRQHandler+0x370>
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00d      	beq.n	8003c04 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 fd37 	bl	8004668 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c02:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d036      	beq.n	8003c7c <HAL_ADC_IRQHandler+0x3e8>
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d031      	beq.n	8003c7c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d102      	bne.n	8003c26 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003c20:	2301      	movs	r3, #1
 8003c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c24:	e014      	b.n	8003c50 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003c2c:	4825      	ldr	r0, [pc, #148]	@ (8003cc4 <HAL_ADC_IRQHandler+0x430>)
 8003c2e:	f7ff fae7 	bl	8003200 <LL_ADC_GetMultiDMATransfer>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00b      	beq.n	8003c50 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c3c:	e008      	b.n	8003c50 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d10e      	bne.n	8003c74 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c66:	f043 0202 	orr.w	r2, r3, #2
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f834 	bl	8003cdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2210      	movs	r2, #16
 8003c7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d018      	beq.n	8003cb8 <HAL_ADC_IRQHandler+0x424>
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d013      	beq.n	8003cb8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c94:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca0:	f043 0208 	orr.w	r2, r3, #8
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cb0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fcc4 	bl	8004640 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003cb8:	bf00      	nop
 8003cba:	3728      	adds	r7, #40	@ 0x28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	50040000 	.word	0x50040000
 8003cc4:	50040300 	.word	0x50040300

08003cc8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b0b6      	sub	sp, #216	@ 0xd8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x22>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e3c9      	b.n	80044a6 <HAL_ADC_ConfigChannel+0x7b6>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff fb05 	bl	800332e <LL_ADC_REG_IsConversionOngoing>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f040 83aa 	bne.w	8004480 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b05      	cmp	r3, #5
 8003d3a:	d824      	bhi.n	8003d86 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	3b02      	subs	r3, #2
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d81b      	bhi.n	8003d7e <HAL_ADC_ConfigChannel+0x8e>
 8003d46:	a201      	add	r2, pc, #4	@ (adr r2, 8003d4c <HAL_ADC_ConfigChannel+0x5c>)
 8003d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4c:	08003d5d 	.word	0x08003d5d
 8003d50:	08003d65 	.word	0x08003d65
 8003d54:	08003d6d 	.word	0x08003d6d
 8003d58:	08003d75 	.word	0x08003d75
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003d5c:	230c      	movs	r3, #12
 8003d5e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003d62:	e010      	b.n	8003d86 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003d64:	2312      	movs	r3, #18
 8003d66:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003d6a:	e00c      	b.n	8003d86 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003d6c:	2318      	movs	r3, #24
 8003d6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003d72:	e008      	b.n	8003d86 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003d74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003d7c:	e003      	b.n	8003d86 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003d7e:	2306      	movs	r3, #6
 8003d80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003d84:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003d94:	f7ff f998 	bl	80030c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fac6 	bl	800332e <LL_ADC_REG_IsConversionOngoing>
 8003da2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fad2 	bl	8003354 <LL_ADC_INJ_IsConversionOngoing>
 8003db0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003db4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f040 81a4 	bne.w	8004106 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f040 819f 	bne.w	8004106 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	6819      	ldr	r1, [r3, #0]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	f7ff f9b6 	bl	8003146 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	695a      	ldr	r2, [r3, #20]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	08db      	lsrs	r3, r3, #3
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d00a      	beq.n	8003e12 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	6919      	ldr	r1, [r3, #16]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e0c:	f7ff f8f4 	bl	8002ff8 <LL_ADC_SetOffset>
 8003e10:	e179      	b.n	8004106 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff f911 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10a      	bne.n	8003e3e <HAL_ADC_ConfigChannel+0x14e>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff f906 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003e34:	4603      	mov	r3, r0
 8003e36:	0e9b      	lsrs	r3, r3, #26
 8003e38:	f003 021f 	and.w	r2, r3, #31
 8003e3c:	e01e      	b.n	8003e7c <HAL_ADC_ConfigChannel+0x18c>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2100      	movs	r1, #0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff f8fb 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e54:	fa93 f3a3 	rbit	r3, r3
 8003e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003e60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003e6c:	2320      	movs	r3, #32
 8003e6e:	e004      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003e70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003e74:	fab3 f383 	clz	r3, r3
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d105      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x1a4>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	0e9b      	lsrs	r3, r3, #26
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	e018      	b.n	8003ec6 <HAL_ADC_ConfigChannel+0x1d6>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ea0:	fa93 f3a3 	rbit	r3, r3
 8003ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003ea8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003eac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003eb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003eb8:	2320      	movs	r3, #32
 8003eba:	e004      	b.n	8003ec6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003ebc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003ec0:	fab3 f383 	clz	r3, r3
 8003ec4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d106      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff f8ca 	bl	800306c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2101      	movs	r1, #1
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff f8ae 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x214>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff f8a3 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003efa:	4603      	mov	r3, r0
 8003efc:	0e9b      	lsrs	r3, r3, #26
 8003efe:	f003 021f 	and.w	r2, r3, #31
 8003f02:	e01e      	b.n	8003f42 <HAL_ADC_ConfigChannel+0x252>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2101      	movs	r1, #1
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff f898 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f1a:	fa93 f3a3 	rbit	r3, r3
 8003f1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003f22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003f2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003f32:	2320      	movs	r3, #32
 8003f34:	e004      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003f36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f3a:	fab3 f383 	clz	r3, r3
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d105      	bne.n	8003f5a <HAL_ADC_ConfigChannel+0x26a>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	0e9b      	lsrs	r3, r3, #26
 8003f54:	f003 031f 	and.w	r3, r3, #31
 8003f58:	e018      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x29c>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f66:	fa93 f3a3 	rbit	r3, r3
 8003f6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003f6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003f76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003f7e:	2320      	movs	r3, #32
 8003f80:	e004      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003f82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f86:	fab3 f383 	clz	r3, r3
 8003f8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d106      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2200      	movs	r2, #0
 8003f96:	2101      	movs	r1, #1
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff f867 	bl	800306c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2102      	movs	r1, #2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff f84b 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x2da>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2102      	movs	r1, #2
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff f840 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	0e9b      	lsrs	r3, r3, #26
 8003fc4:	f003 021f 	and.w	r2, r3, #31
 8003fc8:	e01e      	b.n	8004008 <HAL_ADC_ConfigChannel+0x318>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2102      	movs	r1, #2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff f835 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fe0:	fa93 f3a3 	rbit	r3, r3
 8003fe4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003ff8:	2320      	movs	r3, #32
 8003ffa:	e004      	b.n	8004006 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004000:	fab3 f383 	clz	r3, r3
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004010:	2b00      	cmp	r3, #0
 8004012:	d105      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x330>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	0e9b      	lsrs	r3, r3, #26
 800401a:	f003 031f 	and.w	r3, r3, #31
 800401e:	e014      	b.n	800404a <HAL_ADC_ConfigChannel+0x35a>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004026:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004028:	fa93 f3a3 	rbit	r3, r3
 800402c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800402e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004030:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004034:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800403c:	2320      	movs	r3, #32
 800403e:	e004      	b.n	800404a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004040:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004044:	fab3 f383 	clz	r3, r3
 8004048:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800404a:	429a      	cmp	r2, r3
 800404c:	d106      	bne.n	800405c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2200      	movs	r2, #0
 8004054:	2102      	movs	r1, #2
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff f808 	bl	800306c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2103      	movs	r1, #3
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe ffec 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8004068:	4603      	mov	r3, r0
 800406a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10a      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x398>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2103      	movs	r1, #3
 8004078:	4618      	mov	r0, r3
 800407a:	f7fe ffe1 	bl	8003040 <LL_ADC_GetOffsetChannel>
 800407e:	4603      	mov	r3, r0
 8004080:	0e9b      	lsrs	r3, r3, #26
 8004082:	f003 021f 	and.w	r2, r3, #31
 8004086:	e017      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x3c8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2103      	movs	r1, #3
 800408e:	4618      	mov	r0, r3
 8004090:	f7fe ffd6 	bl	8003040 <LL_ADC_GetOffsetChannel>
 8004094:	4603      	mov	r3, r0
 8004096:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004098:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800409a:	fa93 f3a3 	rbit	r3, r3
 800409e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80040a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040a2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80040a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80040aa:	2320      	movs	r3, #32
 80040ac:	e003      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80040ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040b0:	fab3 f383 	clz	r3, r3
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d105      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x3e0>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	0e9b      	lsrs	r3, r3, #26
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	e011      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x404>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040d8:	fa93 f3a3 	rbit	r3, r3
 80040dc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80040de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80040e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80040e8:	2320      	movs	r3, #32
 80040ea:	e003      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80040ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040ee:	fab3 f383 	clz	r3, r3
 80040f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d106      	bne.n	8004106 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2200      	movs	r2, #0
 80040fe:	2103      	movs	r1, #3
 8004100:	4618      	mov	r0, r3
 8004102:	f7fe ffb3 	bl	800306c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff f8e8 	bl	80032e0 <LL_ADC_IsEnabled>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	f040 8140 	bne.w	8004398 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6819      	ldr	r1, [r3, #0]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	461a      	mov	r2, r3
 8004126:	f7ff f839 	bl	800319c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	4a8f      	ldr	r2, [pc, #572]	@ (800436c <HAL_ADC_ConfigChannel+0x67c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	f040 8131 	bne.w	8004398 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <HAL_ADC_ConfigChannel+0x46e>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	0e9b      	lsrs	r3, r3, #26
 800414c:	3301      	adds	r3, #1
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	2b09      	cmp	r3, #9
 8004154:	bf94      	ite	ls
 8004156:	2301      	movls	r3, #1
 8004158:	2300      	movhi	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	e019      	b.n	8004192 <HAL_ADC_ConfigChannel+0x4a2>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800416c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800416e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004170:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004176:	2320      	movs	r3, #32
 8004178:	e003      	b.n	8004182 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800417a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800417c:	fab3 f383 	clz	r3, r3
 8004180:	b2db      	uxtb	r3, r3
 8004182:	3301      	adds	r3, #1
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2b09      	cmp	r3, #9
 800418a:	bf94      	ite	ls
 800418c:	2301      	movls	r3, #1
 800418e:	2300      	movhi	r3, #0
 8004190:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004192:	2b00      	cmp	r3, #0
 8004194:	d079      	beq.n	800428a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d107      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x4c2>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	0e9b      	lsrs	r3, r3, #26
 80041a8:	3301      	adds	r3, #1
 80041aa:	069b      	lsls	r3, r3, #26
 80041ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041b0:	e015      	b.n	80041de <HAL_ADC_ConfigChannel+0x4ee>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041ba:	fa93 f3a3 	rbit	r3, r3
 80041be:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80041c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041c2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80041c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80041ca:	2320      	movs	r3, #32
 80041cc:	e003      	b.n	80041d6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80041ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041d0:	fab3 f383 	clz	r3, r3
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	3301      	adds	r3, #1
 80041d8:	069b      	lsls	r3, r3, #26
 80041da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x50e>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	0e9b      	lsrs	r3, r3, #26
 80041f0:	3301      	adds	r3, #1
 80041f2:	f003 031f 	and.w	r3, r3, #31
 80041f6:	2101      	movs	r1, #1
 80041f8:	fa01 f303 	lsl.w	r3, r1, r3
 80041fc:	e017      	b.n	800422e <HAL_ADC_ConfigChannel+0x53e>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004206:	fa93 f3a3 	rbit	r3, r3
 800420a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800420c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800420e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004216:	2320      	movs	r3, #32
 8004218:	e003      	b.n	8004222 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800421a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800421c:	fab3 f383 	clz	r3, r3
 8004220:	b2db      	uxtb	r3, r3
 8004222:	3301      	adds	r3, #1
 8004224:	f003 031f 	and.w	r3, r3, #31
 8004228:	2101      	movs	r1, #1
 800422a:	fa01 f303 	lsl.w	r3, r1, r3
 800422e:	ea42 0103 	orr.w	r1, r2, r3
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10a      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x564>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	0e9b      	lsrs	r3, r3, #26
 8004244:	3301      	adds	r3, #1
 8004246:	f003 021f 	and.w	r2, r3, #31
 800424a:	4613      	mov	r3, r2
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	4413      	add	r3, r2
 8004250:	051b      	lsls	r3, r3, #20
 8004252:	e018      	b.n	8004286 <HAL_ADC_ConfigChannel+0x596>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800425c:	fa93 f3a3 	rbit	r3, r3
 8004260:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004264:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800426c:	2320      	movs	r3, #32
 800426e:	e003      	b.n	8004278 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	3301      	adds	r3, #1
 800427a:	f003 021f 	and.w	r2, r3, #31
 800427e:	4613      	mov	r3, r2
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	4413      	add	r3, r2
 8004284:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004286:	430b      	orrs	r3, r1
 8004288:	e081      	b.n	800438e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004292:	2b00      	cmp	r3, #0
 8004294:	d107      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x5b6>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	0e9b      	lsrs	r3, r3, #26
 800429c:	3301      	adds	r3, #1
 800429e:	069b      	lsls	r3, r3, #26
 80042a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042a4:	e015      	b.n	80042d2 <HAL_ADC_ConfigChannel+0x5e2>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ae:	fa93 f3a3 	rbit	r3, r3
 80042b2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80042b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80042b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80042be:	2320      	movs	r3, #32
 80042c0:	e003      	b.n	80042ca <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80042c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c4:	fab3 f383 	clz	r3, r3
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	3301      	adds	r3, #1
 80042cc:	069b      	lsls	r3, r3, #26
 80042ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <HAL_ADC_ConfigChannel+0x602>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	0e9b      	lsrs	r3, r3, #26
 80042e4:	3301      	adds	r3, #1
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	2101      	movs	r1, #1
 80042ec:	fa01 f303 	lsl.w	r3, r1, r3
 80042f0:	e017      	b.n	8004322 <HAL_ADC_ConfigChannel+0x632>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	fa93 f3a3 	rbit	r3, r3
 80042fe:	61bb      	str	r3, [r7, #24]
  return result;
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800430a:	2320      	movs	r3, #32
 800430c:	e003      	b.n	8004316 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	fab3 f383 	clz	r3, r3
 8004314:	b2db      	uxtb	r3, r3
 8004316:	3301      	adds	r3, #1
 8004318:	f003 031f 	and.w	r3, r3, #31
 800431c:	2101      	movs	r1, #1
 800431e:	fa01 f303 	lsl.w	r3, r1, r3
 8004322:	ea42 0103 	orr.w	r1, r2, r3
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10d      	bne.n	800434e <HAL_ADC_ConfigChannel+0x65e>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	0e9b      	lsrs	r3, r3, #26
 8004338:	3301      	adds	r3, #1
 800433a:	f003 021f 	and.w	r2, r3, #31
 800433e:	4613      	mov	r3, r2
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	4413      	add	r3, r2
 8004344:	3b1e      	subs	r3, #30
 8004346:	051b      	lsls	r3, r3, #20
 8004348:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800434c:	e01e      	b.n	800438c <HAL_ADC_ConfigChannel+0x69c>
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	fa93 f3a3 	rbit	r3, r3
 800435a:	60fb      	str	r3, [r7, #12]
  return result;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d104      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004366:	2320      	movs	r3, #32
 8004368:	e006      	b.n	8004378 <HAL_ADC_ConfigChannel+0x688>
 800436a:	bf00      	nop
 800436c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	fab3 f383 	clz	r3, r3
 8004376:	b2db      	uxtb	r3, r3
 8004378:	3301      	adds	r3, #1
 800437a:	f003 021f 	and.w	r2, r3, #31
 800437e:	4613      	mov	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4413      	add	r3, r2
 8004384:	3b1e      	subs	r3, #30
 8004386:	051b      	lsls	r3, r3, #20
 8004388:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800438c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004392:	4619      	mov	r1, r3
 8004394:	f7fe fed7 	bl	8003146 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	4b44      	ldr	r3, [pc, #272]	@ (80044b0 <HAL_ADC_ConfigChannel+0x7c0>)
 800439e:	4013      	ands	r3, r2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d07a      	beq.n	800449a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043a4:	4843      	ldr	r0, [pc, #268]	@ (80044b4 <HAL_ADC_ConfigChannel+0x7c4>)
 80043a6:	f7fe fe19 	bl	8002fdc <LL_ADC_GetCommonPathInternalCh>
 80043aa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a41      	ldr	r2, [pc, #260]	@ (80044b8 <HAL_ADC_ConfigChannel+0x7c8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d12c      	bne.n	8004412 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80043bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d126      	bne.n	8004412 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a3c      	ldr	r2, [pc, #240]	@ (80044bc <HAL_ADC_ConfigChannel+0x7cc>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d004      	beq.n	80043d8 <HAL_ADC_ConfigChannel+0x6e8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a3b      	ldr	r2, [pc, #236]	@ (80044c0 <HAL_ADC_ConfigChannel+0x7d0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d15d      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80043dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043e0:	4619      	mov	r1, r3
 80043e2:	4834      	ldr	r0, [pc, #208]	@ (80044b4 <HAL_ADC_ConfigChannel+0x7c4>)
 80043e4:	f7fe fde7 	bl	8002fb6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043e8:	4b36      	ldr	r3, [pc, #216]	@ (80044c4 <HAL_ADC_ConfigChannel+0x7d4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	099b      	lsrs	r3, r3, #6
 80043ee:	4a36      	ldr	r2, [pc, #216]	@ (80044c8 <HAL_ADC_ConfigChannel+0x7d8>)
 80043f0:	fba2 2303 	umull	r2, r3, r2, r3
 80043f4:	099b      	lsrs	r3, r3, #6
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	4613      	mov	r3, r2
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	4413      	add	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004402:	e002      	b.n	800440a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	3b01      	subs	r3, #1
 8004408:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f9      	bne.n	8004404 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004410:	e040      	b.n	8004494 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a2d      	ldr	r2, [pc, #180]	@ (80044cc <HAL_ADC_ConfigChannel+0x7dc>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d118      	bne.n	800444e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800441c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004420:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d112      	bne.n	800444e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a23      	ldr	r2, [pc, #140]	@ (80044bc <HAL_ADC_ConfigChannel+0x7cc>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d004      	beq.n	800443c <HAL_ADC_ConfigChannel+0x74c>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a22      	ldr	r2, [pc, #136]	@ (80044c0 <HAL_ADC_ConfigChannel+0x7d0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d12d      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800443c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004440:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004444:	4619      	mov	r1, r3
 8004446:	481b      	ldr	r0, [pc, #108]	@ (80044b4 <HAL_ADC_ConfigChannel+0x7c4>)
 8004448:	f7fe fdb5 	bl	8002fb6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800444c:	e024      	b.n	8004498 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a1f      	ldr	r2, [pc, #124]	@ (80044d0 <HAL_ADC_ConfigChannel+0x7e0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d120      	bne.n	800449a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004458:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800445c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d11a      	bne.n	800449a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a14      	ldr	r2, [pc, #80]	@ (80044bc <HAL_ADC_ConfigChannel+0x7cc>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d115      	bne.n	800449a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800446e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004472:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004476:	4619      	mov	r1, r3
 8004478:	480e      	ldr	r0, [pc, #56]	@ (80044b4 <HAL_ADC_ConfigChannel+0x7c4>)
 800447a:	f7fe fd9c 	bl	8002fb6 <LL_ADC_SetCommonPathInternalCh>
 800447e:	e00c      	b.n	800449a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004484:	f043 0220 	orr.w	r2, r3, #32
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004492:	e002      	b.n	800449a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004494:	bf00      	nop
 8004496:	e000      	b.n	800449a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004498:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80044a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	37d8      	adds	r7, #216	@ 0xd8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	80080000 	.word	0x80080000
 80044b4:	50040300 	.word	0x50040300
 80044b8:	c7520000 	.word	0xc7520000
 80044bc:	50040000 	.word	0x50040000
 80044c0:	50040200 	.word	0x50040200
 80044c4:	20000004 	.word	0x20000004
 80044c8:	053e2d63 	.word	0x053e2d63
 80044cc:	cb840000 	.word	0xcb840000
 80044d0:	80000001 	.word	0x80000001

080044d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80044dc:	2300      	movs	r3, #0
 80044de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fe fefb 	bl	80032e0 <LL_ADC_IsEnabled>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d169      	bne.n	80045c4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	4b36      	ldr	r3, [pc, #216]	@ (80045d0 <ADC_Enable+0xfc>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00d      	beq.n	800451a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004502:	f043 0210 	orr.w	r2, r3, #16
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800450e:	f043 0201 	orr.w	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e055      	b.n	80045c6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe feca 	bl	80032b8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004524:	482b      	ldr	r0, [pc, #172]	@ (80045d4 <ADC_Enable+0x100>)
 8004526:	f7fe fd59 	bl	8002fdc <LL_ADC_GetCommonPathInternalCh>
 800452a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800452c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004530:	2b00      	cmp	r3, #0
 8004532:	d013      	beq.n	800455c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004534:	4b28      	ldr	r3, [pc, #160]	@ (80045d8 <ADC_Enable+0x104>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	099b      	lsrs	r3, r3, #6
 800453a:	4a28      	ldr	r2, [pc, #160]	@ (80045dc <ADC_Enable+0x108>)
 800453c:	fba2 2303 	umull	r2, r3, r2, r3
 8004540:	099b      	lsrs	r3, r3, #6
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	4613      	mov	r3, r2
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800454e:	e002      	b.n	8004556 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	3b01      	subs	r3, #1
 8004554:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1f9      	bne.n	8004550 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800455c:	f7fe fce8 	bl	8002f30 <HAL_GetTick>
 8004560:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004562:	e028      	b.n	80045b6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe feb9 	bl	80032e0 <LL_ADC_IsEnabled>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d104      	bne.n	800457e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f7fe fe9d 	bl	80032b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800457e:	f7fe fcd7 	bl	8002f30 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d914      	bls.n	80045b6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b01      	cmp	r3, #1
 8004598:	d00d      	beq.n	80045b6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459e:	f043 0210 	orr.w	r2, r3, #16
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045aa:	f043 0201 	orr.w	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e007      	b.n	80045c6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d1cf      	bne.n	8004564 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	8000003f 	.word	0x8000003f
 80045d4:	50040300 	.word	0x50040300
 80045d8:	20000004 	.word	0x20000004
 80045dc:	053e2d63 	.word	0x053e2d63

080045e0 <LL_ADC_IsEnabled>:
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <LL_ADC_IsEnabled+0x18>
 80045f4:	2301      	movs	r3, #1
 80045f6:	e000      	b.n	80045fa <LL_ADC_IsEnabled+0x1a>
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <LL_ADC_REG_IsConversionOngoing>:
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b04      	cmp	r3, #4
 8004618:	d101      	bne.n	800461e <LL_ADC_REG_IsConversionOngoing+0x18>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004690:	b590      	push	{r4, r7, lr}
 8004692:	b09f      	sub	sp, #124	@ 0x7c
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e093      	b.n	80047d6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80046b6:	2300      	movs	r3, #0
 80046b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80046ba:	2300      	movs	r3, #0
 80046bc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a47      	ldr	r2, [pc, #284]	@ (80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d102      	bne.n	80046ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80046c8:	4b46      	ldr	r3, [pc, #280]	@ (80047e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80046ca:	60bb      	str	r3, [r7, #8]
 80046cc:	e001      	b.n	80046d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80046ce:	2300      	movs	r3, #0
 80046d0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10b      	bne.n	80046f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046dc:	f043 0220 	orr.w	r2, r3, #32
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e072      	b.n	80047d6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff ff87 	bl	8004606 <LL_ADC_REG_IsConversionOngoing>
 80046f8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff ff81 	bl	8004606 <LL_ADC_REG_IsConversionOngoing>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d154      	bne.n	80047b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800470a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800470c:	2b00      	cmp	r3, #0
 800470e:	d151      	bne.n	80047b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004710:	4b35      	ldr	r3, [pc, #212]	@ (80047e8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004712:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d02c      	beq.n	8004776 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800471c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	6859      	ldr	r1, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800472e:	035b      	lsls	r3, r3, #13
 8004730:	430b      	orrs	r3, r1
 8004732:	431a      	orrs	r2, r3
 8004734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004736:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004738:	4829      	ldr	r0, [pc, #164]	@ (80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800473a:	f7ff ff51 	bl	80045e0 <LL_ADC_IsEnabled>
 800473e:	4604      	mov	r4, r0
 8004740:	4828      	ldr	r0, [pc, #160]	@ (80047e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004742:	f7ff ff4d 	bl	80045e0 <LL_ADC_IsEnabled>
 8004746:	4603      	mov	r3, r0
 8004748:	431c      	orrs	r4, r3
 800474a:	4828      	ldr	r0, [pc, #160]	@ (80047ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800474c:	f7ff ff48 	bl	80045e0 <LL_ADC_IsEnabled>
 8004750:	4603      	mov	r3, r0
 8004752:	4323      	orrs	r3, r4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d137      	bne.n	80047c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004758:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004760:	f023 030f 	bic.w	r3, r3, #15
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	6811      	ldr	r1, [r2, #0]
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	6892      	ldr	r2, [r2, #8]
 800476c:	430a      	orrs	r2, r1
 800476e:	431a      	orrs	r2, r3
 8004770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004772:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004774:	e028      	b.n	80047c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004776:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800477e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004780:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004782:	4817      	ldr	r0, [pc, #92]	@ (80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004784:	f7ff ff2c 	bl	80045e0 <LL_ADC_IsEnabled>
 8004788:	4604      	mov	r4, r0
 800478a:	4816      	ldr	r0, [pc, #88]	@ (80047e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800478c:	f7ff ff28 	bl	80045e0 <LL_ADC_IsEnabled>
 8004790:	4603      	mov	r3, r0
 8004792:	431c      	orrs	r4, r3
 8004794:	4815      	ldr	r0, [pc, #84]	@ (80047ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004796:	f7ff ff23 	bl	80045e0 <LL_ADC_IsEnabled>
 800479a:	4603      	mov	r3, r0
 800479c:	4323      	orrs	r3, r4
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d112      	bne.n	80047c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80047a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80047aa:	f023 030f 	bic.w	r3, r3, #15
 80047ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80047b0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047b2:	e009      	b.n	80047c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b8:	f043 0220 	orr.w	r2, r3, #32
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80047c6:	e000      	b.n	80047ca <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80047d2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	377c      	adds	r7, #124	@ 0x7c
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd90      	pop	{r4, r7, pc}
 80047de:	bf00      	nop
 80047e0:	50040000 	.word	0x50040000
 80047e4:	50040100 	.word	0x50040100
 80047e8:	50040300 	.word	0x50040300
 80047ec:	50040200 	.word	0x50040200

080047f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004800:	4b0c      	ldr	r3, [pc, #48]	@ (8004834 <__NVIC_SetPriorityGrouping+0x44>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800480c:	4013      	ands	r3, r2
 800480e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004818:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800481c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004822:	4a04      	ldr	r2, [pc, #16]	@ (8004834 <__NVIC_SetPriorityGrouping+0x44>)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	60d3      	str	r3, [r2, #12]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	e000ed00 	.word	0xe000ed00

08004838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800483c:	4b04      	ldr	r3, [pc, #16]	@ (8004850 <__NVIC_GetPriorityGrouping+0x18>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	0a1b      	lsrs	r3, r3, #8
 8004842:	f003 0307 	and.w	r3, r3, #7
}
 8004846:	4618      	mov	r0, r3
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	e000ed00 	.word	0xe000ed00

08004854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800485e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004862:	2b00      	cmp	r3, #0
 8004864:	db0b      	blt.n	800487e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	f003 021f 	and.w	r2, r3, #31
 800486c:	4907      	ldr	r1, [pc, #28]	@ (800488c <__NVIC_EnableIRQ+0x38>)
 800486e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004872:	095b      	lsrs	r3, r3, #5
 8004874:	2001      	movs	r0, #1
 8004876:	fa00 f202 	lsl.w	r2, r0, r2
 800487a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	e000e100 	.word	0xe000e100

08004890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	6039      	str	r1, [r7, #0]
 800489a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800489c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	db0a      	blt.n	80048ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	490c      	ldr	r1, [pc, #48]	@ (80048dc <__NVIC_SetPriority+0x4c>)
 80048aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ae:	0112      	lsls	r2, r2, #4
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	440b      	add	r3, r1
 80048b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048b8:	e00a      	b.n	80048d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	4908      	ldr	r1, [pc, #32]	@ (80048e0 <__NVIC_SetPriority+0x50>)
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	3b04      	subs	r3, #4
 80048c8:	0112      	lsls	r2, r2, #4
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	440b      	add	r3, r1
 80048ce:	761a      	strb	r2, [r3, #24]
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	e000e100 	.word	0xe000e100
 80048e0:	e000ed00 	.word	0xe000ed00

080048e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b089      	sub	sp, #36	@ 0x24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f1c3 0307 	rsb	r3, r3, #7
 80048fe:	2b04      	cmp	r3, #4
 8004900:	bf28      	it	cs
 8004902:	2304      	movcs	r3, #4
 8004904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3304      	adds	r3, #4
 800490a:	2b06      	cmp	r3, #6
 800490c:	d902      	bls.n	8004914 <NVIC_EncodePriority+0x30>
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	3b03      	subs	r3, #3
 8004912:	e000      	b.n	8004916 <NVIC_EncodePriority+0x32>
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004918:	f04f 32ff 	mov.w	r2, #4294967295
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43da      	mvns	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	401a      	ands	r2, r3
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800492c:	f04f 31ff 	mov.w	r1, #4294967295
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	fa01 f303 	lsl.w	r3, r1, r3
 8004936:	43d9      	mvns	r1, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800493c:	4313      	orrs	r3, r2
         );
}
 800493e:	4618      	mov	r0, r3
 8004940:	3724      	adds	r7, #36	@ 0x24
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3b01      	subs	r3, #1
 8004958:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800495c:	d301      	bcc.n	8004962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800495e:	2301      	movs	r3, #1
 8004960:	e00f      	b.n	8004982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004962:	4a0a      	ldr	r2, [pc, #40]	@ (800498c <SysTick_Config+0x40>)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3b01      	subs	r3, #1
 8004968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800496a:	210f      	movs	r1, #15
 800496c:	f04f 30ff 	mov.w	r0, #4294967295
 8004970:	f7ff ff8e 	bl	8004890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004974:	4b05      	ldr	r3, [pc, #20]	@ (800498c <SysTick_Config+0x40>)
 8004976:	2200      	movs	r2, #0
 8004978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800497a:	4b04      	ldr	r3, [pc, #16]	@ (800498c <SysTick_Config+0x40>)
 800497c:	2207      	movs	r2, #7
 800497e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	e000e010 	.word	0xe000e010

08004990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff ff29 	bl	80047f0 <__NVIC_SetPriorityGrouping>
}
 800499e:	bf00      	nop
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b086      	sub	sp, #24
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	4603      	mov	r3, r0
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80049b4:	2300      	movs	r3, #0
 80049b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049b8:	f7ff ff3e 	bl	8004838 <__NVIC_GetPriorityGrouping>
 80049bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	6978      	ldr	r0, [r7, #20]
 80049c4:	f7ff ff8e 	bl	80048e4 <NVIC_EncodePriority>
 80049c8:	4602      	mov	r2, r0
 80049ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ce:	4611      	mov	r1, r2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff ff5d 	bl	8004890 <__NVIC_SetPriority>
}
 80049d6:	bf00      	nop
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	4603      	mov	r3, r0
 80049e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff ff31 	bl	8004854 <__NVIC_EnableIRQ>
}
 80049f2:	bf00      	nop
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff ffa2 	bl	800494c <SysTick_Config>
 8004a08:	4603      	mov	r3, r0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e0ac      	b.n	8004b80 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 f8b2 	bl	8004b94 <DFSDM_GetChannelFromInstance>
 8004a30:	4603      	mov	r3, r0
 8004a32:	4a55      	ldr	r2, [pc, #340]	@ (8004b88 <HAL_DFSDM_ChannelInit+0x174>)
 8004a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e09f      	b.n	8004b80 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7fd f9ff 	bl	8001e44 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004a46:	4b51      	ldr	r3, [pc, #324]	@ (8004b8c <HAL_DFSDM_ChannelInit+0x178>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	4a4f      	ldr	r2, [pc, #316]	@ (8004b8c <HAL_DFSDM_ChannelInit+0x178>)
 8004a4e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004a50:	4b4e      	ldr	r3, [pc, #312]	@ (8004b8c <HAL_DFSDM_ChannelInit+0x178>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d125      	bne.n	8004aa4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004a58:	4b4d      	ldr	r3, [pc, #308]	@ (8004b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a4c      	ldr	r2, [pc, #304]	@ (8004b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a62:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004a64:	4b4a      	ldr	r3, [pc, #296]	@ (8004b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	4948      	ldr	r1, [pc, #288]	@ (8004b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004a72:	4b47      	ldr	r3, [pc, #284]	@ (8004b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a46      	ldr	r2, [pc, #280]	@ (8004b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a78:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8004a7c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	791b      	ldrb	r3, [r3, #4]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d108      	bne.n	8004a98 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004a86:	4b42      	ldr	r3, [pc, #264]	@ (8004b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	041b      	lsls	r3, r3, #16
 8004a92:	493f      	ldr	r1, [pc, #252]	@ (8004b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004a98:	4b3d      	ldr	r3, [pc, #244]	@ (8004b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a3c      	ldr	r2, [pc, #240]	@ (8004b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8004ab2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6819      	ldr	r1, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004ac2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004ac8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 020f 	bic.w	r2, r2, #15
 8004ae0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6819      	ldr	r1, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8004b08:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6899      	ldr	r1, [r3, #8]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f002 0207 	and.w	r2, r2, #7
 8004b34:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6859      	ldr	r1, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b40:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b46:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b60:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f810 	bl	8004b94 <DFSDM_GetChannelFromInstance>
 8004b74:	4602      	mov	r2, r0
 8004b76:	4904      	ldr	r1, [pc, #16]	@ (8004b88 <HAL_DFSDM_ChannelInit+0x174>)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20000ac4 	.word	0x20000ac4
 8004b8c:	20000ac0 	.word	0x20000ac0
 8004b90:	40016000 	.word	0x40016000

08004b94 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8004c10 <DFSDM_GetChannelFromInstance+0x7c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d102      	bne.n	8004baa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e02b      	b.n	8004c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a19      	ldr	r2, [pc, #100]	@ (8004c14 <DFSDM_GetChannelFromInstance+0x80>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d102      	bne.n	8004bb8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	e024      	b.n	8004c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a17      	ldr	r2, [pc, #92]	@ (8004c18 <DFSDM_GetChannelFromInstance+0x84>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d102      	bne.n	8004bc6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e01d      	b.n	8004c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a14      	ldr	r2, [pc, #80]	@ (8004c1c <DFSDM_GetChannelFromInstance+0x88>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d102      	bne.n	8004bd4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004bce:	2304      	movs	r3, #4
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	e016      	b.n	8004c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a12      	ldr	r2, [pc, #72]	@ (8004c20 <DFSDM_GetChannelFromInstance+0x8c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d102      	bne.n	8004be2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004bdc:	2305      	movs	r3, #5
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e00f      	b.n	8004c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a0f      	ldr	r2, [pc, #60]	@ (8004c24 <DFSDM_GetChannelFromInstance+0x90>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d102      	bne.n	8004bf0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004bea:	2306      	movs	r3, #6
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	e008      	b.n	8004c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8004c28 <DFSDM_GetChannelFromInstance+0x94>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d102      	bne.n	8004bfe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004bf8:	2307      	movs	r3, #7
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	e001      	b.n	8004c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004c02:	68fb      	ldr	r3, [r7, #12]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40016000 	.word	0x40016000
 8004c14:	40016020 	.word	0x40016020
 8004c18:	40016040 	.word	0x40016040
 8004c1c:	40016080 	.word	0x40016080
 8004c20:	400160a0 	.word	0x400160a0
 8004c24:	400160c0 	.word	0x400160c0
 8004c28:	400160e0 	.word	0x400160e0

08004c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c3a:	e17f      	b.n	8004f3c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	2101      	movs	r1, #1
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	fa01 f303 	lsl.w	r3, r1, r3
 8004c48:	4013      	ands	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 8171 	beq.w	8004f36 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 0303 	and.w	r3, r3, #3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d005      	beq.n	8004c6c <HAL_GPIO_Init+0x40>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f003 0303 	and.w	r3, r3, #3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d130      	bne.n	8004cce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	2203      	movs	r2, #3
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4013      	ands	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43db      	mvns	r3, r3
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	091b      	lsrs	r3, r3, #4
 8004cb8:	f003 0201 	and.w	r2, r3, #1
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d118      	bne.n	8004d0c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4013      	ands	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	08db      	lsrs	r3, r3, #3
 8004cf6:	f003 0201 	and.w	r2, r3, #1
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d017      	beq.n	8004d48 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	2203      	movs	r2, #3
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 0303 	and.w	r3, r3, #3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d123      	bne.n	8004d9c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	08da      	lsrs	r2, r3, #3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3208      	adds	r2, #8
 8004d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	220f      	movs	r2, #15
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	43db      	mvns	r3, r3
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4013      	ands	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	08da      	lsrs	r2, r3, #3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3208      	adds	r2, #8
 8004d96:	6939      	ldr	r1, [r7, #16]
 8004d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	2203      	movs	r2, #3
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	43db      	mvns	r3, r3
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4013      	ands	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0203 	and.w	r2, r3, #3
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80ac 	beq.w	8004f36 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dde:	4b5f      	ldr	r3, [pc, #380]	@ (8004f5c <HAL_GPIO_Init+0x330>)
 8004de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004de2:	4a5e      	ldr	r2, [pc, #376]	@ (8004f5c <HAL_GPIO_Init+0x330>)
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	6613      	str	r3, [r2, #96]	@ 0x60
 8004dea:	4b5c      	ldr	r3, [pc, #368]	@ (8004f5c <HAL_GPIO_Init+0x330>)
 8004dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	60bb      	str	r3, [r7, #8]
 8004df4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004df6:	4a5a      	ldr	r2, [pc, #360]	@ (8004f60 <HAL_GPIO_Init+0x334>)
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	089b      	lsrs	r3, r3, #2
 8004dfc:	3302      	adds	r3, #2
 8004dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e02:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	220f      	movs	r2, #15
 8004e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e12:	43db      	mvns	r3, r3
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4013      	ands	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004e20:	d025      	beq.n	8004e6e <HAL_GPIO_Init+0x242>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a4f      	ldr	r2, [pc, #316]	@ (8004f64 <HAL_GPIO_Init+0x338>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d01f      	beq.n	8004e6a <HAL_GPIO_Init+0x23e>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a4e      	ldr	r2, [pc, #312]	@ (8004f68 <HAL_GPIO_Init+0x33c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d019      	beq.n	8004e66 <HAL_GPIO_Init+0x23a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a4d      	ldr	r2, [pc, #308]	@ (8004f6c <HAL_GPIO_Init+0x340>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d013      	beq.n	8004e62 <HAL_GPIO_Init+0x236>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a4c      	ldr	r2, [pc, #304]	@ (8004f70 <HAL_GPIO_Init+0x344>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00d      	beq.n	8004e5e <HAL_GPIO_Init+0x232>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a4b      	ldr	r2, [pc, #300]	@ (8004f74 <HAL_GPIO_Init+0x348>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d007      	beq.n	8004e5a <HAL_GPIO_Init+0x22e>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a4a      	ldr	r2, [pc, #296]	@ (8004f78 <HAL_GPIO_Init+0x34c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d101      	bne.n	8004e56 <HAL_GPIO_Init+0x22a>
 8004e52:	2306      	movs	r3, #6
 8004e54:	e00c      	b.n	8004e70 <HAL_GPIO_Init+0x244>
 8004e56:	2307      	movs	r3, #7
 8004e58:	e00a      	b.n	8004e70 <HAL_GPIO_Init+0x244>
 8004e5a:	2305      	movs	r3, #5
 8004e5c:	e008      	b.n	8004e70 <HAL_GPIO_Init+0x244>
 8004e5e:	2304      	movs	r3, #4
 8004e60:	e006      	b.n	8004e70 <HAL_GPIO_Init+0x244>
 8004e62:	2303      	movs	r3, #3
 8004e64:	e004      	b.n	8004e70 <HAL_GPIO_Init+0x244>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e002      	b.n	8004e70 <HAL_GPIO_Init+0x244>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <HAL_GPIO_Init+0x244>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	f002 0203 	and.w	r2, r2, #3
 8004e76:	0092      	lsls	r2, r2, #2
 8004e78:	4093      	lsls	r3, r2
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e80:	4937      	ldr	r1, [pc, #220]	@ (8004f60 <HAL_GPIO_Init+0x334>)
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	089b      	lsrs	r3, r3, #2
 8004e86:	3302      	adds	r3, #2
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8004f7c <HAL_GPIO_Init+0x350>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	43db      	mvns	r3, r3
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004eb2:	4a32      	ldr	r2, [pc, #200]	@ (8004f7c <HAL_GPIO_Init+0x350>)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004eb8:	4b30      	ldr	r3, [pc, #192]	@ (8004f7c <HAL_GPIO_Init+0x350>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004edc:	4a27      	ldr	r2, [pc, #156]	@ (8004f7c <HAL_GPIO_Init+0x350>)
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004ee2:	4b26      	ldr	r3, [pc, #152]	@ (8004f7c <HAL_GPIO_Init+0x350>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	43db      	mvns	r3, r3
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f06:	4a1d      	ldr	r2, [pc, #116]	@ (8004f7c <HAL_GPIO_Init+0x350>)
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004f7c <HAL_GPIO_Init+0x350>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	43db      	mvns	r3, r3
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f30:	4a12      	ldr	r2, [pc, #72]	@ (8004f7c <HAL_GPIO_Init+0x350>)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	fa22 f303 	lsr.w	r3, r2, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f47f ae78 	bne.w	8004c3c <HAL_GPIO_Init+0x10>
  }
}
 8004f4c:	bf00      	nop
 8004f4e:	bf00      	nop
 8004f50:	371c      	adds	r7, #28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	40010000 	.word	0x40010000
 8004f64:	48000400 	.word	0x48000400
 8004f68:	48000800 	.word	0x48000800
 8004f6c:	48000c00 	.word	0x48000c00
 8004f70:	48001000 	.word	0x48001000
 8004f74:	48001400 	.word	0x48001400
 8004f78:	48001800 	.word	0x48001800
 8004f7c:	40010400 	.word	0x40010400

08004f80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004f8e:	e0cd      	b.n	800512c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004f90:	2201      	movs	r2, #1
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 80c0 	beq.w	8005126 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004fa6:	4a68      	ldr	r2, [pc, #416]	@ (8005148 <HAL_GPIO_DeInit+0x1c8>)
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	089b      	lsrs	r3, r3, #2
 8004fac:	3302      	adds	r3, #2
 8004fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	220f      	movs	r2, #15
 8004fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004fce:	d025      	beq.n	800501c <HAL_GPIO_DeInit+0x9c>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a5e      	ldr	r2, [pc, #376]	@ (800514c <HAL_GPIO_DeInit+0x1cc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d01f      	beq.n	8005018 <HAL_GPIO_DeInit+0x98>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a5d      	ldr	r2, [pc, #372]	@ (8005150 <HAL_GPIO_DeInit+0x1d0>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d019      	beq.n	8005014 <HAL_GPIO_DeInit+0x94>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a5c      	ldr	r2, [pc, #368]	@ (8005154 <HAL_GPIO_DeInit+0x1d4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d013      	beq.n	8005010 <HAL_GPIO_DeInit+0x90>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a5b      	ldr	r2, [pc, #364]	@ (8005158 <HAL_GPIO_DeInit+0x1d8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d00d      	beq.n	800500c <HAL_GPIO_DeInit+0x8c>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a5a      	ldr	r2, [pc, #360]	@ (800515c <HAL_GPIO_DeInit+0x1dc>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d007      	beq.n	8005008 <HAL_GPIO_DeInit+0x88>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a59      	ldr	r2, [pc, #356]	@ (8005160 <HAL_GPIO_DeInit+0x1e0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d101      	bne.n	8005004 <HAL_GPIO_DeInit+0x84>
 8005000:	2306      	movs	r3, #6
 8005002:	e00c      	b.n	800501e <HAL_GPIO_DeInit+0x9e>
 8005004:	2307      	movs	r3, #7
 8005006:	e00a      	b.n	800501e <HAL_GPIO_DeInit+0x9e>
 8005008:	2305      	movs	r3, #5
 800500a:	e008      	b.n	800501e <HAL_GPIO_DeInit+0x9e>
 800500c:	2304      	movs	r3, #4
 800500e:	e006      	b.n	800501e <HAL_GPIO_DeInit+0x9e>
 8005010:	2303      	movs	r3, #3
 8005012:	e004      	b.n	800501e <HAL_GPIO_DeInit+0x9e>
 8005014:	2302      	movs	r3, #2
 8005016:	e002      	b.n	800501e <HAL_GPIO_DeInit+0x9e>
 8005018:	2301      	movs	r3, #1
 800501a:	e000      	b.n	800501e <HAL_GPIO_DeInit+0x9e>
 800501c:	2300      	movs	r3, #0
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	f002 0203 	and.w	r2, r2, #3
 8005024:	0092      	lsls	r2, r2, #2
 8005026:	4093      	lsls	r3, r2
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	429a      	cmp	r2, r3
 800502c:	d132      	bne.n	8005094 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800502e:	4b4d      	ldr	r3, [pc, #308]	@ (8005164 <HAL_GPIO_DeInit+0x1e4>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	43db      	mvns	r3, r3
 8005036:	494b      	ldr	r1, [pc, #300]	@ (8005164 <HAL_GPIO_DeInit+0x1e4>)
 8005038:	4013      	ands	r3, r2
 800503a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800503c:	4b49      	ldr	r3, [pc, #292]	@ (8005164 <HAL_GPIO_DeInit+0x1e4>)
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	43db      	mvns	r3, r3
 8005044:	4947      	ldr	r1, [pc, #284]	@ (8005164 <HAL_GPIO_DeInit+0x1e4>)
 8005046:	4013      	ands	r3, r2
 8005048:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800504a:	4b46      	ldr	r3, [pc, #280]	@ (8005164 <HAL_GPIO_DeInit+0x1e4>)
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	43db      	mvns	r3, r3
 8005052:	4944      	ldr	r1, [pc, #272]	@ (8005164 <HAL_GPIO_DeInit+0x1e4>)
 8005054:	4013      	ands	r3, r2
 8005056:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005058:	4b42      	ldr	r3, [pc, #264]	@ (8005164 <HAL_GPIO_DeInit+0x1e4>)
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	43db      	mvns	r3, r3
 8005060:	4940      	ldr	r1, [pc, #256]	@ (8005164 <HAL_GPIO_DeInit+0x1e4>)
 8005062:	4013      	ands	r3, r2
 8005064:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	220f      	movs	r2, #15
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005076:	4a34      	ldr	r2, [pc, #208]	@ (8005148 <HAL_GPIO_DeInit+0x1c8>)
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	089b      	lsrs	r3, r3, #2
 800507c:	3302      	adds	r3, #2
 800507e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	43da      	mvns	r2, r3
 8005086:	4830      	ldr	r0, [pc, #192]	@ (8005148 <HAL_GPIO_DeInit+0x1c8>)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	089b      	lsrs	r3, r3, #2
 800508c:	400a      	ands	r2, r1
 800508e:	3302      	adds	r3, #2
 8005090:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	2103      	movs	r1, #3
 800509e:	fa01 f303 	lsl.w	r3, r1, r3
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	08da      	lsrs	r2, r3, #3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3208      	adds	r2, #8
 80050b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	220f      	movs	r2, #15
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	43db      	mvns	r3, r3
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	08d2      	lsrs	r2, r2, #3
 80050c8:	4019      	ands	r1, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3208      	adds	r2, #8
 80050ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	2103      	movs	r1, #3
 80050dc:	fa01 f303 	lsl.w	r3, r1, r3
 80050e0:	43db      	mvns	r3, r3
 80050e2:	401a      	ands	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	2101      	movs	r1, #1
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	fa01 f303 	lsl.w	r3, r1, r3
 80050f4:	43db      	mvns	r3, r3
 80050f6:	401a      	ands	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	2103      	movs	r1, #3
 8005106:	fa01 f303 	lsl.w	r3, r1, r3
 800510a:	43db      	mvns	r3, r3
 800510c:	401a      	ands	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005116:	2101      	movs	r1, #1
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	fa01 f303 	lsl.w	r3, r1, r3
 800511e:	43db      	mvns	r3, r3
 8005120:	401a      	ands	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	3301      	adds	r3, #1
 800512a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	fa22 f303 	lsr.w	r3, r2, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	f47f af2b 	bne.w	8004f90 <HAL_GPIO_DeInit+0x10>
  }
}
 800513a:	bf00      	nop
 800513c:	bf00      	nop
 800513e:	371c      	adds	r7, #28
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	40010000 	.word	0x40010000
 800514c:	48000400 	.word	0x48000400
 8005150:	48000800 	.word	0x48000800
 8005154:	48000c00 	.word	0x48000c00
 8005158:	48001000 	.word	0x48001000
 800515c:	48001400 	.word	0x48001400
 8005160:	48001800 	.word	0x48001800
 8005164:	40010400 	.word	0x40010400

08005168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	460b      	mov	r3, r1
 8005172:	807b      	strh	r3, [r7, #2]
 8005174:	4613      	mov	r3, r2
 8005176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005178:	787b      	ldrb	r3, [r7, #1]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800517e:	887a      	ldrh	r2, [r7, #2]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005184:	e002      	b.n	800518c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005186:	887a      	ldrh	r2, [r7, #2]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051aa:	887a      	ldrh	r2, [r7, #2]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4013      	ands	r3, r2
 80051b0:	041a      	lsls	r2, r3, #16
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	43d9      	mvns	r1, r3
 80051b6:	887b      	ldrh	r3, [r7, #2]
 80051b8:	400b      	ands	r3, r1
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	619a      	str	r2, [r3, #24]
}
 80051c0:	bf00      	nop
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80051d6:	4b08      	ldr	r3, [pc, #32]	@ (80051f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051d8:	695a      	ldr	r2, [r3, #20]
 80051da:	88fb      	ldrh	r3, [r7, #6]
 80051dc:	4013      	ands	r3, r2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d006      	beq.n	80051f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051e2:	4a05      	ldr	r2, [pc, #20]	@ (80051f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051e4:	88fb      	ldrh	r3, [r7, #6]
 80051e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fc fd26 	bl	8001c3c <HAL_GPIO_EXTI_Callback>
  }
}
 80051f0:	bf00      	nop
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40010400 	.word	0x40010400

080051fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e08d      	b.n	800532a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fc fe72 	bl	8001f0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2224      	movs	r2, #36	@ 0x24
 800522c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0201 	bic.w	r2, r2, #1
 800523e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800524c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800525c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d107      	bne.n	8005276 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005272:	609a      	str	r2, [r3, #8]
 8005274:	e006      	b.n	8005284 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005282:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	2b02      	cmp	r3, #2
 800528a:	d108      	bne.n	800529e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800529a:	605a      	str	r2, [r3, #4]
 800529c:	e007      	b.n	80052ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6812      	ldr	r2, [r2, #0]
 80052b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80052bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69d9      	ldr	r1, [r3, #28]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a1a      	ldr	r2, [r3, #32]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b082      	sub	sp, #8
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e021      	b.n	8005388 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2224      	movs	r2, #36	@ 0x24
 8005348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0201 	bic.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7fc fe33 	bl	8001fc8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	4608      	mov	r0, r1
 800539a:	4611      	mov	r1, r2
 800539c:	461a      	mov	r2, r3
 800539e:	4603      	mov	r3, r0
 80053a0:	817b      	strh	r3, [r7, #10]
 80053a2:	460b      	mov	r3, r1
 80053a4:	813b      	strh	r3, [r7, #8]
 80053a6:	4613      	mov	r3, r2
 80053a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	f040 80f9 	bne.w	80055aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <HAL_I2C_Mem_Write+0x34>
 80053be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d105      	bne.n	80053d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053ca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e0ed      	b.n	80055ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <HAL_I2C_Mem_Write+0x4e>
 80053da:	2302      	movs	r3, #2
 80053dc:	e0e6      	b.n	80055ac <HAL_I2C_Mem_Write+0x21c>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80053e6:	f7fd fda3 	bl	8002f30 <HAL_GetTick>
 80053ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	2319      	movs	r3, #25
 80053f2:	2201      	movs	r2, #1
 80053f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 fac3 	bl	8005984 <I2C_WaitOnFlagUntilTimeout>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e0d1      	b.n	80055ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2221      	movs	r2, #33	@ 0x21
 800540c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2240      	movs	r2, #64	@ 0x40
 8005414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a3a      	ldr	r2, [r7, #32]
 8005422:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005428:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005430:	88f8      	ldrh	r0, [r7, #6]
 8005432:	893a      	ldrh	r2, [r7, #8]
 8005434:	8979      	ldrh	r1, [r7, #10]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	9301      	str	r3, [sp, #4]
 800543a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	4603      	mov	r3, r0
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 f9d3 	bl	80057ec <I2C_RequestMemoryWrite>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e0a9      	b.n	80055ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800545c:	b29b      	uxth	r3, r3
 800545e:	2bff      	cmp	r3, #255	@ 0xff
 8005460:	d90e      	bls.n	8005480 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	22ff      	movs	r2, #255	@ 0xff
 8005466:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800546c:	b2da      	uxtb	r2, r3
 800546e:	8979      	ldrh	r1, [r7, #10]
 8005470:	2300      	movs	r3, #0
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 fc47 	bl	8005d0c <I2C_TransferConfig>
 800547e:	e00f      	b.n	80054a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800548e:	b2da      	uxtb	r2, r3
 8005490:	8979      	ldrh	r1, [r7, #10]
 8005492:	2300      	movs	r3, #0
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 fc36 	bl	8005d0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 fac6 	bl	8005a36 <I2C_WaitOnTXISFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e07b      	b.n	80055ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b8:	781a      	ldrb	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d034      	beq.n	8005558 <HAL_I2C_Mem_Write+0x1c8>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d130      	bne.n	8005558 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fc:	2200      	movs	r2, #0
 80054fe:	2180      	movs	r1, #128	@ 0x80
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 fa3f 	bl	8005984 <I2C_WaitOnFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e04d      	b.n	80055ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005514:	b29b      	uxth	r3, r3
 8005516:	2bff      	cmp	r3, #255	@ 0xff
 8005518:	d90e      	bls.n	8005538 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	22ff      	movs	r2, #255	@ 0xff
 800551e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005524:	b2da      	uxtb	r2, r3
 8005526:	8979      	ldrh	r1, [r7, #10]
 8005528:	2300      	movs	r3, #0
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 fbeb 	bl	8005d0c <I2C_TransferConfig>
 8005536:	e00f      	b.n	8005558 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005546:	b2da      	uxtb	r2, r3
 8005548:	8979      	ldrh	r1, [r7, #10]
 800554a:	2300      	movs	r3, #0
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fbda 	bl	8005d0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d19e      	bne.n	80054a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 faac 	bl	8005ac4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e01a      	b.n	80055ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2220      	movs	r2, #32
 800557c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6859      	ldr	r1, [r3, #4]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	4b0a      	ldr	r3, [pc, #40]	@ (80055b4 <HAL_I2C_Mem_Write+0x224>)
 800558a:	400b      	ands	r3, r1
 800558c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	e000      	b.n	80055ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80055aa:	2302      	movs	r3, #2
  }
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	fe00e800 	.word	0xfe00e800

080055b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af02      	add	r7, sp, #8
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	4608      	mov	r0, r1
 80055c2:	4611      	mov	r1, r2
 80055c4:	461a      	mov	r2, r3
 80055c6:	4603      	mov	r3, r0
 80055c8:	817b      	strh	r3, [r7, #10]
 80055ca:	460b      	mov	r3, r1
 80055cc:	813b      	strh	r3, [r7, #8]
 80055ce:	4613      	mov	r3, r2
 80055d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b20      	cmp	r3, #32
 80055dc:	f040 80fd 	bne.w	80057da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <HAL_I2C_Mem_Read+0x34>
 80055e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d105      	bne.n	80055f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055f2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e0f1      	b.n	80057dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_I2C_Mem_Read+0x4e>
 8005602:	2302      	movs	r3, #2
 8005604:	e0ea      	b.n	80057dc <HAL_I2C_Mem_Read+0x224>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800560e:	f7fd fc8f 	bl	8002f30 <HAL_GetTick>
 8005612:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	2319      	movs	r3, #25
 800561a:	2201      	movs	r2, #1
 800561c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 f9af 	bl	8005984 <I2C_WaitOnFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e0d5      	b.n	80057dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2222      	movs	r2, #34	@ 0x22
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2240      	movs	r2, #64	@ 0x40
 800563c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6a3a      	ldr	r2, [r7, #32]
 800564a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005650:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005658:	88f8      	ldrh	r0, [r7, #6]
 800565a:	893a      	ldrh	r2, [r7, #8]
 800565c:	8979      	ldrh	r1, [r7, #10]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	9301      	str	r3, [sp, #4]
 8005662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	4603      	mov	r3, r0
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 f913 	bl	8005894 <I2C_RequestMemoryRead>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e0ad      	b.n	80057dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005684:	b29b      	uxth	r3, r3
 8005686:	2bff      	cmp	r3, #255	@ 0xff
 8005688:	d90e      	bls.n	80056a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005694:	b2da      	uxtb	r2, r3
 8005696:	8979      	ldrh	r1, [r7, #10]
 8005698:	4b52      	ldr	r3, [pc, #328]	@ (80057e4 <HAL_I2C_Mem_Read+0x22c>)
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fb33 	bl	8005d0c <I2C_TransferConfig>
 80056a6:	e00f      	b.n	80056c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	8979      	ldrh	r1, [r7, #10]
 80056ba:	4b4a      	ldr	r3, [pc, #296]	@ (80057e4 <HAL_I2C_Mem_Read+0x22c>)
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 fb22 	bl	8005d0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ce:	2200      	movs	r2, #0
 80056d0:	2104      	movs	r1, #4
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 f956 	bl	8005984 <I2C_WaitOnFlagUntilTimeout>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e07c      	b.n	80057dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ec:	b2d2      	uxtb	r2, r2
 80056ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056fe:	3b01      	subs	r3, #1
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800570a:	b29b      	uxth	r3, r3
 800570c:	3b01      	subs	r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d034      	beq.n	8005788 <HAL_I2C_Mem_Read+0x1d0>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005722:	2b00      	cmp	r3, #0
 8005724:	d130      	bne.n	8005788 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572c:	2200      	movs	r2, #0
 800572e:	2180      	movs	r1, #128	@ 0x80
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 f927 	bl	8005984 <I2C_WaitOnFlagUntilTimeout>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e04d      	b.n	80057dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	2bff      	cmp	r3, #255	@ 0xff
 8005748:	d90e      	bls.n	8005768 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005754:	b2da      	uxtb	r2, r3
 8005756:	8979      	ldrh	r1, [r7, #10]
 8005758:	2300      	movs	r3, #0
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 fad3 	bl	8005d0c <I2C_TransferConfig>
 8005766:	e00f      	b.n	8005788 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005776:	b2da      	uxtb	r2, r3
 8005778:	8979      	ldrh	r1, [r7, #10]
 800577a:	2300      	movs	r3, #0
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 fac2 	bl	8005d0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d19a      	bne.n	80056c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 f994 	bl	8005ac4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e01a      	b.n	80057dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2220      	movs	r2, #32
 80057ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6859      	ldr	r1, [r3, #4]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	4b0b      	ldr	r3, [pc, #44]	@ (80057e8 <HAL_I2C_Mem_Read+0x230>)
 80057ba:	400b      	ands	r3, r1
 80057bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	e000      	b.n	80057dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80057da:	2302      	movs	r3, #2
  }
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	80002400 	.word	0x80002400
 80057e8:	fe00e800 	.word	0xfe00e800

080057ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	4608      	mov	r0, r1
 80057f6:	4611      	mov	r1, r2
 80057f8:	461a      	mov	r2, r3
 80057fa:	4603      	mov	r3, r0
 80057fc:	817b      	strh	r3, [r7, #10]
 80057fe:	460b      	mov	r3, r1
 8005800:	813b      	strh	r3, [r7, #8]
 8005802:	4613      	mov	r3, r2
 8005804:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005806:	88fb      	ldrh	r3, [r7, #6]
 8005808:	b2da      	uxtb	r2, r3
 800580a:	8979      	ldrh	r1, [r7, #10]
 800580c:	4b20      	ldr	r3, [pc, #128]	@ (8005890 <I2C_RequestMemoryWrite+0xa4>)
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 fa79 	bl	8005d0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	69b9      	ldr	r1, [r7, #24]
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 f909 	bl	8005a36 <I2C_WaitOnTXISFlagUntilTimeout>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e02c      	b.n	8005888 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800582e:	88fb      	ldrh	r3, [r7, #6]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d105      	bne.n	8005840 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005834:	893b      	ldrh	r3, [r7, #8]
 8005836:	b2da      	uxtb	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	629a      	str	r2, [r3, #40]	@ 0x28
 800583e:	e015      	b.n	800586c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005840:	893b      	ldrh	r3, [r7, #8]
 8005842:	0a1b      	lsrs	r3, r3, #8
 8005844:	b29b      	uxth	r3, r3
 8005846:	b2da      	uxtb	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800584e:	69fa      	ldr	r2, [r7, #28]
 8005850:	69b9      	ldr	r1, [r7, #24]
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 f8ef 	bl	8005a36 <I2C_WaitOnTXISFlagUntilTimeout>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e012      	b.n	8005888 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005862:	893b      	ldrh	r3, [r7, #8]
 8005864:	b2da      	uxtb	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	2200      	movs	r2, #0
 8005874:	2180      	movs	r1, #128	@ 0x80
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 f884 	bl	8005984 <I2C_WaitOnFlagUntilTimeout>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e000      	b.n	8005888 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	80002000 	.word	0x80002000

08005894 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af02      	add	r7, sp, #8
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	4608      	mov	r0, r1
 800589e:	4611      	mov	r1, r2
 80058a0:	461a      	mov	r2, r3
 80058a2:	4603      	mov	r3, r0
 80058a4:	817b      	strh	r3, [r7, #10]
 80058a6:	460b      	mov	r3, r1
 80058a8:	813b      	strh	r3, [r7, #8]
 80058aa:	4613      	mov	r3, r2
 80058ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80058ae:	88fb      	ldrh	r3, [r7, #6]
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	8979      	ldrh	r1, [r7, #10]
 80058b4:	4b20      	ldr	r3, [pc, #128]	@ (8005938 <I2C_RequestMemoryRead+0xa4>)
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	2300      	movs	r3, #0
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 fa26 	bl	8005d0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	69b9      	ldr	r1, [r7, #24]
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 f8b6 	bl	8005a36 <I2C_WaitOnTXISFlagUntilTimeout>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e02c      	b.n	800592e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058d4:	88fb      	ldrh	r3, [r7, #6]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d105      	bne.n	80058e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058da:	893b      	ldrh	r3, [r7, #8]
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80058e4:	e015      	b.n	8005912 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058e6:	893b      	ldrh	r3, [r7, #8]
 80058e8:	0a1b      	lsrs	r3, r3, #8
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	69b9      	ldr	r1, [r7, #24]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f89c 	bl	8005a36 <I2C_WaitOnTXISFlagUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e012      	b.n	800592e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005908:	893b      	ldrh	r3, [r7, #8]
 800590a:	b2da      	uxtb	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	2200      	movs	r2, #0
 800591a:	2140      	movs	r1, #64	@ 0x40
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f831 	bl	8005984 <I2C_WaitOnFlagUntilTimeout>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	80002000 	.word	0x80002000

0800593c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b02      	cmp	r3, #2
 8005950:	d103      	bne.n	800595a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2200      	movs	r2, #0
 8005958:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b01      	cmp	r3, #1
 8005966:	d007      	beq.n	8005978 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699a      	ldr	r2, [r3, #24]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0201 	orr.w	r2, r2, #1
 8005976:	619a      	str	r2, [r3, #24]
  }
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	4613      	mov	r3, r2
 8005992:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005994:	e03b      	b.n	8005a0e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	6839      	ldr	r1, [r7, #0]
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 f8d6 	bl	8005b4c <I2C_IsErrorOccurred>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e041      	b.n	8005a2e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d02d      	beq.n	8005a0e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b2:	f7fd fabd 	bl	8002f30 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d302      	bcc.n	80059c8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d122      	bne.n	8005a0e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	4013      	ands	r3, r2
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	bf0c      	ite	eq
 80059d8:	2301      	moveq	r3, #1
 80059da:	2300      	movne	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d113      	bne.n	8005a0e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ea:	f043 0220 	orr.w	r2, r3, #32
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e00f      	b.n	8005a2e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	699a      	ldr	r2, [r3, #24]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4013      	ands	r3, r2
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	bf0c      	ite	eq
 8005a1e:	2301      	moveq	r3, #1
 8005a20:	2300      	movne	r3, #0
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	461a      	mov	r2, r3
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d0b4      	beq.n	8005996 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b084      	sub	sp, #16
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a42:	e033      	b.n	8005aac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 f87f 	bl	8005b4c <I2C_IsErrorOccurred>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e031      	b.n	8005abc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5e:	d025      	beq.n	8005aac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a60:	f7fd fa66 	bl	8002f30 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d302      	bcc.n	8005a76 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d11a      	bne.n	8005aac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d013      	beq.n	8005aac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a88:	f043 0220 	orr.w	r2, r3, #32
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e007      	b.n	8005abc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d1c4      	bne.n	8005a44 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ad0:	e02f      	b.n	8005b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 f838 	bl	8005b4c <I2C_IsErrorOccurred>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e02d      	b.n	8005b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae6:	f7fd fa23 	bl	8002f30 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d302      	bcc.n	8005afc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d11a      	bne.n	8005b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	d013      	beq.n	8005b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b0e:	f043 0220 	orr.w	r2, r3, #32
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e007      	b.n	8005b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	f003 0320 	and.w	r3, r3, #32
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	d1c8      	bne.n	8005ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08a      	sub	sp, #40	@ 0x28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005b66:	2300      	movs	r3, #0
 8005b68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d068      	beq.n	8005c4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2210      	movs	r2, #16
 8005b7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b80:	e049      	b.n	8005c16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d045      	beq.n	8005c16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b8a:	f7fd f9d1 	bl	8002f30 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d302      	bcc.n	8005ba0 <I2C_IsErrorOccurred+0x54>
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d13a      	bne.n	8005c16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005baa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bc2:	d121      	bne.n	8005c08 <I2C_IsErrorOccurred+0xbc>
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bca:	d01d      	beq.n	8005c08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005bcc:	7cfb      	ldrb	r3, [r7, #19]
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	d01a      	beq.n	8005c08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005be0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005be2:	f7fd f9a5 	bl	8002f30 <HAL_GetTick>
 8005be6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005be8:	e00e      	b.n	8005c08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005bea:	f7fd f9a1 	bl	8002f30 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b19      	cmp	r3, #25
 8005bf6:	d907      	bls.n	8005c08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	f043 0320 	orr.w	r3, r3, #32
 8005bfe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005c06:	e006      	b.n	8005c16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d1e9      	bne.n	8005bea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f003 0320 	and.w	r3, r3, #32
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d003      	beq.n	8005c2c <I2C_IsErrorOccurred+0xe0>
 8005c24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0aa      	beq.n	8005b82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d103      	bne.n	8005c3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	f043 0304 	orr.w	r3, r3, #4
 8005c42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00b      	beq.n	8005c74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	f043 0301 	orr.w	r3, r3, #1
 8005c62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00b      	beq.n	8005c96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	f043 0308 	orr.w	r3, r3, #8
 8005c84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00b      	beq.n	8005cb8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	f043 0302 	orr.w	r3, r3, #2
 8005ca6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01c      	beq.n	8005cfa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f7ff fe3b 	bl	800593c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6859      	ldr	r1, [r3, #4]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8005d08 <I2C_IsErrorOccurred+0x1bc>)
 8005cd2:	400b      	ands	r3, r1
 8005cd4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3728      	adds	r7, #40	@ 0x28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	fe00e800 	.word	0xfe00e800

08005d0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	607b      	str	r3, [r7, #4]
 8005d16:	460b      	mov	r3, r1
 8005d18:	817b      	strh	r3, [r7, #10]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d1e:	897b      	ldrh	r3, [r7, #10]
 8005d20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d24:	7a7b      	ldrb	r3, [r7, #9]
 8005d26:	041b      	lsls	r3, r3, #16
 8005d28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	0d5b      	lsrs	r3, r3, #21
 8005d46:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005d4a:	4b08      	ldr	r3, [pc, #32]	@ (8005d6c <I2C_TransferConfig+0x60>)
 8005d4c:	430b      	orrs	r3, r1
 8005d4e:	43db      	mvns	r3, r3
 8005d50:	ea02 0103 	and.w	r1, r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005d5e:	bf00      	nop
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	03ff63ff 	.word	0x03ff63ff

08005d70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b20      	cmp	r3, #32
 8005d84:	d138      	bne.n	8005df8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e032      	b.n	8005dfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2224      	movs	r2, #36	@ 0x24
 8005da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0201 	bic.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005dc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6819      	ldr	r1, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0201 	orr.w	r2, r2, #1
 8005de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	e000      	b.n	8005dfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005df8:	2302      	movs	r3, #2
  }
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b085      	sub	sp, #20
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d139      	bne.n	8005e90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d101      	bne.n	8005e2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e26:	2302      	movs	r3, #2
 8005e28:	e033      	b.n	8005e92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2224      	movs	r2, #36	@ 0x24
 8005e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0201 	bic.w	r2, r2, #1
 8005e48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005e58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	021b      	lsls	r3, r3, #8
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0201 	orr.w	r2, r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e000      	b.n	8005e92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005e90:	2302      	movs	r3, #2
  }
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b086      	sub	sp, #24
 8005ea2:	af02      	add	r7, sp, #8
 8005ea4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e101      	b.n	80060b4 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d106      	bne.n	8005eca <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7fc fa6b 	bl	80023a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2203      	movs	r2, #3
 8005ece:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f003 ff17 	bl	8009d10 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	7c1a      	ldrb	r2, [r3, #16]
 8005eea:	f88d 2000 	strb.w	r2, [sp]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ef2:	f003 fee0 	bl	8009cb6 <USB_CoreInit>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d005      	beq.n	8005f08 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e0d5      	b.n	80060b4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f003 ff0f 	bl	8009d32 <USB_SetCurrentMode>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d005      	beq.n	8005f26 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e0c6      	b.n	80060b4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f26:	2300      	movs	r3, #0
 8005f28:	73fb      	strb	r3, [r7, #15]
 8005f2a:	e04a      	b.n	8005fc2 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005f2c:	7bfa      	ldrb	r2, [r7, #15]
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	4613      	mov	r3, r2
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	4413      	add	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	440b      	add	r3, r1
 8005f3a:	3315      	adds	r3, #21
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005f40:	7bfa      	ldrb	r2, [r7, #15]
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	4613      	mov	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	440b      	add	r3, r1
 8005f4e:	3314      	adds	r3, #20
 8005f50:	7bfa      	ldrb	r2, [r7, #15]
 8005f52:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005f54:	7bfa      	ldrb	r2, [r7, #15]
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	b298      	uxth	r0, r3
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	4413      	add	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	440b      	add	r3, r1
 8005f66:	332e      	adds	r3, #46	@ 0x2e
 8005f68:	4602      	mov	r2, r0
 8005f6a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005f6c:	7bfa      	ldrb	r2, [r7, #15]
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	4613      	mov	r3, r2
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	3318      	adds	r3, #24
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005f80:	7bfa      	ldrb	r2, [r7, #15]
 8005f82:	6879      	ldr	r1, [r7, #4]
 8005f84:	4613      	mov	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	331c      	adds	r3, #28
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005f94:	7bfa      	ldrb	r2, [r7, #15]
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	3320      	adds	r3, #32
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005fa8:	7bfa      	ldrb	r2, [r7, #15]
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	4613      	mov	r3, r2
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	440b      	add	r3, r1
 8005fb6:	3324      	adds	r3, #36	@ 0x24
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	73fb      	strb	r3, [r7, #15]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	791b      	ldrb	r3, [r3, #4]
 8005fc6:	7bfa      	ldrb	r2, [r7, #15]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d3af      	bcc.n	8005f2c <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fcc:	2300      	movs	r3, #0
 8005fce:	73fb      	strb	r3, [r7, #15]
 8005fd0:	e044      	b.n	800605c <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005fd2:	7bfa      	ldrb	r2, [r7, #15]
 8005fd4:	6879      	ldr	r1, [r7, #4]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	4413      	add	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	440b      	add	r3, r1
 8005fe0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005fe8:	7bfa      	ldrb	r2, [r7, #15]
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	4613      	mov	r3, r2
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005ffa:	7bfa      	ldrb	r2, [r7, #15]
 8005ffc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ffe:	7bfa      	ldrb	r2, [r7, #15]
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	440b      	add	r3, r1
 800600c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006010:	2200      	movs	r2, #0
 8006012:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006014:	7bfa      	ldrb	r2, [r7, #15]
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	4613      	mov	r3, r2
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	4413      	add	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	440b      	add	r3, r1
 8006022:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006026:	2200      	movs	r2, #0
 8006028:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800602a:	7bfa      	ldrb	r2, [r7, #15]
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	4613      	mov	r3, r2
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	4413      	add	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	440b      	add	r3, r1
 8006038:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006040:	7bfa      	ldrb	r2, [r7, #15]
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	4613      	mov	r3, r2
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	4413      	add	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	440b      	add	r3, r1
 800604e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006056:	7bfb      	ldrb	r3, [r7, #15]
 8006058:	3301      	adds	r3, #1
 800605a:	73fb      	strb	r3, [r7, #15]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	791b      	ldrb	r3, [r3, #4]
 8006060:	7bfa      	ldrb	r2, [r7, #15]
 8006062:	429a      	cmp	r2, r3
 8006064:	d3b5      	bcc.n	8005fd2 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	7c1a      	ldrb	r2, [r3, #16]
 800606e:	f88d 2000 	strb.w	r2, [sp]
 8006072:	3304      	adds	r3, #4
 8006074:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006076:	f003 fea9 	bl	8009dcc <USB_DevInit>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d005      	beq.n	800608c <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e013      	b.n	80060b4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	7b1b      	ldrb	r3, [r3, #12]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d102      	bne.n	80060a8 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f80a 	bl	80060bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f004 f84e 	bl	800a14e <USB_DevDisconnect>

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060ee:	f043 0303 	orr.w	r3, r3, #3
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006104:	b480      	push	{r7}
 8006106:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006108:	4b05      	ldr	r3, [pc, #20]	@ (8006120 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a04      	ldr	r2, [pc, #16]	@ (8006120 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800610e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006112:	6013      	str	r3, [r2, #0]
}
 8006114:	bf00      	nop
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	40007000 	.word	0x40007000

08006124 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006124:	b480      	push	{r7}
 8006126:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006128:	4b04      	ldr	r3, [pc, #16]	@ (800613c <HAL_PWREx_GetVoltageRange+0x18>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006130:	4618      	mov	r0, r3
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	40007000 	.word	0x40007000

08006140 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800614e:	d130      	bne.n	80061b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006150:	4b23      	ldr	r3, [pc, #140]	@ (80061e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800615c:	d038      	beq.n	80061d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800615e:	4b20      	ldr	r3, [pc, #128]	@ (80061e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006166:	4a1e      	ldr	r2, [pc, #120]	@ (80061e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006168:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800616c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800616e:	4b1d      	ldr	r3, [pc, #116]	@ (80061e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2232      	movs	r2, #50	@ 0x32
 8006174:	fb02 f303 	mul.w	r3, r2, r3
 8006178:	4a1b      	ldr	r2, [pc, #108]	@ (80061e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800617a:	fba2 2303 	umull	r2, r3, r2, r3
 800617e:	0c9b      	lsrs	r3, r3, #18
 8006180:	3301      	adds	r3, #1
 8006182:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006184:	e002      	b.n	800618c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3b01      	subs	r3, #1
 800618a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800618c:	4b14      	ldr	r3, [pc, #80]	@ (80061e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006198:	d102      	bne.n	80061a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1f2      	bne.n	8006186 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061a0:	4b0f      	ldr	r3, [pc, #60]	@ (80061e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ac:	d110      	bne.n	80061d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e00f      	b.n	80061d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80061b2:	4b0b      	ldr	r3, [pc, #44]	@ (80061e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80061ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061be:	d007      	beq.n	80061d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80061c0:	4b07      	ldr	r3, [pc, #28]	@ (80061e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80061c8:	4a05      	ldr	r2, [pc, #20]	@ (80061e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80061ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40007000 	.word	0x40007000
 80061e4:	20000004 	.word	0x20000004
 80061e8:	431bde83 	.word	0x431bde83

080061ec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80061f0:	4b05      	ldr	r3, [pc, #20]	@ (8006208 <HAL_PWREx_EnableVddUSB+0x1c>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	4a04      	ldr	r2, [pc, #16]	@ (8006208 <HAL_PWREx_EnableVddUSB+0x1c>)
 80061f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80061fa:	6053      	str	r3, [r2, #4]
}
 80061fc:	bf00      	nop
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	40007000 	.word	0x40007000

0800620c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af02      	add	r7, sp, #8
 8006212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006214:	f7fc fe8c 	bl	8002f30 <HAL_GetTick>
 8006218:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e063      	b.n	80062ec <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10b      	bne.n	8006248 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7fb fee9 	bl	8002010 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800623e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f858 	bl	80062f8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	3b01      	subs	r3, #1
 8006258:	021a      	lsls	r2, r3, #8
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	2120      	movs	r1, #32
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f850 	bl	8006314 <QSPI_WaitFlagStateUntilTimeout>
 8006274:	4603      	mov	r3, r0
 8006276:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006278:	7afb      	ldrb	r3, [r7, #11]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d131      	bne.n	80062e2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006288:	f023 0310 	bic.w	r3, r3, #16
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6852      	ldr	r2, [r2, #4]
 8006290:	0611      	lsls	r1, r2, #24
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	68d2      	ldr	r2, [r2, #12]
 8006296:	4311      	orrs	r1, r2
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6812      	ldr	r2, [r2, #0]
 800629c:	430b      	orrs	r3, r1
 800629e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	4b13      	ldr	r3, [pc, #76]	@ (80062f4 <HAL_QSPI_Init+0xe8>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	6912      	ldr	r2, [r2, #16]
 80062ae:	0411      	lsls	r1, r2, #16
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6952      	ldr	r2, [r2, #20]
 80062b4:	4311      	orrs	r1, r2
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6992      	ldr	r2, [r2, #24]
 80062ba:	4311      	orrs	r1, r2
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	6812      	ldr	r2, [r2, #0]
 80062c0:	430b      	orrs	r3, r1
 80062c2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0201 	orr.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80062ea:	7afb      	ldrb	r3, [r7, #11]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	ffe0f8fe 	.word	0xffe0f8fe

080062f8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	4613      	mov	r3, r2
 8006322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006324:	e01a      	b.n	800635c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632c:	d016      	beq.n	800635c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800632e:	f7fc fdff 	bl	8002f30 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	429a      	cmp	r2, r3
 800633c:	d302      	bcc.n	8006344 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10b      	bne.n	800635c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2204      	movs	r2, #4
 8006348:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006350:	f043 0201 	orr.w	r2, r3, #1
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e00e      	b.n	800637a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	4013      	ands	r3, r2
 8006366:	2b00      	cmp	r3, #0
 8006368:	bf14      	ite	ne
 800636a:	2301      	movne	r3, #1
 800636c:	2300      	moveq	r3, #0
 800636e:	b2db      	uxtb	r3, r3
 8006370:	461a      	mov	r2, r3
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	429a      	cmp	r2, r3
 8006376:	d1d6      	bne.n	8006326 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e3ca      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006396:	4b97      	ldr	r3, [pc, #604]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f003 030c 	and.w	r3, r3, #12
 800639e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063a0:	4b94      	ldr	r3, [pc, #592]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f003 0303 	and.w	r3, r3, #3
 80063a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0310 	and.w	r3, r3, #16
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 80e4 	beq.w	8006580 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d007      	beq.n	80063ce <HAL_RCC_OscConfig+0x4a>
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	2b0c      	cmp	r3, #12
 80063c2:	f040 808b 	bne.w	80064dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	f040 8087 	bne.w	80064dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80063ce:	4b89      	ldr	r3, [pc, #548]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <HAL_RCC_OscConfig+0x62>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e3a2      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1a      	ldr	r2, [r3, #32]
 80063ea:	4b82      	ldr	r3, [pc, #520]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0308 	and.w	r3, r3, #8
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d004      	beq.n	8006400 <HAL_RCC_OscConfig+0x7c>
 80063f6:	4b7f      	ldr	r3, [pc, #508]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063fe:	e005      	b.n	800640c <HAL_RCC_OscConfig+0x88>
 8006400:	4b7c      	ldr	r3, [pc, #496]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 8006402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006406:	091b      	lsrs	r3, r3, #4
 8006408:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800640c:	4293      	cmp	r3, r2
 800640e:	d223      	bcs.n	8006458 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fd55 	bl	8006ec4 <RCC_SetFlashLatencyFromMSIRange>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e383      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006424:	4b73      	ldr	r3, [pc, #460]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a72      	ldr	r2, [pc, #456]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 800642a:	f043 0308 	orr.w	r3, r3, #8
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	4b70      	ldr	r3, [pc, #448]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	496d      	ldr	r1, [pc, #436]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 800643e:	4313      	orrs	r3, r2
 8006440:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006442:	4b6c      	ldr	r3, [pc, #432]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	021b      	lsls	r3, r3, #8
 8006450:	4968      	ldr	r1, [pc, #416]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 8006452:	4313      	orrs	r3, r2
 8006454:	604b      	str	r3, [r1, #4]
 8006456:	e025      	b.n	80064a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006458:	4b66      	ldr	r3, [pc, #408]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a65      	ldr	r2, [pc, #404]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 800645e:	f043 0308 	orr.w	r3, r3, #8
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	4b63      	ldr	r3, [pc, #396]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	4960      	ldr	r1, [pc, #384]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 8006472:	4313      	orrs	r3, r2
 8006474:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006476:	4b5f      	ldr	r3, [pc, #380]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	021b      	lsls	r3, r3, #8
 8006484:	495b      	ldr	r1, [pc, #364]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 8006486:	4313      	orrs	r3, r2
 8006488:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d109      	bne.n	80064a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a1b      	ldr	r3, [r3, #32]
 8006494:	4618      	mov	r0, r3
 8006496:	f000 fd15 	bl	8006ec4 <RCC_SetFlashLatencyFromMSIRange>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e343      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064a4:	f000 fc4a 	bl	8006d3c <HAL_RCC_GetSysClockFreq>
 80064a8:	4602      	mov	r2, r0
 80064aa:	4b52      	ldr	r3, [pc, #328]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	091b      	lsrs	r3, r3, #4
 80064b0:	f003 030f 	and.w	r3, r3, #15
 80064b4:	4950      	ldr	r1, [pc, #320]	@ (80065f8 <HAL_RCC_OscConfig+0x274>)
 80064b6:	5ccb      	ldrb	r3, [r1, r3]
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	fa22 f303 	lsr.w	r3, r2, r3
 80064c0:	4a4e      	ldr	r2, [pc, #312]	@ (80065fc <HAL_RCC_OscConfig+0x278>)
 80064c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80064c4:	4b4e      	ldr	r3, [pc, #312]	@ (8006600 <HAL_RCC_OscConfig+0x27c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fc fce1 	bl	8002e90 <HAL_InitTick>
 80064ce:	4603      	mov	r3, r0
 80064d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d052      	beq.n	800657e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
 80064da:	e327      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d032      	beq.n	800654a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80064e4:	4b43      	ldr	r3, [pc, #268]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a42      	ldr	r2, [pc, #264]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 80064ea:	f043 0301 	orr.w	r3, r3, #1
 80064ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80064f0:	f7fc fd1e 	bl	8002f30 <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064f6:	e008      	b.n	800650a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80064f8:	f7fc fd1a 	bl	8002f30 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e310      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800650a:	4b3a      	ldr	r3, [pc, #232]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0f0      	beq.n	80064f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006516:	4b37      	ldr	r3, [pc, #220]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a36      	ldr	r2, [pc, #216]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 800651c:	f043 0308 	orr.w	r3, r3, #8
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	4b34      	ldr	r3, [pc, #208]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	4931      	ldr	r1, [pc, #196]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 8006530:	4313      	orrs	r3, r2
 8006532:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006534:	4b2f      	ldr	r3, [pc, #188]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	021b      	lsls	r3, r3, #8
 8006542:	492c      	ldr	r1, [pc, #176]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 8006544:	4313      	orrs	r3, r2
 8006546:	604b      	str	r3, [r1, #4]
 8006548:	e01a      	b.n	8006580 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800654a:	4b2a      	ldr	r3, [pc, #168]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a29      	ldr	r2, [pc, #164]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 8006550:	f023 0301 	bic.w	r3, r3, #1
 8006554:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006556:	f7fc fceb 	bl	8002f30 <HAL_GetTick>
 800655a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800655c:	e008      	b.n	8006570 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800655e:	f7fc fce7 	bl	8002f30 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e2dd      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006570:	4b20      	ldr	r3, [pc, #128]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1f0      	bne.n	800655e <HAL_RCC_OscConfig+0x1da>
 800657c:	e000      	b.n	8006580 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800657e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b00      	cmp	r3, #0
 800658a:	d074      	beq.n	8006676 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	2b08      	cmp	r3, #8
 8006590:	d005      	beq.n	800659e <HAL_RCC_OscConfig+0x21a>
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	2b0c      	cmp	r3, #12
 8006596:	d10e      	bne.n	80065b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2b03      	cmp	r3, #3
 800659c:	d10b      	bne.n	80065b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800659e:	4b15      	ldr	r3, [pc, #84]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d064      	beq.n	8006674 <HAL_RCC_OscConfig+0x2f0>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d160      	bne.n	8006674 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e2ba      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065be:	d106      	bne.n	80065ce <HAL_RCC_OscConfig+0x24a>
 80065c0:	4b0c      	ldr	r3, [pc, #48]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a0b      	ldr	r2, [pc, #44]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 80065c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	e026      	b.n	800661c <HAL_RCC_OscConfig+0x298>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065d6:	d115      	bne.n	8006604 <HAL_RCC_OscConfig+0x280>
 80065d8:	4b06      	ldr	r3, [pc, #24]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a05      	ldr	r2, [pc, #20]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 80065de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	4b03      	ldr	r3, [pc, #12]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a02      	ldr	r2, [pc, #8]	@ (80065f4 <HAL_RCC_OscConfig+0x270>)
 80065ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	e014      	b.n	800661c <HAL_RCC_OscConfig+0x298>
 80065f2:	bf00      	nop
 80065f4:	40021000 	.word	0x40021000
 80065f8:	0800ea8c 	.word	0x0800ea8c
 80065fc:	20000004 	.word	0x20000004
 8006600:	2000003c 	.word	0x2000003c
 8006604:	4ba0      	ldr	r3, [pc, #640]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a9f      	ldr	r2, [pc, #636]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 800660a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	4b9d      	ldr	r3, [pc, #628]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a9c      	ldr	r2, [pc, #624]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 8006616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800661a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d013      	beq.n	800664c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006624:	f7fc fc84 	bl	8002f30 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800662c:	f7fc fc80 	bl	8002f30 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b64      	cmp	r3, #100	@ 0x64
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e276      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800663e:	4b92      	ldr	r3, [pc, #584]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0f0      	beq.n	800662c <HAL_RCC_OscConfig+0x2a8>
 800664a:	e014      	b.n	8006676 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664c:	f7fc fc70 	bl	8002f30 <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006654:	f7fc fc6c 	bl	8002f30 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b64      	cmp	r3, #100	@ 0x64
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e262      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006666:	4b88      	ldr	r3, [pc, #544]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f0      	bne.n	8006654 <HAL_RCC_OscConfig+0x2d0>
 8006672:	e000      	b.n	8006676 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d060      	beq.n	8006744 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	2b04      	cmp	r3, #4
 8006686:	d005      	beq.n	8006694 <HAL_RCC_OscConfig+0x310>
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	2b0c      	cmp	r3, #12
 800668c:	d119      	bne.n	80066c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b02      	cmp	r3, #2
 8006692:	d116      	bne.n	80066c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006694:	4b7c      	ldr	r3, [pc, #496]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800669c:	2b00      	cmp	r3, #0
 800669e:	d005      	beq.n	80066ac <HAL_RCC_OscConfig+0x328>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e23f      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ac:	4b76      	ldr	r3, [pc, #472]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	061b      	lsls	r3, r3, #24
 80066ba:	4973      	ldr	r1, [pc, #460]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066c0:	e040      	b.n	8006744 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d023      	beq.n	8006712 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066ca:	4b6f      	ldr	r3, [pc, #444]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a6e      	ldr	r2, [pc, #440]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 80066d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d6:	f7fc fc2b 	bl	8002f30 <HAL_GetTick>
 80066da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066dc:	e008      	b.n	80066f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066de:	f7fc fc27 	bl	8002f30 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d901      	bls.n	80066f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e21d      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066f0:	4b65      	ldr	r3, [pc, #404]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d0f0      	beq.n	80066de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066fc:	4b62      	ldr	r3, [pc, #392]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	061b      	lsls	r3, r3, #24
 800670a:	495f      	ldr	r1, [pc, #380]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 800670c:	4313      	orrs	r3, r2
 800670e:	604b      	str	r3, [r1, #4]
 8006710:	e018      	b.n	8006744 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006712:	4b5d      	ldr	r3, [pc, #372]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a5c      	ldr	r2, [pc, #368]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 8006718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800671c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671e:	f7fc fc07 	bl	8002f30 <HAL_GetTick>
 8006722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006724:	e008      	b.n	8006738 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006726:	f7fc fc03 	bl	8002f30 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	2b02      	cmp	r3, #2
 8006732:	d901      	bls.n	8006738 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e1f9      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006738:	4b53      	ldr	r3, [pc, #332]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1f0      	bne.n	8006726 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0308 	and.w	r3, r3, #8
 800674c:	2b00      	cmp	r3, #0
 800674e:	d03c      	beq.n	80067ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d01c      	beq.n	8006792 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006758:	4b4b      	ldr	r3, [pc, #300]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 800675a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800675e:	4a4a      	ldr	r2, [pc, #296]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 8006760:	f043 0301 	orr.w	r3, r3, #1
 8006764:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006768:	f7fc fbe2 	bl	8002f30 <HAL_GetTick>
 800676c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800676e:	e008      	b.n	8006782 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006770:	f7fc fbde 	bl	8002f30 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	2b02      	cmp	r3, #2
 800677c:	d901      	bls.n	8006782 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e1d4      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006782:	4b41      	ldr	r3, [pc, #260]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 8006784:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006788:	f003 0302 	and.w	r3, r3, #2
 800678c:	2b00      	cmp	r3, #0
 800678e:	d0ef      	beq.n	8006770 <HAL_RCC_OscConfig+0x3ec>
 8006790:	e01b      	b.n	80067ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006792:	4b3d      	ldr	r3, [pc, #244]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 8006794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006798:	4a3b      	ldr	r2, [pc, #236]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 800679a:	f023 0301 	bic.w	r3, r3, #1
 800679e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a2:	f7fc fbc5 	bl	8002f30 <HAL_GetTick>
 80067a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067a8:	e008      	b.n	80067bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067aa:	f7fc fbc1 	bl	8002f30 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e1b7      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067bc:	4b32      	ldr	r3, [pc, #200]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 80067be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1ef      	bne.n	80067aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 80a6 	beq.w	8006924 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067d8:	2300      	movs	r3, #0
 80067da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80067dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 80067de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10d      	bne.n	8006804 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067e8:	4b27      	ldr	r3, [pc, #156]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 80067ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ec:	4a26      	ldr	r2, [pc, #152]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 80067ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80067f4:	4b24      	ldr	r3, [pc, #144]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 80067f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067fc:	60bb      	str	r3, [r7, #8]
 80067fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006800:	2301      	movs	r3, #1
 8006802:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006804:	4b21      	ldr	r3, [pc, #132]	@ (800688c <HAL_RCC_OscConfig+0x508>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800680c:	2b00      	cmp	r3, #0
 800680e:	d118      	bne.n	8006842 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006810:	4b1e      	ldr	r3, [pc, #120]	@ (800688c <HAL_RCC_OscConfig+0x508>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a1d      	ldr	r2, [pc, #116]	@ (800688c <HAL_RCC_OscConfig+0x508>)
 8006816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800681a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800681c:	f7fc fb88 	bl	8002f30 <HAL_GetTick>
 8006820:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006822:	e008      	b.n	8006836 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006824:	f7fc fb84 	bl	8002f30 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e17a      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006836:	4b15      	ldr	r3, [pc, #84]	@ (800688c <HAL_RCC_OscConfig+0x508>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0f0      	beq.n	8006824 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d108      	bne.n	800685c <HAL_RCC_OscConfig+0x4d8>
 800684a:	4b0f      	ldr	r3, [pc, #60]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 800684c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006850:	4a0d      	ldr	r2, [pc, #52]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 8006852:	f043 0301 	orr.w	r3, r3, #1
 8006856:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800685a:	e029      	b.n	80068b0 <HAL_RCC_OscConfig+0x52c>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	2b05      	cmp	r3, #5
 8006862:	d115      	bne.n	8006890 <HAL_RCC_OscConfig+0x50c>
 8006864:	4b08      	ldr	r3, [pc, #32]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 8006866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800686a:	4a07      	ldr	r2, [pc, #28]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 800686c:	f043 0304 	orr.w	r3, r3, #4
 8006870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006874:	4b04      	ldr	r3, [pc, #16]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 8006876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800687a:	4a03      	ldr	r2, [pc, #12]	@ (8006888 <HAL_RCC_OscConfig+0x504>)
 800687c:	f043 0301 	orr.w	r3, r3, #1
 8006880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006884:	e014      	b.n	80068b0 <HAL_RCC_OscConfig+0x52c>
 8006886:	bf00      	nop
 8006888:	40021000 	.word	0x40021000
 800688c:	40007000 	.word	0x40007000
 8006890:	4b9c      	ldr	r3, [pc, #624]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 8006892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006896:	4a9b      	ldr	r2, [pc, #620]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 8006898:	f023 0301 	bic.w	r3, r3, #1
 800689c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80068a0:	4b98      	ldr	r3, [pc, #608]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 80068a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a6:	4a97      	ldr	r2, [pc, #604]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 80068a8:	f023 0304 	bic.w	r3, r3, #4
 80068ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d016      	beq.n	80068e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b8:	f7fc fb3a 	bl	8002f30 <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068be:	e00a      	b.n	80068d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068c0:	f7fc fb36 	bl	8002f30 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e12a      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068d6:	4b8b      	ldr	r3, [pc, #556]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 80068d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d0ed      	beq.n	80068c0 <HAL_RCC_OscConfig+0x53c>
 80068e4:	e015      	b.n	8006912 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068e6:	f7fc fb23 	bl	8002f30 <HAL_GetTick>
 80068ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068ec:	e00a      	b.n	8006904 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068ee:	f7fc fb1f 	bl	8002f30 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d901      	bls.n	8006904 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e113      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006904:	4b7f      	ldr	r3, [pc, #508]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 8006906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1ed      	bne.n	80068ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006912:	7ffb      	ldrb	r3, [r7, #31]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d105      	bne.n	8006924 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006918:	4b7a      	ldr	r3, [pc, #488]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 800691a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800691c:	4a79      	ldr	r2, [pc, #484]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 800691e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006922:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 80fe 	beq.w	8006b2a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006932:	2b02      	cmp	r3, #2
 8006934:	f040 80d0 	bne.w	8006ad8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006938:	4b72      	ldr	r3, [pc, #456]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f003 0203 	and.w	r2, r3, #3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006948:	429a      	cmp	r2, r3
 800694a:	d130      	bne.n	80069ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006956:	3b01      	subs	r3, #1
 8006958:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800695a:	429a      	cmp	r2, r3
 800695c:	d127      	bne.n	80069ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006968:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800696a:	429a      	cmp	r2, r3
 800696c:	d11f      	bne.n	80069ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006978:	2a07      	cmp	r2, #7
 800697a:	bf14      	ite	ne
 800697c:	2201      	movne	r2, #1
 800697e:	2200      	moveq	r2, #0
 8006980:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006982:	4293      	cmp	r3, r2
 8006984:	d113      	bne.n	80069ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006990:	085b      	lsrs	r3, r3, #1
 8006992:	3b01      	subs	r3, #1
 8006994:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006996:	429a      	cmp	r2, r3
 8006998:	d109      	bne.n	80069ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a4:	085b      	lsrs	r3, r3, #1
 80069a6:	3b01      	subs	r3, #1
 80069a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d06e      	beq.n	8006a8c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	2b0c      	cmp	r3, #12
 80069b2:	d069      	beq.n	8006a88 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80069b4:	4b53      	ldr	r3, [pc, #332]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d105      	bne.n	80069cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80069c0:	4b50      	ldr	r3, [pc, #320]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e0ad      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80069d0:	4b4c      	ldr	r3, [pc, #304]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a4b      	ldr	r2, [pc, #300]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 80069d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80069dc:	f7fc faa8 	bl	8002f30 <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e4:	f7fc faa4 	bl	8002f30 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e09a      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069f6:	4b43      	ldr	r3, [pc, #268]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f0      	bne.n	80069e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a02:	4b40      	ldr	r3, [pc, #256]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 8006a04:	68da      	ldr	r2, [r3, #12]
 8006a06:	4b40      	ldr	r3, [pc, #256]	@ (8006b08 <HAL_RCC_OscConfig+0x784>)
 8006a08:	4013      	ands	r3, r2
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006a12:	3a01      	subs	r2, #1
 8006a14:	0112      	lsls	r2, r2, #4
 8006a16:	4311      	orrs	r1, r2
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006a1c:	0212      	lsls	r2, r2, #8
 8006a1e:	4311      	orrs	r1, r2
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a24:	0852      	lsrs	r2, r2, #1
 8006a26:	3a01      	subs	r2, #1
 8006a28:	0552      	lsls	r2, r2, #21
 8006a2a:	4311      	orrs	r1, r2
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006a30:	0852      	lsrs	r2, r2, #1
 8006a32:	3a01      	subs	r2, #1
 8006a34:	0652      	lsls	r2, r2, #25
 8006a36:	4311      	orrs	r1, r2
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006a3c:	0912      	lsrs	r2, r2, #4
 8006a3e:	0452      	lsls	r2, r2, #17
 8006a40:	430a      	orrs	r2, r1
 8006a42:	4930      	ldr	r1, [pc, #192]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006a48:	4b2e      	ldr	r3, [pc, #184]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a2d      	ldr	r2, [pc, #180]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 8006a4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a54:	4b2b      	ldr	r3, [pc, #172]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	4a2a      	ldr	r2, [pc, #168]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 8006a5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a60:	f7fc fa66 	bl	8002f30 <HAL_GetTick>
 8006a64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a66:	e008      	b.n	8006a7a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a68:	f7fc fa62 	bl	8002f30 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e058      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a7a:	4b22      	ldr	r3, [pc, #136]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0f0      	beq.n	8006a68 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a86:	e050      	b.n	8006b2a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e04f      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d148      	bne.n	8006b2a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006a98:	4b1a      	ldr	r3, [pc, #104]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a19      	ldr	r2, [pc, #100]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 8006a9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006aa2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006aa4:	4b17      	ldr	r3, [pc, #92]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	4a16      	ldr	r2, [pc, #88]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 8006aaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006aae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ab0:	f7fc fa3e 	bl	8002f30 <HAL_GetTick>
 8006ab4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ab6:	e008      	b.n	8006aca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ab8:	f7fc fa3a 	bl	8002f30 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d901      	bls.n	8006aca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e030      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006aca:	4b0e      	ldr	r3, [pc, #56]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0f0      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x734>
 8006ad6:	e028      	b.n	8006b2a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	2b0c      	cmp	r3, #12
 8006adc:	d023      	beq.n	8006b26 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ade:	4b09      	ldr	r3, [pc, #36]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a08      	ldr	r2, [pc, #32]	@ (8006b04 <HAL_RCC_OscConfig+0x780>)
 8006ae4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aea:	f7fc fa21 	bl	8002f30 <HAL_GetTick>
 8006aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006af0:	e00c      	b.n	8006b0c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006af2:	f7fc fa1d 	bl	8002f30 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d905      	bls.n	8006b0c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e013      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
 8006b04:	40021000 	.word	0x40021000
 8006b08:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b0c:	4b09      	ldr	r3, [pc, #36]	@ (8006b34 <HAL_RCC_OscConfig+0x7b0>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1ec      	bne.n	8006af2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006b18:	4b06      	ldr	r3, [pc, #24]	@ (8006b34 <HAL_RCC_OscConfig+0x7b0>)
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	4905      	ldr	r1, [pc, #20]	@ (8006b34 <HAL_RCC_OscConfig+0x7b0>)
 8006b1e:	4b06      	ldr	r3, [pc, #24]	@ (8006b38 <HAL_RCC_OscConfig+0x7b4>)
 8006b20:	4013      	ands	r3, r2
 8006b22:	60cb      	str	r3, [r1, #12]
 8006b24:	e001      	b.n	8006b2a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e000      	b.n	8006b2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3720      	adds	r7, #32
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	40021000 	.word	0x40021000
 8006b38:	feeefffc 	.word	0xfeeefffc

08006b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e0e7      	b.n	8006d20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b50:	4b75      	ldr	r3, [pc, #468]	@ (8006d28 <HAL_RCC_ClockConfig+0x1ec>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d910      	bls.n	8006b80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b5e:	4b72      	ldr	r3, [pc, #456]	@ (8006d28 <HAL_RCC_ClockConfig+0x1ec>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f023 0207 	bic.w	r2, r3, #7
 8006b66:	4970      	ldr	r1, [pc, #448]	@ (8006d28 <HAL_RCC_ClockConfig+0x1ec>)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b6e:	4b6e      	ldr	r3, [pc, #440]	@ (8006d28 <HAL_RCC_ClockConfig+0x1ec>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d001      	beq.n	8006b80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e0cf      	b.n	8006d20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d010      	beq.n	8006bae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	4b66      	ldr	r3, [pc, #408]	@ (8006d2c <HAL_RCC_ClockConfig+0x1f0>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d908      	bls.n	8006bae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b9c:	4b63      	ldr	r3, [pc, #396]	@ (8006d2c <HAL_RCC_ClockConfig+0x1f0>)
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	4960      	ldr	r1, [pc, #384]	@ (8006d2c <HAL_RCC_ClockConfig+0x1f0>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d04c      	beq.n	8006c54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d107      	bne.n	8006bd2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bc2:	4b5a      	ldr	r3, [pc, #360]	@ (8006d2c <HAL_RCC_ClockConfig+0x1f0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d121      	bne.n	8006c12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e0a6      	b.n	8006d20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d107      	bne.n	8006bea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bda:	4b54      	ldr	r3, [pc, #336]	@ (8006d2c <HAL_RCC_ClockConfig+0x1f0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d115      	bne.n	8006c12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e09a      	b.n	8006d20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d107      	bne.n	8006c02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006bf2:	4b4e      	ldr	r3, [pc, #312]	@ (8006d2c <HAL_RCC_ClockConfig+0x1f0>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d109      	bne.n	8006c12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e08e      	b.n	8006d20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c02:	4b4a      	ldr	r3, [pc, #296]	@ (8006d2c <HAL_RCC_ClockConfig+0x1f0>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e086      	b.n	8006d20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c12:	4b46      	ldr	r3, [pc, #280]	@ (8006d2c <HAL_RCC_ClockConfig+0x1f0>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f023 0203 	bic.w	r2, r3, #3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	4943      	ldr	r1, [pc, #268]	@ (8006d2c <HAL_RCC_ClockConfig+0x1f0>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c24:	f7fc f984 	bl	8002f30 <HAL_GetTick>
 8006c28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c2a:	e00a      	b.n	8006c42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c2c:	f7fc f980 	bl	8002f30 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e06e      	b.n	8006d20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c42:	4b3a      	ldr	r3, [pc, #232]	@ (8006d2c <HAL_RCC_ClockConfig+0x1f0>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f003 020c 	and.w	r2, r3, #12
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d1eb      	bne.n	8006c2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d010      	beq.n	8006c82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	4b31      	ldr	r3, [pc, #196]	@ (8006d2c <HAL_RCC_ClockConfig+0x1f0>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d208      	bcs.n	8006c82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c70:	4b2e      	ldr	r3, [pc, #184]	@ (8006d2c <HAL_RCC_ClockConfig+0x1f0>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	492b      	ldr	r1, [pc, #172]	@ (8006d2c <HAL_RCC_ClockConfig+0x1f0>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c82:	4b29      	ldr	r3, [pc, #164]	@ (8006d28 <HAL_RCC_ClockConfig+0x1ec>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d210      	bcs.n	8006cb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c90:	4b25      	ldr	r3, [pc, #148]	@ (8006d28 <HAL_RCC_ClockConfig+0x1ec>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f023 0207 	bic.w	r2, r3, #7
 8006c98:	4923      	ldr	r1, [pc, #140]	@ (8006d28 <HAL_RCC_ClockConfig+0x1ec>)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ca0:	4b21      	ldr	r3, [pc, #132]	@ (8006d28 <HAL_RCC_ClockConfig+0x1ec>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d001      	beq.n	8006cb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e036      	b.n	8006d20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0304 	and.w	r3, r3, #4
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d008      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8006d2c <HAL_RCC_ClockConfig+0x1f0>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	4918      	ldr	r1, [pc, #96]	@ (8006d2c <HAL_RCC_ClockConfig+0x1f0>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0308 	and.w	r3, r3, #8
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d009      	beq.n	8006cf0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cdc:	4b13      	ldr	r3, [pc, #76]	@ (8006d2c <HAL_RCC_ClockConfig+0x1f0>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	4910      	ldr	r1, [pc, #64]	@ (8006d2c <HAL_RCC_ClockConfig+0x1f0>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006cf0:	f000 f824 	bl	8006d3c <HAL_RCC_GetSysClockFreq>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d2c <HAL_RCC_ClockConfig+0x1f0>)
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	091b      	lsrs	r3, r3, #4
 8006cfc:	f003 030f 	and.w	r3, r3, #15
 8006d00:	490b      	ldr	r1, [pc, #44]	@ (8006d30 <HAL_RCC_ClockConfig+0x1f4>)
 8006d02:	5ccb      	ldrb	r3, [r1, r3]
 8006d04:	f003 031f 	and.w	r3, r3, #31
 8006d08:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0c:	4a09      	ldr	r2, [pc, #36]	@ (8006d34 <HAL_RCC_ClockConfig+0x1f8>)
 8006d0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006d10:	4b09      	ldr	r3, [pc, #36]	@ (8006d38 <HAL_RCC_ClockConfig+0x1fc>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fc f8bb 	bl	8002e90 <HAL_InitTick>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8006d1e:	7afb      	ldrb	r3, [r7, #11]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	40022000 	.word	0x40022000
 8006d2c:	40021000 	.word	0x40021000
 8006d30:	0800ea8c 	.word	0x0800ea8c
 8006d34:	20000004 	.word	0x20000004
 8006d38:	2000003c 	.word	0x2000003c

08006d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b089      	sub	sp, #36	@ 0x24
 8006d40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	61fb      	str	r3, [r7, #28]
 8006d46:	2300      	movs	r3, #0
 8006d48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f003 030c 	and.w	r3, r3, #12
 8006d52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d54:	4b3b      	ldr	r3, [pc, #236]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f003 0303 	and.w	r3, r3, #3
 8006d5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d005      	beq.n	8006d70 <HAL_RCC_GetSysClockFreq+0x34>
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	2b0c      	cmp	r3, #12
 8006d68:	d121      	bne.n	8006dae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d11e      	bne.n	8006dae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006d70:	4b34      	ldr	r3, [pc, #208]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0308 	and.w	r3, r3, #8
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d107      	bne.n	8006d8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006d7c:	4b31      	ldr	r3, [pc, #196]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d82:	0a1b      	lsrs	r3, r3, #8
 8006d84:	f003 030f 	and.w	r3, r3, #15
 8006d88:	61fb      	str	r3, [r7, #28]
 8006d8a:	e005      	b.n	8006d98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	091b      	lsrs	r3, r3, #4
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006d98:	4a2b      	ldr	r2, [pc, #172]	@ (8006e48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006da0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10d      	bne.n	8006dc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006dac:	e00a      	b.n	8006dc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d102      	bne.n	8006dba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006db4:	4b25      	ldr	r3, [pc, #148]	@ (8006e4c <HAL_RCC_GetSysClockFreq+0x110>)
 8006db6:	61bb      	str	r3, [r7, #24]
 8006db8:	e004      	b.n	8006dc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d101      	bne.n	8006dc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006dc0:	4b23      	ldr	r3, [pc, #140]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x114>)
 8006dc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	2b0c      	cmp	r3, #12
 8006dc8:	d134      	bne.n	8006e34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006dca:	4b1e      	ldr	r3, [pc, #120]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	f003 0303 	and.w	r3, r3, #3
 8006dd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d003      	beq.n	8006de2 <HAL_RCC_GetSysClockFreq+0xa6>
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b03      	cmp	r3, #3
 8006dde:	d003      	beq.n	8006de8 <HAL_RCC_GetSysClockFreq+0xac>
 8006de0:	e005      	b.n	8006dee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006de2:	4b1a      	ldr	r3, [pc, #104]	@ (8006e4c <HAL_RCC_GetSysClockFreq+0x110>)
 8006de4:	617b      	str	r3, [r7, #20]
      break;
 8006de6:	e005      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006de8:	4b19      	ldr	r3, [pc, #100]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x114>)
 8006dea:	617b      	str	r3, [r7, #20]
      break;
 8006dec:	e002      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	617b      	str	r3, [r7, #20]
      break;
 8006df2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006df4:	4b13      	ldr	r3, [pc, #76]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	091b      	lsrs	r3, r3, #4
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	3301      	adds	r3, #1
 8006e00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006e02:	4b10      	ldr	r3, [pc, #64]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	0a1b      	lsrs	r3, r3, #8
 8006e08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	fb03 f202 	mul.w	r2, r3, r2
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	0e5b      	lsrs	r3, r3, #25
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	3301      	adds	r3, #1
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006e34:	69bb      	ldr	r3, [r7, #24]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3724      	adds	r7, #36	@ 0x24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	40021000 	.word	0x40021000
 8006e48:	0800eaa4 	.word	0x0800eaa4
 8006e4c:	00f42400 	.word	0x00f42400
 8006e50:	007a1200 	.word	0x007a1200

08006e54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e58:	4b03      	ldr	r3, [pc, #12]	@ (8006e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	20000004 	.word	0x20000004

08006e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e70:	f7ff fff0 	bl	8006e54 <HAL_RCC_GetHCLKFreq>
 8006e74:	4602      	mov	r2, r0
 8006e76:	4b06      	ldr	r3, [pc, #24]	@ (8006e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	0a1b      	lsrs	r3, r3, #8
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	4904      	ldr	r1, [pc, #16]	@ (8006e94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e82:	5ccb      	ldrb	r3, [r1, r3]
 8006e84:	f003 031f 	and.w	r3, r3, #31
 8006e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	40021000 	.word	0x40021000
 8006e94:	0800ea9c 	.word	0x0800ea9c

08006e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e9c:	f7ff ffda 	bl	8006e54 <HAL_RCC_GetHCLKFreq>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	4b06      	ldr	r3, [pc, #24]	@ (8006ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	0adb      	lsrs	r3, r3, #11
 8006ea8:	f003 0307 	and.w	r3, r3, #7
 8006eac:	4904      	ldr	r1, [pc, #16]	@ (8006ec0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006eae:	5ccb      	ldrb	r3, [r1, r3]
 8006eb0:	f003 031f 	and.w	r3, r3, #31
 8006eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	40021000 	.word	0x40021000
 8006ec0:	0800ea9c 	.word	0x0800ea9c

08006ec4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006ecc:	2300      	movs	r3, #0
 8006ece:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8006f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006edc:	f7ff f922 	bl	8006124 <HAL_PWREx_GetVoltageRange>
 8006ee0:	6178      	str	r0, [r7, #20]
 8006ee2:	e014      	b.n	8006f0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ee4:	4b25      	ldr	r3, [pc, #148]	@ (8006f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee8:	4a24      	ldr	r2, [pc, #144]	@ (8006f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006eea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006eee:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ef0:	4b22      	ldr	r3, [pc, #136]	@ (8006f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006efc:	f7ff f912 	bl	8006124 <HAL_PWREx_GetVoltageRange>
 8006f00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006f02:	4b1e      	ldr	r3, [pc, #120]	@ (8006f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f06:	4a1d      	ldr	r2, [pc, #116]	@ (8006f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f14:	d10b      	bne.n	8006f2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b80      	cmp	r3, #128	@ 0x80
 8006f1a:	d919      	bls.n	8006f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006f20:	d902      	bls.n	8006f28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f22:	2302      	movs	r3, #2
 8006f24:	613b      	str	r3, [r7, #16]
 8006f26:	e013      	b.n	8006f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f28:	2301      	movs	r3, #1
 8006f2a:	613b      	str	r3, [r7, #16]
 8006f2c:	e010      	b.n	8006f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b80      	cmp	r3, #128	@ 0x80
 8006f32:	d902      	bls.n	8006f3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006f34:	2303      	movs	r3, #3
 8006f36:	613b      	str	r3, [r7, #16]
 8006f38:	e00a      	b.n	8006f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b80      	cmp	r3, #128	@ 0x80
 8006f3e:	d102      	bne.n	8006f46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f40:	2302      	movs	r3, #2
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	e004      	b.n	8006f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b70      	cmp	r3, #112	@ 0x70
 8006f4a:	d101      	bne.n	8006f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006f50:	4b0b      	ldr	r3, [pc, #44]	@ (8006f80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f023 0207 	bic.w	r2, r3, #7
 8006f58:	4909      	ldr	r1, [pc, #36]	@ (8006f80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006f60:	4b07      	ldr	r3, [pc, #28]	@ (8006f80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d001      	beq.n	8006f72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e000      	b.n	8006f74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	40021000 	.word	0x40021000
 8006f80:	40022000 	.word	0x40022000

08006f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f90:	2300      	movs	r3, #0
 8006f92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d041      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fa4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006fa8:	d02a      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006faa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006fae:	d824      	bhi.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006fb0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006fb4:	d008      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006fb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006fba:	d81e      	bhi.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00a      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006fc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fc4:	d010      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006fc6:	e018      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006fc8:	4b86      	ldr	r3, [pc, #536]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	4a85      	ldr	r2, [pc, #532]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fd2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006fd4:	e015      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	2100      	movs	r1, #0
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f000 facb 	bl	8007578 <RCCEx_PLLSAI1_Config>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006fe6:	e00c      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	3320      	adds	r3, #32
 8006fec:	2100      	movs	r1, #0
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 fbb6 	bl	8007760 <RCCEx_PLLSAI2_Config>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ff8:	e003      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	74fb      	strb	r3, [r7, #19]
      break;
 8006ffe:	e000      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007002:	7cfb      	ldrb	r3, [r7, #19]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10b      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007008:	4b76      	ldr	r3, [pc, #472]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800700a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800700e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007016:	4973      	ldr	r1, [pc, #460]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007018:	4313      	orrs	r3, r2
 800701a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800701e:	e001      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007020:	7cfb      	ldrb	r3, [r7, #19]
 8007022:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d041      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007034:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007038:	d02a      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800703a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800703e:	d824      	bhi.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007040:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007044:	d008      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007046:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800704a:	d81e      	bhi.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00a      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007050:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007054:	d010      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007056:	e018      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007058:	4b62      	ldr	r3, [pc, #392]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	4a61      	ldr	r2, [pc, #388]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800705e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007062:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007064:	e015      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	3304      	adds	r3, #4
 800706a:	2100      	movs	r1, #0
 800706c:	4618      	mov	r0, r3
 800706e:	f000 fa83 	bl	8007578 <RCCEx_PLLSAI1_Config>
 8007072:	4603      	mov	r3, r0
 8007074:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007076:	e00c      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3320      	adds	r3, #32
 800707c:	2100      	movs	r1, #0
 800707e:	4618      	mov	r0, r3
 8007080:	f000 fb6e 	bl	8007760 <RCCEx_PLLSAI2_Config>
 8007084:	4603      	mov	r3, r0
 8007086:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007088:	e003      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	74fb      	strb	r3, [r7, #19]
      break;
 800708e:	e000      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007092:	7cfb      	ldrb	r3, [r7, #19]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10b      	bne.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007098:	4b52      	ldr	r3, [pc, #328]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800709a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800709e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070a6:	494f      	ldr	r1, [pc, #316]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80070ae:	e001      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b0:	7cfb      	ldrb	r3, [r7, #19]
 80070b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 80a0 	beq.w	8007202 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070c2:	2300      	movs	r3, #0
 80070c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80070c6:	4b47      	ldr	r3, [pc, #284]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e000      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80070d6:	2300      	movs	r3, #0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00d      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070dc:	4b41      	ldr	r3, [pc, #260]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070e0:	4a40      	ldr	r2, [pc, #256]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80070e8:	4b3e      	ldr	r3, [pc, #248]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070f0:	60bb      	str	r3, [r7, #8]
 80070f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070f4:	2301      	movs	r3, #1
 80070f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070f8:	4b3b      	ldr	r3, [pc, #236]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a3a      	ldr	r2, [pc, #232]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80070fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007102:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007104:	f7fb ff14 	bl	8002f30 <HAL_GetTick>
 8007108:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800710a:	e009      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800710c:	f7fb ff10 	bl	8002f30 <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	2b02      	cmp	r3, #2
 8007118:	d902      	bls.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	74fb      	strb	r3, [r7, #19]
        break;
 800711e:	e005      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007120:	4b31      	ldr	r3, [pc, #196]	@ (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007128:	2b00      	cmp	r3, #0
 800712a:	d0ef      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800712c:	7cfb      	ldrb	r3, [r7, #19]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d15c      	bne.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007132:	4b2c      	ldr	r3, [pc, #176]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007138:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800713c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d01f      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	429a      	cmp	r2, r3
 800714e:	d019      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007150:	4b24      	ldr	r3, [pc, #144]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007156:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800715a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800715c:	4b21      	ldr	r3, [pc, #132]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800715e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007162:	4a20      	ldr	r2, [pc, #128]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800716c:	4b1d      	ldr	r3, [pc, #116]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800716e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007172:	4a1c      	ldr	r2, [pc, #112]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007174:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800717c:	4a19      	ldr	r2, [pc, #100]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d016      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718e:	f7fb fecf 	bl	8002f30 <HAL_GetTick>
 8007192:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007194:	e00b      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007196:	f7fb fecb 	bl	8002f30 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d902      	bls.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	74fb      	strb	r3, [r7, #19]
            break;
 80071ac:	e006      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071ae:	4b0d      	ldr	r3, [pc, #52]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071b4:	f003 0302 	and.w	r3, r3, #2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d0ec      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80071bc:	7cfb      	ldrb	r3, [r7, #19]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10c      	bne.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071c2:	4b08      	ldr	r3, [pc, #32]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071d2:	4904      	ldr	r1, [pc, #16]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80071da:	e009      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071dc:	7cfb      	ldrb	r3, [r7, #19]
 80071de:	74bb      	strb	r3, [r7, #18]
 80071e0:	e006      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80071e2:	bf00      	nop
 80071e4:	40021000 	.word	0x40021000
 80071e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ec:	7cfb      	ldrb	r3, [r7, #19]
 80071ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071f0:	7c7b      	ldrb	r3, [r7, #17]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d105      	bne.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071f6:	4b9e      	ldr	r3, [pc, #632]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071fa:	4a9d      	ldr	r2, [pc, #628]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007200:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00a      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800720e:	4b98      	ldr	r3, [pc, #608]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007214:	f023 0203 	bic.w	r2, r3, #3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800721c:	4994      	ldr	r1, [pc, #592]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800721e:	4313      	orrs	r3, r2
 8007220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007230:	4b8f      	ldr	r3, [pc, #572]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007236:	f023 020c 	bic.w	r2, r3, #12
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800723e:	498c      	ldr	r1, [pc, #560]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007240:	4313      	orrs	r3, r2
 8007242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0304 	and.w	r3, r3, #4
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00a      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007252:	4b87      	ldr	r3, [pc, #540]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007258:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007260:	4983      	ldr	r1, [pc, #524]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007262:	4313      	orrs	r3, r2
 8007264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0308 	and.w	r3, r3, #8
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00a      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007274:	4b7e      	ldr	r3, [pc, #504]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800727a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007282:	497b      	ldr	r1, [pc, #492]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007284:	4313      	orrs	r3, r2
 8007286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0310 	and.w	r3, r3, #16
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00a      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007296:	4b76      	ldr	r3, [pc, #472]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800729c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072a4:	4972      	ldr	r1, [pc, #456]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0320 	and.w	r3, r3, #32
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00a      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072b8:	4b6d      	ldr	r3, [pc, #436]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072c6:	496a      	ldr	r1, [pc, #424]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00a      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072da:	4b65      	ldr	r3, [pc, #404]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072e8:	4961      	ldr	r1, [pc, #388]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00a      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80072fc:	4b5c      	ldr	r3, [pc, #368]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007302:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800730a:	4959      	ldr	r1, [pc, #356]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800730c:	4313      	orrs	r3, r2
 800730e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800731e:	4b54      	ldr	r3, [pc, #336]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007324:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800732c:	4950      	ldr	r1, [pc, #320]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800732e:	4313      	orrs	r3, r2
 8007330:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00a      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007340:	4b4b      	ldr	r3, [pc, #300]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007346:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800734e:	4948      	ldr	r1, [pc, #288]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007350:	4313      	orrs	r3, r2
 8007352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00a      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007362:	4b43      	ldr	r3, [pc, #268]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007368:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007370:	493f      	ldr	r1, [pc, #252]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007372:	4313      	orrs	r3, r2
 8007374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d028      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007384:	4b3a      	ldr	r3, [pc, #232]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800738a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007392:	4937      	ldr	r1, [pc, #220]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007394:	4313      	orrs	r3, r2
 8007396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800739e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073a2:	d106      	bne.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073a4:	4b32      	ldr	r3, [pc, #200]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	4a31      	ldr	r2, [pc, #196]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073ae:	60d3      	str	r3, [r2, #12]
 80073b0:	e011      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80073ba:	d10c      	bne.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3304      	adds	r3, #4
 80073c0:	2101      	movs	r1, #1
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 f8d8 	bl	8007578 <RCCEx_PLLSAI1_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80073cc:	7cfb      	ldrb	r3, [r7, #19]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d001      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80073d2:	7cfb      	ldrb	r3, [r7, #19]
 80073d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d028      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80073e2:	4b23      	ldr	r3, [pc, #140]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f0:	491f      	ldr	r1, [pc, #124]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007400:	d106      	bne.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007402:	4b1b      	ldr	r3, [pc, #108]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	4a1a      	ldr	r2, [pc, #104]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007408:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800740c:	60d3      	str	r3, [r2, #12]
 800740e:	e011      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007414:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007418:	d10c      	bne.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3304      	adds	r3, #4
 800741e:	2101      	movs	r1, #1
 8007420:	4618      	mov	r0, r3
 8007422:	f000 f8a9 	bl	8007578 <RCCEx_PLLSAI1_Config>
 8007426:	4603      	mov	r3, r0
 8007428:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800742a:	7cfb      	ldrb	r3, [r7, #19]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d001      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007430:	7cfb      	ldrb	r3, [r7, #19]
 8007432:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d02b      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007440:	4b0b      	ldr	r3, [pc, #44]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007446:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800744e:	4908      	ldr	r1, [pc, #32]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007450:	4313      	orrs	r3, r2
 8007452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800745a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800745e:	d109      	bne.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007460:	4b03      	ldr	r3, [pc, #12]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	4a02      	ldr	r2, [pc, #8]	@ (8007470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800746a:	60d3      	str	r3, [r2, #12]
 800746c:	e014      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800746e:	bf00      	nop
 8007470:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007478:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800747c:	d10c      	bne.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	3304      	adds	r3, #4
 8007482:	2101      	movs	r1, #1
 8007484:	4618      	mov	r0, r3
 8007486:	f000 f877 	bl	8007578 <RCCEx_PLLSAI1_Config>
 800748a:	4603      	mov	r3, r0
 800748c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800748e:	7cfb      	ldrb	r3, [r7, #19]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007494:	7cfb      	ldrb	r3, [r7, #19]
 8007496:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d02f      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074a4:	4b2b      	ldr	r3, [pc, #172]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80074a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074b2:	4928      	ldr	r1, [pc, #160]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074c2:	d10d      	bne.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3304      	adds	r3, #4
 80074c8:	2102      	movs	r1, #2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 f854 	bl	8007578 <RCCEx_PLLSAI1_Config>
 80074d0:	4603      	mov	r3, r0
 80074d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074d4:	7cfb      	ldrb	r3, [r7, #19]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d014      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80074da:	7cfb      	ldrb	r3, [r7, #19]
 80074dc:	74bb      	strb	r3, [r7, #18]
 80074de:	e011      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074e8:	d10c      	bne.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3320      	adds	r3, #32
 80074ee:	2102      	movs	r1, #2
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 f935 	bl	8007760 <RCCEx_PLLSAI2_Config>
 80074f6:	4603      	mov	r3, r0
 80074f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074fa:	7cfb      	ldrb	r3, [r7, #19]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007500:	7cfb      	ldrb	r3, [r7, #19]
 8007502:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00a      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007510:	4b10      	ldr	r3, [pc, #64]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007516:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800751e:	490d      	ldr	r1, [pc, #52]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007520:	4313      	orrs	r3, r2
 8007522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00b      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007532:	4b08      	ldr	r3, [pc, #32]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007538:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007542:	4904      	ldr	r1, [pc, #16]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007544:	4313      	orrs	r3, r2
 8007546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800754a:	7cbb      	ldrb	r3, [r7, #18]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3718      	adds	r7, #24
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	40021000 	.word	0x40021000

08007558 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007558:	b480      	push	{r7}
 800755a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800755c:	4b05      	ldr	r3, [pc, #20]	@ (8007574 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a04      	ldr	r2, [pc, #16]	@ (8007574 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007562:	f043 0304 	orr.w	r3, r3, #4
 8007566:	6013      	str	r3, [r2, #0]
}
 8007568:	bf00      	nop
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	40021000 	.word	0x40021000

08007578 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007586:	4b75      	ldr	r3, [pc, #468]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f003 0303 	and.w	r3, r3, #3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d018      	beq.n	80075c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007592:	4b72      	ldr	r3, [pc, #456]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	f003 0203 	and.w	r2, r3, #3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d10d      	bne.n	80075be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
       ||
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d009      	beq.n	80075be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80075aa:	4b6c      	ldr	r3, [pc, #432]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	091b      	lsrs	r3, r3, #4
 80075b0:	f003 0307 	and.w	r3, r3, #7
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
       ||
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d047      	beq.n	800764e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	73fb      	strb	r3, [r7, #15]
 80075c2:	e044      	b.n	800764e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2b03      	cmp	r3, #3
 80075ca:	d018      	beq.n	80075fe <RCCEx_PLLSAI1_Config+0x86>
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d825      	bhi.n	800761c <RCCEx_PLLSAI1_Config+0xa4>
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d002      	beq.n	80075da <RCCEx_PLLSAI1_Config+0x62>
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d009      	beq.n	80075ec <RCCEx_PLLSAI1_Config+0x74>
 80075d8:	e020      	b.n	800761c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80075da:	4b60      	ldr	r3, [pc, #384]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d11d      	bne.n	8007622 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075ea:	e01a      	b.n	8007622 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80075ec:	4b5b      	ldr	r3, [pc, #364]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d116      	bne.n	8007626 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075fc:	e013      	b.n	8007626 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80075fe:	4b57      	ldr	r3, [pc, #348]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10f      	bne.n	800762a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800760a:	4b54      	ldr	r3, [pc, #336]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d109      	bne.n	800762a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800761a:	e006      	b.n	800762a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	73fb      	strb	r3, [r7, #15]
      break;
 8007620:	e004      	b.n	800762c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007622:	bf00      	nop
 8007624:	e002      	b.n	800762c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007626:	bf00      	nop
 8007628:	e000      	b.n	800762c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800762a:	bf00      	nop
    }

    if(status == HAL_OK)
 800762c:	7bfb      	ldrb	r3, [r7, #15]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10d      	bne.n	800764e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007632:	4b4a      	ldr	r3, [pc, #296]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6819      	ldr	r1, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	3b01      	subs	r3, #1
 8007644:	011b      	lsls	r3, r3, #4
 8007646:	430b      	orrs	r3, r1
 8007648:	4944      	ldr	r1, [pc, #272]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 800764a:	4313      	orrs	r3, r2
 800764c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d17d      	bne.n	8007750 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007654:	4b41      	ldr	r3, [pc, #260]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a40      	ldr	r2, [pc, #256]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 800765a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800765e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007660:	f7fb fc66 	bl	8002f30 <HAL_GetTick>
 8007664:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007666:	e009      	b.n	800767c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007668:	f7fb fc62 	bl	8002f30 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b02      	cmp	r3, #2
 8007674:	d902      	bls.n	800767c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	73fb      	strb	r3, [r7, #15]
        break;
 800767a:	e005      	b.n	8007688 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800767c:	4b37      	ldr	r3, [pc, #220]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1ef      	bne.n	8007668 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007688:	7bfb      	ldrb	r3, [r7, #15]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d160      	bne.n	8007750 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d111      	bne.n	80076b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007694:	4b31      	ldr	r3, [pc, #196]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800769c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	6892      	ldr	r2, [r2, #8]
 80076a4:	0211      	lsls	r1, r2, #8
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	68d2      	ldr	r2, [r2, #12]
 80076aa:	0912      	lsrs	r2, r2, #4
 80076ac:	0452      	lsls	r2, r2, #17
 80076ae:	430a      	orrs	r2, r1
 80076b0:	492a      	ldr	r1, [pc, #168]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	610b      	str	r3, [r1, #16]
 80076b6:	e027      	b.n	8007708 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d112      	bne.n	80076e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80076be:	4b27      	ldr	r3, [pc, #156]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80076c6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	6892      	ldr	r2, [r2, #8]
 80076ce:	0211      	lsls	r1, r2, #8
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	6912      	ldr	r2, [r2, #16]
 80076d4:	0852      	lsrs	r2, r2, #1
 80076d6:	3a01      	subs	r2, #1
 80076d8:	0552      	lsls	r2, r2, #21
 80076da:	430a      	orrs	r2, r1
 80076dc:	491f      	ldr	r1, [pc, #124]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	610b      	str	r3, [r1, #16]
 80076e2:	e011      	b.n	8007708 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80076e4:	4b1d      	ldr	r3, [pc, #116]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80076ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	6892      	ldr	r2, [r2, #8]
 80076f4:	0211      	lsls	r1, r2, #8
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	6952      	ldr	r2, [r2, #20]
 80076fa:	0852      	lsrs	r2, r2, #1
 80076fc:	3a01      	subs	r2, #1
 80076fe:	0652      	lsls	r2, r2, #25
 8007700:	430a      	orrs	r2, r1
 8007702:	4916      	ldr	r1, [pc, #88]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007704:	4313      	orrs	r3, r2
 8007706:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007708:	4b14      	ldr	r3, [pc, #80]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a13      	ldr	r2, [pc, #76]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 800770e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007712:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007714:	f7fb fc0c 	bl	8002f30 <HAL_GetTick>
 8007718:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800771a:	e009      	b.n	8007730 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800771c:	f7fb fc08 	bl	8002f30 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b02      	cmp	r3, #2
 8007728:	d902      	bls.n	8007730 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	73fb      	strb	r3, [r7, #15]
          break;
 800772e:	e005      	b.n	800773c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007730:	4b0a      	ldr	r3, [pc, #40]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0ef      	beq.n	800771c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800773c:	7bfb      	ldrb	r3, [r7, #15]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d106      	bne.n	8007750 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007742:	4b06      	ldr	r3, [pc, #24]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007744:	691a      	ldr	r2, [r3, #16]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	4904      	ldr	r1, [pc, #16]	@ (800775c <RCCEx_PLLSAI1_Config+0x1e4>)
 800774c:	4313      	orrs	r3, r2
 800774e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007750:	7bfb      	ldrb	r3, [r7, #15]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	40021000 	.word	0x40021000

08007760 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800776e:	4b6a      	ldr	r3, [pc, #424]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f003 0303 	and.w	r3, r3, #3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d018      	beq.n	80077ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800777a:	4b67      	ldr	r3, [pc, #412]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	f003 0203 	and.w	r2, r3, #3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d10d      	bne.n	80077a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
       ||
 800778e:	2b00      	cmp	r3, #0
 8007790:	d009      	beq.n	80077a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007792:	4b61      	ldr	r3, [pc, #388]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	091b      	lsrs	r3, r3, #4
 8007798:	f003 0307 	and.w	r3, r3, #7
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
       ||
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d047      	beq.n	8007836 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	73fb      	strb	r3, [r7, #15]
 80077aa:	e044      	b.n	8007836 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d018      	beq.n	80077e6 <RCCEx_PLLSAI2_Config+0x86>
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d825      	bhi.n	8007804 <RCCEx_PLLSAI2_Config+0xa4>
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d002      	beq.n	80077c2 <RCCEx_PLLSAI2_Config+0x62>
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d009      	beq.n	80077d4 <RCCEx_PLLSAI2_Config+0x74>
 80077c0:	e020      	b.n	8007804 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80077c2:	4b55      	ldr	r3, [pc, #340]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d11d      	bne.n	800780a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077d2:	e01a      	b.n	800780a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80077d4:	4b50      	ldr	r3, [pc, #320]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d116      	bne.n	800780e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077e4:	e013      	b.n	800780e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80077e6:	4b4c      	ldr	r3, [pc, #304]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10f      	bne.n	8007812 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80077f2:	4b49      	ldr	r3, [pc, #292]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d109      	bne.n	8007812 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007802:	e006      	b.n	8007812 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	73fb      	strb	r3, [r7, #15]
      break;
 8007808:	e004      	b.n	8007814 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800780a:	bf00      	nop
 800780c:	e002      	b.n	8007814 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800780e:	bf00      	nop
 8007810:	e000      	b.n	8007814 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007812:	bf00      	nop
    }

    if(status == HAL_OK)
 8007814:	7bfb      	ldrb	r3, [r7, #15]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10d      	bne.n	8007836 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800781a:	4b3f      	ldr	r3, [pc, #252]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6819      	ldr	r1, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	3b01      	subs	r3, #1
 800782c:	011b      	lsls	r3, r3, #4
 800782e:	430b      	orrs	r3, r1
 8007830:	4939      	ldr	r1, [pc, #228]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007832:	4313      	orrs	r3, r2
 8007834:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d167      	bne.n	800790c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800783c:	4b36      	ldr	r3, [pc, #216]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a35      	ldr	r2, [pc, #212]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007842:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007846:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007848:	f7fb fb72 	bl	8002f30 <HAL_GetTick>
 800784c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800784e:	e009      	b.n	8007864 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007850:	f7fb fb6e 	bl	8002f30 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b02      	cmp	r3, #2
 800785c:	d902      	bls.n	8007864 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	73fb      	strb	r3, [r7, #15]
        break;
 8007862:	e005      	b.n	8007870 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007864:	4b2c      	ldr	r3, [pc, #176]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1ef      	bne.n	8007850 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d14a      	bne.n	800790c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d111      	bne.n	80078a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800787c:	4b26      	ldr	r3, [pc, #152]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007884:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	6892      	ldr	r2, [r2, #8]
 800788c:	0211      	lsls	r1, r2, #8
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	68d2      	ldr	r2, [r2, #12]
 8007892:	0912      	lsrs	r2, r2, #4
 8007894:	0452      	lsls	r2, r2, #17
 8007896:	430a      	orrs	r2, r1
 8007898:	491f      	ldr	r1, [pc, #124]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800789a:	4313      	orrs	r3, r2
 800789c:	614b      	str	r3, [r1, #20]
 800789e:	e011      	b.n	80078c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80078a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80078a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	6892      	ldr	r2, [r2, #8]
 80078b0:	0211      	lsls	r1, r2, #8
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	6912      	ldr	r2, [r2, #16]
 80078b6:	0852      	lsrs	r2, r2, #1
 80078b8:	3a01      	subs	r2, #1
 80078ba:	0652      	lsls	r2, r2, #25
 80078bc:	430a      	orrs	r2, r1
 80078be:	4916      	ldr	r1, [pc, #88]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80078c4:	4b14      	ldr	r3, [pc, #80]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a13      	ldr	r2, [pc, #76]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078d0:	f7fb fb2e 	bl	8002f30 <HAL_GetTick>
 80078d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80078d6:	e009      	b.n	80078ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80078d8:	f7fb fb2a 	bl	8002f30 <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d902      	bls.n	80078ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	73fb      	strb	r3, [r7, #15]
          break;
 80078ea:	e005      	b.n	80078f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80078ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0ef      	beq.n	80078d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d106      	bne.n	800790c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80078fe:	4b06      	ldr	r3, [pc, #24]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007900:	695a      	ldr	r2, [r3, #20]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	4904      	ldr	r1, [pc, #16]	@ (8007918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007908:	4313      	orrs	r3, r2
 800790a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800790c:	7bfb      	ldrb	r3, [r7, #15]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	40021000 	.word	0x40021000

0800791c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e095      	b.n	8007a5a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007932:	2b00      	cmp	r3, #0
 8007934:	d108      	bne.n	8007948 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800793e:	d009      	beq.n	8007954 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	61da      	str	r2, [r3, #28]
 8007946:	e005      	b.n	8007954 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d106      	bne.n	8007974 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7fa fb92 	bl	8002098 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2202      	movs	r2, #2
 8007978:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800798a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007994:	d902      	bls.n	800799c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007996:	2300      	movs	r3, #0
 8007998:	60fb      	str	r3, [r7, #12]
 800799a:	e002      	b.n	80079a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800799c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80079a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80079aa:	d007      	beq.n	80079bc <HAL_SPI_Init+0xa0>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80079b4:	d002      	beq.n	80079bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80079cc:	431a      	orrs	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	f003 0302 	and.w	r3, r3, #2
 80079d6:	431a      	orrs	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	f003 0301 	and.w	r3, r3, #1
 80079e0:	431a      	orrs	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079ea:	431a      	orrs	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079f4:	431a      	orrs	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079fe:	ea42 0103 	orr.w	r1, r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a06:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	0c1b      	lsrs	r3, r3, #16
 8007a18:	f003 0204 	and.w	r2, r3, #4
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a20:	f003 0310 	and.w	r3, r3, #16
 8007a24:	431a      	orrs	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a2a:	f003 0308 	and.w	r3, r3, #8
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007a38:	ea42 0103 	orr.w	r1, r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b082      	sub	sp, #8
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e049      	b.n	8007b08 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d106      	bne.n	8007a8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7fa fb49 	bl	8002120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2202      	movs	r2, #2
 8007a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	f000 fe7b 	bl	800879c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d001      	beq.n	8007b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e04f      	b.n	8007bc8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68da      	ldr	r2, [r3, #12]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f042 0201 	orr.w	r2, r2, #1
 8007b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a23      	ldr	r2, [pc, #140]	@ (8007bd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d01d      	beq.n	8007b86 <HAL_TIM_Base_Start_IT+0x76>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b52:	d018      	beq.n	8007b86 <HAL_TIM_Base_Start_IT+0x76>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a1f      	ldr	r2, [pc, #124]	@ (8007bd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d013      	beq.n	8007b86 <HAL_TIM_Base_Start_IT+0x76>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a1e      	ldr	r2, [pc, #120]	@ (8007bdc <HAL_TIM_Base_Start_IT+0xcc>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d00e      	beq.n	8007b86 <HAL_TIM_Base_Start_IT+0x76>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8007be0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d009      	beq.n	8007b86 <HAL_TIM_Base_Start_IT+0x76>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a1b      	ldr	r2, [pc, #108]	@ (8007be4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d004      	beq.n	8007b86 <HAL_TIM_Base_Start_IT+0x76>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a19      	ldr	r2, [pc, #100]	@ (8007be8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d115      	bne.n	8007bb2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	689a      	ldr	r2, [r3, #8]
 8007b8c:	4b17      	ldr	r3, [pc, #92]	@ (8007bec <HAL_TIM_Base_Start_IT+0xdc>)
 8007b8e:	4013      	ands	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2b06      	cmp	r3, #6
 8007b96:	d015      	beq.n	8007bc4 <HAL_TIM_Base_Start_IT+0xb4>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b9e:	d011      	beq.n	8007bc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f042 0201 	orr.w	r2, r2, #1
 8007bae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb0:	e008      	b.n	8007bc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f042 0201 	orr.w	r2, r2, #1
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	e000      	b.n	8007bc6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3714      	adds	r7, #20
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr
 8007bd4:	40012c00 	.word	0x40012c00
 8007bd8:	40000400 	.word	0x40000400
 8007bdc:	40000800 	.word	0x40000800
 8007be0:	40000c00 	.word	0x40000c00
 8007be4:	40013400 	.word	0x40013400
 8007be8:	40014000 	.word	0x40014000
 8007bec:	00010007 	.word	0x00010007

08007bf0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f022 0201 	bic.w	r2, r2, #1
 8007c06:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6a1a      	ldr	r2, [r3, #32]
 8007c0e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007c12:	4013      	ands	r3, r2
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10f      	bne.n	8007c38 <HAL_TIM_Base_Stop_IT+0x48>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6a1a      	ldr	r2, [r3, #32]
 8007c1e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007c22:	4013      	ands	r3, r2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d107      	bne.n	8007c38 <HAL_TIM_Base_Stop_IT+0x48>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0201 	bic.w	r2, r2, #1
 8007c36:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e049      	b.n	8007cf4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d106      	bne.n	8007c7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f841 	bl	8007cfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	3304      	adds	r3, #4
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	4610      	mov	r0, r2
 8007c8e:	f000 fd85 	bl	800879c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007d04:	bf00      	nop
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d109      	bne.n	8007d38 <HAL_TIM_PWM_Start_IT+0x28>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	bf14      	ite	ne
 8007d30:	2301      	movne	r3, #1
 8007d32:	2300      	moveq	r3, #0
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	e03c      	b.n	8007db2 <HAL_TIM_PWM_Start_IT+0xa2>
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b04      	cmp	r3, #4
 8007d3c:	d109      	bne.n	8007d52 <HAL_TIM_PWM_Start_IT+0x42>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	bf14      	ite	ne
 8007d4a:	2301      	movne	r3, #1
 8007d4c:	2300      	moveq	r3, #0
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	e02f      	b.n	8007db2 <HAL_TIM_PWM_Start_IT+0xa2>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b08      	cmp	r3, #8
 8007d56:	d109      	bne.n	8007d6c <HAL_TIM_PWM_Start_IT+0x5c>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	bf14      	ite	ne
 8007d64:	2301      	movne	r3, #1
 8007d66:	2300      	moveq	r3, #0
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	e022      	b.n	8007db2 <HAL_TIM_PWM_Start_IT+0xa2>
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2b0c      	cmp	r3, #12
 8007d70:	d109      	bne.n	8007d86 <HAL_TIM_PWM_Start_IT+0x76>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	bf14      	ite	ne
 8007d7e:	2301      	movne	r3, #1
 8007d80:	2300      	moveq	r3, #0
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	e015      	b.n	8007db2 <HAL_TIM_PWM_Start_IT+0xa2>
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b10      	cmp	r3, #16
 8007d8a:	d109      	bne.n	8007da0 <HAL_TIM_PWM_Start_IT+0x90>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	bf14      	ite	ne
 8007d98:	2301      	movne	r3, #1
 8007d9a:	2300      	moveq	r3, #0
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	e008      	b.n	8007db2 <HAL_TIM_PWM_Start_IT+0xa2>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	bf14      	ite	ne
 8007dac:	2301      	movne	r3, #1
 8007dae:	2300      	moveq	r3, #0
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e0e7      	b.n	8007f8a <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d104      	bne.n	8007dca <HAL_TIM_PWM_Start_IT+0xba>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dc8:	e023      	b.n	8007e12 <HAL_TIM_PWM_Start_IT+0x102>
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	2b04      	cmp	r3, #4
 8007dce:	d104      	bne.n	8007dda <HAL_TIM_PWM_Start_IT+0xca>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007dd8:	e01b      	b.n	8007e12 <HAL_TIM_PWM_Start_IT+0x102>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	d104      	bne.n	8007dea <HAL_TIM_PWM_Start_IT+0xda>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2202      	movs	r2, #2
 8007de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007de8:	e013      	b.n	8007e12 <HAL_TIM_PWM_Start_IT+0x102>
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2b0c      	cmp	r3, #12
 8007dee:	d104      	bne.n	8007dfa <HAL_TIM_PWM_Start_IT+0xea>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2202      	movs	r2, #2
 8007df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007df8:	e00b      	b.n	8007e12 <HAL_TIM_PWM_Start_IT+0x102>
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b10      	cmp	r3, #16
 8007dfe:	d104      	bne.n	8007e0a <HAL_TIM_PWM_Start_IT+0xfa>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2202      	movs	r2, #2
 8007e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e08:	e003      	b.n	8007e12 <HAL_TIM_PWM_Start_IT+0x102>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	2b0c      	cmp	r3, #12
 8007e16:	d841      	bhi.n	8007e9c <HAL_TIM_PWM_Start_IT+0x18c>
 8007e18:	a201      	add	r2, pc, #4	@ (adr r2, 8007e20 <HAL_TIM_PWM_Start_IT+0x110>)
 8007e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1e:	bf00      	nop
 8007e20:	08007e55 	.word	0x08007e55
 8007e24:	08007e9d 	.word	0x08007e9d
 8007e28:	08007e9d 	.word	0x08007e9d
 8007e2c:	08007e9d 	.word	0x08007e9d
 8007e30:	08007e67 	.word	0x08007e67
 8007e34:	08007e9d 	.word	0x08007e9d
 8007e38:	08007e9d 	.word	0x08007e9d
 8007e3c:	08007e9d 	.word	0x08007e9d
 8007e40:	08007e79 	.word	0x08007e79
 8007e44:	08007e9d 	.word	0x08007e9d
 8007e48:	08007e9d 	.word	0x08007e9d
 8007e4c:	08007e9d 	.word	0x08007e9d
 8007e50:	08007e8b 	.word	0x08007e8b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68da      	ldr	r2, [r3, #12]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f042 0202 	orr.w	r2, r2, #2
 8007e62:	60da      	str	r2, [r3, #12]
      break;
 8007e64:	e01d      	b.n	8007ea2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68da      	ldr	r2, [r3, #12]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f042 0204 	orr.w	r2, r2, #4
 8007e74:	60da      	str	r2, [r3, #12]
      break;
 8007e76:	e014      	b.n	8007ea2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f042 0208 	orr.w	r2, r2, #8
 8007e86:	60da      	str	r2, [r3, #12]
      break;
 8007e88:	e00b      	b.n	8007ea2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68da      	ldr	r2, [r3, #12]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f042 0210 	orr.w	r2, r2, #16
 8007e98:	60da      	str	r2, [r3, #12]
      break;
 8007e9a:	e002      	b.n	8007ea2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007ea0:	bf00      	nop
  }

  if (status == HAL_OK)
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d16f      	bne.n	8007f88 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2201      	movs	r2, #1
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f001 f889 	bl	8008fc8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a36      	ldr	r2, [pc, #216]	@ (8007f94 <HAL_TIM_PWM_Start_IT+0x284>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d013      	beq.n	8007ee8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a34      	ldr	r2, [pc, #208]	@ (8007f98 <HAL_TIM_PWM_Start_IT+0x288>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d00e      	beq.n	8007ee8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a33      	ldr	r2, [pc, #204]	@ (8007f9c <HAL_TIM_PWM_Start_IT+0x28c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d009      	beq.n	8007ee8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a31      	ldr	r2, [pc, #196]	@ (8007fa0 <HAL_TIM_PWM_Start_IT+0x290>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d004      	beq.n	8007ee8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a30      	ldr	r2, [pc, #192]	@ (8007fa4 <HAL_TIM_PWM_Start_IT+0x294>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d101      	bne.n	8007eec <HAL_TIM_PWM_Start_IT+0x1dc>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e000      	b.n	8007eee <HAL_TIM_PWM_Start_IT+0x1de>
 8007eec:	2300      	movs	r3, #0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d007      	beq.n	8007f02 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a23      	ldr	r2, [pc, #140]	@ (8007f94 <HAL_TIM_PWM_Start_IT+0x284>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d01d      	beq.n	8007f48 <HAL_TIM_PWM_Start_IT+0x238>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f14:	d018      	beq.n	8007f48 <HAL_TIM_PWM_Start_IT+0x238>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a23      	ldr	r2, [pc, #140]	@ (8007fa8 <HAL_TIM_PWM_Start_IT+0x298>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d013      	beq.n	8007f48 <HAL_TIM_PWM_Start_IT+0x238>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a21      	ldr	r2, [pc, #132]	@ (8007fac <HAL_TIM_PWM_Start_IT+0x29c>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d00e      	beq.n	8007f48 <HAL_TIM_PWM_Start_IT+0x238>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a20      	ldr	r2, [pc, #128]	@ (8007fb0 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d009      	beq.n	8007f48 <HAL_TIM_PWM_Start_IT+0x238>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a17      	ldr	r2, [pc, #92]	@ (8007f98 <HAL_TIM_PWM_Start_IT+0x288>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d004      	beq.n	8007f48 <HAL_TIM_PWM_Start_IT+0x238>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a16      	ldr	r2, [pc, #88]	@ (8007f9c <HAL_TIM_PWM_Start_IT+0x28c>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d115      	bne.n	8007f74 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689a      	ldr	r2, [r3, #8]
 8007f4e:	4b19      	ldr	r3, [pc, #100]	@ (8007fb4 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8007f50:	4013      	ands	r3, r2
 8007f52:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	2b06      	cmp	r3, #6
 8007f58:	d015      	beq.n	8007f86 <HAL_TIM_PWM_Start_IT+0x276>
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f60:	d011      	beq.n	8007f86 <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f042 0201 	orr.w	r2, r2, #1
 8007f70:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f72:	e008      	b.n	8007f86 <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f042 0201 	orr.w	r2, r2, #1
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	e000      	b.n	8007f88 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f86:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	40012c00 	.word	0x40012c00
 8007f98:	40013400 	.word	0x40013400
 8007f9c:	40014000 	.word	0x40014000
 8007fa0:	40014400 	.word	0x40014400
 8007fa4:	40014800 	.word	0x40014800
 8007fa8:	40000400 	.word	0x40000400
 8007fac:	40000800 	.word	0x40000800
 8007fb0:	40000c00 	.word	0x40000c00
 8007fb4:	00010007 	.word	0x00010007

08007fb8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2b0c      	cmp	r3, #12
 8007fca:	d841      	bhi.n	8008050 <HAL_TIM_PWM_Stop_IT+0x98>
 8007fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8007fd4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8007fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd2:	bf00      	nop
 8007fd4:	08008009 	.word	0x08008009
 8007fd8:	08008051 	.word	0x08008051
 8007fdc:	08008051 	.word	0x08008051
 8007fe0:	08008051 	.word	0x08008051
 8007fe4:	0800801b 	.word	0x0800801b
 8007fe8:	08008051 	.word	0x08008051
 8007fec:	08008051 	.word	0x08008051
 8007ff0:	08008051 	.word	0x08008051
 8007ff4:	0800802d 	.word	0x0800802d
 8007ff8:	08008051 	.word	0x08008051
 8007ffc:	08008051 	.word	0x08008051
 8008000:	08008051 	.word	0x08008051
 8008004:	0800803f 	.word	0x0800803f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68da      	ldr	r2, [r3, #12]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f022 0202 	bic.w	r2, r2, #2
 8008016:	60da      	str	r2, [r3, #12]
      break;
 8008018:	e01d      	b.n	8008056 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68da      	ldr	r2, [r3, #12]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f022 0204 	bic.w	r2, r2, #4
 8008028:	60da      	str	r2, [r3, #12]
      break;
 800802a:	e014      	b.n	8008056 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68da      	ldr	r2, [r3, #12]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f022 0208 	bic.w	r2, r2, #8
 800803a:	60da      	str	r2, [r3, #12]
      break;
 800803c:	e00b      	b.n	8008056 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68da      	ldr	r2, [r3, #12]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 0210 	bic.w	r2, r2, #16
 800804c:	60da      	str	r2, [r3, #12]
      break;
 800804e:	e002      	b.n	8008056 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	73fb      	strb	r3, [r7, #15]
      break;
 8008054:	bf00      	nop
  }

  if (status == HAL_OK)
 8008056:	7bfb      	ldrb	r3, [r7, #15]
 8008058:	2b00      	cmp	r3, #0
 800805a:	f040 8081 	bne.w	8008160 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2200      	movs	r2, #0
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	4618      	mov	r0, r3
 8008068:	f000 ffae 	bl	8008fc8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a3e      	ldr	r2, [pc, #248]	@ (800816c <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d013      	beq.n	800809e <HAL_TIM_PWM_Stop_IT+0xe6>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a3d      	ldr	r2, [pc, #244]	@ (8008170 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d00e      	beq.n	800809e <HAL_TIM_PWM_Stop_IT+0xe6>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a3b      	ldr	r2, [pc, #236]	@ (8008174 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d009      	beq.n	800809e <HAL_TIM_PWM_Stop_IT+0xe6>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a3a      	ldr	r2, [pc, #232]	@ (8008178 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d004      	beq.n	800809e <HAL_TIM_PWM_Stop_IT+0xe6>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a38      	ldr	r2, [pc, #224]	@ (800817c <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d101      	bne.n	80080a2 <HAL_TIM_PWM_Stop_IT+0xea>
 800809e:	2301      	movs	r3, #1
 80080a0:	e000      	b.n	80080a4 <HAL_TIM_PWM_Stop_IT+0xec>
 80080a2:	2300      	movs	r3, #0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d017      	beq.n	80080d8 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6a1a      	ldr	r2, [r3, #32]
 80080ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80080b2:	4013      	ands	r3, r2
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10f      	bne.n	80080d8 <HAL_TIM_PWM_Stop_IT+0x120>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6a1a      	ldr	r2, [r3, #32]
 80080be:	f240 4344 	movw	r3, #1092	@ 0x444
 80080c2:	4013      	ands	r3, r2
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d107      	bne.n	80080d8 <HAL_TIM_PWM_Stop_IT+0x120>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80080d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6a1a      	ldr	r2, [r3, #32]
 80080de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80080e2:	4013      	ands	r3, r2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10f      	bne.n	8008108 <HAL_TIM_PWM_Stop_IT+0x150>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6a1a      	ldr	r2, [r3, #32]
 80080ee:	f240 4344 	movw	r3, #1092	@ 0x444
 80080f2:	4013      	ands	r3, r2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d107      	bne.n	8008108 <HAL_TIM_PWM_Stop_IT+0x150>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f022 0201 	bic.w	r2, r2, #1
 8008106:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d104      	bne.n	8008118 <HAL_TIM_PWM_Stop_IT+0x160>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008116:	e023      	b.n	8008160 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	2b04      	cmp	r3, #4
 800811c:	d104      	bne.n	8008128 <HAL_TIM_PWM_Stop_IT+0x170>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008126:	e01b      	b.n	8008160 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2b08      	cmp	r3, #8
 800812c:	d104      	bne.n	8008138 <HAL_TIM_PWM_Stop_IT+0x180>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008136:	e013      	b.n	8008160 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	2b0c      	cmp	r3, #12
 800813c:	d104      	bne.n	8008148 <HAL_TIM_PWM_Stop_IT+0x190>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008146:	e00b      	b.n	8008160 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	2b10      	cmp	r3, #16
 800814c:	d104      	bne.n	8008158 <HAL_TIM_PWM_Stop_IT+0x1a0>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008156:	e003      	b.n	8008160 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8008160:	7bfb      	ldrb	r3, [r7, #15]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	40012c00 	.word	0x40012c00
 8008170:	40013400 	.word	0x40013400
 8008174:	40014000 	.word	0x40014000
 8008178:	40014400 	.word	0x40014400
 800817c:	40014800 	.word	0x40014800

08008180 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d020      	beq.n	80081e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d01b      	beq.n	80081e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f06f 0202 	mvn.w	r2, #2
 80081b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	f003 0303 	and.w	r3, r3, #3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fac7 	bl	800875e <HAL_TIM_IC_CaptureCallback>
 80081d0:	e005      	b.n	80081de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fab9 	bl	800874a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 faca 	bl	8008772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f003 0304 	and.w	r3, r3, #4
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d020      	beq.n	8008230 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f003 0304 	and.w	r3, r3, #4
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d01b      	beq.n	8008230 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f06f 0204 	mvn.w	r2, #4
 8008200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2202      	movs	r2, #2
 8008206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 faa1 	bl	800875e <HAL_TIM_IC_CaptureCallback>
 800821c:	e005      	b.n	800822a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fa93 	bl	800874a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 faa4 	bl	8008772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f003 0308 	and.w	r3, r3, #8
 8008236:	2b00      	cmp	r3, #0
 8008238:	d020      	beq.n	800827c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f003 0308 	and.w	r3, r3, #8
 8008240:	2b00      	cmp	r3, #0
 8008242:	d01b      	beq.n	800827c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f06f 0208 	mvn.w	r2, #8
 800824c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2204      	movs	r2, #4
 8008252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	f003 0303 	and.w	r3, r3, #3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fa7b 	bl	800875e <HAL_TIM_IC_CaptureCallback>
 8008268:	e005      	b.n	8008276 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fa6d 	bl	800874a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fa7e 	bl	8008772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	f003 0310 	and.w	r3, r3, #16
 8008282:	2b00      	cmp	r3, #0
 8008284:	d020      	beq.n	80082c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f003 0310 	and.w	r3, r3, #16
 800828c:	2b00      	cmp	r3, #0
 800828e:	d01b      	beq.n	80082c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f06f 0210 	mvn.w	r2, #16
 8008298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2208      	movs	r2, #8
 800829e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fa55 	bl	800875e <HAL_TIM_IC_CaptureCallback>
 80082b4:	e005      	b.n	80082c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fa47 	bl	800874a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fa58 	bl	8008772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00c      	beq.n	80082ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f003 0301 	and.w	r3, r3, #1
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d007      	beq.n	80082ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f06f 0201 	mvn.w	r2, #1
 80082e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7f9 fb92 	bl	8001a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d104      	bne.n	8008300 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00c      	beq.n	800831a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008306:	2b00      	cmp	r3, #0
 8008308:	d007      	beq.n	800831a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 ff0f 	bl	8009138 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00c      	beq.n	800833e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800832a:	2b00      	cmp	r3, #0
 800832c:	d007      	beq.n	800833e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 ff07 	bl	800914c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00c      	beq.n	8008362 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800834e:	2b00      	cmp	r3, #0
 8008350:	d007      	beq.n	8008362 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800835a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fa12 	bl	8008786 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	f003 0320 	and.w	r3, r3, #32
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00c      	beq.n	8008386 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f003 0320 	and.w	r3, r3, #32
 8008372:	2b00      	cmp	r3, #0
 8008374:	d007      	beq.n	8008386 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f06f 0220 	mvn.w	r2, #32
 800837e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 fecf 	bl	8009124 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008386:	bf00      	nop
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
	...

08008390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d101      	bne.n	80083ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083aa:	2302      	movs	r3, #2
 80083ac:	e0ff      	b.n	80085ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b14      	cmp	r3, #20
 80083ba:	f200 80f0 	bhi.w	800859e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80083be:	a201      	add	r2, pc, #4	@ (adr r2, 80083c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c4:	08008419 	.word	0x08008419
 80083c8:	0800859f 	.word	0x0800859f
 80083cc:	0800859f 	.word	0x0800859f
 80083d0:	0800859f 	.word	0x0800859f
 80083d4:	08008459 	.word	0x08008459
 80083d8:	0800859f 	.word	0x0800859f
 80083dc:	0800859f 	.word	0x0800859f
 80083e0:	0800859f 	.word	0x0800859f
 80083e4:	0800849b 	.word	0x0800849b
 80083e8:	0800859f 	.word	0x0800859f
 80083ec:	0800859f 	.word	0x0800859f
 80083f0:	0800859f 	.word	0x0800859f
 80083f4:	080084db 	.word	0x080084db
 80083f8:	0800859f 	.word	0x0800859f
 80083fc:	0800859f 	.word	0x0800859f
 8008400:	0800859f 	.word	0x0800859f
 8008404:	0800851d 	.word	0x0800851d
 8008408:	0800859f 	.word	0x0800859f
 800840c:	0800859f 	.word	0x0800859f
 8008410:	0800859f 	.word	0x0800859f
 8008414:	0800855d 	.word	0x0800855d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68b9      	ldr	r1, [r7, #8]
 800841e:	4618      	mov	r0, r3
 8008420:	f000 fa62 	bl	80088e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	699a      	ldr	r2, [r3, #24]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f042 0208 	orr.w	r2, r2, #8
 8008432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	699a      	ldr	r2, [r3, #24]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0204 	bic.w	r2, r2, #4
 8008442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6999      	ldr	r1, [r3, #24]
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	691a      	ldr	r2, [r3, #16]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	619a      	str	r2, [r3, #24]
      break;
 8008456:	e0a5      	b.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68b9      	ldr	r1, [r7, #8]
 800845e:	4618      	mov	r0, r3
 8008460:	f000 fad2 	bl	8008a08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	699a      	ldr	r2, [r3, #24]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	699a      	ldr	r2, [r3, #24]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6999      	ldr	r1, [r3, #24]
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	021a      	lsls	r2, r3, #8
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	430a      	orrs	r2, r1
 8008496:	619a      	str	r2, [r3, #24]
      break;
 8008498:	e084      	b.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68b9      	ldr	r1, [r7, #8]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 fb3b 	bl	8008b1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	69da      	ldr	r2, [r3, #28]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f042 0208 	orr.w	r2, r2, #8
 80084b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	69da      	ldr	r2, [r3, #28]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f022 0204 	bic.w	r2, r2, #4
 80084c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	69d9      	ldr	r1, [r3, #28]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	691a      	ldr	r2, [r3, #16]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	430a      	orrs	r2, r1
 80084d6:	61da      	str	r2, [r3, #28]
      break;
 80084d8:	e064      	b.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68b9      	ldr	r1, [r7, #8]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 fba3 	bl	8008c2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	69da      	ldr	r2, [r3, #28]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	69da      	ldr	r2, [r3, #28]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	69d9      	ldr	r1, [r3, #28]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	021a      	lsls	r2, r3, #8
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	61da      	str	r2, [r3, #28]
      break;
 800851a:	e043      	b.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68b9      	ldr	r1, [r7, #8]
 8008522:	4618      	mov	r0, r3
 8008524:	f000 fbec 	bl	8008d00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f042 0208 	orr.w	r2, r2, #8
 8008536:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f022 0204 	bic.w	r2, r2, #4
 8008546:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	691a      	ldr	r2, [r3, #16]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	430a      	orrs	r2, r1
 8008558:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800855a:	e023      	b.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68b9      	ldr	r1, [r7, #8]
 8008562:	4618      	mov	r0, r3
 8008564:	f000 fc30 	bl	8008dc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008576:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008586:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	021a      	lsls	r2, r3, #8
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	430a      	orrs	r2, r1
 800859a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800859c:	e002      	b.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	75fb      	strb	r3, [r7, #23]
      break;
 80085a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop

080085b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d101      	bne.n	80085d4 <HAL_TIM_ConfigClockSource+0x1c>
 80085d0:	2302      	movs	r3, #2
 80085d2:	e0b6      	b.n	8008742 <HAL_TIM_ConfigClockSource+0x18a>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2202      	movs	r2, #2
 80085e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80085f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008610:	d03e      	beq.n	8008690 <HAL_TIM_ConfigClockSource+0xd8>
 8008612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008616:	f200 8087 	bhi.w	8008728 <HAL_TIM_ConfigClockSource+0x170>
 800861a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800861e:	f000 8086 	beq.w	800872e <HAL_TIM_ConfigClockSource+0x176>
 8008622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008626:	d87f      	bhi.n	8008728 <HAL_TIM_ConfigClockSource+0x170>
 8008628:	2b70      	cmp	r3, #112	@ 0x70
 800862a:	d01a      	beq.n	8008662 <HAL_TIM_ConfigClockSource+0xaa>
 800862c:	2b70      	cmp	r3, #112	@ 0x70
 800862e:	d87b      	bhi.n	8008728 <HAL_TIM_ConfigClockSource+0x170>
 8008630:	2b60      	cmp	r3, #96	@ 0x60
 8008632:	d050      	beq.n	80086d6 <HAL_TIM_ConfigClockSource+0x11e>
 8008634:	2b60      	cmp	r3, #96	@ 0x60
 8008636:	d877      	bhi.n	8008728 <HAL_TIM_ConfigClockSource+0x170>
 8008638:	2b50      	cmp	r3, #80	@ 0x50
 800863a:	d03c      	beq.n	80086b6 <HAL_TIM_ConfigClockSource+0xfe>
 800863c:	2b50      	cmp	r3, #80	@ 0x50
 800863e:	d873      	bhi.n	8008728 <HAL_TIM_ConfigClockSource+0x170>
 8008640:	2b40      	cmp	r3, #64	@ 0x40
 8008642:	d058      	beq.n	80086f6 <HAL_TIM_ConfigClockSource+0x13e>
 8008644:	2b40      	cmp	r3, #64	@ 0x40
 8008646:	d86f      	bhi.n	8008728 <HAL_TIM_ConfigClockSource+0x170>
 8008648:	2b30      	cmp	r3, #48	@ 0x30
 800864a:	d064      	beq.n	8008716 <HAL_TIM_ConfigClockSource+0x15e>
 800864c:	2b30      	cmp	r3, #48	@ 0x30
 800864e:	d86b      	bhi.n	8008728 <HAL_TIM_ConfigClockSource+0x170>
 8008650:	2b20      	cmp	r3, #32
 8008652:	d060      	beq.n	8008716 <HAL_TIM_ConfigClockSource+0x15e>
 8008654:	2b20      	cmp	r3, #32
 8008656:	d867      	bhi.n	8008728 <HAL_TIM_ConfigClockSource+0x170>
 8008658:	2b00      	cmp	r3, #0
 800865a:	d05c      	beq.n	8008716 <HAL_TIM_ConfigClockSource+0x15e>
 800865c:	2b10      	cmp	r3, #16
 800865e:	d05a      	beq.n	8008716 <HAL_TIM_ConfigClockSource+0x15e>
 8008660:	e062      	b.n	8008728 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008672:	f000 fc89 	bl	8008f88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008684:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	609a      	str	r2, [r3, #8]
      break;
 800868e:	e04f      	b.n	8008730 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086a0:	f000 fc72 	bl	8008f88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	689a      	ldr	r2, [r3, #8]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086b2:	609a      	str	r2, [r3, #8]
      break;
 80086b4:	e03c      	b.n	8008730 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086c2:	461a      	mov	r2, r3
 80086c4:	f000 fbe6 	bl	8008e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2150      	movs	r1, #80	@ 0x50
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 fc3f 	bl	8008f52 <TIM_ITRx_SetConfig>
      break;
 80086d4:	e02c      	b.n	8008730 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086e2:	461a      	mov	r2, r3
 80086e4:	f000 fc05 	bl	8008ef2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2160      	movs	r1, #96	@ 0x60
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 fc2f 	bl	8008f52 <TIM_ITRx_SetConfig>
      break;
 80086f4:	e01c      	b.n	8008730 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008702:	461a      	mov	r2, r3
 8008704:	f000 fbc6 	bl	8008e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2140      	movs	r1, #64	@ 0x40
 800870e:	4618      	mov	r0, r3
 8008710:	f000 fc1f 	bl	8008f52 <TIM_ITRx_SetConfig>
      break;
 8008714:	e00c      	b.n	8008730 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4619      	mov	r1, r3
 8008720:	4610      	mov	r0, r2
 8008722:	f000 fc16 	bl	8008f52 <TIM_ITRx_SetConfig>
      break;
 8008726:	e003      	b.n	8008730 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	73fb      	strb	r3, [r7, #15]
      break;
 800872c:	e000      	b.n	8008730 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800872e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008740:	7bfb      	ldrb	r3, [r7, #15]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008752:	bf00      	nop
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008766:	bf00      	nop
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008772:	b480      	push	{r7}
 8008774:	b083      	sub	sp, #12
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800877a:	bf00      	nop
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008786:	b480      	push	{r7}
 8008788:	b083      	sub	sp, #12
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
	...

0800879c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a46      	ldr	r2, [pc, #280]	@ (80088c8 <TIM_Base_SetConfig+0x12c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d013      	beq.n	80087dc <TIM_Base_SetConfig+0x40>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087ba:	d00f      	beq.n	80087dc <TIM_Base_SetConfig+0x40>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a43      	ldr	r2, [pc, #268]	@ (80088cc <TIM_Base_SetConfig+0x130>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d00b      	beq.n	80087dc <TIM_Base_SetConfig+0x40>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a42      	ldr	r2, [pc, #264]	@ (80088d0 <TIM_Base_SetConfig+0x134>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d007      	beq.n	80087dc <TIM_Base_SetConfig+0x40>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a41      	ldr	r2, [pc, #260]	@ (80088d4 <TIM_Base_SetConfig+0x138>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d003      	beq.n	80087dc <TIM_Base_SetConfig+0x40>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a40      	ldr	r2, [pc, #256]	@ (80088d8 <TIM_Base_SetConfig+0x13c>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d108      	bne.n	80087ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a35      	ldr	r2, [pc, #212]	@ (80088c8 <TIM_Base_SetConfig+0x12c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d01f      	beq.n	8008836 <TIM_Base_SetConfig+0x9a>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087fc:	d01b      	beq.n	8008836 <TIM_Base_SetConfig+0x9a>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a32      	ldr	r2, [pc, #200]	@ (80088cc <TIM_Base_SetConfig+0x130>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d017      	beq.n	8008836 <TIM_Base_SetConfig+0x9a>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a31      	ldr	r2, [pc, #196]	@ (80088d0 <TIM_Base_SetConfig+0x134>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d013      	beq.n	8008836 <TIM_Base_SetConfig+0x9a>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a30      	ldr	r2, [pc, #192]	@ (80088d4 <TIM_Base_SetConfig+0x138>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d00f      	beq.n	8008836 <TIM_Base_SetConfig+0x9a>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a2f      	ldr	r2, [pc, #188]	@ (80088d8 <TIM_Base_SetConfig+0x13c>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d00b      	beq.n	8008836 <TIM_Base_SetConfig+0x9a>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a2e      	ldr	r2, [pc, #184]	@ (80088dc <TIM_Base_SetConfig+0x140>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d007      	beq.n	8008836 <TIM_Base_SetConfig+0x9a>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a2d      	ldr	r2, [pc, #180]	@ (80088e0 <TIM_Base_SetConfig+0x144>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d003      	beq.n	8008836 <TIM_Base_SetConfig+0x9a>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a2c      	ldr	r2, [pc, #176]	@ (80088e4 <TIM_Base_SetConfig+0x148>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d108      	bne.n	8008848 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800883c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	4313      	orrs	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	4313      	orrs	r3, r2
 8008854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a16      	ldr	r2, [pc, #88]	@ (80088c8 <TIM_Base_SetConfig+0x12c>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d00f      	beq.n	8008894 <TIM_Base_SetConfig+0xf8>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a18      	ldr	r2, [pc, #96]	@ (80088d8 <TIM_Base_SetConfig+0x13c>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d00b      	beq.n	8008894 <TIM_Base_SetConfig+0xf8>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a17      	ldr	r2, [pc, #92]	@ (80088dc <TIM_Base_SetConfig+0x140>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d007      	beq.n	8008894 <TIM_Base_SetConfig+0xf8>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a16      	ldr	r2, [pc, #88]	@ (80088e0 <TIM_Base_SetConfig+0x144>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d003      	beq.n	8008894 <TIM_Base_SetConfig+0xf8>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a15      	ldr	r2, [pc, #84]	@ (80088e4 <TIM_Base_SetConfig+0x148>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d103      	bne.n	800889c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	691a      	ldr	r2, [r3, #16]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d105      	bne.n	80088ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	f023 0201 	bic.w	r2, r3, #1
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	611a      	str	r2, [r3, #16]
  }
}
 80088ba:	bf00      	nop
 80088bc:	3714      	adds	r7, #20
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	40012c00 	.word	0x40012c00
 80088cc:	40000400 	.word	0x40000400
 80088d0:	40000800 	.word	0x40000800
 80088d4:	40000c00 	.word	0x40000c00
 80088d8:	40013400 	.word	0x40013400
 80088dc:	40014000 	.word	0x40014000
 80088e0:	40014400 	.word	0x40014400
 80088e4:	40014800 	.word	0x40014800

080088e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b087      	sub	sp, #28
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	f023 0201 	bic.w	r2, r3, #1
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800891a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f023 0303 	bic.w	r3, r3, #3
 8008922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	4313      	orrs	r3, r2
 800892c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	f023 0302 	bic.w	r3, r3, #2
 8008934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	4313      	orrs	r3, r2
 800893e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a2c      	ldr	r2, [pc, #176]	@ (80089f4 <TIM_OC1_SetConfig+0x10c>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d00f      	beq.n	8008968 <TIM_OC1_SetConfig+0x80>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a2b      	ldr	r2, [pc, #172]	@ (80089f8 <TIM_OC1_SetConfig+0x110>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d00b      	beq.n	8008968 <TIM_OC1_SetConfig+0x80>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a2a      	ldr	r2, [pc, #168]	@ (80089fc <TIM_OC1_SetConfig+0x114>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d007      	beq.n	8008968 <TIM_OC1_SetConfig+0x80>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a29      	ldr	r2, [pc, #164]	@ (8008a00 <TIM_OC1_SetConfig+0x118>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d003      	beq.n	8008968 <TIM_OC1_SetConfig+0x80>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a28      	ldr	r2, [pc, #160]	@ (8008a04 <TIM_OC1_SetConfig+0x11c>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d10c      	bne.n	8008982 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	f023 0308 	bic.w	r3, r3, #8
 800896e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	4313      	orrs	r3, r2
 8008978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f023 0304 	bic.w	r3, r3, #4
 8008980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a1b      	ldr	r2, [pc, #108]	@ (80089f4 <TIM_OC1_SetConfig+0x10c>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d00f      	beq.n	80089aa <TIM_OC1_SetConfig+0xc2>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a1a      	ldr	r2, [pc, #104]	@ (80089f8 <TIM_OC1_SetConfig+0x110>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d00b      	beq.n	80089aa <TIM_OC1_SetConfig+0xc2>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a19      	ldr	r2, [pc, #100]	@ (80089fc <TIM_OC1_SetConfig+0x114>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d007      	beq.n	80089aa <TIM_OC1_SetConfig+0xc2>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a18      	ldr	r2, [pc, #96]	@ (8008a00 <TIM_OC1_SetConfig+0x118>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d003      	beq.n	80089aa <TIM_OC1_SetConfig+0xc2>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a17      	ldr	r2, [pc, #92]	@ (8008a04 <TIM_OC1_SetConfig+0x11c>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d111      	bne.n	80089ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80089b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	621a      	str	r2, [r3, #32]
}
 80089e8:	bf00      	nop
 80089ea:	371c      	adds	r7, #28
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	40012c00 	.word	0x40012c00
 80089f8:	40013400 	.word	0x40013400
 80089fc:	40014000 	.word	0x40014000
 8008a00:	40014400 	.word	0x40014400
 8008a04:	40014800 	.word	0x40014800

08008a08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b087      	sub	sp, #28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a1b      	ldr	r3, [r3, #32]
 8008a1c:	f023 0210 	bic.w	r2, r3, #16
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	021b      	lsls	r3, r3, #8
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	f023 0320 	bic.w	r3, r3, #32
 8008a56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	011b      	lsls	r3, r3, #4
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a28      	ldr	r2, [pc, #160]	@ (8008b08 <TIM_OC2_SetConfig+0x100>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d003      	beq.n	8008a74 <TIM_OC2_SetConfig+0x6c>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a27      	ldr	r2, [pc, #156]	@ (8008b0c <TIM_OC2_SetConfig+0x104>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d10d      	bne.n	8008a90 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	011b      	lsls	r3, r3, #4
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a1d      	ldr	r2, [pc, #116]	@ (8008b08 <TIM_OC2_SetConfig+0x100>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d00f      	beq.n	8008ab8 <TIM_OC2_SetConfig+0xb0>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8008b0c <TIM_OC2_SetConfig+0x104>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d00b      	beq.n	8008ab8 <TIM_OC2_SetConfig+0xb0>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8008b10 <TIM_OC2_SetConfig+0x108>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d007      	beq.n	8008ab8 <TIM_OC2_SetConfig+0xb0>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a1a      	ldr	r2, [pc, #104]	@ (8008b14 <TIM_OC2_SetConfig+0x10c>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d003      	beq.n	8008ab8 <TIM_OC2_SetConfig+0xb0>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a19      	ldr	r2, [pc, #100]	@ (8008b18 <TIM_OC2_SetConfig+0x110>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d113      	bne.n	8008ae0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008abe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	621a      	str	r2, [r3, #32]
}
 8008afa:	bf00      	nop
 8008afc:	371c      	adds	r7, #28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	40012c00 	.word	0x40012c00
 8008b0c:	40013400 	.word	0x40013400
 8008b10:	40014000 	.word	0x40014000
 8008b14:	40014400 	.word	0x40014400
 8008b18:	40014800 	.word	0x40014800

08008b1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a1b      	ldr	r3, [r3, #32]
 8008b30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	69db      	ldr	r3, [r3, #28]
 8008b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f023 0303 	bic.w	r3, r3, #3
 8008b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	021b      	lsls	r3, r3, #8
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a27      	ldr	r2, [pc, #156]	@ (8008c18 <TIM_OC3_SetConfig+0xfc>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d003      	beq.n	8008b86 <TIM_OC3_SetConfig+0x6a>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a26      	ldr	r2, [pc, #152]	@ (8008c1c <TIM_OC3_SetConfig+0x100>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d10d      	bne.n	8008ba2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	021b      	lsls	r3, r3, #8
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8008c18 <TIM_OC3_SetConfig+0xfc>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d00f      	beq.n	8008bca <TIM_OC3_SetConfig+0xae>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a1b      	ldr	r2, [pc, #108]	@ (8008c1c <TIM_OC3_SetConfig+0x100>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d00b      	beq.n	8008bca <TIM_OC3_SetConfig+0xae>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8008c20 <TIM_OC3_SetConfig+0x104>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d007      	beq.n	8008bca <TIM_OC3_SetConfig+0xae>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a19      	ldr	r2, [pc, #100]	@ (8008c24 <TIM_OC3_SetConfig+0x108>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d003      	beq.n	8008bca <TIM_OC3_SetConfig+0xae>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a18      	ldr	r2, [pc, #96]	@ (8008c28 <TIM_OC3_SetConfig+0x10c>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d113      	bne.n	8008bf2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	011b      	lsls	r3, r3, #4
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	011b      	lsls	r3, r3, #4
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	621a      	str	r2, [r3, #32]
}
 8008c0c:	bf00      	nop
 8008c0e:	371c      	adds	r7, #28
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	40012c00 	.word	0x40012c00
 8008c1c:	40013400 	.word	0x40013400
 8008c20:	40014000 	.word	0x40014000
 8008c24:	40014400 	.word	0x40014400
 8008c28:	40014800 	.word	0x40014800

08008c2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b087      	sub	sp, #28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6a1b      	ldr	r3, [r3, #32]
 8008c40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	021b      	lsls	r3, r3, #8
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	031b      	lsls	r3, r3, #12
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a18      	ldr	r2, [pc, #96]	@ (8008cec <TIM_OC4_SetConfig+0xc0>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d00f      	beq.n	8008cb0 <TIM_OC4_SetConfig+0x84>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a17      	ldr	r2, [pc, #92]	@ (8008cf0 <TIM_OC4_SetConfig+0xc4>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d00b      	beq.n	8008cb0 <TIM_OC4_SetConfig+0x84>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a16      	ldr	r2, [pc, #88]	@ (8008cf4 <TIM_OC4_SetConfig+0xc8>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d007      	beq.n	8008cb0 <TIM_OC4_SetConfig+0x84>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a15      	ldr	r2, [pc, #84]	@ (8008cf8 <TIM_OC4_SetConfig+0xcc>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d003      	beq.n	8008cb0 <TIM_OC4_SetConfig+0x84>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a14      	ldr	r2, [pc, #80]	@ (8008cfc <TIM_OC4_SetConfig+0xd0>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d109      	bne.n	8008cc4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	019b      	lsls	r3, r3, #6
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	621a      	str	r2, [r3, #32]
}
 8008cde:	bf00      	nop
 8008ce0:	371c      	adds	r7, #28
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	40012c00 	.word	0x40012c00
 8008cf0:	40013400 	.word	0x40013400
 8008cf4:	40014000 	.word	0x40014000
 8008cf8:	40014400 	.word	0x40014400
 8008cfc:	40014800 	.word	0x40014800

08008d00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b087      	sub	sp, #28
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a1b      	ldr	r3, [r3, #32]
 8008d14:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008d44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	041b      	lsls	r3, r3, #16
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a17      	ldr	r2, [pc, #92]	@ (8008db4 <TIM_OC5_SetConfig+0xb4>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d00f      	beq.n	8008d7a <TIM_OC5_SetConfig+0x7a>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a16      	ldr	r2, [pc, #88]	@ (8008db8 <TIM_OC5_SetConfig+0xb8>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d00b      	beq.n	8008d7a <TIM_OC5_SetConfig+0x7a>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a15      	ldr	r2, [pc, #84]	@ (8008dbc <TIM_OC5_SetConfig+0xbc>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d007      	beq.n	8008d7a <TIM_OC5_SetConfig+0x7a>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a14      	ldr	r2, [pc, #80]	@ (8008dc0 <TIM_OC5_SetConfig+0xc0>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d003      	beq.n	8008d7a <TIM_OC5_SetConfig+0x7a>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a13      	ldr	r2, [pc, #76]	@ (8008dc4 <TIM_OC5_SetConfig+0xc4>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d109      	bne.n	8008d8e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	021b      	lsls	r3, r3, #8
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	621a      	str	r2, [r3, #32]
}
 8008da8:	bf00      	nop
 8008daa:	371c      	adds	r7, #28
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	40012c00 	.word	0x40012c00
 8008db8:	40013400 	.word	0x40013400
 8008dbc:	40014000 	.word	0x40014000
 8008dc0:	40014400 	.word	0x40014400
 8008dc4:	40014800 	.word	0x40014800

08008dc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b087      	sub	sp, #28
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a1b      	ldr	r3, [r3, #32]
 8008ddc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	021b      	lsls	r3, r3, #8
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	051b      	lsls	r3, r3, #20
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a18      	ldr	r2, [pc, #96]	@ (8008e80 <TIM_OC6_SetConfig+0xb8>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d00f      	beq.n	8008e44 <TIM_OC6_SetConfig+0x7c>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a17      	ldr	r2, [pc, #92]	@ (8008e84 <TIM_OC6_SetConfig+0xbc>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d00b      	beq.n	8008e44 <TIM_OC6_SetConfig+0x7c>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a16      	ldr	r2, [pc, #88]	@ (8008e88 <TIM_OC6_SetConfig+0xc0>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d007      	beq.n	8008e44 <TIM_OC6_SetConfig+0x7c>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a15      	ldr	r2, [pc, #84]	@ (8008e8c <TIM_OC6_SetConfig+0xc4>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d003      	beq.n	8008e44 <TIM_OC6_SetConfig+0x7c>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a14      	ldr	r2, [pc, #80]	@ (8008e90 <TIM_OC6_SetConfig+0xc8>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d109      	bne.n	8008e58 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	695b      	ldr	r3, [r3, #20]
 8008e50:	029b      	lsls	r3, r3, #10
 8008e52:	697a      	ldr	r2, [r7, #20]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	621a      	str	r2, [r3, #32]
}
 8008e72:	bf00      	nop
 8008e74:	371c      	adds	r7, #28
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	40012c00 	.word	0x40012c00
 8008e84:	40013400 	.word	0x40013400
 8008e88:	40014000 	.word	0x40014000
 8008e8c:	40014400 	.word	0x40014400
 8008e90:	40014800 	.word	0x40014800

08008e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6a1b      	ldr	r3, [r3, #32]
 8008ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
 8008eaa:	f023 0201 	bic.w	r2, r3, #1
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	699b      	ldr	r3, [r3, #24]
 8008eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	011b      	lsls	r3, r3, #4
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	f023 030a 	bic.w	r3, r3, #10
 8008ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	621a      	str	r2, [r3, #32]
}
 8008ee6:	bf00      	nop
 8008ee8:	371c      	adds	r7, #28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr

08008ef2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b087      	sub	sp, #28
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	60f8      	str	r0, [r7, #12]
 8008efa:	60b9      	str	r1, [r7, #8]
 8008efc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6a1b      	ldr	r3, [r3, #32]
 8008f08:	f023 0210 	bic.w	r2, r3, #16
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	031b      	lsls	r3, r3, #12
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008f2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	011b      	lsls	r3, r3, #4
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	621a      	str	r2, [r3, #32]
}
 8008f46:	bf00      	nop
 8008f48:	371c      	adds	r7, #28
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b085      	sub	sp, #20
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f6a:	683a      	ldr	r2, [r7, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	f043 0307 	orr.w	r3, r3, #7
 8008f74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	609a      	str	r2, [r3, #8]
}
 8008f7c:	bf00      	nop
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b087      	sub	sp, #28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
 8008f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	021a      	lsls	r2, r3, #8
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	431a      	orrs	r2, r3
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	697a      	ldr	r2, [r7, #20]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	609a      	str	r2, [r3, #8]
}
 8008fbc:	bf00      	nop
 8008fbe:	371c      	adds	r7, #28
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b087      	sub	sp, #28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	f003 031f 	and.w	r3, r3, #31
 8008fda:	2201      	movs	r2, #1
 8008fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6a1a      	ldr	r2, [r3, #32]
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	43db      	mvns	r3, r3
 8008fea:	401a      	ands	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6a1a      	ldr	r2, [r3, #32]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	f003 031f 	and.w	r3, r3, #31
 8008ffa:	6879      	ldr	r1, [r7, #4]
 8008ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8009000:	431a      	orrs	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	621a      	str	r2, [r3, #32]
}
 8009006:	bf00      	nop
 8009008:	371c      	adds	r7, #28
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
	...

08009014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009024:	2b01      	cmp	r3, #1
 8009026:	d101      	bne.n	800902c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009028:	2302      	movs	r3, #2
 800902a:	e068      	b.n	80090fe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2202      	movs	r2, #2
 8009038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a2e      	ldr	r2, [pc, #184]	@ (800910c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d004      	beq.n	8009060 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a2d      	ldr	r2, [pc, #180]	@ (8009110 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d108      	bne.n	8009072 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009066:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	4313      	orrs	r3, r2
 8009070:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009078:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	4313      	orrs	r3, r2
 8009082:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a1e      	ldr	r2, [pc, #120]	@ (800910c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d01d      	beq.n	80090d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800909e:	d018      	beq.n	80090d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a1b      	ldr	r2, [pc, #108]	@ (8009114 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d013      	beq.n	80090d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a1a      	ldr	r2, [pc, #104]	@ (8009118 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d00e      	beq.n	80090d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a18      	ldr	r2, [pc, #96]	@ (800911c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d009      	beq.n	80090d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a13      	ldr	r2, [pc, #76]	@ (8009110 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d004      	beq.n	80090d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a14      	ldr	r2, [pc, #80]	@ (8009120 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d10c      	bne.n	80090ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3714      	adds	r7, #20
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	40012c00 	.word	0x40012c00
 8009110:	40013400 	.word	0x40013400
 8009114:	40000400 	.word	0x40000400
 8009118:	40000800 	.word	0x40000800
 800911c:	40000c00 	.word	0x40000c00
 8009120:	40014000 	.word	0x40014000

08009124 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d101      	bne.n	8009172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e040      	b.n	80091f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009176:	2b00      	cmp	r3, #0
 8009178:	d106      	bne.n	8009188 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7f9 f868 	bl	8002258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2224      	movs	r2, #36	@ 0x24
 800918c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f022 0201 	bic.w	r2, r2, #1
 800919c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d002      	beq.n	80091ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fb6a 	bl	8009880 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f8af 	bl	8009310 <UART_SetConfig>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d101      	bne.n	80091bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	e01b      	b.n	80091f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80091ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689a      	ldr	r2, [r3, #8]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f042 0201 	orr.w	r2, r2, #1
 80091ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fbe9 	bl	80099c4 <UART_CheckIdleState>
 80091f2:	4603      	mov	r3, r0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08a      	sub	sp, #40	@ 0x28
 8009200:	af02      	add	r7, sp, #8
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	603b      	str	r3, [r7, #0]
 8009208:	4613      	mov	r3, r2
 800920a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009210:	2b20      	cmp	r3, #32
 8009212:	d177      	bne.n	8009304 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <HAL_UART_Transmit+0x24>
 800921a:	88fb      	ldrh	r3, [r7, #6]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d101      	bne.n	8009224 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e070      	b.n	8009306 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2221      	movs	r2, #33	@ 0x21
 8009230:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009232:	f7f9 fe7d 	bl	8002f30 <HAL_GetTick>
 8009236:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	88fa      	ldrh	r2, [r7, #6]
 800923c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	88fa      	ldrh	r2, [r7, #6]
 8009244:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009250:	d108      	bne.n	8009264 <HAL_UART_Transmit+0x68>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d104      	bne.n	8009264 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800925a:	2300      	movs	r3, #0
 800925c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	61bb      	str	r3, [r7, #24]
 8009262:	e003      	b.n	800926c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009268:	2300      	movs	r3, #0
 800926a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800926c:	e02f      	b.n	80092ce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	2200      	movs	r2, #0
 8009276:	2180      	movs	r1, #128	@ 0x80
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 fc4b 	bl	8009b14 <UART_WaitOnFlagUntilTimeout>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d004      	beq.n	800928e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2220      	movs	r2, #32
 8009288:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800928a:	2303      	movs	r3, #3
 800928c:	e03b      	b.n	8009306 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10b      	bne.n	80092ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	881a      	ldrh	r2, [r3, #0]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092a0:	b292      	uxth	r2, r2
 80092a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	3302      	adds	r3, #2
 80092a8:	61bb      	str	r3, [r7, #24]
 80092aa:	e007      	b.n	80092bc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	781a      	ldrb	r2, [r3, #0]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	3301      	adds	r3, #1
 80092ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	3b01      	subs	r3, #1
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1c9      	bne.n	800926e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	2200      	movs	r2, #0
 80092e2:	2140      	movs	r1, #64	@ 0x40
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f000 fc15 	bl	8009b14 <UART_WaitOnFlagUntilTimeout>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d004      	beq.n	80092fa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2220      	movs	r2, #32
 80092f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e005      	b.n	8009306 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2220      	movs	r2, #32
 80092fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	e000      	b.n	8009306 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009304:	2302      	movs	r3, #2
  }
}
 8009306:	4618      	mov	r0, r3
 8009308:	3720      	adds	r7, #32
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
	...

08009310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009314:	b08a      	sub	sp, #40	@ 0x28
 8009316:	af00      	add	r7, sp, #0
 8009318:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800931a:	2300      	movs	r3, #0
 800931c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	689a      	ldr	r2, [r3, #8]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	431a      	orrs	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	431a      	orrs	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	4313      	orrs	r3, r2
 8009336:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	4ba4      	ldr	r3, [pc, #656]	@ (80095d0 <UART_SetConfig+0x2c0>)
 8009340:	4013      	ands	r3, r2
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	6812      	ldr	r2, [r2, #0]
 8009346:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009348:	430b      	orrs	r3, r1
 800934a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	68da      	ldr	r2, [r3, #12]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	430a      	orrs	r2, r1
 8009360:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a99      	ldr	r2, [pc, #612]	@ (80095d4 <UART_SetConfig+0x2c4>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d004      	beq.n	800937c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009378:	4313      	orrs	r3, r2
 800937a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800938c:	430a      	orrs	r2, r1
 800938e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a90      	ldr	r2, [pc, #576]	@ (80095d8 <UART_SetConfig+0x2c8>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d126      	bne.n	80093e8 <UART_SetConfig+0xd8>
 800939a:	4b90      	ldr	r3, [pc, #576]	@ (80095dc <UART_SetConfig+0x2cc>)
 800939c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093a0:	f003 0303 	and.w	r3, r3, #3
 80093a4:	2b03      	cmp	r3, #3
 80093a6:	d81b      	bhi.n	80093e0 <UART_SetConfig+0xd0>
 80093a8:	a201      	add	r2, pc, #4	@ (adr r2, 80093b0 <UART_SetConfig+0xa0>)
 80093aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ae:	bf00      	nop
 80093b0:	080093c1 	.word	0x080093c1
 80093b4:	080093d1 	.word	0x080093d1
 80093b8:	080093c9 	.word	0x080093c9
 80093bc:	080093d9 	.word	0x080093d9
 80093c0:	2301      	movs	r3, #1
 80093c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093c6:	e116      	b.n	80095f6 <UART_SetConfig+0x2e6>
 80093c8:	2302      	movs	r3, #2
 80093ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093ce:	e112      	b.n	80095f6 <UART_SetConfig+0x2e6>
 80093d0:	2304      	movs	r3, #4
 80093d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093d6:	e10e      	b.n	80095f6 <UART_SetConfig+0x2e6>
 80093d8:	2308      	movs	r3, #8
 80093da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093de:	e10a      	b.n	80095f6 <UART_SetConfig+0x2e6>
 80093e0:	2310      	movs	r3, #16
 80093e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093e6:	e106      	b.n	80095f6 <UART_SetConfig+0x2e6>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a7c      	ldr	r2, [pc, #496]	@ (80095e0 <UART_SetConfig+0x2d0>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d138      	bne.n	8009464 <UART_SetConfig+0x154>
 80093f2:	4b7a      	ldr	r3, [pc, #488]	@ (80095dc <UART_SetConfig+0x2cc>)
 80093f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093f8:	f003 030c 	and.w	r3, r3, #12
 80093fc:	2b0c      	cmp	r3, #12
 80093fe:	d82d      	bhi.n	800945c <UART_SetConfig+0x14c>
 8009400:	a201      	add	r2, pc, #4	@ (adr r2, 8009408 <UART_SetConfig+0xf8>)
 8009402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009406:	bf00      	nop
 8009408:	0800943d 	.word	0x0800943d
 800940c:	0800945d 	.word	0x0800945d
 8009410:	0800945d 	.word	0x0800945d
 8009414:	0800945d 	.word	0x0800945d
 8009418:	0800944d 	.word	0x0800944d
 800941c:	0800945d 	.word	0x0800945d
 8009420:	0800945d 	.word	0x0800945d
 8009424:	0800945d 	.word	0x0800945d
 8009428:	08009445 	.word	0x08009445
 800942c:	0800945d 	.word	0x0800945d
 8009430:	0800945d 	.word	0x0800945d
 8009434:	0800945d 	.word	0x0800945d
 8009438:	08009455 	.word	0x08009455
 800943c:	2300      	movs	r3, #0
 800943e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009442:	e0d8      	b.n	80095f6 <UART_SetConfig+0x2e6>
 8009444:	2302      	movs	r3, #2
 8009446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800944a:	e0d4      	b.n	80095f6 <UART_SetConfig+0x2e6>
 800944c:	2304      	movs	r3, #4
 800944e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009452:	e0d0      	b.n	80095f6 <UART_SetConfig+0x2e6>
 8009454:	2308      	movs	r3, #8
 8009456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800945a:	e0cc      	b.n	80095f6 <UART_SetConfig+0x2e6>
 800945c:	2310      	movs	r3, #16
 800945e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009462:	e0c8      	b.n	80095f6 <UART_SetConfig+0x2e6>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a5e      	ldr	r2, [pc, #376]	@ (80095e4 <UART_SetConfig+0x2d4>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d125      	bne.n	80094ba <UART_SetConfig+0x1aa>
 800946e:	4b5b      	ldr	r3, [pc, #364]	@ (80095dc <UART_SetConfig+0x2cc>)
 8009470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009474:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009478:	2b30      	cmp	r3, #48	@ 0x30
 800947a:	d016      	beq.n	80094aa <UART_SetConfig+0x19a>
 800947c:	2b30      	cmp	r3, #48	@ 0x30
 800947e:	d818      	bhi.n	80094b2 <UART_SetConfig+0x1a2>
 8009480:	2b20      	cmp	r3, #32
 8009482:	d00a      	beq.n	800949a <UART_SetConfig+0x18a>
 8009484:	2b20      	cmp	r3, #32
 8009486:	d814      	bhi.n	80094b2 <UART_SetConfig+0x1a2>
 8009488:	2b00      	cmp	r3, #0
 800948a:	d002      	beq.n	8009492 <UART_SetConfig+0x182>
 800948c:	2b10      	cmp	r3, #16
 800948e:	d008      	beq.n	80094a2 <UART_SetConfig+0x192>
 8009490:	e00f      	b.n	80094b2 <UART_SetConfig+0x1a2>
 8009492:	2300      	movs	r3, #0
 8009494:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009498:	e0ad      	b.n	80095f6 <UART_SetConfig+0x2e6>
 800949a:	2302      	movs	r3, #2
 800949c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094a0:	e0a9      	b.n	80095f6 <UART_SetConfig+0x2e6>
 80094a2:	2304      	movs	r3, #4
 80094a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094a8:	e0a5      	b.n	80095f6 <UART_SetConfig+0x2e6>
 80094aa:	2308      	movs	r3, #8
 80094ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094b0:	e0a1      	b.n	80095f6 <UART_SetConfig+0x2e6>
 80094b2:	2310      	movs	r3, #16
 80094b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094b8:	e09d      	b.n	80095f6 <UART_SetConfig+0x2e6>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a4a      	ldr	r2, [pc, #296]	@ (80095e8 <UART_SetConfig+0x2d8>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d125      	bne.n	8009510 <UART_SetConfig+0x200>
 80094c4:	4b45      	ldr	r3, [pc, #276]	@ (80095dc <UART_SetConfig+0x2cc>)
 80094c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80094ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80094d0:	d016      	beq.n	8009500 <UART_SetConfig+0x1f0>
 80094d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80094d4:	d818      	bhi.n	8009508 <UART_SetConfig+0x1f8>
 80094d6:	2b80      	cmp	r3, #128	@ 0x80
 80094d8:	d00a      	beq.n	80094f0 <UART_SetConfig+0x1e0>
 80094da:	2b80      	cmp	r3, #128	@ 0x80
 80094dc:	d814      	bhi.n	8009508 <UART_SetConfig+0x1f8>
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d002      	beq.n	80094e8 <UART_SetConfig+0x1d8>
 80094e2:	2b40      	cmp	r3, #64	@ 0x40
 80094e4:	d008      	beq.n	80094f8 <UART_SetConfig+0x1e8>
 80094e6:	e00f      	b.n	8009508 <UART_SetConfig+0x1f8>
 80094e8:	2300      	movs	r3, #0
 80094ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094ee:	e082      	b.n	80095f6 <UART_SetConfig+0x2e6>
 80094f0:	2302      	movs	r3, #2
 80094f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094f6:	e07e      	b.n	80095f6 <UART_SetConfig+0x2e6>
 80094f8:	2304      	movs	r3, #4
 80094fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094fe:	e07a      	b.n	80095f6 <UART_SetConfig+0x2e6>
 8009500:	2308      	movs	r3, #8
 8009502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009506:	e076      	b.n	80095f6 <UART_SetConfig+0x2e6>
 8009508:	2310      	movs	r3, #16
 800950a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800950e:	e072      	b.n	80095f6 <UART_SetConfig+0x2e6>
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a35      	ldr	r2, [pc, #212]	@ (80095ec <UART_SetConfig+0x2dc>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d12a      	bne.n	8009570 <UART_SetConfig+0x260>
 800951a:	4b30      	ldr	r3, [pc, #192]	@ (80095dc <UART_SetConfig+0x2cc>)
 800951c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009520:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009524:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009528:	d01a      	beq.n	8009560 <UART_SetConfig+0x250>
 800952a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800952e:	d81b      	bhi.n	8009568 <UART_SetConfig+0x258>
 8009530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009534:	d00c      	beq.n	8009550 <UART_SetConfig+0x240>
 8009536:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800953a:	d815      	bhi.n	8009568 <UART_SetConfig+0x258>
 800953c:	2b00      	cmp	r3, #0
 800953e:	d003      	beq.n	8009548 <UART_SetConfig+0x238>
 8009540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009544:	d008      	beq.n	8009558 <UART_SetConfig+0x248>
 8009546:	e00f      	b.n	8009568 <UART_SetConfig+0x258>
 8009548:	2300      	movs	r3, #0
 800954a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800954e:	e052      	b.n	80095f6 <UART_SetConfig+0x2e6>
 8009550:	2302      	movs	r3, #2
 8009552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009556:	e04e      	b.n	80095f6 <UART_SetConfig+0x2e6>
 8009558:	2304      	movs	r3, #4
 800955a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800955e:	e04a      	b.n	80095f6 <UART_SetConfig+0x2e6>
 8009560:	2308      	movs	r3, #8
 8009562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009566:	e046      	b.n	80095f6 <UART_SetConfig+0x2e6>
 8009568:	2310      	movs	r3, #16
 800956a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800956e:	e042      	b.n	80095f6 <UART_SetConfig+0x2e6>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a17      	ldr	r2, [pc, #92]	@ (80095d4 <UART_SetConfig+0x2c4>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d13a      	bne.n	80095f0 <UART_SetConfig+0x2e0>
 800957a:	4b18      	ldr	r3, [pc, #96]	@ (80095dc <UART_SetConfig+0x2cc>)
 800957c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009580:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009584:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009588:	d01a      	beq.n	80095c0 <UART_SetConfig+0x2b0>
 800958a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800958e:	d81b      	bhi.n	80095c8 <UART_SetConfig+0x2b8>
 8009590:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009594:	d00c      	beq.n	80095b0 <UART_SetConfig+0x2a0>
 8009596:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800959a:	d815      	bhi.n	80095c8 <UART_SetConfig+0x2b8>
 800959c:	2b00      	cmp	r3, #0
 800959e:	d003      	beq.n	80095a8 <UART_SetConfig+0x298>
 80095a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095a4:	d008      	beq.n	80095b8 <UART_SetConfig+0x2a8>
 80095a6:	e00f      	b.n	80095c8 <UART_SetConfig+0x2b8>
 80095a8:	2300      	movs	r3, #0
 80095aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80095ae:	e022      	b.n	80095f6 <UART_SetConfig+0x2e6>
 80095b0:	2302      	movs	r3, #2
 80095b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80095b6:	e01e      	b.n	80095f6 <UART_SetConfig+0x2e6>
 80095b8:	2304      	movs	r3, #4
 80095ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80095be:	e01a      	b.n	80095f6 <UART_SetConfig+0x2e6>
 80095c0:	2308      	movs	r3, #8
 80095c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80095c6:	e016      	b.n	80095f6 <UART_SetConfig+0x2e6>
 80095c8:	2310      	movs	r3, #16
 80095ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80095ce:	e012      	b.n	80095f6 <UART_SetConfig+0x2e6>
 80095d0:	efff69f3 	.word	0xefff69f3
 80095d4:	40008000 	.word	0x40008000
 80095d8:	40013800 	.word	0x40013800
 80095dc:	40021000 	.word	0x40021000
 80095e0:	40004400 	.word	0x40004400
 80095e4:	40004800 	.word	0x40004800
 80095e8:	40004c00 	.word	0x40004c00
 80095ec:	40005000 	.word	0x40005000
 80095f0:	2310      	movs	r3, #16
 80095f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a9f      	ldr	r2, [pc, #636]	@ (8009878 <UART_SetConfig+0x568>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d17a      	bne.n	80096f6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009600:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009604:	2b08      	cmp	r3, #8
 8009606:	d824      	bhi.n	8009652 <UART_SetConfig+0x342>
 8009608:	a201      	add	r2, pc, #4	@ (adr r2, 8009610 <UART_SetConfig+0x300>)
 800960a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960e:	bf00      	nop
 8009610:	08009635 	.word	0x08009635
 8009614:	08009653 	.word	0x08009653
 8009618:	0800963d 	.word	0x0800963d
 800961c:	08009653 	.word	0x08009653
 8009620:	08009643 	.word	0x08009643
 8009624:	08009653 	.word	0x08009653
 8009628:	08009653 	.word	0x08009653
 800962c:	08009653 	.word	0x08009653
 8009630:	0800964b 	.word	0x0800964b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009634:	f7fd fc1a 	bl	8006e6c <HAL_RCC_GetPCLK1Freq>
 8009638:	61f8      	str	r0, [r7, #28]
        break;
 800963a:	e010      	b.n	800965e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800963c:	4b8f      	ldr	r3, [pc, #572]	@ (800987c <UART_SetConfig+0x56c>)
 800963e:	61fb      	str	r3, [r7, #28]
        break;
 8009640:	e00d      	b.n	800965e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009642:	f7fd fb7b 	bl	8006d3c <HAL_RCC_GetSysClockFreq>
 8009646:	61f8      	str	r0, [r7, #28]
        break;
 8009648:	e009      	b.n	800965e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800964a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800964e:	61fb      	str	r3, [r7, #28]
        break;
 8009650:	e005      	b.n	800965e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009652:	2300      	movs	r3, #0
 8009654:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800965c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	2b00      	cmp	r3, #0
 8009662:	f000 80fb 	beq.w	800985c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	685a      	ldr	r2, [r3, #4]
 800966a:	4613      	mov	r3, r2
 800966c:	005b      	lsls	r3, r3, #1
 800966e:	4413      	add	r3, r2
 8009670:	69fa      	ldr	r2, [r7, #28]
 8009672:	429a      	cmp	r2, r3
 8009674:	d305      	bcc.n	8009682 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800967c:	69fa      	ldr	r2, [r7, #28]
 800967e:	429a      	cmp	r2, r3
 8009680:	d903      	bls.n	800968a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009688:	e0e8      	b.n	800985c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	2200      	movs	r2, #0
 800968e:	461c      	mov	r4, r3
 8009690:	4615      	mov	r5, r2
 8009692:	f04f 0200 	mov.w	r2, #0
 8009696:	f04f 0300 	mov.w	r3, #0
 800969a:	022b      	lsls	r3, r5, #8
 800969c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80096a0:	0222      	lsls	r2, r4, #8
 80096a2:	68f9      	ldr	r1, [r7, #12]
 80096a4:	6849      	ldr	r1, [r1, #4]
 80096a6:	0849      	lsrs	r1, r1, #1
 80096a8:	2000      	movs	r0, #0
 80096aa:	4688      	mov	r8, r1
 80096ac:	4681      	mov	r9, r0
 80096ae:	eb12 0a08 	adds.w	sl, r2, r8
 80096b2:	eb43 0b09 	adc.w	fp, r3, r9
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	603b      	str	r3, [r7, #0]
 80096be:	607a      	str	r2, [r7, #4]
 80096c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096c4:	4650      	mov	r0, sl
 80096c6:	4659      	mov	r1, fp
 80096c8:	f7f7 fade 	bl	8000c88 <__aeabi_uldivmod>
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	4613      	mov	r3, r2
 80096d2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096da:	d308      	bcc.n	80096ee <UART_SetConfig+0x3de>
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096e2:	d204      	bcs.n	80096ee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	69ba      	ldr	r2, [r7, #24]
 80096ea:	60da      	str	r2, [r3, #12]
 80096ec:	e0b6      	b.n	800985c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80096f4:	e0b2      	b.n	800985c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	69db      	ldr	r3, [r3, #28]
 80096fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096fe:	d15e      	bne.n	80097be <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009700:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009704:	2b08      	cmp	r3, #8
 8009706:	d828      	bhi.n	800975a <UART_SetConfig+0x44a>
 8009708:	a201      	add	r2, pc, #4	@ (adr r2, 8009710 <UART_SetConfig+0x400>)
 800970a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970e:	bf00      	nop
 8009710:	08009735 	.word	0x08009735
 8009714:	0800973d 	.word	0x0800973d
 8009718:	08009745 	.word	0x08009745
 800971c:	0800975b 	.word	0x0800975b
 8009720:	0800974b 	.word	0x0800974b
 8009724:	0800975b 	.word	0x0800975b
 8009728:	0800975b 	.word	0x0800975b
 800972c:	0800975b 	.word	0x0800975b
 8009730:	08009753 	.word	0x08009753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009734:	f7fd fb9a 	bl	8006e6c <HAL_RCC_GetPCLK1Freq>
 8009738:	61f8      	str	r0, [r7, #28]
        break;
 800973a:	e014      	b.n	8009766 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800973c:	f7fd fbac 	bl	8006e98 <HAL_RCC_GetPCLK2Freq>
 8009740:	61f8      	str	r0, [r7, #28]
        break;
 8009742:	e010      	b.n	8009766 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009744:	4b4d      	ldr	r3, [pc, #308]	@ (800987c <UART_SetConfig+0x56c>)
 8009746:	61fb      	str	r3, [r7, #28]
        break;
 8009748:	e00d      	b.n	8009766 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800974a:	f7fd faf7 	bl	8006d3c <HAL_RCC_GetSysClockFreq>
 800974e:	61f8      	str	r0, [r7, #28]
        break;
 8009750:	e009      	b.n	8009766 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009756:	61fb      	str	r3, [r7, #28]
        break;
 8009758:	e005      	b.n	8009766 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800975a:	2300      	movs	r3, #0
 800975c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009764:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d077      	beq.n	800985c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	005a      	lsls	r2, r3, #1
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	085b      	lsrs	r3, r3, #1
 8009776:	441a      	add	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009780:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	2b0f      	cmp	r3, #15
 8009786:	d916      	bls.n	80097b6 <UART_SetConfig+0x4a6>
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800978e:	d212      	bcs.n	80097b6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	b29b      	uxth	r3, r3
 8009794:	f023 030f 	bic.w	r3, r3, #15
 8009798:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	085b      	lsrs	r3, r3, #1
 800979e:	b29b      	uxth	r3, r3
 80097a0:	f003 0307 	and.w	r3, r3, #7
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	8afb      	ldrh	r3, [r7, #22]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	8afa      	ldrh	r2, [r7, #22]
 80097b2:	60da      	str	r2, [r3, #12]
 80097b4:	e052      	b.n	800985c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80097bc:	e04e      	b.n	800985c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80097be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80097c2:	2b08      	cmp	r3, #8
 80097c4:	d827      	bhi.n	8009816 <UART_SetConfig+0x506>
 80097c6:	a201      	add	r2, pc, #4	@ (adr r2, 80097cc <UART_SetConfig+0x4bc>)
 80097c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097cc:	080097f1 	.word	0x080097f1
 80097d0:	080097f9 	.word	0x080097f9
 80097d4:	08009801 	.word	0x08009801
 80097d8:	08009817 	.word	0x08009817
 80097dc:	08009807 	.word	0x08009807
 80097e0:	08009817 	.word	0x08009817
 80097e4:	08009817 	.word	0x08009817
 80097e8:	08009817 	.word	0x08009817
 80097ec:	0800980f 	.word	0x0800980f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097f0:	f7fd fb3c 	bl	8006e6c <HAL_RCC_GetPCLK1Freq>
 80097f4:	61f8      	str	r0, [r7, #28]
        break;
 80097f6:	e014      	b.n	8009822 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097f8:	f7fd fb4e 	bl	8006e98 <HAL_RCC_GetPCLK2Freq>
 80097fc:	61f8      	str	r0, [r7, #28]
        break;
 80097fe:	e010      	b.n	8009822 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009800:	4b1e      	ldr	r3, [pc, #120]	@ (800987c <UART_SetConfig+0x56c>)
 8009802:	61fb      	str	r3, [r7, #28]
        break;
 8009804:	e00d      	b.n	8009822 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009806:	f7fd fa99 	bl	8006d3c <HAL_RCC_GetSysClockFreq>
 800980a:	61f8      	str	r0, [r7, #28]
        break;
 800980c:	e009      	b.n	8009822 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800980e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009812:	61fb      	str	r3, [r7, #28]
        break;
 8009814:	e005      	b.n	8009822 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009816:	2300      	movs	r3, #0
 8009818:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009820:	bf00      	nop
    }

    if (pclk != 0U)
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d019      	beq.n	800985c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	085a      	lsrs	r2, r3, #1
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	441a      	add	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	fbb2 f3f3 	udiv	r3, r2, r3
 800983a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	2b0f      	cmp	r3, #15
 8009840:	d909      	bls.n	8009856 <UART_SetConfig+0x546>
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009848:	d205      	bcs.n	8009856 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	b29a      	uxth	r2, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	60da      	str	r2, [r3, #12]
 8009854:	e002      	b.n	800985c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2200      	movs	r2, #0
 8009860:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2200      	movs	r2, #0
 8009866:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009868:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800986c:	4618      	mov	r0, r3
 800986e:	3728      	adds	r7, #40	@ 0x28
 8009870:	46bd      	mov	sp, r7
 8009872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009876:	bf00      	nop
 8009878:	40008000 	.word	0x40008000
 800987c:	00f42400 	.word	0x00f42400

08009880 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800988c:	f003 0308 	and.w	r3, r3, #8
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00a      	beq.n	80098aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00a      	beq.n	80098cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	430a      	orrs	r2, r1
 80098ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d0:	f003 0302 	and.w	r3, r3, #2
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00a      	beq.n	80098ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	430a      	orrs	r2, r1
 80098ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098f2:	f003 0304 	and.w	r3, r3, #4
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00a      	beq.n	8009910 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	430a      	orrs	r2, r1
 800990e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009914:	f003 0310 	and.w	r3, r3, #16
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00a      	beq.n	8009932 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	430a      	orrs	r2, r1
 8009930:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009936:	f003 0320 	and.w	r3, r3, #32
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00a      	beq.n	8009954 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	430a      	orrs	r2, r1
 8009952:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800995c:	2b00      	cmp	r3, #0
 800995e:	d01a      	beq.n	8009996 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	430a      	orrs	r2, r1
 8009974:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800997a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800997e:	d10a      	bne.n	8009996 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	430a      	orrs	r2, r1
 8009994:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800999a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00a      	beq.n	80099b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	430a      	orrs	r2, r1
 80099b6:	605a      	str	r2, [r3, #4]
  }
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b098      	sub	sp, #96	@ 0x60
 80099c8:	af02      	add	r7, sp, #8
 80099ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099d4:	f7f9 faac 	bl	8002f30 <HAL_GetTick>
 80099d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 0308 	and.w	r3, r3, #8
 80099e4:	2b08      	cmp	r3, #8
 80099e6:	d12e      	bne.n	8009a46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099f0:	2200      	movs	r2, #0
 80099f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 f88c 	bl	8009b14 <UART_WaitOnFlagUntilTimeout>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d021      	beq.n	8009a46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a0a:	e853 3f00 	ldrex	r3, [r3]
 8009a0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a16:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a20:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a22:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a28:	e841 2300 	strex	r3, r2, [r1]
 8009a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1e6      	bne.n	8009a02 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2220      	movs	r2, #32
 8009a38:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e062      	b.n	8009b0c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 0304 	and.w	r3, r3, #4
 8009a50:	2b04      	cmp	r3, #4
 8009a52:	d149      	bne.n	8009ae8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f856 	bl	8009b14 <UART_WaitOnFlagUntilTimeout>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d03c      	beq.n	8009ae8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a76:	e853 3f00 	ldrex	r3, [r3]
 8009a7a:	623b      	str	r3, [r7, #32]
   return(result);
 8009a7c:	6a3b      	ldr	r3, [r7, #32]
 8009a7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a94:	e841 2300 	strex	r3, r2, [r1]
 8009a98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1e6      	bne.n	8009a6e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	3308      	adds	r3, #8
 8009aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	e853 3f00 	ldrex	r3, [r3]
 8009aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f023 0301 	bic.w	r3, r3, #1
 8009ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	3308      	adds	r3, #8
 8009abe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ac0:	61fa      	str	r2, [r7, #28]
 8009ac2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac4:	69b9      	ldr	r1, [r7, #24]
 8009ac6:	69fa      	ldr	r2, [r7, #28]
 8009ac8:	e841 2300 	strex	r3, r2, [r1]
 8009acc:	617b      	str	r3, [r7, #20]
   return(result);
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d1e5      	bne.n	8009aa0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2220      	movs	r2, #32
 8009ad8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	e011      	b.n	8009b0c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2220      	movs	r2, #32
 8009aec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2220      	movs	r2, #32
 8009af2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3758      	adds	r7, #88	@ 0x58
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	603b      	str	r3, [r7, #0]
 8009b20:	4613      	mov	r3, r2
 8009b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b24:	e04f      	b.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b2c:	d04b      	beq.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b2e:	f7f9 f9ff 	bl	8002f30 <HAL_GetTick>
 8009b32:	4602      	mov	r2, r0
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	69ba      	ldr	r2, [r7, #24]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d302      	bcc.n	8009b44 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d101      	bne.n	8009b48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e04e      	b.n	8009be6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 0304 	and.w	r3, r3, #4
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d037      	beq.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	2b80      	cmp	r3, #128	@ 0x80
 8009b5a:	d034      	beq.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	2b40      	cmp	r3, #64	@ 0x40
 8009b60:	d031      	beq.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	f003 0308 	and.w	r3, r3, #8
 8009b6c:	2b08      	cmp	r3, #8
 8009b6e:	d110      	bne.n	8009b92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2208      	movs	r2, #8
 8009b76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 f838 	bl	8009bee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2208      	movs	r2, #8
 8009b82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e029      	b.n	8009be6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	69db      	ldr	r3, [r3, #28]
 8009b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ba0:	d111      	bne.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009baa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 f81e 	bl	8009bee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2220      	movs	r2, #32
 8009bb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e00f      	b.n	8009be6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	69da      	ldr	r2, [r3, #28]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	4013      	ands	r3, r2
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	bf0c      	ite	eq
 8009bd6:	2301      	moveq	r3, #1
 8009bd8:	2300      	movne	r3, #0
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	461a      	mov	r2, r3
 8009bde:	79fb      	ldrb	r3, [r7, #7]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d0a0      	beq.n	8009b26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bee:	b480      	push	{r7}
 8009bf0:	b095      	sub	sp, #84	@ 0x54
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bfe:	e853 3f00 	ldrex	r3, [r3]
 8009c02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	461a      	mov	r2, r3
 8009c12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c14:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c16:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c1c:	e841 2300 	strex	r3, r2, [r1]
 8009c20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d1e6      	bne.n	8009bf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	3308      	adds	r3, #8
 8009c2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	e853 3f00 	ldrex	r3, [r3]
 8009c36:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	f023 0301 	bic.w	r3, r3, #1
 8009c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	3308      	adds	r3, #8
 8009c46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c50:	e841 2300 	strex	r3, r2, [r1]
 8009c54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1e5      	bne.n	8009c28 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d118      	bne.n	8009c96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	e853 3f00 	ldrex	r3, [r3]
 8009c70:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	f023 0310 	bic.w	r3, r3, #16
 8009c78:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c82:	61bb      	str	r3, [r7, #24]
 8009c84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c86:	6979      	ldr	r1, [r7, #20]
 8009c88:	69ba      	ldr	r2, [r7, #24]
 8009c8a:	e841 2300 	strex	r3, r2, [r1]
 8009c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1e6      	bne.n	8009c64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2220      	movs	r2, #32
 8009c9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009caa:	bf00      	nop
 8009cac:	3754      	adds	r7, #84	@ 0x54
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	f107 001c 	add.w	r0, r7, #28
 8009cc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fa69 	bl	800a1ac <USB_CoreReset>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009cde:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d106      	bne.n	8009cf4 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	639a      	str	r2, [r3, #56]	@ 0x38
 8009cf2:	e005      	b.n	8009d00 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d0c:	b004      	add	sp, #16
 8009d0e:	4770      	bx	lr

08009d10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	f023 0201 	bic.w	r2, r3, #1
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	370c      	adds	r7, #12
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr

08009d32 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b084      	sub	sp, #16
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009d4e:	78fb      	ldrb	r3, [r7, #3]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d115      	bne.n	8009d80 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009d60:	200a      	movs	r0, #10
 8009d62:	f7f9 f8f1 	bl	8002f48 <HAL_Delay>
      ms += 10U;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	330a      	adds	r3, #10
 8009d6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fa0f 	bl	800a190 <USB_GetMode>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d01e      	beq.n	8009db6 <USB_SetCurrentMode+0x84>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2bc7      	cmp	r3, #199	@ 0xc7
 8009d7c:	d9f0      	bls.n	8009d60 <USB_SetCurrentMode+0x2e>
 8009d7e:	e01a      	b.n	8009db6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009d80:	78fb      	ldrb	r3, [r7, #3]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d115      	bne.n	8009db2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009d92:	200a      	movs	r0, #10
 8009d94:	f7f9 f8d8 	bl	8002f48 <HAL_Delay>
      ms += 10U;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	330a      	adds	r3, #10
 8009d9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f9f6 	bl	800a190 <USB_GetMode>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d005      	beq.n	8009db6 <USB_SetCurrentMode+0x84>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2bc7      	cmp	r3, #199	@ 0xc7
 8009dae:	d9f0      	bls.n	8009d92 <USB_SetCurrentMode+0x60>
 8009db0:	e001      	b.n	8009db6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e005      	b.n	8009dc2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2bc8      	cmp	r3, #200	@ 0xc8
 8009dba:	d101      	bne.n	8009dc0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e000      	b.n	8009dc2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
	...

08009dcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009dcc:	b084      	sub	sp, #16
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b086      	sub	sp, #24
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009dde:	2300      	movs	r3, #0
 8009de0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009de6:	2300      	movs	r3, #0
 8009de8:	613b      	str	r3, [r7, #16]
 8009dea:	e009      	b.n	8009e00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	3340      	adds	r3, #64	@ 0x40
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	4413      	add	r3, r2
 8009df6:	2200      	movs	r2, #0
 8009df8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	613b      	str	r3, [r7, #16]
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	2b0e      	cmp	r3, #14
 8009e04:	d9f2      	bls.n	8009dec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009e06:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d11c      	bne.n	8009e48 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e1c:	f043 0302 	orr.w	r3, r3, #2
 8009e20:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e26:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	601a      	str	r2, [r3, #0]
 8009e46:	e005      	b.n	8009e54 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e4c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009e60:	2103      	movs	r1, #3
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f95a 	bl	800a11c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009e68:	2110      	movs	r1, #16
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f8f6 	bl	800a05c <USB_FlushTxFifo>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d001      	beq.n	8009e7a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f920 	bl	800a0c0 <USB_FlushRxFifo>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d001      	beq.n	8009e8a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e90:	461a      	mov	r2, r3
 8009e92:	2300      	movs	r3, #0
 8009e94:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	2300      	movs	r3, #0
 8009eac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009eae:	2300      	movs	r3, #0
 8009eb0:	613b      	str	r3, [r7, #16]
 8009eb2:	e043      	b.n	8009f3c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	015a      	lsls	r2, r3, #5
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	4413      	add	r3, r2
 8009ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009eca:	d118      	bne.n	8009efe <USB_DevInit+0x132>
    {
      if (i == 0U)
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10a      	bne.n	8009ee8 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	015a      	lsls	r2, r3, #5
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	4413      	add	r3, r2
 8009eda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ede:	461a      	mov	r2, r3
 8009ee0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009ee4:	6013      	str	r3, [r2, #0]
 8009ee6:	e013      	b.n	8009f10 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	015a      	lsls	r2, r3, #5
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	4413      	add	r3, r2
 8009ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009efa:	6013      	str	r3, [r2, #0]
 8009efc:	e008      	b.n	8009f10 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	015a      	lsls	r2, r3, #5
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	4413      	add	r3, r2
 8009f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	015a      	lsls	r2, r3, #5
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	4413      	add	r3, r2
 8009f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	2300      	movs	r3, #0
 8009f20:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	015a      	lsls	r2, r3, #5
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	4413      	add	r3, r2
 8009f2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f2e:	461a      	mov	r2, r3
 8009f30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009f34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	613b      	str	r3, [r7, #16]
 8009f3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009f40:	461a      	mov	r2, r3
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d3b5      	bcc.n	8009eb4 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f48:	2300      	movs	r3, #0
 8009f4a:	613b      	str	r3, [r7, #16]
 8009f4c:	e043      	b.n	8009fd6 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	015a      	lsls	r2, r3, #5
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	4413      	add	r3, r2
 8009f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f64:	d118      	bne.n	8009f98 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10a      	bne.n	8009f82 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	015a      	lsls	r2, r3, #5
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	4413      	add	r3, r2
 8009f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f78:	461a      	mov	r2, r3
 8009f7a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009f7e:	6013      	str	r3, [r2, #0]
 8009f80:	e013      	b.n	8009faa <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	015a      	lsls	r2, r3, #5
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	4413      	add	r3, r2
 8009f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f8e:	461a      	mov	r2, r3
 8009f90:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009f94:	6013      	str	r3, [r2, #0]
 8009f96:	e008      	b.n	8009faa <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	015a      	lsls	r2, r3, #5
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	2300      	movs	r3, #0
 8009fba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	015a      	lsls	r2, r3, #5
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fc8:	461a      	mov	r2, r3
 8009fca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009fce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	613b      	str	r3, [r7, #16]
 8009fd6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009fda:	461a      	mov	r2, r3
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d3b5      	bcc.n	8009f4e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ff0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ff4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a002:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	f043 0210 	orr.w	r2, r3, #16
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	699a      	ldr	r2, [r3, #24]
 800a014:	4b10      	ldr	r3, [pc, #64]	@ (800a058 <USB_DevInit+0x28c>)
 800a016:	4313      	orrs	r3, r2
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a01c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a020:	2b00      	cmp	r3, #0
 800a022:	d005      	beq.n	800a030 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	699b      	ldr	r3, [r3, #24]
 800a028:	f043 0208 	orr.w	r2, r3, #8
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a030:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a034:	2b01      	cmp	r3, #1
 800a036:	d107      	bne.n	800a048 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	699b      	ldr	r3, [r3, #24]
 800a03c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a040:	f043 0304 	orr.w	r3, r3, #4
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a048:	7dfb      	ldrb	r3, [r7, #23]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3718      	adds	r7, #24
 800a04e:	46bd      	mov	sp, r7
 800a050:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a054:	b004      	add	sp, #16
 800a056:	4770      	bx	lr
 800a058:	803c3800 	.word	0x803c3800

0800a05c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a066:	2300      	movs	r3, #0
 800a068:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	3301      	adds	r3, #1
 800a06e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a076:	d901      	bls.n	800a07c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a078:	2303      	movs	r3, #3
 800a07a:	e01b      	b.n	800a0b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	2b00      	cmp	r3, #0
 800a082:	daf2      	bge.n	800a06a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a084:	2300      	movs	r3, #0
 800a086:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	019b      	lsls	r3, r3, #6
 800a08c:	f043 0220 	orr.w	r2, r3, #32
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	3301      	adds	r3, #1
 800a098:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a0a0:	d901      	bls.n	800a0a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	e006      	b.n	800a0b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	f003 0320 	and.w	r3, r3, #32
 800a0ae:	2b20      	cmp	r3, #32
 800a0b0:	d0f0      	beq.n	800a094 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3714      	adds	r7, #20
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a0d8:	d901      	bls.n	800a0de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a0da:	2303      	movs	r3, #3
 800a0dc:	e018      	b.n	800a110 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	daf2      	bge.n	800a0cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2210      	movs	r2, #16
 800a0ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a0fc:	d901      	bls.n	800a102 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a0fe:	2303      	movs	r3, #3
 800a100:	e006      	b.n	800a110 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	f003 0310 	and.w	r3, r3, #16
 800a10a:	2b10      	cmp	r3, #16
 800a10c:	d0f0      	beq.n	800a0f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3714      	adds	r7, #20
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	460b      	mov	r3, r1
 800a126:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	78fb      	ldrb	r3, [r7, #3]
 800a136:	68f9      	ldr	r1, [r7, #12]
 800a138:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a13c:	4313      	orrs	r3, r2
 800a13e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3714      	adds	r7, #20
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr

0800a14e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a14e:	b480      	push	{r7}
 800a150:	b085      	sub	sp, #20
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a168:	f023 0303 	bic.w	r3, r3, #3
 800a16c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a17c:	f043 0302 	orr.w	r3, r3, #2
 800a180:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	695b      	ldr	r3, [r3, #20]
 800a19c:	f003 0301 	and.w	r3, r3, #1
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a1c4:	d901      	bls.n	800a1ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	e01b      	b.n	800a202 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	daf2      	bge.n	800a1b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	f043 0201 	orr.w	r2, r3, #1
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a1ee:	d901      	bls.n	800a1f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e006      	b.n	800a202 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	f003 0301 	and.w	r3, r3, #1
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d0f0      	beq.n	800a1e2 <USB_CoreReset+0x36>

  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3714      	adds	r7, #20
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr

0800a20e <__cvt>:
 800a20e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a212:	ec57 6b10 	vmov	r6, r7, d0
 800a216:	2f00      	cmp	r7, #0
 800a218:	460c      	mov	r4, r1
 800a21a:	4619      	mov	r1, r3
 800a21c:	463b      	mov	r3, r7
 800a21e:	bfbb      	ittet	lt
 800a220:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a224:	461f      	movlt	r7, r3
 800a226:	2300      	movge	r3, #0
 800a228:	232d      	movlt	r3, #45	@ 0x2d
 800a22a:	700b      	strb	r3, [r1, #0]
 800a22c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a22e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a232:	4691      	mov	r9, r2
 800a234:	f023 0820 	bic.w	r8, r3, #32
 800a238:	bfbc      	itt	lt
 800a23a:	4632      	movlt	r2, r6
 800a23c:	4616      	movlt	r6, r2
 800a23e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a242:	d005      	beq.n	800a250 <__cvt+0x42>
 800a244:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a248:	d100      	bne.n	800a24c <__cvt+0x3e>
 800a24a:	3401      	adds	r4, #1
 800a24c:	2102      	movs	r1, #2
 800a24e:	e000      	b.n	800a252 <__cvt+0x44>
 800a250:	2103      	movs	r1, #3
 800a252:	ab03      	add	r3, sp, #12
 800a254:	9301      	str	r3, [sp, #4]
 800a256:	ab02      	add	r3, sp, #8
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	ec47 6b10 	vmov	d0, r6, r7
 800a25e:	4653      	mov	r3, sl
 800a260:	4622      	mov	r2, r4
 800a262:	f001 f985 	bl	800b570 <_dtoa_r>
 800a266:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a26a:	4605      	mov	r5, r0
 800a26c:	d119      	bne.n	800a2a2 <__cvt+0x94>
 800a26e:	f019 0f01 	tst.w	r9, #1
 800a272:	d00e      	beq.n	800a292 <__cvt+0x84>
 800a274:	eb00 0904 	add.w	r9, r0, r4
 800a278:	2200      	movs	r2, #0
 800a27a:	2300      	movs	r3, #0
 800a27c:	4630      	mov	r0, r6
 800a27e:	4639      	mov	r1, r7
 800a280:	f7f6 fc22 	bl	8000ac8 <__aeabi_dcmpeq>
 800a284:	b108      	cbz	r0, 800a28a <__cvt+0x7c>
 800a286:	f8cd 900c 	str.w	r9, [sp, #12]
 800a28a:	2230      	movs	r2, #48	@ 0x30
 800a28c:	9b03      	ldr	r3, [sp, #12]
 800a28e:	454b      	cmp	r3, r9
 800a290:	d31e      	bcc.n	800a2d0 <__cvt+0xc2>
 800a292:	9b03      	ldr	r3, [sp, #12]
 800a294:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a296:	1b5b      	subs	r3, r3, r5
 800a298:	4628      	mov	r0, r5
 800a29a:	6013      	str	r3, [r2, #0]
 800a29c:	b004      	add	sp, #16
 800a29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a2a6:	eb00 0904 	add.w	r9, r0, r4
 800a2aa:	d1e5      	bne.n	800a278 <__cvt+0x6a>
 800a2ac:	7803      	ldrb	r3, [r0, #0]
 800a2ae:	2b30      	cmp	r3, #48	@ 0x30
 800a2b0:	d10a      	bne.n	800a2c8 <__cvt+0xba>
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	4639      	mov	r1, r7
 800a2ba:	f7f6 fc05 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2be:	b918      	cbnz	r0, 800a2c8 <__cvt+0xba>
 800a2c0:	f1c4 0401 	rsb	r4, r4, #1
 800a2c4:	f8ca 4000 	str.w	r4, [sl]
 800a2c8:	f8da 3000 	ldr.w	r3, [sl]
 800a2cc:	4499      	add	r9, r3
 800a2ce:	e7d3      	b.n	800a278 <__cvt+0x6a>
 800a2d0:	1c59      	adds	r1, r3, #1
 800a2d2:	9103      	str	r1, [sp, #12]
 800a2d4:	701a      	strb	r2, [r3, #0]
 800a2d6:	e7d9      	b.n	800a28c <__cvt+0x7e>

0800a2d8 <__exponent>:
 800a2d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2da:	2900      	cmp	r1, #0
 800a2dc:	bfba      	itte	lt
 800a2de:	4249      	neglt	r1, r1
 800a2e0:	232d      	movlt	r3, #45	@ 0x2d
 800a2e2:	232b      	movge	r3, #43	@ 0x2b
 800a2e4:	2909      	cmp	r1, #9
 800a2e6:	7002      	strb	r2, [r0, #0]
 800a2e8:	7043      	strb	r3, [r0, #1]
 800a2ea:	dd29      	ble.n	800a340 <__exponent+0x68>
 800a2ec:	f10d 0307 	add.w	r3, sp, #7
 800a2f0:	461d      	mov	r5, r3
 800a2f2:	270a      	movs	r7, #10
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	fbb1 f6f7 	udiv	r6, r1, r7
 800a2fa:	fb07 1416 	mls	r4, r7, r6, r1
 800a2fe:	3430      	adds	r4, #48	@ 0x30
 800a300:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a304:	460c      	mov	r4, r1
 800a306:	2c63      	cmp	r4, #99	@ 0x63
 800a308:	f103 33ff 	add.w	r3, r3, #4294967295
 800a30c:	4631      	mov	r1, r6
 800a30e:	dcf1      	bgt.n	800a2f4 <__exponent+0x1c>
 800a310:	3130      	adds	r1, #48	@ 0x30
 800a312:	1e94      	subs	r4, r2, #2
 800a314:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a318:	1c41      	adds	r1, r0, #1
 800a31a:	4623      	mov	r3, r4
 800a31c:	42ab      	cmp	r3, r5
 800a31e:	d30a      	bcc.n	800a336 <__exponent+0x5e>
 800a320:	f10d 0309 	add.w	r3, sp, #9
 800a324:	1a9b      	subs	r3, r3, r2
 800a326:	42ac      	cmp	r4, r5
 800a328:	bf88      	it	hi
 800a32a:	2300      	movhi	r3, #0
 800a32c:	3302      	adds	r3, #2
 800a32e:	4403      	add	r3, r0
 800a330:	1a18      	subs	r0, r3, r0
 800a332:	b003      	add	sp, #12
 800a334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a336:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a33a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a33e:	e7ed      	b.n	800a31c <__exponent+0x44>
 800a340:	2330      	movs	r3, #48	@ 0x30
 800a342:	3130      	adds	r1, #48	@ 0x30
 800a344:	7083      	strb	r3, [r0, #2]
 800a346:	70c1      	strb	r1, [r0, #3]
 800a348:	1d03      	adds	r3, r0, #4
 800a34a:	e7f1      	b.n	800a330 <__exponent+0x58>

0800a34c <_printf_float>:
 800a34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a350:	b08d      	sub	sp, #52	@ 0x34
 800a352:	460c      	mov	r4, r1
 800a354:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a358:	4616      	mov	r6, r2
 800a35a:	461f      	mov	r7, r3
 800a35c:	4605      	mov	r5, r0
 800a35e:	f000 fff3 	bl	800b348 <_localeconv_r>
 800a362:	6803      	ldr	r3, [r0, #0]
 800a364:	9304      	str	r3, [sp, #16]
 800a366:	4618      	mov	r0, r3
 800a368:	f7f5 ff82 	bl	8000270 <strlen>
 800a36c:	2300      	movs	r3, #0
 800a36e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a370:	f8d8 3000 	ldr.w	r3, [r8]
 800a374:	9005      	str	r0, [sp, #20]
 800a376:	3307      	adds	r3, #7
 800a378:	f023 0307 	bic.w	r3, r3, #7
 800a37c:	f103 0208 	add.w	r2, r3, #8
 800a380:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a384:	f8d4 b000 	ldr.w	fp, [r4]
 800a388:	f8c8 2000 	str.w	r2, [r8]
 800a38c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a390:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a394:	9307      	str	r3, [sp, #28]
 800a396:	f8cd 8018 	str.w	r8, [sp, #24]
 800a39a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a39e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3a2:	4b9c      	ldr	r3, [pc, #624]	@ (800a614 <_printf_float+0x2c8>)
 800a3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3a8:	f7f6 fbc0 	bl	8000b2c <__aeabi_dcmpun>
 800a3ac:	bb70      	cbnz	r0, 800a40c <_printf_float+0xc0>
 800a3ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3b2:	4b98      	ldr	r3, [pc, #608]	@ (800a614 <_printf_float+0x2c8>)
 800a3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3b8:	f7f6 fb9a 	bl	8000af0 <__aeabi_dcmple>
 800a3bc:	bb30      	cbnz	r0, 800a40c <_printf_float+0xc0>
 800a3be:	2200      	movs	r2, #0
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	4640      	mov	r0, r8
 800a3c4:	4649      	mov	r1, r9
 800a3c6:	f7f6 fb89 	bl	8000adc <__aeabi_dcmplt>
 800a3ca:	b110      	cbz	r0, 800a3d2 <_printf_float+0x86>
 800a3cc:	232d      	movs	r3, #45	@ 0x2d
 800a3ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3d2:	4a91      	ldr	r2, [pc, #580]	@ (800a618 <_printf_float+0x2cc>)
 800a3d4:	4b91      	ldr	r3, [pc, #580]	@ (800a61c <_printf_float+0x2d0>)
 800a3d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a3da:	bf94      	ite	ls
 800a3dc:	4690      	movls	r8, r2
 800a3de:	4698      	movhi	r8, r3
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	6123      	str	r3, [r4, #16]
 800a3e4:	f02b 0304 	bic.w	r3, fp, #4
 800a3e8:	6023      	str	r3, [r4, #0]
 800a3ea:	f04f 0900 	mov.w	r9, #0
 800a3ee:	9700      	str	r7, [sp, #0]
 800a3f0:	4633      	mov	r3, r6
 800a3f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a3f4:	4621      	mov	r1, r4
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	f000 f9d2 	bl	800a7a0 <_printf_common>
 800a3fc:	3001      	adds	r0, #1
 800a3fe:	f040 808d 	bne.w	800a51c <_printf_float+0x1d0>
 800a402:	f04f 30ff 	mov.w	r0, #4294967295
 800a406:	b00d      	add	sp, #52	@ 0x34
 800a408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40c:	4642      	mov	r2, r8
 800a40e:	464b      	mov	r3, r9
 800a410:	4640      	mov	r0, r8
 800a412:	4649      	mov	r1, r9
 800a414:	f7f6 fb8a 	bl	8000b2c <__aeabi_dcmpun>
 800a418:	b140      	cbz	r0, 800a42c <_printf_float+0xe0>
 800a41a:	464b      	mov	r3, r9
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	bfbc      	itt	lt
 800a420:	232d      	movlt	r3, #45	@ 0x2d
 800a422:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a426:	4a7e      	ldr	r2, [pc, #504]	@ (800a620 <_printf_float+0x2d4>)
 800a428:	4b7e      	ldr	r3, [pc, #504]	@ (800a624 <_printf_float+0x2d8>)
 800a42a:	e7d4      	b.n	800a3d6 <_printf_float+0x8a>
 800a42c:	6863      	ldr	r3, [r4, #4]
 800a42e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a432:	9206      	str	r2, [sp, #24]
 800a434:	1c5a      	adds	r2, r3, #1
 800a436:	d13b      	bne.n	800a4b0 <_printf_float+0x164>
 800a438:	2306      	movs	r3, #6
 800a43a:	6063      	str	r3, [r4, #4]
 800a43c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a440:	2300      	movs	r3, #0
 800a442:	6022      	str	r2, [r4, #0]
 800a444:	9303      	str	r3, [sp, #12]
 800a446:	ab0a      	add	r3, sp, #40	@ 0x28
 800a448:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a44c:	ab09      	add	r3, sp, #36	@ 0x24
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	6861      	ldr	r1, [r4, #4]
 800a452:	ec49 8b10 	vmov	d0, r8, r9
 800a456:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a45a:	4628      	mov	r0, r5
 800a45c:	f7ff fed7 	bl	800a20e <__cvt>
 800a460:	9b06      	ldr	r3, [sp, #24]
 800a462:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a464:	2b47      	cmp	r3, #71	@ 0x47
 800a466:	4680      	mov	r8, r0
 800a468:	d129      	bne.n	800a4be <_printf_float+0x172>
 800a46a:	1cc8      	adds	r0, r1, #3
 800a46c:	db02      	blt.n	800a474 <_printf_float+0x128>
 800a46e:	6863      	ldr	r3, [r4, #4]
 800a470:	4299      	cmp	r1, r3
 800a472:	dd41      	ble.n	800a4f8 <_printf_float+0x1ac>
 800a474:	f1aa 0a02 	sub.w	sl, sl, #2
 800a478:	fa5f fa8a 	uxtb.w	sl, sl
 800a47c:	3901      	subs	r1, #1
 800a47e:	4652      	mov	r2, sl
 800a480:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a484:	9109      	str	r1, [sp, #36]	@ 0x24
 800a486:	f7ff ff27 	bl	800a2d8 <__exponent>
 800a48a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a48c:	1813      	adds	r3, r2, r0
 800a48e:	2a01      	cmp	r2, #1
 800a490:	4681      	mov	r9, r0
 800a492:	6123      	str	r3, [r4, #16]
 800a494:	dc02      	bgt.n	800a49c <_printf_float+0x150>
 800a496:	6822      	ldr	r2, [r4, #0]
 800a498:	07d2      	lsls	r2, r2, #31
 800a49a:	d501      	bpl.n	800a4a0 <_printf_float+0x154>
 800a49c:	3301      	adds	r3, #1
 800a49e:	6123      	str	r3, [r4, #16]
 800a4a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d0a2      	beq.n	800a3ee <_printf_float+0xa2>
 800a4a8:	232d      	movs	r3, #45	@ 0x2d
 800a4aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4ae:	e79e      	b.n	800a3ee <_printf_float+0xa2>
 800a4b0:	9a06      	ldr	r2, [sp, #24]
 800a4b2:	2a47      	cmp	r2, #71	@ 0x47
 800a4b4:	d1c2      	bne.n	800a43c <_printf_float+0xf0>
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1c0      	bne.n	800a43c <_printf_float+0xf0>
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e7bd      	b.n	800a43a <_printf_float+0xee>
 800a4be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a4c2:	d9db      	bls.n	800a47c <_printf_float+0x130>
 800a4c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a4c8:	d118      	bne.n	800a4fc <_printf_float+0x1b0>
 800a4ca:	2900      	cmp	r1, #0
 800a4cc:	6863      	ldr	r3, [r4, #4]
 800a4ce:	dd0b      	ble.n	800a4e8 <_printf_float+0x19c>
 800a4d0:	6121      	str	r1, [r4, #16]
 800a4d2:	b913      	cbnz	r3, 800a4da <_printf_float+0x18e>
 800a4d4:	6822      	ldr	r2, [r4, #0]
 800a4d6:	07d0      	lsls	r0, r2, #31
 800a4d8:	d502      	bpl.n	800a4e0 <_printf_float+0x194>
 800a4da:	3301      	adds	r3, #1
 800a4dc:	440b      	add	r3, r1
 800a4de:	6123      	str	r3, [r4, #16]
 800a4e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a4e2:	f04f 0900 	mov.w	r9, #0
 800a4e6:	e7db      	b.n	800a4a0 <_printf_float+0x154>
 800a4e8:	b913      	cbnz	r3, 800a4f0 <_printf_float+0x1a4>
 800a4ea:	6822      	ldr	r2, [r4, #0]
 800a4ec:	07d2      	lsls	r2, r2, #31
 800a4ee:	d501      	bpl.n	800a4f4 <_printf_float+0x1a8>
 800a4f0:	3302      	adds	r3, #2
 800a4f2:	e7f4      	b.n	800a4de <_printf_float+0x192>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e7f2      	b.n	800a4de <_printf_float+0x192>
 800a4f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a4fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4fe:	4299      	cmp	r1, r3
 800a500:	db05      	blt.n	800a50e <_printf_float+0x1c2>
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	6121      	str	r1, [r4, #16]
 800a506:	07d8      	lsls	r0, r3, #31
 800a508:	d5ea      	bpl.n	800a4e0 <_printf_float+0x194>
 800a50a:	1c4b      	adds	r3, r1, #1
 800a50c:	e7e7      	b.n	800a4de <_printf_float+0x192>
 800a50e:	2900      	cmp	r1, #0
 800a510:	bfd4      	ite	le
 800a512:	f1c1 0202 	rsble	r2, r1, #2
 800a516:	2201      	movgt	r2, #1
 800a518:	4413      	add	r3, r2
 800a51a:	e7e0      	b.n	800a4de <_printf_float+0x192>
 800a51c:	6823      	ldr	r3, [r4, #0]
 800a51e:	055a      	lsls	r2, r3, #21
 800a520:	d407      	bmi.n	800a532 <_printf_float+0x1e6>
 800a522:	6923      	ldr	r3, [r4, #16]
 800a524:	4642      	mov	r2, r8
 800a526:	4631      	mov	r1, r6
 800a528:	4628      	mov	r0, r5
 800a52a:	47b8      	blx	r7
 800a52c:	3001      	adds	r0, #1
 800a52e:	d12b      	bne.n	800a588 <_printf_float+0x23c>
 800a530:	e767      	b.n	800a402 <_printf_float+0xb6>
 800a532:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a536:	f240 80dd 	bls.w	800a6f4 <_printf_float+0x3a8>
 800a53a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a53e:	2200      	movs	r2, #0
 800a540:	2300      	movs	r3, #0
 800a542:	f7f6 fac1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a546:	2800      	cmp	r0, #0
 800a548:	d033      	beq.n	800a5b2 <_printf_float+0x266>
 800a54a:	4a37      	ldr	r2, [pc, #220]	@ (800a628 <_printf_float+0x2dc>)
 800a54c:	2301      	movs	r3, #1
 800a54e:	4631      	mov	r1, r6
 800a550:	4628      	mov	r0, r5
 800a552:	47b8      	blx	r7
 800a554:	3001      	adds	r0, #1
 800a556:	f43f af54 	beq.w	800a402 <_printf_float+0xb6>
 800a55a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a55e:	4543      	cmp	r3, r8
 800a560:	db02      	blt.n	800a568 <_printf_float+0x21c>
 800a562:	6823      	ldr	r3, [r4, #0]
 800a564:	07d8      	lsls	r0, r3, #31
 800a566:	d50f      	bpl.n	800a588 <_printf_float+0x23c>
 800a568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a56c:	4631      	mov	r1, r6
 800a56e:	4628      	mov	r0, r5
 800a570:	47b8      	blx	r7
 800a572:	3001      	adds	r0, #1
 800a574:	f43f af45 	beq.w	800a402 <_printf_float+0xb6>
 800a578:	f04f 0900 	mov.w	r9, #0
 800a57c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a580:	f104 0a1a 	add.w	sl, r4, #26
 800a584:	45c8      	cmp	r8, r9
 800a586:	dc09      	bgt.n	800a59c <_printf_float+0x250>
 800a588:	6823      	ldr	r3, [r4, #0]
 800a58a:	079b      	lsls	r3, r3, #30
 800a58c:	f100 8103 	bmi.w	800a796 <_printf_float+0x44a>
 800a590:	68e0      	ldr	r0, [r4, #12]
 800a592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a594:	4298      	cmp	r0, r3
 800a596:	bfb8      	it	lt
 800a598:	4618      	movlt	r0, r3
 800a59a:	e734      	b.n	800a406 <_printf_float+0xba>
 800a59c:	2301      	movs	r3, #1
 800a59e:	4652      	mov	r2, sl
 800a5a0:	4631      	mov	r1, r6
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	47b8      	blx	r7
 800a5a6:	3001      	adds	r0, #1
 800a5a8:	f43f af2b 	beq.w	800a402 <_printf_float+0xb6>
 800a5ac:	f109 0901 	add.w	r9, r9, #1
 800a5b0:	e7e8      	b.n	800a584 <_printf_float+0x238>
 800a5b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	dc39      	bgt.n	800a62c <_printf_float+0x2e0>
 800a5b8:	4a1b      	ldr	r2, [pc, #108]	@ (800a628 <_printf_float+0x2dc>)
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	4631      	mov	r1, r6
 800a5be:	4628      	mov	r0, r5
 800a5c0:	47b8      	blx	r7
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	f43f af1d 	beq.w	800a402 <_printf_float+0xb6>
 800a5c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a5cc:	ea59 0303 	orrs.w	r3, r9, r3
 800a5d0:	d102      	bne.n	800a5d8 <_printf_float+0x28c>
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	07d9      	lsls	r1, r3, #31
 800a5d6:	d5d7      	bpl.n	800a588 <_printf_float+0x23c>
 800a5d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5dc:	4631      	mov	r1, r6
 800a5de:	4628      	mov	r0, r5
 800a5e0:	47b8      	blx	r7
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	f43f af0d 	beq.w	800a402 <_printf_float+0xb6>
 800a5e8:	f04f 0a00 	mov.w	sl, #0
 800a5ec:	f104 0b1a 	add.w	fp, r4, #26
 800a5f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5f2:	425b      	negs	r3, r3
 800a5f4:	4553      	cmp	r3, sl
 800a5f6:	dc01      	bgt.n	800a5fc <_printf_float+0x2b0>
 800a5f8:	464b      	mov	r3, r9
 800a5fa:	e793      	b.n	800a524 <_printf_float+0x1d8>
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	465a      	mov	r2, fp
 800a600:	4631      	mov	r1, r6
 800a602:	4628      	mov	r0, r5
 800a604:	47b8      	blx	r7
 800a606:	3001      	adds	r0, #1
 800a608:	f43f aefb 	beq.w	800a402 <_printf_float+0xb6>
 800a60c:	f10a 0a01 	add.w	sl, sl, #1
 800a610:	e7ee      	b.n	800a5f0 <_printf_float+0x2a4>
 800a612:	bf00      	nop
 800a614:	7fefffff 	.word	0x7fefffff
 800a618:	0800ead4 	.word	0x0800ead4
 800a61c:	0800ead8 	.word	0x0800ead8
 800a620:	0800eadc 	.word	0x0800eadc
 800a624:	0800eae0 	.word	0x0800eae0
 800a628:	0800eae4 	.word	0x0800eae4
 800a62c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a62e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a632:	4553      	cmp	r3, sl
 800a634:	bfa8      	it	ge
 800a636:	4653      	movge	r3, sl
 800a638:	2b00      	cmp	r3, #0
 800a63a:	4699      	mov	r9, r3
 800a63c:	dc36      	bgt.n	800a6ac <_printf_float+0x360>
 800a63e:	f04f 0b00 	mov.w	fp, #0
 800a642:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a646:	f104 021a 	add.w	r2, r4, #26
 800a64a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a64c:	9306      	str	r3, [sp, #24]
 800a64e:	eba3 0309 	sub.w	r3, r3, r9
 800a652:	455b      	cmp	r3, fp
 800a654:	dc31      	bgt.n	800a6ba <_printf_float+0x36e>
 800a656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a658:	459a      	cmp	sl, r3
 800a65a:	dc3a      	bgt.n	800a6d2 <_printf_float+0x386>
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	07da      	lsls	r2, r3, #31
 800a660:	d437      	bmi.n	800a6d2 <_printf_float+0x386>
 800a662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a664:	ebaa 0903 	sub.w	r9, sl, r3
 800a668:	9b06      	ldr	r3, [sp, #24]
 800a66a:	ebaa 0303 	sub.w	r3, sl, r3
 800a66e:	4599      	cmp	r9, r3
 800a670:	bfa8      	it	ge
 800a672:	4699      	movge	r9, r3
 800a674:	f1b9 0f00 	cmp.w	r9, #0
 800a678:	dc33      	bgt.n	800a6e2 <_printf_float+0x396>
 800a67a:	f04f 0800 	mov.w	r8, #0
 800a67e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a682:	f104 0b1a 	add.w	fp, r4, #26
 800a686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a688:	ebaa 0303 	sub.w	r3, sl, r3
 800a68c:	eba3 0309 	sub.w	r3, r3, r9
 800a690:	4543      	cmp	r3, r8
 800a692:	f77f af79 	ble.w	800a588 <_printf_float+0x23c>
 800a696:	2301      	movs	r3, #1
 800a698:	465a      	mov	r2, fp
 800a69a:	4631      	mov	r1, r6
 800a69c:	4628      	mov	r0, r5
 800a69e:	47b8      	blx	r7
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	f43f aeae 	beq.w	800a402 <_printf_float+0xb6>
 800a6a6:	f108 0801 	add.w	r8, r8, #1
 800a6aa:	e7ec      	b.n	800a686 <_printf_float+0x33a>
 800a6ac:	4642      	mov	r2, r8
 800a6ae:	4631      	mov	r1, r6
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	47b8      	blx	r7
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d1c2      	bne.n	800a63e <_printf_float+0x2f2>
 800a6b8:	e6a3      	b.n	800a402 <_printf_float+0xb6>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	4631      	mov	r1, r6
 800a6be:	4628      	mov	r0, r5
 800a6c0:	9206      	str	r2, [sp, #24]
 800a6c2:	47b8      	blx	r7
 800a6c4:	3001      	adds	r0, #1
 800a6c6:	f43f ae9c 	beq.w	800a402 <_printf_float+0xb6>
 800a6ca:	9a06      	ldr	r2, [sp, #24]
 800a6cc:	f10b 0b01 	add.w	fp, fp, #1
 800a6d0:	e7bb      	b.n	800a64a <_printf_float+0x2fe>
 800a6d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6d6:	4631      	mov	r1, r6
 800a6d8:	4628      	mov	r0, r5
 800a6da:	47b8      	blx	r7
 800a6dc:	3001      	adds	r0, #1
 800a6de:	d1c0      	bne.n	800a662 <_printf_float+0x316>
 800a6e0:	e68f      	b.n	800a402 <_printf_float+0xb6>
 800a6e2:	9a06      	ldr	r2, [sp, #24]
 800a6e4:	464b      	mov	r3, r9
 800a6e6:	4442      	add	r2, r8
 800a6e8:	4631      	mov	r1, r6
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	47b8      	blx	r7
 800a6ee:	3001      	adds	r0, #1
 800a6f0:	d1c3      	bne.n	800a67a <_printf_float+0x32e>
 800a6f2:	e686      	b.n	800a402 <_printf_float+0xb6>
 800a6f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a6f8:	f1ba 0f01 	cmp.w	sl, #1
 800a6fc:	dc01      	bgt.n	800a702 <_printf_float+0x3b6>
 800a6fe:	07db      	lsls	r3, r3, #31
 800a700:	d536      	bpl.n	800a770 <_printf_float+0x424>
 800a702:	2301      	movs	r3, #1
 800a704:	4642      	mov	r2, r8
 800a706:	4631      	mov	r1, r6
 800a708:	4628      	mov	r0, r5
 800a70a:	47b8      	blx	r7
 800a70c:	3001      	adds	r0, #1
 800a70e:	f43f ae78 	beq.w	800a402 <_printf_float+0xb6>
 800a712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a716:	4631      	mov	r1, r6
 800a718:	4628      	mov	r0, r5
 800a71a:	47b8      	blx	r7
 800a71c:	3001      	adds	r0, #1
 800a71e:	f43f ae70 	beq.w	800a402 <_printf_float+0xb6>
 800a722:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a726:	2200      	movs	r2, #0
 800a728:	2300      	movs	r3, #0
 800a72a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a72e:	f7f6 f9cb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a732:	b9c0      	cbnz	r0, 800a766 <_printf_float+0x41a>
 800a734:	4653      	mov	r3, sl
 800a736:	f108 0201 	add.w	r2, r8, #1
 800a73a:	4631      	mov	r1, r6
 800a73c:	4628      	mov	r0, r5
 800a73e:	47b8      	blx	r7
 800a740:	3001      	adds	r0, #1
 800a742:	d10c      	bne.n	800a75e <_printf_float+0x412>
 800a744:	e65d      	b.n	800a402 <_printf_float+0xb6>
 800a746:	2301      	movs	r3, #1
 800a748:	465a      	mov	r2, fp
 800a74a:	4631      	mov	r1, r6
 800a74c:	4628      	mov	r0, r5
 800a74e:	47b8      	blx	r7
 800a750:	3001      	adds	r0, #1
 800a752:	f43f ae56 	beq.w	800a402 <_printf_float+0xb6>
 800a756:	f108 0801 	add.w	r8, r8, #1
 800a75a:	45d0      	cmp	r8, sl
 800a75c:	dbf3      	blt.n	800a746 <_printf_float+0x3fa>
 800a75e:	464b      	mov	r3, r9
 800a760:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a764:	e6df      	b.n	800a526 <_printf_float+0x1da>
 800a766:	f04f 0800 	mov.w	r8, #0
 800a76a:	f104 0b1a 	add.w	fp, r4, #26
 800a76e:	e7f4      	b.n	800a75a <_printf_float+0x40e>
 800a770:	2301      	movs	r3, #1
 800a772:	4642      	mov	r2, r8
 800a774:	e7e1      	b.n	800a73a <_printf_float+0x3ee>
 800a776:	2301      	movs	r3, #1
 800a778:	464a      	mov	r2, r9
 800a77a:	4631      	mov	r1, r6
 800a77c:	4628      	mov	r0, r5
 800a77e:	47b8      	blx	r7
 800a780:	3001      	adds	r0, #1
 800a782:	f43f ae3e 	beq.w	800a402 <_printf_float+0xb6>
 800a786:	f108 0801 	add.w	r8, r8, #1
 800a78a:	68e3      	ldr	r3, [r4, #12]
 800a78c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a78e:	1a5b      	subs	r3, r3, r1
 800a790:	4543      	cmp	r3, r8
 800a792:	dcf0      	bgt.n	800a776 <_printf_float+0x42a>
 800a794:	e6fc      	b.n	800a590 <_printf_float+0x244>
 800a796:	f04f 0800 	mov.w	r8, #0
 800a79a:	f104 0919 	add.w	r9, r4, #25
 800a79e:	e7f4      	b.n	800a78a <_printf_float+0x43e>

0800a7a0 <_printf_common>:
 800a7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a4:	4616      	mov	r6, r2
 800a7a6:	4698      	mov	r8, r3
 800a7a8:	688a      	ldr	r2, [r1, #8]
 800a7aa:	690b      	ldr	r3, [r1, #16]
 800a7ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	bfb8      	it	lt
 800a7b4:	4613      	movlt	r3, r2
 800a7b6:	6033      	str	r3, [r6, #0]
 800a7b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a7bc:	4607      	mov	r7, r0
 800a7be:	460c      	mov	r4, r1
 800a7c0:	b10a      	cbz	r2, 800a7c6 <_printf_common+0x26>
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	6033      	str	r3, [r6, #0]
 800a7c6:	6823      	ldr	r3, [r4, #0]
 800a7c8:	0699      	lsls	r1, r3, #26
 800a7ca:	bf42      	ittt	mi
 800a7cc:	6833      	ldrmi	r3, [r6, #0]
 800a7ce:	3302      	addmi	r3, #2
 800a7d0:	6033      	strmi	r3, [r6, #0]
 800a7d2:	6825      	ldr	r5, [r4, #0]
 800a7d4:	f015 0506 	ands.w	r5, r5, #6
 800a7d8:	d106      	bne.n	800a7e8 <_printf_common+0x48>
 800a7da:	f104 0a19 	add.w	sl, r4, #25
 800a7de:	68e3      	ldr	r3, [r4, #12]
 800a7e0:	6832      	ldr	r2, [r6, #0]
 800a7e2:	1a9b      	subs	r3, r3, r2
 800a7e4:	42ab      	cmp	r3, r5
 800a7e6:	dc26      	bgt.n	800a836 <_printf_common+0x96>
 800a7e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a7ec:	6822      	ldr	r2, [r4, #0]
 800a7ee:	3b00      	subs	r3, #0
 800a7f0:	bf18      	it	ne
 800a7f2:	2301      	movne	r3, #1
 800a7f4:	0692      	lsls	r2, r2, #26
 800a7f6:	d42b      	bmi.n	800a850 <_printf_common+0xb0>
 800a7f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a7fc:	4641      	mov	r1, r8
 800a7fe:	4638      	mov	r0, r7
 800a800:	47c8      	blx	r9
 800a802:	3001      	adds	r0, #1
 800a804:	d01e      	beq.n	800a844 <_printf_common+0xa4>
 800a806:	6823      	ldr	r3, [r4, #0]
 800a808:	6922      	ldr	r2, [r4, #16]
 800a80a:	f003 0306 	and.w	r3, r3, #6
 800a80e:	2b04      	cmp	r3, #4
 800a810:	bf02      	ittt	eq
 800a812:	68e5      	ldreq	r5, [r4, #12]
 800a814:	6833      	ldreq	r3, [r6, #0]
 800a816:	1aed      	subeq	r5, r5, r3
 800a818:	68a3      	ldr	r3, [r4, #8]
 800a81a:	bf0c      	ite	eq
 800a81c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a820:	2500      	movne	r5, #0
 800a822:	4293      	cmp	r3, r2
 800a824:	bfc4      	itt	gt
 800a826:	1a9b      	subgt	r3, r3, r2
 800a828:	18ed      	addgt	r5, r5, r3
 800a82a:	2600      	movs	r6, #0
 800a82c:	341a      	adds	r4, #26
 800a82e:	42b5      	cmp	r5, r6
 800a830:	d11a      	bne.n	800a868 <_printf_common+0xc8>
 800a832:	2000      	movs	r0, #0
 800a834:	e008      	b.n	800a848 <_printf_common+0xa8>
 800a836:	2301      	movs	r3, #1
 800a838:	4652      	mov	r2, sl
 800a83a:	4641      	mov	r1, r8
 800a83c:	4638      	mov	r0, r7
 800a83e:	47c8      	blx	r9
 800a840:	3001      	adds	r0, #1
 800a842:	d103      	bne.n	800a84c <_printf_common+0xac>
 800a844:	f04f 30ff 	mov.w	r0, #4294967295
 800a848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a84c:	3501      	adds	r5, #1
 800a84e:	e7c6      	b.n	800a7de <_printf_common+0x3e>
 800a850:	18e1      	adds	r1, r4, r3
 800a852:	1c5a      	adds	r2, r3, #1
 800a854:	2030      	movs	r0, #48	@ 0x30
 800a856:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a85a:	4422      	add	r2, r4
 800a85c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a860:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a864:	3302      	adds	r3, #2
 800a866:	e7c7      	b.n	800a7f8 <_printf_common+0x58>
 800a868:	2301      	movs	r3, #1
 800a86a:	4622      	mov	r2, r4
 800a86c:	4641      	mov	r1, r8
 800a86e:	4638      	mov	r0, r7
 800a870:	47c8      	blx	r9
 800a872:	3001      	adds	r0, #1
 800a874:	d0e6      	beq.n	800a844 <_printf_common+0xa4>
 800a876:	3601      	adds	r6, #1
 800a878:	e7d9      	b.n	800a82e <_printf_common+0x8e>
	...

0800a87c <_printf_i>:
 800a87c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a880:	7e0f      	ldrb	r7, [r1, #24]
 800a882:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a884:	2f78      	cmp	r7, #120	@ 0x78
 800a886:	4691      	mov	r9, r2
 800a888:	4680      	mov	r8, r0
 800a88a:	460c      	mov	r4, r1
 800a88c:	469a      	mov	sl, r3
 800a88e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a892:	d807      	bhi.n	800a8a4 <_printf_i+0x28>
 800a894:	2f62      	cmp	r7, #98	@ 0x62
 800a896:	d80a      	bhi.n	800a8ae <_printf_i+0x32>
 800a898:	2f00      	cmp	r7, #0
 800a89a:	f000 80d2 	beq.w	800aa42 <_printf_i+0x1c6>
 800a89e:	2f58      	cmp	r7, #88	@ 0x58
 800a8a0:	f000 80b9 	beq.w	800aa16 <_printf_i+0x19a>
 800a8a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a8ac:	e03a      	b.n	800a924 <_printf_i+0xa8>
 800a8ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a8b2:	2b15      	cmp	r3, #21
 800a8b4:	d8f6      	bhi.n	800a8a4 <_printf_i+0x28>
 800a8b6:	a101      	add	r1, pc, #4	@ (adr r1, 800a8bc <_printf_i+0x40>)
 800a8b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8bc:	0800a915 	.word	0x0800a915
 800a8c0:	0800a929 	.word	0x0800a929
 800a8c4:	0800a8a5 	.word	0x0800a8a5
 800a8c8:	0800a8a5 	.word	0x0800a8a5
 800a8cc:	0800a8a5 	.word	0x0800a8a5
 800a8d0:	0800a8a5 	.word	0x0800a8a5
 800a8d4:	0800a929 	.word	0x0800a929
 800a8d8:	0800a8a5 	.word	0x0800a8a5
 800a8dc:	0800a8a5 	.word	0x0800a8a5
 800a8e0:	0800a8a5 	.word	0x0800a8a5
 800a8e4:	0800a8a5 	.word	0x0800a8a5
 800a8e8:	0800aa29 	.word	0x0800aa29
 800a8ec:	0800a953 	.word	0x0800a953
 800a8f0:	0800a9e3 	.word	0x0800a9e3
 800a8f4:	0800a8a5 	.word	0x0800a8a5
 800a8f8:	0800a8a5 	.word	0x0800a8a5
 800a8fc:	0800aa4b 	.word	0x0800aa4b
 800a900:	0800a8a5 	.word	0x0800a8a5
 800a904:	0800a953 	.word	0x0800a953
 800a908:	0800a8a5 	.word	0x0800a8a5
 800a90c:	0800a8a5 	.word	0x0800a8a5
 800a910:	0800a9eb 	.word	0x0800a9eb
 800a914:	6833      	ldr	r3, [r6, #0]
 800a916:	1d1a      	adds	r2, r3, #4
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	6032      	str	r2, [r6, #0]
 800a91c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a920:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a924:	2301      	movs	r3, #1
 800a926:	e09d      	b.n	800aa64 <_printf_i+0x1e8>
 800a928:	6833      	ldr	r3, [r6, #0]
 800a92a:	6820      	ldr	r0, [r4, #0]
 800a92c:	1d19      	adds	r1, r3, #4
 800a92e:	6031      	str	r1, [r6, #0]
 800a930:	0606      	lsls	r6, r0, #24
 800a932:	d501      	bpl.n	800a938 <_printf_i+0xbc>
 800a934:	681d      	ldr	r5, [r3, #0]
 800a936:	e003      	b.n	800a940 <_printf_i+0xc4>
 800a938:	0645      	lsls	r5, r0, #25
 800a93a:	d5fb      	bpl.n	800a934 <_printf_i+0xb8>
 800a93c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a940:	2d00      	cmp	r5, #0
 800a942:	da03      	bge.n	800a94c <_printf_i+0xd0>
 800a944:	232d      	movs	r3, #45	@ 0x2d
 800a946:	426d      	negs	r5, r5
 800a948:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a94c:	4859      	ldr	r0, [pc, #356]	@ (800aab4 <_printf_i+0x238>)
 800a94e:	230a      	movs	r3, #10
 800a950:	e011      	b.n	800a976 <_printf_i+0xfa>
 800a952:	6821      	ldr	r1, [r4, #0]
 800a954:	6833      	ldr	r3, [r6, #0]
 800a956:	0608      	lsls	r0, r1, #24
 800a958:	f853 5b04 	ldr.w	r5, [r3], #4
 800a95c:	d402      	bmi.n	800a964 <_printf_i+0xe8>
 800a95e:	0649      	lsls	r1, r1, #25
 800a960:	bf48      	it	mi
 800a962:	b2ad      	uxthmi	r5, r5
 800a964:	2f6f      	cmp	r7, #111	@ 0x6f
 800a966:	4853      	ldr	r0, [pc, #332]	@ (800aab4 <_printf_i+0x238>)
 800a968:	6033      	str	r3, [r6, #0]
 800a96a:	bf14      	ite	ne
 800a96c:	230a      	movne	r3, #10
 800a96e:	2308      	moveq	r3, #8
 800a970:	2100      	movs	r1, #0
 800a972:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a976:	6866      	ldr	r6, [r4, #4]
 800a978:	60a6      	str	r6, [r4, #8]
 800a97a:	2e00      	cmp	r6, #0
 800a97c:	bfa2      	ittt	ge
 800a97e:	6821      	ldrge	r1, [r4, #0]
 800a980:	f021 0104 	bicge.w	r1, r1, #4
 800a984:	6021      	strge	r1, [r4, #0]
 800a986:	b90d      	cbnz	r5, 800a98c <_printf_i+0x110>
 800a988:	2e00      	cmp	r6, #0
 800a98a:	d04b      	beq.n	800aa24 <_printf_i+0x1a8>
 800a98c:	4616      	mov	r6, r2
 800a98e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a992:	fb03 5711 	mls	r7, r3, r1, r5
 800a996:	5dc7      	ldrb	r7, [r0, r7]
 800a998:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a99c:	462f      	mov	r7, r5
 800a99e:	42bb      	cmp	r3, r7
 800a9a0:	460d      	mov	r5, r1
 800a9a2:	d9f4      	bls.n	800a98e <_printf_i+0x112>
 800a9a4:	2b08      	cmp	r3, #8
 800a9a6:	d10b      	bne.n	800a9c0 <_printf_i+0x144>
 800a9a8:	6823      	ldr	r3, [r4, #0]
 800a9aa:	07df      	lsls	r7, r3, #31
 800a9ac:	d508      	bpl.n	800a9c0 <_printf_i+0x144>
 800a9ae:	6923      	ldr	r3, [r4, #16]
 800a9b0:	6861      	ldr	r1, [r4, #4]
 800a9b2:	4299      	cmp	r1, r3
 800a9b4:	bfde      	ittt	le
 800a9b6:	2330      	movle	r3, #48	@ 0x30
 800a9b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a9bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a9c0:	1b92      	subs	r2, r2, r6
 800a9c2:	6122      	str	r2, [r4, #16]
 800a9c4:	f8cd a000 	str.w	sl, [sp]
 800a9c8:	464b      	mov	r3, r9
 800a9ca:	aa03      	add	r2, sp, #12
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	4640      	mov	r0, r8
 800a9d0:	f7ff fee6 	bl	800a7a0 <_printf_common>
 800a9d4:	3001      	adds	r0, #1
 800a9d6:	d14a      	bne.n	800aa6e <_printf_i+0x1f2>
 800a9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9dc:	b004      	add	sp, #16
 800a9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	f043 0320 	orr.w	r3, r3, #32
 800a9e8:	6023      	str	r3, [r4, #0]
 800a9ea:	4833      	ldr	r0, [pc, #204]	@ (800aab8 <_printf_i+0x23c>)
 800a9ec:	2778      	movs	r7, #120	@ 0x78
 800a9ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	6831      	ldr	r1, [r6, #0]
 800a9f6:	061f      	lsls	r7, r3, #24
 800a9f8:	f851 5b04 	ldr.w	r5, [r1], #4
 800a9fc:	d402      	bmi.n	800aa04 <_printf_i+0x188>
 800a9fe:	065f      	lsls	r7, r3, #25
 800aa00:	bf48      	it	mi
 800aa02:	b2ad      	uxthmi	r5, r5
 800aa04:	6031      	str	r1, [r6, #0]
 800aa06:	07d9      	lsls	r1, r3, #31
 800aa08:	bf44      	itt	mi
 800aa0a:	f043 0320 	orrmi.w	r3, r3, #32
 800aa0e:	6023      	strmi	r3, [r4, #0]
 800aa10:	b11d      	cbz	r5, 800aa1a <_printf_i+0x19e>
 800aa12:	2310      	movs	r3, #16
 800aa14:	e7ac      	b.n	800a970 <_printf_i+0xf4>
 800aa16:	4827      	ldr	r0, [pc, #156]	@ (800aab4 <_printf_i+0x238>)
 800aa18:	e7e9      	b.n	800a9ee <_printf_i+0x172>
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	f023 0320 	bic.w	r3, r3, #32
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	e7f6      	b.n	800aa12 <_printf_i+0x196>
 800aa24:	4616      	mov	r6, r2
 800aa26:	e7bd      	b.n	800a9a4 <_printf_i+0x128>
 800aa28:	6833      	ldr	r3, [r6, #0]
 800aa2a:	6825      	ldr	r5, [r4, #0]
 800aa2c:	6961      	ldr	r1, [r4, #20]
 800aa2e:	1d18      	adds	r0, r3, #4
 800aa30:	6030      	str	r0, [r6, #0]
 800aa32:	062e      	lsls	r6, r5, #24
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	d501      	bpl.n	800aa3c <_printf_i+0x1c0>
 800aa38:	6019      	str	r1, [r3, #0]
 800aa3a:	e002      	b.n	800aa42 <_printf_i+0x1c6>
 800aa3c:	0668      	lsls	r0, r5, #25
 800aa3e:	d5fb      	bpl.n	800aa38 <_printf_i+0x1bc>
 800aa40:	8019      	strh	r1, [r3, #0]
 800aa42:	2300      	movs	r3, #0
 800aa44:	6123      	str	r3, [r4, #16]
 800aa46:	4616      	mov	r6, r2
 800aa48:	e7bc      	b.n	800a9c4 <_printf_i+0x148>
 800aa4a:	6833      	ldr	r3, [r6, #0]
 800aa4c:	1d1a      	adds	r2, r3, #4
 800aa4e:	6032      	str	r2, [r6, #0]
 800aa50:	681e      	ldr	r6, [r3, #0]
 800aa52:	6862      	ldr	r2, [r4, #4]
 800aa54:	2100      	movs	r1, #0
 800aa56:	4630      	mov	r0, r6
 800aa58:	f7f5 fbba 	bl	80001d0 <memchr>
 800aa5c:	b108      	cbz	r0, 800aa62 <_printf_i+0x1e6>
 800aa5e:	1b80      	subs	r0, r0, r6
 800aa60:	6060      	str	r0, [r4, #4]
 800aa62:	6863      	ldr	r3, [r4, #4]
 800aa64:	6123      	str	r3, [r4, #16]
 800aa66:	2300      	movs	r3, #0
 800aa68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa6c:	e7aa      	b.n	800a9c4 <_printf_i+0x148>
 800aa6e:	6923      	ldr	r3, [r4, #16]
 800aa70:	4632      	mov	r2, r6
 800aa72:	4649      	mov	r1, r9
 800aa74:	4640      	mov	r0, r8
 800aa76:	47d0      	blx	sl
 800aa78:	3001      	adds	r0, #1
 800aa7a:	d0ad      	beq.n	800a9d8 <_printf_i+0x15c>
 800aa7c:	6823      	ldr	r3, [r4, #0]
 800aa7e:	079b      	lsls	r3, r3, #30
 800aa80:	d413      	bmi.n	800aaaa <_printf_i+0x22e>
 800aa82:	68e0      	ldr	r0, [r4, #12]
 800aa84:	9b03      	ldr	r3, [sp, #12]
 800aa86:	4298      	cmp	r0, r3
 800aa88:	bfb8      	it	lt
 800aa8a:	4618      	movlt	r0, r3
 800aa8c:	e7a6      	b.n	800a9dc <_printf_i+0x160>
 800aa8e:	2301      	movs	r3, #1
 800aa90:	4632      	mov	r2, r6
 800aa92:	4649      	mov	r1, r9
 800aa94:	4640      	mov	r0, r8
 800aa96:	47d0      	blx	sl
 800aa98:	3001      	adds	r0, #1
 800aa9a:	d09d      	beq.n	800a9d8 <_printf_i+0x15c>
 800aa9c:	3501      	adds	r5, #1
 800aa9e:	68e3      	ldr	r3, [r4, #12]
 800aaa0:	9903      	ldr	r1, [sp, #12]
 800aaa2:	1a5b      	subs	r3, r3, r1
 800aaa4:	42ab      	cmp	r3, r5
 800aaa6:	dcf2      	bgt.n	800aa8e <_printf_i+0x212>
 800aaa8:	e7eb      	b.n	800aa82 <_printf_i+0x206>
 800aaaa:	2500      	movs	r5, #0
 800aaac:	f104 0619 	add.w	r6, r4, #25
 800aab0:	e7f5      	b.n	800aa9e <_printf_i+0x222>
 800aab2:	bf00      	nop
 800aab4:	0800eae6 	.word	0x0800eae6
 800aab8:	0800eaf7 	.word	0x0800eaf7

0800aabc <_scanf_float>:
 800aabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac0:	b087      	sub	sp, #28
 800aac2:	4617      	mov	r7, r2
 800aac4:	9303      	str	r3, [sp, #12]
 800aac6:	688b      	ldr	r3, [r1, #8]
 800aac8:	1e5a      	subs	r2, r3, #1
 800aaca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800aace:	bf81      	itttt	hi
 800aad0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800aad4:	eb03 0b05 	addhi.w	fp, r3, r5
 800aad8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800aadc:	608b      	strhi	r3, [r1, #8]
 800aade:	680b      	ldr	r3, [r1, #0]
 800aae0:	460a      	mov	r2, r1
 800aae2:	f04f 0500 	mov.w	r5, #0
 800aae6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800aaea:	f842 3b1c 	str.w	r3, [r2], #28
 800aaee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aaf2:	4680      	mov	r8, r0
 800aaf4:	460c      	mov	r4, r1
 800aaf6:	bf98      	it	ls
 800aaf8:	f04f 0b00 	movls.w	fp, #0
 800aafc:	9201      	str	r2, [sp, #4]
 800aafe:	4616      	mov	r6, r2
 800ab00:	46aa      	mov	sl, r5
 800ab02:	46a9      	mov	r9, r5
 800ab04:	9502      	str	r5, [sp, #8]
 800ab06:	68a2      	ldr	r2, [r4, #8]
 800ab08:	b152      	cbz	r2, 800ab20 <_scanf_float+0x64>
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	2b4e      	cmp	r3, #78	@ 0x4e
 800ab10:	d864      	bhi.n	800abdc <_scanf_float+0x120>
 800ab12:	2b40      	cmp	r3, #64	@ 0x40
 800ab14:	d83c      	bhi.n	800ab90 <_scanf_float+0xd4>
 800ab16:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ab1a:	b2c8      	uxtb	r0, r1
 800ab1c:	280e      	cmp	r0, #14
 800ab1e:	d93a      	bls.n	800ab96 <_scanf_float+0xda>
 800ab20:	f1b9 0f00 	cmp.w	r9, #0
 800ab24:	d003      	beq.n	800ab2e <_scanf_float+0x72>
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab32:	f1ba 0f01 	cmp.w	sl, #1
 800ab36:	f200 8117 	bhi.w	800ad68 <_scanf_float+0x2ac>
 800ab3a:	9b01      	ldr	r3, [sp, #4]
 800ab3c:	429e      	cmp	r6, r3
 800ab3e:	f200 8108 	bhi.w	800ad52 <_scanf_float+0x296>
 800ab42:	2001      	movs	r0, #1
 800ab44:	b007      	add	sp, #28
 800ab46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab4a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ab4e:	2a0d      	cmp	r2, #13
 800ab50:	d8e6      	bhi.n	800ab20 <_scanf_float+0x64>
 800ab52:	a101      	add	r1, pc, #4	@ (adr r1, 800ab58 <_scanf_float+0x9c>)
 800ab54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ab58:	0800ac9f 	.word	0x0800ac9f
 800ab5c:	0800ab21 	.word	0x0800ab21
 800ab60:	0800ab21 	.word	0x0800ab21
 800ab64:	0800ab21 	.word	0x0800ab21
 800ab68:	0800acff 	.word	0x0800acff
 800ab6c:	0800acd7 	.word	0x0800acd7
 800ab70:	0800ab21 	.word	0x0800ab21
 800ab74:	0800ab21 	.word	0x0800ab21
 800ab78:	0800acad 	.word	0x0800acad
 800ab7c:	0800ab21 	.word	0x0800ab21
 800ab80:	0800ab21 	.word	0x0800ab21
 800ab84:	0800ab21 	.word	0x0800ab21
 800ab88:	0800ab21 	.word	0x0800ab21
 800ab8c:	0800ac65 	.word	0x0800ac65
 800ab90:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ab94:	e7db      	b.n	800ab4e <_scanf_float+0x92>
 800ab96:	290e      	cmp	r1, #14
 800ab98:	d8c2      	bhi.n	800ab20 <_scanf_float+0x64>
 800ab9a:	a001      	add	r0, pc, #4	@ (adr r0, 800aba0 <_scanf_float+0xe4>)
 800ab9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aba0:	0800ac55 	.word	0x0800ac55
 800aba4:	0800ab21 	.word	0x0800ab21
 800aba8:	0800ac55 	.word	0x0800ac55
 800abac:	0800aceb 	.word	0x0800aceb
 800abb0:	0800ab21 	.word	0x0800ab21
 800abb4:	0800abfd 	.word	0x0800abfd
 800abb8:	0800ac3b 	.word	0x0800ac3b
 800abbc:	0800ac3b 	.word	0x0800ac3b
 800abc0:	0800ac3b 	.word	0x0800ac3b
 800abc4:	0800ac3b 	.word	0x0800ac3b
 800abc8:	0800ac3b 	.word	0x0800ac3b
 800abcc:	0800ac3b 	.word	0x0800ac3b
 800abd0:	0800ac3b 	.word	0x0800ac3b
 800abd4:	0800ac3b 	.word	0x0800ac3b
 800abd8:	0800ac3b 	.word	0x0800ac3b
 800abdc:	2b6e      	cmp	r3, #110	@ 0x6e
 800abde:	d809      	bhi.n	800abf4 <_scanf_float+0x138>
 800abe0:	2b60      	cmp	r3, #96	@ 0x60
 800abe2:	d8b2      	bhi.n	800ab4a <_scanf_float+0x8e>
 800abe4:	2b54      	cmp	r3, #84	@ 0x54
 800abe6:	d07b      	beq.n	800ace0 <_scanf_float+0x224>
 800abe8:	2b59      	cmp	r3, #89	@ 0x59
 800abea:	d199      	bne.n	800ab20 <_scanf_float+0x64>
 800abec:	2d07      	cmp	r5, #7
 800abee:	d197      	bne.n	800ab20 <_scanf_float+0x64>
 800abf0:	2508      	movs	r5, #8
 800abf2:	e02c      	b.n	800ac4e <_scanf_float+0x192>
 800abf4:	2b74      	cmp	r3, #116	@ 0x74
 800abf6:	d073      	beq.n	800ace0 <_scanf_float+0x224>
 800abf8:	2b79      	cmp	r3, #121	@ 0x79
 800abfa:	e7f6      	b.n	800abea <_scanf_float+0x12e>
 800abfc:	6821      	ldr	r1, [r4, #0]
 800abfe:	05c8      	lsls	r0, r1, #23
 800ac00:	d51b      	bpl.n	800ac3a <_scanf_float+0x17e>
 800ac02:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ac06:	6021      	str	r1, [r4, #0]
 800ac08:	f109 0901 	add.w	r9, r9, #1
 800ac0c:	f1bb 0f00 	cmp.w	fp, #0
 800ac10:	d003      	beq.n	800ac1a <_scanf_float+0x15e>
 800ac12:	3201      	adds	r2, #1
 800ac14:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac18:	60a2      	str	r2, [r4, #8]
 800ac1a:	68a3      	ldr	r3, [r4, #8]
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	60a3      	str	r3, [r4, #8]
 800ac20:	6923      	ldr	r3, [r4, #16]
 800ac22:	3301      	adds	r3, #1
 800ac24:	6123      	str	r3, [r4, #16]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	3b01      	subs	r3, #1
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	607b      	str	r3, [r7, #4]
 800ac2e:	f340 8087 	ble.w	800ad40 <_scanf_float+0x284>
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	3301      	adds	r3, #1
 800ac36:	603b      	str	r3, [r7, #0]
 800ac38:	e765      	b.n	800ab06 <_scanf_float+0x4a>
 800ac3a:	eb1a 0105 	adds.w	r1, sl, r5
 800ac3e:	f47f af6f 	bne.w	800ab20 <_scanf_float+0x64>
 800ac42:	6822      	ldr	r2, [r4, #0]
 800ac44:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ac48:	6022      	str	r2, [r4, #0]
 800ac4a:	460d      	mov	r5, r1
 800ac4c:	468a      	mov	sl, r1
 800ac4e:	f806 3b01 	strb.w	r3, [r6], #1
 800ac52:	e7e2      	b.n	800ac1a <_scanf_float+0x15e>
 800ac54:	6822      	ldr	r2, [r4, #0]
 800ac56:	0610      	lsls	r0, r2, #24
 800ac58:	f57f af62 	bpl.w	800ab20 <_scanf_float+0x64>
 800ac5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ac60:	6022      	str	r2, [r4, #0]
 800ac62:	e7f4      	b.n	800ac4e <_scanf_float+0x192>
 800ac64:	f1ba 0f00 	cmp.w	sl, #0
 800ac68:	d10e      	bne.n	800ac88 <_scanf_float+0x1cc>
 800ac6a:	f1b9 0f00 	cmp.w	r9, #0
 800ac6e:	d10e      	bne.n	800ac8e <_scanf_float+0x1d2>
 800ac70:	6822      	ldr	r2, [r4, #0]
 800ac72:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ac76:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ac7a:	d108      	bne.n	800ac8e <_scanf_float+0x1d2>
 800ac7c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac80:	6022      	str	r2, [r4, #0]
 800ac82:	f04f 0a01 	mov.w	sl, #1
 800ac86:	e7e2      	b.n	800ac4e <_scanf_float+0x192>
 800ac88:	f1ba 0f02 	cmp.w	sl, #2
 800ac8c:	d055      	beq.n	800ad3a <_scanf_float+0x27e>
 800ac8e:	2d01      	cmp	r5, #1
 800ac90:	d002      	beq.n	800ac98 <_scanf_float+0x1dc>
 800ac92:	2d04      	cmp	r5, #4
 800ac94:	f47f af44 	bne.w	800ab20 <_scanf_float+0x64>
 800ac98:	3501      	adds	r5, #1
 800ac9a:	b2ed      	uxtb	r5, r5
 800ac9c:	e7d7      	b.n	800ac4e <_scanf_float+0x192>
 800ac9e:	f1ba 0f01 	cmp.w	sl, #1
 800aca2:	f47f af3d 	bne.w	800ab20 <_scanf_float+0x64>
 800aca6:	f04f 0a02 	mov.w	sl, #2
 800acaa:	e7d0      	b.n	800ac4e <_scanf_float+0x192>
 800acac:	b97d      	cbnz	r5, 800acce <_scanf_float+0x212>
 800acae:	f1b9 0f00 	cmp.w	r9, #0
 800acb2:	f47f af38 	bne.w	800ab26 <_scanf_float+0x6a>
 800acb6:	6822      	ldr	r2, [r4, #0]
 800acb8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800acbc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800acc0:	f040 8108 	bne.w	800aed4 <_scanf_float+0x418>
 800acc4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800acc8:	6022      	str	r2, [r4, #0]
 800acca:	2501      	movs	r5, #1
 800accc:	e7bf      	b.n	800ac4e <_scanf_float+0x192>
 800acce:	2d03      	cmp	r5, #3
 800acd0:	d0e2      	beq.n	800ac98 <_scanf_float+0x1dc>
 800acd2:	2d05      	cmp	r5, #5
 800acd4:	e7de      	b.n	800ac94 <_scanf_float+0x1d8>
 800acd6:	2d02      	cmp	r5, #2
 800acd8:	f47f af22 	bne.w	800ab20 <_scanf_float+0x64>
 800acdc:	2503      	movs	r5, #3
 800acde:	e7b6      	b.n	800ac4e <_scanf_float+0x192>
 800ace0:	2d06      	cmp	r5, #6
 800ace2:	f47f af1d 	bne.w	800ab20 <_scanf_float+0x64>
 800ace6:	2507      	movs	r5, #7
 800ace8:	e7b1      	b.n	800ac4e <_scanf_float+0x192>
 800acea:	6822      	ldr	r2, [r4, #0]
 800acec:	0591      	lsls	r1, r2, #22
 800acee:	f57f af17 	bpl.w	800ab20 <_scanf_float+0x64>
 800acf2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800acf6:	6022      	str	r2, [r4, #0]
 800acf8:	f8cd 9008 	str.w	r9, [sp, #8]
 800acfc:	e7a7      	b.n	800ac4e <_scanf_float+0x192>
 800acfe:	6822      	ldr	r2, [r4, #0]
 800ad00:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ad04:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ad08:	d006      	beq.n	800ad18 <_scanf_float+0x25c>
 800ad0a:	0550      	lsls	r0, r2, #21
 800ad0c:	f57f af08 	bpl.w	800ab20 <_scanf_float+0x64>
 800ad10:	f1b9 0f00 	cmp.w	r9, #0
 800ad14:	f000 80de 	beq.w	800aed4 <_scanf_float+0x418>
 800ad18:	0591      	lsls	r1, r2, #22
 800ad1a:	bf58      	it	pl
 800ad1c:	9902      	ldrpl	r1, [sp, #8]
 800ad1e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ad22:	bf58      	it	pl
 800ad24:	eba9 0101 	subpl.w	r1, r9, r1
 800ad28:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ad2c:	bf58      	it	pl
 800ad2e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ad32:	6022      	str	r2, [r4, #0]
 800ad34:	f04f 0900 	mov.w	r9, #0
 800ad38:	e789      	b.n	800ac4e <_scanf_float+0x192>
 800ad3a:	f04f 0a03 	mov.w	sl, #3
 800ad3e:	e786      	b.n	800ac4e <_scanf_float+0x192>
 800ad40:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ad44:	4639      	mov	r1, r7
 800ad46:	4640      	mov	r0, r8
 800ad48:	4798      	blx	r3
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	f43f aedb 	beq.w	800ab06 <_scanf_float+0x4a>
 800ad50:	e6e6      	b.n	800ab20 <_scanf_float+0x64>
 800ad52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad5a:	463a      	mov	r2, r7
 800ad5c:	4640      	mov	r0, r8
 800ad5e:	4798      	blx	r3
 800ad60:	6923      	ldr	r3, [r4, #16]
 800ad62:	3b01      	subs	r3, #1
 800ad64:	6123      	str	r3, [r4, #16]
 800ad66:	e6e8      	b.n	800ab3a <_scanf_float+0x7e>
 800ad68:	1e6b      	subs	r3, r5, #1
 800ad6a:	2b06      	cmp	r3, #6
 800ad6c:	d824      	bhi.n	800adb8 <_scanf_float+0x2fc>
 800ad6e:	2d02      	cmp	r5, #2
 800ad70:	d836      	bhi.n	800ade0 <_scanf_float+0x324>
 800ad72:	9b01      	ldr	r3, [sp, #4]
 800ad74:	429e      	cmp	r6, r3
 800ad76:	f67f aee4 	bls.w	800ab42 <_scanf_float+0x86>
 800ad7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad82:	463a      	mov	r2, r7
 800ad84:	4640      	mov	r0, r8
 800ad86:	4798      	blx	r3
 800ad88:	6923      	ldr	r3, [r4, #16]
 800ad8a:	3b01      	subs	r3, #1
 800ad8c:	6123      	str	r3, [r4, #16]
 800ad8e:	e7f0      	b.n	800ad72 <_scanf_float+0x2b6>
 800ad90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad94:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ad98:	463a      	mov	r2, r7
 800ad9a:	4640      	mov	r0, r8
 800ad9c:	4798      	blx	r3
 800ad9e:	6923      	ldr	r3, [r4, #16]
 800ada0:	3b01      	subs	r3, #1
 800ada2:	6123      	str	r3, [r4, #16]
 800ada4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ada8:	fa5f fa8a 	uxtb.w	sl, sl
 800adac:	f1ba 0f02 	cmp.w	sl, #2
 800adb0:	d1ee      	bne.n	800ad90 <_scanf_float+0x2d4>
 800adb2:	3d03      	subs	r5, #3
 800adb4:	b2ed      	uxtb	r5, r5
 800adb6:	1b76      	subs	r6, r6, r5
 800adb8:	6823      	ldr	r3, [r4, #0]
 800adba:	05da      	lsls	r2, r3, #23
 800adbc:	d530      	bpl.n	800ae20 <_scanf_float+0x364>
 800adbe:	055b      	lsls	r3, r3, #21
 800adc0:	d511      	bpl.n	800ade6 <_scanf_float+0x32a>
 800adc2:	9b01      	ldr	r3, [sp, #4]
 800adc4:	429e      	cmp	r6, r3
 800adc6:	f67f aebc 	bls.w	800ab42 <_scanf_float+0x86>
 800adca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800adce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800add2:	463a      	mov	r2, r7
 800add4:	4640      	mov	r0, r8
 800add6:	4798      	blx	r3
 800add8:	6923      	ldr	r3, [r4, #16]
 800adda:	3b01      	subs	r3, #1
 800addc:	6123      	str	r3, [r4, #16]
 800adde:	e7f0      	b.n	800adc2 <_scanf_float+0x306>
 800ade0:	46aa      	mov	sl, r5
 800ade2:	46b3      	mov	fp, r6
 800ade4:	e7de      	b.n	800ada4 <_scanf_float+0x2e8>
 800ade6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800adea:	6923      	ldr	r3, [r4, #16]
 800adec:	2965      	cmp	r1, #101	@ 0x65
 800adee:	f103 33ff 	add.w	r3, r3, #4294967295
 800adf2:	f106 35ff 	add.w	r5, r6, #4294967295
 800adf6:	6123      	str	r3, [r4, #16]
 800adf8:	d00c      	beq.n	800ae14 <_scanf_float+0x358>
 800adfa:	2945      	cmp	r1, #69	@ 0x45
 800adfc:	d00a      	beq.n	800ae14 <_scanf_float+0x358>
 800adfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ae02:	463a      	mov	r2, r7
 800ae04:	4640      	mov	r0, r8
 800ae06:	4798      	blx	r3
 800ae08:	6923      	ldr	r3, [r4, #16]
 800ae0a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	1eb5      	subs	r5, r6, #2
 800ae12:	6123      	str	r3, [r4, #16]
 800ae14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ae18:	463a      	mov	r2, r7
 800ae1a:	4640      	mov	r0, r8
 800ae1c:	4798      	blx	r3
 800ae1e:	462e      	mov	r6, r5
 800ae20:	6822      	ldr	r2, [r4, #0]
 800ae22:	f012 0210 	ands.w	r2, r2, #16
 800ae26:	d001      	beq.n	800ae2c <_scanf_float+0x370>
 800ae28:	2000      	movs	r0, #0
 800ae2a:	e68b      	b.n	800ab44 <_scanf_float+0x88>
 800ae2c:	7032      	strb	r2, [r6, #0]
 800ae2e:	6823      	ldr	r3, [r4, #0]
 800ae30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ae34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae38:	d11c      	bne.n	800ae74 <_scanf_float+0x3b8>
 800ae3a:	9b02      	ldr	r3, [sp, #8]
 800ae3c:	454b      	cmp	r3, r9
 800ae3e:	eba3 0209 	sub.w	r2, r3, r9
 800ae42:	d123      	bne.n	800ae8c <_scanf_float+0x3d0>
 800ae44:	9901      	ldr	r1, [sp, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	4640      	mov	r0, r8
 800ae4a:	f002 fd09 	bl	800d860 <_strtod_r>
 800ae4e:	9b03      	ldr	r3, [sp, #12]
 800ae50:	6821      	ldr	r1, [r4, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f011 0f02 	tst.w	r1, #2
 800ae58:	ec57 6b10 	vmov	r6, r7, d0
 800ae5c:	f103 0204 	add.w	r2, r3, #4
 800ae60:	d01f      	beq.n	800aea2 <_scanf_float+0x3e6>
 800ae62:	9903      	ldr	r1, [sp, #12]
 800ae64:	600a      	str	r2, [r1, #0]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	e9c3 6700 	strd	r6, r7, [r3]
 800ae6c:	68e3      	ldr	r3, [r4, #12]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	60e3      	str	r3, [r4, #12]
 800ae72:	e7d9      	b.n	800ae28 <_scanf_float+0x36c>
 800ae74:	9b04      	ldr	r3, [sp, #16]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d0e4      	beq.n	800ae44 <_scanf_float+0x388>
 800ae7a:	9905      	ldr	r1, [sp, #20]
 800ae7c:	230a      	movs	r3, #10
 800ae7e:	3101      	adds	r1, #1
 800ae80:	4640      	mov	r0, r8
 800ae82:	f002 fd6d 	bl	800d960 <_strtol_r>
 800ae86:	9b04      	ldr	r3, [sp, #16]
 800ae88:	9e05      	ldr	r6, [sp, #20]
 800ae8a:	1ac2      	subs	r2, r0, r3
 800ae8c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ae90:	429e      	cmp	r6, r3
 800ae92:	bf28      	it	cs
 800ae94:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ae98:	4910      	ldr	r1, [pc, #64]	@ (800aedc <_scanf_float+0x420>)
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	f000 f954 	bl	800b148 <siprintf>
 800aea0:	e7d0      	b.n	800ae44 <_scanf_float+0x388>
 800aea2:	f011 0f04 	tst.w	r1, #4
 800aea6:	9903      	ldr	r1, [sp, #12]
 800aea8:	600a      	str	r2, [r1, #0]
 800aeaa:	d1dc      	bne.n	800ae66 <_scanf_float+0x3aa>
 800aeac:	681d      	ldr	r5, [r3, #0]
 800aeae:	4632      	mov	r2, r6
 800aeb0:	463b      	mov	r3, r7
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	4639      	mov	r1, r7
 800aeb6:	f7f5 fe39 	bl	8000b2c <__aeabi_dcmpun>
 800aeba:	b128      	cbz	r0, 800aec8 <_scanf_float+0x40c>
 800aebc:	4808      	ldr	r0, [pc, #32]	@ (800aee0 <_scanf_float+0x424>)
 800aebe:	f000 fac9 	bl	800b454 <nanf>
 800aec2:	ed85 0a00 	vstr	s0, [r5]
 800aec6:	e7d1      	b.n	800ae6c <_scanf_float+0x3b0>
 800aec8:	4630      	mov	r0, r6
 800aeca:	4639      	mov	r1, r7
 800aecc:	f7f5 fe8c 	bl	8000be8 <__aeabi_d2f>
 800aed0:	6028      	str	r0, [r5, #0]
 800aed2:	e7cb      	b.n	800ae6c <_scanf_float+0x3b0>
 800aed4:	f04f 0900 	mov.w	r9, #0
 800aed8:	e629      	b.n	800ab2e <_scanf_float+0x72>
 800aeda:	bf00      	nop
 800aedc:	0800eb08 	.word	0x0800eb08
 800aee0:	0800ee9d 	.word	0x0800ee9d

0800aee4 <std>:
 800aee4:	2300      	movs	r3, #0
 800aee6:	b510      	push	{r4, lr}
 800aee8:	4604      	mov	r4, r0
 800aeea:	e9c0 3300 	strd	r3, r3, [r0]
 800aeee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aef2:	6083      	str	r3, [r0, #8]
 800aef4:	8181      	strh	r1, [r0, #12]
 800aef6:	6643      	str	r3, [r0, #100]	@ 0x64
 800aef8:	81c2      	strh	r2, [r0, #14]
 800aefa:	6183      	str	r3, [r0, #24]
 800aefc:	4619      	mov	r1, r3
 800aefe:	2208      	movs	r2, #8
 800af00:	305c      	adds	r0, #92	@ 0x5c
 800af02:	f000 fa19 	bl	800b338 <memset>
 800af06:	4b0d      	ldr	r3, [pc, #52]	@ (800af3c <std+0x58>)
 800af08:	6263      	str	r3, [r4, #36]	@ 0x24
 800af0a:	4b0d      	ldr	r3, [pc, #52]	@ (800af40 <std+0x5c>)
 800af0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800af0e:	4b0d      	ldr	r3, [pc, #52]	@ (800af44 <std+0x60>)
 800af10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800af12:	4b0d      	ldr	r3, [pc, #52]	@ (800af48 <std+0x64>)
 800af14:	6323      	str	r3, [r4, #48]	@ 0x30
 800af16:	4b0d      	ldr	r3, [pc, #52]	@ (800af4c <std+0x68>)
 800af18:	6224      	str	r4, [r4, #32]
 800af1a:	429c      	cmp	r4, r3
 800af1c:	d006      	beq.n	800af2c <std+0x48>
 800af1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800af22:	4294      	cmp	r4, r2
 800af24:	d002      	beq.n	800af2c <std+0x48>
 800af26:	33d0      	adds	r3, #208	@ 0xd0
 800af28:	429c      	cmp	r4, r3
 800af2a:	d105      	bne.n	800af38 <std+0x54>
 800af2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800af30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af34:	f000 ba7c 	b.w	800b430 <__retarget_lock_init_recursive>
 800af38:	bd10      	pop	{r4, pc}
 800af3a:	bf00      	nop
 800af3c:	0800b189 	.word	0x0800b189
 800af40:	0800b1ab 	.word	0x0800b1ab
 800af44:	0800b1e3 	.word	0x0800b1e3
 800af48:	0800b207 	.word	0x0800b207
 800af4c:	20000ae4 	.word	0x20000ae4

0800af50 <stdio_exit_handler>:
 800af50:	4a02      	ldr	r2, [pc, #8]	@ (800af5c <stdio_exit_handler+0xc>)
 800af52:	4903      	ldr	r1, [pc, #12]	@ (800af60 <stdio_exit_handler+0x10>)
 800af54:	4803      	ldr	r0, [pc, #12]	@ (800af64 <stdio_exit_handler+0x14>)
 800af56:	f000 b869 	b.w	800b02c <_fwalk_sglue>
 800af5a:	bf00      	nop
 800af5c:	20000044 	.word	0x20000044
 800af60:	0800dfa1 	.word	0x0800dfa1
 800af64:	20000054 	.word	0x20000054

0800af68 <cleanup_stdio>:
 800af68:	6841      	ldr	r1, [r0, #4]
 800af6a:	4b0c      	ldr	r3, [pc, #48]	@ (800af9c <cleanup_stdio+0x34>)
 800af6c:	4299      	cmp	r1, r3
 800af6e:	b510      	push	{r4, lr}
 800af70:	4604      	mov	r4, r0
 800af72:	d001      	beq.n	800af78 <cleanup_stdio+0x10>
 800af74:	f003 f814 	bl	800dfa0 <_fflush_r>
 800af78:	68a1      	ldr	r1, [r4, #8]
 800af7a:	4b09      	ldr	r3, [pc, #36]	@ (800afa0 <cleanup_stdio+0x38>)
 800af7c:	4299      	cmp	r1, r3
 800af7e:	d002      	beq.n	800af86 <cleanup_stdio+0x1e>
 800af80:	4620      	mov	r0, r4
 800af82:	f003 f80d 	bl	800dfa0 <_fflush_r>
 800af86:	68e1      	ldr	r1, [r4, #12]
 800af88:	4b06      	ldr	r3, [pc, #24]	@ (800afa4 <cleanup_stdio+0x3c>)
 800af8a:	4299      	cmp	r1, r3
 800af8c:	d004      	beq.n	800af98 <cleanup_stdio+0x30>
 800af8e:	4620      	mov	r0, r4
 800af90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af94:	f003 b804 	b.w	800dfa0 <_fflush_r>
 800af98:	bd10      	pop	{r4, pc}
 800af9a:	bf00      	nop
 800af9c:	20000ae4 	.word	0x20000ae4
 800afa0:	20000b4c 	.word	0x20000b4c
 800afa4:	20000bb4 	.word	0x20000bb4

0800afa8 <global_stdio_init.part.0>:
 800afa8:	b510      	push	{r4, lr}
 800afaa:	4b0b      	ldr	r3, [pc, #44]	@ (800afd8 <global_stdio_init.part.0+0x30>)
 800afac:	4c0b      	ldr	r4, [pc, #44]	@ (800afdc <global_stdio_init.part.0+0x34>)
 800afae:	4a0c      	ldr	r2, [pc, #48]	@ (800afe0 <global_stdio_init.part.0+0x38>)
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	4620      	mov	r0, r4
 800afb4:	2200      	movs	r2, #0
 800afb6:	2104      	movs	r1, #4
 800afb8:	f7ff ff94 	bl	800aee4 <std>
 800afbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800afc0:	2201      	movs	r2, #1
 800afc2:	2109      	movs	r1, #9
 800afc4:	f7ff ff8e 	bl	800aee4 <std>
 800afc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800afcc:	2202      	movs	r2, #2
 800afce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afd2:	2112      	movs	r1, #18
 800afd4:	f7ff bf86 	b.w	800aee4 <std>
 800afd8:	20000c1c 	.word	0x20000c1c
 800afdc:	20000ae4 	.word	0x20000ae4
 800afe0:	0800af51 	.word	0x0800af51

0800afe4 <__sfp_lock_acquire>:
 800afe4:	4801      	ldr	r0, [pc, #4]	@ (800afec <__sfp_lock_acquire+0x8>)
 800afe6:	f000 ba24 	b.w	800b432 <__retarget_lock_acquire_recursive>
 800afea:	bf00      	nop
 800afec:	20000c25 	.word	0x20000c25

0800aff0 <__sfp_lock_release>:
 800aff0:	4801      	ldr	r0, [pc, #4]	@ (800aff8 <__sfp_lock_release+0x8>)
 800aff2:	f000 ba1f 	b.w	800b434 <__retarget_lock_release_recursive>
 800aff6:	bf00      	nop
 800aff8:	20000c25 	.word	0x20000c25

0800affc <__sinit>:
 800affc:	b510      	push	{r4, lr}
 800affe:	4604      	mov	r4, r0
 800b000:	f7ff fff0 	bl	800afe4 <__sfp_lock_acquire>
 800b004:	6a23      	ldr	r3, [r4, #32]
 800b006:	b11b      	cbz	r3, 800b010 <__sinit+0x14>
 800b008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b00c:	f7ff bff0 	b.w	800aff0 <__sfp_lock_release>
 800b010:	4b04      	ldr	r3, [pc, #16]	@ (800b024 <__sinit+0x28>)
 800b012:	6223      	str	r3, [r4, #32]
 800b014:	4b04      	ldr	r3, [pc, #16]	@ (800b028 <__sinit+0x2c>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d1f5      	bne.n	800b008 <__sinit+0xc>
 800b01c:	f7ff ffc4 	bl	800afa8 <global_stdio_init.part.0>
 800b020:	e7f2      	b.n	800b008 <__sinit+0xc>
 800b022:	bf00      	nop
 800b024:	0800af69 	.word	0x0800af69
 800b028:	20000c1c 	.word	0x20000c1c

0800b02c <_fwalk_sglue>:
 800b02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b030:	4607      	mov	r7, r0
 800b032:	4688      	mov	r8, r1
 800b034:	4614      	mov	r4, r2
 800b036:	2600      	movs	r6, #0
 800b038:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b03c:	f1b9 0901 	subs.w	r9, r9, #1
 800b040:	d505      	bpl.n	800b04e <_fwalk_sglue+0x22>
 800b042:	6824      	ldr	r4, [r4, #0]
 800b044:	2c00      	cmp	r4, #0
 800b046:	d1f7      	bne.n	800b038 <_fwalk_sglue+0xc>
 800b048:	4630      	mov	r0, r6
 800b04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b04e:	89ab      	ldrh	r3, [r5, #12]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d907      	bls.n	800b064 <_fwalk_sglue+0x38>
 800b054:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b058:	3301      	adds	r3, #1
 800b05a:	d003      	beq.n	800b064 <_fwalk_sglue+0x38>
 800b05c:	4629      	mov	r1, r5
 800b05e:	4638      	mov	r0, r7
 800b060:	47c0      	blx	r8
 800b062:	4306      	orrs	r6, r0
 800b064:	3568      	adds	r5, #104	@ 0x68
 800b066:	e7e9      	b.n	800b03c <_fwalk_sglue+0x10>

0800b068 <iprintf>:
 800b068:	b40f      	push	{r0, r1, r2, r3}
 800b06a:	b507      	push	{r0, r1, r2, lr}
 800b06c:	4906      	ldr	r1, [pc, #24]	@ (800b088 <iprintf+0x20>)
 800b06e:	ab04      	add	r3, sp, #16
 800b070:	6808      	ldr	r0, [r1, #0]
 800b072:	f853 2b04 	ldr.w	r2, [r3], #4
 800b076:	6881      	ldr	r1, [r0, #8]
 800b078:	9301      	str	r3, [sp, #4]
 800b07a:	f002 fdf5 	bl	800dc68 <_vfiprintf_r>
 800b07e:	b003      	add	sp, #12
 800b080:	f85d eb04 	ldr.w	lr, [sp], #4
 800b084:	b004      	add	sp, #16
 800b086:	4770      	bx	lr
 800b088:	20000050 	.word	0x20000050

0800b08c <_puts_r>:
 800b08c:	6a03      	ldr	r3, [r0, #32]
 800b08e:	b570      	push	{r4, r5, r6, lr}
 800b090:	6884      	ldr	r4, [r0, #8]
 800b092:	4605      	mov	r5, r0
 800b094:	460e      	mov	r6, r1
 800b096:	b90b      	cbnz	r3, 800b09c <_puts_r+0x10>
 800b098:	f7ff ffb0 	bl	800affc <__sinit>
 800b09c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b09e:	07db      	lsls	r3, r3, #31
 800b0a0:	d405      	bmi.n	800b0ae <_puts_r+0x22>
 800b0a2:	89a3      	ldrh	r3, [r4, #12]
 800b0a4:	0598      	lsls	r0, r3, #22
 800b0a6:	d402      	bmi.n	800b0ae <_puts_r+0x22>
 800b0a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0aa:	f000 f9c2 	bl	800b432 <__retarget_lock_acquire_recursive>
 800b0ae:	89a3      	ldrh	r3, [r4, #12]
 800b0b0:	0719      	lsls	r1, r3, #28
 800b0b2:	d502      	bpl.n	800b0ba <_puts_r+0x2e>
 800b0b4:	6923      	ldr	r3, [r4, #16]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d135      	bne.n	800b126 <_puts_r+0x9a>
 800b0ba:	4621      	mov	r1, r4
 800b0bc:	4628      	mov	r0, r5
 800b0be:	f000 f8e5 	bl	800b28c <__swsetup_r>
 800b0c2:	b380      	cbz	r0, 800b126 <_puts_r+0x9a>
 800b0c4:	f04f 35ff 	mov.w	r5, #4294967295
 800b0c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0ca:	07da      	lsls	r2, r3, #31
 800b0cc:	d405      	bmi.n	800b0da <_puts_r+0x4e>
 800b0ce:	89a3      	ldrh	r3, [r4, #12]
 800b0d0:	059b      	lsls	r3, r3, #22
 800b0d2:	d402      	bmi.n	800b0da <_puts_r+0x4e>
 800b0d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0d6:	f000 f9ad 	bl	800b434 <__retarget_lock_release_recursive>
 800b0da:	4628      	mov	r0, r5
 800b0dc:	bd70      	pop	{r4, r5, r6, pc}
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	da04      	bge.n	800b0ec <_puts_r+0x60>
 800b0e2:	69a2      	ldr	r2, [r4, #24]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	dc17      	bgt.n	800b118 <_puts_r+0x8c>
 800b0e8:	290a      	cmp	r1, #10
 800b0ea:	d015      	beq.n	800b118 <_puts_r+0x8c>
 800b0ec:	6823      	ldr	r3, [r4, #0]
 800b0ee:	1c5a      	adds	r2, r3, #1
 800b0f0:	6022      	str	r2, [r4, #0]
 800b0f2:	7019      	strb	r1, [r3, #0]
 800b0f4:	68a3      	ldr	r3, [r4, #8]
 800b0f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	60a3      	str	r3, [r4, #8]
 800b0fe:	2900      	cmp	r1, #0
 800b100:	d1ed      	bne.n	800b0de <_puts_r+0x52>
 800b102:	2b00      	cmp	r3, #0
 800b104:	da11      	bge.n	800b12a <_puts_r+0x9e>
 800b106:	4622      	mov	r2, r4
 800b108:	210a      	movs	r1, #10
 800b10a:	4628      	mov	r0, r5
 800b10c:	f000 f87f 	bl	800b20e <__swbuf_r>
 800b110:	3001      	adds	r0, #1
 800b112:	d0d7      	beq.n	800b0c4 <_puts_r+0x38>
 800b114:	250a      	movs	r5, #10
 800b116:	e7d7      	b.n	800b0c8 <_puts_r+0x3c>
 800b118:	4622      	mov	r2, r4
 800b11a:	4628      	mov	r0, r5
 800b11c:	f000 f877 	bl	800b20e <__swbuf_r>
 800b120:	3001      	adds	r0, #1
 800b122:	d1e7      	bne.n	800b0f4 <_puts_r+0x68>
 800b124:	e7ce      	b.n	800b0c4 <_puts_r+0x38>
 800b126:	3e01      	subs	r6, #1
 800b128:	e7e4      	b.n	800b0f4 <_puts_r+0x68>
 800b12a:	6823      	ldr	r3, [r4, #0]
 800b12c:	1c5a      	adds	r2, r3, #1
 800b12e:	6022      	str	r2, [r4, #0]
 800b130:	220a      	movs	r2, #10
 800b132:	701a      	strb	r2, [r3, #0]
 800b134:	e7ee      	b.n	800b114 <_puts_r+0x88>
	...

0800b138 <puts>:
 800b138:	4b02      	ldr	r3, [pc, #8]	@ (800b144 <puts+0xc>)
 800b13a:	4601      	mov	r1, r0
 800b13c:	6818      	ldr	r0, [r3, #0]
 800b13e:	f7ff bfa5 	b.w	800b08c <_puts_r>
 800b142:	bf00      	nop
 800b144:	20000050 	.word	0x20000050

0800b148 <siprintf>:
 800b148:	b40e      	push	{r1, r2, r3}
 800b14a:	b500      	push	{lr}
 800b14c:	b09c      	sub	sp, #112	@ 0x70
 800b14e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b150:	9002      	str	r0, [sp, #8]
 800b152:	9006      	str	r0, [sp, #24]
 800b154:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b158:	4809      	ldr	r0, [pc, #36]	@ (800b180 <siprintf+0x38>)
 800b15a:	9107      	str	r1, [sp, #28]
 800b15c:	9104      	str	r1, [sp, #16]
 800b15e:	4909      	ldr	r1, [pc, #36]	@ (800b184 <siprintf+0x3c>)
 800b160:	f853 2b04 	ldr.w	r2, [r3], #4
 800b164:	9105      	str	r1, [sp, #20]
 800b166:	6800      	ldr	r0, [r0, #0]
 800b168:	9301      	str	r3, [sp, #4]
 800b16a:	a902      	add	r1, sp, #8
 800b16c:	f002 fc56 	bl	800da1c <_svfiprintf_r>
 800b170:	9b02      	ldr	r3, [sp, #8]
 800b172:	2200      	movs	r2, #0
 800b174:	701a      	strb	r2, [r3, #0]
 800b176:	b01c      	add	sp, #112	@ 0x70
 800b178:	f85d eb04 	ldr.w	lr, [sp], #4
 800b17c:	b003      	add	sp, #12
 800b17e:	4770      	bx	lr
 800b180:	20000050 	.word	0x20000050
 800b184:	ffff0208 	.word	0xffff0208

0800b188 <__sread>:
 800b188:	b510      	push	{r4, lr}
 800b18a:	460c      	mov	r4, r1
 800b18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b190:	f000 f900 	bl	800b394 <_read_r>
 800b194:	2800      	cmp	r0, #0
 800b196:	bfab      	itete	ge
 800b198:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b19a:	89a3      	ldrhlt	r3, [r4, #12]
 800b19c:	181b      	addge	r3, r3, r0
 800b19e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b1a2:	bfac      	ite	ge
 800b1a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b1a6:	81a3      	strhlt	r3, [r4, #12]
 800b1a8:	bd10      	pop	{r4, pc}

0800b1aa <__swrite>:
 800b1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ae:	461f      	mov	r7, r3
 800b1b0:	898b      	ldrh	r3, [r1, #12]
 800b1b2:	05db      	lsls	r3, r3, #23
 800b1b4:	4605      	mov	r5, r0
 800b1b6:	460c      	mov	r4, r1
 800b1b8:	4616      	mov	r6, r2
 800b1ba:	d505      	bpl.n	800b1c8 <__swrite+0x1e>
 800b1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f000 f8d4 	bl	800b370 <_lseek_r>
 800b1c8:	89a3      	ldrh	r3, [r4, #12]
 800b1ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b1d2:	81a3      	strh	r3, [r4, #12]
 800b1d4:	4632      	mov	r2, r6
 800b1d6:	463b      	mov	r3, r7
 800b1d8:	4628      	mov	r0, r5
 800b1da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1de:	f000 b8eb 	b.w	800b3b8 <_write_r>

0800b1e2 <__sseek>:
 800b1e2:	b510      	push	{r4, lr}
 800b1e4:	460c      	mov	r4, r1
 800b1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ea:	f000 f8c1 	bl	800b370 <_lseek_r>
 800b1ee:	1c43      	adds	r3, r0, #1
 800b1f0:	89a3      	ldrh	r3, [r4, #12]
 800b1f2:	bf15      	itete	ne
 800b1f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b1f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b1fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b1fe:	81a3      	strheq	r3, [r4, #12]
 800b200:	bf18      	it	ne
 800b202:	81a3      	strhne	r3, [r4, #12]
 800b204:	bd10      	pop	{r4, pc}

0800b206 <__sclose>:
 800b206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b20a:	f000 b8a1 	b.w	800b350 <_close_r>

0800b20e <__swbuf_r>:
 800b20e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b210:	460e      	mov	r6, r1
 800b212:	4614      	mov	r4, r2
 800b214:	4605      	mov	r5, r0
 800b216:	b118      	cbz	r0, 800b220 <__swbuf_r+0x12>
 800b218:	6a03      	ldr	r3, [r0, #32]
 800b21a:	b90b      	cbnz	r3, 800b220 <__swbuf_r+0x12>
 800b21c:	f7ff feee 	bl	800affc <__sinit>
 800b220:	69a3      	ldr	r3, [r4, #24]
 800b222:	60a3      	str	r3, [r4, #8]
 800b224:	89a3      	ldrh	r3, [r4, #12]
 800b226:	071a      	lsls	r2, r3, #28
 800b228:	d501      	bpl.n	800b22e <__swbuf_r+0x20>
 800b22a:	6923      	ldr	r3, [r4, #16]
 800b22c:	b943      	cbnz	r3, 800b240 <__swbuf_r+0x32>
 800b22e:	4621      	mov	r1, r4
 800b230:	4628      	mov	r0, r5
 800b232:	f000 f82b 	bl	800b28c <__swsetup_r>
 800b236:	b118      	cbz	r0, 800b240 <__swbuf_r+0x32>
 800b238:	f04f 37ff 	mov.w	r7, #4294967295
 800b23c:	4638      	mov	r0, r7
 800b23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b240:	6823      	ldr	r3, [r4, #0]
 800b242:	6922      	ldr	r2, [r4, #16]
 800b244:	1a98      	subs	r0, r3, r2
 800b246:	6963      	ldr	r3, [r4, #20]
 800b248:	b2f6      	uxtb	r6, r6
 800b24a:	4283      	cmp	r3, r0
 800b24c:	4637      	mov	r7, r6
 800b24e:	dc05      	bgt.n	800b25c <__swbuf_r+0x4e>
 800b250:	4621      	mov	r1, r4
 800b252:	4628      	mov	r0, r5
 800b254:	f002 fea4 	bl	800dfa0 <_fflush_r>
 800b258:	2800      	cmp	r0, #0
 800b25a:	d1ed      	bne.n	800b238 <__swbuf_r+0x2a>
 800b25c:	68a3      	ldr	r3, [r4, #8]
 800b25e:	3b01      	subs	r3, #1
 800b260:	60a3      	str	r3, [r4, #8]
 800b262:	6823      	ldr	r3, [r4, #0]
 800b264:	1c5a      	adds	r2, r3, #1
 800b266:	6022      	str	r2, [r4, #0]
 800b268:	701e      	strb	r6, [r3, #0]
 800b26a:	6962      	ldr	r2, [r4, #20]
 800b26c:	1c43      	adds	r3, r0, #1
 800b26e:	429a      	cmp	r2, r3
 800b270:	d004      	beq.n	800b27c <__swbuf_r+0x6e>
 800b272:	89a3      	ldrh	r3, [r4, #12]
 800b274:	07db      	lsls	r3, r3, #31
 800b276:	d5e1      	bpl.n	800b23c <__swbuf_r+0x2e>
 800b278:	2e0a      	cmp	r6, #10
 800b27a:	d1df      	bne.n	800b23c <__swbuf_r+0x2e>
 800b27c:	4621      	mov	r1, r4
 800b27e:	4628      	mov	r0, r5
 800b280:	f002 fe8e 	bl	800dfa0 <_fflush_r>
 800b284:	2800      	cmp	r0, #0
 800b286:	d0d9      	beq.n	800b23c <__swbuf_r+0x2e>
 800b288:	e7d6      	b.n	800b238 <__swbuf_r+0x2a>
	...

0800b28c <__swsetup_r>:
 800b28c:	b538      	push	{r3, r4, r5, lr}
 800b28e:	4b29      	ldr	r3, [pc, #164]	@ (800b334 <__swsetup_r+0xa8>)
 800b290:	4605      	mov	r5, r0
 800b292:	6818      	ldr	r0, [r3, #0]
 800b294:	460c      	mov	r4, r1
 800b296:	b118      	cbz	r0, 800b2a0 <__swsetup_r+0x14>
 800b298:	6a03      	ldr	r3, [r0, #32]
 800b29a:	b90b      	cbnz	r3, 800b2a0 <__swsetup_r+0x14>
 800b29c:	f7ff feae 	bl	800affc <__sinit>
 800b2a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2a4:	0719      	lsls	r1, r3, #28
 800b2a6:	d422      	bmi.n	800b2ee <__swsetup_r+0x62>
 800b2a8:	06da      	lsls	r2, r3, #27
 800b2aa:	d407      	bmi.n	800b2bc <__swsetup_r+0x30>
 800b2ac:	2209      	movs	r2, #9
 800b2ae:	602a      	str	r2, [r5, #0]
 800b2b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2b4:	81a3      	strh	r3, [r4, #12]
 800b2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ba:	e033      	b.n	800b324 <__swsetup_r+0x98>
 800b2bc:	0758      	lsls	r0, r3, #29
 800b2be:	d512      	bpl.n	800b2e6 <__swsetup_r+0x5a>
 800b2c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2c2:	b141      	cbz	r1, 800b2d6 <__swsetup_r+0x4a>
 800b2c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2c8:	4299      	cmp	r1, r3
 800b2ca:	d002      	beq.n	800b2d2 <__swsetup_r+0x46>
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	f000 ff13 	bl	800c0f8 <_free_r>
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2d6:	89a3      	ldrh	r3, [r4, #12]
 800b2d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b2dc:	81a3      	strh	r3, [r4, #12]
 800b2de:	2300      	movs	r3, #0
 800b2e0:	6063      	str	r3, [r4, #4]
 800b2e2:	6923      	ldr	r3, [r4, #16]
 800b2e4:	6023      	str	r3, [r4, #0]
 800b2e6:	89a3      	ldrh	r3, [r4, #12]
 800b2e8:	f043 0308 	orr.w	r3, r3, #8
 800b2ec:	81a3      	strh	r3, [r4, #12]
 800b2ee:	6923      	ldr	r3, [r4, #16]
 800b2f0:	b94b      	cbnz	r3, 800b306 <__swsetup_r+0x7a>
 800b2f2:	89a3      	ldrh	r3, [r4, #12]
 800b2f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b2f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2fc:	d003      	beq.n	800b306 <__swsetup_r+0x7a>
 800b2fe:	4621      	mov	r1, r4
 800b300:	4628      	mov	r0, r5
 800b302:	f002 fe9b 	bl	800e03c <__smakebuf_r>
 800b306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b30a:	f013 0201 	ands.w	r2, r3, #1
 800b30e:	d00a      	beq.n	800b326 <__swsetup_r+0x9a>
 800b310:	2200      	movs	r2, #0
 800b312:	60a2      	str	r2, [r4, #8]
 800b314:	6962      	ldr	r2, [r4, #20]
 800b316:	4252      	negs	r2, r2
 800b318:	61a2      	str	r2, [r4, #24]
 800b31a:	6922      	ldr	r2, [r4, #16]
 800b31c:	b942      	cbnz	r2, 800b330 <__swsetup_r+0xa4>
 800b31e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b322:	d1c5      	bne.n	800b2b0 <__swsetup_r+0x24>
 800b324:	bd38      	pop	{r3, r4, r5, pc}
 800b326:	0799      	lsls	r1, r3, #30
 800b328:	bf58      	it	pl
 800b32a:	6962      	ldrpl	r2, [r4, #20]
 800b32c:	60a2      	str	r2, [r4, #8]
 800b32e:	e7f4      	b.n	800b31a <__swsetup_r+0x8e>
 800b330:	2000      	movs	r0, #0
 800b332:	e7f7      	b.n	800b324 <__swsetup_r+0x98>
 800b334:	20000050 	.word	0x20000050

0800b338 <memset>:
 800b338:	4402      	add	r2, r0
 800b33a:	4603      	mov	r3, r0
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d100      	bne.n	800b342 <memset+0xa>
 800b340:	4770      	bx	lr
 800b342:	f803 1b01 	strb.w	r1, [r3], #1
 800b346:	e7f9      	b.n	800b33c <memset+0x4>

0800b348 <_localeconv_r>:
 800b348:	4800      	ldr	r0, [pc, #0]	@ (800b34c <_localeconv_r+0x4>)
 800b34a:	4770      	bx	lr
 800b34c:	20000190 	.word	0x20000190

0800b350 <_close_r>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	4d06      	ldr	r5, [pc, #24]	@ (800b36c <_close_r+0x1c>)
 800b354:	2300      	movs	r3, #0
 800b356:	4604      	mov	r4, r0
 800b358:	4608      	mov	r0, r1
 800b35a:	602b      	str	r3, [r5, #0]
 800b35c:	f7f7 f960 	bl	8002620 <_close>
 800b360:	1c43      	adds	r3, r0, #1
 800b362:	d102      	bne.n	800b36a <_close_r+0x1a>
 800b364:	682b      	ldr	r3, [r5, #0]
 800b366:	b103      	cbz	r3, 800b36a <_close_r+0x1a>
 800b368:	6023      	str	r3, [r4, #0]
 800b36a:	bd38      	pop	{r3, r4, r5, pc}
 800b36c:	20000c20 	.word	0x20000c20

0800b370 <_lseek_r>:
 800b370:	b538      	push	{r3, r4, r5, lr}
 800b372:	4d07      	ldr	r5, [pc, #28]	@ (800b390 <_lseek_r+0x20>)
 800b374:	4604      	mov	r4, r0
 800b376:	4608      	mov	r0, r1
 800b378:	4611      	mov	r1, r2
 800b37a:	2200      	movs	r2, #0
 800b37c:	602a      	str	r2, [r5, #0]
 800b37e:	461a      	mov	r2, r3
 800b380:	f7f7 f975 	bl	800266e <_lseek>
 800b384:	1c43      	adds	r3, r0, #1
 800b386:	d102      	bne.n	800b38e <_lseek_r+0x1e>
 800b388:	682b      	ldr	r3, [r5, #0]
 800b38a:	b103      	cbz	r3, 800b38e <_lseek_r+0x1e>
 800b38c:	6023      	str	r3, [r4, #0]
 800b38e:	bd38      	pop	{r3, r4, r5, pc}
 800b390:	20000c20 	.word	0x20000c20

0800b394 <_read_r>:
 800b394:	b538      	push	{r3, r4, r5, lr}
 800b396:	4d07      	ldr	r5, [pc, #28]	@ (800b3b4 <_read_r+0x20>)
 800b398:	4604      	mov	r4, r0
 800b39a:	4608      	mov	r0, r1
 800b39c:	4611      	mov	r1, r2
 800b39e:	2200      	movs	r2, #0
 800b3a0:	602a      	str	r2, [r5, #0]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	f7f7 f903 	bl	80025ae <_read>
 800b3a8:	1c43      	adds	r3, r0, #1
 800b3aa:	d102      	bne.n	800b3b2 <_read_r+0x1e>
 800b3ac:	682b      	ldr	r3, [r5, #0]
 800b3ae:	b103      	cbz	r3, 800b3b2 <_read_r+0x1e>
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	bd38      	pop	{r3, r4, r5, pc}
 800b3b4:	20000c20 	.word	0x20000c20

0800b3b8 <_write_r>:
 800b3b8:	b538      	push	{r3, r4, r5, lr}
 800b3ba:	4d07      	ldr	r5, [pc, #28]	@ (800b3d8 <_write_r+0x20>)
 800b3bc:	4604      	mov	r4, r0
 800b3be:	4608      	mov	r0, r1
 800b3c0:	4611      	mov	r1, r2
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	602a      	str	r2, [r5, #0]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	f7f7 f90e 	bl	80025e8 <_write>
 800b3cc:	1c43      	adds	r3, r0, #1
 800b3ce:	d102      	bne.n	800b3d6 <_write_r+0x1e>
 800b3d0:	682b      	ldr	r3, [r5, #0]
 800b3d2:	b103      	cbz	r3, 800b3d6 <_write_r+0x1e>
 800b3d4:	6023      	str	r3, [r4, #0]
 800b3d6:	bd38      	pop	{r3, r4, r5, pc}
 800b3d8:	20000c20 	.word	0x20000c20

0800b3dc <__errno>:
 800b3dc:	4b01      	ldr	r3, [pc, #4]	@ (800b3e4 <__errno+0x8>)
 800b3de:	6818      	ldr	r0, [r3, #0]
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	20000050 	.word	0x20000050

0800b3e8 <__libc_init_array>:
 800b3e8:	b570      	push	{r4, r5, r6, lr}
 800b3ea:	4d0d      	ldr	r5, [pc, #52]	@ (800b420 <__libc_init_array+0x38>)
 800b3ec:	4c0d      	ldr	r4, [pc, #52]	@ (800b424 <__libc_init_array+0x3c>)
 800b3ee:	1b64      	subs	r4, r4, r5
 800b3f0:	10a4      	asrs	r4, r4, #2
 800b3f2:	2600      	movs	r6, #0
 800b3f4:	42a6      	cmp	r6, r4
 800b3f6:	d109      	bne.n	800b40c <__libc_init_array+0x24>
 800b3f8:	4d0b      	ldr	r5, [pc, #44]	@ (800b428 <__libc_init_array+0x40>)
 800b3fa:	4c0c      	ldr	r4, [pc, #48]	@ (800b42c <__libc_init_array+0x44>)
 800b3fc:	f003 fade 	bl	800e9bc <_init>
 800b400:	1b64      	subs	r4, r4, r5
 800b402:	10a4      	asrs	r4, r4, #2
 800b404:	2600      	movs	r6, #0
 800b406:	42a6      	cmp	r6, r4
 800b408:	d105      	bne.n	800b416 <__libc_init_array+0x2e>
 800b40a:	bd70      	pop	{r4, r5, r6, pc}
 800b40c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b410:	4798      	blx	r3
 800b412:	3601      	adds	r6, #1
 800b414:	e7ee      	b.n	800b3f4 <__libc_init_array+0xc>
 800b416:	f855 3b04 	ldr.w	r3, [r5], #4
 800b41a:	4798      	blx	r3
 800b41c:	3601      	adds	r6, #1
 800b41e:	e7f2      	b.n	800b406 <__libc_init_array+0x1e>
 800b420:	0800ef08 	.word	0x0800ef08
 800b424:	0800ef08 	.word	0x0800ef08
 800b428:	0800ef08 	.word	0x0800ef08
 800b42c:	0800ef0c 	.word	0x0800ef0c

0800b430 <__retarget_lock_init_recursive>:
 800b430:	4770      	bx	lr

0800b432 <__retarget_lock_acquire_recursive>:
 800b432:	4770      	bx	lr

0800b434 <__retarget_lock_release_recursive>:
 800b434:	4770      	bx	lr

0800b436 <memcpy>:
 800b436:	440a      	add	r2, r1
 800b438:	4291      	cmp	r1, r2
 800b43a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b43e:	d100      	bne.n	800b442 <memcpy+0xc>
 800b440:	4770      	bx	lr
 800b442:	b510      	push	{r4, lr}
 800b444:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b448:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b44c:	4291      	cmp	r1, r2
 800b44e:	d1f9      	bne.n	800b444 <memcpy+0xe>
 800b450:	bd10      	pop	{r4, pc}
	...

0800b454 <nanf>:
 800b454:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b45c <nanf+0x8>
 800b458:	4770      	bx	lr
 800b45a:	bf00      	nop
 800b45c:	7fc00000 	.word	0x7fc00000

0800b460 <quorem>:
 800b460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b464:	6903      	ldr	r3, [r0, #16]
 800b466:	690c      	ldr	r4, [r1, #16]
 800b468:	42a3      	cmp	r3, r4
 800b46a:	4607      	mov	r7, r0
 800b46c:	db7e      	blt.n	800b56c <quorem+0x10c>
 800b46e:	3c01      	subs	r4, #1
 800b470:	f101 0814 	add.w	r8, r1, #20
 800b474:	00a3      	lsls	r3, r4, #2
 800b476:	f100 0514 	add.w	r5, r0, #20
 800b47a:	9300      	str	r3, [sp, #0]
 800b47c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b480:	9301      	str	r3, [sp, #4]
 800b482:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b486:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b48a:	3301      	adds	r3, #1
 800b48c:	429a      	cmp	r2, r3
 800b48e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b492:	fbb2 f6f3 	udiv	r6, r2, r3
 800b496:	d32e      	bcc.n	800b4f6 <quorem+0x96>
 800b498:	f04f 0a00 	mov.w	sl, #0
 800b49c:	46c4      	mov	ip, r8
 800b49e:	46ae      	mov	lr, r5
 800b4a0:	46d3      	mov	fp, sl
 800b4a2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b4a6:	b298      	uxth	r0, r3
 800b4a8:	fb06 a000 	mla	r0, r6, r0, sl
 800b4ac:	0c02      	lsrs	r2, r0, #16
 800b4ae:	0c1b      	lsrs	r3, r3, #16
 800b4b0:	fb06 2303 	mla	r3, r6, r3, r2
 800b4b4:	f8de 2000 	ldr.w	r2, [lr]
 800b4b8:	b280      	uxth	r0, r0
 800b4ba:	b292      	uxth	r2, r2
 800b4bc:	1a12      	subs	r2, r2, r0
 800b4be:	445a      	add	r2, fp
 800b4c0:	f8de 0000 	ldr.w	r0, [lr]
 800b4c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b4ce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b4d2:	b292      	uxth	r2, r2
 800b4d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b4d8:	45e1      	cmp	r9, ip
 800b4da:	f84e 2b04 	str.w	r2, [lr], #4
 800b4de:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b4e2:	d2de      	bcs.n	800b4a2 <quorem+0x42>
 800b4e4:	9b00      	ldr	r3, [sp, #0]
 800b4e6:	58eb      	ldr	r3, [r5, r3]
 800b4e8:	b92b      	cbnz	r3, 800b4f6 <quorem+0x96>
 800b4ea:	9b01      	ldr	r3, [sp, #4]
 800b4ec:	3b04      	subs	r3, #4
 800b4ee:	429d      	cmp	r5, r3
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	d32f      	bcc.n	800b554 <quorem+0xf4>
 800b4f4:	613c      	str	r4, [r7, #16]
 800b4f6:	4638      	mov	r0, r7
 800b4f8:	f001 f9c2 	bl	800c880 <__mcmp>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	db25      	blt.n	800b54c <quorem+0xec>
 800b500:	4629      	mov	r1, r5
 800b502:	2000      	movs	r0, #0
 800b504:	f858 2b04 	ldr.w	r2, [r8], #4
 800b508:	f8d1 c000 	ldr.w	ip, [r1]
 800b50c:	fa1f fe82 	uxth.w	lr, r2
 800b510:	fa1f f38c 	uxth.w	r3, ip
 800b514:	eba3 030e 	sub.w	r3, r3, lr
 800b518:	4403      	add	r3, r0
 800b51a:	0c12      	lsrs	r2, r2, #16
 800b51c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b520:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b524:	b29b      	uxth	r3, r3
 800b526:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b52a:	45c1      	cmp	r9, r8
 800b52c:	f841 3b04 	str.w	r3, [r1], #4
 800b530:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b534:	d2e6      	bcs.n	800b504 <quorem+0xa4>
 800b536:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b53a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b53e:	b922      	cbnz	r2, 800b54a <quorem+0xea>
 800b540:	3b04      	subs	r3, #4
 800b542:	429d      	cmp	r5, r3
 800b544:	461a      	mov	r2, r3
 800b546:	d30b      	bcc.n	800b560 <quorem+0x100>
 800b548:	613c      	str	r4, [r7, #16]
 800b54a:	3601      	adds	r6, #1
 800b54c:	4630      	mov	r0, r6
 800b54e:	b003      	add	sp, #12
 800b550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b554:	6812      	ldr	r2, [r2, #0]
 800b556:	3b04      	subs	r3, #4
 800b558:	2a00      	cmp	r2, #0
 800b55a:	d1cb      	bne.n	800b4f4 <quorem+0x94>
 800b55c:	3c01      	subs	r4, #1
 800b55e:	e7c6      	b.n	800b4ee <quorem+0x8e>
 800b560:	6812      	ldr	r2, [r2, #0]
 800b562:	3b04      	subs	r3, #4
 800b564:	2a00      	cmp	r2, #0
 800b566:	d1ef      	bne.n	800b548 <quorem+0xe8>
 800b568:	3c01      	subs	r4, #1
 800b56a:	e7ea      	b.n	800b542 <quorem+0xe2>
 800b56c:	2000      	movs	r0, #0
 800b56e:	e7ee      	b.n	800b54e <quorem+0xee>

0800b570 <_dtoa_r>:
 800b570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b574:	69c7      	ldr	r7, [r0, #28]
 800b576:	b099      	sub	sp, #100	@ 0x64
 800b578:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b57c:	ec55 4b10 	vmov	r4, r5, d0
 800b580:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b582:	9109      	str	r1, [sp, #36]	@ 0x24
 800b584:	4683      	mov	fp, r0
 800b586:	920e      	str	r2, [sp, #56]	@ 0x38
 800b588:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b58a:	b97f      	cbnz	r7, 800b5ac <_dtoa_r+0x3c>
 800b58c:	2010      	movs	r0, #16
 800b58e:	f000 fdfd 	bl	800c18c <malloc>
 800b592:	4602      	mov	r2, r0
 800b594:	f8cb 001c 	str.w	r0, [fp, #28]
 800b598:	b920      	cbnz	r0, 800b5a4 <_dtoa_r+0x34>
 800b59a:	4ba7      	ldr	r3, [pc, #668]	@ (800b838 <_dtoa_r+0x2c8>)
 800b59c:	21ef      	movs	r1, #239	@ 0xef
 800b59e:	48a7      	ldr	r0, [pc, #668]	@ (800b83c <_dtoa_r+0x2cc>)
 800b5a0:	f002 fdee 	bl	800e180 <__assert_func>
 800b5a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b5a8:	6007      	str	r7, [r0, #0]
 800b5aa:	60c7      	str	r7, [r0, #12]
 800b5ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b5b0:	6819      	ldr	r1, [r3, #0]
 800b5b2:	b159      	cbz	r1, 800b5cc <_dtoa_r+0x5c>
 800b5b4:	685a      	ldr	r2, [r3, #4]
 800b5b6:	604a      	str	r2, [r1, #4]
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	4093      	lsls	r3, r2
 800b5bc:	608b      	str	r3, [r1, #8]
 800b5be:	4658      	mov	r0, fp
 800b5c0:	f000 feda 	bl	800c378 <_Bfree>
 800b5c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	601a      	str	r2, [r3, #0]
 800b5cc:	1e2b      	subs	r3, r5, #0
 800b5ce:	bfb9      	ittee	lt
 800b5d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b5d4:	9303      	strlt	r3, [sp, #12]
 800b5d6:	2300      	movge	r3, #0
 800b5d8:	6033      	strge	r3, [r6, #0]
 800b5da:	9f03      	ldr	r7, [sp, #12]
 800b5dc:	4b98      	ldr	r3, [pc, #608]	@ (800b840 <_dtoa_r+0x2d0>)
 800b5de:	bfbc      	itt	lt
 800b5e0:	2201      	movlt	r2, #1
 800b5e2:	6032      	strlt	r2, [r6, #0]
 800b5e4:	43bb      	bics	r3, r7
 800b5e6:	d112      	bne.n	800b60e <_dtoa_r+0x9e>
 800b5e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b5ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b5ee:	6013      	str	r3, [r2, #0]
 800b5f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b5f4:	4323      	orrs	r3, r4
 800b5f6:	f000 854d 	beq.w	800c094 <_dtoa_r+0xb24>
 800b5fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b5fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b854 <_dtoa_r+0x2e4>
 800b600:	2b00      	cmp	r3, #0
 800b602:	f000 854f 	beq.w	800c0a4 <_dtoa_r+0xb34>
 800b606:	f10a 0303 	add.w	r3, sl, #3
 800b60a:	f000 bd49 	b.w	800c0a0 <_dtoa_r+0xb30>
 800b60e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b612:	2200      	movs	r2, #0
 800b614:	ec51 0b17 	vmov	r0, r1, d7
 800b618:	2300      	movs	r3, #0
 800b61a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b61e:	f7f5 fa53 	bl	8000ac8 <__aeabi_dcmpeq>
 800b622:	4680      	mov	r8, r0
 800b624:	b158      	cbz	r0, 800b63e <_dtoa_r+0xce>
 800b626:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b628:	2301      	movs	r3, #1
 800b62a:	6013      	str	r3, [r2, #0]
 800b62c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b62e:	b113      	cbz	r3, 800b636 <_dtoa_r+0xc6>
 800b630:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b632:	4b84      	ldr	r3, [pc, #528]	@ (800b844 <_dtoa_r+0x2d4>)
 800b634:	6013      	str	r3, [r2, #0]
 800b636:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b858 <_dtoa_r+0x2e8>
 800b63a:	f000 bd33 	b.w	800c0a4 <_dtoa_r+0xb34>
 800b63e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b642:	aa16      	add	r2, sp, #88	@ 0x58
 800b644:	a917      	add	r1, sp, #92	@ 0x5c
 800b646:	4658      	mov	r0, fp
 800b648:	f001 fa3a 	bl	800cac0 <__d2b>
 800b64c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b650:	4681      	mov	r9, r0
 800b652:	2e00      	cmp	r6, #0
 800b654:	d077      	beq.n	800b746 <_dtoa_r+0x1d6>
 800b656:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b658:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b65c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b660:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b664:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b668:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b66c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b670:	4619      	mov	r1, r3
 800b672:	2200      	movs	r2, #0
 800b674:	4b74      	ldr	r3, [pc, #464]	@ (800b848 <_dtoa_r+0x2d8>)
 800b676:	f7f4 fe07 	bl	8000288 <__aeabi_dsub>
 800b67a:	a369      	add	r3, pc, #420	@ (adr r3, 800b820 <_dtoa_r+0x2b0>)
 800b67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b680:	f7f4 ffba 	bl	80005f8 <__aeabi_dmul>
 800b684:	a368      	add	r3, pc, #416	@ (adr r3, 800b828 <_dtoa_r+0x2b8>)
 800b686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68a:	f7f4 fdff 	bl	800028c <__adddf3>
 800b68e:	4604      	mov	r4, r0
 800b690:	4630      	mov	r0, r6
 800b692:	460d      	mov	r5, r1
 800b694:	f7f4 ff46 	bl	8000524 <__aeabi_i2d>
 800b698:	a365      	add	r3, pc, #404	@ (adr r3, 800b830 <_dtoa_r+0x2c0>)
 800b69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69e:	f7f4 ffab 	bl	80005f8 <__aeabi_dmul>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	f7f4 fdef 	bl	800028c <__adddf3>
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	460d      	mov	r5, r1
 800b6b2:	f7f5 fa51 	bl	8000b58 <__aeabi_d2iz>
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	4607      	mov	r7, r0
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	4620      	mov	r0, r4
 800b6be:	4629      	mov	r1, r5
 800b6c0:	f7f5 fa0c 	bl	8000adc <__aeabi_dcmplt>
 800b6c4:	b140      	cbz	r0, 800b6d8 <_dtoa_r+0x168>
 800b6c6:	4638      	mov	r0, r7
 800b6c8:	f7f4 ff2c 	bl	8000524 <__aeabi_i2d>
 800b6cc:	4622      	mov	r2, r4
 800b6ce:	462b      	mov	r3, r5
 800b6d0:	f7f5 f9fa 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6d4:	b900      	cbnz	r0, 800b6d8 <_dtoa_r+0x168>
 800b6d6:	3f01      	subs	r7, #1
 800b6d8:	2f16      	cmp	r7, #22
 800b6da:	d851      	bhi.n	800b780 <_dtoa_r+0x210>
 800b6dc:	4b5b      	ldr	r3, [pc, #364]	@ (800b84c <_dtoa_r+0x2dc>)
 800b6de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6ea:	f7f5 f9f7 	bl	8000adc <__aeabi_dcmplt>
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	d048      	beq.n	800b784 <_dtoa_r+0x214>
 800b6f2:	3f01      	subs	r7, #1
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	9312      	str	r3, [sp, #72]	@ 0x48
 800b6f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b6fa:	1b9b      	subs	r3, r3, r6
 800b6fc:	1e5a      	subs	r2, r3, #1
 800b6fe:	bf44      	itt	mi
 800b700:	f1c3 0801 	rsbmi	r8, r3, #1
 800b704:	2300      	movmi	r3, #0
 800b706:	9208      	str	r2, [sp, #32]
 800b708:	bf54      	ite	pl
 800b70a:	f04f 0800 	movpl.w	r8, #0
 800b70e:	9308      	strmi	r3, [sp, #32]
 800b710:	2f00      	cmp	r7, #0
 800b712:	db39      	blt.n	800b788 <_dtoa_r+0x218>
 800b714:	9b08      	ldr	r3, [sp, #32]
 800b716:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b718:	443b      	add	r3, r7
 800b71a:	9308      	str	r3, [sp, #32]
 800b71c:	2300      	movs	r3, #0
 800b71e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b722:	2b09      	cmp	r3, #9
 800b724:	d864      	bhi.n	800b7f0 <_dtoa_r+0x280>
 800b726:	2b05      	cmp	r3, #5
 800b728:	bfc4      	itt	gt
 800b72a:	3b04      	subgt	r3, #4
 800b72c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b72e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b730:	f1a3 0302 	sub.w	r3, r3, #2
 800b734:	bfcc      	ite	gt
 800b736:	2400      	movgt	r4, #0
 800b738:	2401      	movle	r4, #1
 800b73a:	2b03      	cmp	r3, #3
 800b73c:	d863      	bhi.n	800b806 <_dtoa_r+0x296>
 800b73e:	e8df f003 	tbb	[pc, r3]
 800b742:	372a      	.short	0x372a
 800b744:	5535      	.short	0x5535
 800b746:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b74a:	441e      	add	r6, r3
 800b74c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b750:	2b20      	cmp	r3, #32
 800b752:	bfc1      	itttt	gt
 800b754:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b758:	409f      	lslgt	r7, r3
 800b75a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b75e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b762:	bfd6      	itet	le
 800b764:	f1c3 0320 	rsble	r3, r3, #32
 800b768:	ea47 0003 	orrgt.w	r0, r7, r3
 800b76c:	fa04 f003 	lslle.w	r0, r4, r3
 800b770:	f7f4 fec8 	bl	8000504 <__aeabi_ui2d>
 800b774:	2201      	movs	r2, #1
 800b776:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b77a:	3e01      	subs	r6, #1
 800b77c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b77e:	e777      	b.n	800b670 <_dtoa_r+0x100>
 800b780:	2301      	movs	r3, #1
 800b782:	e7b8      	b.n	800b6f6 <_dtoa_r+0x186>
 800b784:	9012      	str	r0, [sp, #72]	@ 0x48
 800b786:	e7b7      	b.n	800b6f8 <_dtoa_r+0x188>
 800b788:	427b      	negs	r3, r7
 800b78a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b78c:	2300      	movs	r3, #0
 800b78e:	eba8 0807 	sub.w	r8, r8, r7
 800b792:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b794:	e7c4      	b.n	800b720 <_dtoa_r+0x1b0>
 800b796:	2300      	movs	r3, #0
 800b798:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b79a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	dc35      	bgt.n	800b80c <_dtoa_r+0x29c>
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	9300      	str	r3, [sp, #0]
 800b7a4:	9307      	str	r3, [sp, #28]
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b7aa:	e00b      	b.n	800b7c4 <_dtoa_r+0x254>
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	e7f3      	b.n	800b798 <_dtoa_r+0x228>
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7b6:	18fb      	adds	r3, r7, r3
 800b7b8:	9300      	str	r3, [sp, #0]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	9307      	str	r3, [sp, #28]
 800b7c0:	bfb8      	it	lt
 800b7c2:	2301      	movlt	r3, #1
 800b7c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	2204      	movs	r2, #4
 800b7cc:	f102 0514 	add.w	r5, r2, #20
 800b7d0:	429d      	cmp	r5, r3
 800b7d2:	d91f      	bls.n	800b814 <_dtoa_r+0x2a4>
 800b7d4:	6041      	str	r1, [r0, #4]
 800b7d6:	4658      	mov	r0, fp
 800b7d8:	f000 fd8e 	bl	800c2f8 <_Balloc>
 800b7dc:	4682      	mov	sl, r0
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	d13c      	bne.n	800b85c <_dtoa_r+0x2ec>
 800b7e2:	4b1b      	ldr	r3, [pc, #108]	@ (800b850 <_dtoa_r+0x2e0>)
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b7ea:	e6d8      	b.n	800b59e <_dtoa_r+0x2e>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e7e0      	b.n	800b7b2 <_dtoa_r+0x242>
 800b7f0:	2401      	movs	r4, #1
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b7f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	9307      	str	r3, [sp, #28]
 800b800:	2200      	movs	r2, #0
 800b802:	2312      	movs	r3, #18
 800b804:	e7d0      	b.n	800b7a8 <_dtoa_r+0x238>
 800b806:	2301      	movs	r3, #1
 800b808:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b80a:	e7f5      	b.n	800b7f8 <_dtoa_r+0x288>
 800b80c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b80e:	9300      	str	r3, [sp, #0]
 800b810:	9307      	str	r3, [sp, #28]
 800b812:	e7d7      	b.n	800b7c4 <_dtoa_r+0x254>
 800b814:	3101      	adds	r1, #1
 800b816:	0052      	lsls	r2, r2, #1
 800b818:	e7d8      	b.n	800b7cc <_dtoa_r+0x25c>
 800b81a:	bf00      	nop
 800b81c:	f3af 8000 	nop.w
 800b820:	636f4361 	.word	0x636f4361
 800b824:	3fd287a7 	.word	0x3fd287a7
 800b828:	8b60c8b3 	.word	0x8b60c8b3
 800b82c:	3fc68a28 	.word	0x3fc68a28
 800b830:	509f79fb 	.word	0x509f79fb
 800b834:	3fd34413 	.word	0x3fd34413
 800b838:	0800eb1a 	.word	0x0800eb1a
 800b83c:	0800eb31 	.word	0x0800eb31
 800b840:	7ff00000 	.word	0x7ff00000
 800b844:	0800eae5 	.word	0x0800eae5
 800b848:	3ff80000 	.word	0x3ff80000
 800b84c:	0800ec28 	.word	0x0800ec28
 800b850:	0800eb89 	.word	0x0800eb89
 800b854:	0800eb16 	.word	0x0800eb16
 800b858:	0800eae4 	.word	0x0800eae4
 800b85c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b860:	6018      	str	r0, [r3, #0]
 800b862:	9b07      	ldr	r3, [sp, #28]
 800b864:	2b0e      	cmp	r3, #14
 800b866:	f200 80a4 	bhi.w	800b9b2 <_dtoa_r+0x442>
 800b86a:	2c00      	cmp	r4, #0
 800b86c:	f000 80a1 	beq.w	800b9b2 <_dtoa_r+0x442>
 800b870:	2f00      	cmp	r7, #0
 800b872:	dd33      	ble.n	800b8dc <_dtoa_r+0x36c>
 800b874:	4bad      	ldr	r3, [pc, #692]	@ (800bb2c <_dtoa_r+0x5bc>)
 800b876:	f007 020f 	and.w	r2, r7, #15
 800b87a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b87e:	ed93 7b00 	vldr	d7, [r3]
 800b882:	05f8      	lsls	r0, r7, #23
 800b884:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b888:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b88c:	d516      	bpl.n	800b8bc <_dtoa_r+0x34c>
 800b88e:	4ba8      	ldr	r3, [pc, #672]	@ (800bb30 <_dtoa_r+0x5c0>)
 800b890:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b894:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b898:	f7f4 ffd8 	bl	800084c <__aeabi_ddiv>
 800b89c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8a0:	f004 040f 	and.w	r4, r4, #15
 800b8a4:	2603      	movs	r6, #3
 800b8a6:	4da2      	ldr	r5, [pc, #648]	@ (800bb30 <_dtoa_r+0x5c0>)
 800b8a8:	b954      	cbnz	r4, 800b8c0 <_dtoa_r+0x350>
 800b8aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8b2:	f7f4 ffcb 	bl	800084c <__aeabi_ddiv>
 800b8b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8ba:	e028      	b.n	800b90e <_dtoa_r+0x39e>
 800b8bc:	2602      	movs	r6, #2
 800b8be:	e7f2      	b.n	800b8a6 <_dtoa_r+0x336>
 800b8c0:	07e1      	lsls	r1, r4, #31
 800b8c2:	d508      	bpl.n	800b8d6 <_dtoa_r+0x366>
 800b8c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b8cc:	f7f4 fe94 	bl	80005f8 <__aeabi_dmul>
 800b8d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b8d4:	3601      	adds	r6, #1
 800b8d6:	1064      	asrs	r4, r4, #1
 800b8d8:	3508      	adds	r5, #8
 800b8da:	e7e5      	b.n	800b8a8 <_dtoa_r+0x338>
 800b8dc:	f000 80d2 	beq.w	800ba84 <_dtoa_r+0x514>
 800b8e0:	427c      	negs	r4, r7
 800b8e2:	4b92      	ldr	r3, [pc, #584]	@ (800bb2c <_dtoa_r+0x5bc>)
 800b8e4:	4d92      	ldr	r5, [pc, #584]	@ (800bb30 <_dtoa_r+0x5c0>)
 800b8e6:	f004 020f 	and.w	r2, r4, #15
 800b8ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8f6:	f7f4 fe7f 	bl	80005f8 <__aeabi_dmul>
 800b8fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8fe:	1124      	asrs	r4, r4, #4
 800b900:	2300      	movs	r3, #0
 800b902:	2602      	movs	r6, #2
 800b904:	2c00      	cmp	r4, #0
 800b906:	f040 80b2 	bne.w	800ba6e <_dtoa_r+0x4fe>
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d1d3      	bne.n	800b8b6 <_dtoa_r+0x346>
 800b90e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b910:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b914:	2b00      	cmp	r3, #0
 800b916:	f000 80b7 	beq.w	800ba88 <_dtoa_r+0x518>
 800b91a:	4b86      	ldr	r3, [pc, #536]	@ (800bb34 <_dtoa_r+0x5c4>)
 800b91c:	2200      	movs	r2, #0
 800b91e:	4620      	mov	r0, r4
 800b920:	4629      	mov	r1, r5
 800b922:	f7f5 f8db 	bl	8000adc <__aeabi_dcmplt>
 800b926:	2800      	cmp	r0, #0
 800b928:	f000 80ae 	beq.w	800ba88 <_dtoa_r+0x518>
 800b92c:	9b07      	ldr	r3, [sp, #28]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	f000 80aa 	beq.w	800ba88 <_dtoa_r+0x518>
 800b934:	9b00      	ldr	r3, [sp, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	dd37      	ble.n	800b9aa <_dtoa_r+0x43a>
 800b93a:	1e7b      	subs	r3, r7, #1
 800b93c:	9304      	str	r3, [sp, #16]
 800b93e:	4620      	mov	r0, r4
 800b940:	4b7d      	ldr	r3, [pc, #500]	@ (800bb38 <_dtoa_r+0x5c8>)
 800b942:	2200      	movs	r2, #0
 800b944:	4629      	mov	r1, r5
 800b946:	f7f4 fe57 	bl	80005f8 <__aeabi_dmul>
 800b94a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b94e:	9c00      	ldr	r4, [sp, #0]
 800b950:	3601      	adds	r6, #1
 800b952:	4630      	mov	r0, r6
 800b954:	f7f4 fde6 	bl	8000524 <__aeabi_i2d>
 800b958:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b95c:	f7f4 fe4c 	bl	80005f8 <__aeabi_dmul>
 800b960:	4b76      	ldr	r3, [pc, #472]	@ (800bb3c <_dtoa_r+0x5cc>)
 800b962:	2200      	movs	r2, #0
 800b964:	f7f4 fc92 	bl	800028c <__adddf3>
 800b968:	4605      	mov	r5, r0
 800b96a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b96e:	2c00      	cmp	r4, #0
 800b970:	f040 808d 	bne.w	800ba8e <_dtoa_r+0x51e>
 800b974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b978:	4b71      	ldr	r3, [pc, #452]	@ (800bb40 <_dtoa_r+0x5d0>)
 800b97a:	2200      	movs	r2, #0
 800b97c:	f7f4 fc84 	bl	8000288 <__aeabi_dsub>
 800b980:	4602      	mov	r2, r0
 800b982:	460b      	mov	r3, r1
 800b984:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b988:	462a      	mov	r2, r5
 800b98a:	4633      	mov	r3, r6
 800b98c:	f7f5 f8c4 	bl	8000b18 <__aeabi_dcmpgt>
 800b990:	2800      	cmp	r0, #0
 800b992:	f040 828b 	bne.w	800beac <_dtoa_r+0x93c>
 800b996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b99a:	462a      	mov	r2, r5
 800b99c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b9a0:	f7f5 f89c 	bl	8000adc <__aeabi_dcmplt>
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	f040 8128 	bne.w	800bbfa <_dtoa_r+0x68a>
 800b9aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b9ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b9b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f2c0 815a 	blt.w	800bc6e <_dtoa_r+0x6fe>
 800b9ba:	2f0e      	cmp	r7, #14
 800b9bc:	f300 8157 	bgt.w	800bc6e <_dtoa_r+0x6fe>
 800b9c0:	4b5a      	ldr	r3, [pc, #360]	@ (800bb2c <_dtoa_r+0x5bc>)
 800b9c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b9c6:	ed93 7b00 	vldr	d7, [r3]
 800b9ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	ed8d 7b00 	vstr	d7, [sp]
 800b9d2:	da03      	bge.n	800b9dc <_dtoa_r+0x46c>
 800b9d4:	9b07      	ldr	r3, [sp, #28]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	f340 8101 	ble.w	800bbde <_dtoa_r+0x66e>
 800b9dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b9e0:	4656      	mov	r6, sl
 800b9e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	f7f4 ff2f 	bl	800084c <__aeabi_ddiv>
 800b9ee:	f7f5 f8b3 	bl	8000b58 <__aeabi_d2iz>
 800b9f2:	4680      	mov	r8, r0
 800b9f4:	f7f4 fd96 	bl	8000524 <__aeabi_i2d>
 800b9f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9fc:	f7f4 fdfc 	bl	80005f8 <__aeabi_dmul>
 800ba00:	4602      	mov	r2, r0
 800ba02:	460b      	mov	r3, r1
 800ba04:	4620      	mov	r0, r4
 800ba06:	4629      	mov	r1, r5
 800ba08:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ba0c:	f7f4 fc3c 	bl	8000288 <__aeabi_dsub>
 800ba10:	f806 4b01 	strb.w	r4, [r6], #1
 800ba14:	9d07      	ldr	r5, [sp, #28]
 800ba16:	eba6 040a 	sub.w	r4, r6, sl
 800ba1a:	42a5      	cmp	r5, r4
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	460b      	mov	r3, r1
 800ba20:	f040 8117 	bne.w	800bc52 <_dtoa_r+0x6e2>
 800ba24:	f7f4 fc32 	bl	800028c <__adddf3>
 800ba28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	460d      	mov	r5, r1
 800ba30:	f7f5 f872 	bl	8000b18 <__aeabi_dcmpgt>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	f040 80f9 	bne.w	800bc2c <_dtoa_r+0x6bc>
 800ba3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba3e:	4620      	mov	r0, r4
 800ba40:	4629      	mov	r1, r5
 800ba42:	f7f5 f841 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba46:	b118      	cbz	r0, 800ba50 <_dtoa_r+0x4e0>
 800ba48:	f018 0f01 	tst.w	r8, #1
 800ba4c:	f040 80ee 	bne.w	800bc2c <_dtoa_r+0x6bc>
 800ba50:	4649      	mov	r1, r9
 800ba52:	4658      	mov	r0, fp
 800ba54:	f000 fc90 	bl	800c378 <_Bfree>
 800ba58:	2300      	movs	r3, #0
 800ba5a:	7033      	strb	r3, [r6, #0]
 800ba5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ba5e:	3701      	adds	r7, #1
 800ba60:	601f      	str	r7, [r3, #0]
 800ba62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f000 831d 	beq.w	800c0a4 <_dtoa_r+0xb34>
 800ba6a:	601e      	str	r6, [r3, #0]
 800ba6c:	e31a      	b.n	800c0a4 <_dtoa_r+0xb34>
 800ba6e:	07e2      	lsls	r2, r4, #31
 800ba70:	d505      	bpl.n	800ba7e <_dtoa_r+0x50e>
 800ba72:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ba76:	f7f4 fdbf 	bl	80005f8 <__aeabi_dmul>
 800ba7a:	3601      	adds	r6, #1
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	1064      	asrs	r4, r4, #1
 800ba80:	3508      	adds	r5, #8
 800ba82:	e73f      	b.n	800b904 <_dtoa_r+0x394>
 800ba84:	2602      	movs	r6, #2
 800ba86:	e742      	b.n	800b90e <_dtoa_r+0x39e>
 800ba88:	9c07      	ldr	r4, [sp, #28]
 800ba8a:	9704      	str	r7, [sp, #16]
 800ba8c:	e761      	b.n	800b952 <_dtoa_r+0x3e2>
 800ba8e:	4b27      	ldr	r3, [pc, #156]	@ (800bb2c <_dtoa_r+0x5bc>)
 800ba90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ba92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ba96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba9a:	4454      	add	r4, sl
 800ba9c:	2900      	cmp	r1, #0
 800ba9e:	d053      	beq.n	800bb48 <_dtoa_r+0x5d8>
 800baa0:	4928      	ldr	r1, [pc, #160]	@ (800bb44 <_dtoa_r+0x5d4>)
 800baa2:	2000      	movs	r0, #0
 800baa4:	f7f4 fed2 	bl	800084c <__aeabi_ddiv>
 800baa8:	4633      	mov	r3, r6
 800baaa:	462a      	mov	r2, r5
 800baac:	f7f4 fbec 	bl	8000288 <__aeabi_dsub>
 800bab0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bab4:	4656      	mov	r6, sl
 800bab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baba:	f7f5 f84d 	bl	8000b58 <__aeabi_d2iz>
 800babe:	4605      	mov	r5, r0
 800bac0:	f7f4 fd30 	bl	8000524 <__aeabi_i2d>
 800bac4:	4602      	mov	r2, r0
 800bac6:	460b      	mov	r3, r1
 800bac8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bacc:	f7f4 fbdc 	bl	8000288 <__aeabi_dsub>
 800bad0:	3530      	adds	r5, #48	@ 0x30
 800bad2:	4602      	mov	r2, r0
 800bad4:	460b      	mov	r3, r1
 800bad6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bada:	f806 5b01 	strb.w	r5, [r6], #1
 800bade:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bae2:	f7f4 fffb 	bl	8000adc <__aeabi_dcmplt>
 800bae6:	2800      	cmp	r0, #0
 800bae8:	d171      	bne.n	800bbce <_dtoa_r+0x65e>
 800baea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800baee:	4911      	ldr	r1, [pc, #68]	@ (800bb34 <_dtoa_r+0x5c4>)
 800baf0:	2000      	movs	r0, #0
 800baf2:	f7f4 fbc9 	bl	8000288 <__aeabi_dsub>
 800baf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bafa:	f7f4 ffef 	bl	8000adc <__aeabi_dcmplt>
 800bafe:	2800      	cmp	r0, #0
 800bb00:	f040 8095 	bne.w	800bc2e <_dtoa_r+0x6be>
 800bb04:	42a6      	cmp	r6, r4
 800bb06:	f43f af50 	beq.w	800b9aa <_dtoa_r+0x43a>
 800bb0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bb0e:	4b0a      	ldr	r3, [pc, #40]	@ (800bb38 <_dtoa_r+0x5c8>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	f7f4 fd71 	bl	80005f8 <__aeabi_dmul>
 800bb16:	4b08      	ldr	r3, [pc, #32]	@ (800bb38 <_dtoa_r+0x5c8>)
 800bb18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb22:	f7f4 fd69 	bl	80005f8 <__aeabi_dmul>
 800bb26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb2a:	e7c4      	b.n	800bab6 <_dtoa_r+0x546>
 800bb2c:	0800ec28 	.word	0x0800ec28
 800bb30:	0800ec00 	.word	0x0800ec00
 800bb34:	3ff00000 	.word	0x3ff00000
 800bb38:	40240000 	.word	0x40240000
 800bb3c:	401c0000 	.word	0x401c0000
 800bb40:	40140000 	.word	0x40140000
 800bb44:	3fe00000 	.word	0x3fe00000
 800bb48:	4631      	mov	r1, r6
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	f7f4 fd54 	bl	80005f8 <__aeabi_dmul>
 800bb50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bb54:	9415      	str	r4, [sp, #84]	@ 0x54
 800bb56:	4656      	mov	r6, sl
 800bb58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb5c:	f7f4 fffc 	bl	8000b58 <__aeabi_d2iz>
 800bb60:	4605      	mov	r5, r0
 800bb62:	f7f4 fcdf 	bl	8000524 <__aeabi_i2d>
 800bb66:	4602      	mov	r2, r0
 800bb68:	460b      	mov	r3, r1
 800bb6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb6e:	f7f4 fb8b 	bl	8000288 <__aeabi_dsub>
 800bb72:	3530      	adds	r5, #48	@ 0x30
 800bb74:	f806 5b01 	strb.w	r5, [r6], #1
 800bb78:	4602      	mov	r2, r0
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	42a6      	cmp	r6, r4
 800bb7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb82:	f04f 0200 	mov.w	r2, #0
 800bb86:	d124      	bne.n	800bbd2 <_dtoa_r+0x662>
 800bb88:	4bac      	ldr	r3, [pc, #688]	@ (800be3c <_dtoa_r+0x8cc>)
 800bb8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bb8e:	f7f4 fb7d 	bl	800028c <__adddf3>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb9a:	f7f4 ffbd 	bl	8000b18 <__aeabi_dcmpgt>
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	d145      	bne.n	800bc2e <_dtoa_r+0x6be>
 800bba2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bba6:	49a5      	ldr	r1, [pc, #660]	@ (800be3c <_dtoa_r+0x8cc>)
 800bba8:	2000      	movs	r0, #0
 800bbaa:	f7f4 fb6d 	bl	8000288 <__aeabi_dsub>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbb6:	f7f4 ff91 	bl	8000adc <__aeabi_dcmplt>
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	f43f aef5 	beq.w	800b9aa <_dtoa_r+0x43a>
 800bbc0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bbc2:	1e73      	subs	r3, r6, #1
 800bbc4:	9315      	str	r3, [sp, #84]	@ 0x54
 800bbc6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bbca:	2b30      	cmp	r3, #48	@ 0x30
 800bbcc:	d0f8      	beq.n	800bbc0 <_dtoa_r+0x650>
 800bbce:	9f04      	ldr	r7, [sp, #16]
 800bbd0:	e73e      	b.n	800ba50 <_dtoa_r+0x4e0>
 800bbd2:	4b9b      	ldr	r3, [pc, #620]	@ (800be40 <_dtoa_r+0x8d0>)
 800bbd4:	f7f4 fd10 	bl	80005f8 <__aeabi_dmul>
 800bbd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbdc:	e7bc      	b.n	800bb58 <_dtoa_r+0x5e8>
 800bbde:	d10c      	bne.n	800bbfa <_dtoa_r+0x68a>
 800bbe0:	4b98      	ldr	r3, [pc, #608]	@ (800be44 <_dtoa_r+0x8d4>)
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbe8:	f7f4 fd06 	bl	80005f8 <__aeabi_dmul>
 800bbec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bbf0:	f7f4 ff88 	bl	8000b04 <__aeabi_dcmpge>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	f000 8157 	beq.w	800bea8 <_dtoa_r+0x938>
 800bbfa:	2400      	movs	r4, #0
 800bbfc:	4625      	mov	r5, r4
 800bbfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc00:	43db      	mvns	r3, r3
 800bc02:	9304      	str	r3, [sp, #16]
 800bc04:	4656      	mov	r6, sl
 800bc06:	2700      	movs	r7, #0
 800bc08:	4621      	mov	r1, r4
 800bc0a:	4658      	mov	r0, fp
 800bc0c:	f000 fbb4 	bl	800c378 <_Bfree>
 800bc10:	2d00      	cmp	r5, #0
 800bc12:	d0dc      	beq.n	800bbce <_dtoa_r+0x65e>
 800bc14:	b12f      	cbz	r7, 800bc22 <_dtoa_r+0x6b2>
 800bc16:	42af      	cmp	r7, r5
 800bc18:	d003      	beq.n	800bc22 <_dtoa_r+0x6b2>
 800bc1a:	4639      	mov	r1, r7
 800bc1c:	4658      	mov	r0, fp
 800bc1e:	f000 fbab 	bl	800c378 <_Bfree>
 800bc22:	4629      	mov	r1, r5
 800bc24:	4658      	mov	r0, fp
 800bc26:	f000 fba7 	bl	800c378 <_Bfree>
 800bc2a:	e7d0      	b.n	800bbce <_dtoa_r+0x65e>
 800bc2c:	9704      	str	r7, [sp, #16]
 800bc2e:	4633      	mov	r3, r6
 800bc30:	461e      	mov	r6, r3
 800bc32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc36:	2a39      	cmp	r2, #57	@ 0x39
 800bc38:	d107      	bne.n	800bc4a <_dtoa_r+0x6da>
 800bc3a:	459a      	cmp	sl, r3
 800bc3c:	d1f8      	bne.n	800bc30 <_dtoa_r+0x6c0>
 800bc3e:	9a04      	ldr	r2, [sp, #16]
 800bc40:	3201      	adds	r2, #1
 800bc42:	9204      	str	r2, [sp, #16]
 800bc44:	2230      	movs	r2, #48	@ 0x30
 800bc46:	f88a 2000 	strb.w	r2, [sl]
 800bc4a:	781a      	ldrb	r2, [r3, #0]
 800bc4c:	3201      	adds	r2, #1
 800bc4e:	701a      	strb	r2, [r3, #0]
 800bc50:	e7bd      	b.n	800bbce <_dtoa_r+0x65e>
 800bc52:	4b7b      	ldr	r3, [pc, #492]	@ (800be40 <_dtoa_r+0x8d0>)
 800bc54:	2200      	movs	r2, #0
 800bc56:	f7f4 fccf 	bl	80005f8 <__aeabi_dmul>
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	4604      	mov	r4, r0
 800bc60:	460d      	mov	r5, r1
 800bc62:	f7f4 ff31 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc66:	2800      	cmp	r0, #0
 800bc68:	f43f aebb 	beq.w	800b9e2 <_dtoa_r+0x472>
 800bc6c:	e6f0      	b.n	800ba50 <_dtoa_r+0x4e0>
 800bc6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bc70:	2a00      	cmp	r2, #0
 800bc72:	f000 80db 	beq.w	800be2c <_dtoa_r+0x8bc>
 800bc76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc78:	2a01      	cmp	r2, #1
 800bc7a:	f300 80bf 	bgt.w	800bdfc <_dtoa_r+0x88c>
 800bc7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bc80:	2a00      	cmp	r2, #0
 800bc82:	f000 80b7 	beq.w	800bdf4 <_dtoa_r+0x884>
 800bc86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bc8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bc8c:	4646      	mov	r6, r8
 800bc8e:	9a08      	ldr	r2, [sp, #32]
 800bc90:	2101      	movs	r1, #1
 800bc92:	441a      	add	r2, r3
 800bc94:	4658      	mov	r0, fp
 800bc96:	4498      	add	r8, r3
 800bc98:	9208      	str	r2, [sp, #32]
 800bc9a:	f000 fc6b 	bl	800c574 <__i2b>
 800bc9e:	4605      	mov	r5, r0
 800bca0:	b15e      	cbz	r6, 800bcba <_dtoa_r+0x74a>
 800bca2:	9b08      	ldr	r3, [sp, #32]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	dd08      	ble.n	800bcba <_dtoa_r+0x74a>
 800bca8:	42b3      	cmp	r3, r6
 800bcaa:	9a08      	ldr	r2, [sp, #32]
 800bcac:	bfa8      	it	ge
 800bcae:	4633      	movge	r3, r6
 800bcb0:	eba8 0803 	sub.w	r8, r8, r3
 800bcb4:	1af6      	subs	r6, r6, r3
 800bcb6:	1ad3      	subs	r3, r2, r3
 800bcb8:	9308      	str	r3, [sp, #32]
 800bcba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcbc:	b1f3      	cbz	r3, 800bcfc <_dtoa_r+0x78c>
 800bcbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	f000 80b7 	beq.w	800be34 <_dtoa_r+0x8c4>
 800bcc6:	b18c      	cbz	r4, 800bcec <_dtoa_r+0x77c>
 800bcc8:	4629      	mov	r1, r5
 800bcca:	4622      	mov	r2, r4
 800bccc:	4658      	mov	r0, fp
 800bcce:	f000 fd11 	bl	800c6f4 <__pow5mult>
 800bcd2:	464a      	mov	r2, r9
 800bcd4:	4601      	mov	r1, r0
 800bcd6:	4605      	mov	r5, r0
 800bcd8:	4658      	mov	r0, fp
 800bcda:	f000 fc61 	bl	800c5a0 <__multiply>
 800bcde:	4649      	mov	r1, r9
 800bce0:	9004      	str	r0, [sp, #16]
 800bce2:	4658      	mov	r0, fp
 800bce4:	f000 fb48 	bl	800c378 <_Bfree>
 800bce8:	9b04      	ldr	r3, [sp, #16]
 800bcea:	4699      	mov	r9, r3
 800bcec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcee:	1b1a      	subs	r2, r3, r4
 800bcf0:	d004      	beq.n	800bcfc <_dtoa_r+0x78c>
 800bcf2:	4649      	mov	r1, r9
 800bcf4:	4658      	mov	r0, fp
 800bcf6:	f000 fcfd 	bl	800c6f4 <__pow5mult>
 800bcfa:	4681      	mov	r9, r0
 800bcfc:	2101      	movs	r1, #1
 800bcfe:	4658      	mov	r0, fp
 800bd00:	f000 fc38 	bl	800c574 <__i2b>
 800bd04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd06:	4604      	mov	r4, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f000 81cf 	beq.w	800c0ac <_dtoa_r+0xb3c>
 800bd0e:	461a      	mov	r2, r3
 800bd10:	4601      	mov	r1, r0
 800bd12:	4658      	mov	r0, fp
 800bd14:	f000 fcee 	bl	800c6f4 <__pow5mult>
 800bd18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	4604      	mov	r4, r0
 800bd1e:	f300 8095 	bgt.w	800be4c <_dtoa_r+0x8dc>
 800bd22:	9b02      	ldr	r3, [sp, #8]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f040 8087 	bne.w	800be38 <_dtoa_r+0x8c8>
 800bd2a:	9b03      	ldr	r3, [sp, #12]
 800bd2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f040 8089 	bne.w	800be48 <_dtoa_r+0x8d8>
 800bd36:	9b03      	ldr	r3, [sp, #12]
 800bd38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd3c:	0d1b      	lsrs	r3, r3, #20
 800bd3e:	051b      	lsls	r3, r3, #20
 800bd40:	b12b      	cbz	r3, 800bd4e <_dtoa_r+0x7de>
 800bd42:	9b08      	ldr	r3, [sp, #32]
 800bd44:	3301      	adds	r3, #1
 800bd46:	9308      	str	r3, [sp, #32]
 800bd48:	f108 0801 	add.w	r8, r8, #1
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	f000 81b0 	beq.w	800c0b8 <_dtoa_r+0xb48>
 800bd58:	6923      	ldr	r3, [r4, #16]
 800bd5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd5e:	6918      	ldr	r0, [r3, #16]
 800bd60:	f000 fbbc 	bl	800c4dc <__hi0bits>
 800bd64:	f1c0 0020 	rsb	r0, r0, #32
 800bd68:	9b08      	ldr	r3, [sp, #32]
 800bd6a:	4418      	add	r0, r3
 800bd6c:	f010 001f 	ands.w	r0, r0, #31
 800bd70:	d077      	beq.n	800be62 <_dtoa_r+0x8f2>
 800bd72:	f1c0 0320 	rsb	r3, r0, #32
 800bd76:	2b04      	cmp	r3, #4
 800bd78:	dd6b      	ble.n	800be52 <_dtoa_r+0x8e2>
 800bd7a:	9b08      	ldr	r3, [sp, #32]
 800bd7c:	f1c0 001c 	rsb	r0, r0, #28
 800bd80:	4403      	add	r3, r0
 800bd82:	4480      	add	r8, r0
 800bd84:	4406      	add	r6, r0
 800bd86:	9308      	str	r3, [sp, #32]
 800bd88:	f1b8 0f00 	cmp.w	r8, #0
 800bd8c:	dd05      	ble.n	800bd9a <_dtoa_r+0x82a>
 800bd8e:	4649      	mov	r1, r9
 800bd90:	4642      	mov	r2, r8
 800bd92:	4658      	mov	r0, fp
 800bd94:	f000 fd08 	bl	800c7a8 <__lshift>
 800bd98:	4681      	mov	r9, r0
 800bd9a:	9b08      	ldr	r3, [sp, #32]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	dd05      	ble.n	800bdac <_dtoa_r+0x83c>
 800bda0:	4621      	mov	r1, r4
 800bda2:	461a      	mov	r2, r3
 800bda4:	4658      	mov	r0, fp
 800bda6:	f000 fcff 	bl	800c7a8 <__lshift>
 800bdaa:	4604      	mov	r4, r0
 800bdac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d059      	beq.n	800be66 <_dtoa_r+0x8f6>
 800bdb2:	4621      	mov	r1, r4
 800bdb4:	4648      	mov	r0, r9
 800bdb6:	f000 fd63 	bl	800c880 <__mcmp>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	da53      	bge.n	800be66 <_dtoa_r+0x8f6>
 800bdbe:	1e7b      	subs	r3, r7, #1
 800bdc0:	9304      	str	r3, [sp, #16]
 800bdc2:	4649      	mov	r1, r9
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	220a      	movs	r2, #10
 800bdc8:	4658      	mov	r0, fp
 800bdca:	f000 faf7 	bl	800c3bc <__multadd>
 800bdce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bdd0:	4681      	mov	r9, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	f000 8172 	beq.w	800c0bc <_dtoa_r+0xb4c>
 800bdd8:	2300      	movs	r3, #0
 800bdda:	4629      	mov	r1, r5
 800bddc:	220a      	movs	r2, #10
 800bdde:	4658      	mov	r0, fp
 800bde0:	f000 faec 	bl	800c3bc <__multadd>
 800bde4:	9b00      	ldr	r3, [sp, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	4605      	mov	r5, r0
 800bdea:	dc67      	bgt.n	800bebc <_dtoa_r+0x94c>
 800bdec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdee:	2b02      	cmp	r3, #2
 800bdf0:	dc41      	bgt.n	800be76 <_dtoa_r+0x906>
 800bdf2:	e063      	b.n	800bebc <_dtoa_r+0x94c>
 800bdf4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bdf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bdfa:	e746      	b.n	800bc8a <_dtoa_r+0x71a>
 800bdfc:	9b07      	ldr	r3, [sp, #28]
 800bdfe:	1e5c      	subs	r4, r3, #1
 800be00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be02:	42a3      	cmp	r3, r4
 800be04:	bfbf      	itttt	lt
 800be06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800be08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800be0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800be0c:	1ae3      	sublt	r3, r4, r3
 800be0e:	bfb4      	ite	lt
 800be10:	18d2      	addlt	r2, r2, r3
 800be12:	1b1c      	subge	r4, r3, r4
 800be14:	9b07      	ldr	r3, [sp, #28]
 800be16:	bfbc      	itt	lt
 800be18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800be1a:	2400      	movlt	r4, #0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	bfb5      	itete	lt
 800be20:	eba8 0603 	sublt.w	r6, r8, r3
 800be24:	9b07      	ldrge	r3, [sp, #28]
 800be26:	2300      	movlt	r3, #0
 800be28:	4646      	movge	r6, r8
 800be2a:	e730      	b.n	800bc8e <_dtoa_r+0x71e>
 800be2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800be2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800be30:	4646      	mov	r6, r8
 800be32:	e735      	b.n	800bca0 <_dtoa_r+0x730>
 800be34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be36:	e75c      	b.n	800bcf2 <_dtoa_r+0x782>
 800be38:	2300      	movs	r3, #0
 800be3a:	e788      	b.n	800bd4e <_dtoa_r+0x7de>
 800be3c:	3fe00000 	.word	0x3fe00000
 800be40:	40240000 	.word	0x40240000
 800be44:	40140000 	.word	0x40140000
 800be48:	9b02      	ldr	r3, [sp, #8]
 800be4a:	e780      	b.n	800bd4e <_dtoa_r+0x7de>
 800be4c:	2300      	movs	r3, #0
 800be4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800be50:	e782      	b.n	800bd58 <_dtoa_r+0x7e8>
 800be52:	d099      	beq.n	800bd88 <_dtoa_r+0x818>
 800be54:	9a08      	ldr	r2, [sp, #32]
 800be56:	331c      	adds	r3, #28
 800be58:	441a      	add	r2, r3
 800be5a:	4498      	add	r8, r3
 800be5c:	441e      	add	r6, r3
 800be5e:	9208      	str	r2, [sp, #32]
 800be60:	e792      	b.n	800bd88 <_dtoa_r+0x818>
 800be62:	4603      	mov	r3, r0
 800be64:	e7f6      	b.n	800be54 <_dtoa_r+0x8e4>
 800be66:	9b07      	ldr	r3, [sp, #28]
 800be68:	9704      	str	r7, [sp, #16]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	dc20      	bgt.n	800beb0 <_dtoa_r+0x940>
 800be6e:	9300      	str	r3, [sp, #0]
 800be70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be72:	2b02      	cmp	r3, #2
 800be74:	dd1e      	ble.n	800beb4 <_dtoa_r+0x944>
 800be76:	9b00      	ldr	r3, [sp, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f47f aec0 	bne.w	800bbfe <_dtoa_r+0x68e>
 800be7e:	4621      	mov	r1, r4
 800be80:	2205      	movs	r2, #5
 800be82:	4658      	mov	r0, fp
 800be84:	f000 fa9a 	bl	800c3bc <__multadd>
 800be88:	4601      	mov	r1, r0
 800be8a:	4604      	mov	r4, r0
 800be8c:	4648      	mov	r0, r9
 800be8e:	f000 fcf7 	bl	800c880 <__mcmp>
 800be92:	2800      	cmp	r0, #0
 800be94:	f77f aeb3 	ble.w	800bbfe <_dtoa_r+0x68e>
 800be98:	4656      	mov	r6, sl
 800be9a:	2331      	movs	r3, #49	@ 0x31
 800be9c:	f806 3b01 	strb.w	r3, [r6], #1
 800bea0:	9b04      	ldr	r3, [sp, #16]
 800bea2:	3301      	adds	r3, #1
 800bea4:	9304      	str	r3, [sp, #16]
 800bea6:	e6ae      	b.n	800bc06 <_dtoa_r+0x696>
 800bea8:	9c07      	ldr	r4, [sp, #28]
 800beaa:	9704      	str	r7, [sp, #16]
 800beac:	4625      	mov	r5, r4
 800beae:	e7f3      	b.n	800be98 <_dtoa_r+0x928>
 800beb0:	9b07      	ldr	r3, [sp, #28]
 800beb2:	9300      	str	r3, [sp, #0]
 800beb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	f000 8104 	beq.w	800c0c4 <_dtoa_r+0xb54>
 800bebc:	2e00      	cmp	r6, #0
 800bebe:	dd05      	ble.n	800becc <_dtoa_r+0x95c>
 800bec0:	4629      	mov	r1, r5
 800bec2:	4632      	mov	r2, r6
 800bec4:	4658      	mov	r0, fp
 800bec6:	f000 fc6f 	bl	800c7a8 <__lshift>
 800beca:	4605      	mov	r5, r0
 800becc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d05a      	beq.n	800bf88 <_dtoa_r+0xa18>
 800bed2:	6869      	ldr	r1, [r5, #4]
 800bed4:	4658      	mov	r0, fp
 800bed6:	f000 fa0f 	bl	800c2f8 <_Balloc>
 800beda:	4606      	mov	r6, r0
 800bedc:	b928      	cbnz	r0, 800beea <_dtoa_r+0x97a>
 800bede:	4b84      	ldr	r3, [pc, #528]	@ (800c0f0 <_dtoa_r+0xb80>)
 800bee0:	4602      	mov	r2, r0
 800bee2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bee6:	f7ff bb5a 	b.w	800b59e <_dtoa_r+0x2e>
 800beea:	692a      	ldr	r2, [r5, #16]
 800beec:	3202      	adds	r2, #2
 800beee:	0092      	lsls	r2, r2, #2
 800bef0:	f105 010c 	add.w	r1, r5, #12
 800bef4:	300c      	adds	r0, #12
 800bef6:	f7ff fa9e 	bl	800b436 <memcpy>
 800befa:	2201      	movs	r2, #1
 800befc:	4631      	mov	r1, r6
 800befe:	4658      	mov	r0, fp
 800bf00:	f000 fc52 	bl	800c7a8 <__lshift>
 800bf04:	f10a 0301 	add.w	r3, sl, #1
 800bf08:	9307      	str	r3, [sp, #28]
 800bf0a:	9b00      	ldr	r3, [sp, #0]
 800bf0c:	4453      	add	r3, sl
 800bf0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf10:	9b02      	ldr	r3, [sp, #8]
 800bf12:	f003 0301 	and.w	r3, r3, #1
 800bf16:	462f      	mov	r7, r5
 800bf18:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf1a:	4605      	mov	r5, r0
 800bf1c:	9b07      	ldr	r3, [sp, #28]
 800bf1e:	4621      	mov	r1, r4
 800bf20:	3b01      	subs	r3, #1
 800bf22:	4648      	mov	r0, r9
 800bf24:	9300      	str	r3, [sp, #0]
 800bf26:	f7ff fa9b 	bl	800b460 <quorem>
 800bf2a:	4639      	mov	r1, r7
 800bf2c:	9002      	str	r0, [sp, #8]
 800bf2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bf32:	4648      	mov	r0, r9
 800bf34:	f000 fca4 	bl	800c880 <__mcmp>
 800bf38:	462a      	mov	r2, r5
 800bf3a:	9008      	str	r0, [sp, #32]
 800bf3c:	4621      	mov	r1, r4
 800bf3e:	4658      	mov	r0, fp
 800bf40:	f000 fcba 	bl	800c8b8 <__mdiff>
 800bf44:	68c2      	ldr	r2, [r0, #12]
 800bf46:	4606      	mov	r6, r0
 800bf48:	bb02      	cbnz	r2, 800bf8c <_dtoa_r+0xa1c>
 800bf4a:	4601      	mov	r1, r0
 800bf4c:	4648      	mov	r0, r9
 800bf4e:	f000 fc97 	bl	800c880 <__mcmp>
 800bf52:	4602      	mov	r2, r0
 800bf54:	4631      	mov	r1, r6
 800bf56:	4658      	mov	r0, fp
 800bf58:	920e      	str	r2, [sp, #56]	@ 0x38
 800bf5a:	f000 fa0d 	bl	800c378 <_Bfree>
 800bf5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf62:	9e07      	ldr	r6, [sp, #28]
 800bf64:	ea43 0102 	orr.w	r1, r3, r2
 800bf68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf6a:	4319      	orrs	r1, r3
 800bf6c:	d110      	bne.n	800bf90 <_dtoa_r+0xa20>
 800bf6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bf72:	d029      	beq.n	800bfc8 <_dtoa_r+0xa58>
 800bf74:	9b08      	ldr	r3, [sp, #32]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	dd02      	ble.n	800bf80 <_dtoa_r+0xa10>
 800bf7a:	9b02      	ldr	r3, [sp, #8]
 800bf7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bf80:	9b00      	ldr	r3, [sp, #0]
 800bf82:	f883 8000 	strb.w	r8, [r3]
 800bf86:	e63f      	b.n	800bc08 <_dtoa_r+0x698>
 800bf88:	4628      	mov	r0, r5
 800bf8a:	e7bb      	b.n	800bf04 <_dtoa_r+0x994>
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	e7e1      	b.n	800bf54 <_dtoa_r+0x9e4>
 800bf90:	9b08      	ldr	r3, [sp, #32]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	db04      	blt.n	800bfa0 <_dtoa_r+0xa30>
 800bf96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf98:	430b      	orrs	r3, r1
 800bf9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bf9c:	430b      	orrs	r3, r1
 800bf9e:	d120      	bne.n	800bfe2 <_dtoa_r+0xa72>
 800bfa0:	2a00      	cmp	r2, #0
 800bfa2:	dded      	ble.n	800bf80 <_dtoa_r+0xa10>
 800bfa4:	4649      	mov	r1, r9
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	4658      	mov	r0, fp
 800bfaa:	f000 fbfd 	bl	800c7a8 <__lshift>
 800bfae:	4621      	mov	r1, r4
 800bfb0:	4681      	mov	r9, r0
 800bfb2:	f000 fc65 	bl	800c880 <__mcmp>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	dc03      	bgt.n	800bfc2 <_dtoa_r+0xa52>
 800bfba:	d1e1      	bne.n	800bf80 <_dtoa_r+0xa10>
 800bfbc:	f018 0f01 	tst.w	r8, #1
 800bfc0:	d0de      	beq.n	800bf80 <_dtoa_r+0xa10>
 800bfc2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bfc6:	d1d8      	bne.n	800bf7a <_dtoa_r+0xa0a>
 800bfc8:	9a00      	ldr	r2, [sp, #0]
 800bfca:	2339      	movs	r3, #57	@ 0x39
 800bfcc:	7013      	strb	r3, [r2, #0]
 800bfce:	4633      	mov	r3, r6
 800bfd0:	461e      	mov	r6, r3
 800bfd2:	3b01      	subs	r3, #1
 800bfd4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bfd8:	2a39      	cmp	r2, #57	@ 0x39
 800bfda:	d052      	beq.n	800c082 <_dtoa_r+0xb12>
 800bfdc:	3201      	adds	r2, #1
 800bfde:	701a      	strb	r2, [r3, #0]
 800bfe0:	e612      	b.n	800bc08 <_dtoa_r+0x698>
 800bfe2:	2a00      	cmp	r2, #0
 800bfe4:	dd07      	ble.n	800bff6 <_dtoa_r+0xa86>
 800bfe6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bfea:	d0ed      	beq.n	800bfc8 <_dtoa_r+0xa58>
 800bfec:	9a00      	ldr	r2, [sp, #0]
 800bfee:	f108 0301 	add.w	r3, r8, #1
 800bff2:	7013      	strb	r3, [r2, #0]
 800bff4:	e608      	b.n	800bc08 <_dtoa_r+0x698>
 800bff6:	9b07      	ldr	r3, [sp, #28]
 800bff8:	9a07      	ldr	r2, [sp, #28]
 800bffa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c000:	4293      	cmp	r3, r2
 800c002:	d028      	beq.n	800c056 <_dtoa_r+0xae6>
 800c004:	4649      	mov	r1, r9
 800c006:	2300      	movs	r3, #0
 800c008:	220a      	movs	r2, #10
 800c00a:	4658      	mov	r0, fp
 800c00c:	f000 f9d6 	bl	800c3bc <__multadd>
 800c010:	42af      	cmp	r7, r5
 800c012:	4681      	mov	r9, r0
 800c014:	f04f 0300 	mov.w	r3, #0
 800c018:	f04f 020a 	mov.w	r2, #10
 800c01c:	4639      	mov	r1, r7
 800c01e:	4658      	mov	r0, fp
 800c020:	d107      	bne.n	800c032 <_dtoa_r+0xac2>
 800c022:	f000 f9cb 	bl	800c3bc <__multadd>
 800c026:	4607      	mov	r7, r0
 800c028:	4605      	mov	r5, r0
 800c02a:	9b07      	ldr	r3, [sp, #28]
 800c02c:	3301      	adds	r3, #1
 800c02e:	9307      	str	r3, [sp, #28]
 800c030:	e774      	b.n	800bf1c <_dtoa_r+0x9ac>
 800c032:	f000 f9c3 	bl	800c3bc <__multadd>
 800c036:	4629      	mov	r1, r5
 800c038:	4607      	mov	r7, r0
 800c03a:	2300      	movs	r3, #0
 800c03c:	220a      	movs	r2, #10
 800c03e:	4658      	mov	r0, fp
 800c040:	f000 f9bc 	bl	800c3bc <__multadd>
 800c044:	4605      	mov	r5, r0
 800c046:	e7f0      	b.n	800c02a <_dtoa_r+0xaba>
 800c048:	9b00      	ldr	r3, [sp, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	bfcc      	ite	gt
 800c04e:	461e      	movgt	r6, r3
 800c050:	2601      	movle	r6, #1
 800c052:	4456      	add	r6, sl
 800c054:	2700      	movs	r7, #0
 800c056:	4649      	mov	r1, r9
 800c058:	2201      	movs	r2, #1
 800c05a:	4658      	mov	r0, fp
 800c05c:	f000 fba4 	bl	800c7a8 <__lshift>
 800c060:	4621      	mov	r1, r4
 800c062:	4681      	mov	r9, r0
 800c064:	f000 fc0c 	bl	800c880 <__mcmp>
 800c068:	2800      	cmp	r0, #0
 800c06a:	dcb0      	bgt.n	800bfce <_dtoa_r+0xa5e>
 800c06c:	d102      	bne.n	800c074 <_dtoa_r+0xb04>
 800c06e:	f018 0f01 	tst.w	r8, #1
 800c072:	d1ac      	bne.n	800bfce <_dtoa_r+0xa5e>
 800c074:	4633      	mov	r3, r6
 800c076:	461e      	mov	r6, r3
 800c078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c07c:	2a30      	cmp	r2, #48	@ 0x30
 800c07e:	d0fa      	beq.n	800c076 <_dtoa_r+0xb06>
 800c080:	e5c2      	b.n	800bc08 <_dtoa_r+0x698>
 800c082:	459a      	cmp	sl, r3
 800c084:	d1a4      	bne.n	800bfd0 <_dtoa_r+0xa60>
 800c086:	9b04      	ldr	r3, [sp, #16]
 800c088:	3301      	adds	r3, #1
 800c08a:	9304      	str	r3, [sp, #16]
 800c08c:	2331      	movs	r3, #49	@ 0x31
 800c08e:	f88a 3000 	strb.w	r3, [sl]
 800c092:	e5b9      	b.n	800bc08 <_dtoa_r+0x698>
 800c094:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c096:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c0f4 <_dtoa_r+0xb84>
 800c09a:	b11b      	cbz	r3, 800c0a4 <_dtoa_r+0xb34>
 800c09c:	f10a 0308 	add.w	r3, sl, #8
 800c0a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c0a2:	6013      	str	r3, [r2, #0]
 800c0a4:	4650      	mov	r0, sl
 800c0a6:	b019      	add	sp, #100	@ 0x64
 800c0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	f77f ae37 	ble.w	800bd22 <_dtoa_r+0x7b2>
 800c0b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0b8:	2001      	movs	r0, #1
 800c0ba:	e655      	b.n	800bd68 <_dtoa_r+0x7f8>
 800c0bc:	9b00      	ldr	r3, [sp, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	f77f aed6 	ble.w	800be70 <_dtoa_r+0x900>
 800c0c4:	4656      	mov	r6, sl
 800c0c6:	4621      	mov	r1, r4
 800c0c8:	4648      	mov	r0, r9
 800c0ca:	f7ff f9c9 	bl	800b460 <quorem>
 800c0ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c0d2:	f806 8b01 	strb.w	r8, [r6], #1
 800c0d6:	9b00      	ldr	r3, [sp, #0]
 800c0d8:	eba6 020a 	sub.w	r2, r6, sl
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	ddb3      	ble.n	800c048 <_dtoa_r+0xad8>
 800c0e0:	4649      	mov	r1, r9
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	220a      	movs	r2, #10
 800c0e6:	4658      	mov	r0, fp
 800c0e8:	f000 f968 	bl	800c3bc <__multadd>
 800c0ec:	4681      	mov	r9, r0
 800c0ee:	e7ea      	b.n	800c0c6 <_dtoa_r+0xb56>
 800c0f0:	0800eb89 	.word	0x0800eb89
 800c0f4:	0800eb0d 	.word	0x0800eb0d

0800c0f8 <_free_r>:
 800c0f8:	b538      	push	{r3, r4, r5, lr}
 800c0fa:	4605      	mov	r5, r0
 800c0fc:	2900      	cmp	r1, #0
 800c0fe:	d041      	beq.n	800c184 <_free_r+0x8c>
 800c100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c104:	1f0c      	subs	r4, r1, #4
 800c106:	2b00      	cmp	r3, #0
 800c108:	bfb8      	it	lt
 800c10a:	18e4      	addlt	r4, r4, r3
 800c10c:	f000 f8e8 	bl	800c2e0 <__malloc_lock>
 800c110:	4a1d      	ldr	r2, [pc, #116]	@ (800c188 <_free_r+0x90>)
 800c112:	6813      	ldr	r3, [r2, #0]
 800c114:	b933      	cbnz	r3, 800c124 <_free_r+0x2c>
 800c116:	6063      	str	r3, [r4, #4]
 800c118:	6014      	str	r4, [r2, #0]
 800c11a:	4628      	mov	r0, r5
 800c11c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c120:	f000 b8e4 	b.w	800c2ec <__malloc_unlock>
 800c124:	42a3      	cmp	r3, r4
 800c126:	d908      	bls.n	800c13a <_free_r+0x42>
 800c128:	6820      	ldr	r0, [r4, #0]
 800c12a:	1821      	adds	r1, r4, r0
 800c12c:	428b      	cmp	r3, r1
 800c12e:	bf01      	itttt	eq
 800c130:	6819      	ldreq	r1, [r3, #0]
 800c132:	685b      	ldreq	r3, [r3, #4]
 800c134:	1809      	addeq	r1, r1, r0
 800c136:	6021      	streq	r1, [r4, #0]
 800c138:	e7ed      	b.n	800c116 <_free_r+0x1e>
 800c13a:	461a      	mov	r2, r3
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	b10b      	cbz	r3, 800c144 <_free_r+0x4c>
 800c140:	42a3      	cmp	r3, r4
 800c142:	d9fa      	bls.n	800c13a <_free_r+0x42>
 800c144:	6811      	ldr	r1, [r2, #0]
 800c146:	1850      	adds	r0, r2, r1
 800c148:	42a0      	cmp	r0, r4
 800c14a:	d10b      	bne.n	800c164 <_free_r+0x6c>
 800c14c:	6820      	ldr	r0, [r4, #0]
 800c14e:	4401      	add	r1, r0
 800c150:	1850      	adds	r0, r2, r1
 800c152:	4283      	cmp	r3, r0
 800c154:	6011      	str	r1, [r2, #0]
 800c156:	d1e0      	bne.n	800c11a <_free_r+0x22>
 800c158:	6818      	ldr	r0, [r3, #0]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	6053      	str	r3, [r2, #4]
 800c15e:	4408      	add	r0, r1
 800c160:	6010      	str	r0, [r2, #0]
 800c162:	e7da      	b.n	800c11a <_free_r+0x22>
 800c164:	d902      	bls.n	800c16c <_free_r+0x74>
 800c166:	230c      	movs	r3, #12
 800c168:	602b      	str	r3, [r5, #0]
 800c16a:	e7d6      	b.n	800c11a <_free_r+0x22>
 800c16c:	6820      	ldr	r0, [r4, #0]
 800c16e:	1821      	adds	r1, r4, r0
 800c170:	428b      	cmp	r3, r1
 800c172:	bf04      	itt	eq
 800c174:	6819      	ldreq	r1, [r3, #0]
 800c176:	685b      	ldreq	r3, [r3, #4]
 800c178:	6063      	str	r3, [r4, #4]
 800c17a:	bf04      	itt	eq
 800c17c:	1809      	addeq	r1, r1, r0
 800c17e:	6021      	streq	r1, [r4, #0]
 800c180:	6054      	str	r4, [r2, #4]
 800c182:	e7ca      	b.n	800c11a <_free_r+0x22>
 800c184:	bd38      	pop	{r3, r4, r5, pc}
 800c186:	bf00      	nop
 800c188:	20000c2c 	.word	0x20000c2c

0800c18c <malloc>:
 800c18c:	4b02      	ldr	r3, [pc, #8]	@ (800c198 <malloc+0xc>)
 800c18e:	4601      	mov	r1, r0
 800c190:	6818      	ldr	r0, [r3, #0]
 800c192:	f000 b825 	b.w	800c1e0 <_malloc_r>
 800c196:	bf00      	nop
 800c198:	20000050 	.word	0x20000050

0800c19c <sbrk_aligned>:
 800c19c:	b570      	push	{r4, r5, r6, lr}
 800c19e:	4e0f      	ldr	r6, [pc, #60]	@ (800c1dc <sbrk_aligned+0x40>)
 800c1a0:	460c      	mov	r4, r1
 800c1a2:	6831      	ldr	r1, [r6, #0]
 800c1a4:	4605      	mov	r5, r0
 800c1a6:	b911      	cbnz	r1, 800c1ae <sbrk_aligned+0x12>
 800c1a8:	f001 ffd2 	bl	800e150 <_sbrk_r>
 800c1ac:	6030      	str	r0, [r6, #0]
 800c1ae:	4621      	mov	r1, r4
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	f001 ffcd 	bl	800e150 <_sbrk_r>
 800c1b6:	1c43      	adds	r3, r0, #1
 800c1b8:	d103      	bne.n	800c1c2 <sbrk_aligned+0x26>
 800c1ba:	f04f 34ff 	mov.w	r4, #4294967295
 800c1be:	4620      	mov	r0, r4
 800c1c0:	bd70      	pop	{r4, r5, r6, pc}
 800c1c2:	1cc4      	adds	r4, r0, #3
 800c1c4:	f024 0403 	bic.w	r4, r4, #3
 800c1c8:	42a0      	cmp	r0, r4
 800c1ca:	d0f8      	beq.n	800c1be <sbrk_aligned+0x22>
 800c1cc:	1a21      	subs	r1, r4, r0
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	f001 ffbe 	bl	800e150 <_sbrk_r>
 800c1d4:	3001      	adds	r0, #1
 800c1d6:	d1f2      	bne.n	800c1be <sbrk_aligned+0x22>
 800c1d8:	e7ef      	b.n	800c1ba <sbrk_aligned+0x1e>
 800c1da:	bf00      	nop
 800c1dc:	20000c28 	.word	0x20000c28

0800c1e0 <_malloc_r>:
 800c1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1e4:	1ccd      	adds	r5, r1, #3
 800c1e6:	f025 0503 	bic.w	r5, r5, #3
 800c1ea:	3508      	adds	r5, #8
 800c1ec:	2d0c      	cmp	r5, #12
 800c1ee:	bf38      	it	cc
 800c1f0:	250c      	movcc	r5, #12
 800c1f2:	2d00      	cmp	r5, #0
 800c1f4:	4606      	mov	r6, r0
 800c1f6:	db01      	blt.n	800c1fc <_malloc_r+0x1c>
 800c1f8:	42a9      	cmp	r1, r5
 800c1fa:	d904      	bls.n	800c206 <_malloc_r+0x26>
 800c1fc:	230c      	movs	r3, #12
 800c1fe:	6033      	str	r3, [r6, #0]
 800c200:	2000      	movs	r0, #0
 800c202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c206:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c2dc <_malloc_r+0xfc>
 800c20a:	f000 f869 	bl	800c2e0 <__malloc_lock>
 800c20e:	f8d8 3000 	ldr.w	r3, [r8]
 800c212:	461c      	mov	r4, r3
 800c214:	bb44      	cbnz	r4, 800c268 <_malloc_r+0x88>
 800c216:	4629      	mov	r1, r5
 800c218:	4630      	mov	r0, r6
 800c21a:	f7ff ffbf 	bl	800c19c <sbrk_aligned>
 800c21e:	1c43      	adds	r3, r0, #1
 800c220:	4604      	mov	r4, r0
 800c222:	d158      	bne.n	800c2d6 <_malloc_r+0xf6>
 800c224:	f8d8 4000 	ldr.w	r4, [r8]
 800c228:	4627      	mov	r7, r4
 800c22a:	2f00      	cmp	r7, #0
 800c22c:	d143      	bne.n	800c2b6 <_malloc_r+0xd6>
 800c22e:	2c00      	cmp	r4, #0
 800c230:	d04b      	beq.n	800c2ca <_malloc_r+0xea>
 800c232:	6823      	ldr	r3, [r4, #0]
 800c234:	4639      	mov	r1, r7
 800c236:	4630      	mov	r0, r6
 800c238:	eb04 0903 	add.w	r9, r4, r3
 800c23c:	f001 ff88 	bl	800e150 <_sbrk_r>
 800c240:	4581      	cmp	r9, r0
 800c242:	d142      	bne.n	800c2ca <_malloc_r+0xea>
 800c244:	6821      	ldr	r1, [r4, #0]
 800c246:	1a6d      	subs	r5, r5, r1
 800c248:	4629      	mov	r1, r5
 800c24a:	4630      	mov	r0, r6
 800c24c:	f7ff ffa6 	bl	800c19c <sbrk_aligned>
 800c250:	3001      	adds	r0, #1
 800c252:	d03a      	beq.n	800c2ca <_malloc_r+0xea>
 800c254:	6823      	ldr	r3, [r4, #0]
 800c256:	442b      	add	r3, r5
 800c258:	6023      	str	r3, [r4, #0]
 800c25a:	f8d8 3000 	ldr.w	r3, [r8]
 800c25e:	685a      	ldr	r2, [r3, #4]
 800c260:	bb62      	cbnz	r2, 800c2bc <_malloc_r+0xdc>
 800c262:	f8c8 7000 	str.w	r7, [r8]
 800c266:	e00f      	b.n	800c288 <_malloc_r+0xa8>
 800c268:	6822      	ldr	r2, [r4, #0]
 800c26a:	1b52      	subs	r2, r2, r5
 800c26c:	d420      	bmi.n	800c2b0 <_malloc_r+0xd0>
 800c26e:	2a0b      	cmp	r2, #11
 800c270:	d917      	bls.n	800c2a2 <_malloc_r+0xc2>
 800c272:	1961      	adds	r1, r4, r5
 800c274:	42a3      	cmp	r3, r4
 800c276:	6025      	str	r5, [r4, #0]
 800c278:	bf18      	it	ne
 800c27a:	6059      	strne	r1, [r3, #4]
 800c27c:	6863      	ldr	r3, [r4, #4]
 800c27e:	bf08      	it	eq
 800c280:	f8c8 1000 	streq.w	r1, [r8]
 800c284:	5162      	str	r2, [r4, r5]
 800c286:	604b      	str	r3, [r1, #4]
 800c288:	4630      	mov	r0, r6
 800c28a:	f000 f82f 	bl	800c2ec <__malloc_unlock>
 800c28e:	f104 000b 	add.w	r0, r4, #11
 800c292:	1d23      	adds	r3, r4, #4
 800c294:	f020 0007 	bic.w	r0, r0, #7
 800c298:	1ac2      	subs	r2, r0, r3
 800c29a:	bf1c      	itt	ne
 800c29c:	1a1b      	subne	r3, r3, r0
 800c29e:	50a3      	strne	r3, [r4, r2]
 800c2a0:	e7af      	b.n	800c202 <_malloc_r+0x22>
 800c2a2:	6862      	ldr	r2, [r4, #4]
 800c2a4:	42a3      	cmp	r3, r4
 800c2a6:	bf0c      	ite	eq
 800c2a8:	f8c8 2000 	streq.w	r2, [r8]
 800c2ac:	605a      	strne	r2, [r3, #4]
 800c2ae:	e7eb      	b.n	800c288 <_malloc_r+0xa8>
 800c2b0:	4623      	mov	r3, r4
 800c2b2:	6864      	ldr	r4, [r4, #4]
 800c2b4:	e7ae      	b.n	800c214 <_malloc_r+0x34>
 800c2b6:	463c      	mov	r4, r7
 800c2b8:	687f      	ldr	r7, [r7, #4]
 800c2ba:	e7b6      	b.n	800c22a <_malloc_r+0x4a>
 800c2bc:	461a      	mov	r2, r3
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	42a3      	cmp	r3, r4
 800c2c2:	d1fb      	bne.n	800c2bc <_malloc_r+0xdc>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	6053      	str	r3, [r2, #4]
 800c2c8:	e7de      	b.n	800c288 <_malloc_r+0xa8>
 800c2ca:	230c      	movs	r3, #12
 800c2cc:	6033      	str	r3, [r6, #0]
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	f000 f80c 	bl	800c2ec <__malloc_unlock>
 800c2d4:	e794      	b.n	800c200 <_malloc_r+0x20>
 800c2d6:	6005      	str	r5, [r0, #0]
 800c2d8:	e7d6      	b.n	800c288 <_malloc_r+0xa8>
 800c2da:	bf00      	nop
 800c2dc:	20000c2c 	.word	0x20000c2c

0800c2e0 <__malloc_lock>:
 800c2e0:	4801      	ldr	r0, [pc, #4]	@ (800c2e8 <__malloc_lock+0x8>)
 800c2e2:	f7ff b8a6 	b.w	800b432 <__retarget_lock_acquire_recursive>
 800c2e6:	bf00      	nop
 800c2e8:	20000c24 	.word	0x20000c24

0800c2ec <__malloc_unlock>:
 800c2ec:	4801      	ldr	r0, [pc, #4]	@ (800c2f4 <__malloc_unlock+0x8>)
 800c2ee:	f7ff b8a1 	b.w	800b434 <__retarget_lock_release_recursive>
 800c2f2:	bf00      	nop
 800c2f4:	20000c24 	.word	0x20000c24

0800c2f8 <_Balloc>:
 800c2f8:	b570      	push	{r4, r5, r6, lr}
 800c2fa:	69c6      	ldr	r6, [r0, #28]
 800c2fc:	4604      	mov	r4, r0
 800c2fe:	460d      	mov	r5, r1
 800c300:	b976      	cbnz	r6, 800c320 <_Balloc+0x28>
 800c302:	2010      	movs	r0, #16
 800c304:	f7ff ff42 	bl	800c18c <malloc>
 800c308:	4602      	mov	r2, r0
 800c30a:	61e0      	str	r0, [r4, #28]
 800c30c:	b920      	cbnz	r0, 800c318 <_Balloc+0x20>
 800c30e:	4b18      	ldr	r3, [pc, #96]	@ (800c370 <_Balloc+0x78>)
 800c310:	4818      	ldr	r0, [pc, #96]	@ (800c374 <_Balloc+0x7c>)
 800c312:	216b      	movs	r1, #107	@ 0x6b
 800c314:	f001 ff34 	bl	800e180 <__assert_func>
 800c318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c31c:	6006      	str	r6, [r0, #0]
 800c31e:	60c6      	str	r6, [r0, #12]
 800c320:	69e6      	ldr	r6, [r4, #28]
 800c322:	68f3      	ldr	r3, [r6, #12]
 800c324:	b183      	cbz	r3, 800c348 <_Balloc+0x50>
 800c326:	69e3      	ldr	r3, [r4, #28]
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c32e:	b9b8      	cbnz	r0, 800c360 <_Balloc+0x68>
 800c330:	2101      	movs	r1, #1
 800c332:	fa01 f605 	lsl.w	r6, r1, r5
 800c336:	1d72      	adds	r2, r6, #5
 800c338:	0092      	lsls	r2, r2, #2
 800c33a:	4620      	mov	r0, r4
 800c33c:	f001 ff3e 	bl	800e1bc <_calloc_r>
 800c340:	b160      	cbz	r0, 800c35c <_Balloc+0x64>
 800c342:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c346:	e00e      	b.n	800c366 <_Balloc+0x6e>
 800c348:	2221      	movs	r2, #33	@ 0x21
 800c34a:	2104      	movs	r1, #4
 800c34c:	4620      	mov	r0, r4
 800c34e:	f001 ff35 	bl	800e1bc <_calloc_r>
 800c352:	69e3      	ldr	r3, [r4, #28]
 800c354:	60f0      	str	r0, [r6, #12]
 800c356:	68db      	ldr	r3, [r3, #12]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d1e4      	bne.n	800c326 <_Balloc+0x2e>
 800c35c:	2000      	movs	r0, #0
 800c35e:	bd70      	pop	{r4, r5, r6, pc}
 800c360:	6802      	ldr	r2, [r0, #0]
 800c362:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c366:	2300      	movs	r3, #0
 800c368:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c36c:	e7f7      	b.n	800c35e <_Balloc+0x66>
 800c36e:	bf00      	nop
 800c370:	0800eb1a 	.word	0x0800eb1a
 800c374:	0800eb9a 	.word	0x0800eb9a

0800c378 <_Bfree>:
 800c378:	b570      	push	{r4, r5, r6, lr}
 800c37a:	69c6      	ldr	r6, [r0, #28]
 800c37c:	4605      	mov	r5, r0
 800c37e:	460c      	mov	r4, r1
 800c380:	b976      	cbnz	r6, 800c3a0 <_Bfree+0x28>
 800c382:	2010      	movs	r0, #16
 800c384:	f7ff ff02 	bl	800c18c <malloc>
 800c388:	4602      	mov	r2, r0
 800c38a:	61e8      	str	r0, [r5, #28]
 800c38c:	b920      	cbnz	r0, 800c398 <_Bfree+0x20>
 800c38e:	4b09      	ldr	r3, [pc, #36]	@ (800c3b4 <_Bfree+0x3c>)
 800c390:	4809      	ldr	r0, [pc, #36]	@ (800c3b8 <_Bfree+0x40>)
 800c392:	218f      	movs	r1, #143	@ 0x8f
 800c394:	f001 fef4 	bl	800e180 <__assert_func>
 800c398:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c39c:	6006      	str	r6, [r0, #0]
 800c39e:	60c6      	str	r6, [r0, #12]
 800c3a0:	b13c      	cbz	r4, 800c3b2 <_Bfree+0x3a>
 800c3a2:	69eb      	ldr	r3, [r5, #28]
 800c3a4:	6862      	ldr	r2, [r4, #4]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c3ac:	6021      	str	r1, [r4, #0]
 800c3ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c3b2:	bd70      	pop	{r4, r5, r6, pc}
 800c3b4:	0800eb1a 	.word	0x0800eb1a
 800c3b8:	0800eb9a 	.word	0x0800eb9a

0800c3bc <__multadd>:
 800c3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c0:	690d      	ldr	r5, [r1, #16]
 800c3c2:	4607      	mov	r7, r0
 800c3c4:	460c      	mov	r4, r1
 800c3c6:	461e      	mov	r6, r3
 800c3c8:	f101 0c14 	add.w	ip, r1, #20
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	f8dc 3000 	ldr.w	r3, [ip]
 800c3d2:	b299      	uxth	r1, r3
 800c3d4:	fb02 6101 	mla	r1, r2, r1, r6
 800c3d8:	0c1e      	lsrs	r6, r3, #16
 800c3da:	0c0b      	lsrs	r3, r1, #16
 800c3dc:	fb02 3306 	mla	r3, r2, r6, r3
 800c3e0:	b289      	uxth	r1, r1
 800c3e2:	3001      	adds	r0, #1
 800c3e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c3e8:	4285      	cmp	r5, r0
 800c3ea:	f84c 1b04 	str.w	r1, [ip], #4
 800c3ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c3f2:	dcec      	bgt.n	800c3ce <__multadd+0x12>
 800c3f4:	b30e      	cbz	r6, 800c43a <__multadd+0x7e>
 800c3f6:	68a3      	ldr	r3, [r4, #8]
 800c3f8:	42ab      	cmp	r3, r5
 800c3fa:	dc19      	bgt.n	800c430 <__multadd+0x74>
 800c3fc:	6861      	ldr	r1, [r4, #4]
 800c3fe:	4638      	mov	r0, r7
 800c400:	3101      	adds	r1, #1
 800c402:	f7ff ff79 	bl	800c2f8 <_Balloc>
 800c406:	4680      	mov	r8, r0
 800c408:	b928      	cbnz	r0, 800c416 <__multadd+0x5a>
 800c40a:	4602      	mov	r2, r0
 800c40c:	4b0c      	ldr	r3, [pc, #48]	@ (800c440 <__multadd+0x84>)
 800c40e:	480d      	ldr	r0, [pc, #52]	@ (800c444 <__multadd+0x88>)
 800c410:	21ba      	movs	r1, #186	@ 0xba
 800c412:	f001 feb5 	bl	800e180 <__assert_func>
 800c416:	6922      	ldr	r2, [r4, #16]
 800c418:	3202      	adds	r2, #2
 800c41a:	f104 010c 	add.w	r1, r4, #12
 800c41e:	0092      	lsls	r2, r2, #2
 800c420:	300c      	adds	r0, #12
 800c422:	f7ff f808 	bl	800b436 <memcpy>
 800c426:	4621      	mov	r1, r4
 800c428:	4638      	mov	r0, r7
 800c42a:	f7ff ffa5 	bl	800c378 <_Bfree>
 800c42e:	4644      	mov	r4, r8
 800c430:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c434:	3501      	adds	r5, #1
 800c436:	615e      	str	r6, [r3, #20]
 800c438:	6125      	str	r5, [r4, #16]
 800c43a:	4620      	mov	r0, r4
 800c43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c440:	0800eb89 	.word	0x0800eb89
 800c444:	0800eb9a 	.word	0x0800eb9a

0800c448 <__s2b>:
 800c448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c44c:	460c      	mov	r4, r1
 800c44e:	4615      	mov	r5, r2
 800c450:	461f      	mov	r7, r3
 800c452:	2209      	movs	r2, #9
 800c454:	3308      	adds	r3, #8
 800c456:	4606      	mov	r6, r0
 800c458:	fb93 f3f2 	sdiv	r3, r3, r2
 800c45c:	2100      	movs	r1, #0
 800c45e:	2201      	movs	r2, #1
 800c460:	429a      	cmp	r2, r3
 800c462:	db09      	blt.n	800c478 <__s2b+0x30>
 800c464:	4630      	mov	r0, r6
 800c466:	f7ff ff47 	bl	800c2f8 <_Balloc>
 800c46a:	b940      	cbnz	r0, 800c47e <__s2b+0x36>
 800c46c:	4602      	mov	r2, r0
 800c46e:	4b19      	ldr	r3, [pc, #100]	@ (800c4d4 <__s2b+0x8c>)
 800c470:	4819      	ldr	r0, [pc, #100]	@ (800c4d8 <__s2b+0x90>)
 800c472:	21d3      	movs	r1, #211	@ 0xd3
 800c474:	f001 fe84 	bl	800e180 <__assert_func>
 800c478:	0052      	lsls	r2, r2, #1
 800c47a:	3101      	adds	r1, #1
 800c47c:	e7f0      	b.n	800c460 <__s2b+0x18>
 800c47e:	9b08      	ldr	r3, [sp, #32]
 800c480:	6143      	str	r3, [r0, #20]
 800c482:	2d09      	cmp	r5, #9
 800c484:	f04f 0301 	mov.w	r3, #1
 800c488:	6103      	str	r3, [r0, #16]
 800c48a:	dd16      	ble.n	800c4ba <__s2b+0x72>
 800c48c:	f104 0909 	add.w	r9, r4, #9
 800c490:	46c8      	mov	r8, r9
 800c492:	442c      	add	r4, r5
 800c494:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c498:	4601      	mov	r1, r0
 800c49a:	3b30      	subs	r3, #48	@ 0x30
 800c49c:	220a      	movs	r2, #10
 800c49e:	4630      	mov	r0, r6
 800c4a0:	f7ff ff8c 	bl	800c3bc <__multadd>
 800c4a4:	45a0      	cmp	r8, r4
 800c4a6:	d1f5      	bne.n	800c494 <__s2b+0x4c>
 800c4a8:	f1a5 0408 	sub.w	r4, r5, #8
 800c4ac:	444c      	add	r4, r9
 800c4ae:	1b2d      	subs	r5, r5, r4
 800c4b0:	1963      	adds	r3, r4, r5
 800c4b2:	42bb      	cmp	r3, r7
 800c4b4:	db04      	blt.n	800c4c0 <__s2b+0x78>
 800c4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ba:	340a      	adds	r4, #10
 800c4bc:	2509      	movs	r5, #9
 800c4be:	e7f6      	b.n	800c4ae <__s2b+0x66>
 800c4c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c4c4:	4601      	mov	r1, r0
 800c4c6:	3b30      	subs	r3, #48	@ 0x30
 800c4c8:	220a      	movs	r2, #10
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	f7ff ff76 	bl	800c3bc <__multadd>
 800c4d0:	e7ee      	b.n	800c4b0 <__s2b+0x68>
 800c4d2:	bf00      	nop
 800c4d4:	0800eb89 	.word	0x0800eb89
 800c4d8:	0800eb9a 	.word	0x0800eb9a

0800c4dc <__hi0bits>:
 800c4dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	bf36      	itet	cc
 800c4e4:	0403      	lslcc	r3, r0, #16
 800c4e6:	2000      	movcs	r0, #0
 800c4e8:	2010      	movcc	r0, #16
 800c4ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c4ee:	bf3c      	itt	cc
 800c4f0:	021b      	lslcc	r3, r3, #8
 800c4f2:	3008      	addcc	r0, #8
 800c4f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c4f8:	bf3c      	itt	cc
 800c4fa:	011b      	lslcc	r3, r3, #4
 800c4fc:	3004      	addcc	r0, #4
 800c4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c502:	bf3c      	itt	cc
 800c504:	009b      	lslcc	r3, r3, #2
 800c506:	3002      	addcc	r0, #2
 800c508:	2b00      	cmp	r3, #0
 800c50a:	db05      	blt.n	800c518 <__hi0bits+0x3c>
 800c50c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c510:	f100 0001 	add.w	r0, r0, #1
 800c514:	bf08      	it	eq
 800c516:	2020      	moveq	r0, #32
 800c518:	4770      	bx	lr

0800c51a <__lo0bits>:
 800c51a:	6803      	ldr	r3, [r0, #0]
 800c51c:	4602      	mov	r2, r0
 800c51e:	f013 0007 	ands.w	r0, r3, #7
 800c522:	d00b      	beq.n	800c53c <__lo0bits+0x22>
 800c524:	07d9      	lsls	r1, r3, #31
 800c526:	d421      	bmi.n	800c56c <__lo0bits+0x52>
 800c528:	0798      	lsls	r0, r3, #30
 800c52a:	bf49      	itett	mi
 800c52c:	085b      	lsrmi	r3, r3, #1
 800c52e:	089b      	lsrpl	r3, r3, #2
 800c530:	2001      	movmi	r0, #1
 800c532:	6013      	strmi	r3, [r2, #0]
 800c534:	bf5c      	itt	pl
 800c536:	6013      	strpl	r3, [r2, #0]
 800c538:	2002      	movpl	r0, #2
 800c53a:	4770      	bx	lr
 800c53c:	b299      	uxth	r1, r3
 800c53e:	b909      	cbnz	r1, 800c544 <__lo0bits+0x2a>
 800c540:	0c1b      	lsrs	r3, r3, #16
 800c542:	2010      	movs	r0, #16
 800c544:	b2d9      	uxtb	r1, r3
 800c546:	b909      	cbnz	r1, 800c54c <__lo0bits+0x32>
 800c548:	3008      	adds	r0, #8
 800c54a:	0a1b      	lsrs	r3, r3, #8
 800c54c:	0719      	lsls	r1, r3, #28
 800c54e:	bf04      	itt	eq
 800c550:	091b      	lsreq	r3, r3, #4
 800c552:	3004      	addeq	r0, #4
 800c554:	0799      	lsls	r1, r3, #30
 800c556:	bf04      	itt	eq
 800c558:	089b      	lsreq	r3, r3, #2
 800c55a:	3002      	addeq	r0, #2
 800c55c:	07d9      	lsls	r1, r3, #31
 800c55e:	d403      	bmi.n	800c568 <__lo0bits+0x4e>
 800c560:	085b      	lsrs	r3, r3, #1
 800c562:	f100 0001 	add.w	r0, r0, #1
 800c566:	d003      	beq.n	800c570 <__lo0bits+0x56>
 800c568:	6013      	str	r3, [r2, #0]
 800c56a:	4770      	bx	lr
 800c56c:	2000      	movs	r0, #0
 800c56e:	4770      	bx	lr
 800c570:	2020      	movs	r0, #32
 800c572:	4770      	bx	lr

0800c574 <__i2b>:
 800c574:	b510      	push	{r4, lr}
 800c576:	460c      	mov	r4, r1
 800c578:	2101      	movs	r1, #1
 800c57a:	f7ff febd 	bl	800c2f8 <_Balloc>
 800c57e:	4602      	mov	r2, r0
 800c580:	b928      	cbnz	r0, 800c58e <__i2b+0x1a>
 800c582:	4b05      	ldr	r3, [pc, #20]	@ (800c598 <__i2b+0x24>)
 800c584:	4805      	ldr	r0, [pc, #20]	@ (800c59c <__i2b+0x28>)
 800c586:	f240 1145 	movw	r1, #325	@ 0x145
 800c58a:	f001 fdf9 	bl	800e180 <__assert_func>
 800c58e:	2301      	movs	r3, #1
 800c590:	6144      	str	r4, [r0, #20]
 800c592:	6103      	str	r3, [r0, #16]
 800c594:	bd10      	pop	{r4, pc}
 800c596:	bf00      	nop
 800c598:	0800eb89 	.word	0x0800eb89
 800c59c:	0800eb9a 	.word	0x0800eb9a

0800c5a0 <__multiply>:
 800c5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a4:	4614      	mov	r4, r2
 800c5a6:	690a      	ldr	r2, [r1, #16]
 800c5a8:	6923      	ldr	r3, [r4, #16]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	bfa8      	it	ge
 800c5ae:	4623      	movge	r3, r4
 800c5b0:	460f      	mov	r7, r1
 800c5b2:	bfa4      	itt	ge
 800c5b4:	460c      	movge	r4, r1
 800c5b6:	461f      	movge	r7, r3
 800c5b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c5bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c5c0:	68a3      	ldr	r3, [r4, #8]
 800c5c2:	6861      	ldr	r1, [r4, #4]
 800c5c4:	eb0a 0609 	add.w	r6, sl, r9
 800c5c8:	42b3      	cmp	r3, r6
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	bfb8      	it	lt
 800c5ce:	3101      	addlt	r1, #1
 800c5d0:	f7ff fe92 	bl	800c2f8 <_Balloc>
 800c5d4:	b930      	cbnz	r0, 800c5e4 <__multiply+0x44>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	4b44      	ldr	r3, [pc, #272]	@ (800c6ec <__multiply+0x14c>)
 800c5da:	4845      	ldr	r0, [pc, #276]	@ (800c6f0 <__multiply+0x150>)
 800c5dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c5e0:	f001 fdce 	bl	800e180 <__assert_func>
 800c5e4:	f100 0514 	add.w	r5, r0, #20
 800c5e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c5ec:	462b      	mov	r3, r5
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	4543      	cmp	r3, r8
 800c5f2:	d321      	bcc.n	800c638 <__multiply+0x98>
 800c5f4:	f107 0114 	add.w	r1, r7, #20
 800c5f8:	f104 0214 	add.w	r2, r4, #20
 800c5fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c600:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c604:	9302      	str	r3, [sp, #8]
 800c606:	1b13      	subs	r3, r2, r4
 800c608:	3b15      	subs	r3, #21
 800c60a:	f023 0303 	bic.w	r3, r3, #3
 800c60e:	3304      	adds	r3, #4
 800c610:	f104 0715 	add.w	r7, r4, #21
 800c614:	42ba      	cmp	r2, r7
 800c616:	bf38      	it	cc
 800c618:	2304      	movcc	r3, #4
 800c61a:	9301      	str	r3, [sp, #4]
 800c61c:	9b02      	ldr	r3, [sp, #8]
 800c61e:	9103      	str	r1, [sp, #12]
 800c620:	428b      	cmp	r3, r1
 800c622:	d80c      	bhi.n	800c63e <__multiply+0x9e>
 800c624:	2e00      	cmp	r6, #0
 800c626:	dd03      	ble.n	800c630 <__multiply+0x90>
 800c628:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d05b      	beq.n	800c6e8 <__multiply+0x148>
 800c630:	6106      	str	r6, [r0, #16]
 800c632:	b005      	add	sp, #20
 800c634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c638:	f843 2b04 	str.w	r2, [r3], #4
 800c63c:	e7d8      	b.n	800c5f0 <__multiply+0x50>
 800c63e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c642:	f1ba 0f00 	cmp.w	sl, #0
 800c646:	d024      	beq.n	800c692 <__multiply+0xf2>
 800c648:	f104 0e14 	add.w	lr, r4, #20
 800c64c:	46a9      	mov	r9, r5
 800c64e:	f04f 0c00 	mov.w	ip, #0
 800c652:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c656:	f8d9 3000 	ldr.w	r3, [r9]
 800c65a:	fa1f fb87 	uxth.w	fp, r7
 800c65e:	b29b      	uxth	r3, r3
 800c660:	fb0a 330b 	mla	r3, sl, fp, r3
 800c664:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c668:	f8d9 7000 	ldr.w	r7, [r9]
 800c66c:	4463      	add	r3, ip
 800c66e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c672:	fb0a c70b 	mla	r7, sl, fp, ip
 800c676:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c680:	4572      	cmp	r2, lr
 800c682:	f849 3b04 	str.w	r3, [r9], #4
 800c686:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c68a:	d8e2      	bhi.n	800c652 <__multiply+0xb2>
 800c68c:	9b01      	ldr	r3, [sp, #4]
 800c68e:	f845 c003 	str.w	ip, [r5, r3]
 800c692:	9b03      	ldr	r3, [sp, #12]
 800c694:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c698:	3104      	adds	r1, #4
 800c69a:	f1b9 0f00 	cmp.w	r9, #0
 800c69e:	d021      	beq.n	800c6e4 <__multiply+0x144>
 800c6a0:	682b      	ldr	r3, [r5, #0]
 800c6a2:	f104 0c14 	add.w	ip, r4, #20
 800c6a6:	46ae      	mov	lr, r5
 800c6a8:	f04f 0a00 	mov.w	sl, #0
 800c6ac:	f8bc b000 	ldrh.w	fp, [ip]
 800c6b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c6b4:	fb09 770b 	mla	r7, r9, fp, r7
 800c6b8:	4457      	add	r7, sl
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c6c0:	f84e 3b04 	str.w	r3, [lr], #4
 800c6c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c6c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6cc:	f8be 3000 	ldrh.w	r3, [lr]
 800c6d0:	fb09 330a 	mla	r3, r9, sl, r3
 800c6d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c6d8:	4562      	cmp	r2, ip
 800c6da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6de:	d8e5      	bhi.n	800c6ac <__multiply+0x10c>
 800c6e0:	9f01      	ldr	r7, [sp, #4]
 800c6e2:	51eb      	str	r3, [r5, r7]
 800c6e4:	3504      	adds	r5, #4
 800c6e6:	e799      	b.n	800c61c <__multiply+0x7c>
 800c6e8:	3e01      	subs	r6, #1
 800c6ea:	e79b      	b.n	800c624 <__multiply+0x84>
 800c6ec:	0800eb89 	.word	0x0800eb89
 800c6f0:	0800eb9a 	.word	0x0800eb9a

0800c6f4 <__pow5mult>:
 800c6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6f8:	4615      	mov	r5, r2
 800c6fa:	f012 0203 	ands.w	r2, r2, #3
 800c6fe:	4607      	mov	r7, r0
 800c700:	460e      	mov	r6, r1
 800c702:	d007      	beq.n	800c714 <__pow5mult+0x20>
 800c704:	4c25      	ldr	r4, [pc, #148]	@ (800c79c <__pow5mult+0xa8>)
 800c706:	3a01      	subs	r2, #1
 800c708:	2300      	movs	r3, #0
 800c70a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c70e:	f7ff fe55 	bl	800c3bc <__multadd>
 800c712:	4606      	mov	r6, r0
 800c714:	10ad      	asrs	r5, r5, #2
 800c716:	d03d      	beq.n	800c794 <__pow5mult+0xa0>
 800c718:	69fc      	ldr	r4, [r7, #28]
 800c71a:	b97c      	cbnz	r4, 800c73c <__pow5mult+0x48>
 800c71c:	2010      	movs	r0, #16
 800c71e:	f7ff fd35 	bl	800c18c <malloc>
 800c722:	4602      	mov	r2, r0
 800c724:	61f8      	str	r0, [r7, #28]
 800c726:	b928      	cbnz	r0, 800c734 <__pow5mult+0x40>
 800c728:	4b1d      	ldr	r3, [pc, #116]	@ (800c7a0 <__pow5mult+0xac>)
 800c72a:	481e      	ldr	r0, [pc, #120]	@ (800c7a4 <__pow5mult+0xb0>)
 800c72c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c730:	f001 fd26 	bl	800e180 <__assert_func>
 800c734:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c738:	6004      	str	r4, [r0, #0]
 800c73a:	60c4      	str	r4, [r0, #12]
 800c73c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c740:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c744:	b94c      	cbnz	r4, 800c75a <__pow5mult+0x66>
 800c746:	f240 2171 	movw	r1, #625	@ 0x271
 800c74a:	4638      	mov	r0, r7
 800c74c:	f7ff ff12 	bl	800c574 <__i2b>
 800c750:	2300      	movs	r3, #0
 800c752:	f8c8 0008 	str.w	r0, [r8, #8]
 800c756:	4604      	mov	r4, r0
 800c758:	6003      	str	r3, [r0, #0]
 800c75a:	f04f 0900 	mov.w	r9, #0
 800c75e:	07eb      	lsls	r3, r5, #31
 800c760:	d50a      	bpl.n	800c778 <__pow5mult+0x84>
 800c762:	4631      	mov	r1, r6
 800c764:	4622      	mov	r2, r4
 800c766:	4638      	mov	r0, r7
 800c768:	f7ff ff1a 	bl	800c5a0 <__multiply>
 800c76c:	4631      	mov	r1, r6
 800c76e:	4680      	mov	r8, r0
 800c770:	4638      	mov	r0, r7
 800c772:	f7ff fe01 	bl	800c378 <_Bfree>
 800c776:	4646      	mov	r6, r8
 800c778:	106d      	asrs	r5, r5, #1
 800c77a:	d00b      	beq.n	800c794 <__pow5mult+0xa0>
 800c77c:	6820      	ldr	r0, [r4, #0]
 800c77e:	b938      	cbnz	r0, 800c790 <__pow5mult+0x9c>
 800c780:	4622      	mov	r2, r4
 800c782:	4621      	mov	r1, r4
 800c784:	4638      	mov	r0, r7
 800c786:	f7ff ff0b 	bl	800c5a0 <__multiply>
 800c78a:	6020      	str	r0, [r4, #0]
 800c78c:	f8c0 9000 	str.w	r9, [r0]
 800c790:	4604      	mov	r4, r0
 800c792:	e7e4      	b.n	800c75e <__pow5mult+0x6a>
 800c794:	4630      	mov	r0, r6
 800c796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c79a:	bf00      	nop
 800c79c:	0800ebf4 	.word	0x0800ebf4
 800c7a0:	0800eb1a 	.word	0x0800eb1a
 800c7a4:	0800eb9a 	.word	0x0800eb9a

0800c7a8 <__lshift>:
 800c7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7ac:	460c      	mov	r4, r1
 800c7ae:	6849      	ldr	r1, [r1, #4]
 800c7b0:	6923      	ldr	r3, [r4, #16]
 800c7b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7b6:	68a3      	ldr	r3, [r4, #8]
 800c7b8:	4607      	mov	r7, r0
 800c7ba:	4691      	mov	r9, r2
 800c7bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7c0:	f108 0601 	add.w	r6, r8, #1
 800c7c4:	42b3      	cmp	r3, r6
 800c7c6:	db0b      	blt.n	800c7e0 <__lshift+0x38>
 800c7c8:	4638      	mov	r0, r7
 800c7ca:	f7ff fd95 	bl	800c2f8 <_Balloc>
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	b948      	cbnz	r0, 800c7e6 <__lshift+0x3e>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	4b28      	ldr	r3, [pc, #160]	@ (800c878 <__lshift+0xd0>)
 800c7d6:	4829      	ldr	r0, [pc, #164]	@ (800c87c <__lshift+0xd4>)
 800c7d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c7dc:	f001 fcd0 	bl	800e180 <__assert_func>
 800c7e0:	3101      	adds	r1, #1
 800c7e2:	005b      	lsls	r3, r3, #1
 800c7e4:	e7ee      	b.n	800c7c4 <__lshift+0x1c>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	f100 0114 	add.w	r1, r0, #20
 800c7ec:	f100 0210 	add.w	r2, r0, #16
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	4553      	cmp	r3, sl
 800c7f4:	db33      	blt.n	800c85e <__lshift+0xb6>
 800c7f6:	6920      	ldr	r0, [r4, #16]
 800c7f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7fc:	f104 0314 	add.w	r3, r4, #20
 800c800:	f019 091f 	ands.w	r9, r9, #31
 800c804:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c808:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c80c:	d02b      	beq.n	800c866 <__lshift+0xbe>
 800c80e:	f1c9 0e20 	rsb	lr, r9, #32
 800c812:	468a      	mov	sl, r1
 800c814:	2200      	movs	r2, #0
 800c816:	6818      	ldr	r0, [r3, #0]
 800c818:	fa00 f009 	lsl.w	r0, r0, r9
 800c81c:	4310      	orrs	r0, r2
 800c81e:	f84a 0b04 	str.w	r0, [sl], #4
 800c822:	f853 2b04 	ldr.w	r2, [r3], #4
 800c826:	459c      	cmp	ip, r3
 800c828:	fa22 f20e 	lsr.w	r2, r2, lr
 800c82c:	d8f3      	bhi.n	800c816 <__lshift+0x6e>
 800c82e:	ebac 0304 	sub.w	r3, ip, r4
 800c832:	3b15      	subs	r3, #21
 800c834:	f023 0303 	bic.w	r3, r3, #3
 800c838:	3304      	adds	r3, #4
 800c83a:	f104 0015 	add.w	r0, r4, #21
 800c83e:	4584      	cmp	ip, r0
 800c840:	bf38      	it	cc
 800c842:	2304      	movcc	r3, #4
 800c844:	50ca      	str	r2, [r1, r3]
 800c846:	b10a      	cbz	r2, 800c84c <__lshift+0xa4>
 800c848:	f108 0602 	add.w	r6, r8, #2
 800c84c:	3e01      	subs	r6, #1
 800c84e:	4638      	mov	r0, r7
 800c850:	612e      	str	r6, [r5, #16]
 800c852:	4621      	mov	r1, r4
 800c854:	f7ff fd90 	bl	800c378 <_Bfree>
 800c858:	4628      	mov	r0, r5
 800c85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c85e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c862:	3301      	adds	r3, #1
 800c864:	e7c5      	b.n	800c7f2 <__lshift+0x4a>
 800c866:	3904      	subs	r1, #4
 800c868:	f853 2b04 	ldr.w	r2, [r3], #4
 800c86c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c870:	459c      	cmp	ip, r3
 800c872:	d8f9      	bhi.n	800c868 <__lshift+0xc0>
 800c874:	e7ea      	b.n	800c84c <__lshift+0xa4>
 800c876:	bf00      	nop
 800c878:	0800eb89 	.word	0x0800eb89
 800c87c:	0800eb9a 	.word	0x0800eb9a

0800c880 <__mcmp>:
 800c880:	690a      	ldr	r2, [r1, #16]
 800c882:	4603      	mov	r3, r0
 800c884:	6900      	ldr	r0, [r0, #16]
 800c886:	1a80      	subs	r0, r0, r2
 800c888:	b530      	push	{r4, r5, lr}
 800c88a:	d10e      	bne.n	800c8aa <__mcmp+0x2a>
 800c88c:	3314      	adds	r3, #20
 800c88e:	3114      	adds	r1, #20
 800c890:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c894:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c898:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c89c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c8a0:	4295      	cmp	r5, r2
 800c8a2:	d003      	beq.n	800c8ac <__mcmp+0x2c>
 800c8a4:	d205      	bcs.n	800c8b2 <__mcmp+0x32>
 800c8a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8aa:	bd30      	pop	{r4, r5, pc}
 800c8ac:	42a3      	cmp	r3, r4
 800c8ae:	d3f3      	bcc.n	800c898 <__mcmp+0x18>
 800c8b0:	e7fb      	b.n	800c8aa <__mcmp+0x2a>
 800c8b2:	2001      	movs	r0, #1
 800c8b4:	e7f9      	b.n	800c8aa <__mcmp+0x2a>
	...

0800c8b8 <__mdiff>:
 800c8b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8bc:	4689      	mov	r9, r1
 800c8be:	4606      	mov	r6, r0
 800c8c0:	4611      	mov	r1, r2
 800c8c2:	4648      	mov	r0, r9
 800c8c4:	4614      	mov	r4, r2
 800c8c6:	f7ff ffdb 	bl	800c880 <__mcmp>
 800c8ca:	1e05      	subs	r5, r0, #0
 800c8cc:	d112      	bne.n	800c8f4 <__mdiff+0x3c>
 800c8ce:	4629      	mov	r1, r5
 800c8d0:	4630      	mov	r0, r6
 800c8d2:	f7ff fd11 	bl	800c2f8 <_Balloc>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	b928      	cbnz	r0, 800c8e6 <__mdiff+0x2e>
 800c8da:	4b3f      	ldr	r3, [pc, #252]	@ (800c9d8 <__mdiff+0x120>)
 800c8dc:	f240 2137 	movw	r1, #567	@ 0x237
 800c8e0:	483e      	ldr	r0, [pc, #248]	@ (800c9dc <__mdiff+0x124>)
 800c8e2:	f001 fc4d 	bl	800e180 <__assert_func>
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c8ec:	4610      	mov	r0, r2
 800c8ee:	b003      	add	sp, #12
 800c8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f4:	bfbc      	itt	lt
 800c8f6:	464b      	movlt	r3, r9
 800c8f8:	46a1      	movlt	r9, r4
 800c8fa:	4630      	mov	r0, r6
 800c8fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c900:	bfba      	itte	lt
 800c902:	461c      	movlt	r4, r3
 800c904:	2501      	movlt	r5, #1
 800c906:	2500      	movge	r5, #0
 800c908:	f7ff fcf6 	bl	800c2f8 <_Balloc>
 800c90c:	4602      	mov	r2, r0
 800c90e:	b918      	cbnz	r0, 800c918 <__mdiff+0x60>
 800c910:	4b31      	ldr	r3, [pc, #196]	@ (800c9d8 <__mdiff+0x120>)
 800c912:	f240 2145 	movw	r1, #581	@ 0x245
 800c916:	e7e3      	b.n	800c8e0 <__mdiff+0x28>
 800c918:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c91c:	6926      	ldr	r6, [r4, #16]
 800c91e:	60c5      	str	r5, [r0, #12]
 800c920:	f109 0310 	add.w	r3, r9, #16
 800c924:	f109 0514 	add.w	r5, r9, #20
 800c928:	f104 0e14 	add.w	lr, r4, #20
 800c92c:	f100 0b14 	add.w	fp, r0, #20
 800c930:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c934:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c938:	9301      	str	r3, [sp, #4]
 800c93a:	46d9      	mov	r9, fp
 800c93c:	f04f 0c00 	mov.w	ip, #0
 800c940:	9b01      	ldr	r3, [sp, #4]
 800c942:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c946:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c94a:	9301      	str	r3, [sp, #4]
 800c94c:	fa1f f38a 	uxth.w	r3, sl
 800c950:	4619      	mov	r1, r3
 800c952:	b283      	uxth	r3, r0
 800c954:	1acb      	subs	r3, r1, r3
 800c956:	0c00      	lsrs	r0, r0, #16
 800c958:	4463      	add	r3, ip
 800c95a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c95e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c962:	b29b      	uxth	r3, r3
 800c964:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c968:	4576      	cmp	r6, lr
 800c96a:	f849 3b04 	str.w	r3, [r9], #4
 800c96e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c972:	d8e5      	bhi.n	800c940 <__mdiff+0x88>
 800c974:	1b33      	subs	r3, r6, r4
 800c976:	3b15      	subs	r3, #21
 800c978:	f023 0303 	bic.w	r3, r3, #3
 800c97c:	3415      	adds	r4, #21
 800c97e:	3304      	adds	r3, #4
 800c980:	42a6      	cmp	r6, r4
 800c982:	bf38      	it	cc
 800c984:	2304      	movcc	r3, #4
 800c986:	441d      	add	r5, r3
 800c988:	445b      	add	r3, fp
 800c98a:	461e      	mov	r6, r3
 800c98c:	462c      	mov	r4, r5
 800c98e:	4544      	cmp	r4, r8
 800c990:	d30e      	bcc.n	800c9b0 <__mdiff+0xf8>
 800c992:	f108 0103 	add.w	r1, r8, #3
 800c996:	1b49      	subs	r1, r1, r5
 800c998:	f021 0103 	bic.w	r1, r1, #3
 800c99c:	3d03      	subs	r5, #3
 800c99e:	45a8      	cmp	r8, r5
 800c9a0:	bf38      	it	cc
 800c9a2:	2100      	movcc	r1, #0
 800c9a4:	440b      	add	r3, r1
 800c9a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9aa:	b191      	cbz	r1, 800c9d2 <__mdiff+0x11a>
 800c9ac:	6117      	str	r7, [r2, #16]
 800c9ae:	e79d      	b.n	800c8ec <__mdiff+0x34>
 800c9b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c9b4:	46e6      	mov	lr, ip
 800c9b6:	0c08      	lsrs	r0, r1, #16
 800c9b8:	fa1c fc81 	uxtah	ip, ip, r1
 800c9bc:	4471      	add	r1, lr
 800c9be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c9c2:	b289      	uxth	r1, r1
 800c9c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c9c8:	f846 1b04 	str.w	r1, [r6], #4
 800c9cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c9d0:	e7dd      	b.n	800c98e <__mdiff+0xd6>
 800c9d2:	3f01      	subs	r7, #1
 800c9d4:	e7e7      	b.n	800c9a6 <__mdiff+0xee>
 800c9d6:	bf00      	nop
 800c9d8:	0800eb89 	.word	0x0800eb89
 800c9dc:	0800eb9a 	.word	0x0800eb9a

0800c9e0 <__ulp>:
 800c9e0:	b082      	sub	sp, #8
 800c9e2:	ed8d 0b00 	vstr	d0, [sp]
 800c9e6:	9a01      	ldr	r2, [sp, #4]
 800c9e8:	4b0f      	ldr	r3, [pc, #60]	@ (800ca28 <__ulp+0x48>)
 800c9ea:	4013      	ands	r3, r2
 800c9ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	dc08      	bgt.n	800ca06 <__ulp+0x26>
 800c9f4:	425b      	negs	r3, r3
 800c9f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c9fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c9fe:	da04      	bge.n	800ca0a <__ulp+0x2a>
 800ca00:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ca04:	4113      	asrs	r3, r2
 800ca06:	2200      	movs	r2, #0
 800ca08:	e008      	b.n	800ca1c <__ulp+0x3c>
 800ca0a:	f1a2 0314 	sub.w	r3, r2, #20
 800ca0e:	2b1e      	cmp	r3, #30
 800ca10:	bfda      	itte	le
 800ca12:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ca16:	40da      	lsrle	r2, r3
 800ca18:	2201      	movgt	r2, #1
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	4610      	mov	r0, r2
 800ca20:	ec41 0b10 	vmov	d0, r0, r1
 800ca24:	b002      	add	sp, #8
 800ca26:	4770      	bx	lr
 800ca28:	7ff00000 	.word	0x7ff00000

0800ca2c <__b2d>:
 800ca2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca30:	6906      	ldr	r6, [r0, #16]
 800ca32:	f100 0814 	add.w	r8, r0, #20
 800ca36:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ca3a:	1f37      	subs	r7, r6, #4
 800ca3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ca40:	4610      	mov	r0, r2
 800ca42:	f7ff fd4b 	bl	800c4dc <__hi0bits>
 800ca46:	f1c0 0320 	rsb	r3, r0, #32
 800ca4a:	280a      	cmp	r0, #10
 800ca4c:	600b      	str	r3, [r1, #0]
 800ca4e:	491b      	ldr	r1, [pc, #108]	@ (800cabc <__b2d+0x90>)
 800ca50:	dc15      	bgt.n	800ca7e <__b2d+0x52>
 800ca52:	f1c0 0c0b 	rsb	ip, r0, #11
 800ca56:	fa22 f30c 	lsr.w	r3, r2, ip
 800ca5a:	45b8      	cmp	r8, r7
 800ca5c:	ea43 0501 	orr.w	r5, r3, r1
 800ca60:	bf34      	ite	cc
 800ca62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ca66:	2300      	movcs	r3, #0
 800ca68:	3015      	adds	r0, #21
 800ca6a:	fa02 f000 	lsl.w	r0, r2, r0
 800ca6e:	fa23 f30c 	lsr.w	r3, r3, ip
 800ca72:	4303      	orrs	r3, r0
 800ca74:	461c      	mov	r4, r3
 800ca76:	ec45 4b10 	vmov	d0, r4, r5
 800ca7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca7e:	45b8      	cmp	r8, r7
 800ca80:	bf3a      	itte	cc
 800ca82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ca86:	f1a6 0708 	subcc.w	r7, r6, #8
 800ca8a:	2300      	movcs	r3, #0
 800ca8c:	380b      	subs	r0, #11
 800ca8e:	d012      	beq.n	800cab6 <__b2d+0x8a>
 800ca90:	f1c0 0120 	rsb	r1, r0, #32
 800ca94:	fa23 f401 	lsr.w	r4, r3, r1
 800ca98:	4082      	lsls	r2, r0
 800ca9a:	4322      	orrs	r2, r4
 800ca9c:	4547      	cmp	r7, r8
 800ca9e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800caa2:	bf8c      	ite	hi
 800caa4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800caa8:	2200      	movls	r2, #0
 800caaa:	4083      	lsls	r3, r0
 800caac:	40ca      	lsrs	r2, r1
 800caae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cab2:	4313      	orrs	r3, r2
 800cab4:	e7de      	b.n	800ca74 <__b2d+0x48>
 800cab6:	ea42 0501 	orr.w	r5, r2, r1
 800caba:	e7db      	b.n	800ca74 <__b2d+0x48>
 800cabc:	3ff00000 	.word	0x3ff00000

0800cac0 <__d2b>:
 800cac0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cac4:	460f      	mov	r7, r1
 800cac6:	2101      	movs	r1, #1
 800cac8:	ec59 8b10 	vmov	r8, r9, d0
 800cacc:	4616      	mov	r6, r2
 800cace:	f7ff fc13 	bl	800c2f8 <_Balloc>
 800cad2:	4604      	mov	r4, r0
 800cad4:	b930      	cbnz	r0, 800cae4 <__d2b+0x24>
 800cad6:	4602      	mov	r2, r0
 800cad8:	4b23      	ldr	r3, [pc, #140]	@ (800cb68 <__d2b+0xa8>)
 800cada:	4824      	ldr	r0, [pc, #144]	@ (800cb6c <__d2b+0xac>)
 800cadc:	f240 310f 	movw	r1, #783	@ 0x30f
 800cae0:	f001 fb4e 	bl	800e180 <__assert_func>
 800cae4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cae8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800caec:	b10d      	cbz	r5, 800caf2 <__d2b+0x32>
 800caee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800caf2:	9301      	str	r3, [sp, #4]
 800caf4:	f1b8 0300 	subs.w	r3, r8, #0
 800caf8:	d023      	beq.n	800cb42 <__d2b+0x82>
 800cafa:	4668      	mov	r0, sp
 800cafc:	9300      	str	r3, [sp, #0]
 800cafe:	f7ff fd0c 	bl	800c51a <__lo0bits>
 800cb02:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cb06:	b1d0      	cbz	r0, 800cb3e <__d2b+0x7e>
 800cb08:	f1c0 0320 	rsb	r3, r0, #32
 800cb0c:	fa02 f303 	lsl.w	r3, r2, r3
 800cb10:	430b      	orrs	r3, r1
 800cb12:	40c2      	lsrs	r2, r0
 800cb14:	6163      	str	r3, [r4, #20]
 800cb16:	9201      	str	r2, [sp, #4]
 800cb18:	9b01      	ldr	r3, [sp, #4]
 800cb1a:	61a3      	str	r3, [r4, #24]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	bf0c      	ite	eq
 800cb20:	2201      	moveq	r2, #1
 800cb22:	2202      	movne	r2, #2
 800cb24:	6122      	str	r2, [r4, #16]
 800cb26:	b1a5      	cbz	r5, 800cb52 <__d2b+0x92>
 800cb28:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cb2c:	4405      	add	r5, r0
 800cb2e:	603d      	str	r5, [r7, #0]
 800cb30:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cb34:	6030      	str	r0, [r6, #0]
 800cb36:	4620      	mov	r0, r4
 800cb38:	b003      	add	sp, #12
 800cb3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb3e:	6161      	str	r1, [r4, #20]
 800cb40:	e7ea      	b.n	800cb18 <__d2b+0x58>
 800cb42:	a801      	add	r0, sp, #4
 800cb44:	f7ff fce9 	bl	800c51a <__lo0bits>
 800cb48:	9b01      	ldr	r3, [sp, #4]
 800cb4a:	6163      	str	r3, [r4, #20]
 800cb4c:	3020      	adds	r0, #32
 800cb4e:	2201      	movs	r2, #1
 800cb50:	e7e8      	b.n	800cb24 <__d2b+0x64>
 800cb52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb56:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cb5a:	6038      	str	r0, [r7, #0]
 800cb5c:	6918      	ldr	r0, [r3, #16]
 800cb5e:	f7ff fcbd 	bl	800c4dc <__hi0bits>
 800cb62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb66:	e7e5      	b.n	800cb34 <__d2b+0x74>
 800cb68:	0800eb89 	.word	0x0800eb89
 800cb6c:	0800eb9a 	.word	0x0800eb9a

0800cb70 <__ratio>:
 800cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb74:	b085      	sub	sp, #20
 800cb76:	e9cd 1000 	strd	r1, r0, [sp]
 800cb7a:	a902      	add	r1, sp, #8
 800cb7c:	f7ff ff56 	bl	800ca2c <__b2d>
 800cb80:	9800      	ldr	r0, [sp, #0]
 800cb82:	a903      	add	r1, sp, #12
 800cb84:	ec55 4b10 	vmov	r4, r5, d0
 800cb88:	f7ff ff50 	bl	800ca2c <__b2d>
 800cb8c:	9b01      	ldr	r3, [sp, #4]
 800cb8e:	6919      	ldr	r1, [r3, #16]
 800cb90:	9b00      	ldr	r3, [sp, #0]
 800cb92:	691b      	ldr	r3, [r3, #16]
 800cb94:	1ac9      	subs	r1, r1, r3
 800cb96:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cb9a:	1a9b      	subs	r3, r3, r2
 800cb9c:	ec5b ab10 	vmov	sl, fp, d0
 800cba0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	bfce      	itee	gt
 800cba8:	462a      	movgt	r2, r5
 800cbaa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cbae:	465a      	movle	r2, fp
 800cbb0:	462f      	mov	r7, r5
 800cbb2:	46d9      	mov	r9, fp
 800cbb4:	bfcc      	ite	gt
 800cbb6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cbba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cbbe:	464b      	mov	r3, r9
 800cbc0:	4652      	mov	r2, sl
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	4639      	mov	r1, r7
 800cbc6:	f7f3 fe41 	bl	800084c <__aeabi_ddiv>
 800cbca:	ec41 0b10 	vmov	d0, r0, r1
 800cbce:	b005      	add	sp, #20
 800cbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cbd4 <__copybits>:
 800cbd4:	3901      	subs	r1, #1
 800cbd6:	b570      	push	{r4, r5, r6, lr}
 800cbd8:	1149      	asrs	r1, r1, #5
 800cbda:	6914      	ldr	r4, [r2, #16]
 800cbdc:	3101      	adds	r1, #1
 800cbde:	f102 0314 	add.w	r3, r2, #20
 800cbe2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cbe6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cbea:	1f05      	subs	r5, r0, #4
 800cbec:	42a3      	cmp	r3, r4
 800cbee:	d30c      	bcc.n	800cc0a <__copybits+0x36>
 800cbf0:	1aa3      	subs	r3, r4, r2
 800cbf2:	3b11      	subs	r3, #17
 800cbf4:	f023 0303 	bic.w	r3, r3, #3
 800cbf8:	3211      	adds	r2, #17
 800cbfa:	42a2      	cmp	r2, r4
 800cbfc:	bf88      	it	hi
 800cbfe:	2300      	movhi	r3, #0
 800cc00:	4418      	add	r0, r3
 800cc02:	2300      	movs	r3, #0
 800cc04:	4288      	cmp	r0, r1
 800cc06:	d305      	bcc.n	800cc14 <__copybits+0x40>
 800cc08:	bd70      	pop	{r4, r5, r6, pc}
 800cc0a:	f853 6b04 	ldr.w	r6, [r3], #4
 800cc0e:	f845 6f04 	str.w	r6, [r5, #4]!
 800cc12:	e7eb      	b.n	800cbec <__copybits+0x18>
 800cc14:	f840 3b04 	str.w	r3, [r0], #4
 800cc18:	e7f4      	b.n	800cc04 <__copybits+0x30>

0800cc1a <__any_on>:
 800cc1a:	f100 0214 	add.w	r2, r0, #20
 800cc1e:	6900      	ldr	r0, [r0, #16]
 800cc20:	114b      	asrs	r3, r1, #5
 800cc22:	4298      	cmp	r0, r3
 800cc24:	b510      	push	{r4, lr}
 800cc26:	db11      	blt.n	800cc4c <__any_on+0x32>
 800cc28:	dd0a      	ble.n	800cc40 <__any_on+0x26>
 800cc2a:	f011 011f 	ands.w	r1, r1, #31
 800cc2e:	d007      	beq.n	800cc40 <__any_on+0x26>
 800cc30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cc34:	fa24 f001 	lsr.w	r0, r4, r1
 800cc38:	fa00 f101 	lsl.w	r1, r0, r1
 800cc3c:	428c      	cmp	r4, r1
 800cc3e:	d10b      	bne.n	800cc58 <__any_on+0x3e>
 800cc40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d803      	bhi.n	800cc50 <__any_on+0x36>
 800cc48:	2000      	movs	r0, #0
 800cc4a:	bd10      	pop	{r4, pc}
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	e7f7      	b.n	800cc40 <__any_on+0x26>
 800cc50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc54:	2900      	cmp	r1, #0
 800cc56:	d0f5      	beq.n	800cc44 <__any_on+0x2a>
 800cc58:	2001      	movs	r0, #1
 800cc5a:	e7f6      	b.n	800cc4a <__any_on+0x30>

0800cc5c <sulp>:
 800cc5c:	b570      	push	{r4, r5, r6, lr}
 800cc5e:	4604      	mov	r4, r0
 800cc60:	460d      	mov	r5, r1
 800cc62:	ec45 4b10 	vmov	d0, r4, r5
 800cc66:	4616      	mov	r6, r2
 800cc68:	f7ff feba 	bl	800c9e0 <__ulp>
 800cc6c:	ec51 0b10 	vmov	r0, r1, d0
 800cc70:	b17e      	cbz	r6, 800cc92 <sulp+0x36>
 800cc72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cc76:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	dd09      	ble.n	800cc92 <sulp+0x36>
 800cc7e:	051b      	lsls	r3, r3, #20
 800cc80:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cc84:	2400      	movs	r4, #0
 800cc86:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cc8a:	4622      	mov	r2, r4
 800cc8c:	462b      	mov	r3, r5
 800cc8e:	f7f3 fcb3 	bl	80005f8 <__aeabi_dmul>
 800cc92:	ec41 0b10 	vmov	d0, r0, r1
 800cc96:	bd70      	pop	{r4, r5, r6, pc}

0800cc98 <_strtod_l>:
 800cc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc9c:	b09f      	sub	sp, #124	@ 0x7c
 800cc9e:	460c      	mov	r4, r1
 800cca0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cca2:	2200      	movs	r2, #0
 800cca4:	921a      	str	r2, [sp, #104]	@ 0x68
 800cca6:	9005      	str	r0, [sp, #20]
 800cca8:	f04f 0a00 	mov.w	sl, #0
 800ccac:	f04f 0b00 	mov.w	fp, #0
 800ccb0:	460a      	mov	r2, r1
 800ccb2:	9219      	str	r2, [sp, #100]	@ 0x64
 800ccb4:	7811      	ldrb	r1, [r2, #0]
 800ccb6:	292b      	cmp	r1, #43	@ 0x2b
 800ccb8:	d04a      	beq.n	800cd50 <_strtod_l+0xb8>
 800ccba:	d838      	bhi.n	800cd2e <_strtod_l+0x96>
 800ccbc:	290d      	cmp	r1, #13
 800ccbe:	d832      	bhi.n	800cd26 <_strtod_l+0x8e>
 800ccc0:	2908      	cmp	r1, #8
 800ccc2:	d832      	bhi.n	800cd2a <_strtod_l+0x92>
 800ccc4:	2900      	cmp	r1, #0
 800ccc6:	d03b      	beq.n	800cd40 <_strtod_l+0xa8>
 800ccc8:	2200      	movs	r2, #0
 800ccca:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cccc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ccce:	782a      	ldrb	r2, [r5, #0]
 800ccd0:	2a30      	cmp	r2, #48	@ 0x30
 800ccd2:	f040 80b3 	bne.w	800ce3c <_strtod_l+0x1a4>
 800ccd6:	786a      	ldrb	r2, [r5, #1]
 800ccd8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ccdc:	2a58      	cmp	r2, #88	@ 0x58
 800ccde:	d16e      	bne.n	800cdbe <_strtod_l+0x126>
 800cce0:	9302      	str	r3, [sp, #8]
 800cce2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cce4:	9301      	str	r3, [sp, #4]
 800cce6:	ab1a      	add	r3, sp, #104	@ 0x68
 800cce8:	9300      	str	r3, [sp, #0]
 800ccea:	4a8e      	ldr	r2, [pc, #568]	@ (800cf24 <_strtod_l+0x28c>)
 800ccec:	9805      	ldr	r0, [sp, #20]
 800ccee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ccf0:	a919      	add	r1, sp, #100	@ 0x64
 800ccf2:	f001 fadf 	bl	800e2b4 <__gethex>
 800ccf6:	f010 060f 	ands.w	r6, r0, #15
 800ccfa:	4604      	mov	r4, r0
 800ccfc:	d005      	beq.n	800cd0a <_strtod_l+0x72>
 800ccfe:	2e06      	cmp	r6, #6
 800cd00:	d128      	bne.n	800cd54 <_strtod_l+0xbc>
 800cd02:	3501      	adds	r5, #1
 800cd04:	2300      	movs	r3, #0
 800cd06:	9519      	str	r5, [sp, #100]	@ 0x64
 800cd08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	f040 858e 	bne.w	800d82e <_strtod_l+0xb96>
 800cd12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd14:	b1cb      	cbz	r3, 800cd4a <_strtod_l+0xb2>
 800cd16:	4652      	mov	r2, sl
 800cd18:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cd1c:	ec43 2b10 	vmov	d0, r2, r3
 800cd20:	b01f      	add	sp, #124	@ 0x7c
 800cd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd26:	2920      	cmp	r1, #32
 800cd28:	d1ce      	bne.n	800ccc8 <_strtod_l+0x30>
 800cd2a:	3201      	adds	r2, #1
 800cd2c:	e7c1      	b.n	800ccb2 <_strtod_l+0x1a>
 800cd2e:	292d      	cmp	r1, #45	@ 0x2d
 800cd30:	d1ca      	bne.n	800ccc8 <_strtod_l+0x30>
 800cd32:	2101      	movs	r1, #1
 800cd34:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cd36:	1c51      	adds	r1, r2, #1
 800cd38:	9119      	str	r1, [sp, #100]	@ 0x64
 800cd3a:	7852      	ldrb	r2, [r2, #1]
 800cd3c:	2a00      	cmp	r2, #0
 800cd3e:	d1c5      	bne.n	800cccc <_strtod_l+0x34>
 800cd40:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cd42:	9419      	str	r4, [sp, #100]	@ 0x64
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	f040 8570 	bne.w	800d82a <_strtod_l+0xb92>
 800cd4a:	4652      	mov	r2, sl
 800cd4c:	465b      	mov	r3, fp
 800cd4e:	e7e5      	b.n	800cd1c <_strtod_l+0x84>
 800cd50:	2100      	movs	r1, #0
 800cd52:	e7ef      	b.n	800cd34 <_strtod_l+0x9c>
 800cd54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cd56:	b13a      	cbz	r2, 800cd68 <_strtod_l+0xd0>
 800cd58:	2135      	movs	r1, #53	@ 0x35
 800cd5a:	a81c      	add	r0, sp, #112	@ 0x70
 800cd5c:	f7ff ff3a 	bl	800cbd4 <__copybits>
 800cd60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd62:	9805      	ldr	r0, [sp, #20]
 800cd64:	f7ff fb08 	bl	800c378 <_Bfree>
 800cd68:	3e01      	subs	r6, #1
 800cd6a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cd6c:	2e04      	cmp	r6, #4
 800cd6e:	d806      	bhi.n	800cd7e <_strtod_l+0xe6>
 800cd70:	e8df f006 	tbb	[pc, r6]
 800cd74:	201d0314 	.word	0x201d0314
 800cd78:	14          	.byte	0x14
 800cd79:	00          	.byte	0x00
 800cd7a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cd7e:	05e1      	lsls	r1, r4, #23
 800cd80:	bf48      	it	mi
 800cd82:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cd86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cd8a:	0d1b      	lsrs	r3, r3, #20
 800cd8c:	051b      	lsls	r3, r3, #20
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d1bb      	bne.n	800cd0a <_strtod_l+0x72>
 800cd92:	f7fe fb23 	bl	800b3dc <__errno>
 800cd96:	2322      	movs	r3, #34	@ 0x22
 800cd98:	6003      	str	r3, [r0, #0]
 800cd9a:	e7b6      	b.n	800cd0a <_strtod_l+0x72>
 800cd9c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cda0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cda4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cda8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cdac:	e7e7      	b.n	800cd7e <_strtod_l+0xe6>
 800cdae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cf2c <_strtod_l+0x294>
 800cdb2:	e7e4      	b.n	800cd7e <_strtod_l+0xe6>
 800cdb4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cdb8:	f04f 3aff 	mov.w	sl, #4294967295
 800cdbc:	e7df      	b.n	800cd7e <_strtod_l+0xe6>
 800cdbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdc0:	1c5a      	adds	r2, r3, #1
 800cdc2:	9219      	str	r2, [sp, #100]	@ 0x64
 800cdc4:	785b      	ldrb	r3, [r3, #1]
 800cdc6:	2b30      	cmp	r3, #48	@ 0x30
 800cdc8:	d0f9      	beq.n	800cdbe <_strtod_l+0x126>
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d09d      	beq.n	800cd0a <_strtod_l+0x72>
 800cdce:	2301      	movs	r3, #1
 800cdd0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdd4:	930c      	str	r3, [sp, #48]	@ 0x30
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	9308      	str	r3, [sp, #32]
 800cdda:	930a      	str	r3, [sp, #40]	@ 0x28
 800cddc:	461f      	mov	r7, r3
 800cdde:	220a      	movs	r2, #10
 800cde0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cde2:	7805      	ldrb	r5, [r0, #0]
 800cde4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cde8:	b2d9      	uxtb	r1, r3
 800cdea:	2909      	cmp	r1, #9
 800cdec:	d928      	bls.n	800ce40 <_strtod_l+0x1a8>
 800cdee:	494e      	ldr	r1, [pc, #312]	@ (800cf28 <_strtod_l+0x290>)
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	f001 f979 	bl	800e0e8 <strncmp>
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	d032      	beq.n	800ce60 <_strtod_l+0x1c8>
 800cdfa:	2000      	movs	r0, #0
 800cdfc:	462a      	mov	r2, r5
 800cdfe:	4681      	mov	r9, r0
 800ce00:	463d      	mov	r5, r7
 800ce02:	4603      	mov	r3, r0
 800ce04:	2a65      	cmp	r2, #101	@ 0x65
 800ce06:	d001      	beq.n	800ce0c <_strtod_l+0x174>
 800ce08:	2a45      	cmp	r2, #69	@ 0x45
 800ce0a:	d114      	bne.n	800ce36 <_strtod_l+0x19e>
 800ce0c:	b91d      	cbnz	r5, 800ce16 <_strtod_l+0x17e>
 800ce0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce10:	4302      	orrs	r2, r0
 800ce12:	d095      	beq.n	800cd40 <_strtod_l+0xa8>
 800ce14:	2500      	movs	r5, #0
 800ce16:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ce18:	1c62      	adds	r2, r4, #1
 800ce1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce1c:	7862      	ldrb	r2, [r4, #1]
 800ce1e:	2a2b      	cmp	r2, #43	@ 0x2b
 800ce20:	d077      	beq.n	800cf12 <_strtod_l+0x27a>
 800ce22:	2a2d      	cmp	r2, #45	@ 0x2d
 800ce24:	d07b      	beq.n	800cf1e <_strtod_l+0x286>
 800ce26:	f04f 0c00 	mov.w	ip, #0
 800ce2a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ce2e:	2909      	cmp	r1, #9
 800ce30:	f240 8082 	bls.w	800cf38 <_strtod_l+0x2a0>
 800ce34:	9419      	str	r4, [sp, #100]	@ 0x64
 800ce36:	f04f 0800 	mov.w	r8, #0
 800ce3a:	e0a2      	b.n	800cf82 <_strtod_l+0x2ea>
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	e7c7      	b.n	800cdd0 <_strtod_l+0x138>
 800ce40:	2f08      	cmp	r7, #8
 800ce42:	bfd5      	itete	le
 800ce44:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ce46:	9908      	ldrgt	r1, [sp, #32]
 800ce48:	fb02 3301 	mlale	r3, r2, r1, r3
 800ce4c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ce50:	f100 0001 	add.w	r0, r0, #1
 800ce54:	bfd4      	ite	le
 800ce56:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ce58:	9308      	strgt	r3, [sp, #32]
 800ce5a:	3701      	adds	r7, #1
 800ce5c:	9019      	str	r0, [sp, #100]	@ 0x64
 800ce5e:	e7bf      	b.n	800cde0 <_strtod_l+0x148>
 800ce60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce62:	1c5a      	adds	r2, r3, #1
 800ce64:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce66:	785a      	ldrb	r2, [r3, #1]
 800ce68:	b37f      	cbz	r7, 800ceca <_strtod_l+0x232>
 800ce6a:	4681      	mov	r9, r0
 800ce6c:	463d      	mov	r5, r7
 800ce6e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ce72:	2b09      	cmp	r3, #9
 800ce74:	d912      	bls.n	800ce9c <_strtod_l+0x204>
 800ce76:	2301      	movs	r3, #1
 800ce78:	e7c4      	b.n	800ce04 <_strtod_l+0x16c>
 800ce7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce7c:	1c5a      	adds	r2, r3, #1
 800ce7e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce80:	785a      	ldrb	r2, [r3, #1]
 800ce82:	3001      	adds	r0, #1
 800ce84:	2a30      	cmp	r2, #48	@ 0x30
 800ce86:	d0f8      	beq.n	800ce7a <_strtod_l+0x1e2>
 800ce88:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ce8c:	2b08      	cmp	r3, #8
 800ce8e:	f200 84d3 	bhi.w	800d838 <_strtod_l+0xba0>
 800ce92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce94:	930c      	str	r3, [sp, #48]	@ 0x30
 800ce96:	4681      	mov	r9, r0
 800ce98:	2000      	movs	r0, #0
 800ce9a:	4605      	mov	r5, r0
 800ce9c:	3a30      	subs	r2, #48	@ 0x30
 800ce9e:	f100 0301 	add.w	r3, r0, #1
 800cea2:	d02a      	beq.n	800cefa <_strtod_l+0x262>
 800cea4:	4499      	add	r9, r3
 800cea6:	eb00 0c05 	add.w	ip, r0, r5
 800ceaa:	462b      	mov	r3, r5
 800ceac:	210a      	movs	r1, #10
 800ceae:	4563      	cmp	r3, ip
 800ceb0:	d10d      	bne.n	800cece <_strtod_l+0x236>
 800ceb2:	1c69      	adds	r1, r5, #1
 800ceb4:	4401      	add	r1, r0
 800ceb6:	4428      	add	r0, r5
 800ceb8:	2808      	cmp	r0, #8
 800ceba:	dc16      	bgt.n	800ceea <_strtod_l+0x252>
 800cebc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cebe:	230a      	movs	r3, #10
 800cec0:	fb03 2300 	mla	r3, r3, r0, r2
 800cec4:	930a      	str	r3, [sp, #40]	@ 0x28
 800cec6:	2300      	movs	r3, #0
 800cec8:	e018      	b.n	800cefc <_strtod_l+0x264>
 800ceca:	4638      	mov	r0, r7
 800cecc:	e7da      	b.n	800ce84 <_strtod_l+0x1ec>
 800cece:	2b08      	cmp	r3, #8
 800ced0:	f103 0301 	add.w	r3, r3, #1
 800ced4:	dc03      	bgt.n	800cede <_strtod_l+0x246>
 800ced6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ced8:	434e      	muls	r6, r1
 800ceda:	960a      	str	r6, [sp, #40]	@ 0x28
 800cedc:	e7e7      	b.n	800ceae <_strtod_l+0x216>
 800cede:	2b10      	cmp	r3, #16
 800cee0:	bfde      	ittt	le
 800cee2:	9e08      	ldrle	r6, [sp, #32]
 800cee4:	434e      	mulle	r6, r1
 800cee6:	9608      	strle	r6, [sp, #32]
 800cee8:	e7e1      	b.n	800ceae <_strtod_l+0x216>
 800ceea:	280f      	cmp	r0, #15
 800ceec:	dceb      	bgt.n	800cec6 <_strtod_l+0x22e>
 800ceee:	9808      	ldr	r0, [sp, #32]
 800cef0:	230a      	movs	r3, #10
 800cef2:	fb03 2300 	mla	r3, r3, r0, r2
 800cef6:	9308      	str	r3, [sp, #32]
 800cef8:	e7e5      	b.n	800cec6 <_strtod_l+0x22e>
 800cefa:	4629      	mov	r1, r5
 800cefc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cefe:	1c50      	adds	r0, r2, #1
 800cf00:	9019      	str	r0, [sp, #100]	@ 0x64
 800cf02:	7852      	ldrb	r2, [r2, #1]
 800cf04:	4618      	mov	r0, r3
 800cf06:	460d      	mov	r5, r1
 800cf08:	e7b1      	b.n	800ce6e <_strtod_l+0x1d6>
 800cf0a:	f04f 0900 	mov.w	r9, #0
 800cf0e:	2301      	movs	r3, #1
 800cf10:	e77d      	b.n	800ce0e <_strtod_l+0x176>
 800cf12:	f04f 0c00 	mov.w	ip, #0
 800cf16:	1ca2      	adds	r2, r4, #2
 800cf18:	9219      	str	r2, [sp, #100]	@ 0x64
 800cf1a:	78a2      	ldrb	r2, [r4, #2]
 800cf1c:	e785      	b.n	800ce2a <_strtod_l+0x192>
 800cf1e:	f04f 0c01 	mov.w	ip, #1
 800cf22:	e7f8      	b.n	800cf16 <_strtod_l+0x27e>
 800cf24:	0800ed08 	.word	0x0800ed08
 800cf28:	0800ecf0 	.word	0x0800ecf0
 800cf2c:	7ff00000 	.word	0x7ff00000
 800cf30:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cf32:	1c51      	adds	r1, r2, #1
 800cf34:	9119      	str	r1, [sp, #100]	@ 0x64
 800cf36:	7852      	ldrb	r2, [r2, #1]
 800cf38:	2a30      	cmp	r2, #48	@ 0x30
 800cf3a:	d0f9      	beq.n	800cf30 <_strtod_l+0x298>
 800cf3c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cf40:	2908      	cmp	r1, #8
 800cf42:	f63f af78 	bhi.w	800ce36 <_strtod_l+0x19e>
 800cf46:	3a30      	subs	r2, #48	@ 0x30
 800cf48:	920e      	str	r2, [sp, #56]	@ 0x38
 800cf4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cf4c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cf4e:	f04f 080a 	mov.w	r8, #10
 800cf52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cf54:	1c56      	adds	r6, r2, #1
 800cf56:	9619      	str	r6, [sp, #100]	@ 0x64
 800cf58:	7852      	ldrb	r2, [r2, #1]
 800cf5a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cf5e:	f1be 0f09 	cmp.w	lr, #9
 800cf62:	d939      	bls.n	800cfd8 <_strtod_l+0x340>
 800cf64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cf66:	1a76      	subs	r6, r6, r1
 800cf68:	2e08      	cmp	r6, #8
 800cf6a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cf6e:	dc03      	bgt.n	800cf78 <_strtod_l+0x2e0>
 800cf70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cf72:	4588      	cmp	r8, r1
 800cf74:	bfa8      	it	ge
 800cf76:	4688      	movge	r8, r1
 800cf78:	f1bc 0f00 	cmp.w	ip, #0
 800cf7c:	d001      	beq.n	800cf82 <_strtod_l+0x2ea>
 800cf7e:	f1c8 0800 	rsb	r8, r8, #0
 800cf82:	2d00      	cmp	r5, #0
 800cf84:	d14e      	bne.n	800d024 <_strtod_l+0x38c>
 800cf86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cf88:	4308      	orrs	r0, r1
 800cf8a:	f47f aebe 	bne.w	800cd0a <_strtod_l+0x72>
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	f47f aed6 	bne.w	800cd40 <_strtod_l+0xa8>
 800cf94:	2a69      	cmp	r2, #105	@ 0x69
 800cf96:	d028      	beq.n	800cfea <_strtod_l+0x352>
 800cf98:	dc25      	bgt.n	800cfe6 <_strtod_l+0x34e>
 800cf9a:	2a49      	cmp	r2, #73	@ 0x49
 800cf9c:	d025      	beq.n	800cfea <_strtod_l+0x352>
 800cf9e:	2a4e      	cmp	r2, #78	@ 0x4e
 800cfa0:	f47f aece 	bne.w	800cd40 <_strtod_l+0xa8>
 800cfa4:	499b      	ldr	r1, [pc, #620]	@ (800d214 <_strtod_l+0x57c>)
 800cfa6:	a819      	add	r0, sp, #100	@ 0x64
 800cfa8:	f001 fba6 	bl	800e6f8 <__match>
 800cfac:	2800      	cmp	r0, #0
 800cfae:	f43f aec7 	beq.w	800cd40 <_strtod_l+0xa8>
 800cfb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	2b28      	cmp	r3, #40	@ 0x28
 800cfb8:	d12e      	bne.n	800d018 <_strtod_l+0x380>
 800cfba:	4997      	ldr	r1, [pc, #604]	@ (800d218 <_strtod_l+0x580>)
 800cfbc:	aa1c      	add	r2, sp, #112	@ 0x70
 800cfbe:	a819      	add	r0, sp, #100	@ 0x64
 800cfc0:	f001 fbae 	bl	800e720 <__hexnan>
 800cfc4:	2805      	cmp	r0, #5
 800cfc6:	d127      	bne.n	800d018 <_strtod_l+0x380>
 800cfc8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cfca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cfce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cfd2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cfd6:	e698      	b.n	800cd0a <_strtod_l+0x72>
 800cfd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cfda:	fb08 2101 	mla	r1, r8, r1, r2
 800cfde:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cfe2:	920e      	str	r2, [sp, #56]	@ 0x38
 800cfe4:	e7b5      	b.n	800cf52 <_strtod_l+0x2ba>
 800cfe6:	2a6e      	cmp	r2, #110	@ 0x6e
 800cfe8:	e7da      	b.n	800cfa0 <_strtod_l+0x308>
 800cfea:	498c      	ldr	r1, [pc, #560]	@ (800d21c <_strtod_l+0x584>)
 800cfec:	a819      	add	r0, sp, #100	@ 0x64
 800cfee:	f001 fb83 	bl	800e6f8 <__match>
 800cff2:	2800      	cmp	r0, #0
 800cff4:	f43f aea4 	beq.w	800cd40 <_strtod_l+0xa8>
 800cff8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cffa:	4989      	ldr	r1, [pc, #548]	@ (800d220 <_strtod_l+0x588>)
 800cffc:	3b01      	subs	r3, #1
 800cffe:	a819      	add	r0, sp, #100	@ 0x64
 800d000:	9319      	str	r3, [sp, #100]	@ 0x64
 800d002:	f001 fb79 	bl	800e6f8 <__match>
 800d006:	b910      	cbnz	r0, 800d00e <_strtod_l+0x376>
 800d008:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d00a:	3301      	adds	r3, #1
 800d00c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d00e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d230 <_strtod_l+0x598>
 800d012:	f04f 0a00 	mov.w	sl, #0
 800d016:	e678      	b.n	800cd0a <_strtod_l+0x72>
 800d018:	4882      	ldr	r0, [pc, #520]	@ (800d224 <_strtod_l+0x58c>)
 800d01a:	f001 f8a9 	bl	800e170 <nan>
 800d01e:	ec5b ab10 	vmov	sl, fp, d0
 800d022:	e672      	b.n	800cd0a <_strtod_l+0x72>
 800d024:	eba8 0309 	sub.w	r3, r8, r9
 800d028:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d02a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d02c:	2f00      	cmp	r7, #0
 800d02e:	bf08      	it	eq
 800d030:	462f      	moveq	r7, r5
 800d032:	2d10      	cmp	r5, #16
 800d034:	462c      	mov	r4, r5
 800d036:	bfa8      	it	ge
 800d038:	2410      	movge	r4, #16
 800d03a:	f7f3 fa63 	bl	8000504 <__aeabi_ui2d>
 800d03e:	2d09      	cmp	r5, #9
 800d040:	4682      	mov	sl, r0
 800d042:	468b      	mov	fp, r1
 800d044:	dc13      	bgt.n	800d06e <_strtod_l+0x3d6>
 800d046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f43f ae5e 	beq.w	800cd0a <_strtod_l+0x72>
 800d04e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d050:	dd78      	ble.n	800d144 <_strtod_l+0x4ac>
 800d052:	2b16      	cmp	r3, #22
 800d054:	dc5f      	bgt.n	800d116 <_strtod_l+0x47e>
 800d056:	4974      	ldr	r1, [pc, #464]	@ (800d228 <_strtod_l+0x590>)
 800d058:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d05c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d060:	4652      	mov	r2, sl
 800d062:	465b      	mov	r3, fp
 800d064:	f7f3 fac8 	bl	80005f8 <__aeabi_dmul>
 800d068:	4682      	mov	sl, r0
 800d06a:	468b      	mov	fp, r1
 800d06c:	e64d      	b.n	800cd0a <_strtod_l+0x72>
 800d06e:	4b6e      	ldr	r3, [pc, #440]	@ (800d228 <_strtod_l+0x590>)
 800d070:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d074:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d078:	f7f3 fabe 	bl	80005f8 <__aeabi_dmul>
 800d07c:	4682      	mov	sl, r0
 800d07e:	9808      	ldr	r0, [sp, #32]
 800d080:	468b      	mov	fp, r1
 800d082:	f7f3 fa3f 	bl	8000504 <__aeabi_ui2d>
 800d086:	4602      	mov	r2, r0
 800d088:	460b      	mov	r3, r1
 800d08a:	4650      	mov	r0, sl
 800d08c:	4659      	mov	r1, fp
 800d08e:	f7f3 f8fd 	bl	800028c <__adddf3>
 800d092:	2d0f      	cmp	r5, #15
 800d094:	4682      	mov	sl, r0
 800d096:	468b      	mov	fp, r1
 800d098:	ddd5      	ble.n	800d046 <_strtod_l+0x3ae>
 800d09a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d09c:	1b2c      	subs	r4, r5, r4
 800d09e:	441c      	add	r4, r3
 800d0a0:	2c00      	cmp	r4, #0
 800d0a2:	f340 8096 	ble.w	800d1d2 <_strtod_l+0x53a>
 800d0a6:	f014 030f 	ands.w	r3, r4, #15
 800d0aa:	d00a      	beq.n	800d0c2 <_strtod_l+0x42a>
 800d0ac:	495e      	ldr	r1, [pc, #376]	@ (800d228 <_strtod_l+0x590>)
 800d0ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d0b2:	4652      	mov	r2, sl
 800d0b4:	465b      	mov	r3, fp
 800d0b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0ba:	f7f3 fa9d 	bl	80005f8 <__aeabi_dmul>
 800d0be:	4682      	mov	sl, r0
 800d0c0:	468b      	mov	fp, r1
 800d0c2:	f034 040f 	bics.w	r4, r4, #15
 800d0c6:	d073      	beq.n	800d1b0 <_strtod_l+0x518>
 800d0c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d0cc:	dd48      	ble.n	800d160 <_strtod_l+0x4c8>
 800d0ce:	2400      	movs	r4, #0
 800d0d0:	46a0      	mov	r8, r4
 800d0d2:	940a      	str	r4, [sp, #40]	@ 0x28
 800d0d4:	46a1      	mov	r9, r4
 800d0d6:	9a05      	ldr	r2, [sp, #20]
 800d0d8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d230 <_strtod_l+0x598>
 800d0dc:	2322      	movs	r3, #34	@ 0x22
 800d0de:	6013      	str	r3, [r2, #0]
 800d0e0:	f04f 0a00 	mov.w	sl, #0
 800d0e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	f43f ae0f 	beq.w	800cd0a <_strtod_l+0x72>
 800d0ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d0ee:	9805      	ldr	r0, [sp, #20]
 800d0f0:	f7ff f942 	bl	800c378 <_Bfree>
 800d0f4:	9805      	ldr	r0, [sp, #20]
 800d0f6:	4649      	mov	r1, r9
 800d0f8:	f7ff f93e 	bl	800c378 <_Bfree>
 800d0fc:	9805      	ldr	r0, [sp, #20]
 800d0fe:	4641      	mov	r1, r8
 800d100:	f7ff f93a 	bl	800c378 <_Bfree>
 800d104:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d106:	9805      	ldr	r0, [sp, #20]
 800d108:	f7ff f936 	bl	800c378 <_Bfree>
 800d10c:	9805      	ldr	r0, [sp, #20]
 800d10e:	4621      	mov	r1, r4
 800d110:	f7ff f932 	bl	800c378 <_Bfree>
 800d114:	e5f9      	b.n	800cd0a <_strtod_l+0x72>
 800d116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d118:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d11c:	4293      	cmp	r3, r2
 800d11e:	dbbc      	blt.n	800d09a <_strtod_l+0x402>
 800d120:	4c41      	ldr	r4, [pc, #260]	@ (800d228 <_strtod_l+0x590>)
 800d122:	f1c5 050f 	rsb	r5, r5, #15
 800d126:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d12a:	4652      	mov	r2, sl
 800d12c:	465b      	mov	r3, fp
 800d12e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d132:	f7f3 fa61 	bl	80005f8 <__aeabi_dmul>
 800d136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d138:	1b5d      	subs	r5, r3, r5
 800d13a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d13e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d142:	e78f      	b.n	800d064 <_strtod_l+0x3cc>
 800d144:	3316      	adds	r3, #22
 800d146:	dba8      	blt.n	800d09a <_strtod_l+0x402>
 800d148:	4b37      	ldr	r3, [pc, #220]	@ (800d228 <_strtod_l+0x590>)
 800d14a:	eba9 0808 	sub.w	r8, r9, r8
 800d14e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d152:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d156:	4650      	mov	r0, sl
 800d158:	4659      	mov	r1, fp
 800d15a:	f7f3 fb77 	bl	800084c <__aeabi_ddiv>
 800d15e:	e783      	b.n	800d068 <_strtod_l+0x3d0>
 800d160:	4b32      	ldr	r3, [pc, #200]	@ (800d22c <_strtod_l+0x594>)
 800d162:	9308      	str	r3, [sp, #32]
 800d164:	2300      	movs	r3, #0
 800d166:	1124      	asrs	r4, r4, #4
 800d168:	4650      	mov	r0, sl
 800d16a:	4659      	mov	r1, fp
 800d16c:	461e      	mov	r6, r3
 800d16e:	2c01      	cmp	r4, #1
 800d170:	dc21      	bgt.n	800d1b6 <_strtod_l+0x51e>
 800d172:	b10b      	cbz	r3, 800d178 <_strtod_l+0x4e0>
 800d174:	4682      	mov	sl, r0
 800d176:	468b      	mov	fp, r1
 800d178:	492c      	ldr	r1, [pc, #176]	@ (800d22c <_strtod_l+0x594>)
 800d17a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d17e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d182:	4652      	mov	r2, sl
 800d184:	465b      	mov	r3, fp
 800d186:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d18a:	f7f3 fa35 	bl	80005f8 <__aeabi_dmul>
 800d18e:	4b28      	ldr	r3, [pc, #160]	@ (800d230 <_strtod_l+0x598>)
 800d190:	460a      	mov	r2, r1
 800d192:	400b      	ands	r3, r1
 800d194:	4927      	ldr	r1, [pc, #156]	@ (800d234 <_strtod_l+0x59c>)
 800d196:	428b      	cmp	r3, r1
 800d198:	4682      	mov	sl, r0
 800d19a:	d898      	bhi.n	800d0ce <_strtod_l+0x436>
 800d19c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d1a0:	428b      	cmp	r3, r1
 800d1a2:	bf86      	itte	hi
 800d1a4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d238 <_strtod_l+0x5a0>
 800d1a8:	f04f 3aff 	movhi.w	sl, #4294967295
 800d1ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	9308      	str	r3, [sp, #32]
 800d1b4:	e07a      	b.n	800d2ac <_strtod_l+0x614>
 800d1b6:	07e2      	lsls	r2, r4, #31
 800d1b8:	d505      	bpl.n	800d1c6 <_strtod_l+0x52e>
 800d1ba:	9b08      	ldr	r3, [sp, #32]
 800d1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c0:	f7f3 fa1a 	bl	80005f8 <__aeabi_dmul>
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	9a08      	ldr	r2, [sp, #32]
 800d1c8:	3208      	adds	r2, #8
 800d1ca:	3601      	adds	r6, #1
 800d1cc:	1064      	asrs	r4, r4, #1
 800d1ce:	9208      	str	r2, [sp, #32]
 800d1d0:	e7cd      	b.n	800d16e <_strtod_l+0x4d6>
 800d1d2:	d0ed      	beq.n	800d1b0 <_strtod_l+0x518>
 800d1d4:	4264      	negs	r4, r4
 800d1d6:	f014 020f 	ands.w	r2, r4, #15
 800d1da:	d00a      	beq.n	800d1f2 <_strtod_l+0x55a>
 800d1dc:	4b12      	ldr	r3, [pc, #72]	@ (800d228 <_strtod_l+0x590>)
 800d1de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1e2:	4650      	mov	r0, sl
 800d1e4:	4659      	mov	r1, fp
 800d1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ea:	f7f3 fb2f 	bl	800084c <__aeabi_ddiv>
 800d1ee:	4682      	mov	sl, r0
 800d1f0:	468b      	mov	fp, r1
 800d1f2:	1124      	asrs	r4, r4, #4
 800d1f4:	d0dc      	beq.n	800d1b0 <_strtod_l+0x518>
 800d1f6:	2c1f      	cmp	r4, #31
 800d1f8:	dd20      	ble.n	800d23c <_strtod_l+0x5a4>
 800d1fa:	2400      	movs	r4, #0
 800d1fc:	46a0      	mov	r8, r4
 800d1fe:	940a      	str	r4, [sp, #40]	@ 0x28
 800d200:	46a1      	mov	r9, r4
 800d202:	9a05      	ldr	r2, [sp, #20]
 800d204:	2322      	movs	r3, #34	@ 0x22
 800d206:	f04f 0a00 	mov.w	sl, #0
 800d20a:	f04f 0b00 	mov.w	fp, #0
 800d20e:	6013      	str	r3, [r2, #0]
 800d210:	e768      	b.n	800d0e4 <_strtod_l+0x44c>
 800d212:	bf00      	nop
 800d214:	0800eae1 	.word	0x0800eae1
 800d218:	0800ecf4 	.word	0x0800ecf4
 800d21c:	0800ead9 	.word	0x0800ead9
 800d220:	0800eb10 	.word	0x0800eb10
 800d224:	0800ee9d 	.word	0x0800ee9d
 800d228:	0800ec28 	.word	0x0800ec28
 800d22c:	0800ec00 	.word	0x0800ec00
 800d230:	7ff00000 	.word	0x7ff00000
 800d234:	7ca00000 	.word	0x7ca00000
 800d238:	7fefffff 	.word	0x7fefffff
 800d23c:	f014 0310 	ands.w	r3, r4, #16
 800d240:	bf18      	it	ne
 800d242:	236a      	movne	r3, #106	@ 0x6a
 800d244:	4ea9      	ldr	r6, [pc, #676]	@ (800d4ec <_strtod_l+0x854>)
 800d246:	9308      	str	r3, [sp, #32]
 800d248:	4650      	mov	r0, sl
 800d24a:	4659      	mov	r1, fp
 800d24c:	2300      	movs	r3, #0
 800d24e:	07e2      	lsls	r2, r4, #31
 800d250:	d504      	bpl.n	800d25c <_strtod_l+0x5c4>
 800d252:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d256:	f7f3 f9cf 	bl	80005f8 <__aeabi_dmul>
 800d25a:	2301      	movs	r3, #1
 800d25c:	1064      	asrs	r4, r4, #1
 800d25e:	f106 0608 	add.w	r6, r6, #8
 800d262:	d1f4      	bne.n	800d24e <_strtod_l+0x5b6>
 800d264:	b10b      	cbz	r3, 800d26a <_strtod_l+0x5d2>
 800d266:	4682      	mov	sl, r0
 800d268:	468b      	mov	fp, r1
 800d26a:	9b08      	ldr	r3, [sp, #32]
 800d26c:	b1b3      	cbz	r3, 800d29c <_strtod_l+0x604>
 800d26e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d272:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d276:	2b00      	cmp	r3, #0
 800d278:	4659      	mov	r1, fp
 800d27a:	dd0f      	ble.n	800d29c <_strtod_l+0x604>
 800d27c:	2b1f      	cmp	r3, #31
 800d27e:	dd55      	ble.n	800d32c <_strtod_l+0x694>
 800d280:	2b34      	cmp	r3, #52	@ 0x34
 800d282:	bfde      	ittt	le
 800d284:	f04f 33ff 	movle.w	r3, #4294967295
 800d288:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d28c:	4093      	lslle	r3, r2
 800d28e:	f04f 0a00 	mov.w	sl, #0
 800d292:	bfcc      	ite	gt
 800d294:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d298:	ea03 0b01 	andle.w	fp, r3, r1
 800d29c:	2200      	movs	r2, #0
 800d29e:	2300      	movs	r3, #0
 800d2a0:	4650      	mov	r0, sl
 800d2a2:	4659      	mov	r1, fp
 800d2a4:	f7f3 fc10 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d1a6      	bne.n	800d1fa <_strtod_l+0x562>
 800d2ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2ae:	9300      	str	r3, [sp, #0]
 800d2b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d2b2:	9805      	ldr	r0, [sp, #20]
 800d2b4:	462b      	mov	r3, r5
 800d2b6:	463a      	mov	r2, r7
 800d2b8:	f7ff f8c6 	bl	800c448 <__s2b>
 800d2bc:	900a      	str	r0, [sp, #40]	@ 0x28
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	f43f af05 	beq.w	800d0ce <_strtod_l+0x436>
 800d2c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2c6:	2a00      	cmp	r2, #0
 800d2c8:	eba9 0308 	sub.w	r3, r9, r8
 800d2cc:	bfa8      	it	ge
 800d2ce:	2300      	movge	r3, #0
 800d2d0:	9312      	str	r3, [sp, #72]	@ 0x48
 800d2d2:	2400      	movs	r4, #0
 800d2d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d2d8:	9316      	str	r3, [sp, #88]	@ 0x58
 800d2da:	46a0      	mov	r8, r4
 800d2dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2de:	9805      	ldr	r0, [sp, #20]
 800d2e0:	6859      	ldr	r1, [r3, #4]
 800d2e2:	f7ff f809 	bl	800c2f8 <_Balloc>
 800d2e6:	4681      	mov	r9, r0
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	f43f aef4 	beq.w	800d0d6 <_strtod_l+0x43e>
 800d2ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2f0:	691a      	ldr	r2, [r3, #16]
 800d2f2:	3202      	adds	r2, #2
 800d2f4:	f103 010c 	add.w	r1, r3, #12
 800d2f8:	0092      	lsls	r2, r2, #2
 800d2fa:	300c      	adds	r0, #12
 800d2fc:	f7fe f89b 	bl	800b436 <memcpy>
 800d300:	ec4b ab10 	vmov	d0, sl, fp
 800d304:	9805      	ldr	r0, [sp, #20]
 800d306:	aa1c      	add	r2, sp, #112	@ 0x70
 800d308:	a91b      	add	r1, sp, #108	@ 0x6c
 800d30a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d30e:	f7ff fbd7 	bl	800cac0 <__d2b>
 800d312:	901a      	str	r0, [sp, #104]	@ 0x68
 800d314:	2800      	cmp	r0, #0
 800d316:	f43f aede 	beq.w	800d0d6 <_strtod_l+0x43e>
 800d31a:	9805      	ldr	r0, [sp, #20]
 800d31c:	2101      	movs	r1, #1
 800d31e:	f7ff f929 	bl	800c574 <__i2b>
 800d322:	4680      	mov	r8, r0
 800d324:	b948      	cbnz	r0, 800d33a <_strtod_l+0x6a2>
 800d326:	f04f 0800 	mov.w	r8, #0
 800d32a:	e6d4      	b.n	800d0d6 <_strtod_l+0x43e>
 800d32c:	f04f 32ff 	mov.w	r2, #4294967295
 800d330:	fa02 f303 	lsl.w	r3, r2, r3
 800d334:	ea03 0a0a 	and.w	sl, r3, sl
 800d338:	e7b0      	b.n	800d29c <_strtod_l+0x604>
 800d33a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d33c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d33e:	2d00      	cmp	r5, #0
 800d340:	bfab      	itete	ge
 800d342:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d344:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d346:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d348:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d34a:	bfac      	ite	ge
 800d34c:	18ef      	addge	r7, r5, r3
 800d34e:	1b5e      	sublt	r6, r3, r5
 800d350:	9b08      	ldr	r3, [sp, #32]
 800d352:	1aed      	subs	r5, r5, r3
 800d354:	4415      	add	r5, r2
 800d356:	4b66      	ldr	r3, [pc, #408]	@ (800d4f0 <_strtod_l+0x858>)
 800d358:	3d01      	subs	r5, #1
 800d35a:	429d      	cmp	r5, r3
 800d35c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d360:	da50      	bge.n	800d404 <_strtod_l+0x76c>
 800d362:	1b5b      	subs	r3, r3, r5
 800d364:	2b1f      	cmp	r3, #31
 800d366:	eba2 0203 	sub.w	r2, r2, r3
 800d36a:	f04f 0101 	mov.w	r1, #1
 800d36e:	dc3d      	bgt.n	800d3ec <_strtod_l+0x754>
 800d370:	fa01 f303 	lsl.w	r3, r1, r3
 800d374:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d376:	2300      	movs	r3, #0
 800d378:	9310      	str	r3, [sp, #64]	@ 0x40
 800d37a:	18bd      	adds	r5, r7, r2
 800d37c:	9b08      	ldr	r3, [sp, #32]
 800d37e:	42af      	cmp	r7, r5
 800d380:	4416      	add	r6, r2
 800d382:	441e      	add	r6, r3
 800d384:	463b      	mov	r3, r7
 800d386:	bfa8      	it	ge
 800d388:	462b      	movge	r3, r5
 800d38a:	42b3      	cmp	r3, r6
 800d38c:	bfa8      	it	ge
 800d38e:	4633      	movge	r3, r6
 800d390:	2b00      	cmp	r3, #0
 800d392:	bfc2      	ittt	gt
 800d394:	1aed      	subgt	r5, r5, r3
 800d396:	1af6      	subgt	r6, r6, r3
 800d398:	1aff      	subgt	r7, r7, r3
 800d39a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	dd16      	ble.n	800d3ce <_strtod_l+0x736>
 800d3a0:	4641      	mov	r1, r8
 800d3a2:	9805      	ldr	r0, [sp, #20]
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	f7ff f9a5 	bl	800c6f4 <__pow5mult>
 800d3aa:	4680      	mov	r8, r0
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	d0ba      	beq.n	800d326 <_strtod_l+0x68e>
 800d3b0:	4601      	mov	r1, r0
 800d3b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d3b4:	9805      	ldr	r0, [sp, #20]
 800d3b6:	f7ff f8f3 	bl	800c5a0 <__multiply>
 800d3ba:	900e      	str	r0, [sp, #56]	@ 0x38
 800d3bc:	2800      	cmp	r0, #0
 800d3be:	f43f ae8a 	beq.w	800d0d6 <_strtod_l+0x43e>
 800d3c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d3c4:	9805      	ldr	r0, [sp, #20]
 800d3c6:	f7fe ffd7 	bl	800c378 <_Bfree>
 800d3ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3ce:	2d00      	cmp	r5, #0
 800d3d0:	dc1d      	bgt.n	800d40e <_strtod_l+0x776>
 800d3d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	dd23      	ble.n	800d420 <_strtod_l+0x788>
 800d3d8:	4649      	mov	r1, r9
 800d3da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d3dc:	9805      	ldr	r0, [sp, #20]
 800d3de:	f7ff f989 	bl	800c6f4 <__pow5mult>
 800d3e2:	4681      	mov	r9, r0
 800d3e4:	b9e0      	cbnz	r0, 800d420 <_strtod_l+0x788>
 800d3e6:	f04f 0900 	mov.w	r9, #0
 800d3ea:	e674      	b.n	800d0d6 <_strtod_l+0x43e>
 800d3ec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d3f0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d3f4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d3f8:	35e2      	adds	r5, #226	@ 0xe2
 800d3fa:	fa01 f305 	lsl.w	r3, r1, r5
 800d3fe:	9310      	str	r3, [sp, #64]	@ 0x40
 800d400:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d402:	e7ba      	b.n	800d37a <_strtod_l+0x6e2>
 800d404:	2300      	movs	r3, #0
 800d406:	9310      	str	r3, [sp, #64]	@ 0x40
 800d408:	2301      	movs	r3, #1
 800d40a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d40c:	e7b5      	b.n	800d37a <_strtod_l+0x6e2>
 800d40e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d410:	9805      	ldr	r0, [sp, #20]
 800d412:	462a      	mov	r2, r5
 800d414:	f7ff f9c8 	bl	800c7a8 <__lshift>
 800d418:	901a      	str	r0, [sp, #104]	@ 0x68
 800d41a:	2800      	cmp	r0, #0
 800d41c:	d1d9      	bne.n	800d3d2 <_strtod_l+0x73a>
 800d41e:	e65a      	b.n	800d0d6 <_strtod_l+0x43e>
 800d420:	2e00      	cmp	r6, #0
 800d422:	dd07      	ble.n	800d434 <_strtod_l+0x79c>
 800d424:	4649      	mov	r1, r9
 800d426:	9805      	ldr	r0, [sp, #20]
 800d428:	4632      	mov	r2, r6
 800d42a:	f7ff f9bd 	bl	800c7a8 <__lshift>
 800d42e:	4681      	mov	r9, r0
 800d430:	2800      	cmp	r0, #0
 800d432:	d0d8      	beq.n	800d3e6 <_strtod_l+0x74e>
 800d434:	2f00      	cmp	r7, #0
 800d436:	dd08      	ble.n	800d44a <_strtod_l+0x7b2>
 800d438:	4641      	mov	r1, r8
 800d43a:	9805      	ldr	r0, [sp, #20]
 800d43c:	463a      	mov	r2, r7
 800d43e:	f7ff f9b3 	bl	800c7a8 <__lshift>
 800d442:	4680      	mov	r8, r0
 800d444:	2800      	cmp	r0, #0
 800d446:	f43f ae46 	beq.w	800d0d6 <_strtod_l+0x43e>
 800d44a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d44c:	9805      	ldr	r0, [sp, #20]
 800d44e:	464a      	mov	r2, r9
 800d450:	f7ff fa32 	bl	800c8b8 <__mdiff>
 800d454:	4604      	mov	r4, r0
 800d456:	2800      	cmp	r0, #0
 800d458:	f43f ae3d 	beq.w	800d0d6 <_strtod_l+0x43e>
 800d45c:	68c3      	ldr	r3, [r0, #12]
 800d45e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d460:	2300      	movs	r3, #0
 800d462:	60c3      	str	r3, [r0, #12]
 800d464:	4641      	mov	r1, r8
 800d466:	f7ff fa0b 	bl	800c880 <__mcmp>
 800d46a:	2800      	cmp	r0, #0
 800d46c:	da46      	bge.n	800d4fc <_strtod_l+0x864>
 800d46e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d470:	ea53 030a 	orrs.w	r3, r3, sl
 800d474:	d16c      	bne.n	800d550 <_strtod_l+0x8b8>
 800d476:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d168      	bne.n	800d550 <_strtod_l+0x8b8>
 800d47e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d482:	0d1b      	lsrs	r3, r3, #20
 800d484:	051b      	lsls	r3, r3, #20
 800d486:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d48a:	d961      	bls.n	800d550 <_strtod_l+0x8b8>
 800d48c:	6963      	ldr	r3, [r4, #20]
 800d48e:	b913      	cbnz	r3, 800d496 <_strtod_l+0x7fe>
 800d490:	6923      	ldr	r3, [r4, #16]
 800d492:	2b01      	cmp	r3, #1
 800d494:	dd5c      	ble.n	800d550 <_strtod_l+0x8b8>
 800d496:	4621      	mov	r1, r4
 800d498:	2201      	movs	r2, #1
 800d49a:	9805      	ldr	r0, [sp, #20]
 800d49c:	f7ff f984 	bl	800c7a8 <__lshift>
 800d4a0:	4641      	mov	r1, r8
 800d4a2:	4604      	mov	r4, r0
 800d4a4:	f7ff f9ec 	bl	800c880 <__mcmp>
 800d4a8:	2800      	cmp	r0, #0
 800d4aa:	dd51      	ble.n	800d550 <_strtod_l+0x8b8>
 800d4ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d4b0:	9a08      	ldr	r2, [sp, #32]
 800d4b2:	0d1b      	lsrs	r3, r3, #20
 800d4b4:	051b      	lsls	r3, r3, #20
 800d4b6:	2a00      	cmp	r2, #0
 800d4b8:	d06b      	beq.n	800d592 <_strtod_l+0x8fa>
 800d4ba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d4be:	d868      	bhi.n	800d592 <_strtod_l+0x8fa>
 800d4c0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d4c4:	f67f ae9d 	bls.w	800d202 <_strtod_l+0x56a>
 800d4c8:	4b0a      	ldr	r3, [pc, #40]	@ (800d4f4 <_strtod_l+0x85c>)
 800d4ca:	4650      	mov	r0, sl
 800d4cc:	4659      	mov	r1, fp
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f7f3 f892 	bl	80005f8 <__aeabi_dmul>
 800d4d4:	4b08      	ldr	r3, [pc, #32]	@ (800d4f8 <_strtod_l+0x860>)
 800d4d6:	400b      	ands	r3, r1
 800d4d8:	4682      	mov	sl, r0
 800d4da:	468b      	mov	fp, r1
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	f47f ae05 	bne.w	800d0ec <_strtod_l+0x454>
 800d4e2:	9a05      	ldr	r2, [sp, #20]
 800d4e4:	2322      	movs	r3, #34	@ 0x22
 800d4e6:	6013      	str	r3, [r2, #0]
 800d4e8:	e600      	b.n	800d0ec <_strtod_l+0x454>
 800d4ea:	bf00      	nop
 800d4ec:	0800ed20 	.word	0x0800ed20
 800d4f0:	fffffc02 	.word	0xfffffc02
 800d4f4:	39500000 	.word	0x39500000
 800d4f8:	7ff00000 	.word	0x7ff00000
 800d4fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d500:	d165      	bne.n	800d5ce <_strtod_l+0x936>
 800d502:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d504:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d508:	b35a      	cbz	r2, 800d562 <_strtod_l+0x8ca>
 800d50a:	4a9f      	ldr	r2, [pc, #636]	@ (800d788 <_strtod_l+0xaf0>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d12b      	bne.n	800d568 <_strtod_l+0x8d0>
 800d510:	9b08      	ldr	r3, [sp, #32]
 800d512:	4651      	mov	r1, sl
 800d514:	b303      	cbz	r3, 800d558 <_strtod_l+0x8c0>
 800d516:	4b9d      	ldr	r3, [pc, #628]	@ (800d78c <_strtod_l+0xaf4>)
 800d518:	465a      	mov	r2, fp
 800d51a:	4013      	ands	r3, r2
 800d51c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d520:	f04f 32ff 	mov.w	r2, #4294967295
 800d524:	d81b      	bhi.n	800d55e <_strtod_l+0x8c6>
 800d526:	0d1b      	lsrs	r3, r3, #20
 800d528:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d52c:	fa02 f303 	lsl.w	r3, r2, r3
 800d530:	4299      	cmp	r1, r3
 800d532:	d119      	bne.n	800d568 <_strtod_l+0x8d0>
 800d534:	4b96      	ldr	r3, [pc, #600]	@ (800d790 <_strtod_l+0xaf8>)
 800d536:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d538:	429a      	cmp	r2, r3
 800d53a:	d102      	bne.n	800d542 <_strtod_l+0x8aa>
 800d53c:	3101      	adds	r1, #1
 800d53e:	f43f adca 	beq.w	800d0d6 <_strtod_l+0x43e>
 800d542:	4b92      	ldr	r3, [pc, #584]	@ (800d78c <_strtod_l+0xaf4>)
 800d544:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d546:	401a      	ands	r2, r3
 800d548:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d54c:	f04f 0a00 	mov.w	sl, #0
 800d550:	9b08      	ldr	r3, [sp, #32]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d1b8      	bne.n	800d4c8 <_strtod_l+0x830>
 800d556:	e5c9      	b.n	800d0ec <_strtod_l+0x454>
 800d558:	f04f 33ff 	mov.w	r3, #4294967295
 800d55c:	e7e8      	b.n	800d530 <_strtod_l+0x898>
 800d55e:	4613      	mov	r3, r2
 800d560:	e7e6      	b.n	800d530 <_strtod_l+0x898>
 800d562:	ea53 030a 	orrs.w	r3, r3, sl
 800d566:	d0a1      	beq.n	800d4ac <_strtod_l+0x814>
 800d568:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d56a:	b1db      	cbz	r3, 800d5a4 <_strtod_l+0x90c>
 800d56c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d56e:	4213      	tst	r3, r2
 800d570:	d0ee      	beq.n	800d550 <_strtod_l+0x8b8>
 800d572:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d574:	9a08      	ldr	r2, [sp, #32]
 800d576:	4650      	mov	r0, sl
 800d578:	4659      	mov	r1, fp
 800d57a:	b1bb      	cbz	r3, 800d5ac <_strtod_l+0x914>
 800d57c:	f7ff fb6e 	bl	800cc5c <sulp>
 800d580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d584:	ec53 2b10 	vmov	r2, r3, d0
 800d588:	f7f2 fe80 	bl	800028c <__adddf3>
 800d58c:	4682      	mov	sl, r0
 800d58e:	468b      	mov	fp, r1
 800d590:	e7de      	b.n	800d550 <_strtod_l+0x8b8>
 800d592:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d596:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d59a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d59e:	f04f 3aff 	mov.w	sl, #4294967295
 800d5a2:	e7d5      	b.n	800d550 <_strtod_l+0x8b8>
 800d5a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d5a6:	ea13 0f0a 	tst.w	r3, sl
 800d5aa:	e7e1      	b.n	800d570 <_strtod_l+0x8d8>
 800d5ac:	f7ff fb56 	bl	800cc5c <sulp>
 800d5b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5b4:	ec53 2b10 	vmov	r2, r3, d0
 800d5b8:	f7f2 fe66 	bl	8000288 <__aeabi_dsub>
 800d5bc:	2200      	movs	r2, #0
 800d5be:	2300      	movs	r3, #0
 800d5c0:	4682      	mov	sl, r0
 800d5c2:	468b      	mov	fp, r1
 800d5c4:	f7f3 fa80 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	d0c1      	beq.n	800d550 <_strtod_l+0x8b8>
 800d5cc:	e619      	b.n	800d202 <_strtod_l+0x56a>
 800d5ce:	4641      	mov	r1, r8
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	f7ff facd 	bl	800cb70 <__ratio>
 800d5d6:	ec57 6b10 	vmov	r6, r7, d0
 800d5da:	2200      	movs	r2, #0
 800d5dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	4639      	mov	r1, r7
 800d5e4:	f7f3 fa84 	bl	8000af0 <__aeabi_dcmple>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d06f      	beq.n	800d6cc <_strtod_l+0xa34>
 800d5ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d17a      	bne.n	800d6e8 <_strtod_l+0xa50>
 800d5f2:	f1ba 0f00 	cmp.w	sl, #0
 800d5f6:	d158      	bne.n	800d6aa <_strtod_l+0xa12>
 800d5f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d15a      	bne.n	800d6b8 <_strtod_l+0xa20>
 800d602:	4b64      	ldr	r3, [pc, #400]	@ (800d794 <_strtod_l+0xafc>)
 800d604:	2200      	movs	r2, #0
 800d606:	4630      	mov	r0, r6
 800d608:	4639      	mov	r1, r7
 800d60a:	f7f3 fa67 	bl	8000adc <__aeabi_dcmplt>
 800d60e:	2800      	cmp	r0, #0
 800d610:	d159      	bne.n	800d6c6 <_strtod_l+0xa2e>
 800d612:	4630      	mov	r0, r6
 800d614:	4639      	mov	r1, r7
 800d616:	4b60      	ldr	r3, [pc, #384]	@ (800d798 <_strtod_l+0xb00>)
 800d618:	2200      	movs	r2, #0
 800d61a:	f7f2 ffed 	bl	80005f8 <__aeabi_dmul>
 800d61e:	4606      	mov	r6, r0
 800d620:	460f      	mov	r7, r1
 800d622:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d626:	9606      	str	r6, [sp, #24]
 800d628:	9307      	str	r3, [sp, #28]
 800d62a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d62e:	4d57      	ldr	r5, [pc, #348]	@ (800d78c <_strtod_l+0xaf4>)
 800d630:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d634:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d636:	401d      	ands	r5, r3
 800d638:	4b58      	ldr	r3, [pc, #352]	@ (800d79c <_strtod_l+0xb04>)
 800d63a:	429d      	cmp	r5, r3
 800d63c:	f040 80b2 	bne.w	800d7a4 <_strtod_l+0xb0c>
 800d640:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d642:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d646:	ec4b ab10 	vmov	d0, sl, fp
 800d64a:	f7ff f9c9 	bl	800c9e0 <__ulp>
 800d64e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d652:	ec51 0b10 	vmov	r0, r1, d0
 800d656:	f7f2 ffcf 	bl	80005f8 <__aeabi_dmul>
 800d65a:	4652      	mov	r2, sl
 800d65c:	465b      	mov	r3, fp
 800d65e:	f7f2 fe15 	bl	800028c <__adddf3>
 800d662:	460b      	mov	r3, r1
 800d664:	4949      	ldr	r1, [pc, #292]	@ (800d78c <_strtod_l+0xaf4>)
 800d666:	4a4e      	ldr	r2, [pc, #312]	@ (800d7a0 <_strtod_l+0xb08>)
 800d668:	4019      	ands	r1, r3
 800d66a:	4291      	cmp	r1, r2
 800d66c:	4682      	mov	sl, r0
 800d66e:	d942      	bls.n	800d6f6 <_strtod_l+0xa5e>
 800d670:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d672:	4b47      	ldr	r3, [pc, #284]	@ (800d790 <_strtod_l+0xaf8>)
 800d674:	429a      	cmp	r2, r3
 800d676:	d103      	bne.n	800d680 <_strtod_l+0x9e8>
 800d678:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d67a:	3301      	adds	r3, #1
 800d67c:	f43f ad2b 	beq.w	800d0d6 <_strtod_l+0x43e>
 800d680:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d790 <_strtod_l+0xaf8>
 800d684:	f04f 3aff 	mov.w	sl, #4294967295
 800d688:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d68a:	9805      	ldr	r0, [sp, #20]
 800d68c:	f7fe fe74 	bl	800c378 <_Bfree>
 800d690:	9805      	ldr	r0, [sp, #20]
 800d692:	4649      	mov	r1, r9
 800d694:	f7fe fe70 	bl	800c378 <_Bfree>
 800d698:	9805      	ldr	r0, [sp, #20]
 800d69a:	4641      	mov	r1, r8
 800d69c:	f7fe fe6c 	bl	800c378 <_Bfree>
 800d6a0:	9805      	ldr	r0, [sp, #20]
 800d6a2:	4621      	mov	r1, r4
 800d6a4:	f7fe fe68 	bl	800c378 <_Bfree>
 800d6a8:	e618      	b.n	800d2dc <_strtod_l+0x644>
 800d6aa:	f1ba 0f01 	cmp.w	sl, #1
 800d6ae:	d103      	bne.n	800d6b8 <_strtod_l+0xa20>
 800d6b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	f43f ada5 	beq.w	800d202 <_strtod_l+0x56a>
 800d6b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d768 <_strtod_l+0xad0>
 800d6bc:	4f35      	ldr	r7, [pc, #212]	@ (800d794 <_strtod_l+0xafc>)
 800d6be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d6c2:	2600      	movs	r6, #0
 800d6c4:	e7b1      	b.n	800d62a <_strtod_l+0x992>
 800d6c6:	4f34      	ldr	r7, [pc, #208]	@ (800d798 <_strtod_l+0xb00>)
 800d6c8:	2600      	movs	r6, #0
 800d6ca:	e7aa      	b.n	800d622 <_strtod_l+0x98a>
 800d6cc:	4b32      	ldr	r3, [pc, #200]	@ (800d798 <_strtod_l+0xb00>)
 800d6ce:	4630      	mov	r0, r6
 800d6d0:	4639      	mov	r1, r7
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	f7f2 ff90 	bl	80005f8 <__aeabi_dmul>
 800d6d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6da:	4606      	mov	r6, r0
 800d6dc:	460f      	mov	r7, r1
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d09f      	beq.n	800d622 <_strtod_l+0x98a>
 800d6e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d6e6:	e7a0      	b.n	800d62a <_strtod_l+0x992>
 800d6e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d770 <_strtod_l+0xad8>
 800d6ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d6f0:	ec57 6b17 	vmov	r6, r7, d7
 800d6f4:	e799      	b.n	800d62a <_strtod_l+0x992>
 800d6f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d6fa:	9b08      	ldr	r3, [sp, #32]
 800d6fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d700:	2b00      	cmp	r3, #0
 800d702:	d1c1      	bne.n	800d688 <_strtod_l+0x9f0>
 800d704:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d708:	0d1b      	lsrs	r3, r3, #20
 800d70a:	051b      	lsls	r3, r3, #20
 800d70c:	429d      	cmp	r5, r3
 800d70e:	d1bb      	bne.n	800d688 <_strtod_l+0x9f0>
 800d710:	4630      	mov	r0, r6
 800d712:	4639      	mov	r1, r7
 800d714:	f7f3 fad0 	bl	8000cb8 <__aeabi_d2lz>
 800d718:	f7f2 ff40 	bl	800059c <__aeabi_l2d>
 800d71c:	4602      	mov	r2, r0
 800d71e:	460b      	mov	r3, r1
 800d720:	4630      	mov	r0, r6
 800d722:	4639      	mov	r1, r7
 800d724:	f7f2 fdb0 	bl	8000288 <__aeabi_dsub>
 800d728:	460b      	mov	r3, r1
 800d72a:	4602      	mov	r2, r0
 800d72c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d730:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d736:	ea46 060a 	orr.w	r6, r6, sl
 800d73a:	431e      	orrs	r6, r3
 800d73c:	d06f      	beq.n	800d81e <_strtod_l+0xb86>
 800d73e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d778 <_strtod_l+0xae0>)
 800d740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d744:	f7f3 f9ca 	bl	8000adc <__aeabi_dcmplt>
 800d748:	2800      	cmp	r0, #0
 800d74a:	f47f accf 	bne.w	800d0ec <_strtod_l+0x454>
 800d74e:	a30c      	add	r3, pc, #48	@ (adr r3, 800d780 <_strtod_l+0xae8>)
 800d750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d754:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d758:	f7f3 f9de 	bl	8000b18 <__aeabi_dcmpgt>
 800d75c:	2800      	cmp	r0, #0
 800d75e:	d093      	beq.n	800d688 <_strtod_l+0x9f0>
 800d760:	e4c4      	b.n	800d0ec <_strtod_l+0x454>
 800d762:	bf00      	nop
 800d764:	f3af 8000 	nop.w
 800d768:	00000000 	.word	0x00000000
 800d76c:	bff00000 	.word	0xbff00000
 800d770:	00000000 	.word	0x00000000
 800d774:	3ff00000 	.word	0x3ff00000
 800d778:	94a03595 	.word	0x94a03595
 800d77c:	3fdfffff 	.word	0x3fdfffff
 800d780:	35afe535 	.word	0x35afe535
 800d784:	3fe00000 	.word	0x3fe00000
 800d788:	000fffff 	.word	0x000fffff
 800d78c:	7ff00000 	.word	0x7ff00000
 800d790:	7fefffff 	.word	0x7fefffff
 800d794:	3ff00000 	.word	0x3ff00000
 800d798:	3fe00000 	.word	0x3fe00000
 800d79c:	7fe00000 	.word	0x7fe00000
 800d7a0:	7c9fffff 	.word	0x7c9fffff
 800d7a4:	9b08      	ldr	r3, [sp, #32]
 800d7a6:	b323      	cbz	r3, 800d7f2 <_strtod_l+0xb5a>
 800d7a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d7ac:	d821      	bhi.n	800d7f2 <_strtod_l+0xb5a>
 800d7ae:	a328      	add	r3, pc, #160	@ (adr r3, 800d850 <_strtod_l+0xbb8>)
 800d7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b4:	4630      	mov	r0, r6
 800d7b6:	4639      	mov	r1, r7
 800d7b8:	f7f3 f99a 	bl	8000af0 <__aeabi_dcmple>
 800d7bc:	b1a0      	cbz	r0, 800d7e8 <_strtod_l+0xb50>
 800d7be:	4639      	mov	r1, r7
 800d7c0:	4630      	mov	r0, r6
 800d7c2:	f7f3 f9f1 	bl	8000ba8 <__aeabi_d2uiz>
 800d7c6:	2801      	cmp	r0, #1
 800d7c8:	bf38      	it	cc
 800d7ca:	2001      	movcc	r0, #1
 800d7cc:	f7f2 fe9a 	bl	8000504 <__aeabi_ui2d>
 800d7d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7d2:	4606      	mov	r6, r0
 800d7d4:	460f      	mov	r7, r1
 800d7d6:	b9fb      	cbnz	r3, 800d818 <_strtod_l+0xb80>
 800d7d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d7dc:	9014      	str	r0, [sp, #80]	@ 0x50
 800d7de:	9315      	str	r3, [sp, #84]	@ 0x54
 800d7e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d7e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d7e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d7ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d7ee:	1b5b      	subs	r3, r3, r5
 800d7f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d7f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d7f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d7fa:	f7ff f8f1 	bl	800c9e0 <__ulp>
 800d7fe:	4650      	mov	r0, sl
 800d800:	ec53 2b10 	vmov	r2, r3, d0
 800d804:	4659      	mov	r1, fp
 800d806:	f7f2 fef7 	bl	80005f8 <__aeabi_dmul>
 800d80a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d80e:	f7f2 fd3d 	bl	800028c <__adddf3>
 800d812:	4682      	mov	sl, r0
 800d814:	468b      	mov	fp, r1
 800d816:	e770      	b.n	800d6fa <_strtod_l+0xa62>
 800d818:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d81c:	e7e0      	b.n	800d7e0 <_strtod_l+0xb48>
 800d81e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d858 <_strtod_l+0xbc0>)
 800d820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d824:	f7f3 f95a 	bl	8000adc <__aeabi_dcmplt>
 800d828:	e798      	b.n	800d75c <_strtod_l+0xac4>
 800d82a:	2300      	movs	r3, #0
 800d82c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d82e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d830:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d832:	6013      	str	r3, [r2, #0]
 800d834:	f7ff ba6d 	b.w	800cd12 <_strtod_l+0x7a>
 800d838:	2a65      	cmp	r2, #101	@ 0x65
 800d83a:	f43f ab66 	beq.w	800cf0a <_strtod_l+0x272>
 800d83e:	2a45      	cmp	r2, #69	@ 0x45
 800d840:	f43f ab63 	beq.w	800cf0a <_strtod_l+0x272>
 800d844:	2301      	movs	r3, #1
 800d846:	f7ff bb9e 	b.w	800cf86 <_strtod_l+0x2ee>
 800d84a:	bf00      	nop
 800d84c:	f3af 8000 	nop.w
 800d850:	ffc00000 	.word	0xffc00000
 800d854:	41dfffff 	.word	0x41dfffff
 800d858:	94a03595 	.word	0x94a03595
 800d85c:	3fcfffff 	.word	0x3fcfffff

0800d860 <_strtod_r>:
 800d860:	4b01      	ldr	r3, [pc, #4]	@ (800d868 <_strtod_r+0x8>)
 800d862:	f7ff ba19 	b.w	800cc98 <_strtod_l>
 800d866:	bf00      	nop
 800d868:	200000a0 	.word	0x200000a0

0800d86c <_strtol_l.constprop.0>:
 800d86c:	2b24      	cmp	r3, #36	@ 0x24
 800d86e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d872:	4686      	mov	lr, r0
 800d874:	4690      	mov	r8, r2
 800d876:	d801      	bhi.n	800d87c <_strtol_l.constprop.0+0x10>
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d106      	bne.n	800d88a <_strtol_l.constprop.0+0x1e>
 800d87c:	f7fd fdae 	bl	800b3dc <__errno>
 800d880:	2316      	movs	r3, #22
 800d882:	6003      	str	r3, [r0, #0]
 800d884:	2000      	movs	r0, #0
 800d886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d88a:	4834      	ldr	r0, [pc, #208]	@ (800d95c <_strtol_l.constprop.0+0xf0>)
 800d88c:	460d      	mov	r5, r1
 800d88e:	462a      	mov	r2, r5
 800d890:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d894:	5d06      	ldrb	r6, [r0, r4]
 800d896:	f016 0608 	ands.w	r6, r6, #8
 800d89a:	d1f8      	bne.n	800d88e <_strtol_l.constprop.0+0x22>
 800d89c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d89e:	d12d      	bne.n	800d8fc <_strtol_l.constprop.0+0x90>
 800d8a0:	782c      	ldrb	r4, [r5, #0]
 800d8a2:	2601      	movs	r6, #1
 800d8a4:	1c95      	adds	r5, r2, #2
 800d8a6:	f033 0210 	bics.w	r2, r3, #16
 800d8aa:	d109      	bne.n	800d8c0 <_strtol_l.constprop.0+0x54>
 800d8ac:	2c30      	cmp	r4, #48	@ 0x30
 800d8ae:	d12a      	bne.n	800d906 <_strtol_l.constprop.0+0x9a>
 800d8b0:	782a      	ldrb	r2, [r5, #0]
 800d8b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d8b6:	2a58      	cmp	r2, #88	@ 0x58
 800d8b8:	d125      	bne.n	800d906 <_strtol_l.constprop.0+0x9a>
 800d8ba:	786c      	ldrb	r4, [r5, #1]
 800d8bc:	2310      	movs	r3, #16
 800d8be:	3502      	adds	r5, #2
 800d8c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d8c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	fbbc f9f3 	udiv	r9, ip, r3
 800d8ce:	4610      	mov	r0, r2
 800d8d0:	fb03 ca19 	mls	sl, r3, r9, ip
 800d8d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d8d8:	2f09      	cmp	r7, #9
 800d8da:	d81b      	bhi.n	800d914 <_strtol_l.constprop.0+0xa8>
 800d8dc:	463c      	mov	r4, r7
 800d8de:	42a3      	cmp	r3, r4
 800d8e0:	dd27      	ble.n	800d932 <_strtol_l.constprop.0+0xc6>
 800d8e2:	1c57      	adds	r7, r2, #1
 800d8e4:	d007      	beq.n	800d8f6 <_strtol_l.constprop.0+0x8a>
 800d8e6:	4581      	cmp	r9, r0
 800d8e8:	d320      	bcc.n	800d92c <_strtol_l.constprop.0+0xc0>
 800d8ea:	d101      	bne.n	800d8f0 <_strtol_l.constprop.0+0x84>
 800d8ec:	45a2      	cmp	sl, r4
 800d8ee:	db1d      	blt.n	800d92c <_strtol_l.constprop.0+0xc0>
 800d8f0:	fb00 4003 	mla	r0, r0, r3, r4
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8fa:	e7eb      	b.n	800d8d4 <_strtol_l.constprop.0+0x68>
 800d8fc:	2c2b      	cmp	r4, #43	@ 0x2b
 800d8fe:	bf04      	itt	eq
 800d900:	782c      	ldrbeq	r4, [r5, #0]
 800d902:	1c95      	addeq	r5, r2, #2
 800d904:	e7cf      	b.n	800d8a6 <_strtol_l.constprop.0+0x3a>
 800d906:	2b00      	cmp	r3, #0
 800d908:	d1da      	bne.n	800d8c0 <_strtol_l.constprop.0+0x54>
 800d90a:	2c30      	cmp	r4, #48	@ 0x30
 800d90c:	bf0c      	ite	eq
 800d90e:	2308      	moveq	r3, #8
 800d910:	230a      	movne	r3, #10
 800d912:	e7d5      	b.n	800d8c0 <_strtol_l.constprop.0+0x54>
 800d914:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d918:	2f19      	cmp	r7, #25
 800d91a:	d801      	bhi.n	800d920 <_strtol_l.constprop.0+0xb4>
 800d91c:	3c37      	subs	r4, #55	@ 0x37
 800d91e:	e7de      	b.n	800d8de <_strtol_l.constprop.0+0x72>
 800d920:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d924:	2f19      	cmp	r7, #25
 800d926:	d804      	bhi.n	800d932 <_strtol_l.constprop.0+0xc6>
 800d928:	3c57      	subs	r4, #87	@ 0x57
 800d92a:	e7d8      	b.n	800d8de <_strtol_l.constprop.0+0x72>
 800d92c:	f04f 32ff 	mov.w	r2, #4294967295
 800d930:	e7e1      	b.n	800d8f6 <_strtol_l.constprop.0+0x8a>
 800d932:	1c53      	adds	r3, r2, #1
 800d934:	d108      	bne.n	800d948 <_strtol_l.constprop.0+0xdc>
 800d936:	2322      	movs	r3, #34	@ 0x22
 800d938:	f8ce 3000 	str.w	r3, [lr]
 800d93c:	4660      	mov	r0, ip
 800d93e:	f1b8 0f00 	cmp.w	r8, #0
 800d942:	d0a0      	beq.n	800d886 <_strtol_l.constprop.0+0x1a>
 800d944:	1e69      	subs	r1, r5, #1
 800d946:	e006      	b.n	800d956 <_strtol_l.constprop.0+0xea>
 800d948:	b106      	cbz	r6, 800d94c <_strtol_l.constprop.0+0xe0>
 800d94a:	4240      	negs	r0, r0
 800d94c:	f1b8 0f00 	cmp.w	r8, #0
 800d950:	d099      	beq.n	800d886 <_strtol_l.constprop.0+0x1a>
 800d952:	2a00      	cmp	r2, #0
 800d954:	d1f6      	bne.n	800d944 <_strtol_l.constprop.0+0xd8>
 800d956:	f8c8 1000 	str.w	r1, [r8]
 800d95a:	e794      	b.n	800d886 <_strtol_l.constprop.0+0x1a>
 800d95c:	0800ed49 	.word	0x0800ed49

0800d960 <_strtol_r>:
 800d960:	f7ff bf84 	b.w	800d86c <_strtol_l.constprop.0>

0800d964 <__ssputs_r>:
 800d964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d968:	688e      	ldr	r6, [r1, #8]
 800d96a:	461f      	mov	r7, r3
 800d96c:	42be      	cmp	r6, r7
 800d96e:	680b      	ldr	r3, [r1, #0]
 800d970:	4682      	mov	sl, r0
 800d972:	460c      	mov	r4, r1
 800d974:	4690      	mov	r8, r2
 800d976:	d82d      	bhi.n	800d9d4 <__ssputs_r+0x70>
 800d978:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d97c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d980:	d026      	beq.n	800d9d0 <__ssputs_r+0x6c>
 800d982:	6965      	ldr	r5, [r4, #20]
 800d984:	6909      	ldr	r1, [r1, #16]
 800d986:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d98a:	eba3 0901 	sub.w	r9, r3, r1
 800d98e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d992:	1c7b      	adds	r3, r7, #1
 800d994:	444b      	add	r3, r9
 800d996:	106d      	asrs	r5, r5, #1
 800d998:	429d      	cmp	r5, r3
 800d99a:	bf38      	it	cc
 800d99c:	461d      	movcc	r5, r3
 800d99e:	0553      	lsls	r3, r2, #21
 800d9a0:	d527      	bpl.n	800d9f2 <__ssputs_r+0x8e>
 800d9a2:	4629      	mov	r1, r5
 800d9a4:	f7fe fc1c 	bl	800c1e0 <_malloc_r>
 800d9a8:	4606      	mov	r6, r0
 800d9aa:	b360      	cbz	r0, 800da06 <__ssputs_r+0xa2>
 800d9ac:	6921      	ldr	r1, [r4, #16]
 800d9ae:	464a      	mov	r2, r9
 800d9b0:	f7fd fd41 	bl	800b436 <memcpy>
 800d9b4:	89a3      	ldrh	r3, [r4, #12]
 800d9b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d9ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9be:	81a3      	strh	r3, [r4, #12]
 800d9c0:	6126      	str	r6, [r4, #16]
 800d9c2:	6165      	str	r5, [r4, #20]
 800d9c4:	444e      	add	r6, r9
 800d9c6:	eba5 0509 	sub.w	r5, r5, r9
 800d9ca:	6026      	str	r6, [r4, #0]
 800d9cc:	60a5      	str	r5, [r4, #8]
 800d9ce:	463e      	mov	r6, r7
 800d9d0:	42be      	cmp	r6, r7
 800d9d2:	d900      	bls.n	800d9d6 <__ssputs_r+0x72>
 800d9d4:	463e      	mov	r6, r7
 800d9d6:	6820      	ldr	r0, [r4, #0]
 800d9d8:	4632      	mov	r2, r6
 800d9da:	4641      	mov	r1, r8
 800d9dc:	f000 fb6a 	bl	800e0b4 <memmove>
 800d9e0:	68a3      	ldr	r3, [r4, #8]
 800d9e2:	1b9b      	subs	r3, r3, r6
 800d9e4:	60a3      	str	r3, [r4, #8]
 800d9e6:	6823      	ldr	r3, [r4, #0]
 800d9e8:	4433      	add	r3, r6
 800d9ea:	6023      	str	r3, [r4, #0]
 800d9ec:	2000      	movs	r0, #0
 800d9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9f2:	462a      	mov	r2, r5
 800d9f4:	f000 ff41 	bl	800e87a <_realloc_r>
 800d9f8:	4606      	mov	r6, r0
 800d9fa:	2800      	cmp	r0, #0
 800d9fc:	d1e0      	bne.n	800d9c0 <__ssputs_r+0x5c>
 800d9fe:	6921      	ldr	r1, [r4, #16]
 800da00:	4650      	mov	r0, sl
 800da02:	f7fe fb79 	bl	800c0f8 <_free_r>
 800da06:	230c      	movs	r3, #12
 800da08:	f8ca 3000 	str.w	r3, [sl]
 800da0c:	89a3      	ldrh	r3, [r4, #12]
 800da0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da12:	81a3      	strh	r3, [r4, #12]
 800da14:	f04f 30ff 	mov.w	r0, #4294967295
 800da18:	e7e9      	b.n	800d9ee <__ssputs_r+0x8a>
	...

0800da1c <_svfiprintf_r>:
 800da1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da20:	4698      	mov	r8, r3
 800da22:	898b      	ldrh	r3, [r1, #12]
 800da24:	061b      	lsls	r3, r3, #24
 800da26:	b09d      	sub	sp, #116	@ 0x74
 800da28:	4607      	mov	r7, r0
 800da2a:	460d      	mov	r5, r1
 800da2c:	4614      	mov	r4, r2
 800da2e:	d510      	bpl.n	800da52 <_svfiprintf_r+0x36>
 800da30:	690b      	ldr	r3, [r1, #16]
 800da32:	b973      	cbnz	r3, 800da52 <_svfiprintf_r+0x36>
 800da34:	2140      	movs	r1, #64	@ 0x40
 800da36:	f7fe fbd3 	bl	800c1e0 <_malloc_r>
 800da3a:	6028      	str	r0, [r5, #0]
 800da3c:	6128      	str	r0, [r5, #16]
 800da3e:	b930      	cbnz	r0, 800da4e <_svfiprintf_r+0x32>
 800da40:	230c      	movs	r3, #12
 800da42:	603b      	str	r3, [r7, #0]
 800da44:	f04f 30ff 	mov.w	r0, #4294967295
 800da48:	b01d      	add	sp, #116	@ 0x74
 800da4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da4e:	2340      	movs	r3, #64	@ 0x40
 800da50:	616b      	str	r3, [r5, #20]
 800da52:	2300      	movs	r3, #0
 800da54:	9309      	str	r3, [sp, #36]	@ 0x24
 800da56:	2320      	movs	r3, #32
 800da58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800da60:	2330      	movs	r3, #48	@ 0x30
 800da62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dc00 <_svfiprintf_r+0x1e4>
 800da66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da6a:	f04f 0901 	mov.w	r9, #1
 800da6e:	4623      	mov	r3, r4
 800da70:	469a      	mov	sl, r3
 800da72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da76:	b10a      	cbz	r2, 800da7c <_svfiprintf_r+0x60>
 800da78:	2a25      	cmp	r2, #37	@ 0x25
 800da7a:	d1f9      	bne.n	800da70 <_svfiprintf_r+0x54>
 800da7c:	ebba 0b04 	subs.w	fp, sl, r4
 800da80:	d00b      	beq.n	800da9a <_svfiprintf_r+0x7e>
 800da82:	465b      	mov	r3, fp
 800da84:	4622      	mov	r2, r4
 800da86:	4629      	mov	r1, r5
 800da88:	4638      	mov	r0, r7
 800da8a:	f7ff ff6b 	bl	800d964 <__ssputs_r>
 800da8e:	3001      	adds	r0, #1
 800da90:	f000 80a7 	beq.w	800dbe2 <_svfiprintf_r+0x1c6>
 800da94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da96:	445a      	add	r2, fp
 800da98:	9209      	str	r2, [sp, #36]	@ 0x24
 800da9a:	f89a 3000 	ldrb.w	r3, [sl]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	f000 809f 	beq.w	800dbe2 <_svfiprintf_r+0x1c6>
 800daa4:	2300      	movs	r3, #0
 800daa6:	f04f 32ff 	mov.w	r2, #4294967295
 800daaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daae:	f10a 0a01 	add.w	sl, sl, #1
 800dab2:	9304      	str	r3, [sp, #16]
 800dab4:	9307      	str	r3, [sp, #28]
 800dab6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800daba:	931a      	str	r3, [sp, #104]	@ 0x68
 800dabc:	4654      	mov	r4, sl
 800dabe:	2205      	movs	r2, #5
 800dac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dac4:	484e      	ldr	r0, [pc, #312]	@ (800dc00 <_svfiprintf_r+0x1e4>)
 800dac6:	f7f2 fb83 	bl	80001d0 <memchr>
 800daca:	9a04      	ldr	r2, [sp, #16]
 800dacc:	b9d8      	cbnz	r0, 800db06 <_svfiprintf_r+0xea>
 800dace:	06d0      	lsls	r0, r2, #27
 800dad0:	bf44      	itt	mi
 800dad2:	2320      	movmi	r3, #32
 800dad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dad8:	0711      	lsls	r1, r2, #28
 800dada:	bf44      	itt	mi
 800dadc:	232b      	movmi	r3, #43	@ 0x2b
 800dade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dae2:	f89a 3000 	ldrb.w	r3, [sl]
 800dae6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dae8:	d015      	beq.n	800db16 <_svfiprintf_r+0xfa>
 800daea:	9a07      	ldr	r2, [sp, #28]
 800daec:	4654      	mov	r4, sl
 800daee:	2000      	movs	r0, #0
 800daf0:	f04f 0c0a 	mov.w	ip, #10
 800daf4:	4621      	mov	r1, r4
 800daf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dafa:	3b30      	subs	r3, #48	@ 0x30
 800dafc:	2b09      	cmp	r3, #9
 800dafe:	d94b      	bls.n	800db98 <_svfiprintf_r+0x17c>
 800db00:	b1b0      	cbz	r0, 800db30 <_svfiprintf_r+0x114>
 800db02:	9207      	str	r2, [sp, #28]
 800db04:	e014      	b.n	800db30 <_svfiprintf_r+0x114>
 800db06:	eba0 0308 	sub.w	r3, r0, r8
 800db0a:	fa09 f303 	lsl.w	r3, r9, r3
 800db0e:	4313      	orrs	r3, r2
 800db10:	9304      	str	r3, [sp, #16]
 800db12:	46a2      	mov	sl, r4
 800db14:	e7d2      	b.n	800dabc <_svfiprintf_r+0xa0>
 800db16:	9b03      	ldr	r3, [sp, #12]
 800db18:	1d19      	adds	r1, r3, #4
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	9103      	str	r1, [sp, #12]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	bfbb      	ittet	lt
 800db22:	425b      	neglt	r3, r3
 800db24:	f042 0202 	orrlt.w	r2, r2, #2
 800db28:	9307      	strge	r3, [sp, #28]
 800db2a:	9307      	strlt	r3, [sp, #28]
 800db2c:	bfb8      	it	lt
 800db2e:	9204      	strlt	r2, [sp, #16]
 800db30:	7823      	ldrb	r3, [r4, #0]
 800db32:	2b2e      	cmp	r3, #46	@ 0x2e
 800db34:	d10a      	bne.n	800db4c <_svfiprintf_r+0x130>
 800db36:	7863      	ldrb	r3, [r4, #1]
 800db38:	2b2a      	cmp	r3, #42	@ 0x2a
 800db3a:	d132      	bne.n	800dba2 <_svfiprintf_r+0x186>
 800db3c:	9b03      	ldr	r3, [sp, #12]
 800db3e:	1d1a      	adds	r2, r3, #4
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	9203      	str	r2, [sp, #12]
 800db44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db48:	3402      	adds	r4, #2
 800db4a:	9305      	str	r3, [sp, #20]
 800db4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dc10 <_svfiprintf_r+0x1f4>
 800db50:	7821      	ldrb	r1, [r4, #0]
 800db52:	2203      	movs	r2, #3
 800db54:	4650      	mov	r0, sl
 800db56:	f7f2 fb3b 	bl	80001d0 <memchr>
 800db5a:	b138      	cbz	r0, 800db6c <_svfiprintf_r+0x150>
 800db5c:	9b04      	ldr	r3, [sp, #16]
 800db5e:	eba0 000a 	sub.w	r0, r0, sl
 800db62:	2240      	movs	r2, #64	@ 0x40
 800db64:	4082      	lsls	r2, r0
 800db66:	4313      	orrs	r3, r2
 800db68:	3401      	adds	r4, #1
 800db6a:	9304      	str	r3, [sp, #16]
 800db6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db70:	4824      	ldr	r0, [pc, #144]	@ (800dc04 <_svfiprintf_r+0x1e8>)
 800db72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db76:	2206      	movs	r2, #6
 800db78:	f7f2 fb2a 	bl	80001d0 <memchr>
 800db7c:	2800      	cmp	r0, #0
 800db7e:	d036      	beq.n	800dbee <_svfiprintf_r+0x1d2>
 800db80:	4b21      	ldr	r3, [pc, #132]	@ (800dc08 <_svfiprintf_r+0x1ec>)
 800db82:	bb1b      	cbnz	r3, 800dbcc <_svfiprintf_r+0x1b0>
 800db84:	9b03      	ldr	r3, [sp, #12]
 800db86:	3307      	adds	r3, #7
 800db88:	f023 0307 	bic.w	r3, r3, #7
 800db8c:	3308      	adds	r3, #8
 800db8e:	9303      	str	r3, [sp, #12]
 800db90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db92:	4433      	add	r3, r6
 800db94:	9309      	str	r3, [sp, #36]	@ 0x24
 800db96:	e76a      	b.n	800da6e <_svfiprintf_r+0x52>
 800db98:	fb0c 3202 	mla	r2, ip, r2, r3
 800db9c:	460c      	mov	r4, r1
 800db9e:	2001      	movs	r0, #1
 800dba0:	e7a8      	b.n	800daf4 <_svfiprintf_r+0xd8>
 800dba2:	2300      	movs	r3, #0
 800dba4:	3401      	adds	r4, #1
 800dba6:	9305      	str	r3, [sp, #20]
 800dba8:	4619      	mov	r1, r3
 800dbaa:	f04f 0c0a 	mov.w	ip, #10
 800dbae:	4620      	mov	r0, r4
 800dbb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbb4:	3a30      	subs	r2, #48	@ 0x30
 800dbb6:	2a09      	cmp	r2, #9
 800dbb8:	d903      	bls.n	800dbc2 <_svfiprintf_r+0x1a6>
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d0c6      	beq.n	800db4c <_svfiprintf_r+0x130>
 800dbbe:	9105      	str	r1, [sp, #20]
 800dbc0:	e7c4      	b.n	800db4c <_svfiprintf_r+0x130>
 800dbc2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbc6:	4604      	mov	r4, r0
 800dbc8:	2301      	movs	r3, #1
 800dbca:	e7f0      	b.n	800dbae <_svfiprintf_r+0x192>
 800dbcc:	ab03      	add	r3, sp, #12
 800dbce:	9300      	str	r3, [sp, #0]
 800dbd0:	462a      	mov	r2, r5
 800dbd2:	4b0e      	ldr	r3, [pc, #56]	@ (800dc0c <_svfiprintf_r+0x1f0>)
 800dbd4:	a904      	add	r1, sp, #16
 800dbd6:	4638      	mov	r0, r7
 800dbd8:	f7fc fbb8 	bl	800a34c <_printf_float>
 800dbdc:	1c42      	adds	r2, r0, #1
 800dbde:	4606      	mov	r6, r0
 800dbe0:	d1d6      	bne.n	800db90 <_svfiprintf_r+0x174>
 800dbe2:	89ab      	ldrh	r3, [r5, #12]
 800dbe4:	065b      	lsls	r3, r3, #25
 800dbe6:	f53f af2d 	bmi.w	800da44 <_svfiprintf_r+0x28>
 800dbea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dbec:	e72c      	b.n	800da48 <_svfiprintf_r+0x2c>
 800dbee:	ab03      	add	r3, sp, #12
 800dbf0:	9300      	str	r3, [sp, #0]
 800dbf2:	462a      	mov	r2, r5
 800dbf4:	4b05      	ldr	r3, [pc, #20]	@ (800dc0c <_svfiprintf_r+0x1f0>)
 800dbf6:	a904      	add	r1, sp, #16
 800dbf8:	4638      	mov	r0, r7
 800dbfa:	f7fc fe3f 	bl	800a87c <_printf_i>
 800dbfe:	e7ed      	b.n	800dbdc <_svfiprintf_r+0x1c0>
 800dc00:	0800ee49 	.word	0x0800ee49
 800dc04:	0800ee53 	.word	0x0800ee53
 800dc08:	0800a34d 	.word	0x0800a34d
 800dc0c:	0800d965 	.word	0x0800d965
 800dc10:	0800ee4f 	.word	0x0800ee4f

0800dc14 <__sfputc_r>:
 800dc14:	6893      	ldr	r3, [r2, #8]
 800dc16:	3b01      	subs	r3, #1
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	b410      	push	{r4}
 800dc1c:	6093      	str	r3, [r2, #8]
 800dc1e:	da08      	bge.n	800dc32 <__sfputc_r+0x1e>
 800dc20:	6994      	ldr	r4, [r2, #24]
 800dc22:	42a3      	cmp	r3, r4
 800dc24:	db01      	blt.n	800dc2a <__sfputc_r+0x16>
 800dc26:	290a      	cmp	r1, #10
 800dc28:	d103      	bne.n	800dc32 <__sfputc_r+0x1e>
 800dc2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc2e:	f7fd baee 	b.w	800b20e <__swbuf_r>
 800dc32:	6813      	ldr	r3, [r2, #0]
 800dc34:	1c58      	adds	r0, r3, #1
 800dc36:	6010      	str	r0, [r2, #0]
 800dc38:	7019      	strb	r1, [r3, #0]
 800dc3a:	4608      	mov	r0, r1
 800dc3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc40:	4770      	bx	lr

0800dc42 <__sfputs_r>:
 800dc42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc44:	4606      	mov	r6, r0
 800dc46:	460f      	mov	r7, r1
 800dc48:	4614      	mov	r4, r2
 800dc4a:	18d5      	adds	r5, r2, r3
 800dc4c:	42ac      	cmp	r4, r5
 800dc4e:	d101      	bne.n	800dc54 <__sfputs_r+0x12>
 800dc50:	2000      	movs	r0, #0
 800dc52:	e007      	b.n	800dc64 <__sfputs_r+0x22>
 800dc54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc58:	463a      	mov	r2, r7
 800dc5a:	4630      	mov	r0, r6
 800dc5c:	f7ff ffda 	bl	800dc14 <__sfputc_r>
 800dc60:	1c43      	adds	r3, r0, #1
 800dc62:	d1f3      	bne.n	800dc4c <__sfputs_r+0xa>
 800dc64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc68 <_vfiprintf_r>:
 800dc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc6c:	460d      	mov	r5, r1
 800dc6e:	b09d      	sub	sp, #116	@ 0x74
 800dc70:	4614      	mov	r4, r2
 800dc72:	4698      	mov	r8, r3
 800dc74:	4606      	mov	r6, r0
 800dc76:	b118      	cbz	r0, 800dc80 <_vfiprintf_r+0x18>
 800dc78:	6a03      	ldr	r3, [r0, #32]
 800dc7a:	b90b      	cbnz	r3, 800dc80 <_vfiprintf_r+0x18>
 800dc7c:	f7fd f9be 	bl	800affc <__sinit>
 800dc80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc82:	07d9      	lsls	r1, r3, #31
 800dc84:	d405      	bmi.n	800dc92 <_vfiprintf_r+0x2a>
 800dc86:	89ab      	ldrh	r3, [r5, #12]
 800dc88:	059a      	lsls	r2, r3, #22
 800dc8a:	d402      	bmi.n	800dc92 <_vfiprintf_r+0x2a>
 800dc8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc8e:	f7fd fbd0 	bl	800b432 <__retarget_lock_acquire_recursive>
 800dc92:	89ab      	ldrh	r3, [r5, #12]
 800dc94:	071b      	lsls	r3, r3, #28
 800dc96:	d501      	bpl.n	800dc9c <_vfiprintf_r+0x34>
 800dc98:	692b      	ldr	r3, [r5, #16]
 800dc9a:	b99b      	cbnz	r3, 800dcc4 <_vfiprintf_r+0x5c>
 800dc9c:	4629      	mov	r1, r5
 800dc9e:	4630      	mov	r0, r6
 800dca0:	f7fd faf4 	bl	800b28c <__swsetup_r>
 800dca4:	b170      	cbz	r0, 800dcc4 <_vfiprintf_r+0x5c>
 800dca6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dca8:	07dc      	lsls	r4, r3, #31
 800dcaa:	d504      	bpl.n	800dcb6 <_vfiprintf_r+0x4e>
 800dcac:	f04f 30ff 	mov.w	r0, #4294967295
 800dcb0:	b01d      	add	sp, #116	@ 0x74
 800dcb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcb6:	89ab      	ldrh	r3, [r5, #12]
 800dcb8:	0598      	lsls	r0, r3, #22
 800dcba:	d4f7      	bmi.n	800dcac <_vfiprintf_r+0x44>
 800dcbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcbe:	f7fd fbb9 	bl	800b434 <__retarget_lock_release_recursive>
 800dcc2:	e7f3      	b.n	800dcac <_vfiprintf_r+0x44>
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcc8:	2320      	movs	r3, #32
 800dcca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dcce:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcd2:	2330      	movs	r3, #48	@ 0x30
 800dcd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800de84 <_vfiprintf_r+0x21c>
 800dcd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dcdc:	f04f 0901 	mov.w	r9, #1
 800dce0:	4623      	mov	r3, r4
 800dce2:	469a      	mov	sl, r3
 800dce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dce8:	b10a      	cbz	r2, 800dcee <_vfiprintf_r+0x86>
 800dcea:	2a25      	cmp	r2, #37	@ 0x25
 800dcec:	d1f9      	bne.n	800dce2 <_vfiprintf_r+0x7a>
 800dcee:	ebba 0b04 	subs.w	fp, sl, r4
 800dcf2:	d00b      	beq.n	800dd0c <_vfiprintf_r+0xa4>
 800dcf4:	465b      	mov	r3, fp
 800dcf6:	4622      	mov	r2, r4
 800dcf8:	4629      	mov	r1, r5
 800dcfa:	4630      	mov	r0, r6
 800dcfc:	f7ff ffa1 	bl	800dc42 <__sfputs_r>
 800dd00:	3001      	adds	r0, #1
 800dd02:	f000 80a7 	beq.w	800de54 <_vfiprintf_r+0x1ec>
 800dd06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd08:	445a      	add	r2, fp
 800dd0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd0c:	f89a 3000 	ldrb.w	r3, [sl]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	f000 809f 	beq.w	800de54 <_vfiprintf_r+0x1ec>
 800dd16:	2300      	movs	r3, #0
 800dd18:	f04f 32ff 	mov.w	r2, #4294967295
 800dd1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd20:	f10a 0a01 	add.w	sl, sl, #1
 800dd24:	9304      	str	r3, [sp, #16]
 800dd26:	9307      	str	r3, [sp, #28]
 800dd28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd2e:	4654      	mov	r4, sl
 800dd30:	2205      	movs	r2, #5
 800dd32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd36:	4853      	ldr	r0, [pc, #332]	@ (800de84 <_vfiprintf_r+0x21c>)
 800dd38:	f7f2 fa4a 	bl	80001d0 <memchr>
 800dd3c:	9a04      	ldr	r2, [sp, #16]
 800dd3e:	b9d8      	cbnz	r0, 800dd78 <_vfiprintf_r+0x110>
 800dd40:	06d1      	lsls	r1, r2, #27
 800dd42:	bf44      	itt	mi
 800dd44:	2320      	movmi	r3, #32
 800dd46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd4a:	0713      	lsls	r3, r2, #28
 800dd4c:	bf44      	itt	mi
 800dd4e:	232b      	movmi	r3, #43	@ 0x2b
 800dd50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd54:	f89a 3000 	ldrb.w	r3, [sl]
 800dd58:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd5a:	d015      	beq.n	800dd88 <_vfiprintf_r+0x120>
 800dd5c:	9a07      	ldr	r2, [sp, #28]
 800dd5e:	4654      	mov	r4, sl
 800dd60:	2000      	movs	r0, #0
 800dd62:	f04f 0c0a 	mov.w	ip, #10
 800dd66:	4621      	mov	r1, r4
 800dd68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd6c:	3b30      	subs	r3, #48	@ 0x30
 800dd6e:	2b09      	cmp	r3, #9
 800dd70:	d94b      	bls.n	800de0a <_vfiprintf_r+0x1a2>
 800dd72:	b1b0      	cbz	r0, 800dda2 <_vfiprintf_r+0x13a>
 800dd74:	9207      	str	r2, [sp, #28]
 800dd76:	e014      	b.n	800dda2 <_vfiprintf_r+0x13a>
 800dd78:	eba0 0308 	sub.w	r3, r0, r8
 800dd7c:	fa09 f303 	lsl.w	r3, r9, r3
 800dd80:	4313      	orrs	r3, r2
 800dd82:	9304      	str	r3, [sp, #16]
 800dd84:	46a2      	mov	sl, r4
 800dd86:	e7d2      	b.n	800dd2e <_vfiprintf_r+0xc6>
 800dd88:	9b03      	ldr	r3, [sp, #12]
 800dd8a:	1d19      	adds	r1, r3, #4
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	9103      	str	r1, [sp, #12]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	bfbb      	ittet	lt
 800dd94:	425b      	neglt	r3, r3
 800dd96:	f042 0202 	orrlt.w	r2, r2, #2
 800dd9a:	9307      	strge	r3, [sp, #28]
 800dd9c:	9307      	strlt	r3, [sp, #28]
 800dd9e:	bfb8      	it	lt
 800dda0:	9204      	strlt	r2, [sp, #16]
 800dda2:	7823      	ldrb	r3, [r4, #0]
 800dda4:	2b2e      	cmp	r3, #46	@ 0x2e
 800dda6:	d10a      	bne.n	800ddbe <_vfiprintf_r+0x156>
 800dda8:	7863      	ldrb	r3, [r4, #1]
 800ddaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddac:	d132      	bne.n	800de14 <_vfiprintf_r+0x1ac>
 800ddae:	9b03      	ldr	r3, [sp, #12]
 800ddb0:	1d1a      	adds	r2, r3, #4
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	9203      	str	r2, [sp, #12]
 800ddb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ddba:	3402      	adds	r4, #2
 800ddbc:	9305      	str	r3, [sp, #20]
 800ddbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800de94 <_vfiprintf_r+0x22c>
 800ddc2:	7821      	ldrb	r1, [r4, #0]
 800ddc4:	2203      	movs	r2, #3
 800ddc6:	4650      	mov	r0, sl
 800ddc8:	f7f2 fa02 	bl	80001d0 <memchr>
 800ddcc:	b138      	cbz	r0, 800ddde <_vfiprintf_r+0x176>
 800ddce:	9b04      	ldr	r3, [sp, #16]
 800ddd0:	eba0 000a 	sub.w	r0, r0, sl
 800ddd4:	2240      	movs	r2, #64	@ 0x40
 800ddd6:	4082      	lsls	r2, r0
 800ddd8:	4313      	orrs	r3, r2
 800ddda:	3401      	adds	r4, #1
 800dddc:	9304      	str	r3, [sp, #16]
 800ddde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dde2:	4829      	ldr	r0, [pc, #164]	@ (800de88 <_vfiprintf_r+0x220>)
 800dde4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dde8:	2206      	movs	r2, #6
 800ddea:	f7f2 f9f1 	bl	80001d0 <memchr>
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	d03f      	beq.n	800de72 <_vfiprintf_r+0x20a>
 800ddf2:	4b26      	ldr	r3, [pc, #152]	@ (800de8c <_vfiprintf_r+0x224>)
 800ddf4:	bb1b      	cbnz	r3, 800de3e <_vfiprintf_r+0x1d6>
 800ddf6:	9b03      	ldr	r3, [sp, #12]
 800ddf8:	3307      	adds	r3, #7
 800ddfa:	f023 0307 	bic.w	r3, r3, #7
 800ddfe:	3308      	adds	r3, #8
 800de00:	9303      	str	r3, [sp, #12]
 800de02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de04:	443b      	add	r3, r7
 800de06:	9309      	str	r3, [sp, #36]	@ 0x24
 800de08:	e76a      	b.n	800dce0 <_vfiprintf_r+0x78>
 800de0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800de0e:	460c      	mov	r4, r1
 800de10:	2001      	movs	r0, #1
 800de12:	e7a8      	b.n	800dd66 <_vfiprintf_r+0xfe>
 800de14:	2300      	movs	r3, #0
 800de16:	3401      	adds	r4, #1
 800de18:	9305      	str	r3, [sp, #20]
 800de1a:	4619      	mov	r1, r3
 800de1c:	f04f 0c0a 	mov.w	ip, #10
 800de20:	4620      	mov	r0, r4
 800de22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de26:	3a30      	subs	r2, #48	@ 0x30
 800de28:	2a09      	cmp	r2, #9
 800de2a:	d903      	bls.n	800de34 <_vfiprintf_r+0x1cc>
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d0c6      	beq.n	800ddbe <_vfiprintf_r+0x156>
 800de30:	9105      	str	r1, [sp, #20]
 800de32:	e7c4      	b.n	800ddbe <_vfiprintf_r+0x156>
 800de34:	fb0c 2101 	mla	r1, ip, r1, r2
 800de38:	4604      	mov	r4, r0
 800de3a:	2301      	movs	r3, #1
 800de3c:	e7f0      	b.n	800de20 <_vfiprintf_r+0x1b8>
 800de3e:	ab03      	add	r3, sp, #12
 800de40:	9300      	str	r3, [sp, #0]
 800de42:	462a      	mov	r2, r5
 800de44:	4b12      	ldr	r3, [pc, #72]	@ (800de90 <_vfiprintf_r+0x228>)
 800de46:	a904      	add	r1, sp, #16
 800de48:	4630      	mov	r0, r6
 800de4a:	f7fc fa7f 	bl	800a34c <_printf_float>
 800de4e:	4607      	mov	r7, r0
 800de50:	1c78      	adds	r0, r7, #1
 800de52:	d1d6      	bne.n	800de02 <_vfiprintf_r+0x19a>
 800de54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de56:	07d9      	lsls	r1, r3, #31
 800de58:	d405      	bmi.n	800de66 <_vfiprintf_r+0x1fe>
 800de5a:	89ab      	ldrh	r3, [r5, #12]
 800de5c:	059a      	lsls	r2, r3, #22
 800de5e:	d402      	bmi.n	800de66 <_vfiprintf_r+0x1fe>
 800de60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de62:	f7fd fae7 	bl	800b434 <__retarget_lock_release_recursive>
 800de66:	89ab      	ldrh	r3, [r5, #12]
 800de68:	065b      	lsls	r3, r3, #25
 800de6a:	f53f af1f 	bmi.w	800dcac <_vfiprintf_r+0x44>
 800de6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de70:	e71e      	b.n	800dcb0 <_vfiprintf_r+0x48>
 800de72:	ab03      	add	r3, sp, #12
 800de74:	9300      	str	r3, [sp, #0]
 800de76:	462a      	mov	r2, r5
 800de78:	4b05      	ldr	r3, [pc, #20]	@ (800de90 <_vfiprintf_r+0x228>)
 800de7a:	a904      	add	r1, sp, #16
 800de7c:	4630      	mov	r0, r6
 800de7e:	f7fc fcfd 	bl	800a87c <_printf_i>
 800de82:	e7e4      	b.n	800de4e <_vfiprintf_r+0x1e6>
 800de84:	0800ee49 	.word	0x0800ee49
 800de88:	0800ee53 	.word	0x0800ee53
 800de8c:	0800a34d 	.word	0x0800a34d
 800de90:	0800dc43 	.word	0x0800dc43
 800de94:	0800ee4f 	.word	0x0800ee4f

0800de98 <__sflush_r>:
 800de98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800de9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dea0:	0716      	lsls	r6, r2, #28
 800dea2:	4605      	mov	r5, r0
 800dea4:	460c      	mov	r4, r1
 800dea6:	d454      	bmi.n	800df52 <__sflush_r+0xba>
 800dea8:	684b      	ldr	r3, [r1, #4]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	dc02      	bgt.n	800deb4 <__sflush_r+0x1c>
 800deae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	dd48      	ble.n	800df46 <__sflush_r+0xae>
 800deb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800deb6:	2e00      	cmp	r6, #0
 800deb8:	d045      	beq.n	800df46 <__sflush_r+0xae>
 800deba:	2300      	movs	r3, #0
 800debc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dec0:	682f      	ldr	r7, [r5, #0]
 800dec2:	6a21      	ldr	r1, [r4, #32]
 800dec4:	602b      	str	r3, [r5, #0]
 800dec6:	d030      	beq.n	800df2a <__sflush_r+0x92>
 800dec8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800deca:	89a3      	ldrh	r3, [r4, #12]
 800decc:	0759      	lsls	r1, r3, #29
 800dece:	d505      	bpl.n	800dedc <__sflush_r+0x44>
 800ded0:	6863      	ldr	r3, [r4, #4]
 800ded2:	1ad2      	subs	r2, r2, r3
 800ded4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ded6:	b10b      	cbz	r3, 800dedc <__sflush_r+0x44>
 800ded8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800deda:	1ad2      	subs	r2, r2, r3
 800dedc:	2300      	movs	r3, #0
 800dede:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dee0:	6a21      	ldr	r1, [r4, #32]
 800dee2:	4628      	mov	r0, r5
 800dee4:	47b0      	blx	r6
 800dee6:	1c43      	adds	r3, r0, #1
 800dee8:	89a3      	ldrh	r3, [r4, #12]
 800deea:	d106      	bne.n	800defa <__sflush_r+0x62>
 800deec:	6829      	ldr	r1, [r5, #0]
 800deee:	291d      	cmp	r1, #29
 800def0:	d82b      	bhi.n	800df4a <__sflush_r+0xb2>
 800def2:	4a2a      	ldr	r2, [pc, #168]	@ (800df9c <__sflush_r+0x104>)
 800def4:	410a      	asrs	r2, r1
 800def6:	07d6      	lsls	r6, r2, #31
 800def8:	d427      	bmi.n	800df4a <__sflush_r+0xb2>
 800defa:	2200      	movs	r2, #0
 800defc:	6062      	str	r2, [r4, #4]
 800defe:	04d9      	lsls	r1, r3, #19
 800df00:	6922      	ldr	r2, [r4, #16]
 800df02:	6022      	str	r2, [r4, #0]
 800df04:	d504      	bpl.n	800df10 <__sflush_r+0x78>
 800df06:	1c42      	adds	r2, r0, #1
 800df08:	d101      	bne.n	800df0e <__sflush_r+0x76>
 800df0a:	682b      	ldr	r3, [r5, #0]
 800df0c:	b903      	cbnz	r3, 800df10 <__sflush_r+0x78>
 800df0e:	6560      	str	r0, [r4, #84]	@ 0x54
 800df10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df12:	602f      	str	r7, [r5, #0]
 800df14:	b1b9      	cbz	r1, 800df46 <__sflush_r+0xae>
 800df16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df1a:	4299      	cmp	r1, r3
 800df1c:	d002      	beq.n	800df24 <__sflush_r+0x8c>
 800df1e:	4628      	mov	r0, r5
 800df20:	f7fe f8ea 	bl	800c0f8 <_free_r>
 800df24:	2300      	movs	r3, #0
 800df26:	6363      	str	r3, [r4, #52]	@ 0x34
 800df28:	e00d      	b.n	800df46 <__sflush_r+0xae>
 800df2a:	2301      	movs	r3, #1
 800df2c:	4628      	mov	r0, r5
 800df2e:	47b0      	blx	r6
 800df30:	4602      	mov	r2, r0
 800df32:	1c50      	adds	r0, r2, #1
 800df34:	d1c9      	bne.n	800deca <__sflush_r+0x32>
 800df36:	682b      	ldr	r3, [r5, #0]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d0c6      	beq.n	800deca <__sflush_r+0x32>
 800df3c:	2b1d      	cmp	r3, #29
 800df3e:	d001      	beq.n	800df44 <__sflush_r+0xac>
 800df40:	2b16      	cmp	r3, #22
 800df42:	d11e      	bne.n	800df82 <__sflush_r+0xea>
 800df44:	602f      	str	r7, [r5, #0]
 800df46:	2000      	movs	r0, #0
 800df48:	e022      	b.n	800df90 <__sflush_r+0xf8>
 800df4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df4e:	b21b      	sxth	r3, r3
 800df50:	e01b      	b.n	800df8a <__sflush_r+0xf2>
 800df52:	690f      	ldr	r7, [r1, #16]
 800df54:	2f00      	cmp	r7, #0
 800df56:	d0f6      	beq.n	800df46 <__sflush_r+0xae>
 800df58:	0793      	lsls	r3, r2, #30
 800df5a:	680e      	ldr	r6, [r1, #0]
 800df5c:	bf08      	it	eq
 800df5e:	694b      	ldreq	r3, [r1, #20]
 800df60:	600f      	str	r7, [r1, #0]
 800df62:	bf18      	it	ne
 800df64:	2300      	movne	r3, #0
 800df66:	eba6 0807 	sub.w	r8, r6, r7
 800df6a:	608b      	str	r3, [r1, #8]
 800df6c:	f1b8 0f00 	cmp.w	r8, #0
 800df70:	dde9      	ble.n	800df46 <__sflush_r+0xae>
 800df72:	6a21      	ldr	r1, [r4, #32]
 800df74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800df76:	4643      	mov	r3, r8
 800df78:	463a      	mov	r2, r7
 800df7a:	4628      	mov	r0, r5
 800df7c:	47b0      	blx	r6
 800df7e:	2800      	cmp	r0, #0
 800df80:	dc08      	bgt.n	800df94 <__sflush_r+0xfc>
 800df82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df8a:	81a3      	strh	r3, [r4, #12]
 800df8c:	f04f 30ff 	mov.w	r0, #4294967295
 800df90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df94:	4407      	add	r7, r0
 800df96:	eba8 0800 	sub.w	r8, r8, r0
 800df9a:	e7e7      	b.n	800df6c <__sflush_r+0xd4>
 800df9c:	dfbffffe 	.word	0xdfbffffe

0800dfa0 <_fflush_r>:
 800dfa0:	b538      	push	{r3, r4, r5, lr}
 800dfa2:	690b      	ldr	r3, [r1, #16]
 800dfa4:	4605      	mov	r5, r0
 800dfa6:	460c      	mov	r4, r1
 800dfa8:	b913      	cbnz	r3, 800dfb0 <_fflush_r+0x10>
 800dfaa:	2500      	movs	r5, #0
 800dfac:	4628      	mov	r0, r5
 800dfae:	bd38      	pop	{r3, r4, r5, pc}
 800dfb0:	b118      	cbz	r0, 800dfba <_fflush_r+0x1a>
 800dfb2:	6a03      	ldr	r3, [r0, #32]
 800dfb4:	b90b      	cbnz	r3, 800dfba <_fflush_r+0x1a>
 800dfb6:	f7fd f821 	bl	800affc <__sinit>
 800dfba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d0f3      	beq.n	800dfaa <_fflush_r+0xa>
 800dfc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dfc4:	07d0      	lsls	r0, r2, #31
 800dfc6:	d404      	bmi.n	800dfd2 <_fflush_r+0x32>
 800dfc8:	0599      	lsls	r1, r3, #22
 800dfca:	d402      	bmi.n	800dfd2 <_fflush_r+0x32>
 800dfcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dfce:	f7fd fa30 	bl	800b432 <__retarget_lock_acquire_recursive>
 800dfd2:	4628      	mov	r0, r5
 800dfd4:	4621      	mov	r1, r4
 800dfd6:	f7ff ff5f 	bl	800de98 <__sflush_r>
 800dfda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dfdc:	07da      	lsls	r2, r3, #31
 800dfde:	4605      	mov	r5, r0
 800dfe0:	d4e4      	bmi.n	800dfac <_fflush_r+0xc>
 800dfe2:	89a3      	ldrh	r3, [r4, #12]
 800dfe4:	059b      	lsls	r3, r3, #22
 800dfe6:	d4e1      	bmi.n	800dfac <_fflush_r+0xc>
 800dfe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dfea:	f7fd fa23 	bl	800b434 <__retarget_lock_release_recursive>
 800dfee:	e7dd      	b.n	800dfac <_fflush_r+0xc>

0800dff0 <__swhatbuf_r>:
 800dff0:	b570      	push	{r4, r5, r6, lr}
 800dff2:	460c      	mov	r4, r1
 800dff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dff8:	2900      	cmp	r1, #0
 800dffa:	b096      	sub	sp, #88	@ 0x58
 800dffc:	4615      	mov	r5, r2
 800dffe:	461e      	mov	r6, r3
 800e000:	da0d      	bge.n	800e01e <__swhatbuf_r+0x2e>
 800e002:	89a3      	ldrh	r3, [r4, #12]
 800e004:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e008:	f04f 0100 	mov.w	r1, #0
 800e00c:	bf14      	ite	ne
 800e00e:	2340      	movne	r3, #64	@ 0x40
 800e010:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e014:	2000      	movs	r0, #0
 800e016:	6031      	str	r1, [r6, #0]
 800e018:	602b      	str	r3, [r5, #0]
 800e01a:	b016      	add	sp, #88	@ 0x58
 800e01c:	bd70      	pop	{r4, r5, r6, pc}
 800e01e:	466a      	mov	r2, sp
 800e020:	f000 f874 	bl	800e10c <_fstat_r>
 800e024:	2800      	cmp	r0, #0
 800e026:	dbec      	blt.n	800e002 <__swhatbuf_r+0x12>
 800e028:	9901      	ldr	r1, [sp, #4]
 800e02a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e02e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e032:	4259      	negs	r1, r3
 800e034:	4159      	adcs	r1, r3
 800e036:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e03a:	e7eb      	b.n	800e014 <__swhatbuf_r+0x24>

0800e03c <__smakebuf_r>:
 800e03c:	898b      	ldrh	r3, [r1, #12]
 800e03e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e040:	079d      	lsls	r5, r3, #30
 800e042:	4606      	mov	r6, r0
 800e044:	460c      	mov	r4, r1
 800e046:	d507      	bpl.n	800e058 <__smakebuf_r+0x1c>
 800e048:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e04c:	6023      	str	r3, [r4, #0]
 800e04e:	6123      	str	r3, [r4, #16]
 800e050:	2301      	movs	r3, #1
 800e052:	6163      	str	r3, [r4, #20]
 800e054:	b003      	add	sp, #12
 800e056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e058:	ab01      	add	r3, sp, #4
 800e05a:	466a      	mov	r2, sp
 800e05c:	f7ff ffc8 	bl	800dff0 <__swhatbuf_r>
 800e060:	9f00      	ldr	r7, [sp, #0]
 800e062:	4605      	mov	r5, r0
 800e064:	4639      	mov	r1, r7
 800e066:	4630      	mov	r0, r6
 800e068:	f7fe f8ba 	bl	800c1e0 <_malloc_r>
 800e06c:	b948      	cbnz	r0, 800e082 <__smakebuf_r+0x46>
 800e06e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e072:	059a      	lsls	r2, r3, #22
 800e074:	d4ee      	bmi.n	800e054 <__smakebuf_r+0x18>
 800e076:	f023 0303 	bic.w	r3, r3, #3
 800e07a:	f043 0302 	orr.w	r3, r3, #2
 800e07e:	81a3      	strh	r3, [r4, #12]
 800e080:	e7e2      	b.n	800e048 <__smakebuf_r+0xc>
 800e082:	89a3      	ldrh	r3, [r4, #12]
 800e084:	6020      	str	r0, [r4, #0]
 800e086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e08a:	81a3      	strh	r3, [r4, #12]
 800e08c:	9b01      	ldr	r3, [sp, #4]
 800e08e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e092:	b15b      	cbz	r3, 800e0ac <__smakebuf_r+0x70>
 800e094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e098:	4630      	mov	r0, r6
 800e09a:	f000 f849 	bl	800e130 <_isatty_r>
 800e09e:	b128      	cbz	r0, 800e0ac <__smakebuf_r+0x70>
 800e0a0:	89a3      	ldrh	r3, [r4, #12]
 800e0a2:	f023 0303 	bic.w	r3, r3, #3
 800e0a6:	f043 0301 	orr.w	r3, r3, #1
 800e0aa:	81a3      	strh	r3, [r4, #12]
 800e0ac:	89a3      	ldrh	r3, [r4, #12]
 800e0ae:	431d      	orrs	r5, r3
 800e0b0:	81a5      	strh	r5, [r4, #12]
 800e0b2:	e7cf      	b.n	800e054 <__smakebuf_r+0x18>

0800e0b4 <memmove>:
 800e0b4:	4288      	cmp	r0, r1
 800e0b6:	b510      	push	{r4, lr}
 800e0b8:	eb01 0402 	add.w	r4, r1, r2
 800e0bc:	d902      	bls.n	800e0c4 <memmove+0x10>
 800e0be:	4284      	cmp	r4, r0
 800e0c0:	4623      	mov	r3, r4
 800e0c2:	d807      	bhi.n	800e0d4 <memmove+0x20>
 800e0c4:	1e43      	subs	r3, r0, #1
 800e0c6:	42a1      	cmp	r1, r4
 800e0c8:	d008      	beq.n	800e0dc <memmove+0x28>
 800e0ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0d2:	e7f8      	b.n	800e0c6 <memmove+0x12>
 800e0d4:	4402      	add	r2, r0
 800e0d6:	4601      	mov	r1, r0
 800e0d8:	428a      	cmp	r2, r1
 800e0da:	d100      	bne.n	800e0de <memmove+0x2a>
 800e0dc:	bd10      	pop	{r4, pc}
 800e0de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0e6:	e7f7      	b.n	800e0d8 <memmove+0x24>

0800e0e8 <strncmp>:
 800e0e8:	b510      	push	{r4, lr}
 800e0ea:	b16a      	cbz	r2, 800e108 <strncmp+0x20>
 800e0ec:	3901      	subs	r1, #1
 800e0ee:	1884      	adds	r4, r0, r2
 800e0f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d103      	bne.n	800e104 <strncmp+0x1c>
 800e0fc:	42a0      	cmp	r0, r4
 800e0fe:	d001      	beq.n	800e104 <strncmp+0x1c>
 800e100:	2a00      	cmp	r2, #0
 800e102:	d1f5      	bne.n	800e0f0 <strncmp+0x8>
 800e104:	1ad0      	subs	r0, r2, r3
 800e106:	bd10      	pop	{r4, pc}
 800e108:	4610      	mov	r0, r2
 800e10a:	e7fc      	b.n	800e106 <strncmp+0x1e>

0800e10c <_fstat_r>:
 800e10c:	b538      	push	{r3, r4, r5, lr}
 800e10e:	4d07      	ldr	r5, [pc, #28]	@ (800e12c <_fstat_r+0x20>)
 800e110:	2300      	movs	r3, #0
 800e112:	4604      	mov	r4, r0
 800e114:	4608      	mov	r0, r1
 800e116:	4611      	mov	r1, r2
 800e118:	602b      	str	r3, [r5, #0]
 800e11a:	f7f4 fa8d 	bl	8002638 <_fstat>
 800e11e:	1c43      	adds	r3, r0, #1
 800e120:	d102      	bne.n	800e128 <_fstat_r+0x1c>
 800e122:	682b      	ldr	r3, [r5, #0]
 800e124:	b103      	cbz	r3, 800e128 <_fstat_r+0x1c>
 800e126:	6023      	str	r3, [r4, #0]
 800e128:	bd38      	pop	{r3, r4, r5, pc}
 800e12a:	bf00      	nop
 800e12c:	20000c20 	.word	0x20000c20

0800e130 <_isatty_r>:
 800e130:	b538      	push	{r3, r4, r5, lr}
 800e132:	4d06      	ldr	r5, [pc, #24]	@ (800e14c <_isatty_r+0x1c>)
 800e134:	2300      	movs	r3, #0
 800e136:	4604      	mov	r4, r0
 800e138:	4608      	mov	r0, r1
 800e13a:	602b      	str	r3, [r5, #0]
 800e13c:	f7f4 fa8c 	bl	8002658 <_isatty>
 800e140:	1c43      	adds	r3, r0, #1
 800e142:	d102      	bne.n	800e14a <_isatty_r+0x1a>
 800e144:	682b      	ldr	r3, [r5, #0]
 800e146:	b103      	cbz	r3, 800e14a <_isatty_r+0x1a>
 800e148:	6023      	str	r3, [r4, #0]
 800e14a:	bd38      	pop	{r3, r4, r5, pc}
 800e14c:	20000c20 	.word	0x20000c20

0800e150 <_sbrk_r>:
 800e150:	b538      	push	{r3, r4, r5, lr}
 800e152:	4d06      	ldr	r5, [pc, #24]	@ (800e16c <_sbrk_r+0x1c>)
 800e154:	2300      	movs	r3, #0
 800e156:	4604      	mov	r4, r0
 800e158:	4608      	mov	r0, r1
 800e15a:	602b      	str	r3, [r5, #0]
 800e15c:	f7f4 fa94 	bl	8002688 <_sbrk>
 800e160:	1c43      	adds	r3, r0, #1
 800e162:	d102      	bne.n	800e16a <_sbrk_r+0x1a>
 800e164:	682b      	ldr	r3, [r5, #0]
 800e166:	b103      	cbz	r3, 800e16a <_sbrk_r+0x1a>
 800e168:	6023      	str	r3, [r4, #0]
 800e16a:	bd38      	pop	{r3, r4, r5, pc}
 800e16c:	20000c20 	.word	0x20000c20

0800e170 <nan>:
 800e170:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e178 <nan+0x8>
 800e174:	4770      	bx	lr
 800e176:	bf00      	nop
 800e178:	00000000 	.word	0x00000000
 800e17c:	7ff80000 	.word	0x7ff80000

0800e180 <__assert_func>:
 800e180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e182:	4614      	mov	r4, r2
 800e184:	461a      	mov	r2, r3
 800e186:	4b09      	ldr	r3, [pc, #36]	@ (800e1ac <__assert_func+0x2c>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4605      	mov	r5, r0
 800e18c:	68d8      	ldr	r0, [r3, #12]
 800e18e:	b954      	cbnz	r4, 800e1a6 <__assert_func+0x26>
 800e190:	4b07      	ldr	r3, [pc, #28]	@ (800e1b0 <__assert_func+0x30>)
 800e192:	461c      	mov	r4, r3
 800e194:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e198:	9100      	str	r1, [sp, #0]
 800e19a:	462b      	mov	r3, r5
 800e19c:	4905      	ldr	r1, [pc, #20]	@ (800e1b4 <__assert_func+0x34>)
 800e19e:	f000 fba7 	bl	800e8f0 <fiprintf>
 800e1a2:	f000 fbb7 	bl	800e914 <abort>
 800e1a6:	4b04      	ldr	r3, [pc, #16]	@ (800e1b8 <__assert_func+0x38>)
 800e1a8:	e7f4      	b.n	800e194 <__assert_func+0x14>
 800e1aa:	bf00      	nop
 800e1ac:	20000050 	.word	0x20000050
 800e1b0:	0800ee9d 	.word	0x0800ee9d
 800e1b4:	0800ee6f 	.word	0x0800ee6f
 800e1b8:	0800ee62 	.word	0x0800ee62

0800e1bc <_calloc_r>:
 800e1bc:	b570      	push	{r4, r5, r6, lr}
 800e1be:	fba1 5402 	umull	r5, r4, r1, r2
 800e1c2:	b93c      	cbnz	r4, 800e1d4 <_calloc_r+0x18>
 800e1c4:	4629      	mov	r1, r5
 800e1c6:	f7fe f80b 	bl	800c1e0 <_malloc_r>
 800e1ca:	4606      	mov	r6, r0
 800e1cc:	b928      	cbnz	r0, 800e1da <_calloc_r+0x1e>
 800e1ce:	2600      	movs	r6, #0
 800e1d0:	4630      	mov	r0, r6
 800e1d2:	bd70      	pop	{r4, r5, r6, pc}
 800e1d4:	220c      	movs	r2, #12
 800e1d6:	6002      	str	r2, [r0, #0]
 800e1d8:	e7f9      	b.n	800e1ce <_calloc_r+0x12>
 800e1da:	462a      	mov	r2, r5
 800e1dc:	4621      	mov	r1, r4
 800e1de:	f7fd f8ab 	bl	800b338 <memset>
 800e1e2:	e7f5      	b.n	800e1d0 <_calloc_r+0x14>

0800e1e4 <rshift>:
 800e1e4:	6903      	ldr	r3, [r0, #16]
 800e1e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e1ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e1f2:	f100 0414 	add.w	r4, r0, #20
 800e1f6:	dd45      	ble.n	800e284 <rshift+0xa0>
 800e1f8:	f011 011f 	ands.w	r1, r1, #31
 800e1fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e200:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e204:	d10c      	bne.n	800e220 <rshift+0x3c>
 800e206:	f100 0710 	add.w	r7, r0, #16
 800e20a:	4629      	mov	r1, r5
 800e20c:	42b1      	cmp	r1, r6
 800e20e:	d334      	bcc.n	800e27a <rshift+0x96>
 800e210:	1a9b      	subs	r3, r3, r2
 800e212:	009b      	lsls	r3, r3, #2
 800e214:	1eea      	subs	r2, r5, #3
 800e216:	4296      	cmp	r6, r2
 800e218:	bf38      	it	cc
 800e21a:	2300      	movcc	r3, #0
 800e21c:	4423      	add	r3, r4
 800e21e:	e015      	b.n	800e24c <rshift+0x68>
 800e220:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e224:	f1c1 0820 	rsb	r8, r1, #32
 800e228:	40cf      	lsrs	r7, r1
 800e22a:	f105 0e04 	add.w	lr, r5, #4
 800e22e:	46a1      	mov	r9, r4
 800e230:	4576      	cmp	r6, lr
 800e232:	46f4      	mov	ip, lr
 800e234:	d815      	bhi.n	800e262 <rshift+0x7e>
 800e236:	1a9a      	subs	r2, r3, r2
 800e238:	0092      	lsls	r2, r2, #2
 800e23a:	3a04      	subs	r2, #4
 800e23c:	3501      	adds	r5, #1
 800e23e:	42ae      	cmp	r6, r5
 800e240:	bf38      	it	cc
 800e242:	2200      	movcc	r2, #0
 800e244:	18a3      	adds	r3, r4, r2
 800e246:	50a7      	str	r7, [r4, r2]
 800e248:	b107      	cbz	r7, 800e24c <rshift+0x68>
 800e24a:	3304      	adds	r3, #4
 800e24c:	1b1a      	subs	r2, r3, r4
 800e24e:	42a3      	cmp	r3, r4
 800e250:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e254:	bf08      	it	eq
 800e256:	2300      	moveq	r3, #0
 800e258:	6102      	str	r2, [r0, #16]
 800e25a:	bf08      	it	eq
 800e25c:	6143      	streq	r3, [r0, #20]
 800e25e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e262:	f8dc c000 	ldr.w	ip, [ip]
 800e266:	fa0c fc08 	lsl.w	ip, ip, r8
 800e26a:	ea4c 0707 	orr.w	r7, ip, r7
 800e26e:	f849 7b04 	str.w	r7, [r9], #4
 800e272:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e276:	40cf      	lsrs	r7, r1
 800e278:	e7da      	b.n	800e230 <rshift+0x4c>
 800e27a:	f851 cb04 	ldr.w	ip, [r1], #4
 800e27e:	f847 cf04 	str.w	ip, [r7, #4]!
 800e282:	e7c3      	b.n	800e20c <rshift+0x28>
 800e284:	4623      	mov	r3, r4
 800e286:	e7e1      	b.n	800e24c <rshift+0x68>

0800e288 <__hexdig_fun>:
 800e288:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e28c:	2b09      	cmp	r3, #9
 800e28e:	d802      	bhi.n	800e296 <__hexdig_fun+0xe>
 800e290:	3820      	subs	r0, #32
 800e292:	b2c0      	uxtb	r0, r0
 800e294:	4770      	bx	lr
 800e296:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e29a:	2b05      	cmp	r3, #5
 800e29c:	d801      	bhi.n	800e2a2 <__hexdig_fun+0x1a>
 800e29e:	3847      	subs	r0, #71	@ 0x47
 800e2a0:	e7f7      	b.n	800e292 <__hexdig_fun+0xa>
 800e2a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e2a6:	2b05      	cmp	r3, #5
 800e2a8:	d801      	bhi.n	800e2ae <__hexdig_fun+0x26>
 800e2aa:	3827      	subs	r0, #39	@ 0x27
 800e2ac:	e7f1      	b.n	800e292 <__hexdig_fun+0xa>
 800e2ae:	2000      	movs	r0, #0
 800e2b0:	4770      	bx	lr
	...

0800e2b4 <__gethex>:
 800e2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b8:	b085      	sub	sp, #20
 800e2ba:	468a      	mov	sl, r1
 800e2bc:	9302      	str	r3, [sp, #8]
 800e2be:	680b      	ldr	r3, [r1, #0]
 800e2c0:	9001      	str	r0, [sp, #4]
 800e2c2:	4690      	mov	r8, r2
 800e2c4:	1c9c      	adds	r4, r3, #2
 800e2c6:	46a1      	mov	r9, r4
 800e2c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e2cc:	2830      	cmp	r0, #48	@ 0x30
 800e2ce:	d0fa      	beq.n	800e2c6 <__gethex+0x12>
 800e2d0:	eba9 0303 	sub.w	r3, r9, r3
 800e2d4:	f1a3 0b02 	sub.w	fp, r3, #2
 800e2d8:	f7ff ffd6 	bl	800e288 <__hexdig_fun>
 800e2dc:	4605      	mov	r5, r0
 800e2de:	2800      	cmp	r0, #0
 800e2e0:	d168      	bne.n	800e3b4 <__gethex+0x100>
 800e2e2:	49a0      	ldr	r1, [pc, #640]	@ (800e564 <__gethex+0x2b0>)
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	4648      	mov	r0, r9
 800e2e8:	f7ff fefe 	bl	800e0e8 <strncmp>
 800e2ec:	4607      	mov	r7, r0
 800e2ee:	2800      	cmp	r0, #0
 800e2f0:	d167      	bne.n	800e3c2 <__gethex+0x10e>
 800e2f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e2f6:	4626      	mov	r6, r4
 800e2f8:	f7ff ffc6 	bl	800e288 <__hexdig_fun>
 800e2fc:	2800      	cmp	r0, #0
 800e2fe:	d062      	beq.n	800e3c6 <__gethex+0x112>
 800e300:	4623      	mov	r3, r4
 800e302:	7818      	ldrb	r0, [r3, #0]
 800e304:	2830      	cmp	r0, #48	@ 0x30
 800e306:	4699      	mov	r9, r3
 800e308:	f103 0301 	add.w	r3, r3, #1
 800e30c:	d0f9      	beq.n	800e302 <__gethex+0x4e>
 800e30e:	f7ff ffbb 	bl	800e288 <__hexdig_fun>
 800e312:	fab0 f580 	clz	r5, r0
 800e316:	096d      	lsrs	r5, r5, #5
 800e318:	f04f 0b01 	mov.w	fp, #1
 800e31c:	464a      	mov	r2, r9
 800e31e:	4616      	mov	r6, r2
 800e320:	3201      	adds	r2, #1
 800e322:	7830      	ldrb	r0, [r6, #0]
 800e324:	f7ff ffb0 	bl	800e288 <__hexdig_fun>
 800e328:	2800      	cmp	r0, #0
 800e32a:	d1f8      	bne.n	800e31e <__gethex+0x6a>
 800e32c:	498d      	ldr	r1, [pc, #564]	@ (800e564 <__gethex+0x2b0>)
 800e32e:	2201      	movs	r2, #1
 800e330:	4630      	mov	r0, r6
 800e332:	f7ff fed9 	bl	800e0e8 <strncmp>
 800e336:	2800      	cmp	r0, #0
 800e338:	d13f      	bne.n	800e3ba <__gethex+0x106>
 800e33a:	b944      	cbnz	r4, 800e34e <__gethex+0x9a>
 800e33c:	1c74      	adds	r4, r6, #1
 800e33e:	4622      	mov	r2, r4
 800e340:	4616      	mov	r6, r2
 800e342:	3201      	adds	r2, #1
 800e344:	7830      	ldrb	r0, [r6, #0]
 800e346:	f7ff ff9f 	bl	800e288 <__hexdig_fun>
 800e34a:	2800      	cmp	r0, #0
 800e34c:	d1f8      	bne.n	800e340 <__gethex+0x8c>
 800e34e:	1ba4      	subs	r4, r4, r6
 800e350:	00a7      	lsls	r7, r4, #2
 800e352:	7833      	ldrb	r3, [r6, #0]
 800e354:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e358:	2b50      	cmp	r3, #80	@ 0x50
 800e35a:	d13e      	bne.n	800e3da <__gethex+0x126>
 800e35c:	7873      	ldrb	r3, [r6, #1]
 800e35e:	2b2b      	cmp	r3, #43	@ 0x2b
 800e360:	d033      	beq.n	800e3ca <__gethex+0x116>
 800e362:	2b2d      	cmp	r3, #45	@ 0x2d
 800e364:	d034      	beq.n	800e3d0 <__gethex+0x11c>
 800e366:	1c71      	adds	r1, r6, #1
 800e368:	2400      	movs	r4, #0
 800e36a:	7808      	ldrb	r0, [r1, #0]
 800e36c:	f7ff ff8c 	bl	800e288 <__hexdig_fun>
 800e370:	1e43      	subs	r3, r0, #1
 800e372:	b2db      	uxtb	r3, r3
 800e374:	2b18      	cmp	r3, #24
 800e376:	d830      	bhi.n	800e3da <__gethex+0x126>
 800e378:	f1a0 0210 	sub.w	r2, r0, #16
 800e37c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e380:	f7ff ff82 	bl	800e288 <__hexdig_fun>
 800e384:	f100 3cff 	add.w	ip, r0, #4294967295
 800e388:	fa5f fc8c 	uxtb.w	ip, ip
 800e38c:	f1bc 0f18 	cmp.w	ip, #24
 800e390:	f04f 030a 	mov.w	r3, #10
 800e394:	d91e      	bls.n	800e3d4 <__gethex+0x120>
 800e396:	b104      	cbz	r4, 800e39a <__gethex+0xe6>
 800e398:	4252      	negs	r2, r2
 800e39a:	4417      	add	r7, r2
 800e39c:	f8ca 1000 	str.w	r1, [sl]
 800e3a0:	b1ed      	cbz	r5, 800e3de <__gethex+0x12a>
 800e3a2:	f1bb 0f00 	cmp.w	fp, #0
 800e3a6:	bf0c      	ite	eq
 800e3a8:	2506      	moveq	r5, #6
 800e3aa:	2500      	movne	r5, #0
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	b005      	add	sp, #20
 800e3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b4:	2500      	movs	r5, #0
 800e3b6:	462c      	mov	r4, r5
 800e3b8:	e7b0      	b.n	800e31c <__gethex+0x68>
 800e3ba:	2c00      	cmp	r4, #0
 800e3bc:	d1c7      	bne.n	800e34e <__gethex+0x9a>
 800e3be:	4627      	mov	r7, r4
 800e3c0:	e7c7      	b.n	800e352 <__gethex+0x9e>
 800e3c2:	464e      	mov	r6, r9
 800e3c4:	462f      	mov	r7, r5
 800e3c6:	2501      	movs	r5, #1
 800e3c8:	e7c3      	b.n	800e352 <__gethex+0x9e>
 800e3ca:	2400      	movs	r4, #0
 800e3cc:	1cb1      	adds	r1, r6, #2
 800e3ce:	e7cc      	b.n	800e36a <__gethex+0xb6>
 800e3d0:	2401      	movs	r4, #1
 800e3d2:	e7fb      	b.n	800e3cc <__gethex+0x118>
 800e3d4:	fb03 0002 	mla	r0, r3, r2, r0
 800e3d8:	e7ce      	b.n	800e378 <__gethex+0xc4>
 800e3da:	4631      	mov	r1, r6
 800e3dc:	e7de      	b.n	800e39c <__gethex+0xe8>
 800e3de:	eba6 0309 	sub.w	r3, r6, r9
 800e3e2:	3b01      	subs	r3, #1
 800e3e4:	4629      	mov	r1, r5
 800e3e6:	2b07      	cmp	r3, #7
 800e3e8:	dc0a      	bgt.n	800e400 <__gethex+0x14c>
 800e3ea:	9801      	ldr	r0, [sp, #4]
 800e3ec:	f7fd ff84 	bl	800c2f8 <_Balloc>
 800e3f0:	4604      	mov	r4, r0
 800e3f2:	b940      	cbnz	r0, 800e406 <__gethex+0x152>
 800e3f4:	4b5c      	ldr	r3, [pc, #368]	@ (800e568 <__gethex+0x2b4>)
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	21e4      	movs	r1, #228	@ 0xe4
 800e3fa:	485c      	ldr	r0, [pc, #368]	@ (800e56c <__gethex+0x2b8>)
 800e3fc:	f7ff fec0 	bl	800e180 <__assert_func>
 800e400:	3101      	adds	r1, #1
 800e402:	105b      	asrs	r3, r3, #1
 800e404:	e7ef      	b.n	800e3e6 <__gethex+0x132>
 800e406:	f100 0a14 	add.w	sl, r0, #20
 800e40a:	2300      	movs	r3, #0
 800e40c:	4655      	mov	r5, sl
 800e40e:	469b      	mov	fp, r3
 800e410:	45b1      	cmp	r9, r6
 800e412:	d337      	bcc.n	800e484 <__gethex+0x1d0>
 800e414:	f845 bb04 	str.w	fp, [r5], #4
 800e418:	eba5 050a 	sub.w	r5, r5, sl
 800e41c:	10ad      	asrs	r5, r5, #2
 800e41e:	6125      	str	r5, [r4, #16]
 800e420:	4658      	mov	r0, fp
 800e422:	f7fe f85b 	bl	800c4dc <__hi0bits>
 800e426:	016d      	lsls	r5, r5, #5
 800e428:	f8d8 6000 	ldr.w	r6, [r8]
 800e42c:	1a2d      	subs	r5, r5, r0
 800e42e:	42b5      	cmp	r5, r6
 800e430:	dd54      	ble.n	800e4dc <__gethex+0x228>
 800e432:	1bad      	subs	r5, r5, r6
 800e434:	4629      	mov	r1, r5
 800e436:	4620      	mov	r0, r4
 800e438:	f7fe fbef 	bl	800cc1a <__any_on>
 800e43c:	4681      	mov	r9, r0
 800e43e:	b178      	cbz	r0, 800e460 <__gethex+0x1ac>
 800e440:	1e6b      	subs	r3, r5, #1
 800e442:	1159      	asrs	r1, r3, #5
 800e444:	f003 021f 	and.w	r2, r3, #31
 800e448:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e44c:	f04f 0901 	mov.w	r9, #1
 800e450:	fa09 f202 	lsl.w	r2, r9, r2
 800e454:	420a      	tst	r2, r1
 800e456:	d003      	beq.n	800e460 <__gethex+0x1ac>
 800e458:	454b      	cmp	r3, r9
 800e45a:	dc36      	bgt.n	800e4ca <__gethex+0x216>
 800e45c:	f04f 0902 	mov.w	r9, #2
 800e460:	4629      	mov	r1, r5
 800e462:	4620      	mov	r0, r4
 800e464:	f7ff febe 	bl	800e1e4 <rshift>
 800e468:	442f      	add	r7, r5
 800e46a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e46e:	42bb      	cmp	r3, r7
 800e470:	da42      	bge.n	800e4f8 <__gethex+0x244>
 800e472:	9801      	ldr	r0, [sp, #4]
 800e474:	4621      	mov	r1, r4
 800e476:	f7fd ff7f 	bl	800c378 <_Bfree>
 800e47a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e47c:	2300      	movs	r3, #0
 800e47e:	6013      	str	r3, [r2, #0]
 800e480:	25a3      	movs	r5, #163	@ 0xa3
 800e482:	e793      	b.n	800e3ac <__gethex+0xf8>
 800e484:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e488:	2a2e      	cmp	r2, #46	@ 0x2e
 800e48a:	d012      	beq.n	800e4b2 <__gethex+0x1fe>
 800e48c:	2b20      	cmp	r3, #32
 800e48e:	d104      	bne.n	800e49a <__gethex+0x1e6>
 800e490:	f845 bb04 	str.w	fp, [r5], #4
 800e494:	f04f 0b00 	mov.w	fp, #0
 800e498:	465b      	mov	r3, fp
 800e49a:	7830      	ldrb	r0, [r6, #0]
 800e49c:	9303      	str	r3, [sp, #12]
 800e49e:	f7ff fef3 	bl	800e288 <__hexdig_fun>
 800e4a2:	9b03      	ldr	r3, [sp, #12]
 800e4a4:	f000 000f 	and.w	r0, r0, #15
 800e4a8:	4098      	lsls	r0, r3
 800e4aa:	ea4b 0b00 	orr.w	fp, fp, r0
 800e4ae:	3304      	adds	r3, #4
 800e4b0:	e7ae      	b.n	800e410 <__gethex+0x15c>
 800e4b2:	45b1      	cmp	r9, r6
 800e4b4:	d8ea      	bhi.n	800e48c <__gethex+0x1d8>
 800e4b6:	492b      	ldr	r1, [pc, #172]	@ (800e564 <__gethex+0x2b0>)
 800e4b8:	9303      	str	r3, [sp, #12]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	4630      	mov	r0, r6
 800e4be:	f7ff fe13 	bl	800e0e8 <strncmp>
 800e4c2:	9b03      	ldr	r3, [sp, #12]
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	d1e1      	bne.n	800e48c <__gethex+0x1d8>
 800e4c8:	e7a2      	b.n	800e410 <__gethex+0x15c>
 800e4ca:	1ea9      	subs	r1, r5, #2
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	f7fe fba4 	bl	800cc1a <__any_on>
 800e4d2:	2800      	cmp	r0, #0
 800e4d4:	d0c2      	beq.n	800e45c <__gethex+0x1a8>
 800e4d6:	f04f 0903 	mov.w	r9, #3
 800e4da:	e7c1      	b.n	800e460 <__gethex+0x1ac>
 800e4dc:	da09      	bge.n	800e4f2 <__gethex+0x23e>
 800e4de:	1b75      	subs	r5, r6, r5
 800e4e0:	4621      	mov	r1, r4
 800e4e2:	9801      	ldr	r0, [sp, #4]
 800e4e4:	462a      	mov	r2, r5
 800e4e6:	f7fe f95f 	bl	800c7a8 <__lshift>
 800e4ea:	1b7f      	subs	r7, r7, r5
 800e4ec:	4604      	mov	r4, r0
 800e4ee:	f100 0a14 	add.w	sl, r0, #20
 800e4f2:	f04f 0900 	mov.w	r9, #0
 800e4f6:	e7b8      	b.n	800e46a <__gethex+0x1b6>
 800e4f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e4fc:	42bd      	cmp	r5, r7
 800e4fe:	dd6f      	ble.n	800e5e0 <__gethex+0x32c>
 800e500:	1bed      	subs	r5, r5, r7
 800e502:	42ae      	cmp	r6, r5
 800e504:	dc34      	bgt.n	800e570 <__gethex+0x2bc>
 800e506:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e50a:	2b02      	cmp	r3, #2
 800e50c:	d022      	beq.n	800e554 <__gethex+0x2a0>
 800e50e:	2b03      	cmp	r3, #3
 800e510:	d024      	beq.n	800e55c <__gethex+0x2a8>
 800e512:	2b01      	cmp	r3, #1
 800e514:	d115      	bne.n	800e542 <__gethex+0x28e>
 800e516:	42ae      	cmp	r6, r5
 800e518:	d113      	bne.n	800e542 <__gethex+0x28e>
 800e51a:	2e01      	cmp	r6, #1
 800e51c:	d10b      	bne.n	800e536 <__gethex+0x282>
 800e51e:	9a02      	ldr	r2, [sp, #8]
 800e520:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e524:	6013      	str	r3, [r2, #0]
 800e526:	2301      	movs	r3, #1
 800e528:	6123      	str	r3, [r4, #16]
 800e52a:	f8ca 3000 	str.w	r3, [sl]
 800e52e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e530:	2562      	movs	r5, #98	@ 0x62
 800e532:	601c      	str	r4, [r3, #0]
 800e534:	e73a      	b.n	800e3ac <__gethex+0xf8>
 800e536:	1e71      	subs	r1, r6, #1
 800e538:	4620      	mov	r0, r4
 800e53a:	f7fe fb6e 	bl	800cc1a <__any_on>
 800e53e:	2800      	cmp	r0, #0
 800e540:	d1ed      	bne.n	800e51e <__gethex+0x26a>
 800e542:	9801      	ldr	r0, [sp, #4]
 800e544:	4621      	mov	r1, r4
 800e546:	f7fd ff17 	bl	800c378 <_Bfree>
 800e54a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e54c:	2300      	movs	r3, #0
 800e54e:	6013      	str	r3, [r2, #0]
 800e550:	2550      	movs	r5, #80	@ 0x50
 800e552:	e72b      	b.n	800e3ac <__gethex+0xf8>
 800e554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e556:	2b00      	cmp	r3, #0
 800e558:	d1f3      	bne.n	800e542 <__gethex+0x28e>
 800e55a:	e7e0      	b.n	800e51e <__gethex+0x26a>
 800e55c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d1dd      	bne.n	800e51e <__gethex+0x26a>
 800e562:	e7ee      	b.n	800e542 <__gethex+0x28e>
 800e564:	0800ecf0 	.word	0x0800ecf0
 800e568:	0800eb89 	.word	0x0800eb89
 800e56c:	0800ee9e 	.word	0x0800ee9e
 800e570:	1e6f      	subs	r7, r5, #1
 800e572:	f1b9 0f00 	cmp.w	r9, #0
 800e576:	d130      	bne.n	800e5da <__gethex+0x326>
 800e578:	b127      	cbz	r7, 800e584 <__gethex+0x2d0>
 800e57a:	4639      	mov	r1, r7
 800e57c:	4620      	mov	r0, r4
 800e57e:	f7fe fb4c 	bl	800cc1a <__any_on>
 800e582:	4681      	mov	r9, r0
 800e584:	117a      	asrs	r2, r7, #5
 800e586:	2301      	movs	r3, #1
 800e588:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e58c:	f007 071f 	and.w	r7, r7, #31
 800e590:	40bb      	lsls	r3, r7
 800e592:	4213      	tst	r3, r2
 800e594:	4629      	mov	r1, r5
 800e596:	4620      	mov	r0, r4
 800e598:	bf18      	it	ne
 800e59a:	f049 0902 	orrne.w	r9, r9, #2
 800e59e:	f7ff fe21 	bl	800e1e4 <rshift>
 800e5a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e5a6:	1b76      	subs	r6, r6, r5
 800e5a8:	2502      	movs	r5, #2
 800e5aa:	f1b9 0f00 	cmp.w	r9, #0
 800e5ae:	d047      	beq.n	800e640 <__gethex+0x38c>
 800e5b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e5b4:	2b02      	cmp	r3, #2
 800e5b6:	d015      	beq.n	800e5e4 <__gethex+0x330>
 800e5b8:	2b03      	cmp	r3, #3
 800e5ba:	d017      	beq.n	800e5ec <__gethex+0x338>
 800e5bc:	2b01      	cmp	r3, #1
 800e5be:	d109      	bne.n	800e5d4 <__gethex+0x320>
 800e5c0:	f019 0f02 	tst.w	r9, #2
 800e5c4:	d006      	beq.n	800e5d4 <__gethex+0x320>
 800e5c6:	f8da 3000 	ldr.w	r3, [sl]
 800e5ca:	ea49 0903 	orr.w	r9, r9, r3
 800e5ce:	f019 0f01 	tst.w	r9, #1
 800e5d2:	d10e      	bne.n	800e5f2 <__gethex+0x33e>
 800e5d4:	f045 0510 	orr.w	r5, r5, #16
 800e5d8:	e032      	b.n	800e640 <__gethex+0x38c>
 800e5da:	f04f 0901 	mov.w	r9, #1
 800e5de:	e7d1      	b.n	800e584 <__gethex+0x2d0>
 800e5e0:	2501      	movs	r5, #1
 800e5e2:	e7e2      	b.n	800e5aa <__gethex+0x2f6>
 800e5e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5e6:	f1c3 0301 	rsb	r3, r3, #1
 800e5ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e5ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d0f0      	beq.n	800e5d4 <__gethex+0x320>
 800e5f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e5f6:	f104 0314 	add.w	r3, r4, #20
 800e5fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e5fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e602:	f04f 0c00 	mov.w	ip, #0
 800e606:	4618      	mov	r0, r3
 800e608:	f853 2b04 	ldr.w	r2, [r3], #4
 800e60c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e610:	d01b      	beq.n	800e64a <__gethex+0x396>
 800e612:	3201      	adds	r2, #1
 800e614:	6002      	str	r2, [r0, #0]
 800e616:	2d02      	cmp	r5, #2
 800e618:	f104 0314 	add.w	r3, r4, #20
 800e61c:	d13c      	bne.n	800e698 <__gethex+0x3e4>
 800e61e:	f8d8 2000 	ldr.w	r2, [r8]
 800e622:	3a01      	subs	r2, #1
 800e624:	42b2      	cmp	r2, r6
 800e626:	d109      	bne.n	800e63c <__gethex+0x388>
 800e628:	1171      	asrs	r1, r6, #5
 800e62a:	2201      	movs	r2, #1
 800e62c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e630:	f006 061f 	and.w	r6, r6, #31
 800e634:	fa02 f606 	lsl.w	r6, r2, r6
 800e638:	421e      	tst	r6, r3
 800e63a:	d13a      	bne.n	800e6b2 <__gethex+0x3fe>
 800e63c:	f045 0520 	orr.w	r5, r5, #32
 800e640:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e642:	601c      	str	r4, [r3, #0]
 800e644:	9b02      	ldr	r3, [sp, #8]
 800e646:	601f      	str	r7, [r3, #0]
 800e648:	e6b0      	b.n	800e3ac <__gethex+0xf8>
 800e64a:	4299      	cmp	r1, r3
 800e64c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e650:	d8d9      	bhi.n	800e606 <__gethex+0x352>
 800e652:	68a3      	ldr	r3, [r4, #8]
 800e654:	459b      	cmp	fp, r3
 800e656:	db17      	blt.n	800e688 <__gethex+0x3d4>
 800e658:	6861      	ldr	r1, [r4, #4]
 800e65a:	9801      	ldr	r0, [sp, #4]
 800e65c:	3101      	adds	r1, #1
 800e65e:	f7fd fe4b 	bl	800c2f8 <_Balloc>
 800e662:	4681      	mov	r9, r0
 800e664:	b918      	cbnz	r0, 800e66e <__gethex+0x3ba>
 800e666:	4b1a      	ldr	r3, [pc, #104]	@ (800e6d0 <__gethex+0x41c>)
 800e668:	4602      	mov	r2, r0
 800e66a:	2184      	movs	r1, #132	@ 0x84
 800e66c:	e6c5      	b.n	800e3fa <__gethex+0x146>
 800e66e:	6922      	ldr	r2, [r4, #16]
 800e670:	3202      	adds	r2, #2
 800e672:	f104 010c 	add.w	r1, r4, #12
 800e676:	0092      	lsls	r2, r2, #2
 800e678:	300c      	adds	r0, #12
 800e67a:	f7fc fedc 	bl	800b436 <memcpy>
 800e67e:	4621      	mov	r1, r4
 800e680:	9801      	ldr	r0, [sp, #4]
 800e682:	f7fd fe79 	bl	800c378 <_Bfree>
 800e686:	464c      	mov	r4, r9
 800e688:	6923      	ldr	r3, [r4, #16]
 800e68a:	1c5a      	adds	r2, r3, #1
 800e68c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e690:	6122      	str	r2, [r4, #16]
 800e692:	2201      	movs	r2, #1
 800e694:	615a      	str	r2, [r3, #20]
 800e696:	e7be      	b.n	800e616 <__gethex+0x362>
 800e698:	6922      	ldr	r2, [r4, #16]
 800e69a:	455a      	cmp	r2, fp
 800e69c:	dd0b      	ble.n	800e6b6 <__gethex+0x402>
 800e69e:	2101      	movs	r1, #1
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	f7ff fd9f 	bl	800e1e4 <rshift>
 800e6a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e6aa:	3701      	adds	r7, #1
 800e6ac:	42bb      	cmp	r3, r7
 800e6ae:	f6ff aee0 	blt.w	800e472 <__gethex+0x1be>
 800e6b2:	2501      	movs	r5, #1
 800e6b4:	e7c2      	b.n	800e63c <__gethex+0x388>
 800e6b6:	f016 061f 	ands.w	r6, r6, #31
 800e6ba:	d0fa      	beq.n	800e6b2 <__gethex+0x3fe>
 800e6bc:	4453      	add	r3, sl
 800e6be:	f1c6 0620 	rsb	r6, r6, #32
 800e6c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e6c6:	f7fd ff09 	bl	800c4dc <__hi0bits>
 800e6ca:	42b0      	cmp	r0, r6
 800e6cc:	dbe7      	blt.n	800e69e <__gethex+0x3ea>
 800e6ce:	e7f0      	b.n	800e6b2 <__gethex+0x3fe>
 800e6d0:	0800eb89 	.word	0x0800eb89

0800e6d4 <L_shift>:
 800e6d4:	f1c2 0208 	rsb	r2, r2, #8
 800e6d8:	0092      	lsls	r2, r2, #2
 800e6da:	b570      	push	{r4, r5, r6, lr}
 800e6dc:	f1c2 0620 	rsb	r6, r2, #32
 800e6e0:	6843      	ldr	r3, [r0, #4]
 800e6e2:	6804      	ldr	r4, [r0, #0]
 800e6e4:	fa03 f506 	lsl.w	r5, r3, r6
 800e6e8:	432c      	orrs	r4, r5
 800e6ea:	40d3      	lsrs	r3, r2
 800e6ec:	6004      	str	r4, [r0, #0]
 800e6ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800e6f2:	4288      	cmp	r0, r1
 800e6f4:	d3f4      	bcc.n	800e6e0 <L_shift+0xc>
 800e6f6:	bd70      	pop	{r4, r5, r6, pc}

0800e6f8 <__match>:
 800e6f8:	b530      	push	{r4, r5, lr}
 800e6fa:	6803      	ldr	r3, [r0, #0]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e702:	b914      	cbnz	r4, 800e70a <__match+0x12>
 800e704:	6003      	str	r3, [r0, #0]
 800e706:	2001      	movs	r0, #1
 800e708:	bd30      	pop	{r4, r5, pc}
 800e70a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e70e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e712:	2d19      	cmp	r5, #25
 800e714:	bf98      	it	ls
 800e716:	3220      	addls	r2, #32
 800e718:	42a2      	cmp	r2, r4
 800e71a:	d0f0      	beq.n	800e6fe <__match+0x6>
 800e71c:	2000      	movs	r0, #0
 800e71e:	e7f3      	b.n	800e708 <__match+0x10>

0800e720 <__hexnan>:
 800e720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e724:	680b      	ldr	r3, [r1, #0]
 800e726:	6801      	ldr	r1, [r0, #0]
 800e728:	115e      	asrs	r6, r3, #5
 800e72a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e72e:	f013 031f 	ands.w	r3, r3, #31
 800e732:	b087      	sub	sp, #28
 800e734:	bf18      	it	ne
 800e736:	3604      	addne	r6, #4
 800e738:	2500      	movs	r5, #0
 800e73a:	1f37      	subs	r7, r6, #4
 800e73c:	4682      	mov	sl, r0
 800e73e:	4690      	mov	r8, r2
 800e740:	9301      	str	r3, [sp, #4]
 800e742:	f846 5c04 	str.w	r5, [r6, #-4]
 800e746:	46b9      	mov	r9, r7
 800e748:	463c      	mov	r4, r7
 800e74a:	9502      	str	r5, [sp, #8]
 800e74c:	46ab      	mov	fp, r5
 800e74e:	784a      	ldrb	r2, [r1, #1]
 800e750:	1c4b      	adds	r3, r1, #1
 800e752:	9303      	str	r3, [sp, #12]
 800e754:	b342      	cbz	r2, 800e7a8 <__hexnan+0x88>
 800e756:	4610      	mov	r0, r2
 800e758:	9105      	str	r1, [sp, #20]
 800e75a:	9204      	str	r2, [sp, #16]
 800e75c:	f7ff fd94 	bl	800e288 <__hexdig_fun>
 800e760:	2800      	cmp	r0, #0
 800e762:	d151      	bne.n	800e808 <__hexnan+0xe8>
 800e764:	9a04      	ldr	r2, [sp, #16]
 800e766:	9905      	ldr	r1, [sp, #20]
 800e768:	2a20      	cmp	r2, #32
 800e76a:	d818      	bhi.n	800e79e <__hexnan+0x7e>
 800e76c:	9b02      	ldr	r3, [sp, #8]
 800e76e:	459b      	cmp	fp, r3
 800e770:	dd13      	ble.n	800e79a <__hexnan+0x7a>
 800e772:	454c      	cmp	r4, r9
 800e774:	d206      	bcs.n	800e784 <__hexnan+0x64>
 800e776:	2d07      	cmp	r5, #7
 800e778:	dc04      	bgt.n	800e784 <__hexnan+0x64>
 800e77a:	462a      	mov	r2, r5
 800e77c:	4649      	mov	r1, r9
 800e77e:	4620      	mov	r0, r4
 800e780:	f7ff ffa8 	bl	800e6d4 <L_shift>
 800e784:	4544      	cmp	r4, r8
 800e786:	d952      	bls.n	800e82e <__hexnan+0x10e>
 800e788:	2300      	movs	r3, #0
 800e78a:	f1a4 0904 	sub.w	r9, r4, #4
 800e78e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e792:	f8cd b008 	str.w	fp, [sp, #8]
 800e796:	464c      	mov	r4, r9
 800e798:	461d      	mov	r5, r3
 800e79a:	9903      	ldr	r1, [sp, #12]
 800e79c:	e7d7      	b.n	800e74e <__hexnan+0x2e>
 800e79e:	2a29      	cmp	r2, #41	@ 0x29
 800e7a0:	d157      	bne.n	800e852 <__hexnan+0x132>
 800e7a2:	3102      	adds	r1, #2
 800e7a4:	f8ca 1000 	str.w	r1, [sl]
 800e7a8:	f1bb 0f00 	cmp.w	fp, #0
 800e7ac:	d051      	beq.n	800e852 <__hexnan+0x132>
 800e7ae:	454c      	cmp	r4, r9
 800e7b0:	d206      	bcs.n	800e7c0 <__hexnan+0xa0>
 800e7b2:	2d07      	cmp	r5, #7
 800e7b4:	dc04      	bgt.n	800e7c0 <__hexnan+0xa0>
 800e7b6:	462a      	mov	r2, r5
 800e7b8:	4649      	mov	r1, r9
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	f7ff ff8a 	bl	800e6d4 <L_shift>
 800e7c0:	4544      	cmp	r4, r8
 800e7c2:	d936      	bls.n	800e832 <__hexnan+0x112>
 800e7c4:	f1a8 0204 	sub.w	r2, r8, #4
 800e7c8:	4623      	mov	r3, r4
 800e7ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800e7ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800e7d2:	429f      	cmp	r7, r3
 800e7d4:	d2f9      	bcs.n	800e7ca <__hexnan+0xaa>
 800e7d6:	1b3b      	subs	r3, r7, r4
 800e7d8:	f023 0303 	bic.w	r3, r3, #3
 800e7dc:	3304      	adds	r3, #4
 800e7de:	3401      	adds	r4, #1
 800e7e0:	3e03      	subs	r6, #3
 800e7e2:	42b4      	cmp	r4, r6
 800e7e4:	bf88      	it	hi
 800e7e6:	2304      	movhi	r3, #4
 800e7e8:	4443      	add	r3, r8
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	f843 2b04 	str.w	r2, [r3], #4
 800e7f0:	429f      	cmp	r7, r3
 800e7f2:	d2fb      	bcs.n	800e7ec <__hexnan+0xcc>
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	b91b      	cbnz	r3, 800e800 <__hexnan+0xe0>
 800e7f8:	4547      	cmp	r7, r8
 800e7fa:	d128      	bne.n	800e84e <__hexnan+0x12e>
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	603b      	str	r3, [r7, #0]
 800e800:	2005      	movs	r0, #5
 800e802:	b007      	add	sp, #28
 800e804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e808:	3501      	adds	r5, #1
 800e80a:	2d08      	cmp	r5, #8
 800e80c:	f10b 0b01 	add.w	fp, fp, #1
 800e810:	dd06      	ble.n	800e820 <__hexnan+0x100>
 800e812:	4544      	cmp	r4, r8
 800e814:	d9c1      	bls.n	800e79a <__hexnan+0x7a>
 800e816:	2300      	movs	r3, #0
 800e818:	f844 3c04 	str.w	r3, [r4, #-4]
 800e81c:	2501      	movs	r5, #1
 800e81e:	3c04      	subs	r4, #4
 800e820:	6822      	ldr	r2, [r4, #0]
 800e822:	f000 000f 	and.w	r0, r0, #15
 800e826:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e82a:	6020      	str	r0, [r4, #0]
 800e82c:	e7b5      	b.n	800e79a <__hexnan+0x7a>
 800e82e:	2508      	movs	r5, #8
 800e830:	e7b3      	b.n	800e79a <__hexnan+0x7a>
 800e832:	9b01      	ldr	r3, [sp, #4]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d0dd      	beq.n	800e7f4 <__hexnan+0xd4>
 800e838:	f1c3 0320 	rsb	r3, r3, #32
 800e83c:	f04f 32ff 	mov.w	r2, #4294967295
 800e840:	40da      	lsrs	r2, r3
 800e842:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e846:	4013      	ands	r3, r2
 800e848:	f846 3c04 	str.w	r3, [r6, #-4]
 800e84c:	e7d2      	b.n	800e7f4 <__hexnan+0xd4>
 800e84e:	3f04      	subs	r7, #4
 800e850:	e7d0      	b.n	800e7f4 <__hexnan+0xd4>
 800e852:	2004      	movs	r0, #4
 800e854:	e7d5      	b.n	800e802 <__hexnan+0xe2>

0800e856 <__ascii_mbtowc>:
 800e856:	b082      	sub	sp, #8
 800e858:	b901      	cbnz	r1, 800e85c <__ascii_mbtowc+0x6>
 800e85a:	a901      	add	r1, sp, #4
 800e85c:	b142      	cbz	r2, 800e870 <__ascii_mbtowc+0x1a>
 800e85e:	b14b      	cbz	r3, 800e874 <__ascii_mbtowc+0x1e>
 800e860:	7813      	ldrb	r3, [r2, #0]
 800e862:	600b      	str	r3, [r1, #0]
 800e864:	7812      	ldrb	r2, [r2, #0]
 800e866:	1e10      	subs	r0, r2, #0
 800e868:	bf18      	it	ne
 800e86a:	2001      	movne	r0, #1
 800e86c:	b002      	add	sp, #8
 800e86e:	4770      	bx	lr
 800e870:	4610      	mov	r0, r2
 800e872:	e7fb      	b.n	800e86c <__ascii_mbtowc+0x16>
 800e874:	f06f 0001 	mvn.w	r0, #1
 800e878:	e7f8      	b.n	800e86c <__ascii_mbtowc+0x16>

0800e87a <_realloc_r>:
 800e87a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e87e:	4680      	mov	r8, r0
 800e880:	4615      	mov	r5, r2
 800e882:	460c      	mov	r4, r1
 800e884:	b921      	cbnz	r1, 800e890 <_realloc_r+0x16>
 800e886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e88a:	4611      	mov	r1, r2
 800e88c:	f7fd bca8 	b.w	800c1e0 <_malloc_r>
 800e890:	b92a      	cbnz	r2, 800e89e <_realloc_r+0x24>
 800e892:	f7fd fc31 	bl	800c0f8 <_free_r>
 800e896:	2400      	movs	r4, #0
 800e898:	4620      	mov	r0, r4
 800e89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e89e:	f000 f840 	bl	800e922 <_malloc_usable_size_r>
 800e8a2:	4285      	cmp	r5, r0
 800e8a4:	4606      	mov	r6, r0
 800e8a6:	d802      	bhi.n	800e8ae <_realloc_r+0x34>
 800e8a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e8ac:	d8f4      	bhi.n	800e898 <_realloc_r+0x1e>
 800e8ae:	4629      	mov	r1, r5
 800e8b0:	4640      	mov	r0, r8
 800e8b2:	f7fd fc95 	bl	800c1e0 <_malloc_r>
 800e8b6:	4607      	mov	r7, r0
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	d0ec      	beq.n	800e896 <_realloc_r+0x1c>
 800e8bc:	42b5      	cmp	r5, r6
 800e8be:	462a      	mov	r2, r5
 800e8c0:	4621      	mov	r1, r4
 800e8c2:	bf28      	it	cs
 800e8c4:	4632      	movcs	r2, r6
 800e8c6:	f7fc fdb6 	bl	800b436 <memcpy>
 800e8ca:	4621      	mov	r1, r4
 800e8cc:	4640      	mov	r0, r8
 800e8ce:	f7fd fc13 	bl	800c0f8 <_free_r>
 800e8d2:	463c      	mov	r4, r7
 800e8d4:	e7e0      	b.n	800e898 <_realloc_r+0x1e>

0800e8d6 <__ascii_wctomb>:
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	4608      	mov	r0, r1
 800e8da:	b141      	cbz	r1, 800e8ee <__ascii_wctomb+0x18>
 800e8dc:	2aff      	cmp	r2, #255	@ 0xff
 800e8de:	d904      	bls.n	800e8ea <__ascii_wctomb+0x14>
 800e8e0:	228a      	movs	r2, #138	@ 0x8a
 800e8e2:	601a      	str	r2, [r3, #0]
 800e8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8e8:	4770      	bx	lr
 800e8ea:	700a      	strb	r2, [r1, #0]
 800e8ec:	2001      	movs	r0, #1
 800e8ee:	4770      	bx	lr

0800e8f0 <fiprintf>:
 800e8f0:	b40e      	push	{r1, r2, r3}
 800e8f2:	b503      	push	{r0, r1, lr}
 800e8f4:	4601      	mov	r1, r0
 800e8f6:	ab03      	add	r3, sp, #12
 800e8f8:	4805      	ldr	r0, [pc, #20]	@ (800e910 <fiprintf+0x20>)
 800e8fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8fe:	6800      	ldr	r0, [r0, #0]
 800e900:	9301      	str	r3, [sp, #4]
 800e902:	f7ff f9b1 	bl	800dc68 <_vfiprintf_r>
 800e906:	b002      	add	sp, #8
 800e908:	f85d eb04 	ldr.w	lr, [sp], #4
 800e90c:	b003      	add	sp, #12
 800e90e:	4770      	bx	lr
 800e910:	20000050 	.word	0x20000050

0800e914 <abort>:
 800e914:	b508      	push	{r3, lr}
 800e916:	2006      	movs	r0, #6
 800e918:	f000 f834 	bl	800e984 <raise>
 800e91c:	2001      	movs	r0, #1
 800e91e:	f7f3 fe3b 	bl	8002598 <_exit>

0800e922 <_malloc_usable_size_r>:
 800e922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e926:	1f18      	subs	r0, r3, #4
 800e928:	2b00      	cmp	r3, #0
 800e92a:	bfbc      	itt	lt
 800e92c:	580b      	ldrlt	r3, [r1, r0]
 800e92e:	18c0      	addlt	r0, r0, r3
 800e930:	4770      	bx	lr

0800e932 <_raise_r>:
 800e932:	291f      	cmp	r1, #31
 800e934:	b538      	push	{r3, r4, r5, lr}
 800e936:	4605      	mov	r5, r0
 800e938:	460c      	mov	r4, r1
 800e93a:	d904      	bls.n	800e946 <_raise_r+0x14>
 800e93c:	2316      	movs	r3, #22
 800e93e:	6003      	str	r3, [r0, #0]
 800e940:	f04f 30ff 	mov.w	r0, #4294967295
 800e944:	bd38      	pop	{r3, r4, r5, pc}
 800e946:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e948:	b112      	cbz	r2, 800e950 <_raise_r+0x1e>
 800e94a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e94e:	b94b      	cbnz	r3, 800e964 <_raise_r+0x32>
 800e950:	4628      	mov	r0, r5
 800e952:	f000 f831 	bl	800e9b8 <_getpid_r>
 800e956:	4622      	mov	r2, r4
 800e958:	4601      	mov	r1, r0
 800e95a:	4628      	mov	r0, r5
 800e95c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e960:	f000 b818 	b.w	800e994 <_kill_r>
 800e964:	2b01      	cmp	r3, #1
 800e966:	d00a      	beq.n	800e97e <_raise_r+0x4c>
 800e968:	1c59      	adds	r1, r3, #1
 800e96a:	d103      	bne.n	800e974 <_raise_r+0x42>
 800e96c:	2316      	movs	r3, #22
 800e96e:	6003      	str	r3, [r0, #0]
 800e970:	2001      	movs	r0, #1
 800e972:	e7e7      	b.n	800e944 <_raise_r+0x12>
 800e974:	2100      	movs	r1, #0
 800e976:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e97a:	4620      	mov	r0, r4
 800e97c:	4798      	blx	r3
 800e97e:	2000      	movs	r0, #0
 800e980:	e7e0      	b.n	800e944 <_raise_r+0x12>
	...

0800e984 <raise>:
 800e984:	4b02      	ldr	r3, [pc, #8]	@ (800e990 <raise+0xc>)
 800e986:	4601      	mov	r1, r0
 800e988:	6818      	ldr	r0, [r3, #0]
 800e98a:	f7ff bfd2 	b.w	800e932 <_raise_r>
 800e98e:	bf00      	nop
 800e990:	20000050 	.word	0x20000050

0800e994 <_kill_r>:
 800e994:	b538      	push	{r3, r4, r5, lr}
 800e996:	4d07      	ldr	r5, [pc, #28]	@ (800e9b4 <_kill_r+0x20>)
 800e998:	2300      	movs	r3, #0
 800e99a:	4604      	mov	r4, r0
 800e99c:	4608      	mov	r0, r1
 800e99e:	4611      	mov	r1, r2
 800e9a0:	602b      	str	r3, [r5, #0]
 800e9a2:	f7f3 fde9 	bl	8002578 <_kill>
 800e9a6:	1c43      	adds	r3, r0, #1
 800e9a8:	d102      	bne.n	800e9b0 <_kill_r+0x1c>
 800e9aa:	682b      	ldr	r3, [r5, #0]
 800e9ac:	b103      	cbz	r3, 800e9b0 <_kill_r+0x1c>
 800e9ae:	6023      	str	r3, [r4, #0]
 800e9b0:	bd38      	pop	{r3, r4, r5, pc}
 800e9b2:	bf00      	nop
 800e9b4:	20000c20 	.word	0x20000c20

0800e9b8 <_getpid_r>:
 800e9b8:	f7f3 bdd6 	b.w	8002568 <_getpid>

0800e9bc <_init>:
 800e9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9be:	bf00      	nop
 800e9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9c2:	bc08      	pop	{r3}
 800e9c4:	469e      	mov	lr, r3
 800e9c6:	4770      	bx	lr

0800e9c8 <_fini>:
 800e9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ca:	bf00      	nop
 800e9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9ce:	bc08      	pop	{r3}
 800e9d0:	469e      	mov	lr, r3
 800e9d2:	4770      	bx	lr
