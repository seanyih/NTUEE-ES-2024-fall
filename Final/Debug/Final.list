
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eca4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800ee38  0800ee38  0000fe38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f360  0800f360  0001120c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f360  0800f360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f368  0800f368  0001120c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f368  0800f368  00010368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f36c  0800f36c  0001036c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800f370  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a94  2000020c  0800f57c  0001120c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ca0  0800f57c  00011ca0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001120c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023fec  00000000  00000000  0001123c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000434d  00000000  00000000  00035228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021d8  00000000  00000000  00039578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a6b  00000000  00000000  0003b750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ccee  00000000  00000000  0003d1bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026abb  00000000  00000000  00069ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115f75  00000000  00000000  00090964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a68d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a910  00000000  00000000  001a691c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001b122c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ee1c 	.word	0x0800ee1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	0800ee1c 	.word	0x0800ee1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fe8:	b088      	sub	sp, #32
 8000fea:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fec:	f002 f966 	bl	80032bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff0:	f000 f87a 	bl	80010e8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ff4:	f000 f8da 	bl	80011ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff8:	f000 fc06 	bl	8001808 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000ffc:	f000 f97a 	bl	80012f4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001000:	f000 f9b0 	bl	8001364 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001004:	f000 f9ee 	bl	80013e4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001008:	f000 fa12 	bl	8001430 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800100c:	f000 fb6e 	bl	80016ec <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001010:	f000 fb9c 	bl	800174c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001014:	f000 fbca 	bl	80017ac <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001018:	f000 f8f6 	bl	8001208 <MX_ADC1_Init>
  MX_TIM2_Init();
 800101c:	f000 fa46 	bl	80014ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8001020:	f000 fa92 	bl	8001548 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001024:	f000 fb12 	bl	800164c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init(); //initialize the accelerometer's BSP.
 8001028:	f001 ff1e 	bl	8002e68 <BSP_ACCELERO_Init>

  //set the accelerometer to high-performance mode for low noise.
  uint8_t t = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800102c:	2115      	movs	r1, #21
 800102e:	20d4      	movs	r0, #212	@ 0xd4
 8001030:	f001 fede 	bl	8002df0 <SENSOR_IO_Read>
 8001034:	4603      	mov	r3, r0
 8001036:	73fb      	strb	r3, [r7, #15]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, t ^ 0x10);
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	f083 0310 	eor.w	r3, r3, #16
 800103e:	b2db      	uxtb	r3, r3
 8001040:	461a      	mov	r2, r3
 8001042:	2115      	movs	r1, #21
 8001044:	20d4      	movs	r0, #212	@ 0xd4
 8001046:	f001 feb9 	bl	8002dbc <SENSOR_IO_Write>
  //set ODR to 6.66kHz (highest)
  t = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800104a:	2110      	movs	r1, #16
 800104c:	20d4      	movs	r0, #212	@ 0xd4
 800104e:	f001 fecf 	bl	8002df0 <SENSOR_IO_Read>
 8001052:	4603      	mov	r3, r0
 8001054:	73fb      	strb	r3, [r7, #15]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, 15*16+t%16);
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	f003 030f 	and.w	r3, r3, #15
 800105c:	b2db      	uxtb	r3, r3
 800105e:	3b10      	subs	r3, #16
 8001060:	b2db      	uxtb	r3, r3
 8001062:	461a      	mov	r2, r3
 8001064:	2110      	movs	r1, #16
 8001066:	20d4      	movs	r0, #212	@ 0xd4
 8001068:	f001 fea8 	bl	8002dbc <SENSOR_IO_Write>
  //set LPF to BW=16Hz and low noise mode
  t = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL8_XL);
 800106c:	2117      	movs	r1, #23
 800106e:	20d4      	movs	r0, #212	@ 0xd4
 8001070:	f001 febe 	bl	8002df0 <SENSOR_IO_Read>
 8001074:	4603      	mov	r3, r0
 8001076:	73fb      	strb	r3, [r7, #15]
  t = t & 0x11; //preserve bit4 and bit0
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	f003 0311 	and.w	r3, r3, #17
 800107e:	73fb      	strb	r3, [r7, #15]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL8_XL, t+0xE8);
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	3b18      	subs	r3, #24
 8001084:	b2db      	uxtb	r3, r3
 8001086:	461a      	mov	r2, r3
 8001088:	2117      	movs	r1, #23
 800108a:	20d4      	movs	r0, #212	@ 0xd4
 800108c:	f001 fe96 	bl	8002dbc <SENSOR_IO_Write>
  printf("start\r\n");
 8001090:	4813      	ldr	r0, [pc, #76]	@ (80010e0 <main+0xfc>)
 8001092:	f00a fa7f 	bl	800b594 <puts>

  // Accelerometer test
  BSP_ACCELERO_SetReadMode(ACCELERO_READ_FLOAT);
 8001096:	2001      	movs	r0, #1
 8001098:	f001 ff3c 	bl	8002f14 <BSP_ACCELERO_SetReadMode>
  float pDataXYZ[3];
  BSP_ACCELERO_AccGetXYZ_Float(pDataXYZ);
 800109c:	463b      	mov	r3, r7
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 ff20 	bl	8002ee4 <BSP_ACCELERO_AccGetXYZ_Float>
  printf("acceleration test: %f, %f, %f \r\n", pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa4e 	bl	8000548 <__aeabi_f2d>
 80010ac:	4680      	mov	r8, r0
 80010ae:	4689      	mov	r9, r1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fa48 	bl	8000548 <__aeabi_f2d>
 80010b8:	4604      	mov	r4, r0
 80010ba:	460d      	mov	r5, r1
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fa42 	bl	8000548 <__aeabi_f2d>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010cc:	e9cd 4500 	strd	r4, r5, [sp]
 80010d0:	4642      	mov	r2, r8
 80010d2:	464b      	mov	r3, r9
 80010d4:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <main+0x100>)
 80010d6:	f00a f9f5 	bl	800b4c4 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010da:	bf00      	nop
 80010dc:	e7fd      	b.n	80010da <main+0xf6>
 80010de:	bf00      	nop
 80010e0:	0800ee38 	.word	0x0800ee38
 80010e4:	0800ee40 	.word	0x0800ee40

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b096      	sub	sp, #88	@ 0x58
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	2244      	movs	r2, #68	@ 0x44
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f00a fb4c 	bl	800b794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	463b      	mov	r3, r7
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800110a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800110e:	f005 fa45 	bl	800659c <HAL_PWREx_ControlVoltageScaling>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001118:	f001 f824 	bl	8002164 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800111c:	f005 fa20 	bl	8006560 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001120:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <SystemClock_Config+0xc0>)
 8001122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001126:	4a20      	ldr	r2, [pc, #128]	@ (80011a8 <SystemClock_Config+0xc0>)
 8001128:	f023 0318 	bic.w	r3, r3, #24
 800112c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001130:	2314      	movs	r3, #20
 8001132:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001134:	2301      	movs	r3, #1
 8001136:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001138:	2301      	movs	r3, #1
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001140:	2360      	movs	r3, #96	@ 0x60
 8001142:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001144:	2302      	movs	r3, #2
 8001146:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001148:	2301      	movs	r3, #1
 800114a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800114c:	2301      	movs	r3, #1
 800114e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001150:	2328      	movs	r3, #40	@ 0x28
 8001152:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001154:	2307      	movs	r3, #7
 8001156:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001158:	2302      	movs	r3, #2
 800115a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800115c:	2302      	movs	r3, #2
 800115e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4618      	mov	r0, r3
 8001166:	f005 fb3b 	bl	80067e0 <HAL_RCC_OscConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001170:	f000 fff8 	bl	8002164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001174:	230f      	movs	r3, #15
 8001176:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001178:	2303      	movs	r3, #3
 800117a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	2104      	movs	r1, #4
 800118c:	4618      	mov	r0, r3
 800118e:	f005 ff03 	bl	8006f98 <HAL_RCC_ClockConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001198:	f000 ffe4 	bl	8002164 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800119c:	f006 fc0a 	bl	80079b4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80011a0:	bf00      	nop
 80011a2:	3758      	adds	r7, #88	@ 0x58
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40021000 	.word	0x40021000

080011ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b0a2      	sub	sp, #136	@ 0x88
 80011b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b2:	463b      	mov	r3, r7
 80011b4:	2288      	movs	r2, #136	@ 0x88
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f00a faeb 	bl	800b794 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80011be:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80011c2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80011c4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80011c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80011ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80011ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80011d0:	2301      	movs	r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011d4:	2301      	movs	r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80011d8:	2318      	movs	r3, #24
 80011da:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011dc:	2307      	movs	r3, #7
 80011de:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80011e8:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 80011ec:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ee:	463b      	mov	r3, r7
 80011f0:	4618      	mov	r0, r3
 80011f2:	f006 f8f5 	bl	80073e0 <HAL_RCCEx_PeriphCLKConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80011fc:	f000 ffb2 	bl	8002164 <Error_Handler>
  }
}
 8001200:	bf00      	nop
 8001202:	3788      	adds	r7, #136	@ 0x88
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	@ 0x28
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
 8001228:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800122a:	4b2f      	ldr	r3, [pc, #188]	@ (80012e8 <MX_ADC1_Init+0xe0>)
 800122c:	4a2f      	ldr	r2, [pc, #188]	@ (80012ec <MX_ADC1_Init+0xe4>)
 800122e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001230:	4b2d      	ldr	r3, [pc, #180]	@ (80012e8 <MX_ADC1_Init+0xe0>)
 8001232:	2200      	movs	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001236:	4b2c      	ldr	r3, [pc, #176]	@ (80012e8 <MX_ADC1_Init+0xe0>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800123c:	4b2a      	ldr	r3, [pc, #168]	@ (80012e8 <MX_ADC1_Init+0xe0>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001242:	4b29      	ldr	r3, [pc, #164]	@ (80012e8 <MX_ADC1_Init+0xe0>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001248:	4b27      	ldr	r3, [pc, #156]	@ (80012e8 <MX_ADC1_Init+0xe0>)
 800124a:	2204      	movs	r2, #4
 800124c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800124e:	4b26      	ldr	r3, [pc, #152]	@ (80012e8 <MX_ADC1_Init+0xe0>)
 8001250:	2200      	movs	r2, #0
 8001252:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001254:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <MX_ADC1_Init+0xe0>)
 8001256:	2200      	movs	r2, #0
 8001258:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800125a:	4b23      	ldr	r3, [pc, #140]	@ (80012e8 <MX_ADC1_Init+0xe0>)
 800125c:	2201      	movs	r2, #1
 800125e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001260:	4b21      	ldr	r3, [pc, #132]	@ (80012e8 <MX_ADC1_Init+0xe0>)
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001268:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <MX_ADC1_Init+0xe0>)
 800126a:	2200      	movs	r2, #0
 800126c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800126e:	4b1e      	ldr	r3, [pc, #120]	@ (80012e8 <MX_ADC1_Init+0xe0>)
 8001270:	2200      	movs	r2, #0
 8001272:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001274:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <MX_ADC1_Init+0xe0>)
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800127c:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <MX_ADC1_Init+0xe0>)
 800127e:	2200      	movs	r2, #0
 8001280:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001282:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <MX_ADC1_Init+0xe0>)
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800128a:	4817      	ldr	r0, [pc, #92]	@ (80012e8 <MX_ADC1_Init+0xe0>)
 800128c:	f002 faa4 	bl	80037d8 <HAL_ADC_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001296:	f000 ff65 	bl	8002164 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	4810      	ldr	r0, [pc, #64]	@ (80012e8 <MX_ADC1_Init+0xe0>)
 80012a6:	f003 fc21 	bl	8004aec <HAL_ADCEx_MultiModeConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012b0:	f000 ff58 	bl	8002164 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <MX_ADC1_Init+0xe8>)
 80012b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b8:	2306      	movs	r3, #6
 80012ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012c0:	237f      	movs	r3, #127	@ 0x7f
 80012c2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012c4:	2304      	movs	r3, #4
 80012c6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_ADC1_Init+0xe0>)
 80012d2:	f002 ff3b 	bl	800414c <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80012dc:	f000 ff42 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	@ 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000228 	.word	0x20000228
 80012ec:	50040000 	.word	0x50040000
 80012f0:	3ac04000 	.word	0x3ac04000

080012f4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80012f8:	4b18      	ldr	r3, [pc, #96]	@ (800135c <MX_DFSDM1_Init+0x68>)
 80012fa:	4a19      	ldr	r2, [pc, #100]	@ (8001360 <MX_DFSDM1_Init+0x6c>)
 80012fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80012fe:	4b17      	ldr	r3, [pc, #92]	@ (800135c <MX_DFSDM1_Init+0x68>)
 8001300:	2201      	movs	r2, #1
 8001302:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <MX_DFSDM1_Init+0x68>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <MX_DFSDM1_Init+0x68>)
 800130c:	2202      	movs	r2, #2
 800130e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <MX_DFSDM1_Init+0x68>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001316:	4b11      	ldr	r3, [pc, #68]	@ (800135c <MX_DFSDM1_Init+0x68>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800131c:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <MX_DFSDM1_Init+0x68>)
 800131e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001322:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001324:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <MX_DFSDM1_Init+0x68>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <MX_DFSDM1_Init+0x68>)
 800132c:	2204      	movs	r2, #4
 800132e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001330:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <MX_DFSDM1_Init+0x68>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001336:	4b09      	ldr	r3, [pc, #36]	@ (800135c <MX_DFSDM1_Init+0x68>)
 8001338:	2201      	movs	r2, #1
 800133a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800133c:	4b07      	ldr	r3, [pc, #28]	@ (800135c <MX_DFSDM1_Init+0x68>)
 800133e:	2200      	movs	r2, #0
 8001340:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001342:	4b06      	ldr	r3, [pc, #24]	@ (800135c <MX_DFSDM1_Init+0x68>)
 8001344:	2200      	movs	r2, #0
 8001346:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	@ (800135c <MX_DFSDM1_Init+0x68>)
 800134a:	f003 fd91 	bl	8004e70 <HAL_DFSDM_ChannelInit>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001354:	f000 ff06 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2000028c 	.word	0x2000028c
 8001360:	40016020 	.word	0x40016020

08001364 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001368:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <MX_I2C2_Init+0x74>)
 800136a:	4a1c      	ldr	r2, [pc, #112]	@ (80013dc <MX_I2C2_Init+0x78>)
 800136c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800136e:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <MX_I2C2_Init+0x74>)
 8001370:	4a1b      	ldr	r2, [pc, #108]	@ (80013e0 <MX_I2C2_Init+0x7c>)
 8001372:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001374:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <MX_I2C2_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800137a:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <MX_I2C2_Init+0x74>)
 800137c:	2201      	movs	r2, #1
 800137e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001380:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <MX_I2C2_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001386:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <MX_I2C2_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800138c:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <MX_I2C2_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001392:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <MX_I2C2_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001398:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <MX_I2C2_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800139e:	480e      	ldr	r0, [pc, #56]	@ (80013d8 <MX_I2C2_Init+0x74>)
 80013a0:	f004 f95a 	bl	8005658 <HAL_I2C_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80013aa:	f000 fedb 	bl	8002164 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ae:	2100      	movs	r1, #0
 80013b0:	4809      	ldr	r0, [pc, #36]	@ (80013d8 <MX_I2C2_Init+0x74>)
 80013b2:	f004 ff0b 	bl	80061cc <HAL_I2CEx_ConfigAnalogFilter>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80013bc:	f000 fed2 	bl	8002164 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013c0:	2100      	movs	r1, #0
 80013c2:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <MX_I2C2_Init+0x74>)
 80013c4:	f004 ff4d 	bl	8006262 <HAL_I2CEx_ConfigDigitalFilter>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013ce:	f000 fec9 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200002c4 	.word	0x200002c4
 80013dc:	40005800 	.word	0x40005800
 80013e0:	10d19ce4 	.word	0x10d19ce4

080013e4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <MX_QUADSPI_Init+0x44>)
 80013ea:	4a10      	ldr	r2, [pc, #64]	@ (800142c <MX_QUADSPI_Init+0x48>)
 80013ec:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <MX_QUADSPI_Init+0x44>)
 80013f0:	2202      	movs	r2, #2
 80013f2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <MX_QUADSPI_Init+0x44>)
 80013f6:	2204      	movs	r2, #4
 80013f8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <MX_QUADSPI_Init+0x44>)
 80013fc:	2210      	movs	r2, #16
 80013fe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001400:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <MX_QUADSPI_Init+0x44>)
 8001402:	2217      	movs	r2, #23
 8001404:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001406:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <MX_QUADSPI_Init+0x44>)
 8001408:	2200      	movs	r2, #0
 800140a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800140c:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <MX_QUADSPI_Init+0x44>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	@ (8001428 <MX_QUADSPI_Init+0x44>)
 8001414:	f005 f928 	bl	8006668 <HAL_QSPI_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800141e:	f000 fea1 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000318 	.word	0x20000318
 800142c:	a0001000 	.word	0xa0001000

08001430 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001434:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <MX_SPI3_Init+0x74>)
 8001436:	4a1c      	ldr	r2, [pc, #112]	@ (80014a8 <MX_SPI3_Init+0x78>)
 8001438:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800143a:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <MX_SPI3_Init+0x74>)
 800143c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001440:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001442:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <MX_SPI3_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001448:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <MX_SPI3_Init+0x74>)
 800144a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800144e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001450:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <MX_SPI3_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001456:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <MX_SPI3_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800145c:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <MX_SPI3_Init+0x74>)
 800145e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001462:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001464:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <MX_SPI3_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800146a:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <MX_SPI3_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001470:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <MX_SPI3_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001476:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <MX_SPI3_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800147c:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <MX_SPI3_Init+0x74>)
 800147e:	2207      	movs	r2, #7
 8001480:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001482:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <MX_SPI3_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <MX_SPI3_Init+0x74>)
 800148a:	2208      	movs	r2, #8
 800148c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	@ (80014a4 <MX_SPI3_Init+0x74>)
 8001490:	f006 fc72 	bl	8007d78 <HAL_SPI_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800149a:	f000 fe63 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000035c 	.word	0x2000035c
 80014a8:	40003c00 	.word	0x40003c00

080014ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001544 <MX_TIM2_Init+0x98>)
 80014cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4999;
 80014d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001544 <MX_TIM2_Init+0x98>)
 80014d4:	f241 3287 	movw	r2, #4999	@ 0x1387
 80014d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014da:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <MX_TIM2_Init+0x98>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 80014e0:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <MX_TIM2_Init+0x98>)
 80014e2:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80014e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e8:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <MX_TIM2_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <MX_TIM2_Init+0x98>)
 80014f0:	2280      	movs	r2, #128	@ 0x80
 80014f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014f4:	4813      	ldr	r0, [pc, #76]	@ (8001544 <MX_TIM2_Init+0x98>)
 80014f6:	f006 fce2 	bl	8007ebe <HAL_TIM_Base_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001500:	f000 fe30 	bl	8002164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001504:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001508:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	4619      	mov	r1, r3
 8001510:	480c      	ldr	r0, [pc, #48]	@ (8001544 <MX_TIM2_Init+0x98>)
 8001512:	f007 fa7f 	bl	8008a14 <HAL_TIM_ConfigClockSource>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800151c:	f000 fe22 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	@ (8001544 <MX_TIM2_Init+0x98>)
 800152e:	f007 ff9f 	bl	8009470 <HAL_TIMEx_MasterConfigSynchronization>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001538:	f000 fe14 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	3720      	adds	r7, #32
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200003c0 	.word	0x200003c0

08001548 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08e      	sub	sp, #56	@ 0x38
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001568:	463b      	mov	r3, r7
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]
 8001576:	615a      	str	r2, [r3, #20]
 8001578:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800157a:	4b32      	ldr	r3, [pc, #200]	@ (8001644 <MX_TIM3_Init+0xfc>)
 800157c:	4a32      	ldr	r2, [pc, #200]	@ (8001648 <MX_TIM3_Init+0x100>)
 800157e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8001580:	4b30      	ldr	r3, [pc, #192]	@ (8001644 <MX_TIM3_Init+0xfc>)
 8001582:	2209      	movs	r2, #9
 8001584:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001586:	4b2f      	ldr	r3, [pc, #188]	@ (8001644 <MX_TIM3_Init+0xfc>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7999;
 800158c:	4b2d      	ldr	r3, [pc, #180]	@ (8001644 <MX_TIM3_Init+0xfc>)
 800158e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001592:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001594:	4b2b      	ldr	r3, [pc, #172]	@ (8001644 <MX_TIM3_Init+0xfc>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800159a:	4b2a      	ldr	r3, [pc, #168]	@ (8001644 <MX_TIM3_Init+0xfc>)
 800159c:	2280      	movs	r2, #128	@ 0x80
 800159e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015a0:	4828      	ldr	r0, [pc, #160]	@ (8001644 <MX_TIM3_Init+0xfc>)
 80015a2:	f006 fc8c 	bl	8007ebe <HAL_TIM_Base_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80015ac:	f000 fdda 	bl	8002164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ba:	4619      	mov	r1, r3
 80015bc:	4821      	ldr	r0, [pc, #132]	@ (8001644 <MX_TIM3_Init+0xfc>)
 80015be:	f007 fa29 	bl	8008a14 <HAL_TIM_ConfigClockSource>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80015c8:	f000 fdcc 	bl	8002164 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015cc:	481d      	ldr	r0, [pc, #116]	@ (8001644 <MX_TIM3_Init+0xfc>)
 80015ce:	f006 fd6c 	bl	80080aa <HAL_TIM_PWM_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80015d8:	f000 fdc4 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	4816      	ldr	r0, [pc, #88]	@ (8001644 <MX_TIM3_Init+0xfc>)
 80015ec:	f007 ff40 	bl	8009470 <HAL_TIMEx_MasterConfigSynchronization>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80015f6:	f000 fdb5 	bl	8002164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015fa:	2360      	movs	r3, #96	@ 0x60
 80015fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800160a:	463b      	mov	r3, r7
 800160c:	2200      	movs	r2, #0
 800160e:	4619      	mov	r1, r3
 8001610:	480c      	ldr	r0, [pc, #48]	@ (8001644 <MX_TIM3_Init+0xfc>)
 8001612:	f007 f8eb 	bl	80087ec <HAL_TIM_PWM_ConfigChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800161c:	f000 fda2 	bl	8002164 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001620:	463b      	mov	r3, r7
 8001622:	220c      	movs	r2, #12
 8001624:	4619      	mov	r1, r3
 8001626:	4807      	ldr	r0, [pc, #28]	@ (8001644 <MX_TIM3_Init+0xfc>)
 8001628:	f007 f8e0 	bl	80087ec <HAL_TIM_PWM_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001632:	f000 fd97 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001636:	4803      	ldr	r0, [pc, #12]	@ (8001644 <MX_TIM3_Init+0xfc>)
 8001638:	f000 fffa 	bl	8002630 <HAL_TIM_MspPostInit>

}
 800163c:	bf00      	nop
 800163e:	3738      	adds	r7, #56	@ 0x38
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000040c 	.word	0x2000040c
 8001648:	40000400 	.word	0x40000400

0800164c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001652:	f107 0310 	add.w	r3, r7, #16
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800166a:	4b1e      	ldr	r3, [pc, #120]	@ (80016e4 <MX_TIM5_Init+0x98>)
 800166c:	4a1e      	ldr	r2, [pc, #120]	@ (80016e8 <MX_TIM5_Init+0x9c>)
 800166e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4999;
 8001670:	4b1c      	ldr	r3, [pc, #112]	@ (80016e4 <MX_TIM5_Init+0x98>)
 8001672:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001676:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001678:	4b1a      	ldr	r3, [pc, #104]	@ (80016e4 <MX_TIM5_Init+0x98>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800167e:	4b19      	ldr	r3, [pc, #100]	@ (80016e4 <MX_TIM5_Init+0x98>)
 8001680:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001684:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001686:	4b17      	ldr	r3, [pc, #92]	@ (80016e4 <MX_TIM5_Init+0x98>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800168c:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <MX_TIM5_Init+0x98>)
 800168e:	2280      	movs	r2, #128	@ 0x80
 8001690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001692:	4814      	ldr	r0, [pc, #80]	@ (80016e4 <MX_TIM5_Init+0x98>)
 8001694:	f006 fc13 	bl	8007ebe <HAL_TIM_Base_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800169e:	f000 fd61 	bl	8002164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	4619      	mov	r1, r3
 80016ae:	480d      	ldr	r0, [pc, #52]	@ (80016e4 <MX_TIM5_Init+0x98>)
 80016b0:	f007 f9b0 	bl	8008a14 <HAL_TIM_ConfigClockSource>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80016ba:	f000 fd53 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	4806      	ldr	r0, [pc, #24]	@ (80016e4 <MX_TIM5_Init+0x98>)
 80016cc:	f007 fed0 	bl	8009470 <HAL_TIMEx_MasterConfigSynchronization>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80016d6:	f000 fd45 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000458 	.word	0x20000458
 80016e8:	40000c00 	.word	0x40000c00

080016ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f0:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <MX_USART1_UART_Init+0x58>)
 80016f2:	4a15      	ldr	r2, [pc, #84]	@ (8001748 <MX_USART1_UART_Init+0x5c>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016f6:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <MX_USART1_UART_Init+0x58>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <MX_USART1_UART_Init+0x58>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <MX_USART1_UART_Init+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <MX_USART1_UART_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <MX_USART1_UART_Init+0x58>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <MX_USART1_UART_Init+0x58>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <MX_USART1_UART_Init+0x58>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001722:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <MX_USART1_UART_Init+0x58>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <MX_USART1_UART_Init+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	@ (8001744 <MX_USART1_UART_Init+0x58>)
 8001730:	f007 ff44 	bl	80095bc <HAL_UART_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800173a:	f000 fd13 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200004a4 	.word	0x200004a4
 8001748:	40013800 	.word	0x40013800

0800174c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001750:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <MX_USART3_UART_Init+0x58>)
 8001752:	4a15      	ldr	r2, [pc, #84]	@ (80017a8 <MX_USART3_UART_Init+0x5c>)
 8001754:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001756:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <MX_USART3_UART_Init+0x58>)
 8001758:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800175c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800175e:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <MX_USART3_UART_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001764:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <MX_USART3_UART_Init+0x58>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800176a:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <MX_USART3_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <MX_USART3_UART_Init+0x58>)
 8001772:	220c      	movs	r2, #12
 8001774:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001776:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <MX_USART3_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800177c:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <MX_USART3_UART_Init+0x58>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001782:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <MX_USART3_UART_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <MX_USART3_UART_Init+0x58>)
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800178e:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <MX_USART3_UART_Init+0x58>)
 8001790:	f007 ff14 	bl	80095bc <HAL_UART_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800179a:	f000 fce3 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2000052c 	.word	0x2000052c
 80017a8:	40004800 	.word	0x40004800

080017ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017b0:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80017b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017ba:	2206      	movs	r2, #6
 80017bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017c0:	2202      	movs	r2, #2
 80017c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017c6:	2202      	movs	r2, #2
 80017c8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80017dc:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017de:	2200      	movs	r2, #0
 80017e0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017f0:	f004 fd83 	bl	80062fa <HAL_PCD_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80017fa:	f000 fcb3 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200005b4 	.word	0x200005b4

08001808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	@ 0x28
 800180c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800181e:	4bb1      	ldr	r3, [pc, #708]	@ (8001ae4 <MX_GPIO_Init+0x2dc>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	4ab0      	ldr	r2, [pc, #704]	@ (8001ae4 <MX_GPIO_Init+0x2dc>)
 8001824:	f043 0310 	orr.w	r3, r3, #16
 8001828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182a:	4bae      	ldr	r3, [pc, #696]	@ (8001ae4 <MX_GPIO_Init+0x2dc>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	4bab      	ldr	r3, [pc, #684]	@ (8001ae4 <MX_GPIO_Init+0x2dc>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	4aaa      	ldr	r2, [pc, #680]	@ (8001ae4 <MX_GPIO_Init+0x2dc>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001842:	4ba8      	ldr	r3, [pc, #672]	@ (8001ae4 <MX_GPIO_Init+0x2dc>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	4ba5      	ldr	r3, [pc, #660]	@ (8001ae4 <MX_GPIO_Init+0x2dc>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	4aa4      	ldr	r2, [pc, #656]	@ (8001ae4 <MX_GPIO_Init+0x2dc>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800185a:	4ba2      	ldr	r3, [pc, #648]	@ (8001ae4 <MX_GPIO_Init+0x2dc>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	4b9f      	ldr	r3, [pc, #636]	@ (8001ae4 <MX_GPIO_Init+0x2dc>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	4a9e      	ldr	r2, [pc, #632]	@ (8001ae4 <MX_GPIO_Init+0x2dc>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001872:	4b9c      	ldr	r3, [pc, #624]	@ (8001ae4 <MX_GPIO_Init+0x2dc>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187e:	4b99      	ldr	r3, [pc, #612]	@ (8001ae4 <MX_GPIO_Init+0x2dc>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001882:	4a98      	ldr	r2, [pc, #608]	@ (8001ae4 <MX_GPIO_Init+0x2dc>)
 8001884:	f043 0308 	orr.w	r3, r3, #8
 8001888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800188a:	4b96      	ldr	r3, [pc, #600]	@ (8001ae4 <MX_GPIO_Init+0x2dc>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800189c:	4892      	ldr	r0, [pc, #584]	@ (8001ae8 <MX_GPIO_Init+0x2e0>)
 800189e:	f003 fe91 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|GPIO_PIN_4|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	f248 1114 	movw	r1, #33044	@ 0x8114
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ac:	f003 fe8a 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80018b0:	2200      	movs	r2, #0
 80018b2:	f24f 0104 	movw	r1, #61444	@ 0xf004
 80018b6:	488d      	ldr	r0, [pc, #564]	@ (8001aec <MX_GPIO_Init+0x2e4>)
 80018b8:	f003 fe84 	bl	80055c4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	f241 0181 	movw	r1, #4225	@ 0x1081
 80018c2:	488b      	ldr	r0, [pc, #556]	@ (8001af0 <MX_GPIO_Init+0x2e8>)
 80018c4:	f003 fe7e 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018ce:	4888      	ldr	r0, [pc, #544]	@ (8001af0 <MX_GPIO_Init+0x2e8>)
 80018d0:	f003 fe78 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80018da:	4886      	ldr	r0, [pc, #536]	@ (8001af4 <MX_GPIO_Init+0x2ec>)
 80018dc:	f003 fe72 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80018e0:	2201      	movs	r2, #1
 80018e2:	2120      	movs	r1, #32
 80018e4:	4881      	ldr	r0, [pc, #516]	@ (8001aec <MX_GPIO_Init+0x2e4>)
 80018e6:	f003 fe6d 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	2101      	movs	r1, #1
 80018ee:	487e      	ldr	r0, [pc, #504]	@ (8001ae8 <MX_GPIO_Init+0x2e0>)
 80018f0:	f003 fe68 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80018f4:	f240 1315 	movw	r3, #277	@ 0x115
 80018f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4876      	ldr	r0, [pc, #472]	@ (8001ae8 <MX_GPIO_Init+0x2e0>)
 800190e:	f003 fbbb 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001912:	236a      	movs	r3, #106	@ 0x6a
 8001914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001916:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4619      	mov	r1, r3
 8001926:	4870      	ldr	r0, [pc, #448]	@ (8001ae8 <MX_GPIO_Init+0x2e0>)
 8001928:	f003 fbae 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800192c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001932:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	486c      	ldr	r0, [pc, #432]	@ (8001af4 <MX_GPIO_Init+0x2ec>)
 8001944:	f003 fba0 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001948:	2303      	movs	r3, #3
 800194a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001958:	2308      	movs	r3, #8
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001966:	f003 fb8f 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin PA4 SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|GPIO_PIN_4|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800196a:	f248 1314 	movw	r3, #33044	@ 0x8114
 800196e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001970:	2301      	movs	r3, #1
 8001972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001986:	f003 fb7f 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800198a:	23e0      	movs	r3, #224	@ 0xe0
 800198c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001996:	2303      	movs	r3, #3
 8001998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800199a:	2305      	movs	r3, #5
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019a8:	f003 fb6e 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80019ac:	2301      	movs	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	4619      	mov	r1, r3
 80019c0:	484a      	ldr	r0, [pc, #296]	@ (8001aec <MX_GPIO_Init+0x2e4>)
 80019c2:	f003 fb61 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80019c6:	f24f 0324 	movw	r3, #61476	@ 0xf024
 80019ca:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	4843      	ldr	r0, [pc, #268]	@ (8001aec <MX_GPIO_Init+0x2e4>)
 80019e0:	f003 fb52 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80019e4:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 80019e8:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4619      	mov	r1, r3
 80019fa:	483d      	ldr	r0, [pc, #244]	@ (8001af0 <MX_GPIO_Init+0x2e8>)
 80019fc:	f003 fb44 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001a00:	f243 0381 	movw	r3, #12417	@ 0x3081
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	4835      	ldr	r0, [pc, #212]	@ (8001af0 <MX_GPIO_Init+0x2e8>)
 8001a1a:	f003 fb35 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001a1e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	482f      	ldr	r0, [pc, #188]	@ (8001af4 <MX_GPIO_Init+0x2ec>)
 8001a38:	f003 fb26 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001a3c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4619      	mov	r1, r3
 8001a52:	4828      	ldr	r0, [pc, #160]	@ (8001af4 <MX_GPIO_Init+0x2ec>)
 8001a54:	f003 fb18 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a64:	2303      	movs	r3, #3
 8001a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a68:	2305      	movs	r3, #5
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4619      	mov	r1, r3
 8001a72:	481f      	ldr	r0, [pc, #124]	@ (8001af0 <MX_GPIO_Init+0x2e8>)
 8001a74:	f003 fb08 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001a78:	2378      	movs	r3, #120	@ 0x78
 8001a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a88:	2307      	movs	r3, #7
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4817      	ldr	r0, [pc, #92]	@ (8001af0 <MX_GPIO_Init+0x2e8>)
 8001a94:	f003 faf8 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001a98:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a9e:	2312      	movs	r3, #18
 8001aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aaa:	2304      	movs	r3, #4
 8001aac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480d      	ldr	r0, [pc, #52]	@ (8001aec <MX_GPIO_Init+0x2e4>)
 8001ab6:	f003 fae7 	bl	8005088 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	2017      	movs	r0, #23
 8001ac0:	f003 f99f 	bl	8004e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ac4:	2017      	movs	r0, #23
 8001ac6:	f003 f9b8 	bl	8004e3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	2028      	movs	r0, #40	@ 0x28
 8001ad0:	f003 f997 	bl	8004e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ad4:	2028      	movs	r0, #40	@ 0x28
 8001ad6:	f003 f9b0 	bl	8004e3a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ada:	bf00      	nop
 8001adc:	3728      	adds	r7, #40	@ 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	48001000 	.word	0x48001000
 8001aec:	48000400 	.word	0x48000400
 8001af0:	48000c00 	.word	0x48000c00
 8001af4:	48000800 	.word	0x48000800

08001af8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* timer info*/
  // TIM2: 4Hz for ADC
  // TIM5: 8Hz for accelero

  if (htim->Instance == htim2.Instance) //if timer2 interrupt happens
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d103      	bne.n	8001b14 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  HAL_ADC_Start_IT(&hadc1); //call ADC1 to start
 8001b0c:	4808      	ldr	r0, [pc, #32]	@ (8001b30 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001b0e:	f001 ffb3 	bl	8003a78 <HAL_ADC_Start_IT>

	  AcceleroParser();

  }

}
 8001b12:	e007      	b.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0x2c>
  }else if(htim->Instance == htim5.Instance){ //if timer5 interrupt happens: calculate speed
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d101      	bne.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0x2c>
	  AcceleroParser();
 8001b20:	f000 f976 	bl	8001e10 <AcceleroParser>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200003c0 	.word	0x200003c0
 8001b30:	20000228 	.word	0x20000228
 8001b34:	20000458 	.word	0x20000458

08001b38 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){ //ADC conversion complete callback
 8001b38:	b5b0      	push	{r4, r5, r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	LIGHT = HAL_ADC_GetValue(&hadc1);
 8001b40:	4863      	ldr	r0, [pc, #396]	@ (8001cd0 <HAL_ADC_ConvCpltCallback+0x198>)
 8001b42:	f002 f8c7 	bl	8003cd4 <HAL_ADC_GetValue>
 8001b46:	4603      	mov	r3, r0
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	4b62      	ldr	r3, [pc, #392]	@ (8001cd4 <HAL_ADC_ConvCpltCallback+0x19c>)
 8001b4c:	801a      	strh	r2, [r3, #0]
	printf("light level (0-4095) %d", LIGHT);
 8001b4e:	4b61      	ldr	r3, [pc, #388]	@ (8001cd4 <HAL_ADC_ConvCpltCallback+0x19c>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	4619      	mov	r1, r3
 8001b54:	4860      	ldr	r0, [pc, #384]	@ (8001cd8 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001b56:	f009 fcb5 	bl	800b4c4 <iprintf>
	printf("\r\n");
 8001b5a:	4860      	ldr	r0, [pc, #384]	@ (8001cdc <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001b5c:	f009 fd1a 	bl	800b594 <puts>
	if(LIGHT > 2500){
 8001b60:	4b5c      	ldr	r3, [pc, #368]	@ (8001cd4 <HAL_ADC_ConvCpltCallback+0x19c>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d90a      	bls.n	8001b82 <HAL_ADC_ConvCpltCallback+0x4a>
		error_prev = 0; //stable. only minimum light needed
 8001b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ce0 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	801a      	strh	r2, [r3, #0]
		error_pp = 0;
 8001b72:	4b5c      	ldr	r3, [pc, #368]	@ (8001ce4 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	801a      	strh	r2, [r3, #0]
		CCR = 499;
 8001b78:	4b5b      	ldr	r3, [pc, #364]	@ (8001ce8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001b7a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001b7e:	801a      	strh	r2, [r3, #0]
 8001b80:	e08d      	b.n	8001c9e <HAL_ADC_ConvCpltCallback+0x166>
	}
	else{

		int16_t error = 2000 - LIGHT; //1300 is the target brightness
 8001b82:	4b54      	ldr	r3, [pc, #336]	@ (8001cd4 <HAL_ADC_ConvCpltCallback+0x19c>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	f5c3 63fa 	rsb	r3, r3, #2000	@ 0x7d0
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	81fb      	strh	r3, [r7, #14]

		//PID filter
		u_prev = u_prev + 1*error + 1.8*(error - error_prev) +0.2*(error - 2*error_prev + error_pp);
 8001b8e:	4b57      	ldr	r3, [pc, #348]	@ (8001cec <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001b90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b94:	461a      	mov	r2, r3
 8001b96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fcc1 	bl	8000524 <__aeabi_i2d>
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	460d      	mov	r5, r1
 8001ba6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001baa:	4a4d      	ldr	r2, [pc, #308]	@ (8001ce0 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001bac:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001bb0:	1a9b      	subs	r3, r3, r2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fcb6 	bl	8000524 <__aeabi_i2d>
 8001bb8:	a341      	add	r3, pc, #260	@ (adr r3, 8001cc0 <HAL_ADC_ConvCpltCallback+0x188>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	f7fe fd1b 	bl	80005f8 <__aeabi_dmul>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	4629      	mov	r1, r5
 8001bca:	f7fe fb5f 	bl	800028c <__adddf3>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4614      	mov	r4, r2
 8001bd4:	461d      	mov	r5, r3
 8001bd6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001bda:	4b41      	ldr	r3, [pc, #260]	@ (8001ce0 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	4a3f      	ldr	r2, [pc, #252]	@ (8001ce4 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8001be6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001bea:	4413      	add	r3, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fc99 	bl	8000524 <__aeabi_i2d>
 8001bf2:	a335      	add	r3, pc, #212	@ (adr r3, 8001cc8 <HAL_ADC_ConvCpltCallback+0x190>)
 8001bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf8:	f7fe fcfe 	bl	80005f8 <__aeabi_dmul>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4620      	mov	r0, r4
 8001c02:	4629      	mov	r1, r5
 8001c04:	f7fe fb42 	bl	800028c <__adddf3>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7fe ffa2 	bl	8000b58 <__aeabi_d2iz>
 8001c14:	4603      	mov	r3, r0
 8001c16:	b21a      	sxth	r2, r3
 8001c18:	4b34      	ldr	r3, [pc, #208]	@ (8001cec <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001c1a:	801a      	strh	r2, [r3, #0]

		//Status update
		error_pp = error_prev;
 8001c1c:	4b30      	ldr	r3, [pc, #192]	@ (8001ce0 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001c1e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c22:	4b30      	ldr	r3, [pc, #192]	@ (8001ce4 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8001c24:	801a      	strh	r2, [r3, #0]
		error_prev = error;
 8001c26:	4a2e      	ldr	r2, [pc, #184]	@ (8001ce0 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001c28:	89fb      	ldrh	r3, [r7, #14]
 8001c2a:	8013      	strh	r3, [r2, #0]

		//The value of u should be clamped as well
		if(u_prev < 0) u_prev = 0;
 8001c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cec <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	da03      	bge.n	8001c3e <HAL_ADC_ConvCpltCallback+0x106>
 8001c36:	4b2d      	ldr	r3, [pc, #180]	@ (8001cec <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	801a      	strh	r2, [r3, #0]
 8001c3c:	e009      	b.n	8001c52 <HAL_ADC_ConvCpltCallback+0x11a>
		else if(u_prev > 7999) u_prev = 7999;
 8001c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001cec <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c44:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001c48:	db03      	blt.n	8001c52 <HAL_ADC_ConvCpltCallback+0x11a>
 8001c4a:	4b28      	ldr	r3, [pc, #160]	@ (8001cec <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001c4c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001c50:	801a      	strh	r2, [r3, #0]

		CCR = 1 * u_prev; //CCR can be proportional to it.
 8001c52:	4b26      	ldr	r3, [pc, #152]	@ (8001cec <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ce8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001c5c:	801a      	strh	r2, [r3, #0]
		//Clamp the value of CCR
		if(CCR < 499) CCR = 499;
 8001c5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ce8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	f5b3 7ff9 	cmp.w	r3, #498	@ 0x1f2
 8001c66:	d804      	bhi.n	8001c72 <HAL_ADC_ConvCpltCallback+0x13a>
 8001c68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001c6a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001c6e:	801a      	strh	r2, [r3, #0]
 8001c70:	e008      	b.n	8001c84 <HAL_ADC_ConvCpltCallback+0x14c>
		else if(CCR > 7999) CCR = 7999;
 8001c72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001c7a:	d303      	bcc.n	8001c84 <HAL_ADC_ConvCpltCallback+0x14c>
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001c7e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001c82:	801a      	strh	r2, [r3, #0]

		printf("CCR = %d", CCR);
 8001c84:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4819      	ldr	r0, [pc, #100]	@ (8001cf0 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001c8c:	f009 fc1a 	bl	800b4c4 <iprintf>
		printf(", u_prev = %d \r\n", u_prev);
 8001c90:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c96:	4619      	mov	r1, r3
 8001c98:	4816      	ldr	r0, [pc, #88]	@ (8001cf4 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001c9a:	f009 fc13 	bl	800b4c4 <iprintf>
	}

	//set the CCR value to the timer
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, CCR);
 8001c9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ce8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001ca0:	881a      	ldrh	r2, [r3, #0]
 8001ca2:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, CCR);
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001caa:	881a      	ldrh	r2, [r3, #0]
 8001cac:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	cccccccd 	.word	0xcccccccd
 8001cc4:	3ffccccc 	.word	0x3ffccccc
 8001cc8:	9999999a 	.word	0x9999999a
 8001ccc:	3fc99999 	.word	0x3fc99999
 8001cd0:	20000228 	.word	0x20000228
 8001cd4:	20000a9c 	.word	0x20000a9c
 8001cd8:	0800ee64 	.word	0x0800ee64
 8001cdc:	0800ee7c 	.word	0x0800ee7c
 8001ce0:	20000a9e 	.word	0x20000a9e
 8001ce4:	20000aa0 	.word	0x20000aa0
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	20000aa2 	.word	0x20000aa2
 8001cf0:	0800ee80 	.word	0x0800ee80
 8001cf4:	0800ee8c 	.word	0x0800ee8c
 8001cf8:	2000040c 	.word	0x2000040c

08001cfc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_EXTI13_Pin){ //if the interrupt is the button
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d0c:	d14e      	bne.n	8001dac <HAL_GPIO_EXTI_Callback+0xb0>
		HAL_GPIO_TogglePin(GPIOB, LED2_Pin); //switch the LED to on/off
 8001d0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d12:	4828      	ldr	r0, [pc, #160]	@ (8001db4 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001d14:	f003 fc6e 	bl	80055f4 <HAL_GPIO_TogglePin>
		if(TIMER_IS_ON){
 8001d18:	4b27      	ldr	r3, [pc, #156]	@ (8001db8 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d02e      	beq.n	8001d7e <HAL_GPIO_EXTI_Callback+0x82>
			printf("turned off\r\n");
 8001d20:	4826      	ldr	r0, [pc, #152]	@ (8001dbc <HAL_GPIO_EXTI_Callback+0xc0>)
 8001d22:	f009 fc37 	bl	800b594 <puts>
			HAL_TIM_Base_Stop_IT(&htim2); //start timer
 8001d26:	4826      	ldr	r0, [pc, #152]	@ (8001dc0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001d28:	f006 f990 	bl	800804c <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim3);
 8001d2c:	4825      	ldr	r0, [pc, #148]	@ (8001dc4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001d2e:	f006 f98d 	bl	800804c <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim5);
 8001d32:	4825      	ldr	r0, [pc, #148]	@ (8001dc8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001d34:	f006 f98a 	bl	800804c <HAL_TIM_Base_Stop_IT>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4822      	ldr	r0, [pc, #136]	@ (8001dc4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001d3c:	f006 fb6a 	bl	8008414 <HAL_TIM_PWM_Stop_IT>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_4);
 8001d40:	210c      	movs	r1, #12
 8001d42:	4820      	ldr	r0, [pc, #128]	@ (8001dc4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001d44:	f006 fb66 	bl	8008414 <HAL_TIM_PWM_Stop_IT>
			// PWM param reset
			LIGHT = 0;
 8001d48:	4b20      	ldr	r3, [pc, #128]	@ (8001dcc <HAL_GPIO_EXTI_Callback+0xd0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	801a      	strh	r2, [r3, #0]
			CCR = 499;
 8001d4e:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001d50:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001d54:	801a      	strh	r2, [r3, #0]
			error_prev = 0;
 8001d56:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	801a      	strh	r2, [r3, #0]
			error_pp = 0;
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	801a      	strh	r2, [r3, #0]
			u_prev = 0;
 8001d62:	4b1e      	ldr	r3, [pc, #120]	@ (8001ddc <HAL_GPIO_EXTI_Callback+0xe0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	801a      	strh	r2, [r3, #0]
			PID_INIT = 0;
 8001d68:	4b1d      	ldr	r3, [pc, #116]	@ (8001de0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]

			// speed reset
			speed = 0;
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001de4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]

			TIMER_IS_ON = 0;
 8001d76:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
			HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
			TIMER_IS_ON = 1;
		}
  }
}
 8001d7c:	e016      	b.n	8001dac <HAL_GPIO_EXTI_Callback+0xb0>
			printf("turned on\r\n");
 8001d7e:	481a      	ldr	r0, [pc, #104]	@ (8001de8 <HAL_GPIO_EXTI_Callback+0xec>)
 8001d80:	f009 fc08 	bl	800b594 <puts>
			HAL_TIM_Base_Start_IT(&htim2); //start timer
 8001d84:	480e      	ldr	r0, [pc, #56]	@ (8001dc0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001d86:	f006 f8f1 	bl	8007f6c <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim3);
 8001d8a:	480e      	ldr	r0, [pc, #56]	@ (8001dc4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001d8c:	f006 f8ee 	bl	8007f6c <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim5);
 8001d90:	480d      	ldr	r0, [pc, #52]	@ (8001dc8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001d92:	f006 f8eb 	bl	8007f6c <HAL_TIM_Base_Start_IT>
			HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001d96:	2100      	movs	r1, #0
 8001d98:	480a      	ldr	r0, [pc, #40]	@ (8001dc4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001d9a:	f006 f9e7 	bl	800816c <HAL_TIM_PWM_Start_IT>
			HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
 8001d9e:	210c      	movs	r1, #12
 8001da0:	4808      	ldr	r0, [pc, #32]	@ (8001dc4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001da2:	f006 f9e3 	bl	800816c <HAL_TIM_PWM_Start_IT>
			TIMER_IS_ON = 1;
 8001da6:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	48000400 	.word	0x48000400
 8001db8:	20000a98 	.word	0x20000a98
 8001dbc:	0800eea0 	.word	0x0800eea0
 8001dc0:	200003c0 	.word	0x200003c0
 8001dc4:	2000040c 	.word	0x2000040c
 8001dc8:	20000458 	.word	0x20000458
 8001dcc:	20000a9c 	.word	0x20000a9c
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000a9e 	.word	0x20000a9e
 8001dd8:	20000aa0 	.word	0x20000aa0
 8001ddc:	20000aa2 	.word	0x20000aa2
 8001de0:	20000aa4 	.word	0x20000aa4
 8001de4:	20000aa8 	.word	0x20000aa8
 8001de8:	0800eeac 	.word	0x0800eeac

08001dec <__io_putchar>:

int __io_putchar(int ch)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	//ITM_SendChar(ch);
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001df4:	1d39      	adds	r1, r7, #4
 8001df6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	4803      	ldr	r0, [pc, #12]	@ (8001e0c <__io_putchar+0x20>)
 8001dfe:	f007 fc2b 	bl	8009658 <HAL_UART_Transmit>
    return (ch);
 8001e02:	687b      	ldr	r3, [r7, #4]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	200004a4 	.word	0x200004a4

08001e10 <AcceleroParser>:

void AcceleroParser(){
 8001e10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e14:	b088      	sub	sp, #32
 8001e16:	af04      	add	r7, sp, #16
	static float ZNewBias = 0;
	static uint8_t ClearSpeedCounter = 0;

	float fpDataXYZ[3];

	BSP_ACCELERO_AccGetXYZ_Float(fpDataXYZ);
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f001 f862 	bl	8002ee4 <BSP_ACCELERO_AccGetXYZ_Float>

  //setting bias from the first 4 seconds
  if(acceleroTestCount == 0){
 8001e20:	4bb9      	ldr	r3, [pc, #740]	@ (8002108 <AcceleroParser+0x2f8>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d104      	bne.n	8001e32 <AcceleroParser+0x22>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9); //LED3&4
 8001e28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e2c:	48b7      	ldr	r0, [pc, #732]	@ (800210c <AcceleroParser+0x2fc>)
 8001e2e:	f003 fbe1 	bl	80055f4 <HAL_GPIO_TogglePin>
  }
  if(acceleroTestCount < 32){
 8001e32:	4bb5      	ldr	r3, [pc, #724]	@ (8002108 <AcceleroParser+0x2f8>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b1f      	cmp	r3, #31
 8001e38:	d824      	bhi.n	8001e84 <AcceleroParser+0x74>
	  acceleroTestCount++;
 8001e3a:	4bb3      	ldr	r3, [pc, #716]	@ (8002108 <AcceleroParser+0x2f8>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4bb1      	ldr	r3, [pc, #708]	@ (8002108 <AcceleroParser+0x2f8>)
 8001e44:	701a      	strb	r2, [r3, #0]
	  Xbias += fpDataXYZ[0];
 8001e46:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e4a:	4bb1      	ldr	r3, [pc, #708]	@ (8002110 <AcceleroParser+0x300>)
 8001e4c:	edd3 7a00 	vldr	s15, [r3]
 8001e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e54:	4bae      	ldr	r3, [pc, #696]	@ (8002110 <AcceleroParser+0x300>)
 8001e56:	edc3 7a00 	vstr	s15, [r3]
	  Ybias += fpDataXYZ[1];
 8001e5a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e5e:	4bad      	ldr	r3, [pc, #692]	@ (8002114 <AcceleroParser+0x304>)
 8001e60:	edd3 7a00 	vldr	s15, [r3]
 8001e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e68:	4baa      	ldr	r3, [pc, #680]	@ (8002114 <AcceleroParser+0x304>)
 8001e6a:	edc3 7a00 	vstr	s15, [r3]
	  Zbias += fpDataXYZ[2];
 8001e6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e72:	4ba9      	ldr	r3, [pc, #676]	@ (8002118 <AcceleroParser+0x308>)
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7c:	4ba6      	ldr	r3, [pc, #664]	@ (8002118 <AcceleroParser+0x308>)
 8001e7e:	edc3 7a00 	vstr	s15, [r3]
 8001e82:	e169      	b.n	8002158 <AcceleroParser+0x348>
  }else if(acceleroTestCount == 32){
 8001e84:	4ba0      	ldr	r3, [pc, #640]	@ (8002108 <AcceleroParser+0x2f8>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	d147      	bne.n	8001f1c <AcceleroParser+0x10c>
	  Xbias = Xbias/32.f;
 8001e8c:	4ba0      	ldr	r3, [pc, #640]	@ (8002110 <AcceleroParser+0x300>)
 8001e8e:	ed93 7a00 	vldr	s14, [r3]
 8001e92:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 800211c <AcceleroParser+0x30c>
 8001e96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e9a:	4b9d      	ldr	r3, [pc, #628]	@ (8002110 <AcceleroParser+0x300>)
 8001e9c:	edc3 7a00 	vstr	s15, [r3]
	  Ybias = Ybias/32.f;
 8001ea0:	4b9c      	ldr	r3, [pc, #624]	@ (8002114 <AcceleroParser+0x304>)
 8001ea2:	ed93 7a00 	vldr	s14, [r3]
 8001ea6:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 800211c <AcceleroParser+0x30c>
 8001eaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eae:	4b99      	ldr	r3, [pc, #612]	@ (8002114 <AcceleroParser+0x304>)
 8001eb0:	edc3 7a00 	vstr	s15, [r3]
	  Zbias = Zbias/32.f;
 8001eb4:	4b98      	ldr	r3, [pc, #608]	@ (8002118 <AcceleroParser+0x308>)
 8001eb6:	ed93 7a00 	vldr	s14, [r3]
 8001eba:	eddf 6a98 	vldr	s13, [pc, #608]	@ 800211c <AcceleroParser+0x30c>
 8001ebe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec2:	4b95      	ldr	r3, [pc, #596]	@ (8002118 <AcceleroParser+0x308>)
 8001ec4:	edc3 7a00 	vstr	s15, [r3]
	  printf("bias set: %f, %f, %f \r\n", Xbias, Ybias, Zbias);
 8001ec8:	4b91      	ldr	r3, [pc, #580]	@ (8002110 <AcceleroParser+0x300>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb3b 	bl	8000548 <__aeabi_f2d>
 8001ed2:	4680      	mov	r8, r0
 8001ed4:	4689      	mov	r9, r1
 8001ed6:	4b8f      	ldr	r3, [pc, #572]	@ (8002114 <AcceleroParser+0x304>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fb34 	bl	8000548 <__aeabi_f2d>
 8001ee0:	4604      	mov	r4, r0
 8001ee2:	460d      	mov	r5, r1
 8001ee4:	4b8c      	ldr	r3, [pc, #560]	@ (8002118 <AcceleroParser+0x308>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fb2d 	bl	8000548 <__aeabi_f2d>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ef6:	e9cd 4500 	strd	r4, r5, [sp]
 8001efa:	4642      	mov	r2, r8
 8001efc:	464b      	mov	r3, r9
 8001efe:	4888      	ldr	r0, [pc, #544]	@ (8002120 <AcceleroParser+0x310>)
 8001f00:	f009 fae0 	bl	800b4c4 <iprintf>
	  acceleroTestCount++;
 8001f04:	4b80      	ldr	r3, [pc, #512]	@ (8002108 <AcceleroParser+0x2f8>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	4b7e      	ldr	r3, [pc, #504]	@ (8002108 <AcceleroParser+0x2f8>)
 8001f0e:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8001f10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f14:	487d      	ldr	r0, [pc, #500]	@ (800210c <AcceleroParser+0x2fc>)
 8001f16:	f003 fb6d 	bl	80055f4 <HAL_GPIO_TogglePin>
 8001f1a:	e11d      	b.n	8002158 <AcceleroParser+0x348>
  }else{
	  //printf("acceleration: %f, %f, %f, speed: %f\r\n", fpDataXYZ[0]-Xbias, fpDataXYZ[1]-Ybias, fpDataXYZ[2]-Zbias, speed);
	  if(fpDataXYZ[1]-Ybias > -5.f && fpDataXYZ[1]-Ybias < 5.f){
 8001f1c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f20:	4b7c      	ldr	r3, [pc, #496]	@ (8002114 <AcceleroParser+0x304>)
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f2a:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 8001f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f36:	f340 809f 	ble.w	8002078 <AcceleroParser+0x268>
 8001f3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f3e:	4b75      	ldr	r3, [pc, #468]	@ (8002114 <AcceleroParser+0x304>)
 8001f40:	edd3 7a00 	vldr	s15, [r3]
 8001f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f48:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f54:	f140 8090 	bpl.w	8002078 <AcceleroParser+0x268>
		  if(speed > -10.f && speed < 10.f){ //below 0.15m/s and no acceleration for over 1s -> halts
 8001f58:	4b72      	ldr	r3, [pc, #456]	@ (8002124 <AcceleroParser+0x314>)
 8001f5a:	edd3 7a00 	vldr	s15, [r3]
 8001f5e:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8001f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6a:	dd2d      	ble.n	8001fc8 <AcceleroParser+0x1b8>
 8001f6c:	4b6d      	ldr	r3, [pc, #436]	@ (8002124 <AcceleroParser+0x314>)
 8001f6e:	edd3 7a00 	vldr	s15, [r3]
 8001f72:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	d523      	bpl.n	8001fc8 <AcceleroParser+0x1b8>
			  ClearSpeedCounter++;
 8001f80:	4b69      	ldr	r3, [pc, #420]	@ (8002128 <AcceleroParser+0x318>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	3301      	adds	r3, #1
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	4b67      	ldr	r3, [pc, #412]	@ (8002128 <AcceleroParser+0x318>)
 8001f8a:	701a      	strb	r2, [r3, #0]
			  //Probable Re-calibration
			  XNewBias += fpDataXYZ[0];
 8001f8c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f90:	4b66      	ldr	r3, [pc, #408]	@ (800212c <AcceleroParser+0x31c>)
 8001f92:	edd3 7a00 	vldr	s15, [r3]
 8001f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9a:	4b64      	ldr	r3, [pc, #400]	@ (800212c <AcceleroParser+0x31c>)
 8001f9c:	edc3 7a00 	vstr	s15, [r3]
			  YNewBias += fpDataXYZ[1];
 8001fa0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001fa4:	4b62      	ldr	r3, [pc, #392]	@ (8002130 <AcceleroParser+0x320>)
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fae:	4b60      	ldr	r3, [pc, #384]	@ (8002130 <AcceleroParser+0x320>)
 8001fb0:	edc3 7a00 	vstr	s15, [r3]
			  ZNewBias += fpDataXYZ[2];
 8001fb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fb8:	4b5e      	ldr	r3, [pc, #376]	@ (8002134 <AcceleroParser+0x324>)
 8001fba:	edd3 7a00 	vldr	s15, [r3]
 8001fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc2:	4b5c      	ldr	r3, [pc, #368]	@ (8002134 <AcceleroParser+0x324>)
 8001fc4:	edc3 7a00 	vstr	s15, [r3]
		  }
		  if(ClearSpeedCounter == 8){
 8001fc8:	4b57      	ldr	r3, [pc, #348]	@ (8002128 <AcceleroParser+0x318>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	f040 80c2 	bne.w	8002156 <AcceleroParser+0x346>
			  ClearSpeedCounter = 0;
 8001fd2:	4b55      	ldr	r3, [pc, #340]	@ (8002128 <AcceleroParser+0x318>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
			  Xbias = XNewBias / 8.f;
 8001fd8:	4b54      	ldr	r3, [pc, #336]	@ (800212c <AcceleroParser+0x31c>)
 8001fda:	ed93 7a00 	vldr	s14, [r3]
 8001fde:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8001fe2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fe6:	4b4a      	ldr	r3, [pc, #296]	@ (8002110 <AcceleroParser+0x300>)
 8001fe8:	edc3 7a00 	vstr	s15, [r3]
			  Ybias = YNewBias / 8.f;
 8001fec:	4b50      	ldr	r3, [pc, #320]	@ (8002130 <AcceleroParser+0x320>)
 8001fee:	ed93 7a00 	vldr	s14, [r3]
 8001ff2:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8001ff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ffa:	4b46      	ldr	r3, [pc, #280]	@ (8002114 <AcceleroParser+0x304>)
 8001ffc:	edc3 7a00 	vstr	s15, [r3]
			  Zbias = ZNewBias / 8.f;
 8002000:	4b4c      	ldr	r3, [pc, #304]	@ (8002134 <AcceleroParser+0x324>)
 8002002:	ed93 7a00 	vldr	s14, [r3]
 8002006:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800200a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800200e:	4b42      	ldr	r3, [pc, #264]	@ (8002118 <AcceleroParser+0x308>)
 8002010:	edc3 7a00 	vstr	s15, [r3]
			  ClearSpeedCounter = 0;
 8002014:	4b44      	ldr	r3, [pc, #272]	@ (8002128 <AcceleroParser+0x318>)
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
			  XNewBias = 0;
 800201a:	4b44      	ldr	r3, [pc, #272]	@ (800212c <AcceleroParser+0x31c>)
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
			  YNewBias = 0;
 8002022:	4b43      	ldr	r3, [pc, #268]	@ (8002130 <AcceleroParser+0x320>)
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
			  ZNewBias = 0;
 800202a:	4b42      	ldr	r3, [pc, #264]	@ (8002134 <AcceleroParser+0x324>)
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
			  printf("bias set: %f, %f, %f \r\n", Xbias, Ybias, Zbias);
 8002032:	4b37      	ldr	r3, [pc, #220]	@ (8002110 <AcceleroParser+0x300>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fa86 	bl	8000548 <__aeabi_f2d>
 800203c:	4680      	mov	r8, r0
 800203e:	4689      	mov	r9, r1
 8002040:	4b34      	ldr	r3, [pc, #208]	@ (8002114 <AcceleroParser+0x304>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fa7f 	bl	8000548 <__aeabi_f2d>
 800204a:	4604      	mov	r4, r0
 800204c:	460d      	mov	r5, r1
 800204e:	4b32      	ldr	r3, [pc, #200]	@ (8002118 <AcceleroParser+0x308>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa78 	bl	8000548 <__aeabi_f2d>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002060:	e9cd 4500 	strd	r4, r5, [sp]
 8002064:	4642      	mov	r2, r8
 8002066:	464b      	mov	r3, r9
 8002068:	482d      	ldr	r0, [pc, #180]	@ (8002120 <AcceleroParser+0x310>)
 800206a:	f009 fa2b 	bl	800b4c4 <iprintf>
			  speed = 0;
 800206e:	4b2d      	ldr	r3, [pc, #180]	@ (8002124 <AcceleroParser+0x314>)
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	e06f      	b.n	8002158 <AcceleroParser+0x348>
		  }
		  return;
	  }else{
		  if(ClearSpeedCounter != 0){
 8002078:	4b2b      	ldr	r3, [pc, #172]	@ (8002128 <AcceleroParser+0x318>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00e      	beq.n	800209e <AcceleroParser+0x28e>
			  ClearSpeedCounter = 0;
 8002080:	4b29      	ldr	r3, [pc, #164]	@ (8002128 <AcceleroParser+0x318>)
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
			  XNewBias = 0;
 8002086:	4b29      	ldr	r3, [pc, #164]	@ (800212c <AcceleroParser+0x31c>)
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
			  YNewBias = 0;
 800208e:	4b28      	ldr	r3, [pc, #160]	@ (8002130 <AcceleroParser+0x320>)
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
			  ZNewBias = 0;
 8002096:	4b27      	ldr	r3, [pc, #156]	@ (8002134 <AcceleroParser+0x324>)
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
		  }
		  speed += (fpDataXYZ[1]-Ybias)/8.f;
 800209e:	ed97 7a02 	vldr	s14, [r7, #8]
 80020a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002114 <AcceleroParser+0x304>)
 80020a4:	edd3 7a00 	vldr	s15, [r3]
 80020a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ac:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80020b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80020b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002124 <AcceleroParser+0x314>)
 80020b6:	edd3 7a00 	vldr	s15, [r3]
 80020ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020be:	4b19      	ldr	r3, [pc, #100]	@ (8002124 <AcceleroParser+0x314>)
 80020c0:	edc3 7a00 	vstr	s15, [r3]
	  }

	  if((speed > 10.f || speed < -10.f)){
 80020c4:	4b17      	ldr	r3, [pc, #92]	@ (8002124 <AcceleroParser+0x314>)
 80020c6:	edd3 7a00 	vldr	s15, [r3]
 80020ca:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80020ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d6:	dc09      	bgt.n	80020ec <AcceleroParser+0x2dc>
 80020d8:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <AcceleroParser+0x314>)
 80020da:	edd3 7a00 	vldr	s15, [r3]
 80020de:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 80020e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ea:	d527      	bpl.n	800213c <AcceleroParser+0x32c>
		  if(motion_state == 0){
 80020ec:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <AcceleroParser+0x328>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d131      	bne.n	8002158 <AcceleroParser+0x348>
			  motion_state = 1;
 80020f4:	4b10      	ldr	r3, [pc, #64]	@ (8002138 <AcceleroParser+0x328>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80020fa:	2110      	movs	r1, #16
 80020fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002100:	f003 fa78 	bl	80055f4 <HAL_GPIO_TogglePin>
		  if(motion_state == 0){
 8002104:	e028      	b.n	8002158 <AcceleroParser+0x348>
 8002106:	bf00      	nop
 8002108:	20000aad 	.word	0x20000aad
 800210c:	48000800 	.word	0x48000800
 8002110:	20000ab0 	.word	0x20000ab0
 8002114:	20000ab4 	.word	0x20000ab4
 8002118:	20000ab8 	.word	0x20000ab8
 800211c:	42000000 	.word	0x42000000
 8002120:	0800eeb8 	.word	0x0800eeb8
 8002124:	20000aa8 	.word	0x20000aa8
 8002128:	20000abc 	.word	0x20000abc
 800212c:	20000ac0 	.word	0x20000ac0
 8002130:	20000ac4 	.word	0x20000ac4
 8002134:	20000ac8 	.word	0x20000ac8
 8002138:	20000aac 	.word	0x20000aac
		  }
	  }else if(motion_state == 1){
 800213c:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <AcceleroParser+0x350>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d109      	bne.n	8002158 <AcceleroParser+0x348>
		  motion_state = 0;
 8002144:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <AcceleroParser+0x350>)
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800214a:	2110      	movs	r1, #16
 800214c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002150:	f003 fa50 	bl	80055f4 <HAL_GPIO_TogglePin>
 8002154:	e000      	b.n	8002158 <AcceleroParser+0x348>
		  return;
 8002156:	bf00      	nop
	   * BSP_ACCELERO_SetReadMode(ACCELERO_READ_INT);
	   * before a normal BSP_ACCELERO_AccGetXYZ(int16_t*) is called.
	   *
	   * */
  //	  if(fpDataXYZ[1] > -20.f && fpDataXYZ[1] < 20.f) fpDataXYZ[1] = 0.f; // threshold
}
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002160:	20000aac 	.word	0x20000aac

08002164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002168:	b672      	cpsid	i
}
 800216a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("error handler called \r\n");
 800216c:	4802      	ldr	r0, [pc, #8]	@ (8002178 <Error_Handler+0x14>)
 800216e:	f009 fa11 	bl	800b594 <puts>
  while (1)
 8002172:	bf00      	nop
 8002174:	e7fd      	b.n	8002172 <Error_Handler+0xe>
 8002176:	bf00      	nop
 8002178:	0800eed0 	.word	0x0800eed0

0800217c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002182:	4b0f      	ldr	r3, [pc, #60]	@ (80021c0 <HAL_MspInit+0x44>)
 8002184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002186:	4a0e      	ldr	r2, [pc, #56]	@ (80021c0 <HAL_MspInit+0x44>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6613      	str	r3, [r2, #96]	@ 0x60
 800218e:	4b0c      	ldr	r3, [pc, #48]	@ (80021c0 <HAL_MspInit+0x44>)
 8002190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <HAL_MspInit+0x44>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219e:	4a08      	ldr	r2, [pc, #32]	@ (80021c0 <HAL_MspInit+0x44>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80021a6:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <HAL_MspInit+0x44>)
 80021a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000

080021c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	@ 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a19      	ldr	r2, [pc, #100]	@ (8002248 <HAL_ADC_MspInit+0x84>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d12b      	bne.n	800223e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80021e6:	4b19      	ldr	r3, [pc, #100]	@ (800224c <HAL_ADC_MspInit+0x88>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ea:	4a18      	ldr	r2, [pc, #96]	@ (800224c <HAL_ADC_MspInit+0x88>)
 80021ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021f2:	4b16      	ldr	r3, [pc, #88]	@ (800224c <HAL_ADC_MspInit+0x88>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fe:	4b13      	ldr	r3, [pc, #76]	@ (800224c <HAL_ADC_MspInit+0x88>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002202:	4a12      	ldr	r2, [pc, #72]	@ (800224c <HAL_ADC_MspInit+0x88>)
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800220a:	4b10      	ldr	r3, [pc, #64]	@ (800224c <HAL_ADC_MspInit+0x88>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002216:	233f      	movs	r3, #63	@ 0x3f
 8002218:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800221a:	230b      	movs	r3, #11
 800221c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002222:	f107 0314 	add.w	r3, r7, #20
 8002226:	4619      	mov	r1, r3
 8002228:	4809      	ldr	r0, [pc, #36]	@ (8002250 <HAL_ADC_MspInit+0x8c>)
 800222a:	f002 ff2d 	bl	8005088 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	2012      	movs	r0, #18
 8002234:	f002 fde5 	bl	8004e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002238:	2012      	movs	r0, #18
 800223a:	f002 fdfe 	bl	8004e3a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800223e:	bf00      	nop
 8002240:	3728      	adds	r7, #40	@ 0x28
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	50040000 	.word	0x50040000
 800224c:	40021000 	.word	0x40021000
 8002250:	48000800 	.word	0x48000800

08002254 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b0ac      	sub	sp, #176	@ 0xb0
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	2288      	movs	r2, #136	@ 0x88
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f009 fa8d 	bl	800b794 <memset>
  if(DFSDM1_Init == 0)
 800227a:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d142      	bne.n	8002308 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002282:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002286:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002288:	2300      	movs	r3, #0
 800228a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	4618      	mov	r0, r3
 8002294:	f005 f8a4 	bl	80073e0 <HAL_RCCEx_PeriphCLKConfig>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800229e:	f7ff ff61 	bl	8002164 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80022a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002314 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80022a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002314 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80022a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80022ae:	4b19      	ldr	r3, [pc, #100]	@ (8002314 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80022b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ba:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80022bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022be:	4a15      	ldr	r2, [pc, #84]	@ (8002314 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80022c0:	f043 0310 	orr.w	r3, r3, #16
 80022c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022c6:	4b13      	ldr	r3, [pc, #76]	@ (8002314 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80022d2:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80022d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80022ec:	2306      	movs	r3, #6
 80022ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022f2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022f6:	4619      	mov	r1, r3
 80022f8:	4807      	ldr	r0, [pc, #28]	@ (8002318 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80022fa:	f002 fec5 	bl	8005088 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80022fe:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	3301      	adds	r3, #1
 8002304:	4a02      	ldr	r2, [pc, #8]	@ (8002310 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002306:	6013      	str	r3, [r2, #0]
  }

}
 8002308:	bf00      	nop
 800230a:	37b0      	adds	r7, #176	@ 0xb0
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000acc 	.word	0x20000acc
 8002314:	40021000 	.word	0x40021000
 8002318:	48001000 	.word	0x48001000

0800231c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b0ac      	sub	sp, #176	@ 0xb0
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	2288      	movs	r2, #136	@ 0x88
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f009 fa29 	bl	800b794 <memset>
  if(hi2c->Instance==I2C2)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a21      	ldr	r2, [pc, #132]	@ (80023cc <HAL_I2C_MspInit+0xb0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d13b      	bne.n	80023c4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800234c:	2380      	movs	r3, #128	@ 0x80
 800234e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002350:	2300      	movs	r3, #0
 8002352:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	4618      	mov	r0, r3
 800235a:	f005 f841 	bl	80073e0 <HAL_RCCEx_PeriphCLKConfig>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002364:	f7ff fefe 	bl	8002164 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002368:	4b19      	ldr	r3, [pc, #100]	@ (80023d0 <HAL_I2C_MspInit+0xb4>)
 800236a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236c:	4a18      	ldr	r2, [pc, #96]	@ (80023d0 <HAL_I2C_MspInit+0xb4>)
 800236e:	f043 0302 	orr.w	r3, r3, #2
 8002372:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002374:	4b16      	ldr	r3, [pc, #88]	@ (80023d0 <HAL_I2C_MspInit+0xb4>)
 8002376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002380:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002384:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002388:	2312      	movs	r3, #18
 800238a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800238e:	2301      	movs	r3, #1
 8002390:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002394:	2303      	movs	r3, #3
 8002396:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800239a:	2304      	movs	r3, #4
 800239c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80023a4:	4619      	mov	r1, r3
 80023a6:	480b      	ldr	r0, [pc, #44]	@ (80023d4 <HAL_I2C_MspInit+0xb8>)
 80023a8:	f002 fe6e 	bl	8005088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80023ac:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <HAL_I2C_MspInit+0xb4>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b0:	4a07      	ldr	r2, [pc, #28]	@ (80023d0 <HAL_I2C_MspInit+0xb4>)
 80023b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80023b8:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <HAL_I2C_MspInit+0xb4>)
 80023ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80023c4:	bf00      	nop
 80023c6:	37b0      	adds	r7, #176	@ 0xb0
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40005800 	.word	0x40005800
 80023d0:	40021000 	.word	0x40021000
 80023d4:	48000400 	.word	0x48000400

080023d8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002414 <HAL_I2C_MspDeInit+0x3c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10f      	bne.n	800240a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80023ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <HAL_I2C_MspDeInit+0x40>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002418 <HAL_I2C_MspDeInit+0x40>)
 80023f0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80023f4:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80023f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80023fa:	4808      	ldr	r0, [pc, #32]	@ (800241c <HAL_I2C_MspDeInit+0x44>)
 80023fc:	f002 ffee 	bl	80053dc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002400:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002404:	4805      	ldr	r0, [pc, #20]	@ (800241c <HAL_I2C_MspDeInit+0x44>)
 8002406:	f002 ffe9 	bl	80053dc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40005800 	.word	0x40005800
 8002418:	40021000 	.word	0x40021000
 800241c:	48000400 	.word	0x48000400

08002420 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	@ 0x28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a17      	ldr	r2, [pc, #92]	@ (800249c <HAL_QSPI_MspInit+0x7c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d128      	bne.n	8002494 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002442:	4b17      	ldr	r3, [pc, #92]	@ (80024a0 <HAL_QSPI_MspInit+0x80>)
 8002444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002446:	4a16      	ldr	r2, [pc, #88]	@ (80024a0 <HAL_QSPI_MspInit+0x80>)
 8002448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800244c:	6513      	str	r3, [r2, #80]	@ 0x50
 800244e:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <HAL_QSPI_MspInit+0x80>)
 8002450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800245a:	4b11      	ldr	r3, [pc, #68]	@ (80024a0 <HAL_QSPI_MspInit+0x80>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245e:	4a10      	ldr	r2, [pc, #64]	@ (80024a0 <HAL_QSPI_MspInit+0x80>)
 8002460:	f043 0310 	orr.w	r3, r3, #16
 8002464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002466:	4b0e      	ldr	r3, [pc, #56]	@ (80024a0 <HAL_QSPI_MspInit+0x80>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002472:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002476:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002484:	230a      	movs	r3, #10
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	4619      	mov	r1, r3
 800248e:	4805      	ldr	r0, [pc, #20]	@ (80024a4 <HAL_QSPI_MspInit+0x84>)
 8002490:	f002 fdfa 	bl	8005088 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002494:	bf00      	nop
 8002496:	3728      	adds	r7, #40	@ 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	a0001000 	.word	0xa0001000
 80024a0:	40021000 	.word	0x40021000
 80024a4:	48001000 	.word	0x48001000

080024a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	@ 0x28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a17      	ldr	r2, [pc, #92]	@ (8002524 <HAL_SPI_MspInit+0x7c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d128      	bne.n	800251c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80024ca:	4b17      	ldr	r3, [pc, #92]	@ (8002528 <HAL_SPI_MspInit+0x80>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ce:	4a16      	ldr	r2, [pc, #88]	@ (8002528 <HAL_SPI_MspInit+0x80>)
 80024d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80024d6:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <HAL_SPI_MspInit+0x80>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e2:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <HAL_SPI_MspInit+0x80>)
 80024e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e6:	4a10      	ldr	r2, [pc, #64]	@ (8002528 <HAL_SPI_MspInit+0x80>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <HAL_SPI_MspInit+0x80>)
 80024f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80024fa:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80024fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002500:	2302      	movs	r3, #2
 8002502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002508:	2303      	movs	r3, #3
 800250a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800250c:	2306      	movs	r3, #6
 800250e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	4619      	mov	r1, r3
 8002516:	4805      	ldr	r0, [pc, #20]	@ (800252c <HAL_SPI_MspInit+0x84>)
 8002518:	f002 fdb6 	bl	8005088 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800251c:	bf00      	nop
 800251e:	3728      	adds	r7, #40	@ 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40003c00 	.word	0x40003c00
 8002528:	40021000 	.word	0x40021000
 800252c:	48000800 	.word	0x48000800

08002530 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	@ 0x30
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 031c 	add.w	r3, r7, #28
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002550:	d131      	bne.n	80025b6 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002552:	4b34      	ldr	r3, [pc, #208]	@ (8002624 <HAL_TIM_Base_MspInit+0xf4>)
 8002554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002556:	4a33      	ldr	r2, [pc, #204]	@ (8002624 <HAL_TIM_Base_MspInit+0xf4>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6593      	str	r3, [r2, #88]	@ 0x58
 800255e:	4b31      	ldr	r3, [pc, #196]	@ (8002624 <HAL_TIM_Base_MspInit+0xf4>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256a:	4b2e      	ldr	r3, [pc, #184]	@ (8002624 <HAL_TIM_Base_MspInit+0xf4>)
 800256c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800256e:	4a2d      	ldr	r2, [pc, #180]	@ (8002624 <HAL_TIM_Base_MspInit+0xf4>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002576:	4b2b      	ldr	r3, [pc, #172]	@ (8002624 <HAL_TIM_Base_MspInit+0xf4>)
 8002578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 8002582:	2308      	movs	r3, #8
 8002584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	2300      	movs	r3, #0
 8002590:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002592:	2301      	movs	r3, #1
 8002594:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8002596:	f107 031c 	add.w	r3, r7, #28
 800259a:	4619      	mov	r1, r3
 800259c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025a0:	f002 fd72 	bl	8005088 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025a4:	2200      	movs	r2, #0
 80025a6:	2100      	movs	r1, #0
 80025a8:	201c      	movs	r0, #28
 80025aa:	f002 fc2a 	bl	8004e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025ae:	201c      	movs	r0, #28
 80025b0:	f002 fc43 	bl	8004e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80025b4:	e032      	b.n	800261c <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM3)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002628 <HAL_TIM_Base_MspInit+0xf8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d114      	bne.n	80025ea <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025c0:	4b18      	ldr	r3, [pc, #96]	@ (8002624 <HAL_TIM_Base_MspInit+0xf4>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c4:	4a17      	ldr	r2, [pc, #92]	@ (8002624 <HAL_TIM_Base_MspInit+0xf4>)
 80025c6:	f043 0302 	orr.w	r3, r3, #2
 80025ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80025cc:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <HAL_TIM_Base_MspInit+0xf4>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025d8:	2200      	movs	r2, #0
 80025da:	2100      	movs	r1, #0
 80025dc:	201d      	movs	r0, #29
 80025de:	f002 fc10 	bl	8004e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025e2:	201d      	movs	r0, #29
 80025e4:	f002 fc29 	bl	8004e3a <HAL_NVIC_EnableIRQ>
}
 80025e8:	e018      	b.n	800261c <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM5)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a0f      	ldr	r2, [pc, #60]	@ (800262c <HAL_TIM_Base_MspInit+0xfc>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d113      	bne.n	800261c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <HAL_TIM_Base_MspInit+0xf4>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002624 <HAL_TIM_Base_MspInit+0xf4>)
 80025fa:	f043 0308 	orr.w	r3, r3, #8
 80025fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002600:	4b08      	ldr	r3, [pc, #32]	@ (8002624 <HAL_TIM_Base_MspInit+0xf4>)
 8002602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800260c:	2200      	movs	r2, #0
 800260e:	2100      	movs	r1, #0
 8002610:	2032      	movs	r0, #50	@ 0x32
 8002612:	f002 fbf6 	bl	8004e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002616:	2032      	movs	r0, #50	@ 0x32
 8002618:	f002 fc0f 	bl	8004e3a <HAL_NVIC_EnableIRQ>
}
 800261c:	bf00      	nop
 800261e:	3730      	adds	r7, #48	@ 0x30
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000
 8002628:	40000400 	.word	0x40000400
 800262c:	40000c00 	.word	0x40000c00

08002630 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 030c 	add.w	r3, r7, #12
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a11      	ldr	r2, [pc, #68]	@ (8002694 <HAL_TIM_MspPostInit+0x64>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d11b      	bne.n	800268a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002652:	4b11      	ldr	r3, [pc, #68]	@ (8002698 <HAL_TIM_MspPostInit+0x68>)
 8002654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002656:	4a10      	ldr	r2, [pc, #64]	@ (8002698 <HAL_TIM_MspPostInit+0x68>)
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800265e:	4b0e      	ldr	r3, [pc, #56]	@ (8002698 <HAL_TIM_MspPostInit+0x68>)
 8002660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 800266a:	2312      	movs	r3, #18
 800266c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266e:	2302      	movs	r3, #2
 8002670:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800267a:	2302      	movs	r3, #2
 800267c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800267e:	f107 030c 	add.w	r3, r7, #12
 8002682:	4619      	mov	r1, r3
 8002684:	4805      	ldr	r0, [pc, #20]	@ (800269c <HAL_TIM_MspPostInit+0x6c>)
 8002686:	f002 fcff 	bl	8005088 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800268a:	bf00      	nop
 800268c:	3720      	adds	r7, #32
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40000400 	.word	0x40000400
 8002698:	40021000 	.word	0x40021000
 800269c:	48000400 	.word	0x48000400

080026a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b0ae      	sub	sp, #184	@ 0xb8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026b8:	f107 031c 	add.w	r3, r7, #28
 80026bc:	2288      	movs	r2, #136	@ 0x88
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f009 f867 	bl	800b794 <memset>
  if(huart->Instance==USART1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a42      	ldr	r2, [pc, #264]	@ (80027d4 <HAL_UART_MspInit+0x134>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d13b      	bne.n	8002748 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026d0:	2301      	movs	r3, #1
 80026d2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026d4:	2300      	movs	r3, #0
 80026d6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026d8:	f107 031c 	add.w	r3, r7, #28
 80026dc:	4618      	mov	r0, r3
 80026de:	f004 fe7f 	bl	80073e0 <HAL_RCCEx_PeriphCLKConfig>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026e8:	f7ff fd3c 	bl	8002164 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ec:	4b3a      	ldr	r3, [pc, #232]	@ (80027d8 <HAL_UART_MspInit+0x138>)
 80026ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f0:	4a39      	ldr	r2, [pc, #228]	@ (80027d8 <HAL_UART_MspInit+0x138>)
 80026f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80026f8:	4b37      	ldr	r3, [pc, #220]	@ (80027d8 <HAL_UART_MspInit+0x138>)
 80026fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002704:	4b34      	ldr	r3, [pc, #208]	@ (80027d8 <HAL_UART_MspInit+0x138>)
 8002706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002708:	4a33      	ldr	r2, [pc, #204]	@ (80027d8 <HAL_UART_MspInit+0x138>)
 800270a:	f043 0302 	orr.w	r3, r3, #2
 800270e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002710:	4b31      	ldr	r3, [pc, #196]	@ (80027d8 <HAL_UART_MspInit+0x138>)
 8002712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800271c:	23c0      	movs	r3, #192	@ 0xc0
 800271e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	2302      	movs	r3, #2
 8002724:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272e:	2303      	movs	r3, #3
 8002730:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002734:	2307      	movs	r3, #7
 8002736:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800273e:	4619      	mov	r1, r3
 8002740:	4826      	ldr	r0, [pc, #152]	@ (80027dc <HAL_UART_MspInit+0x13c>)
 8002742:	f002 fca1 	bl	8005088 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002746:	e040      	b.n	80027ca <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a24      	ldr	r2, [pc, #144]	@ (80027e0 <HAL_UART_MspInit+0x140>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d13b      	bne.n	80027ca <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002752:	2304      	movs	r3, #4
 8002754:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002756:	2300      	movs	r3, #0
 8002758:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800275a:	f107 031c 	add.w	r3, r7, #28
 800275e:	4618      	mov	r0, r3
 8002760:	f004 fe3e 	bl	80073e0 <HAL_RCCEx_PeriphCLKConfig>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800276a:	f7ff fcfb 	bl	8002164 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800276e:	4b1a      	ldr	r3, [pc, #104]	@ (80027d8 <HAL_UART_MspInit+0x138>)
 8002770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002772:	4a19      	ldr	r2, [pc, #100]	@ (80027d8 <HAL_UART_MspInit+0x138>)
 8002774:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002778:	6593      	str	r3, [r2, #88]	@ 0x58
 800277a:	4b17      	ldr	r3, [pc, #92]	@ (80027d8 <HAL_UART_MspInit+0x138>)
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002786:	4b14      	ldr	r3, [pc, #80]	@ (80027d8 <HAL_UART_MspInit+0x138>)
 8002788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278a:	4a13      	ldr	r2, [pc, #76]	@ (80027d8 <HAL_UART_MspInit+0x138>)
 800278c:	f043 0308 	orr.w	r3, r3, #8
 8002790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002792:	4b11      	ldr	r3, [pc, #68]	@ (80027d8 <HAL_UART_MspInit+0x138>)
 8002794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800279e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b2:	2303      	movs	r3, #3
 80027b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027b8:	2307      	movs	r3, #7
 80027ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027be:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80027c2:	4619      	mov	r1, r3
 80027c4:	4807      	ldr	r0, [pc, #28]	@ (80027e4 <HAL_UART_MspInit+0x144>)
 80027c6:	f002 fc5f 	bl	8005088 <HAL_GPIO_Init>
}
 80027ca:	bf00      	nop
 80027cc:	37b8      	adds	r7, #184	@ 0xb8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40013800 	.word	0x40013800
 80027d8:	40021000 	.word	0x40021000
 80027dc:	48000400 	.word	0x48000400
 80027e0:	40004800 	.word	0x40004800
 80027e4:	48000c00 	.word	0x48000c00

080027e8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	@ 0x28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002808:	d154      	bne.n	80028b4 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280a:	4b2c      	ldr	r3, [pc, #176]	@ (80028bc <HAL_PCD_MspInit+0xd4>)
 800280c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280e:	4a2b      	ldr	r2, [pc, #172]	@ (80028bc <HAL_PCD_MspInit+0xd4>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002816:	4b29      	ldr	r3, [pc, #164]	@ (80028bc <HAL_PCD_MspInit+0xd4>)
 8002818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002822:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002828:	2300      	movs	r3, #0
 800282a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	4619      	mov	r1, r3
 8002836:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800283a:	f002 fc25 	bl	8005088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800283e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284c:	2303      	movs	r3, #3
 800284e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002850:	230a      	movs	r3, #10
 8002852:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	4619      	mov	r1, r3
 800285a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800285e:	f002 fc13 	bl	8005088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002862:	4b16      	ldr	r3, [pc, #88]	@ (80028bc <HAL_PCD_MspInit+0xd4>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002866:	4a15      	ldr	r2, [pc, #84]	@ (80028bc <HAL_PCD_MspInit+0xd4>)
 8002868:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800286c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800286e:	4b13      	ldr	r3, [pc, #76]	@ (80028bc <HAL_PCD_MspInit+0xd4>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002872:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287a:	4b10      	ldr	r3, [pc, #64]	@ (80028bc <HAL_PCD_MspInit+0xd4>)
 800287c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d114      	bne.n	80028b0 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002886:	4b0d      	ldr	r3, [pc, #52]	@ (80028bc <HAL_PCD_MspInit+0xd4>)
 8002888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288a:	4a0c      	ldr	r2, [pc, #48]	@ (80028bc <HAL_PCD_MspInit+0xd4>)
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002890:	6593      	str	r3, [r2, #88]	@ 0x58
 8002892:	4b0a      	ldr	r3, [pc, #40]	@ (80028bc <HAL_PCD_MspInit+0xd4>)
 8002894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800289e:	f003 fed3 	bl	8006648 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a2:	4b06      	ldr	r3, [pc, #24]	@ (80028bc <HAL_PCD_MspInit+0xd4>)
 80028a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a6:	4a05      	ldr	r2, [pc, #20]	@ (80028bc <HAL_PCD_MspInit+0xd4>)
 80028a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ac:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80028ae:	e001      	b.n	80028b4 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80028b0:	f003 feca 	bl	8006648 <HAL_PWREx_EnableVddUSB>
}
 80028b4:	bf00      	nop
 80028b6:	3728      	adds	r7, #40	@ 0x28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000

080028c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028c4:	bf00      	nop
 80028c6:	e7fd      	b.n	80028c4 <NMI_Handler+0x4>

080028c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028cc:	bf00      	nop
 80028ce:	e7fd      	b.n	80028cc <HardFault_Handler+0x4>

080028d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d4:	bf00      	nop
 80028d6:	e7fd      	b.n	80028d4 <MemManage_Handler+0x4>

080028d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <BusFault_Handler+0x4>

080028e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e4:	bf00      	nop
 80028e6:	e7fd      	b.n	80028e4 <UsageFault_Handler+0x4>

080028e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002916:	f000 fd25 	bl	8003364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002924:	4802      	ldr	r0, [pc, #8]	@ (8002930 <ADC1_2_IRQHandler+0x10>)
 8002926:	f001 f9e3 	bl	8003cf0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000228 	.word	0x20000228

08002934 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002938:	2020      	movs	r0, #32
 800293a:	f002 fe75 	bl	8005628 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800293e:	2040      	movs	r0, #64	@ 0x40
 8002940:	f002 fe72 	bl	8005628 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002944:	2080      	movs	r0, #128	@ 0x80
 8002946:	f002 fe6f 	bl	8005628 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800294a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800294e:	f002 fe6b 	bl	8005628 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800295c:	4802      	ldr	r0, [pc, #8]	@ (8002968 <TIM2_IRQHandler+0x10>)
 800295e:	f005 fe3d 	bl	80085dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200003c0 	.word	0x200003c0

0800296c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002970:	4802      	ldr	r0, [pc, #8]	@ (800297c <TIM3_IRQHandler+0x10>)
 8002972:	f005 fe33 	bl	80085dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	2000040c 	.word	0x2000040c

08002980 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002984:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002988:	f002 fe4e 	bl	8005628 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800298c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002990:	f002 fe4a 	bl	8005628 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002994:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002998:	f002 fe46 	bl	8005628 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800299c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80029a0:	f002 fe42 	bl	8005628 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80029a4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80029a8:	f002 fe3e 	bl	8005628 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80029b4:	4802      	ldr	r0, [pc, #8]	@ (80029c0 <TIM5_IRQHandler+0x10>)
 80029b6:	f005 fe11 	bl	80085dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000458 	.word	0x20000458

080029c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return 1;
 80029c8:	2301      	movs	r3, #1
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <_kill>:

int _kill(int pid, int sig)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029de:	f008 ff2b 	bl	800b838 <__errno>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2216      	movs	r2, #22
 80029e6:	601a      	str	r2, [r3, #0]
  return -1;
 80029e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <_exit>:

void _exit (int status)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ffe7 	bl	80029d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a06:	bf00      	nop
 8002a08:	e7fd      	b.n	8002a06 <_exit+0x12>

08002a0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b086      	sub	sp, #24
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	e00a      	b.n	8002a32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a1c:	f3af 8000 	nop.w
 8002a20:	4601      	mov	r1, r0
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	60ba      	str	r2, [r7, #8]
 8002a28:	b2ca      	uxtb	r2, r1
 8002a2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	dbf0      	blt.n	8002a1c <_read+0x12>
  }

  return len;
 8002a3a:	687b      	ldr	r3, [r7, #4]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	e009      	b.n	8002a6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	60ba      	str	r2, [r7, #8]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff f9c4 	bl	8001dec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	3301      	adds	r3, #1
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	dbf1      	blt.n	8002a56 <_write+0x12>
  }
  return len;
 8002a72:	687b      	ldr	r3, [r7, #4]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <_close>:

int _close(int file)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002aa4:	605a      	str	r2, [r3, #4]
  return 0;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <_isatty>:

int _isatty(int file)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002abc:	2301      	movs	r3, #1
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b085      	sub	sp, #20
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aec:	4a14      	ldr	r2, [pc, #80]	@ (8002b40 <_sbrk+0x5c>)
 8002aee:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <_sbrk+0x60>)
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002af8:	4b13      	ldr	r3, [pc, #76]	@ (8002b48 <_sbrk+0x64>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d102      	bne.n	8002b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b00:	4b11      	ldr	r3, [pc, #68]	@ (8002b48 <_sbrk+0x64>)
 8002b02:	4a12      	ldr	r2, [pc, #72]	@ (8002b4c <_sbrk+0x68>)
 8002b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b06:	4b10      	ldr	r3, [pc, #64]	@ (8002b48 <_sbrk+0x64>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d207      	bcs.n	8002b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b14:	f008 fe90 	bl	800b838 <__errno>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	220c      	movs	r2, #12
 8002b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b22:	e009      	b.n	8002b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b24:	4b08      	ldr	r3, [pc, #32]	@ (8002b48 <_sbrk+0x64>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b2a:	4b07      	ldr	r3, [pc, #28]	@ (8002b48 <_sbrk+0x64>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4413      	add	r3, r2
 8002b32:	4a05      	ldr	r2, [pc, #20]	@ (8002b48 <_sbrk+0x64>)
 8002b34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b36:	68fb      	ldr	r3, [r7, #12]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20018000 	.word	0x20018000
 8002b44:	00000400 	.word	0x00000400
 8002b48:	20000ad0 	.word	0x20000ad0
 8002b4c:	20000ca0 	.word	0x20000ca0

08002b50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b54:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <SystemInit+0x20>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5a:	4a05      	ldr	r2, [pc, #20]	@ (8002b70 <SystemInit+0x20>)
 8002b5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b78:	f7ff ffea 	bl	8002b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b7c:	480c      	ldr	r0, [pc, #48]	@ (8002bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b7e:	490d      	ldr	r1, [pc, #52]	@ (8002bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b80:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb8 <LoopForever+0xe>)
  movs r3, #0
 8002b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b84:	e002      	b.n	8002b8c <LoopCopyDataInit>

08002b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b8a:	3304      	adds	r3, #4

08002b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b90:	d3f9      	bcc.n	8002b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b92:	4a0a      	ldr	r2, [pc, #40]	@ (8002bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b94:	4c0a      	ldr	r4, [pc, #40]	@ (8002bc0 <LoopForever+0x16>)
  movs r3, #0
 8002b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b98:	e001      	b.n	8002b9e <LoopFillZerobss>

08002b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b9c:	3204      	adds	r2, #4

08002b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ba0:	d3fb      	bcc.n	8002b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ba2:	f008 fe4f 	bl	800b844 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ba6:	f7fe fa1d 	bl	8000fe4 <main>

08002baa <LoopForever>:

LoopForever:
    b LoopForever
 8002baa:	e7fe      	b.n	8002baa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002bac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bb4:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002bb8:	0800f370 	.word	0x0800f370
  ldr r2, =_sbss
 8002bbc:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002bc0:	20000ca0 	.word	0x20000ca0

08002bc4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bc4:	e7fe      	b.n	8002bc4 <ADC3_IRQHandler>
	...

08002bc8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	@ 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002bd0:	4b27      	ldr	r3, [pc, #156]	@ (8002c70 <I2Cx_MspInit+0xa8>)
 8002bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd4:	4a26      	ldr	r2, [pc, #152]	@ (8002c70 <I2Cx_MspInit+0xa8>)
 8002bd6:	f043 0302 	orr.w	r3, r3, #2
 8002bda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bdc:	4b24      	ldr	r3, [pc, #144]	@ (8002c70 <I2Cx_MspInit+0xa8>)
 8002bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002be8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002bec:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002bee:	2312      	movs	r3, #18
 8002bf0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002bfe:	f107 0314 	add.w	r3, r7, #20
 8002c02:	4619      	mov	r1, r3
 8002c04:	481b      	ldr	r0, [pc, #108]	@ (8002c74 <I2Cx_MspInit+0xac>)
 8002c06:	f002 fa3f 	bl	8005088 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002c0a:	f107 0314 	add.w	r3, r7, #20
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4818      	ldr	r0, [pc, #96]	@ (8002c74 <I2Cx_MspInit+0xac>)
 8002c12:	f002 fa39 	bl	8005088 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002c16:	4b16      	ldr	r3, [pc, #88]	@ (8002c70 <I2Cx_MspInit+0xa8>)
 8002c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1a:	4a15      	ldr	r2, [pc, #84]	@ (8002c70 <I2Cx_MspInit+0xa8>)
 8002c1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c20:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c22:	4b13      	ldr	r3, [pc, #76]	@ (8002c70 <I2Cx_MspInit+0xa8>)
 8002c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002c2e:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <I2Cx_MspInit+0xa8>)
 8002c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c32:	4a0f      	ldr	r2, [pc, #60]	@ (8002c70 <I2Cx_MspInit+0xa8>)
 8002c34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c38:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c70 <I2Cx_MspInit+0xa8>)
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c70 <I2Cx_MspInit+0xa8>)
 8002c40:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002c44:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	210f      	movs	r1, #15
 8002c4a:	2021      	movs	r0, #33	@ 0x21
 8002c4c:	f002 f8d9 	bl	8004e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002c50:	2021      	movs	r0, #33	@ 0x21
 8002c52:	f002 f8f2 	bl	8004e3a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002c56:	2200      	movs	r2, #0
 8002c58:	210f      	movs	r1, #15
 8002c5a:	2022      	movs	r0, #34	@ 0x22
 8002c5c:	f002 f8d1 	bl	8004e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002c60:	2022      	movs	r0, #34	@ 0x22
 8002c62:	f002 f8ea 	bl	8004e3a <HAL_NVIC_EnableIRQ>
}
 8002c66:	bf00      	nop
 8002c68:	3728      	adds	r7, #40	@ 0x28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	48000400 	.word	0x48000400

08002c78 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a12      	ldr	r2, [pc, #72]	@ (8002ccc <I2Cx_Init+0x54>)
 8002c84:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a11      	ldr	r2, [pc, #68]	@ (8002cd0 <I2Cx_Init+0x58>)
 8002c8a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff ff89 	bl	8002bc8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f002 fcce 	bl	8005658 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f003 fa84 	bl	80061cc <HAL_I2CEx_ConfigAnalogFilter>
}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40005800 	.word	0x40005800
 8002cd0:	00702681 	.word	0x00702681

08002cd4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	@ 0x28
 8002cd8:	af04      	add	r7, sp, #16
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	4608      	mov	r0, r1
 8002cde:	4611      	mov	r1, r2
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	72fb      	strb	r3, [r7, #11]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	813b      	strh	r3, [r7, #8]
 8002cea:	4613      	mov	r3, r2
 8002cec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002cf2:	7afb      	ldrb	r3, [r7, #11]
 8002cf4:	b299      	uxth	r1, r3
 8002cf6:	88f8      	ldrh	r0, [r7, #6]
 8002cf8:	893a      	ldrh	r2, [r7, #8]
 8002cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cfe:	9302      	str	r3, [sp, #8]
 8002d00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d02:	9301      	str	r3, [sp, #4]
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	4603      	mov	r3, r0
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f002 fe82 	bl	8005a14 <HAL_I2C_Mem_Read>
 8002d10:	4603      	mov	r3, r0
 8002d12:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d004      	beq.n	8002d24 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002d1a:	7afb      	ldrb	r3, [r7, #11]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f832 	bl	8002d88 <I2Cx_Error>
  }
  return status;
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b08a      	sub	sp, #40	@ 0x28
 8002d32:	af04      	add	r7, sp, #16
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	4608      	mov	r0, r1
 8002d38:	4611      	mov	r1, r2
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	72fb      	strb	r3, [r7, #11]
 8002d40:	460b      	mov	r3, r1
 8002d42:	813b      	strh	r3, [r7, #8]
 8002d44:	4613      	mov	r3, r2
 8002d46:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002d4c:	7afb      	ldrb	r3, [r7, #11]
 8002d4e:	b299      	uxth	r1, r3
 8002d50:	88f8      	ldrh	r0, [r7, #6]
 8002d52:	893a      	ldrh	r2, [r7, #8]
 8002d54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d58:	9302      	str	r3, [sp, #8]
 8002d5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d5c:	9301      	str	r3, [sp, #4]
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	4603      	mov	r3, r0
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f002 fd41 	bl	80057ec <HAL_I2C_Mem_Write>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002d6e:	7dfb      	ldrb	r3, [r7, #23]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d004      	beq.n	8002d7e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002d74:	7afb      	ldrb	r3, [r7, #11]
 8002d76:	4619      	mov	r1, r3
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f805 	bl	8002d88 <I2Cx_Error>
  }
  return status;
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f002 fcfa 	bl	800578e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff ff6c 	bl	8002c78 <I2Cx_Init>
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002dac:	4802      	ldr	r0, [pc, #8]	@ (8002db8 <SENSOR_IO_Init+0x10>)
 8002dae:	f7ff ff63 	bl	8002c78 <I2Cx_Init>
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000ad4 	.word	0x20000ad4

08002dbc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	71fb      	strb	r3, [r7, #7]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	71bb      	strb	r3, [r7, #6]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002dce:	79bb      	ldrb	r3, [r7, #6]
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	79f9      	ldrb	r1, [r7, #7]
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	1d7b      	adds	r3, r7, #5
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	2301      	movs	r3, #1
 8002dde:	4803      	ldr	r0, [pc, #12]	@ (8002dec <SENSOR_IO_Write+0x30>)
 8002de0:	f7ff ffa5 	bl	8002d2e <I2Cx_WriteMultiple>
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20000ad4 	.word	0x20000ad4

08002df0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af02      	add	r7, sp, #8
 8002df6:	4603      	mov	r3, r0
 8002df8:	460a      	mov	r2, r1
 8002dfa:	71fb      	strb	r3, [r7, #7]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002e04:	79bb      	ldrb	r3, [r7, #6]
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	79f9      	ldrb	r1, [r7, #7]
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	f107 030f 	add.w	r3, r7, #15
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	2301      	movs	r3, #1
 8002e16:	4804      	ldr	r0, [pc, #16]	@ (8002e28 <SENSOR_IO_Read+0x38>)
 8002e18:	f7ff ff5c 	bl	8002cd4 <I2Cx_ReadMultiple>

  return read_value;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000ad4 	.word	0x20000ad4

08002e2c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	603a      	str	r2, [r7, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	71bb      	strb	r3, [r7, #6]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002e42:	79bb      	ldrb	r3, [r7, #6]
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	79f9      	ldrb	r1, [r7, #7]
 8002e48:	88bb      	ldrh	r3, [r7, #4]
 8002e4a:	9301      	str	r3, [sp, #4]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	2301      	movs	r3, #1
 8002e52:	4804      	ldr	r0, [pc, #16]	@ (8002e64 <SENSOR_IO_ReadMultiple+0x38>)
 8002e54:	f7ff ff3e 	bl	8002cd4 <I2Cx_ReadMultiple>
 8002e58:	4603      	mov	r3, r0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000ad4 	.word	0x20000ad4

08002e68 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002e72:	2300      	movs	r3, #0
 8002e74:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002e76:	4b19      	ldr	r3, [pc, #100]	@ (8002edc <BSP_ACCELERO_Init+0x74>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	4798      	blx	r3
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b6a      	cmp	r3, #106	@ 0x6a
 8002e80:	d002      	beq.n	8002e88 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
 8002e86:	e024      	b.n	8002ed2 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002e88:	4b15      	ldr	r3, [pc, #84]	@ (8002ee0 <BSP_ACCELERO_Init+0x78>)
 8002e8a:	4a14      	ldr	r2, [pc, #80]	@ (8002edc <BSP_ACCELERO_Init+0x74>)
 8002e8c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8002e8e:	2330      	movs	r3, #48	@ 0x30
 8002e90:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8002e96:	2300      	movs	r3, #0
 8002e98:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002e9a:	2340      	movs	r3, #64	@ 0x40
 8002e9c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8002ea6:	797a      	ldrb	r2, [r7, #5]
 8002ea8:	7abb      	ldrb	r3, [r7, #10]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002eb0:	7a3b      	ldrb	r3, [r7, #8]
 8002eb2:	f043 0304 	orr.w	r3, r3, #4
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	b21a      	sxth	r2, r3
 8002ebc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	b21b      	sxth	r3, r3
 8002ec4:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002ec6:	4b06      	ldr	r3, [pc, #24]	@ (8002ee0 <BSP_ACCELERO_Init+0x78>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	89ba      	ldrh	r2, [r7, #12]
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4798      	blx	r3
  }  

  return ret;
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20000008 	.word	0x20000008
 8002ee0:	20000b28 	.word	0x20000b28

08002ee4 <BSP_ACCELERO_AccGetXYZ_Float>:
  }
}

/////////////////////////////////USER DEFINED/////////////////////////////////////////
void BSP_ACCELERO_AccGetXYZ_Float(float *pDataXYZ)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]

  if(AccelerometerDrv != NULL)
 8002eec:	4b08      	ldr	r3, [pc, #32]	@ (8002f10 <BSP_ACCELERO_AccGetXYZ_Float+0x2c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d009      	beq.n	8002f08 <BSP_ACCELERO_AccGetXYZ_Float+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002ef4:	4b06      	ldr	r3, [pc, #24]	@ (8002f10 <BSP_ACCELERO_AccGetXYZ_Float+0x2c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d004      	beq.n	8002f08 <BSP_ACCELERO_AccGetXYZ_Float+0x24>
    {
        AccelerometerDrv->GetXYZ(pDataXYZ);
 8002efe:	4b04      	ldr	r3, [pc, #16]	@ (8002f10 <BSP_ACCELERO_AccGetXYZ_Float+0x2c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	4798      	blx	r3
    }
  }
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20000b28 	.word	0x20000b28

08002f14 <BSP_ACCELERO_SetReadMode>:

void BSP_ACCELERO_SetReadMode(int mode){
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
	if(mode == 1){
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d103      	bne.n	8002f2a <BSP_ACCELERO_SetReadMode+0x16>
		Lsm6dslAccDrv_SetReadType(1);
 8002f22:	2001      	movs	r0, #1
 8002f24:	f000 f9b0 	bl	8003288 <Lsm6dslAccDrv_SetReadType>
	}else{
		Lsm6dslAccDrv_SetReadType(0);
	}
}
 8002f28:	e002      	b.n	8002f30 <BSP_ACCELERO_SetReadMode+0x1c>
		Lsm6dslAccDrv_SetReadType(0);
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	f000 f9ac 	bl	8003288 <Lsm6dslAccDrv_SetReadType>
}
 8002f30:	bf00      	nop
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002f42:	2300      	movs	r3, #0
 8002f44:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002f46:	2110      	movs	r1, #16
 8002f48:	20d4      	movs	r0, #212	@ 0xd4
 8002f4a:	f7ff ff51 	bl	8002df0 <SENSOR_IO_Read>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002f56:	7bbb      	ldrb	r3, [r7, #14]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002f5e:	7bba      	ldrb	r2, [r7, #14]
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002f66:	7bbb      	ldrb	r3, [r7, #14]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	2110      	movs	r1, #16
 8002f6c:	20d4      	movs	r0, #212	@ 0xd4
 8002f6e:	f7ff ff25 	bl	8002dbc <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002f72:	2112      	movs	r1, #18
 8002f74:	20d4      	movs	r0, #212	@ 0xd4
 8002f76:	f7ff ff3b 	bl	8002df0 <SENSOR_IO_Read>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002f86:	7bbb      	ldrb	r3, [r7, #14]
 8002f88:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8002f8c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002f8e:	7bba      	ldrb	r2, [r7, #14]
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002f96:	7bbb      	ldrb	r3, [r7, #14]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2112      	movs	r1, #18
 8002f9c:	20d4      	movs	r0, #212	@ 0xd4
 8002f9e:	f7ff ff0d 	bl	8002dbc <SENSOR_IO_Write>
}
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002fb4:	2110      	movs	r1, #16
 8002fb6:	20d4      	movs	r0, #212	@ 0xd4
 8002fb8:	f7ff ff1a 	bl	8002df0 <SENSOR_IO_Read>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2110      	movs	r1, #16
 8002fce:	20d4      	movs	r0, #212	@ 0xd4
 8002fd0:	f7ff fef4 	bl	8002dbc <SENSOR_IO_Write>
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002fe0:	f7ff fee2 	bl	8002da8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002fe4:	210f      	movs	r1, #15
 8002fe6:	20d4      	movs	r0, #212	@ 0xd4
 8002fe8:	f7ff ff02 	bl	8002df0 <SENSOR_IO_Read>
 8002fec:	4603      	mov	r3, r0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8003000:	2115      	movs	r1, #21
 8003002:	20d4      	movs	r0, #212	@ 0xd4
 8003004:	f7ff fef4 	bl	8002df0 <SENSOR_IO_Read>
 8003008:	4603      	mov	r3, r0
 800300a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	f023 0310 	bic.w	r3, r3, #16
 8003012:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	f043 0310 	orr.w	r3, r3, #16
 8003020:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	461a      	mov	r2, r3
 8003026:	2115      	movs	r1, #21
 8003028:	20d4      	movs	r0, #212	@ 0xd4
 800302a:	f7ff fec7 	bl	8002dbc <SENSOR_IO_Write>
}
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003040:	2300      	movs	r3, #0
 8003042:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800304e:	2110      	movs	r1, #16
 8003050:	20d4      	movs	r0, #212	@ 0xd4
 8003052:	f7ff fecd 	bl	8002df0 <SENSOR_IO_Read>
 8003056:	4603      	mov	r3, r0
 8003058:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800305a:	f107 0208 	add.w	r2, r7, #8
 800305e:	2306      	movs	r3, #6
 8003060:	2128      	movs	r1, #40	@ 0x28
 8003062:	20d4      	movs	r0, #212	@ 0xd4
 8003064:	f7ff fee2 	bl	8002e2c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003068:	2300      	movs	r3, #0
 800306a:	77fb      	strb	r3, [r7, #31]
 800306c:	e01a      	b.n	80030a4 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800306e:	7ffb      	ldrb	r3, [r7, #31]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	3301      	adds	r3, #1
 8003074:	3320      	adds	r3, #32
 8003076:	443b      	add	r3, r7
 8003078:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800307c:	021b      	lsls	r3, r3, #8
 800307e:	b29b      	uxth	r3, r3
 8003080:	7ffa      	ldrb	r2, [r7, #31]
 8003082:	0052      	lsls	r2, r2, #1
 8003084:	3220      	adds	r2, #32
 8003086:	443a      	add	r2, r7
 8003088:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800308c:	4413      	add	r3, r2
 800308e:	b29a      	uxth	r2, r3
 8003090:	7ffb      	ldrb	r3, [r7, #31]
 8003092:	b212      	sxth	r2, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	3320      	adds	r3, #32
 8003098:	443b      	add	r3, r7
 800309a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800309e:	7ffb      	ldrb	r3, [r7, #31]
 80030a0:	3301      	adds	r3, #1
 80030a2:	77fb      	strb	r3, [r7, #31]
 80030a4:	7ffb      	ldrb	r3, [r7, #31]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d9e1      	bls.n	800306e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b0c      	cmp	r3, #12
 80030b2:	d829      	bhi.n	8003108 <LSM6DSL_AccReadXYZ+0xd0>
 80030b4:	a201      	add	r2, pc, #4	@ (adr r2, 80030bc <LSM6DSL_AccReadXYZ+0x84>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030f1 	.word	0x080030f1
 80030c0:	08003109 	.word	0x08003109
 80030c4:	08003109 	.word	0x08003109
 80030c8:	08003109 	.word	0x08003109
 80030cc:	08003103 	.word	0x08003103
 80030d0:	08003109 	.word	0x08003109
 80030d4:	08003109 	.word	0x08003109
 80030d8:	08003109 	.word	0x08003109
 80030dc:	080030f7 	.word	0x080030f7
 80030e0:	08003109 	.word	0x08003109
 80030e4:	08003109 	.word	0x08003109
 80030e8:	08003109 	.word	0x08003109
 80030ec:	080030fd 	.word	0x080030fd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80030f0:	4b18      	ldr	r3, [pc, #96]	@ (8003154 <LSM6DSL_AccReadXYZ+0x11c>)
 80030f2:	61bb      	str	r3, [r7, #24]
    break;
 80030f4:	e008      	b.n	8003108 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80030f6:	4b18      	ldr	r3, [pc, #96]	@ (8003158 <LSM6DSL_AccReadXYZ+0x120>)
 80030f8:	61bb      	str	r3, [r7, #24]
    break;
 80030fa:	e005      	b.n	8003108 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80030fc:	4b17      	ldr	r3, [pc, #92]	@ (800315c <LSM6DSL_AccReadXYZ+0x124>)
 80030fe:	61bb      	str	r3, [r7, #24]
    break;
 8003100:	e002      	b.n	8003108 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8003102:	4b17      	ldr	r3, [pc, #92]	@ (8003160 <LSM6DSL_AccReadXYZ+0x128>)
 8003104:	61bb      	str	r3, [r7, #24]
    break;    
 8003106:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003108:	2300      	movs	r3, #0
 800310a:	77fb      	strb	r3, [r7, #31]
 800310c:	e01a      	b.n	8003144 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800310e:	7ffb      	ldrb	r3, [r7, #31]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	3320      	adds	r3, #32
 8003114:	443b      	add	r3, r7
 8003116:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003122:	edd7 7a06 	vldr	s15, [r7, #24]
 8003126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312a:	7ffb      	ldrb	r3, [r7, #31]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003136:	ee17 2a90 	vmov	r2, s15
 800313a:	b212      	sxth	r2, r2
 800313c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800313e:	7ffb      	ldrb	r3, [r7, #31]
 8003140:	3301      	adds	r3, #1
 8003142:	77fb      	strb	r3, [r7, #31]
 8003144:	7ffb      	ldrb	r3, [r7, #31]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d9e1      	bls.n	800310e <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 800314a:	bf00      	nop
 800314c:	bf00      	nop
 800314e:	3720      	adds	r7, #32
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	3d79db23 	.word	0x3d79db23
 8003158:	3df9db23 	.word	0x3df9db23
 800315c:	3e79db23 	.word	0x3e79db23
 8003160:	3ef9db23 	.word	0x3ef9db23

08003164 <LSM6DSL_AccReadXYZ_Float>:


//////////////////////////////////USER DEFINED FUNCTION///////////////////////////

void LSM6DSL_AccReadXYZ_Float(float* pData) //int16_t -> float
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800316c:	2300      	movs	r3, #0
 800316e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]

  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800317a:	2110      	movs	r1, #16
 800317c:	20d4      	movs	r0, #212	@ 0xd4
 800317e:	f7ff fe37 	bl	8002df0 <SENSOR_IO_Read>
 8003182:	4603      	mov	r3, r0
 8003184:	75fb      	strb	r3, [r7, #23]

  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003186:	f107 0208 	add.w	r2, r7, #8
 800318a:	2306      	movs	r3, #6
 800318c:	2128      	movs	r1, #40	@ 0x28
 800318e:	20d4      	movs	r0, #212	@ 0xd4
 8003190:	f7ff fe4c 	bl	8002e2c <SENSOR_IO_ReadMultiple>

  for(i=0; i<3; i++)
 8003194:	2300      	movs	r3, #0
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e01a      	b.n	80031d0 <LSM6DSL_AccReadXYZ_Float+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800319a:	7ffb      	ldrb	r3, [r7, #31]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	3301      	adds	r3, #1
 80031a0:	3320      	adds	r3, #32
 80031a2:	443b      	add	r3, r7
 80031a4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	7ffa      	ldrb	r2, [r7, #31]
 80031ae:	0052      	lsls	r2, r2, #1
 80031b0:	3220      	adds	r2, #32
 80031b2:	443a      	add	r2, r7
 80031b4:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80031b8:	4413      	add	r3, r2
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	7ffb      	ldrb	r3, [r7, #31]
 80031be:	b212      	sxth	r2, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	3320      	adds	r3, #32
 80031c4:	443b      	add	r3, r7
 80031c6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80031ca:	7ffb      	ldrb	r3, [r7, #31]
 80031cc:	3301      	adds	r3, #1
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	7ffb      	ldrb	r3, [r7, #31]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d9e1      	bls.n	800319a <LSM6DSL_AccReadXYZ_Float+0x36>
  }

  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b0c      	cmp	r3, #12
 80031de:	d829      	bhi.n	8003234 <LSM6DSL_AccReadXYZ_Float+0xd0>
 80031e0:	a201      	add	r2, pc, #4	@ (adr r2, 80031e8 <LSM6DSL_AccReadXYZ_Float+0x84>)
 80031e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e6:	bf00      	nop
 80031e8:	0800321d 	.word	0x0800321d
 80031ec:	08003235 	.word	0x08003235
 80031f0:	08003235 	.word	0x08003235
 80031f4:	08003235 	.word	0x08003235
 80031f8:	0800322f 	.word	0x0800322f
 80031fc:	08003235 	.word	0x08003235
 8003200:	08003235 	.word	0x08003235
 8003204:	08003235 	.word	0x08003235
 8003208:	08003223 	.word	0x08003223
 800320c:	08003235 	.word	0x08003235
 8003210:	08003235 	.word	0x08003235
 8003214:	08003235 	.word	0x08003235
 8003218:	08003229 	.word	0x08003229
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800321c:	4b16      	ldr	r3, [pc, #88]	@ (8003278 <LSM6DSL_AccReadXYZ_Float+0x114>)
 800321e:	61bb      	str	r3, [r7, #24]
    break;
 8003220:	e008      	b.n	8003234 <LSM6DSL_AccReadXYZ_Float+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8003222:	4b16      	ldr	r3, [pc, #88]	@ (800327c <LSM6DSL_AccReadXYZ_Float+0x118>)
 8003224:	61bb      	str	r3, [r7, #24]
    break;
 8003226:	e005      	b.n	8003234 <LSM6DSL_AccReadXYZ_Float+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003228:	4b15      	ldr	r3, [pc, #84]	@ (8003280 <LSM6DSL_AccReadXYZ_Float+0x11c>)
 800322a:	61bb      	str	r3, [r7, #24]
    break;
 800322c:	e002      	b.n	8003234 <LSM6DSL_AccReadXYZ_Float+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800322e:	4b15      	ldr	r3, [pc, #84]	@ (8003284 <LSM6DSL_AccReadXYZ_Float+0x120>)
 8003230:	61bb      	str	r3, [r7, #24]
    break;
 8003232:	bf00      	nop
  }

  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003234:	2300      	movs	r3, #0
 8003236:	77fb      	strb	r3, [r7, #31]
 8003238:	e016      	b.n	8003268 <LSM6DSL_AccReadXYZ_Float+0x104>
  {
    pData[i]= (pnRawData[i] * sensitivity);
 800323a:	7ffb      	ldrb	r3, [r7, #31]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	3320      	adds	r3, #32
 8003240:	443b      	add	r3, r7
 8003242:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003246:	ee07 3a90 	vmov	s15, r3
 800324a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800324e:	7ffb      	ldrb	r3, [r7, #31]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	edd7 7a06 	vldr	s15, [r7, #24]
 800325a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800325e:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8003262:	7ffb      	ldrb	r3, [r7, #31]
 8003264:	3301      	adds	r3, #1
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	7ffb      	ldrb	r3, [r7, #31]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d9e5      	bls.n	800323a <LSM6DSL_AccReadXYZ_Float+0xd6>
  }
}
 800326e:	bf00      	nop
 8003270:	bf00      	nop
 8003272:	3720      	adds	r7, #32
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	3d79db23 	.word	0x3d79db23
 800327c:	3df9db23 	.word	0x3df9db23
 8003280:	3e79db23 	.word	0x3e79db23
 8003284:	3ef9db23 	.word	0x3ef9db23

08003288 <Lsm6dslAccDrv_SetReadType>:

void Lsm6dslAccDrv_SetReadType(int mode){
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
	if(mode == 1){
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d103      	bne.n	800329e <Lsm6dslAccDrv_SetReadType+0x16>
		Lsm6dslAccDrv.GetXYZ = LSM6DSL_AccReadXYZ_Float;
 8003296:	4b06      	ldr	r3, [pc, #24]	@ (80032b0 <Lsm6dslAccDrv_SetReadType+0x28>)
 8003298:	4a06      	ldr	r2, [pc, #24]	@ (80032b4 <Lsm6dslAccDrv_SetReadType+0x2c>)
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30
	}else{
		Lsm6dslAccDrv.GetXYZ = LSM6DSL_AccReadXYZ;
	}
}
 800329c:	e002      	b.n	80032a4 <Lsm6dslAccDrv_SetReadType+0x1c>
		Lsm6dslAccDrv.GetXYZ = LSM6DSL_AccReadXYZ;
 800329e:	4b04      	ldr	r3, [pc, #16]	@ (80032b0 <Lsm6dslAccDrv_SetReadType+0x28>)
 80032a0:	4a05      	ldr	r2, [pc, #20]	@ (80032b8 <Lsm6dslAccDrv_SetReadType+0x30>)
 80032a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	20000008 	.word	0x20000008
 80032b4:	08003165 	.word	0x08003165
 80032b8:	08003039 	.word	0x08003039

080032bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c6:	2003      	movs	r0, #3
 80032c8:	f001 fd90 	bl	8004dec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032cc:	2000      	movs	r0, #0
 80032ce:	f000 f80d 	bl	80032ec <HAL_InitTick>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	71fb      	strb	r3, [r7, #7]
 80032dc:	e001      	b.n	80032e2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032de:	f7fe ff4d 	bl	800217c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032e2:	79fb      	ldrb	r3, [r7, #7]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80032f8:	4b17      	ldr	r3, [pc, #92]	@ (8003358 <HAL_InitTick+0x6c>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d023      	beq.n	8003348 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003300:	4b16      	ldr	r3, [pc, #88]	@ (800335c <HAL_InitTick+0x70>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b14      	ldr	r3, [pc, #80]	@ (8003358 <HAL_InitTick+0x6c>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	4619      	mov	r1, r3
 800330a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800330e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003312:	fbb2 f3f3 	udiv	r3, r2, r3
 8003316:	4618      	mov	r0, r3
 8003318:	f001 fd9d 	bl	8004e56 <HAL_SYSTICK_Config>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10f      	bne.n	8003342 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b0f      	cmp	r3, #15
 8003326:	d809      	bhi.n	800333c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003328:	2200      	movs	r2, #0
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	f04f 30ff 	mov.w	r0, #4294967295
 8003330:	f001 fd67 	bl	8004e02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003334:	4a0a      	ldr	r2, [pc, #40]	@ (8003360 <HAL_InitTick+0x74>)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	e007      	b.n	800334c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
 8003340:	e004      	b.n	800334c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
 8003346:	e001      	b.n	800334c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800334c:	7bfb      	ldrb	r3, [r7, #15]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000040 	.word	0x20000040
 800335c:	20000004 	.word	0x20000004
 8003360:	2000003c 	.word	0x2000003c

08003364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003368:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <HAL_IncTick+0x20>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_IncTick+0x24>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4413      	add	r3, r2
 8003374:	4a04      	ldr	r2, [pc, #16]	@ (8003388 <HAL_IncTick+0x24>)
 8003376:	6013      	str	r3, [r2, #0]
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	20000040 	.word	0x20000040
 8003388:	20000b2c 	.word	0x20000b2c

0800338c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return uwTick;
 8003390:	4b03      	ldr	r3, [pc, #12]	@ (80033a0 <HAL_GetTick+0x14>)
 8003392:	681b      	ldr	r3, [r3, #0]
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000b2c 	.word	0x20000b2c

080033a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033ac:	f7ff ffee 	bl	800338c <HAL_GetTick>
 80033b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d005      	beq.n	80033ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80033be:	4b0a      	ldr	r3, [pc, #40]	@ (80033e8 <HAL_Delay+0x44>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4413      	add	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033ca:	bf00      	nop
 80033cc:	f7ff ffde 	bl	800338c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d8f7      	bhi.n	80033cc <HAL_Delay+0x28>
  {
  }
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000040 	.word	0x20000040

080033ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	609a      	str	r2, [r3, #8]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	609a      	str	r2, [r3, #8]
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	3360      	adds	r3, #96	@ 0x60
 8003466:	461a      	mov	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b08      	ldr	r3, [pc, #32]	@ (8003498 <LL_ADC_SetOffset+0x44>)
 8003476:	4013      	ands	r3, r2
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	4313      	orrs	r3, r2
 8003484:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800348c:	bf00      	nop
 800348e:	371c      	adds	r7, #28
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	03fff000 	.word	0x03fff000

0800349c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3360      	adds	r3, #96	@ 0x60
 80034aa:	461a      	mov	r2, r3
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3360      	adds	r3, #96	@ 0x60
 80034d8:	461a      	mov	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3330      	adds	r3, #48	@ 0x30
 8003534:	461a      	mov	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	f003 030c 	and.w	r3, r3, #12
 8003540:	4413      	add	r3, r2
 8003542:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	211f      	movs	r1, #31
 8003550:	fa01 f303 	lsl.w	r3, r1, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	401a      	ands	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	0e9b      	lsrs	r3, r3, #26
 800355c:	f003 011f 	and.w	r1, r3, #31
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 031f 	and.w	r3, r3, #31
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	431a      	orrs	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003570:	bf00      	nop
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003588:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b087      	sub	sp, #28
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	3314      	adds	r3, #20
 80035b2:	461a      	mov	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	0e5b      	lsrs	r3, r3, #25
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	4413      	add	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	0d1b      	lsrs	r3, r3, #20
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	2107      	movs	r1, #7
 80035d0:	fa01 f303 	lsl.w	r3, r1, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	401a      	ands	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	0d1b      	lsrs	r3, r3, #20
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	fa01 f303 	lsl.w	r3, r1, r3
 80035e6:	431a      	orrs	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80035ec:	bf00      	nop
 80035ee:	371c      	adds	r7, #28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003610:	43db      	mvns	r3, r3
 8003612:	401a      	ands	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f003 0318 	and.w	r3, r3, #24
 800361a:	4908      	ldr	r1, [pc, #32]	@ (800363c <LL_ADC_SetChannelSingleDiff+0x44>)
 800361c:	40d9      	lsrs	r1, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	400b      	ands	r3, r1
 8003622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003626:	431a      	orrs	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800362e:	bf00      	nop
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	0007ffff 	.word	0x0007ffff

08003640 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 031f 	and.w	r3, r3, #31
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003688:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6093      	str	r3, [r2, #8]
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036b0:	d101      	bne.n	80036b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80036d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036d8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003700:	d101      	bne.n	8003706 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003724:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003728:	f043 0201 	orr.w	r2, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <LL_ADC_IsEnabled+0x18>
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <LL_ADC_IsEnabled+0x1a>
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003772:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003776:	f043 0204 	orr.w	r2, r3, #4
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b04      	cmp	r3, #4
 800379c:	d101      	bne.n	80037a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d101      	bne.n	80037c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b089      	sub	sp, #36	@ 0x24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e130      	b.n	8003a54 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7fe fcdf 	bl	80021c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff ff3f 	bl	800369c <LL_ADC_IsDeepPowerDownEnabled>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff ff25 	bl	8003678 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff ff5a 	bl	80036ec <LL_ADC_IsInternalRegulatorEnabled>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d115      	bne.n	800386a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff ff3e 	bl	80036c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003848:	4b84      	ldr	r3, [pc, #528]	@ (8003a5c <HAL_ADC_Init+0x284>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	099b      	lsrs	r3, r3, #6
 800384e:	4a84      	ldr	r2, [pc, #528]	@ (8003a60 <HAL_ADC_Init+0x288>)
 8003850:	fba2 2303 	umull	r2, r3, r2, r3
 8003854:	099b      	lsrs	r3, r3, #6
 8003856:	3301      	adds	r3, #1
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800385c:	e002      	b.n	8003864 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	3b01      	subs	r3, #1
 8003862:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f9      	bne.n	800385e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff ff3c 	bl	80036ec <LL_ADC_IsInternalRegulatorEnabled>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10d      	bne.n	8003896 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800387e:	f043 0210 	orr.w	r2, r3, #16
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800388a:	f043 0201 	orr.w	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff ff75 	bl	800378a <LL_ADC_REG_IsConversionOngoing>
 80038a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f040 80c9 	bne.w	8003a42 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f040 80c5 	bne.w	8003a42 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038bc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80038c0:	f043 0202 	orr.w	r2, r3, #2
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff ff35 	bl	800373c <LL_ADC_IsEnabled>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d115      	bne.n	8003904 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038d8:	4862      	ldr	r0, [pc, #392]	@ (8003a64 <HAL_ADC_Init+0x28c>)
 80038da:	f7ff ff2f 	bl	800373c <LL_ADC_IsEnabled>
 80038de:	4604      	mov	r4, r0
 80038e0:	4861      	ldr	r0, [pc, #388]	@ (8003a68 <HAL_ADC_Init+0x290>)
 80038e2:	f7ff ff2b 	bl	800373c <LL_ADC_IsEnabled>
 80038e6:	4603      	mov	r3, r0
 80038e8:	431c      	orrs	r4, r3
 80038ea:	4860      	ldr	r0, [pc, #384]	@ (8003a6c <HAL_ADC_Init+0x294>)
 80038ec:	f7ff ff26 	bl	800373c <LL_ADC_IsEnabled>
 80038f0:	4603      	mov	r3, r0
 80038f2:	4323      	orrs	r3, r4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d105      	bne.n	8003904 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4619      	mov	r1, r3
 80038fe:	485c      	ldr	r0, [pc, #368]	@ (8003a70 <HAL_ADC_Init+0x298>)
 8003900:	f7ff fd74 	bl	80033ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	7e5b      	ldrb	r3, [r3, #25]
 8003908:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800390e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003914:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800391a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003922:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d106      	bne.n	8003940 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	3b01      	subs	r3, #1
 8003938:	045b      	lsls	r3, r3, #17
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4313      	orrs	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	d009      	beq.n	800395c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003954:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	4b44      	ldr	r3, [pc, #272]	@ (8003a74 <HAL_ADC_Init+0x29c>)
 8003964:	4013      	ands	r3, r2
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	69b9      	ldr	r1, [r7, #24]
 800396c:	430b      	orrs	r3, r1
 800396e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ff1b 	bl	80037b0 <LL_ADC_INJ_IsConversionOngoing>
 800397a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d13d      	bne.n	80039fe <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d13a      	bne.n	80039fe <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800398c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003994:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039a4:	f023 0302 	bic.w	r3, r3, #2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	69b9      	ldr	r1, [r7, #24]
 80039ae:	430b      	orrs	r3, r1
 80039b0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d118      	bne.n	80039ee <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80039c6:	f023 0304 	bic.w	r3, r3, #4
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80039d2:	4311      	orrs	r1, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80039d8:	4311      	orrs	r1, r2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80039de:	430a      	orrs	r2, r1
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	611a      	str	r2, [r3, #16]
 80039ec:	e007      	b.n	80039fe <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0201 	bic.w	r2, r2, #1
 80039fc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d10c      	bne.n	8003a20 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0c:	f023 010f 	bic.w	r1, r3, #15
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	1e5a      	subs	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a1e:	e007      	b.n	8003a30 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 020f 	bic.w	r2, r2, #15
 8003a2e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a34:	f023 0303 	bic.w	r3, r3, #3
 8003a38:	f043 0201 	orr.w	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003a40:	e007      	b.n	8003a52 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a46:	f043 0210 	orr.w	r2, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a52:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3724      	adds	r7, #36	@ 0x24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd90      	pop	{r4, r7, pc}
 8003a5c:	20000004 	.word	0x20000004
 8003a60:	053e2d63 	.word	0x053e2d63
 8003a64:	50040000 	.word	0x50040000
 8003a68:	50040100 	.word	0x50040100
 8003a6c:	50040200 	.word	0x50040200
 8003a70:	50040300 	.word	0x50040300
 8003a74:	fff0c007 	.word	0xfff0c007

08003a78 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a80:	4891      	ldr	r0, [pc, #580]	@ (8003cc8 <HAL_ADC_Start_IT+0x250>)
 8003a82:	f7ff fddd 	bl	8003640 <LL_ADC_GetMultimode>
 8003a86:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff fe7c 	bl	800378a <LL_ADC_REG_IsConversionOngoing>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f040 8110 	bne.w	8003cba <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_ADC_Start_IT+0x30>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e10b      	b.n	8003cc0 <HAL_ADC_Start_IT+0x248>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 ff3d 	bl	8004930 <ADC_Enable>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f040 80f7 	bne.w	8003cb0 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a7c      	ldr	r2, [pc, #496]	@ (8003ccc <HAL_ADC_Start_IT+0x254>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d002      	beq.n	8003ae6 <HAL_ADC_Start_IT+0x6e>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	e000      	b.n	8003ae8 <HAL_ADC_Start_IT+0x70>
 8003ae6:	4b7a      	ldr	r3, [pc, #488]	@ (8003cd0 <HAL_ADC_Start_IT+0x258>)
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d002      	beq.n	8003af6 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d105      	bne.n	8003b02 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d006      	beq.n	8003b1c <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b12:	f023 0206 	bic.w	r2, r3, #6
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b1a:	e002      	b.n	8003b22 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	221c      	movs	r2, #28
 8003b28:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 021c 	bic.w	r2, r2, #28
 8003b40:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d108      	bne.n	8003b5c <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0208 	orr.w	r2, r2, #8
 8003b58:	605a      	str	r2, [r3, #4]
          break;
 8003b5a:	e008      	b.n	8003b6e <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0204 	orr.w	r2, r2, #4
 8003b6a:	605a      	str	r2, [r3, #4]
          break;
 8003b6c:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d107      	bne.n	8003b86 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0210 	orr.w	r2, r2, #16
 8003b84:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a50      	ldr	r2, [pc, #320]	@ (8003ccc <HAL_ADC_Start_IT+0x254>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d002      	beq.n	8003b96 <HAL_ADC_Start_IT+0x11e>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	e000      	b.n	8003b98 <HAL_ADC_Start_IT+0x120>
 8003b96:	4b4e      	ldr	r3, [pc, #312]	@ (8003cd0 <HAL_ADC_Start_IT+0x258>)
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d008      	beq.n	8003bb2 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	2b05      	cmp	r3, #5
 8003baa:	d002      	beq.n	8003bb2 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	2b09      	cmp	r3, #9
 8003bb0:	d13a      	bne.n	8003c28 <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d02d      	beq.n	8003c1c <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003bc8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d110      	bne.n	8003bfa <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0220 	bic.w	r2, r2, #32
 8003be6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bf6:	605a      	str	r2, [r3, #4]
              break;
 8003bf8:	e010      	b.n	8003c1c <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c08:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0220 	orr.w	r2, r2, #32
 8003c18:	605a      	str	r2, [r3, #4]
              break;
 8003c1a:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fd9e 	bl	8003762 <LL_ADC_REG_StartConversion>
 8003c26:	e04a      	b.n	8003cbe <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a24      	ldr	r2, [pc, #144]	@ (8003ccc <HAL_ADC_Start_IT+0x254>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d002      	beq.n	8003c44 <HAL_ADC_Start_IT+0x1cc>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	e000      	b.n	8003c46 <HAL_ADC_Start_IT+0x1ce>
 8003c44:	4b22      	ldr	r3, [pc, #136]	@ (8003cd0 <HAL_ADC_Start_IT+0x258>)
 8003c46:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d034      	beq.n	8003cbe <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c58:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c5c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d110      	bne.n	8003c8e <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0220 	bic.w	r2, r2, #32
 8003c7a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c8a:	605a      	str	r2, [r3, #4]
              break;
 8003c8c:	e017      	b.n	8003cbe <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c9c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0220 	orr.w	r2, r2, #32
 8003cac:	605a      	str	r2, [r3, #4]
              break;
 8003cae:	e006      	b.n	8003cbe <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003cb8:	e001      	b.n	8003cbe <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	50040300 	.word	0x50040300
 8003ccc:	50040100 	.word	0x50040100
 8003cd0:	50040000 	.word	0x50040000

08003cd4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
	...

08003cf0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	@ 0x28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d0c:	4882      	ldr	r0, [pc, #520]	@ (8003f18 <HAL_ADC_IRQHandler+0x228>)
 8003d0e:	f7ff fc97 	bl	8003640 <LL_ADC_GetMultimode>
 8003d12:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d017      	beq.n	8003d4e <HAL_ADC_IRQHandler+0x5e>
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d012      	beq.n	8003d4e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d105      	bne.n	8003d40 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d38:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fec9 	bl	8004ad8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d004      	beq.n	8003d62 <HAL_ADC_IRQHandler+0x72>
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8083 	beq.w	8003e74 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d07d      	beq.n	8003e74 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d105      	bne.n	8003d90 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d88:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fbb2 	bl	80034fe <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d062      	beq.n	8003e66 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a5d      	ldr	r2, [pc, #372]	@ (8003f1c <HAL_ADC_IRQHandler+0x22c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d002      	beq.n	8003db0 <HAL_ADC_IRQHandler+0xc0>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	e000      	b.n	8003db2 <HAL_ADC_IRQHandler+0xc2>
 8003db0:	4b5b      	ldr	r3, [pc, #364]	@ (8003f20 <HAL_ADC_IRQHandler+0x230>)
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d008      	beq.n	8003dcc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b05      	cmp	r3, #5
 8003dc4:	d002      	beq.n	8003dcc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b09      	cmp	r3, #9
 8003dca:	d104      	bne.n	8003dd6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	623b      	str	r3, [r7, #32]
 8003dd4:	e00c      	b.n	8003df0 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a50      	ldr	r2, [pc, #320]	@ (8003f1c <HAL_ADC_IRQHandler+0x22c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d002      	beq.n	8003de6 <HAL_ADC_IRQHandler+0xf6>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	e000      	b.n	8003de8 <HAL_ADC_IRQHandler+0xf8>
 8003de6:	4b4e      	ldr	r3, [pc, #312]	@ (8003f20 <HAL_ADC_IRQHandler+0x230>)
 8003de8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d135      	bne.n	8003e66 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d12e      	bne.n	8003e66 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fcbc 	bl	800378a <LL_ADC_REG_IsConversionOngoing>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d11a      	bne.n	8003e4e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 020c 	bic.w	r2, r2, #12
 8003e26:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d112      	bne.n	8003e66 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e44:	f043 0201 	orr.w	r2, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	655a      	str	r2, [r3, #84]	@ 0x54
 8003e4c:	e00b      	b.n	8003e66 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e52:	f043 0210 	orr.w	r2, r3, #16
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5e:	f043 0201 	orr.w	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fd fe66 	bl	8001b38 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	220c      	movs	r2, #12
 8003e72:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d004      	beq.n	8003e88 <HAL_ADC_IRQHandler+0x198>
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10b      	bne.n	8003ea0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 809f 	beq.w	8003fd2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 8099 	beq.w	8003fd2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d105      	bne.n	8003eb8 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff fb5d 	bl	800357c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003ec2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff fb18 	bl	80034fe <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ece:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a11      	ldr	r2, [pc, #68]	@ (8003f1c <HAL_ADC_IRQHandler+0x22c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d002      	beq.n	8003ee0 <HAL_ADC_IRQHandler+0x1f0>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	e000      	b.n	8003ee2 <HAL_ADC_IRQHandler+0x1f2>
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f20 <HAL_ADC_IRQHandler+0x230>)
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d008      	beq.n	8003efc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2b06      	cmp	r3, #6
 8003ef4:	d002      	beq.n	8003efc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b07      	cmp	r3, #7
 8003efa:	d104      	bne.n	8003f06 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	623b      	str	r3, [r7, #32]
 8003f04:	e013      	b.n	8003f2e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a04      	ldr	r2, [pc, #16]	@ (8003f1c <HAL_ADC_IRQHandler+0x22c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d009      	beq.n	8003f24 <HAL_ADC_IRQHandler+0x234>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	e007      	b.n	8003f26 <HAL_ADC_IRQHandler+0x236>
 8003f16:	bf00      	nop
 8003f18:	50040300 	.word	0x50040300
 8003f1c:	50040100 	.word	0x50040100
 8003f20:	50040000 	.word	0x50040000
 8003f24:	4b7d      	ldr	r3, [pc, #500]	@ (800411c <HAL_ADC_IRQHandler+0x42c>)
 8003f26:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d047      	beq.n	8003fc4 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d007      	beq.n	8003f4e <HAL_ADC_IRQHandler+0x25e>
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d03f      	beq.n	8003fc4 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d13a      	bne.n	8003fc4 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f58:	2b40      	cmp	r3, #64	@ 0x40
 8003f5a:	d133      	bne.n	8003fc4 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d12e      	bne.n	8003fc4 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff fc20 	bl	80037b0 <LL_ADC_INJ_IsConversionOngoing>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d11a      	bne.n	8003fac <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f84:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d112      	bne.n	8003fc4 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa2:	f043 0201 	orr.w	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	655a      	str	r2, [r3, #84]	@ 0x54
 8003faa:	e00b      	b.n	8003fc4 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb0:	f043 0210 	orr.w	r2, r3, #16
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fbc:	f043 0201 	orr.w	r2, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 fd5f 	bl	8004a88 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2260      	movs	r2, #96	@ 0x60
 8003fd0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d011      	beq.n	8004000 <HAL_ADC_IRQHandler+0x310>
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00c      	beq.n	8004000 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f896 	bl	8004124 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2280      	movs	r2, #128	@ 0x80
 8003ffe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d012      	beq.n	8004030 <HAL_ADC_IRQHandler+0x340>
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00d      	beq.n	8004030 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004018:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fd45 	bl	8004ab0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800402e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004036:	2b00      	cmp	r3, #0
 8004038:	d012      	beq.n	8004060 <HAL_ADC_IRQHandler+0x370>
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00d      	beq.n	8004060 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004048:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 fd37 	bl	8004ac4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800405e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	2b00      	cmp	r3, #0
 8004068:	d036      	beq.n	80040d8 <HAL_ADC_IRQHandler+0x3e8>
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	f003 0310 	and.w	r3, r3, #16
 8004070:	2b00      	cmp	r3, #0
 8004072:	d031      	beq.n	80040d8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004078:	2b00      	cmp	r3, #0
 800407a:	d102      	bne.n	8004082 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800407c:	2301      	movs	r3, #1
 800407e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004080:	e014      	b.n	80040ac <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d008      	beq.n	800409a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004088:	4825      	ldr	r0, [pc, #148]	@ (8004120 <HAL_ADC_IRQHandler+0x430>)
 800408a:	f7ff fae7 	bl	800365c <LL_ADC_GetMultiDMATransfer>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00b      	beq.n	80040ac <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8004094:	2301      	movs	r3, #1
 8004096:	627b      	str	r3, [r7, #36]	@ 0x24
 8004098:	e008      	b.n	80040ac <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80040a8:	2301      	movs	r3, #1
 80040aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80040ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d10e      	bne.n	80040d0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c2:	f043 0202 	orr.w	r2, r3, #2
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f834 	bl	8004138 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2210      	movs	r2, #16
 80040d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d018      	beq.n	8004114 <HAL_ADC_IRQHandler+0x424>
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d013      	beq.n	8004114 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fc:	f043 0208 	orr.w	r2, r3, #8
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800410c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fcc4 	bl	8004a9c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004114:	bf00      	nop
 8004116:	3728      	adds	r7, #40	@ 0x28
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	50040000 	.word	0x50040000
 8004120:	50040300 	.word	0x50040300

08004124 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b0b6      	sub	sp, #216	@ 0xd8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800415c:	2300      	movs	r3, #0
 800415e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_ADC_ConfigChannel+0x22>
 800416a:	2302      	movs	r3, #2
 800416c:	e3c9      	b.n	8004902 <HAL_ADC_ConfigChannel+0x7b6>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fb05 	bl	800378a <LL_ADC_REG_IsConversionOngoing>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	f040 83aa 	bne.w	80048dc <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b05      	cmp	r3, #5
 8004196:	d824      	bhi.n	80041e2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	3b02      	subs	r3, #2
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d81b      	bhi.n	80041da <HAL_ADC_ConfigChannel+0x8e>
 80041a2:	a201      	add	r2, pc, #4	@ (adr r2, 80041a8 <HAL_ADC_ConfigChannel+0x5c>)
 80041a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a8:	080041b9 	.word	0x080041b9
 80041ac:	080041c1 	.word	0x080041c1
 80041b0:	080041c9 	.word	0x080041c9
 80041b4:	080041d1 	.word	0x080041d1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80041b8:	230c      	movs	r3, #12
 80041ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80041be:	e010      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80041c0:	2312      	movs	r3, #18
 80041c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80041c6:	e00c      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80041c8:	2318      	movs	r3, #24
 80041ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80041ce:	e008      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80041d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80041d8:	e003      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80041da:	2306      	movs	r3, #6
 80041dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80041e0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80041f0:	f7ff f998 	bl	8003524 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff fac6 	bl	800378a <LL_ADC_REG_IsConversionOngoing>
 80041fe:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff fad2 	bl	80037b0 <LL_ADC_INJ_IsConversionOngoing>
 800420c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004210:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004214:	2b00      	cmp	r3, #0
 8004216:	f040 81a4 	bne.w	8004562 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800421a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800421e:	2b00      	cmp	r3, #0
 8004220:	f040 819f 	bne.w	8004562 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	6819      	ldr	r1, [r3, #0]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	461a      	mov	r2, r3
 8004232:	f7ff f9b6 	bl	80035a2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	695a      	ldr	r2, [r3, #20]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	08db      	lsrs	r3, r3, #3
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	2b04      	cmp	r3, #4
 8004256:	d00a      	beq.n	800426e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	6919      	ldr	r1, [r3, #16]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004268:	f7ff f8f4 	bl	8003454 <LL_ADC_SetOffset>
 800426c:	e179      	b.n	8004562 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2100      	movs	r1, #0
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff f911 	bl	800349c <LL_ADC_GetOffsetChannel>
 800427a:	4603      	mov	r3, r0
 800427c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10a      	bne.n	800429a <HAL_ADC_ConfigChannel+0x14e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2100      	movs	r1, #0
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff f906 	bl	800349c <LL_ADC_GetOffsetChannel>
 8004290:	4603      	mov	r3, r0
 8004292:	0e9b      	lsrs	r3, r3, #26
 8004294:	f003 021f 	and.w	r2, r3, #31
 8004298:	e01e      	b.n	80042d8 <HAL_ADC_ConfigChannel+0x18c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2100      	movs	r1, #0
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff f8fb 	bl	800349c <LL_ADC_GetOffsetChannel>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80042b0:	fa93 f3a3 	rbit	r3, r3
 80042b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80042bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80042c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80042c8:	2320      	movs	r3, #32
 80042ca:	e004      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80042cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80042d0:	fab3 f383 	clz	r3, r3
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d105      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x1a4>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	0e9b      	lsrs	r3, r3, #26
 80042ea:	f003 031f 	and.w	r3, r3, #31
 80042ee:	e018      	b.n	8004322 <HAL_ADC_ConfigChannel+0x1d6>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004304:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004308:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800430c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004314:	2320      	movs	r3, #32
 8004316:	e004      	b.n	8004322 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004318:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800431c:	fab3 f383 	clz	r3, r3
 8004320:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004322:	429a      	cmp	r2, r3
 8004324:	d106      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2200      	movs	r2, #0
 800432c:	2100      	movs	r1, #0
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff f8ca 	bl	80034c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2101      	movs	r1, #1
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff f8ae 	bl	800349c <LL_ADC_GetOffsetChannel>
 8004340:	4603      	mov	r3, r0
 8004342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10a      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x214>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2101      	movs	r1, #1
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff f8a3 	bl	800349c <LL_ADC_GetOffsetChannel>
 8004356:	4603      	mov	r3, r0
 8004358:	0e9b      	lsrs	r3, r3, #26
 800435a:	f003 021f 	and.w	r2, r3, #31
 800435e:	e01e      	b.n	800439e <HAL_ADC_ConfigChannel+0x252>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2101      	movs	r1, #1
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff f898 	bl	800349c <LL_ADC_GetOffsetChannel>
 800436c:	4603      	mov	r3, r0
 800436e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004376:	fa93 f3a3 	rbit	r3, r3
 800437a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800437e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004382:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004386:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800438e:	2320      	movs	r3, #32
 8004390:	e004      	b.n	800439c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004392:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004396:	fab3 f383 	clz	r3, r3
 800439a:	b2db      	uxtb	r3, r3
 800439c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d105      	bne.n	80043b6 <HAL_ADC_ConfigChannel+0x26a>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	0e9b      	lsrs	r3, r3, #26
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	e018      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x29c>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043c2:	fa93 f3a3 	rbit	r3, r3
 80043c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80043ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80043d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80043da:	2320      	movs	r3, #32
 80043dc:	e004      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80043de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043e2:	fab3 f383 	clz	r3, r3
 80043e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d106      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2200      	movs	r2, #0
 80043f2:	2101      	movs	r1, #1
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff f867 	bl	80034c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2102      	movs	r1, #2
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff f84b 	bl	800349c <LL_ADC_GetOffsetChannel>
 8004406:	4603      	mov	r3, r0
 8004408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x2da>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2102      	movs	r1, #2
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff f840 	bl	800349c <LL_ADC_GetOffsetChannel>
 800441c:	4603      	mov	r3, r0
 800441e:	0e9b      	lsrs	r3, r3, #26
 8004420:	f003 021f 	and.w	r2, r3, #31
 8004424:	e01e      	b.n	8004464 <HAL_ADC_ConfigChannel+0x318>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2102      	movs	r1, #2
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff f835 	bl	800349c <LL_ADC_GetOffsetChannel>
 8004432:	4603      	mov	r3, r0
 8004434:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004438:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800443c:	fa93 f3a3 	rbit	r3, r3
 8004440:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004444:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004448:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800444c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8004454:	2320      	movs	r3, #32
 8004456:	e004      	b.n	8004462 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004458:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800445c:	fab3 f383 	clz	r3, r3
 8004460:	b2db      	uxtb	r3, r3
 8004462:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800446c:	2b00      	cmp	r3, #0
 800446e:	d105      	bne.n	800447c <HAL_ADC_ConfigChannel+0x330>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	0e9b      	lsrs	r3, r3, #26
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	e014      	b.n	80044a6 <HAL_ADC_ConfigChannel+0x35a>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004484:	fa93 f3a3 	rbit	r3, r3
 8004488:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800448a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800448c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004490:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004498:	2320      	movs	r3, #32
 800449a:	e004      	b.n	80044a6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800449c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80044a0:	fab3 f383 	clz	r3, r3
 80044a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d106      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2200      	movs	r2, #0
 80044b0:	2102      	movs	r1, #2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff f808 	bl	80034c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2103      	movs	r1, #3
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe ffec 	bl	800349c <LL_ADC_GetOffsetChannel>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10a      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x398>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2103      	movs	r1, #3
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fe ffe1 	bl	800349c <LL_ADC_GetOffsetChannel>
 80044da:	4603      	mov	r3, r0
 80044dc:	0e9b      	lsrs	r3, r3, #26
 80044de:	f003 021f 	and.w	r2, r3, #31
 80044e2:	e017      	b.n	8004514 <HAL_ADC_ConfigChannel+0x3c8>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2103      	movs	r1, #3
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe ffd6 	bl	800349c <LL_ADC_GetOffsetChannel>
 80044f0:	4603      	mov	r3, r0
 80044f2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044f6:	fa93 f3a3 	rbit	r3, r3
 80044fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80044fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044fe:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004500:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004506:	2320      	movs	r3, #32
 8004508:	e003      	b.n	8004512 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800450a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800450c:	fab3 f383 	clz	r3, r3
 8004510:	b2db      	uxtb	r3, r3
 8004512:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800451c:	2b00      	cmp	r3, #0
 800451e:	d105      	bne.n	800452c <HAL_ADC_ConfigChannel+0x3e0>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	0e9b      	lsrs	r3, r3, #26
 8004526:	f003 031f 	and.w	r3, r3, #31
 800452a:	e011      	b.n	8004550 <HAL_ADC_ConfigChannel+0x404>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004532:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004534:	fa93 f3a3 	rbit	r3, r3
 8004538:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800453a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800453c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800453e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004544:	2320      	movs	r3, #32
 8004546:	e003      	b.n	8004550 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004548:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800454a:	fab3 f383 	clz	r3, r3
 800454e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004550:	429a      	cmp	r2, r3
 8004552:	d106      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2200      	movs	r2, #0
 800455a:	2103      	movs	r1, #3
 800455c:	4618      	mov	r0, r3
 800455e:	f7fe ffb3 	bl	80034c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff f8e8 	bl	800373c <LL_ADC_IsEnabled>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	f040 8140 	bne.w	80047f4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	6819      	ldr	r1, [r3, #0]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	461a      	mov	r2, r3
 8004582:	f7ff f839 	bl	80035f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	4a8f      	ldr	r2, [pc, #572]	@ (80047c8 <HAL_ADC_ConfigChannel+0x67c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	f040 8131 	bne.w	80047f4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10b      	bne.n	80045ba <HAL_ADC_ConfigChannel+0x46e>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	0e9b      	lsrs	r3, r3, #26
 80045a8:	3301      	adds	r3, #1
 80045aa:	f003 031f 	and.w	r3, r3, #31
 80045ae:	2b09      	cmp	r3, #9
 80045b0:	bf94      	ite	ls
 80045b2:	2301      	movls	r3, #1
 80045b4:	2300      	movhi	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	e019      	b.n	80045ee <HAL_ADC_ConfigChannel+0x4a2>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045c2:	fa93 f3a3 	rbit	r3, r3
 80045c6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80045c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80045cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80045d2:	2320      	movs	r3, #32
 80045d4:	e003      	b.n	80045de <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80045d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045d8:	fab3 f383 	clz	r3, r3
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	3301      	adds	r3, #1
 80045e0:	f003 031f 	and.w	r3, r3, #31
 80045e4:	2b09      	cmp	r3, #9
 80045e6:	bf94      	ite	ls
 80045e8:	2301      	movls	r3, #1
 80045ea:	2300      	movhi	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d079      	beq.n	80046e6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d107      	bne.n	800460e <HAL_ADC_ConfigChannel+0x4c2>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	0e9b      	lsrs	r3, r3, #26
 8004604:	3301      	adds	r3, #1
 8004606:	069b      	lsls	r3, r3, #26
 8004608:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800460c:	e015      	b.n	800463a <HAL_ADC_ConfigChannel+0x4ee>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004616:	fa93 f3a3 	rbit	r3, r3
 800461a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800461c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800461e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8004626:	2320      	movs	r3, #32
 8004628:	e003      	b.n	8004632 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800462a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800462c:	fab3 f383 	clz	r3, r3
 8004630:	b2db      	uxtb	r3, r3
 8004632:	3301      	adds	r3, #1
 8004634:	069b      	lsls	r3, r3, #26
 8004636:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <HAL_ADC_ConfigChannel+0x50e>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	0e9b      	lsrs	r3, r3, #26
 800464c:	3301      	adds	r3, #1
 800464e:	f003 031f 	and.w	r3, r3, #31
 8004652:	2101      	movs	r1, #1
 8004654:	fa01 f303 	lsl.w	r3, r1, r3
 8004658:	e017      	b.n	800468a <HAL_ADC_ConfigChannel+0x53e>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004660:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004662:	fa93 f3a3 	rbit	r3, r3
 8004666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800466a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800466c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004672:	2320      	movs	r3, #32
 8004674:	e003      	b.n	800467e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004678:	fab3 f383 	clz	r3, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	3301      	adds	r3, #1
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	2101      	movs	r1, #1
 8004686:	fa01 f303 	lsl.w	r3, r1, r3
 800468a:	ea42 0103 	orr.w	r1, r2, r3
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10a      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x564>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	0e9b      	lsrs	r3, r3, #26
 80046a0:	3301      	adds	r3, #1
 80046a2:	f003 021f 	and.w	r2, r3, #31
 80046a6:	4613      	mov	r3, r2
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	4413      	add	r3, r2
 80046ac:	051b      	lsls	r3, r3, #20
 80046ae:	e018      	b.n	80046e2 <HAL_ADC_ConfigChannel+0x596>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b8:	fa93 f3a3 	rbit	r3, r3
 80046bc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80046be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80046c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80046c8:	2320      	movs	r3, #32
 80046ca:	e003      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80046cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ce:	fab3 f383 	clz	r3, r3
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	3301      	adds	r3, #1
 80046d6:	f003 021f 	and.w	r2, r3, #31
 80046da:	4613      	mov	r3, r2
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	4413      	add	r3, r2
 80046e0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046e2:	430b      	orrs	r3, r1
 80046e4:	e081      	b.n	80047ea <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d107      	bne.n	8004702 <HAL_ADC_ConfigChannel+0x5b6>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	0e9b      	lsrs	r3, r3, #26
 80046f8:	3301      	adds	r3, #1
 80046fa:	069b      	lsls	r3, r3, #26
 80046fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004700:	e015      	b.n	800472e <HAL_ADC_ConfigChannel+0x5e2>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470a:	fa93 f3a3 	rbit	r3, r3
 800470e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800471a:	2320      	movs	r3, #32
 800471c:	e003      	b.n	8004726 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800471e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004720:	fab3 f383 	clz	r3, r3
 8004724:	b2db      	uxtb	r3, r3
 8004726:	3301      	adds	r3, #1
 8004728:	069b      	lsls	r3, r3, #26
 800472a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <HAL_ADC_ConfigChannel+0x602>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	0e9b      	lsrs	r3, r3, #26
 8004740:	3301      	adds	r3, #1
 8004742:	f003 031f 	and.w	r3, r3, #31
 8004746:	2101      	movs	r1, #1
 8004748:	fa01 f303 	lsl.w	r3, r1, r3
 800474c:	e017      	b.n	800477e <HAL_ADC_ConfigChannel+0x632>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	fa93 f3a3 	rbit	r3, r3
 800475a:	61bb      	str	r3, [r7, #24]
  return result;
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8004766:	2320      	movs	r3, #32
 8004768:	e003      	b.n	8004772 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	fab3 f383 	clz	r3, r3
 8004770:	b2db      	uxtb	r3, r3
 8004772:	3301      	adds	r3, #1
 8004774:	f003 031f 	and.w	r3, r3, #31
 8004778:	2101      	movs	r1, #1
 800477a:	fa01 f303 	lsl.w	r3, r1, r3
 800477e:	ea42 0103 	orr.w	r1, r2, r3
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10d      	bne.n	80047aa <HAL_ADC_ConfigChannel+0x65e>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	0e9b      	lsrs	r3, r3, #26
 8004794:	3301      	adds	r3, #1
 8004796:	f003 021f 	and.w	r2, r3, #31
 800479a:	4613      	mov	r3, r2
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	4413      	add	r3, r2
 80047a0:	3b1e      	subs	r3, #30
 80047a2:	051b      	lsls	r3, r3, #20
 80047a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80047a8:	e01e      	b.n	80047e8 <HAL_ADC_ConfigChannel+0x69c>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	fa93 f3a3 	rbit	r3, r3
 80047b6:	60fb      	str	r3, [r7, #12]
  return result;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d104      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80047c2:	2320      	movs	r3, #32
 80047c4:	e006      	b.n	80047d4 <HAL_ADC_ConfigChannel+0x688>
 80047c6:	bf00      	nop
 80047c8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	fab3 f383 	clz	r3, r3
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	3301      	adds	r3, #1
 80047d6:	f003 021f 	and.w	r2, r3, #31
 80047da:	4613      	mov	r3, r2
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	4413      	add	r3, r2
 80047e0:	3b1e      	subs	r3, #30
 80047e2:	051b      	lsls	r3, r3, #20
 80047e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047e8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047ee:	4619      	mov	r1, r3
 80047f0:	f7fe fed7 	bl	80035a2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	4b44      	ldr	r3, [pc, #272]	@ (800490c <HAL_ADC_ConfigChannel+0x7c0>)
 80047fa:	4013      	ands	r3, r2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d07a      	beq.n	80048f6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004800:	4843      	ldr	r0, [pc, #268]	@ (8004910 <HAL_ADC_ConfigChannel+0x7c4>)
 8004802:	f7fe fe19 	bl	8003438 <LL_ADC_GetCommonPathInternalCh>
 8004806:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a41      	ldr	r2, [pc, #260]	@ (8004914 <HAL_ADC_ConfigChannel+0x7c8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d12c      	bne.n	800486e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004814:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004818:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d126      	bne.n	800486e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a3c      	ldr	r2, [pc, #240]	@ (8004918 <HAL_ADC_ConfigChannel+0x7cc>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <HAL_ADC_ConfigChannel+0x6e8>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a3b      	ldr	r2, [pc, #236]	@ (800491c <HAL_ADC_ConfigChannel+0x7d0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d15d      	bne.n	80048f0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004834:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004838:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800483c:	4619      	mov	r1, r3
 800483e:	4834      	ldr	r0, [pc, #208]	@ (8004910 <HAL_ADC_ConfigChannel+0x7c4>)
 8004840:	f7fe fde7 	bl	8003412 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004844:	4b36      	ldr	r3, [pc, #216]	@ (8004920 <HAL_ADC_ConfigChannel+0x7d4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	099b      	lsrs	r3, r3, #6
 800484a:	4a36      	ldr	r2, [pc, #216]	@ (8004924 <HAL_ADC_ConfigChannel+0x7d8>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	099b      	lsrs	r3, r3, #6
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	4613      	mov	r3, r2
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	4413      	add	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800485e:	e002      	b.n	8004866 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	3b01      	subs	r3, #1
 8004864:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1f9      	bne.n	8004860 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800486c:	e040      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a2d      	ldr	r2, [pc, #180]	@ (8004928 <HAL_ADC_ConfigChannel+0x7dc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d118      	bne.n	80048aa <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004878:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800487c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d112      	bne.n	80048aa <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a23      	ldr	r2, [pc, #140]	@ (8004918 <HAL_ADC_ConfigChannel+0x7cc>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d004      	beq.n	8004898 <HAL_ADC_ConfigChannel+0x74c>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a22      	ldr	r2, [pc, #136]	@ (800491c <HAL_ADC_ConfigChannel+0x7d0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d12d      	bne.n	80048f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004898:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800489c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048a0:	4619      	mov	r1, r3
 80048a2:	481b      	ldr	r0, [pc, #108]	@ (8004910 <HAL_ADC_ConfigChannel+0x7c4>)
 80048a4:	f7fe fdb5 	bl	8003412 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048a8:	e024      	b.n	80048f4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a1f      	ldr	r2, [pc, #124]	@ (800492c <HAL_ADC_ConfigChannel+0x7e0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d120      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d11a      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a14      	ldr	r2, [pc, #80]	@ (8004918 <HAL_ADC_ConfigChannel+0x7cc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d115      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048d2:	4619      	mov	r1, r3
 80048d4:	480e      	ldr	r0, [pc, #56]	@ (8004910 <HAL_ADC_ConfigChannel+0x7c4>)
 80048d6:	f7fe fd9c 	bl	8003412 <LL_ADC_SetCommonPathInternalCh>
 80048da:	e00c      	b.n	80048f6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e0:	f043 0220 	orr.w	r2, r3, #32
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80048ee:	e002      	b.n	80048f6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048f0:	bf00      	nop
 80048f2:	e000      	b.n	80048f6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80048fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004902:	4618      	mov	r0, r3
 8004904:	37d8      	adds	r7, #216	@ 0xd8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	80080000 	.word	0x80080000
 8004910:	50040300 	.word	0x50040300
 8004914:	c7520000 	.word	0xc7520000
 8004918:	50040000 	.word	0x50040000
 800491c:	50040200 	.word	0x50040200
 8004920:	20000004 	.word	0x20000004
 8004924:	053e2d63 	.word	0x053e2d63
 8004928:	cb840000 	.word	0xcb840000
 800492c:	80000001 	.word	0x80000001

08004930 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004938:	2300      	movs	r3, #0
 800493a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f7fe fefb 	bl	800373c <LL_ADC_IsEnabled>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d169      	bne.n	8004a20 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	4b36      	ldr	r3, [pc, #216]	@ (8004a2c <ADC_Enable+0xfc>)
 8004954:	4013      	ands	r3, r2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00d      	beq.n	8004976 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495e:	f043 0210 	orr.w	r2, r3, #16
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496a:	f043 0201 	orr.w	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e055      	b.n	8004a22 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f7fe feca 	bl	8003714 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004980:	482b      	ldr	r0, [pc, #172]	@ (8004a30 <ADC_Enable+0x100>)
 8004982:	f7fe fd59 	bl	8003438 <LL_ADC_GetCommonPathInternalCh>
 8004986:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004988:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800498c:	2b00      	cmp	r3, #0
 800498e:	d013      	beq.n	80049b8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004990:	4b28      	ldr	r3, [pc, #160]	@ (8004a34 <ADC_Enable+0x104>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	099b      	lsrs	r3, r3, #6
 8004996:	4a28      	ldr	r2, [pc, #160]	@ (8004a38 <ADC_Enable+0x108>)
 8004998:	fba2 2303 	umull	r2, r3, r2, r3
 800499c:	099b      	lsrs	r3, r3, #6
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	4613      	mov	r3, r2
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049aa:	e002      	b.n	80049b2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f9      	bne.n	80049ac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80049b8:	f7fe fce8 	bl	800338c <HAL_GetTick>
 80049bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049be:	e028      	b.n	8004a12 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fe feb9 	bl	800373c <LL_ADC_IsEnabled>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d104      	bne.n	80049da <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fe fe9d 	bl	8003714 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049da:	f7fe fcd7 	bl	800338c <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d914      	bls.n	8004a12 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d00d      	beq.n	8004a12 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049fa:	f043 0210 	orr.w	r2, r3, #16
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a06:	f043 0201 	orr.w	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e007      	b.n	8004a22 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d1cf      	bne.n	80049c0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	8000003f 	.word	0x8000003f
 8004a30:	50040300 	.word	0x50040300
 8004a34:	20000004 	.word	0x20000004
 8004a38:	053e2d63 	.word	0x053e2d63

08004a3c <LL_ADC_IsEnabled>:
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <LL_ADC_IsEnabled+0x18>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <LL_ADC_IsEnabled+0x1a>
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <LL_ADC_REG_IsConversionOngoing>:
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d101      	bne.n	8004a7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	b09f      	sub	sp, #124	@ 0x7c
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e093      	b.n	8004c32 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004b12:	2300      	movs	r3, #0
 8004b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004b16:	2300      	movs	r3, #0
 8004b18:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a47      	ldr	r2, [pc, #284]	@ (8004c3c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d102      	bne.n	8004b2a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b24:	4b46      	ldr	r3, [pc, #280]	@ (8004c40 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004b26:	60bb      	str	r3, [r7, #8]
 8004b28:	e001      	b.n	8004b2e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10b      	bne.n	8004b4c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b38:	f043 0220 	orr.w	r2, r3, #32
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e072      	b.n	8004c32 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff ff87 	bl	8004a62 <LL_ADC_REG_IsConversionOngoing>
 8004b54:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff ff81 	bl	8004a62 <LL_ADC_REG_IsConversionOngoing>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d154      	bne.n	8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004b66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d151      	bne.n	8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004b6c:	4b35      	ldr	r3, [pc, #212]	@ (8004c44 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004b6e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d02c      	beq.n	8004bd2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004b78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	6859      	ldr	r1, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b8a:	035b      	lsls	r3, r3, #13
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b92:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b94:	4829      	ldr	r0, [pc, #164]	@ (8004c3c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004b96:	f7ff ff51 	bl	8004a3c <LL_ADC_IsEnabled>
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	4828      	ldr	r0, [pc, #160]	@ (8004c40 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004b9e:	f7ff ff4d 	bl	8004a3c <LL_ADC_IsEnabled>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	431c      	orrs	r4, r3
 8004ba6:	4828      	ldr	r0, [pc, #160]	@ (8004c48 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004ba8:	f7ff ff48 	bl	8004a3c <LL_ADC_IsEnabled>
 8004bac:	4603      	mov	r3, r0
 8004bae:	4323      	orrs	r3, r4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d137      	bne.n	8004c24 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004bbc:	f023 030f 	bic.w	r3, r3, #15
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	6811      	ldr	r1, [r2, #0]
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	6892      	ldr	r2, [r2, #8]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bce:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004bd0:	e028      	b.n	8004c24 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004bd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bdc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bde:	4817      	ldr	r0, [pc, #92]	@ (8004c3c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004be0:	f7ff ff2c 	bl	8004a3c <LL_ADC_IsEnabled>
 8004be4:	4604      	mov	r4, r0
 8004be6:	4816      	ldr	r0, [pc, #88]	@ (8004c40 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004be8:	f7ff ff28 	bl	8004a3c <LL_ADC_IsEnabled>
 8004bec:	4603      	mov	r3, r0
 8004bee:	431c      	orrs	r4, r3
 8004bf0:	4815      	ldr	r0, [pc, #84]	@ (8004c48 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004bf2:	f7ff ff23 	bl	8004a3c <LL_ADC_IsEnabled>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4323      	orrs	r3, r4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d112      	bne.n	8004c24 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004bfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c06:	f023 030f 	bic.w	r3, r3, #15
 8004c0a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c0c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c0e:	e009      	b.n	8004c24 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c14:	f043 0220 	orr.w	r2, r3, #32
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004c22:	e000      	b.n	8004c26 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c2e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	377c      	adds	r7, #124	@ 0x7c
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd90      	pop	{r4, r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	50040000 	.word	0x50040000
 8004c40:	50040100 	.word	0x50040100
 8004c44:	50040300 	.word	0x50040300
 8004c48:	50040200 	.word	0x50040200

08004c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c90 <__NVIC_SetPriorityGrouping+0x44>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c68:	4013      	ands	r3, r2
 8004c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c7e:	4a04      	ldr	r2, [pc, #16]	@ (8004c90 <__NVIC_SetPriorityGrouping+0x44>)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	60d3      	str	r3, [r2, #12]
}
 8004c84:	bf00      	nop
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	e000ed00 	.word	0xe000ed00

08004c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c98:	4b04      	ldr	r3, [pc, #16]	@ (8004cac <__NVIC_GetPriorityGrouping+0x18>)
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	0a1b      	lsrs	r3, r3, #8
 8004c9e:	f003 0307 	and.w	r3, r3, #7
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	e000ed00 	.word	0xe000ed00

08004cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	db0b      	blt.n	8004cda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	f003 021f 	and.w	r2, r3, #31
 8004cc8:	4907      	ldr	r1, [pc, #28]	@ (8004ce8 <__NVIC_EnableIRQ+0x38>)
 8004cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	2001      	movs	r0, #1
 8004cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8004cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	e000e100 	.word	0xe000e100

08004cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	6039      	str	r1, [r7, #0]
 8004cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	db0a      	blt.n	8004d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	490c      	ldr	r1, [pc, #48]	@ (8004d38 <__NVIC_SetPriority+0x4c>)
 8004d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0a:	0112      	lsls	r2, r2, #4
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	440b      	add	r3, r1
 8004d10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d14:	e00a      	b.n	8004d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	4908      	ldr	r1, [pc, #32]	@ (8004d3c <__NVIC_SetPriority+0x50>)
 8004d1c:	79fb      	ldrb	r3, [r7, #7]
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	3b04      	subs	r3, #4
 8004d24:	0112      	lsls	r2, r2, #4
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	440b      	add	r3, r1
 8004d2a:	761a      	strb	r2, [r3, #24]
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	e000e100 	.word	0xe000e100
 8004d3c:	e000ed00 	.word	0xe000ed00

08004d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b089      	sub	sp, #36	@ 0x24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f1c3 0307 	rsb	r3, r3, #7
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	bf28      	it	cs
 8004d5e:	2304      	movcs	r3, #4
 8004d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	3304      	adds	r3, #4
 8004d66:	2b06      	cmp	r3, #6
 8004d68:	d902      	bls.n	8004d70 <NVIC_EncodePriority+0x30>
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	3b03      	subs	r3, #3
 8004d6e:	e000      	b.n	8004d72 <NVIC_EncodePriority+0x32>
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d74:	f04f 32ff 	mov.w	r2, #4294967295
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43da      	mvns	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	401a      	ands	r2, r3
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d88:	f04f 31ff 	mov.w	r1, #4294967295
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d92:	43d9      	mvns	r1, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d98:	4313      	orrs	r3, r2
         );
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3724      	adds	r7, #36	@ 0x24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
	...

08004da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004db8:	d301      	bcc.n	8004dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e00f      	b.n	8004dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8004de8 <SysTick_Config+0x40>)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004dc6:	210f      	movs	r1, #15
 8004dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dcc:	f7ff ff8e 	bl	8004cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004dd0:	4b05      	ldr	r3, [pc, #20]	@ (8004de8 <SysTick_Config+0x40>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004dd6:	4b04      	ldr	r3, [pc, #16]	@ (8004de8 <SysTick_Config+0x40>)
 8004dd8:	2207      	movs	r2, #7
 8004dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	e000e010 	.word	0xe000e010

08004dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff ff29 	bl	8004c4c <__NVIC_SetPriorityGrouping>
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b086      	sub	sp, #24
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	4603      	mov	r3, r0
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607a      	str	r2, [r7, #4]
 8004e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e14:	f7ff ff3e 	bl	8004c94 <__NVIC_GetPriorityGrouping>
 8004e18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	6978      	ldr	r0, [r7, #20]
 8004e20:	f7ff ff8e 	bl	8004d40 <NVIC_EncodePriority>
 8004e24:	4602      	mov	r2, r0
 8004e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff ff5d 	bl	8004cec <__NVIC_SetPriority>
}
 8004e32:	bf00      	nop
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b082      	sub	sp, #8
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	4603      	mov	r3, r0
 8004e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff ff31 	bl	8004cb0 <__NVIC_EnableIRQ>
}
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7ff ffa2 	bl	8004da8 <SysTick_Config>
 8004e64:	4603      	mov	r3, r0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e0ac      	b.n	8004fdc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 f8b2 	bl	8004ff0 <DFSDM_GetChannelFromInstance>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	4a55      	ldr	r2, [pc, #340]	@ (8004fe4 <HAL_DFSDM_ChannelInit+0x174>)
 8004e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e09f      	b.n	8004fdc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7fd f9d9 	bl	8002254 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004ea2:	4b51      	ldr	r3, [pc, #324]	@ (8004fe8 <HAL_DFSDM_ChannelInit+0x178>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	4a4f      	ldr	r2, [pc, #316]	@ (8004fe8 <HAL_DFSDM_ChannelInit+0x178>)
 8004eaa:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004eac:	4b4e      	ldr	r3, [pc, #312]	@ (8004fe8 <HAL_DFSDM_ChannelInit+0x178>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d125      	bne.n	8004f00 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004eb4:	4b4d      	ldr	r3, [pc, #308]	@ (8004fec <HAL_DFSDM_ChannelInit+0x17c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a4c      	ldr	r2, [pc, #304]	@ (8004fec <HAL_DFSDM_ChannelInit+0x17c>)
 8004eba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ebe:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004ec0:	4b4a      	ldr	r3, [pc, #296]	@ (8004fec <HAL_DFSDM_ChannelInit+0x17c>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	4948      	ldr	r1, [pc, #288]	@ (8004fec <HAL_DFSDM_ChannelInit+0x17c>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004ece:	4b47      	ldr	r3, [pc, #284]	@ (8004fec <HAL_DFSDM_ChannelInit+0x17c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a46      	ldr	r2, [pc, #280]	@ (8004fec <HAL_DFSDM_ChannelInit+0x17c>)
 8004ed4:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8004ed8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	791b      	ldrb	r3, [r3, #4]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d108      	bne.n	8004ef4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004ee2:	4b42      	ldr	r3, [pc, #264]	@ (8004fec <HAL_DFSDM_ChannelInit+0x17c>)
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	041b      	lsls	r3, r3, #16
 8004eee:	493f      	ldr	r1, [pc, #252]	@ (8004fec <HAL_DFSDM_ChannelInit+0x17c>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004ef4:	4b3d      	ldr	r3, [pc, #244]	@ (8004fec <HAL_DFSDM_ChannelInit+0x17c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a3c      	ldr	r2, [pc, #240]	@ (8004fec <HAL_DFSDM_ChannelInit+0x17c>)
 8004efa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004efe:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8004f0e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6819      	ldr	r1, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004f1e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004f24:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 020f 	bic.w	r2, r2, #15
 8004f3c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6819      	ldr	r1, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8004f64:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6899      	ldr	r1, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f74:	3b01      	subs	r3, #1
 8004f76:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f002 0207 	and.w	r2, r2, #7
 8004f90:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6859      	ldr	r1, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004fbc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 f810 	bl	8004ff0 <DFSDM_GetChannelFromInstance>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4904      	ldr	r1, [pc, #16]	@ (8004fe4 <HAL_DFSDM_ChannelInit+0x174>)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	20000b34 	.word	0x20000b34
 8004fe8:	20000b30 	.word	0x20000b30
 8004fec:	40016000 	.word	0x40016000

08004ff0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800506c <DFSDM_GetChannelFromInstance+0x7c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d102      	bne.n	8005006 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	e02b      	b.n	800505e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a19      	ldr	r2, [pc, #100]	@ (8005070 <DFSDM_GetChannelFromInstance+0x80>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d102      	bne.n	8005014 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800500e:	2301      	movs	r3, #1
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	e024      	b.n	800505e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a17      	ldr	r2, [pc, #92]	@ (8005074 <DFSDM_GetChannelFromInstance+0x84>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d102      	bne.n	8005022 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800501c:	2302      	movs	r3, #2
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	e01d      	b.n	800505e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a14      	ldr	r2, [pc, #80]	@ (8005078 <DFSDM_GetChannelFromInstance+0x88>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d102      	bne.n	8005030 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800502a:	2304      	movs	r3, #4
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	e016      	b.n	800505e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a12      	ldr	r2, [pc, #72]	@ (800507c <DFSDM_GetChannelFromInstance+0x8c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d102      	bne.n	800503e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8005038:	2305      	movs	r3, #5
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	e00f      	b.n	800505e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a0f      	ldr	r2, [pc, #60]	@ (8005080 <DFSDM_GetChannelFromInstance+0x90>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d102      	bne.n	800504c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8005046:	2306      	movs	r3, #6
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	e008      	b.n	800505e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a0d      	ldr	r2, [pc, #52]	@ (8005084 <DFSDM_GetChannelFromInstance+0x94>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d102      	bne.n	800505a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8005054:	2307      	movs	r3, #7
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	e001      	b.n	800505e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800505a:	2303      	movs	r3, #3
 800505c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800505e:	68fb      	ldr	r3, [r7, #12]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	40016000 	.word	0x40016000
 8005070:	40016020 	.word	0x40016020
 8005074:	40016040 	.word	0x40016040
 8005078:	40016080 	.word	0x40016080
 800507c:	400160a0 	.word	0x400160a0
 8005080:	400160c0 	.word	0x400160c0
 8005084:	400160e0 	.word	0x400160e0

08005088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005092:	2300      	movs	r3, #0
 8005094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005096:	e17f      	b.n	8005398 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	2101      	movs	r1, #1
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	fa01 f303 	lsl.w	r3, r1, r3
 80050a4:	4013      	ands	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 8171 	beq.w	8005392 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d005      	beq.n	80050c8 <HAL_GPIO_Init+0x40>
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d130      	bne.n	800512a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	2203      	movs	r2, #3
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	43db      	mvns	r3, r3
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4013      	ands	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050fe:	2201      	movs	r2, #1
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	43db      	mvns	r3, r3
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4013      	ands	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	091b      	lsrs	r3, r3, #4
 8005114:	f003 0201 	and.w	r2, r3, #1
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	2b03      	cmp	r3, #3
 8005134:	d118      	bne.n	8005168 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800513c:	2201      	movs	r2, #1
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	43db      	mvns	r3, r3
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4013      	ands	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	08db      	lsrs	r3, r3, #3
 8005152:	f003 0201 	and.w	r2, r3, #1
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4313      	orrs	r3, r2
 8005160:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	2b03      	cmp	r3, #3
 8005172:	d017      	beq.n	80051a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	2203      	movs	r2, #3
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	43db      	mvns	r3, r3
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4013      	ands	r3, r2
 800518a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f003 0303 	and.w	r3, r3, #3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d123      	bne.n	80051f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	08da      	lsrs	r2, r3, #3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3208      	adds	r2, #8
 80051b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	220f      	movs	r2, #15
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	43db      	mvns	r3, r3
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4013      	ands	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	691a      	ldr	r2, [r3, #16]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	08da      	lsrs	r2, r3, #3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3208      	adds	r2, #8
 80051f2:	6939      	ldr	r1, [r7, #16]
 80051f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	2203      	movs	r2, #3
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	43db      	mvns	r3, r3
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4013      	ands	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f003 0203 	and.w	r2, r3, #3
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 80ac 	beq.w	8005392 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800523a:	4b5f      	ldr	r3, [pc, #380]	@ (80053b8 <HAL_GPIO_Init+0x330>)
 800523c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800523e:	4a5e      	ldr	r2, [pc, #376]	@ (80053b8 <HAL_GPIO_Init+0x330>)
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	6613      	str	r3, [r2, #96]	@ 0x60
 8005246:	4b5c      	ldr	r3, [pc, #368]	@ (80053b8 <HAL_GPIO_Init+0x330>)
 8005248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	60bb      	str	r3, [r7, #8]
 8005250:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005252:	4a5a      	ldr	r2, [pc, #360]	@ (80053bc <HAL_GPIO_Init+0x334>)
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	089b      	lsrs	r3, r3, #2
 8005258:	3302      	adds	r3, #2
 800525a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800525e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	220f      	movs	r2, #15
 800526a:	fa02 f303 	lsl.w	r3, r2, r3
 800526e:	43db      	mvns	r3, r3
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4013      	ands	r3, r2
 8005274:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800527c:	d025      	beq.n	80052ca <HAL_GPIO_Init+0x242>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a4f      	ldr	r2, [pc, #316]	@ (80053c0 <HAL_GPIO_Init+0x338>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d01f      	beq.n	80052c6 <HAL_GPIO_Init+0x23e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a4e      	ldr	r2, [pc, #312]	@ (80053c4 <HAL_GPIO_Init+0x33c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d019      	beq.n	80052c2 <HAL_GPIO_Init+0x23a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a4d      	ldr	r2, [pc, #308]	@ (80053c8 <HAL_GPIO_Init+0x340>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <HAL_GPIO_Init+0x236>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a4c      	ldr	r2, [pc, #304]	@ (80053cc <HAL_GPIO_Init+0x344>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00d      	beq.n	80052ba <HAL_GPIO_Init+0x232>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a4b      	ldr	r2, [pc, #300]	@ (80053d0 <HAL_GPIO_Init+0x348>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d007      	beq.n	80052b6 <HAL_GPIO_Init+0x22e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a4a      	ldr	r2, [pc, #296]	@ (80053d4 <HAL_GPIO_Init+0x34c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d101      	bne.n	80052b2 <HAL_GPIO_Init+0x22a>
 80052ae:	2306      	movs	r3, #6
 80052b0:	e00c      	b.n	80052cc <HAL_GPIO_Init+0x244>
 80052b2:	2307      	movs	r3, #7
 80052b4:	e00a      	b.n	80052cc <HAL_GPIO_Init+0x244>
 80052b6:	2305      	movs	r3, #5
 80052b8:	e008      	b.n	80052cc <HAL_GPIO_Init+0x244>
 80052ba:	2304      	movs	r3, #4
 80052bc:	e006      	b.n	80052cc <HAL_GPIO_Init+0x244>
 80052be:	2303      	movs	r3, #3
 80052c0:	e004      	b.n	80052cc <HAL_GPIO_Init+0x244>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e002      	b.n	80052cc <HAL_GPIO_Init+0x244>
 80052c6:	2301      	movs	r3, #1
 80052c8:	e000      	b.n	80052cc <HAL_GPIO_Init+0x244>
 80052ca:	2300      	movs	r3, #0
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	f002 0203 	and.w	r2, r2, #3
 80052d2:	0092      	lsls	r2, r2, #2
 80052d4:	4093      	lsls	r3, r2
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80052dc:	4937      	ldr	r1, [pc, #220]	@ (80053bc <HAL_GPIO_Init+0x334>)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	089b      	lsrs	r3, r3, #2
 80052e2:	3302      	adds	r3, #2
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052ea:	4b3b      	ldr	r3, [pc, #236]	@ (80053d8 <HAL_GPIO_Init+0x350>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	43db      	mvns	r3, r3
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4013      	ands	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800530e:	4a32      	ldr	r2, [pc, #200]	@ (80053d8 <HAL_GPIO_Init+0x350>)
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005314:	4b30      	ldr	r3, [pc, #192]	@ (80053d8 <HAL_GPIO_Init+0x350>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	43db      	mvns	r3, r3
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	4013      	ands	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4313      	orrs	r3, r2
 8005336:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005338:	4a27      	ldr	r2, [pc, #156]	@ (80053d8 <HAL_GPIO_Init+0x350>)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800533e:	4b26      	ldr	r3, [pc, #152]	@ (80053d8 <HAL_GPIO_Init+0x350>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	43db      	mvns	r3, r3
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4013      	ands	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005362:	4a1d      	ldr	r2, [pc, #116]	@ (80053d8 <HAL_GPIO_Init+0x350>)
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005368:	4b1b      	ldr	r3, [pc, #108]	@ (80053d8 <HAL_GPIO_Init+0x350>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	43db      	mvns	r3, r3
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4013      	ands	r3, r2
 8005376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800538c:	4a12      	ldr	r2, [pc, #72]	@ (80053d8 <HAL_GPIO_Init+0x350>)
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	3301      	adds	r3, #1
 8005396:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	fa22 f303 	lsr.w	r3, r2, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f47f ae78 	bne.w	8005098 <HAL_GPIO_Init+0x10>
  }
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40021000 	.word	0x40021000
 80053bc:	40010000 	.word	0x40010000
 80053c0:	48000400 	.word	0x48000400
 80053c4:	48000800 	.word	0x48000800
 80053c8:	48000c00 	.word	0x48000c00
 80053cc:	48001000 	.word	0x48001000
 80053d0:	48001400 	.word	0x48001400
 80053d4:	48001800 	.word	0x48001800
 80053d8:	40010400 	.word	0x40010400

080053dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053e6:	2300      	movs	r3, #0
 80053e8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80053ea:	e0cd      	b.n	8005588 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80053ec:	2201      	movs	r2, #1
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	fa02 f303 	lsl.w	r3, r2, r3
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	4013      	ands	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 80c0 	beq.w	8005582 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005402:	4a68      	ldr	r2, [pc, #416]	@ (80055a4 <HAL_GPIO_DeInit+0x1c8>)
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	089b      	lsrs	r3, r3, #2
 8005408:	3302      	adds	r3, #2
 800540a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800540e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f003 0303 	and.w	r3, r3, #3
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	220f      	movs	r2, #15
 800541a:	fa02 f303 	lsl.w	r3, r2, r3
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4013      	ands	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800542a:	d025      	beq.n	8005478 <HAL_GPIO_DeInit+0x9c>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a5e      	ldr	r2, [pc, #376]	@ (80055a8 <HAL_GPIO_DeInit+0x1cc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d01f      	beq.n	8005474 <HAL_GPIO_DeInit+0x98>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a5d      	ldr	r2, [pc, #372]	@ (80055ac <HAL_GPIO_DeInit+0x1d0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d019      	beq.n	8005470 <HAL_GPIO_DeInit+0x94>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a5c      	ldr	r2, [pc, #368]	@ (80055b0 <HAL_GPIO_DeInit+0x1d4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d013      	beq.n	800546c <HAL_GPIO_DeInit+0x90>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a5b      	ldr	r2, [pc, #364]	@ (80055b4 <HAL_GPIO_DeInit+0x1d8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00d      	beq.n	8005468 <HAL_GPIO_DeInit+0x8c>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a5a      	ldr	r2, [pc, #360]	@ (80055b8 <HAL_GPIO_DeInit+0x1dc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d007      	beq.n	8005464 <HAL_GPIO_DeInit+0x88>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a59      	ldr	r2, [pc, #356]	@ (80055bc <HAL_GPIO_DeInit+0x1e0>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d101      	bne.n	8005460 <HAL_GPIO_DeInit+0x84>
 800545c:	2306      	movs	r3, #6
 800545e:	e00c      	b.n	800547a <HAL_GPIO_DeInit+0x9e>
 8005460:	2307      	movs	r3, #7
 8005462:	e00a      	b.n	800547a <HAL_GPIO_DeInit+0x9e>
 8005464:	2305      	movs	r3, #5
 8005466:	e008      	b.n	800547a <HAL_GPIO_DeInit+0x9e>
 8005468:	2304      	movs	r3, #4
 800546a:	e006      	b.n	800547a <HAL_GPIO_DeInit+0x9e>
 800546c:	2303      	movs	r3, #3
 800546e:	e004      	b.n	800547a <HAL_GPIO_DeInit+0x9e>
 8005470:	2302      	movs	r3, #2
 8005472:	e002      	b.n	800547a <HAL_GPIO_DeInit+0x9e>
 8005474:	2301      	movs	r3, #1
 8005476:	e000      	b.n	800547a <HAL_GPIO_DeInit+0x9e>
 8005478:	2300      	movs	r3, #0
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	f002 0203 	and.w	r2, r2, #3
 8005480:	0092      	lsls	r2, r2, #2
 8005482:	4093      	lsls	r3, r2
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	429a      	cmp	r2, r3
 8005488:	d132      	bne.n	80054f0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800548a:	4b4d      	ldr	r3, [pc, #308]	@ (80055c0 <HAL_GPIO_DeInit+0x1e4>)
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	43db      	mvns	r3, r3
 8005492:	494b      	ldr	r1, [pc, #300]	@ (80055c0 <HAL_GPIO_DeInit+0x1e4>)
 8005494:	4013      	ands	r3, r2
 8005496:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005498:	4b49      	ldr	r3, [pc, #292]	@ (80055c0 <HAL_GPIO_DeInit+0x1e4>)
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	43db      	mvns	r3, r3
 80054a0:	4947      	ldr	r1, [pc, #284]	@ (80055c0 <HAL_GPIO_DeInit+0x1e4>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80054a6:	4b46      	ldr	r3, [pc, #280]	@ (80055c0 <HAL_GPIO_DeInit+0x1e4>)
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	43db      	mvns	r3, r3
 80054ae:	4944      	ldr	r1, [pc, #272]	@ (80055c0 <HAL_GPIO_DeInit+0x1e4>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80054b4:	4b42      	ldr	r3, [pc, #264]	@ (80055c0 <HAL_GPIO_DeInit+0x1e4>)
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	43db      	mvns	r3, r3
 80054bc:	4940      	ldr	r1, [pc, #256]	@ (80055c0 <HAL_GPIO_DeInit+0x1e4>)
 80054be:	4013      	ands	r3, r2
 80054c0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f003 0303 	and.w	r3, r3, #3
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	220f      	movs	r2, #15
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80054d2:	4a34      	ldr	r2, [pc, #208]	@ (80055a4 <HAL_GPIO_DeInit+0x1c8>)
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	089b      	lsrs	r3, r3, #2
 80054d8:	3302      	adds	r3, #2
 80054da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	43da      	mvns	r2, r3
 80054e2:	4830      	ldr	r0, [pc, #192]	@ (80055a4 <HAL_GPIO_DeInit+0x1c8>)
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	089b      	lsrs	r3, r3, #2
 80054e8:	400a      	ands	r2, r1
 80054ea:	3302      	adds	r3, #2
 80054ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	2103      	movs	r1, #3
 80054fa:	fa01 f303 	lsl.w	r3, r1, r3
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	08da      	lsrs	r2, r3, #3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3208      	adds	r2, #8
 800550c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	220f      	movs	r2, #15
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	43db      	mvns	r3, r3
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	08d2      	lsrs	r2, r2, #3
 8005524:	4019      	ands	r1, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	3208      	adds	r2, #8
 800552a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	2103      	movs	r1, #3
 8005538:	fa01 f303 	lsl.w	r3, r1, r3
 800553c:	43db      	mvns	r3, r3
 800553e:	401a      	ands	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	2101      	movs	r1, #1
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	fa01 f303 	lsl.w	r3, r1, r3
 8005550:	43db      	mvns	r3, r3
 8005552:	401a      	ands	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	2103      	movs	r1, #3
 8005562:	fa01 f303 	lsl.w	r3, r1, r3
 8005566:	43db      	mvns	r3, r3
 8005568:	401a      	ands	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005572:	2101      	movs	r1, #1
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	fa01 f303 	lsl.w	r3, r1, r3
 800557a:	43db      	mvns	r3, r3
 800557c:	401a      	ands	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	3301      	adds	r3, #1
 8005586:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	fa22 f303 	lsr.w	r3, r2, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	f47f af2b 	bne.w	80053ec <HAL_GPIO_DeInit+0x10>
  }
}
 8005596:	bf00      	nop
 8005598:	bf00      	nop
 800559a:	371c      	adds	r7, #28
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	40010000 	.word	0x40010000
 80055a8:	48000400 	.word	0x48000400
 80055ac:	48000800 	.word	0x48000800
 80055b0:	48000c00 	.word	0x48000c00
 80055b4:	48001000 	.word	0x48001000
 80055b8:	48001400 	.word	0x48001400
 80055bc:	48001800 	.word	0x48001800
 80055c0:	40010400 	.word	0x40010400

080055c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	807b      	strh	r3, [r7, #2]
 80055d0:	4613      	mov	r3, r2
 80055d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055d4:	787b      	ldrb	r3, [r7, #1]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055da:	887a      	ldrh	r2, [r7, #2]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055e0:	e002      	b.n	80055e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055e2:	887a      	ldrh	r2, [r7, #2]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005606:	887a      	ldrh	r2, [r7, #2]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4013      	ands	r3, r2
 800560c:	041a      	lsls	r2, r3, #16
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	43d9      	mvns	r1, r3
 8005612:	887b      	ldrh	r3, [r7, #2]
 8005614:	400b      	ands	r3, r1
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	619a      	str	r2, [r3, #24]
}
 800561c:	bf00      	nop
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	4603      	mov	r3, r0
 8005630:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005632:	4b08      	ldr	r3, [pc, #32]	@ (8005654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005634:	695a      	ldr	r2, [r3, #20]
 8005636:	88fb      	ldrh	r3, [r7, #6]
 8005638:	4013      	ands	r3, r2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d006      	beq.n	800564c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800563e:	4a05      	ldr	r2, [pc, #20]	@ (8005654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	4618      	mov	r0, r3
 8005648:	f7fc fb58 	bl	8001cfc <HAL_GPIO_EXTI_Callback>
  }
}
 800564c:	bf00      	nop
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40010400 	.word	0x40010400

08005658 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e08d      	b.n	8005786 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fc fe4c 	bl	800231c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2224      	movs	r2, #36	@ 0x24
 8005688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0201 	bic.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80056a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d107      	bne.n	80056d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056ce:	609a      	str	r2, [r3, #8]
 80056d0:	e006      	b.n	80056e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80056de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d108      	bne.n	80056fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056f6:	605a      	str	r2, [r3, #4]
 80056f8:	e007      	b.n	800570a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005708:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005718:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800571c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800572c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691a      	ldr	r2, [r3, #16]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	69d9      	ldr	r1, [r3, #28]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a1a      	ldr	r2, [r3, #32]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b082      	sub	sp, #8
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e021      	b.n	80057e4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2224      	movs	r2, #36	@ 0x24
 80057a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0201 	bic.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7fc fe0d 	bl	80023d8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	4608      	mov	r0, r1
 80057f6:	4611      	mov	r1, r2
 80057f8:	461a      	mov	r2, r3
 80057fa:	4603      	mov	r3, r0
 80057fc:	817b      	strh	r3, [r7, #10]
 80057fe:	460b      	mov	r3, r1
 8005800:	813b      	strh	r3, [r7, #8]
 8005802:	4613      	mov	r3, r2
 8005804:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b20      	cmp	r3, #32
 8005810:	f040 80f9 	bne.w	8005a06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <HAL_I2C_Mem_Write+0x34>
 800581a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800581c:	2b00      	cmp	r3, #0
 800581e:	d105      	bne.n	800582c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005826:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e0ed      	b.n	8005a08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <HAL_I2C_Mem_Write+0x4e>
 8005836:	2302      	movs	r3, #2
 8005838:	e0e6      	b.n	8005a08 <HAL_I2C_Mem_Write+0x21c>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005842:	f7fd fda3 	bl	800338c <HAL_GetTick>
 8005846:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	2319      	movs	r3, #25
 800584e:	2201      	movs	r2, #1
 8005850:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 fac3 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e0d1      	b.n	8005a08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2221      	movs	r2, #33	@ 0x21
 8005868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2240      	movs	r2, #64	@ 0x40
 8005870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a3a      	ldr	r2, [r7, #32]
 800587e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005884:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800588c:	88f8      	ldrh	r0, [r7, #6]
 800588e:	893a      	ldrh	r2, [r7, #8]
 8005890:	8979      	ldrh	r1, [r7, #10]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	9301      	str	r3, [sp, #4]
 8005896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	4603      	mov	r3, r0
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 f9d3 	bl	8005c48 <I2C_RequestMemoryWrite>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d005      	beq.n	80058b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e0a9      	b.n	8005a08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2bff      	cmp	r3, #255	@ 0xff
 80058bc:	d90e      	bls.n	80058dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	22ff      	movs	r2, #255	@ 0xff
 80058c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	8979      	ldrh	r1, [r7, #10]
 80058cc:	2300      	movs	r3, #0
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 fc47 	bl	8006168 <I2C_TransferConfig>
 80058da:	e00f      	b.n	80058fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	8979      	ldrh	r1, [r7, #10]
 80058ee:	2300      	movs	r3, #0
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 fc36 	bl	8006168 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 fac6 	bl	8005e92 <I2C_WaitOnTXISFlagUntilTimeout>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e07b      	b.n	8005a08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005914:	781a      	ldrb	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005938:	3b01      	subs	r3, #1
 800593a:	b29a      	uxth	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d034      	beq.n	80059b4 <HAL_I2C_Mem_Write+0x1c8>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800594e:	2b00      	cmp	r3, #0
 8005950:	d130      	bne.n	80059b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005958:	2200      	movs	r2, #0
 800595a:	2180      	movs	r1, #128	@ 0x80
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 fa3f 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e04d      	b.n	8005a08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005970:	b29b      	uxth	r3, r3
 8005972:	2bff      	cmp	r3, #255	@ 0xff
 8005974:	d90e      	bls.n	8005994 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	22ff      	movs	r2, #255	@ 0xff
 800597a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005980:	b2da      	uxtb	r2, r3
 8005982:	8979      	ldrh	r1, [r7, #10]
 8005984:	2300      	movs	r3, #0
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 fbeb 	bl	8006168 <I2C_TransferConfig>
 8005992:	e00f      	b.n	80059b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	8979      	ldrh	r1, [r7, #10]
 80059a6:	2300      	movs	r3, #0
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 fbda 	bl	8006168 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d19e      	bne.n	80058fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 faac 	bl	8005f20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e01a      	b.n	8005a08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2220      	movs	r2, #32
 80059d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6859      	ldr	r1, [r3, #4]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005a10 <HAL_I2C_Mem_Write+0x224>)
 80059e6:	400b      	ands	r3, r1
 80059e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	e000      	b.n	8005a08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005a06:	2302      	movs	r3, #2
  }
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	fe00e800 	.word	0xfe00e800

08005a14 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	4608      	mov	r0, r1
 8005a1e:	4611      	mov	r1, r2
 8005a20:	461a      	mov	r2, r3
 8005a22:	4603      	mov	r3, r0
 8005a24:	817b      	strh	r3, [r7, #10]
 8005a26:	460b      	mov	r3, r1
 8005a28:	813b      	strh	r3, [r7, #8]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	f040 80fd 	bne.w	8005c36 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <HAL_I2C_Mem_Read+0x34>
 8005a42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d105      	bne.n	8005a54 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a4e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e0f1      	b.n	8005c38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d101      	bne.n	8005a62 <HAL_I2C_Mem_Read+0x4e>
 8005a5e:	2302      	movs	r3, #2
 8005a60:	e0ea      	b.n	8005c38 <HAL_I2C_Mem_Read+0x224>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a6a:	f7fd fc8f 	bl	800338c <HAL_GetTick>
 8005a6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	2319      	movs	r3, #25
 8005a76:	2201      	movs	r2, #1
 8005a78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 f9af 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e0d5      	b.n	8005c38 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2222      	movs	r2, #34	@ 0x22
 8005a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2240      	movs	r2, #64	@ 0x40
 8005a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a3a      	ldr	r2, [r7, #32]
 8005aa6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005aac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ab4:	88f8      	ldrh	r0, [r7, #6]
 8005ab6:	893a      	ldrh	r2, [r7, #8]
 8005ab8:	8979      	ldrh	r1, [r7, #10]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	9301      	str	r3, [sp, #4]
 8005abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 f913 	bl	8005cf0 <I2C_RequestMemoryRead>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d005      	beq.n	8005adc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e0ad      	b.n	8005c38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2bff      	cmp	r3, #255	@ 0xff
 8005ae4:	d90e      	bls.n	8005b04 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	8979      	ldrh	r1, [r7, #10]
 8005af4:	4b52      	ldr	r3, [pc, #328]	@ (8005c40 <HAL_I2C_Mem_Read+0x22c>)
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 fb33 	bl	8006168 <I2C_TransferConfig>
 8005b02:	e00f      	b.n	8005b24 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	8979      	ldrh	r1, [r7, #10]
 8005b16:	4b4a      	ldr	r3, [pc, #296]	@ (8005c40 <HAL_I2C_Mem_Read+0x22c>)
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fb22 	bl	8006168 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2104      	movs	r1, #4
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 f956 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e07c      	b.n	8005c38 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d034      	beq.n	8005be4 <HAL_I2C_Mem_Read+0x1d0>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d130      	bne.n	8005be4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b88:	2200      	movs	r2, #0
 8005b8a:	2180      	movs	r1, #128	@ 0x80
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f927 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e04d      	b.n	8005c38 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2bff      	cmp	r3, #255	@ 0xff
 8005ba4:	d90e      	bls.n	8005bc4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	8979      	ldrh	r1, [r7, #10]
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 fad3 	bl	8006168 <I2C_TransferConfig>
 8005bc2:	e00f      	b.n	8005be4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	8979      	ldrh	r1, [r7, #10]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 fac2 	bl	8006168 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d19a      	bne.n	8005b24 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 f994 	bl	8005f20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e01a      	b.n	8005c38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2220      	movs	r2, #32
 8005c08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6859      	ldr	r1, [r3, #4]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	4b0b      	ldr	r3, [pc, #44]	@ (8005c44 <HAL_I2C_Mem_Read+0x230>)
 8005c16:	400b      	ands	r3, r1
 8005c18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	e000      	b.n	8005c38 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005c36:	2302      	movs	r3, #2
  }
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	80002400 	.word	0x80002400
 8005c44:	fe00e800 	.word	0xfe00e800

08005c48 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	4608      	mov	r0, r1
 8005c52:	4611      	mov	r1, r2
 8005c54:	461a      	mov	r2, r3
 8005c56:	4603      	mov	r3, r0
 8005c58:	817b      	strh	r3, [r7, #10]
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	813b      	strh	r3, [r7, #8]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c62:	88fb      	ldrh	r3, [r7, #6]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	8979      	ldrh	r1, [r7, #10]
 8005c68:	4b20      	ldr	r3, [pc, #128]	@ (8005cec <I2C_RequestMemoryWrite+0xa4>)
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 fa79 	bl	8006168 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	69b9      	ldr	r1, [r7, #24]
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 f909 	bl	8005e92 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e02c      	b.n	8005ce4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c8a:	88fb      	ldrh	r3, [r7, #6]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d105      	bne.n	8005c9c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c90:	893b      	ldrh	r3, [r7, #8]
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c9a:	e015      	b.n	8005cc8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c9c:	893b      	ldrh	r3, [r7, #8]
 8005c9e:	0a1b      	lsrs	r3, r3, #8
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005caa:	69fa      	ldr	r2, [r7, #28]
 8005cac:	69b9      	ldr	r1, [r7, #24]
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 f8ef 	bl	8005e92 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e012      	b.n	8005ce4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cbe:	893b      	ldrh	r3, [r7, #8]
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2180      	movs	r1, #128	@ 0x80
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 f884 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	80002000 	.word	0x80002000

08005cf0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	4608      	mov	r0, r1
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	4603      	mov	r3, r0
 8005d00:	817b      	strh	r3, [r7, #10]
 8005d02:	460b      	mov	r3, r1
 8005d04:	813b      	strh	r3, [r7, #8]
 8005d06:	4613      	mov	r3, r2
 8005d08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d0a:	88fb      	ldrh	r3, [r7, #6]
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	8979      	ldrh	r1, [r7, #10]
 8005d10:	4b20      	ldr	r3, [pc, #128]	@ (8005d94 <I2C_RequestMemoryRead+0xa4>)
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	2300      	movs	r3, #0
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 fa26 	bl	8006168 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	69b9      	ldr	r1, [r7, #24]
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 f8b6 	bl	8005e92 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e02c      	b.n	8005d8a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d30:	88fb      	ldrh	r3, [r7, #6]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d105      	bne.n	8005d42 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d36:	893b      	ldrh	r3, [r7, #8]
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d40:	e015      	b.n	8005d6e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d42:	893b      	ldrh	r3, [r7, #8]
 8005d44:	0a1b      	lsrs	r3, r3, #8
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	69b9      	ldr	r1, [r7, #24]
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 f89c 	bl	8005e92 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e012      	b.n	8005d8a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d64:	893b      	ldrh	r3, [r7, #8]
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	2200      	movs	r2, #0
 8005d76:	2140      	movs	r1, #64	@ 0x40
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 f831 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e000      	b.n	8005d8a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	80002000 	.word	0x80002000

08005d98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d103      	bne.n	8005db6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2200      	movs	r2, #0
 8005db4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d007      	beq.n	8005dd4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	699a      	ldr	r2, [r3, #24]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0201 	orr.w	r2, r2, #1
 8005dd2:	619a      	str	r2, [r3, #24]
  }
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	4613      	mov	r3, r2
 8005dee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005df0:	e03b      	b.n	8005e6a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 f8d6 	bl	8005fa8 <I2C_IsErrorOccurred>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e041      	b.n	8005e8a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0c:	d02d      	beq.n	8005e6a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e0e:	f7fd fabd 	bl	800338c <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d302      	bcc.n	8005e24 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d122      	bne.n	8005e6a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	bf0c      	ite	eq
 8005e34:	2301      	moveq	r3, #1
 8005e36:	2300      	movne	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d113      	bne.n	8005e6a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e46:	f043 0220 	orr.w	r2, r3, #32
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e00f      	b.n	8005e8a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	699a      	ldr	r2, [r3, #24]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4013      	ands	r3, r2
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	bf0c      	ite	eq
 8005e7a:	2301      	moveq	r3, #1
 8005e7c:	2300      	movne	r3, #0
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	461a      	mov	r2, r3
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d0b4      	beq.n	8005df2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	60f8      	str	r0, [r7, #12]
 8005e9a:	60b9      	str	r1, [r7, #8]
 8005e9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e9e:	e033      	b.n	8005f08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 f87f 	bl	8005fa8 <I2C_IsErrorOccurred>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e031      	b.n	8005f18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eba:	d025      	beq.n	8005f08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ebc:	f7fd fa66 	bl	800338c <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d302      	bcc.n	8005ed2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d11a      	bne.n	8005f08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d013      	beq.n	8005f08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee4:	f043 0220 	orr.w	r2, r3, #32
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e007      	b.n	8005f18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d1c4      	bne.n	8005ea0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f2c:	e02f      	b.n	8005f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	68b9      	ldr	r1, [r7, #8]
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 f838 	bl	8005fa8 <I2C_IsErrorOccurred>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e02d      	b.n	8005f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f42:	f7fd fa23 	bl	800338c <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d302      	bcc.n	8005f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d11a      	bne.n	8005f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	f003 0320 	and.w	r3, r3, #32
 8005f62:	2b20      	cmp	r3, #32
 8005f64:	d013      	beq.n	8005f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f6a:	f043 0220 	orr.w	r2, r3, #32
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e007      	b.n	8005f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	f003 0320 	and.w	r3, r3, #32
 8005f98:	2b20      	cmp	r3, #32
 8005f9a:	d1c8      	bne.n	8005f2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08a      	sub	sp, #40	@ 0x28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	f003 0310 	and.w	r3, r3, #16
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d068      	beq.n	80060a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2210      	movs	r2, #16
 8005fda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005fdc:	e049      	b.n	8006072 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe4:	d045      	beq.n	8006072 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fe6:	f7fd f9d1 	bl	800338c <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d302      	bcc.n	8005ffc <I2C_IsErrorOccurred+0x54>
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d13a      	bne.n	8006072 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006006:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800600e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800601a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800601e:	d121      	bne.n	8006064 <I2C_IsErrorOccurred+0xbc>
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006026:	d01d      	beq.n	8006064 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006028:	7cfb      	ldrb	r3, [r7, #19]
 800602a:	2b20      	cmp	r3, #32
 800602c:	d01a      	beq.n	8006064 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800603c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800603e:	f7fd f9a5 	bl	800338c <HAL_GetTick>
 8006042:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006044:	e00e      	b.n	8006064 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006046:	f7fd f9a1 	bl	800338c <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b19      	cmp	r3, #25
 8006052:	d907      	bls.n	8006064 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	f043 0320 	orr.w	r3, r3, #32
 800605a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006062:	e006      	b.n	8006072 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	f003 0320 	and.w	r3, r3, #32
 800606e:	2b20      	cmp	r3, #32
 8006070:	d1e9      	bne.n	8006046 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b20      	cmp	r3, #32
 800607e:	d003      	beq.n	8006088 <I2C_IsErrorOccurred+0xe0>
 8006080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0aa      	beq.n	8005fde <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006088:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800608c:	2b00      	cmp	r3, #0
 800608e:	d103      	bne.n	8006098 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2220      	movs	r2, #32
 8006096:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	f043 0304 	orr.w	r3, r3, #4
 800609e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00b      	beq.n	80060d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	f043 0301 	orr.w	r3, r3, #1
 80060be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80060c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00b      	beq.n	80060f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	f043 0308 	orr.w	r3, r3, #8
 80060e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80060ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00b      	beq.n	8006114 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	f043 0302 	orr.w	r3, r3, #2
 8006102:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800610c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006118:	2b00      	cmp	r3, #0
 800611a:	d01c      	beq.n	8006156 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f7ff fe3b 	bl	8005d98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6859      	ldr	r1, [r3, #4]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	4b0d      	ldr	r3, [pc, #52]	@ (8006164 <I2C_IsErrorOccurred+0x1bc>)
 800612e:	400b      	ands	r3, r1
 8006130:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	431a      	orrs	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2220      	movs	r2, #32
 8006142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006156:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800615a:	4618      	mov	r0, r3
 800615c:	3728      	adds	r7, #40	@ 0x28
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	fe00e800 	.word	0xfe00e800

08006168 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	607b      	str	r3, [r7, #4]
 8006172:	460b      	mov	r3, r1
 8006174:	817b      	strh	r3, [r7, #10]
 8006176:	4613      	mov	r3, r2
 8006178:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800617a:	897b      	ldrh	r3, [r7, #10]
 800617c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006180:	7a7b      	ldrb	r3, [r7, #9]
 8006182:	041b      	lsls	r3, r3, #16
 8006184:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006188:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	4313      	orrs	r3, r2
 8006192:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006196:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	0d5b      	lsrs	r3, r3, #21
 80061a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80061a6:	4b08      	ldr	r3, [pc, #32]	@ (80061c8 <I2C_TransferConfig+0x60>)
 80061a8:	430b      	orrs	r3, r1
 80061aa:	43db      	mvns	r3, r3
 80061ac:	ea02 0103 	and.w	r1, r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80061ba:	bf00      	nop
 80061bc:	371c      	adds	r7, #28
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	03ff63ff 	.word	0x03ff63ff

080061cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b20      	cmp	r3, #32
 80061e0:	d138      	bne.n	8006254 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80061ec:	2302      	movs	r3, #2
 80061ee:	e032      	b.n	8006256 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2224      	movs	r2, #36	@ 0x24
 80061fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 0201 	bic.w	r2, r2, #1
 800620e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800621e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6819      	ldr	r1, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	e000      	b.n	8006256 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006254:	2302      	movs	r3, #2
  }
}
 8006256:	4618      	mov	r0, r3
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006262:	b480      	push	{r7}
 8006264:	b085      	sub	sp, #20
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b20      	cmp	r3, #32
 8006276:	d139      	bne.n	80062ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006282:	2302      	movs	r3, #2
 8006284:	e033      	b.n	80062ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2224      	movs	r2, #36	@ 0x24
 8006292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0201 	bic.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80062b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	021b      	lsls	r3, r3, #8
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4313      	orrs	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0201 	orr.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2220      	movs	r2, #32
 80062dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	e000      	b.n	80062ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80062ec:	2302      	movs	r3, #2
  }
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b086      	sub	sp, #24
 80062fe:	af02      	add	r7, sp, #8
 8006300:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e101      	b.n	8006510 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d106      	bne.n	8006326 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7fc fa61 	bl	80027e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2203      	movs	r2, #3
 800632a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4618      	mov	r0, r3
 800633a:	f003 ff17 	bl	800a16c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	7c1a      	ldrb	r2, [r3, #16]
 8006346:	f88d 2000 	strb.w	r2, [sp]
 800634a:	3304      	adds	r3, #4
 800634c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800634e:	f003 fee0 	bl	800a112 <USB_CoreInit>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d005      	beq.n	8006364 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e0d5      	b.n	8006510 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2100      	movs	r1, #0
 800636a:	4618      	mov	r0, r3
 800636c:	f003 ff0f 	bl	800a18e <USB_SetCurrentMode>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d005      	beq.n	8006382 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2202      	movs	r2, #2
 800637a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e0c6      	b.n	8006510 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006382:	2300      	movs	r3, #0
 8006384:	73fb      	strb	r3, [r7, #15]
 8006386:	e04a      	b.n	800641e <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006388:	7bfa      	ldrb	r2, [r7, #15]
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	4613      	mov	r3, r2
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	4413      	add	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	440b      	add	r3, r1
 8006396:	3315      	adds	r3, #21
 8006398:	2201      	movs	r2, #1
 800639a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800639c:	7bfa      	ldrb	r2, [r7, #15]
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	4613      	mov	r3, r2
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	4413      	add	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	440b      	add	r3, r1
 80063aa:	3314      	adds	r3, #20
 80063ac:	7bfa      	ldrb	r2, [r7, #15]
 80063ae:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80063b0:	7bfa      	ldrb	r2, [r7, #15]
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	b298      	uxth	r0, r3
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	4613      	mov	r3, r2
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	440b      	add	r3, r1
 80063c2:	332e      	adds	r3, #46	@ 0x2e
 80063c4:	4602      	mov	r2, r0
 80063c6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80063c8:	7bfa      	ldrb	r2, [r7, #15]
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	4613      	mov	r3, r2
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	4413      	add	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	440b      	add	r3, r1
 80063d6:	3318      	adds	r3, #24
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80063dc:	7bfa      	ldrb	r2, [r7, #15]
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	4613      	mov	r3, r2
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	4413      	add	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	440b      	add	r3, r1
 80063ea:	331c      	adds	r3, #28
 80063ec:	2200      	movs	r2, #0
 80063ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80063f0:	7bfa      	ldrb	r2, [r7, #15]
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	4613      	mov	r3, r2
 80063f6:	00db      	lsls	r3, r3, #3
 80063f8:	4413      	add	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	440b      	add	r3, r1
 80063fe:	3320      	adds	r3, #32
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006404:	7bfa      	ldrb	r2, [r7, #15]
 8006406:	6879      	ldr	r1, [r7, #4]
 8006408:	4613      	mov	r3, r2
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	4413      	add	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	440b      	add	r3, r1
 8006412:	3324      	adds	r3, #36	@ 0x24
 8006414:	2200      	movs	r2, #0
 8006416:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	3301      	adds	r3, #1
 800641c:	73fb      	strb	r3, [r7, #15]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	791b      	ldrb	r3, [r3, #4]
 8006422:	7bfa      	ldrb	r2, [r7, #15]
 8006424:	429a      	cmp	r2, r3
 8006426:	d3af      	bcc.n	8006388 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006428:	2300      	movs	r3, #0
 800642a:	73fb      	strb	r3, [r7, #15]
 800642c:	e044      	b.n	80064b8 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800642e:	7bfa      	ldrb	r2, [r7, #15]
 8006430:	6879      	ldr	r1, [r7, #4]
 8006432:	4613      	mov	r3, r2
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	4413      	add	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	440b      	add	r3, r1
 800643c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006440:	2200      	movs	r2, #0
 8006442:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006444:	7bfa      	ldrb	r2, [r7, #15]
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	4613      	mov	r3, r2
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	4413      	add	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	440b      	add	r3, r1
 8006452:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006456:	7bfa      	ldrb	r2, [r7, #15]
 8006458:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800645a:	7bfa      	ldrb	r2, [r7, #15]
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	4613      	mov	r3, r2
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	4413      	add	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	440b      	add	r3, r1
 8006468:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800646c:	2200      	movs	r2, #0
 800646e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006470:	7bfa      	ldrb	r2, [r7, #15]
 8006472:	6879      	ldr	r1, [r7, #4]
 8006474:	4613      	mov	r3, r2
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	4413      	add	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	440b      	add	r3, r1
 800647e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006486:	7bfa      	ldrb	r2, [r7, #15]
 8006488:	6879      	ldr	r1, [r7, #4]
 800648a:	4613      	mov	r3, r2
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	4413      	add	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	440b      	add	r3, r1
 8006494:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800649c:	7bfa      	ldrb	r2, [r7, #15]
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	4613      	mov	r3, r2
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	4413      	add	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	440b      	add	r3, r1
 80064aa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	3301      	adds	r3, #1
 80064b6:	73fb      	strb	r3, [r7, #15]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	791b      	ldrb	r3, [r3, #4]
 80064bc:	7bfa      	ldrb	r2, [r7, #15]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d3b5      	bcc.n	800642e <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	7c1a      	ldrb	r2, [r3, #16]
 80064ca:	f88d 2000 	strb.w	r2, [sp]
 80064ce:	3304      	adds	r3, #4
 80064d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064d2:	f003 fea9 	bl	800a228 <USB_DevInit>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e013      	b.n	8006510 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	7b1b      	ldrb	r3, [r3, #12]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d102      	bne.n	8006504 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f80a 	bl	8006518 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4618      	mov	r0, r3
 800650a:	f004 f84e 	bl	800a5aa <USB_DevDisconnect>

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800654a:	f043 0303 	orr.w	r3, r3, #3
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006564:	4b05      	ldr	r3, [pc, #20]	@ (800657c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a04      	ldr	r2, [pc, #16]	@ (800657c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800656a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800656e:	6013      	str	r3, [r2, #0]
}
 8006570:	bf00      	nop
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	40007000 	.word	0x40007000

08006580 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006580:	b480      	push	{r7}
 8006582:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006584:	4b04      	ldr	r3, [pc, #16]	@ (8006598 <HAL_PWREx_GetVoltageRange+0x18>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800658c:	4618      	mov	r0, r3
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40007000 	.word	0x40007000

0800659c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065aa:	d130      	bne.n	800660e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80065ac:	4b23      	ldr	r3, [pc, #140]	@ (800663c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80065b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065b8:	d038      	beq.n	800662c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80065ba:	4b20      	ldr	r3, [pc, #128]	@ (800663c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80065c2:	4a1e      	ldr	r2, [pc, #120]	@ (800663c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006640 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2232      	movs	r2, #50	@ 0x32
 80065d0:	fb02 f303 	mul.w	r3, r2, r3
 80065d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006644 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80065d6:	fba2 2303 	umull	r2, r3, r2, r3
 80065da:	0c9b      	lsrs	r3, r3, #18
 80065dc:	3301      	adds	r3, #1
 80065de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065e0:	e002      	b.n	80065e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065e8:	4b14      	ldr	r3, [pc, #80]	@ (800663c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065f4:	d102      	bne.n	80065fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1f2      	bne.n	80065e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80065fc:	4b0f      	ldr	r3, [pc, #60]	@ (800663c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006608:	d110      	bne.n	800662c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e00f      	b.n	800662e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800660e:	4b0b      	ldr	r3, [pc, #44]	@ (800663c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800661a:	d007      	beq.n	800662c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800661c:	4b07      	ldr	r3, [pc, #28]	@ (800663c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006624:	4a05      	ldr	r2, [pc, #20]	@ (800663c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006626:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800662a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	40007000 	.word	0x40007000
 8006640:	20000004 	.word	0x20000004
 8006644:	431bde83 	.word	0x431bde83

08006648 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006648:	b480      	push	{r7}
 800664a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800664c:	4b05      	ldr	r3, [pc, #20]	@ (8006664 <HAL_PWREx_EnableVddUSB+0x1c>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	4a04      	ldr	r2, [pc, #16]	@ (8006664 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006652:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006656:	6053      	str	r3, [r2, #4]
}
 8006658:	bf00      	nop
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	40007000 	.word	0x40007000

08006668 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af02      	add	r7, sp, #8
 800666e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006670:	f7fc fe8c 	bl	800338c <HAL_GetTick>
 8006674:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e063      	b.n	8006748 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10b      	bne.n	80066a4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7fb fec3 	bl	8002420 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800669a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f858 	bl	8006754 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	021a      	lsls	r2, r3, #8
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	2120      	movs	r1, #32
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f850 	bl	8006770 <QSPI_WaitFlagStateUntilTimeout>
 80066d0:	4603      	mov	r3, r0
 80066d2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80066d4:	7afb      	ldrb	r3, [r7, #11]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d131      	bne.n	800673e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80066e4:	f023 0310 	bic.w	r3, r3, #16
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6852      	ldr	r2, [r2, #4]
 80066ec:	0611      	lsls	r1, r2, #24
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	68d2      	ldr	r2, [r2, #12]
 80066f2:	4311      	orrs	r1, r2
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6812      	ldr	r2, [r2, #0]
 80066f8:	430b      	orrs	r3, r1
 80066fa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	4b13      	ldr	r3, [pc, #76]	@ (8006750 <HAL_QSPI_Init+0xe8>)
 8006704:	4013      	ands	r3, r2
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6912      	ldr	r2, [r2, #16]
 800670a:	0411      	lsls	r1, r2, #16
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6952      	ldr	r2, [r2, #20]
 8006710:	4311      	orrs	r1, r2
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	6992      	ldr	r2, [r2, #24]
 8006716:	4311      	orrs	r1, r2
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	6812      	ldr	r2, [r2, #0]
 800671c:	430b      	orrs	r3, r1
 800671e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0201 	orr.w	r2, r2, #1
 800672e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8006746:	7afb      	ldrb	r3, [r7, #11]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	ffe0f8fe 	.word	0xffe0f8fe

08006754 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	603b      	str	r3, [r7, #0]
 800677c:	4613      	mov	r3, r2
 800677e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006780:	e01a      	b.n	80067b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006788:	d016      	beq.n	80067b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800678a:	f7fc fdff 	bl	800338c <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	429a      	cmp	r2, r3
 8006798:	d302      	bcc.n	80067a0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10b      	bne.n	80067b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2204      	movs	r2, #4
 80067a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ac:	f043 0201 	orr.w	r2, r3, #1
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e00e      	b.n	80067d6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	4013      	ands	r3, r2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	bf14      	ite	ne
 80067c6:	2301      	movne	r3, #1
 80067c8:	2300      	moveq	r3, #0
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	461a      	mov	r2, r3
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d1d6      	bne.n	8006782 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e3ca      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067f2:	4b97      	ldr	r3, [pc, #604]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 030c 	and.w	r3, r3, #12
 80067fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067fc:	4b94      	ldr	r3, [pc, #592]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 0303 	and.w	r3, r3, #3
 8006804:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0310 	and.w	r3, r3, #16
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 80e4 	beq.w	80069dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d007      	beq.n	800682a <HAL_RCC_OscConfig+0x4a>
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	2b0c      	cmp	r3, #12
 800681e:	f040 808b 	bne.w	8006938 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2b01      	cmp	r3, #1
 8006826:	f040 8087 	bne.w	8006938 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800682a:	4b89      	ldr	r3, [pc, #548]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d005      	beq.n	8006842 <HAL_RCC_OscConfig+0x62>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e3a2      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1a      	ldr	r2, [r3, #32]
 8006846:	4b82      	ldr	r3, [pc, #520]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b00      	cmp	r3, #0
 8006850:	d004      	beq.n	800685c <HAL_RCC_OscConfig+0x7c>
 8006852:	4b7f      	ldr	r3, [pc, #508]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800685a:	e005      	b.n	8006868 <HAL_RCC_OscConfig+0x88>
 800685c:	4b7c      	ldr	r3, [pc, #496]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 800685e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006862:	091b      	lsrs	r3, r3, #4
 8006864:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006868:	4293      	cmp	r3, r2
 800686a:	d223      	bcs.n	80068b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	4618      	mov	r0, r3
 8006872:	f000 fd55 	bl	8007320 <RCC_SetFlashLatencyFromMSIRange>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e383      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006880:	4b73      	ldr	r3, [pc, #460]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a72      	ldr	r2, [pc, #456]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 8006886:	f043 0308 	orr.w	r3, r3, #8
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	4b70      	ldr	r3, [pc, #448]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	496d      	ldr	r1, [pc, #436]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 800689a:	4313      	orrs	r3, r2
 800689c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800689e:	4b6c      	ldr	r3, [pc, #432]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	4968      	ldr	r1, [pc, #416]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	604b      	str	r3, [r1, #4]
 80068b2:	e025      	b.n	8006900 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068b4:	4b66      	ldr	r3, [pc, #408]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a65      	ldr	r2, [pc, #404]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 80068ba:	f043 0308 	orr.w	r3, r3, #8
 80068be:	6013      	str	r3, [r2, #0]
 80068c0:	4b63      	ldr	r3, [pc, #396]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	4960      	ldr	r1, [pc, #384]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068d2:	4b5f      	ldr	r3, [pc, #380]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	021b      	lsls	r3, r3, #8
 80068e0:	495b      	ldr	r1, [pc, #364]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d109      	bne.n	8006900 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 fd15 	bl	8007320 <RCC_SetFlashLatencyFromMSIRange>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e343      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006900:	f000 fc4a 	bl	8007198 <HAL_RCC_GetSysClockFreq>
 8006904:	4602      	mov	r2, r0
 8006906:	4b52      	ldr	r3, [pc, #328]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	091b      	lsrs	r3, r3, #4
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	4950      	ldr	r1, [pc, #320]	@ (8006a54 <HAL_RCC_OscConfig+0x274>)
 8006912:	5ccb      	ldrb	r3, [r1, r3]
 8006914:	f003 031f 	and.w	r3, r3, #31
 8006918:	fa22 f303 	lsr.w	r3, r2, r3
 800691c:	4a4e      	ldr	r2, [pc, #312]	@ (8006a58 <HAL_RCC_OscConfig+0x278>)
 800691e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006920:	4b4e      	ldr	r3, [pc, #312]	@ (8006a5c <HAL_RCC_OscConfig+0x27c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4618      	mov	r0, r3
 8006926:	f7fc fce1 	bl	80032ec <HAL_InitTick>
 800692a:	4603      	mov	r3, r0
 800692c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d052      	beq.n	80069da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006934:	7bfb      	ldrb	r3, [r7, #15]
 8006936:	e327      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d032      	beq.n	80069a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006940:	4b43      	ldr	r3, [pc, #268]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a42      	ldr	r2, [pc, #264]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 8006946:	f043 0301 	orr.w	r3, r3, #1
 800694a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800694c:	f7fc fd1e 	bl	800338c <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006954:	f7fc fd1a 	bl	800338c <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e310      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006966:	4b3a      	ldr	r3, [pc, #232]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0f0      	beq.n	8006954 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006972:	4b37      	ldr	r3, [pc, #220]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a36      	ldr	r2, [pc, #216]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 8006978:	f043 0308 	orr.w	r3, r3, #8
 800697c:	6013      	str	r3, [r2, #0]
 800697e:	4b34      	ldr	r3, [pc, #208]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	4931      	ldr	r1, [pc, #196]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 800698c:	4313      	orrs	r3, r2
 800698e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006990:	4b2f      	ldr	r3, [pc, #188]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	492c      	ldr	r1, [pc, #176]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	604b      	str	r3, [r1, #4]
 80069a4:	e01a      	b.n	80069dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80069a6:	4b2a      	ldr	r3, [pc, #168]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a29      	ldr	r2, [pc, #164]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 80069ac:	f023 0301 	bic.w	r3, r3, #1
 80069b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80069b2:	f7fc fceb 	bl	800338c <HAL_GetTick>
 80069b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80069b8:	e008      	b.n	80069cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069ba:	f7fc fce7 	bl	800338c <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d901      	bls.n	80069cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e2dd      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80069cc:	4b20      	ldr	r3, [pc, #128]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0302 	and.w	r3, r3, #2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1f0      	bne.n	80069ba <HAL_RCC_OscConfig+0x1da>
 80069d8:	e000      	b.n	80069dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80069da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d074      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	2b08      	cmp	r3, #8
 80069ec:	d005      	beq.n	80069fa <HAL_RCC_OscConfig+0x21a>
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	2b0c      	cmp	r3, #12
 80069f2:	d10e      	bne.n	8006a12 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d10b      	bne.n	8006a12 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069fa:	4b15      	ldr	r3, [pc, #84]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d064      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x2f0>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d160      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e2ba      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a1a:	d106      	bne.n	8006a2a <HAL_RCC_OscConfig+0x24a>
 8006a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a0b      	ldr	r2, [pc, #44]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 8006a22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a26:	6013      	str	r3, [r2, #0]
 8006a28:	e026      	b.n	8006a78 <HAL_RCC_OscConfig+0x298>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a32:	d115      	bne.n	8006a60 <HAL_RCC_OscConfig+0x280>
 8006a34:	4b06      	ldr	r3, [pc, #24]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a05      	ldr	r2, [pc, #20]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 8006a3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a3e:	6013      	str	r3, [r2, #0]
 8006a40:	4b03      	ldr	r3, [pc, #12]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a02      	ldr	r2, [pc, #8]	@ (8006a50 <HAL_RCC_OscConfig+0x270>)
 8006a46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a4a:	6013      	str	r3, [r2, #0]
 8006a4c:	e014      	b.n	8006a78 <HAL_RCC_OscConfig+0x298>
 8006a4e:	bf00      	nop
 8006a50:	40021000 	.word	0x40021000
 8006a54:	0800eee8 	.word	0x0800eee8
 8006a58:	20000004 	.word	0x20000004
 8006a5c:	2000003c 	.word	0x2000003c
 8006a60:	4ba0      	ldr	r3, [pc, #640]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a9f      	ldr	r2, [pc, #636]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	4b9d      	ldr	r3, [pc, #628]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a9c      	ldr	r2, [pc, #624]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d013      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a80:	f7fc fc84 	bl	800338c <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a88:	f7fc fc80 	bl	800338c <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b64      	cmp	r3, #100	@ 0x64
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e276      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a9a:	4b92      	ldr	r3, [pc, #584]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0f0      	beq.n	8006a88 <HAL_RCC_OscConfig+0x2a8>
 8006aa6:	e014      	b.n	8006ad2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa8:	f7fc fc70 	bl	800338c <HAL_GetTick>
 8006aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ab0:	f7fc fc6c 	bl	800338c <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b64      	cmp	r3, #100	@ 0x64
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e262      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ac2:	4b88      	ldr	r3, [pc, #544]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1f0      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x2d0>
 8006ace:	e000      	b.n	8006ad2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d060      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	2b04      	cmp	r3, #4
 8006ae2:	d005      	beq.n	8006af0 <HAL_RCC_OscConfig+0x310>
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	2b0c      	cmp	r3, #12
 8006ae8:	d119      	bne.n	8006b1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d116      	bne.n	8006b1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006af0:	4b7c      	ldr	r3, [pc, #496]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d005      	beq.n	8006b08 <HAL_RCC_OscConfig+0x328>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e23f      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b08:	4b76      	ldr	r3, [pc, #472]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	061b      	lsls	r3, r3, #24
 8006b16:	4973      	ldr	r1, [pc, #460]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b1c:	e040      	b.n	8006ba0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d023      	beq.n	8006b6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b26:	4b6f      	ldr	r3, [pc, #444]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a6e      	ldr	r2, [pc, #440]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b32:	f7fc fc2b 	bl	800338c <HAL_GetTick>
 8006b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b38:	e008      	b.n	8006b4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b3a:	f7fc fc27 	bl	800338c <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d901      	bls.n	8006b4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e21d      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b4c:	4b65      	ldr	r3, [pc, #404]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d0f0      	beq.n	8006b3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b58:	4b62      	ldr	r3, [pc, #392]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	061b      	lsls	r3, r3, #24
 8006b66:	495f      	ldr	r1, [pc, #380]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	604b      	str	r3, [r1, #4]
 8006b6c:	e018      	b.n	8006ba0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b6e:	4b5d      	ldr	r3, [pc, #372]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a5c      	ldr	r2, [pc, #368]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006b74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b7a:	f7fc fc07 	bl	800338c <HAL_GetTick>
 8006b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b80:	e008      	b.n	8006b94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b82:	f7fc fc03 	bl	800338c <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d901      	bls.n	8006b94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e1f9      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b94:	4b53      	ldr	r3, [pc, #332]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1f0      	bne.n	8006b82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0308 	and.w	r3, r3, #8
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d03c      	beq.n	8006c26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d01c      	beq.n	8006bee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bb4:	4b4b      	ldr	r3, [pc, #300]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bba:	4a4a      	ldr	r2, [pc, #296]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006bbc:	f043 0301 	orr.w	r3, r3, #1
 8006bc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc4:	f7fc fbe2 	bl	800338c <HAL_GetTick>
 8006bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bca:	e008      	b.n	8006bde <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bcc:	f7fc fbde 	bl	800338c <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e1d4      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bde:	4b41      	ldr	r3, [pc, #260]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0ef      	beq.n	8006bcc <HAL_RCC_OscConfig+0x3ec>
 8006bec:	e01b      	b.n	8006c26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bee:	4b3d      	ldr	r3, [pc, #244]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bf4:	4a3b      	ldr	r2, [pc, #236]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006bf6:	f023 0301 	bic.w	r3, r3, #1
 8006bfa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bfe:	f7fc fbc5 	bl	800338c <HAL_GetTick>
 8006c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c04:	e008      	b.n	8006c18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c06:	f7fc fbc1 	bl	800338c <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d901      	bls.n	8006c18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e1b7      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c18:	4b32      	ldr	r3, [pc, #200]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1ef      	bne.n	8006c06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 80a6 	beq.w	8006d80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c34:	2300      	movs	r3, #0
 8006c36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006c38:	4b2a      	ldr	r3, [pc, #168]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10d      	bne.n	8006c60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c44:	4b27      	ldr	r3, [pc, #156]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c48:	4a26      	ldr	r2, [pc, #152]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c50:	4b24      	ldr	r3, [pc, #144]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c58:	60bb      	str	r3, [r7, #8]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c60:	4b21      	ldr	r3, [pc, #132]	@ (8006ce8 <HAL_RCC_OscConfig+0x508>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d118      	bne.n	8006c9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ce8 <HAL_RCC_OscConfig+0x508>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a1d      	ldr	r2, [pc, #116]	@ (8006ce8 <HAL_RCC_OscConfig+0x508>)
 8006c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c78:	f7fc fb88 	bl	800338c <HAL_GetTick>
 8006c7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c7e:	e008      	b.n	8006c92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c80:	f7fc fb84 	bl	800338c <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e17a      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c92:	4b15      	ldr	r3, [pc, #84]	@ (8006ce8 <HAL_RCC_OscConfig+0x508>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0f0      	beq.n	8006c80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d108      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x4d8>
 8006ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cac:	4a0d      	ldr	r2, [pc, #52]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006cae:	f043 0301 	orr.w	r3, r3, #1
 8006cb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006cb6:	e029      	b.n	8006d0c <HAL_RCC_OscConfig+0x52c>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	2b05      	cmp	r3, #5
 8006cbe:	d115      	bne.n	8006cec <HAL_RCC_OscConfig+0x50c>
 8006cc0:	4b08      	ldr	r3, [pc, #32]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cc6:	4a07      	ldr	r2, [pc, #28]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006cc8:	f043 0304 	orr.w	r3, r3, #4
 8006ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006cd0:	4b04      	ldr	r3, [pc, #16]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cd6:	4a03      	ldr	r2, [pc, #12]	@ (8006ce4 <HAL_RCC_OscConfig+0x504>)
 8006cd8:	f043 0301 	orr.w	r3, r3, #1
 8006cdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ce0:	e014      	b.n	8006d0c <HAL_RCC_OscConfig+0x52c>
 8006ce2:	bf00      	nop
 8006ce4:	40021000 	.word	0x40021000
 8006ce8:	40007000 	.word	0x40007000
 8006cec:	4b9c      	ldr	r3, [pc, #624]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cf2:	4a9b      	ldr	r2, [pc, #620]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006cf4:	f023 0301 	bic.w	r3, r3, #1
 8006cf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006cfc:	4b98      	ldr	r3, [pc, #608]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d02:	4a97      	ldr	r2, [pc, #604]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006d04:	f023 0304 	bic.w	r3, r3, #4
 8006d08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d016      	beq.n	8006d42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d14:	f7fc fb3a 	bl	800338c <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d1a:	e00a      	b.n	8006d32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d1c:	f7fc fb36 	bl	800338c <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e12a      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d32:	4b8b      	ldr	r3, [pc, #556]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0ed      	beq.n	8006d1c <HAL_RCC_OscConfig+0x53c>
 8006d40:	e015      	b.n	8006d6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d42:	f7fc fb23 	bl	800338c <HAL_GetTick>
 8006d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d48:	e00a      	b.n	8006d60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d4a:	f7fc fb1f 	bl	800338c <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e113      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d60:	4b7f      	ldr	r3, [pc, #508]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1ed      	bne.n	8006d4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d6e:	7ffb      	ldrb	r3, [r7, #31]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d105      	bne.n	8006d80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d74:	4b7a      	ldr	r3, [pc, #488]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d78:	4a79      	ldr	r2, [pc, #484]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006d7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d7e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 80fe 	beq.w	8006f86 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	f040 80d0 	bne.w	8006f34 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006d94:	4b72      	ldr	r3, [pc, #456]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f003 0203 	and.w	r2, r3, #3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d130      	bne.n	8006e0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db2:	3b01      	subs	r3, #1
 8006db4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d127      	bne.n	8006e0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dc4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d11f      	bne.n	8006e0a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006dd4:	2a07      	cmp	r2, #7
 8006dd6:	bf14      	ite	ne
 8006dd8:	2201      	movne	r2, #1
 8006dda:	2200      	moveq	r2, #0
 8006ddc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d113      	bne.n	8006e0a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dec:	085b      	lsrs	r3, r3, #1
 8006dee:	3b01      	subs	r3, #1
 8006df0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d109      	bne.n	8006e0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e00:	085b      	lsrs	r3, r3, #1
 8006e02:	3b01      	subs	r3, #1
 8006e04:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d06e      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	2b0c      	cmp	r3, #12
 8006e0e:	d069      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006e10:	4b53      	ldr	r3, [pc, #332]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d105      	bne.n	8006e28 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006e1c:	4b50      	ldr	r3, [pc, #320]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e0ad      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006e2c:	4b4c      	ldr	r3, [pc, #304]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a4b      	ldr	r2, [pc, #300]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006e32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e36:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e38:	f7fc faa8 	bl	800338c <HAL_GetTick>
 8006e3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e3e:	e008      	b.n	8006e52 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e40:	f7fc faa4 	bl	800338c <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e09a      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e52:	4b43      	ldr	r3, [pc, #268]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1f0      	bne.n	8006e40 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e5e:	4b40      	ldr	r3, [pc, #256]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006e60:	68da      	ldr	r2, [r3, #12]
 8006e62:	4b40      	ldr	r3, [pc, #256]	@ (8006f64 <HAL_RCC_OscConfig+0x784>)
 8006e64:	4013      	ands	r3, r2
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006e6e:	3a01      	subs	r2, #1
 8006e70:	0112      	lsls	r2, r2, #4
 8006e72:	4311      	orrs	r1, r2
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006e78:	0212      	lsls	r2, r2, #8
 8006e7a:	4311      	orrs	r1, r2
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006e80:	0852      	lsrs	r2, r2, #1
 8006e82:	3a01      	subs	r2, #1
 8006e84:	0552      	lsls	r2, r2, #21
 8006e86:	4311      	orrs	r1, r2
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006e8c:	0852      	lsrs	r2, r2, #1
 8006e8e:	3a01      	subs	r2, #1
 8006e90:	0652      	lsls	r2, r2, #25
 8006e92:	4311      	orrs	r1, r2
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006e98:	0912      	lsrs	r2, r2, #4
 8006e9a:	0452      	lsls	r2, r2, #17
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	4930      	ldr	r1, [pc, #192]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006ea4:	4b2e      	ldr	r3, [pc, #184]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a2d      	ldr	r2, [pc, #180]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006eaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006eae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	4a2a      	ldr	r2, [pc, #168]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006eb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006eba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ebc:	f7fc fa66 	bl	800338c <HAL_GetTick>
 8006ec0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ec2:	e008      	b.n	8006ed6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ec4:	f7fc fa62 	bl	800338c <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d901      	bls.n	8006ed6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e058      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ed6:	4b22      	ldr	r3, [pc, #136]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d0f0      	beq.n	8006ec4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ee2:	e050      	b.n	8006f86 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e04f      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d148      	bne.n	8006f86 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a19      	ldr	r2, [pc, #100]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006efa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006efe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f00:	4b17      	ldr	r3, [pc, #92]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	4a16      	ldr	r2, [pc, #88]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006f06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f0c:	f7fc fa3e 	bl	800338c <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f14:	f7fc fa3a 	bl	800338c <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e030      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f26:	4b0e      	ldr	r3, [pc, #56]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0f0      	beq.n	8006f14 <HAL_RCC_OscConfig+0x734>
 8006f32:	e028      	b.n	8006f86 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	2b0c      	cmp	r3, #12
 8006f38:	d023      	beq.n	8006f82 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f3a:	4b09      	ldr	r3, [pc, #36]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a08      	ldr	r2, [pc, #32]	@ (8006f60 <HAL_RCC_OscConfig+0x780>)
 8006f40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f46:	f7fc fa21 	bl	800338c <HAL_GetTick>
 8006f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f4c:	e00c      	b.n	8006f68 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f4e:	f7fc fa1d 	bl	800338c <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d905      	bls.n	8006f68 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e013      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
 8006f60:	40021000 	.word	0x40021000
 8006f64:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f68:	4b09      	ldr	r3, [pc, #36]	@ (8006f90 <HAL_RCC_OscConfig+0x7b0>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1ec      	bne.n	8006f4e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006f74:	4b06      	ldr	r3, [pc, #24]	@ (8006f90 <HAL_RCC_OscConfig+0x7b0>)
 8006f76:	68da      	ldr	r2, [r3, #12]
 8006f78:	4905      	ldr	r1, [pc, #20]	@ (8006f90 <HAL_RCC_OscConfig+0x7b0>)
 8006f7a:	4b06      	ldr	r3, [pc, #24]	@ (8006f94 <HAL_RCC_OscConfig+0x7b4>)
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	60cb      	str	r3, [r1, #12]
 8006f80:	e001      	b.n	8006f86 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e000      	b.n	8006f88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3720      	adds	r7, #32
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	40021000 	.word	0x40021000
 8006f94:	feeefffc 	.word	0xfeeefffc

08006f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e0e7      	b.n	800717c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fac:	4b75      	ldr	r3, [pc, #468]	@ (8007184 <HAL_RCC_ClockConfig+0x1ec>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0307 	and.w	r3, r3, #7
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d910      	bls.n	8006fdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fba:	4b72      	ldr	r3, [pc, #456]	@ (8007184 <HAL_RCC_ClockConfig+0x1ec>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f023 0207 	bic.w	r2, r3, #7
 8006fc2:	4970      	ldr	r1, [pc, #448]	@ (8007184 <HAL_RCC_ClockConfig+0x1ec>)
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fca:	4b6e      	ldr	r3, [pc, #440]	@ (8007184 <HAL_RCC_ClockConfig+0x1ec>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d001      	beq.n	8006fdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e0cf      	b.n	800717c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d010      	beq.n	800700a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	4b66      	ldr	r3, [pc, #408]	@ (8007188 <HAL_RCC_ClockConfig+0x1f0>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d908      	bls.n	800700a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ff8:	4b63      	ldr	r3, [pc, #396]	@ (8007188 <HAL_RCC_ClockConfig+0x1f0>)
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	4960      	ldr	r1, [pc, #384]	@ (8007188 <HAL_RCC_ClockConfig+0x1f0>)
 8007006:	4313      	orrs	r3, r2
 8007008:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d04c      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	2b03      	cmp	r3, #3
 800701c:	d107      	bne.n	800702e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800701e:	4b5a      	ldr	r3, [pc, #360]	@ (8007188 <HAL_RCC_ClockConfig+0x1f0>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d121      	bne.n	800706e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e0a6      	b.n	800717c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d107      	bne.n	8007046 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007036:	4b54      	ldr	r3, [pc, #336]	@ (8007188 <HAL_RCC_ClockConfig+0x1f0>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d115      	bne.n	800706e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e09a      	b.n	800717c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d107      	bne.n	800705e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800704e:	4b4e      	ldr	r3, [pc, #312]	@ (8007188 <HAL_RCC_ClockConfig+0x1f0>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d109      	bne.n	800706e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e08e      	b.n	800717c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800705e:	4b4a      	ldr	r3, [pc, #296]	@ (8007188 <HAL_RCC_ClockConfig+0x1f0>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e086      	b.n	800717c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800706e:	4b46      	ldr	r3, [pc, #280]	@ (8007188 <HAL_RCC_ClockConfig+0x1f0>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f023 0203 	bic.w	r2, r3, #3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	4943      	ldr	r1, [pc, #268]	@ (8007188 <HAL_RCC_ClockConfig+0x1f0>)
 800707c:	4313      	orrs	r3, r2
 800707e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007080:	f7fc f984 	bl	800338c <HAL_GetTick>
 8007084:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007086:	e00a      	b.n	800709e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007088:	f7fc f980 	bl	800338c <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007096:	4293      	cmp	r3, r2
 8007098:	d901      	bls.n	800709e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e06e      	b.n	800717c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800709e:	4b3a      	ldr	r3, [pc, #232]	@ (8007188 <HAL_RCC_ClockConfig+0x1f0>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 020c 	and.w	r2, r3, #12
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d1eb      	bne.n	8007088 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d010      	beq.n	80070de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	4b31      	ldr	r3, [pc, #196]	@ (8007188 <HAL_RCC_ClockConfig+0x1f0>)
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d208      	bcs.n	80070de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070cc:	4b2e      	ldr	r3, [pc, #184]	@ (8007188 <HAL_RCC_ClockConfig+0x1f0>)
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	492b      	ldr	r1, [pc, #172]	@ (8007188 <HAL_RCC_ClockConfig+0x1f0>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070de:	4b29      	ldr	r3, [pc, #164]	@ (8007184 <HAL_RCC_ClockConfig+0x1ec>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0307 	and.w	r3, r3, #7
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d210      	bcs.n	800710e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ec:	4b25      	ldr	r3, [pc, #148]	@ (8007184 <HAL_RCC_ClockConfig+0x1ec>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f023 0207 	bic.w	r2, r3, #7
 80070f4:	4923      	ldr	r1, [pc, #140]	@ (8007184 <HAL_RCC_ClockConfig+0x1ec>)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070fc:	4b21      	ldr	r3, [pc, #132]	@ (8007184 <HAL_RCC_ClockConfig+0x1ec>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0307 	and.w	r3, r3, #7
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d001      	beq.n	800710e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e036      	b.n	800717c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0304 	and.w	r3, r3, #4
 8007116:	2b00      	cmp	r3, #0
 8007118:	d008      	beq.n	800712c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800711a:	4b1b      	ldr	r3, [pc, #108]	@ (8007188 <HAL_RCC_ClockConfig+0x1f0>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	4918      	ldr	r1, [pc, #96]	@ (8007188 <HAL_RCC_ClockConfig+0x1f0>)
 8007128:	4313      	orrs	r3, r2
 800712a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0308 	and.w	r3, r3, #8
 8007134:	2b00      	cmp	r3, #0
 8007136:	d009      	beq.n	800714c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007138:	4b13      	ldr	r3, [pc, #76]	@ (8007188 <HAL_RCC_ClockConfig+0x1f0>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	00db      	lsls	r3, r3, #3
 8007146:	4910      	ldr	r1, [pc, #64]	@ (8007188 <HAL_RCC_ClockConfig+0x1f0>)
 8007148:	4313      	orrs	r3, r2
 800714a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800714c:	f000 f824 	bl	8007198 <HAL_RCC_GetSysClockFreq>
 8007150:	4602      	mov	r2, r0
 8007152:	4b0d      	ldr	r3, [pc, #52]	@ (8007188 <HAL_RCC_ClockConfig+0x1f0>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	091b      	lsrs	r3, r3, #4
 8007158:	f003 030f 	and.w	r3, r3, #15
 800715c:	490b      	ldr	r1, [pc, #44]	@ (800718c <HAL_RCC_ClockConfig+0x1f4>)
 800715e:	5ccb      	ldrb	r3, [r1, r3]
 8007160:	f003 031f 	and.w	r3, r3, #31
 8007164:	fa22 f303 	lsr.w	r3, r2, r3
 8007168:	4a09      	ldr	r2, [pc, #36]	@ (8007190 <HAL_RCC_ClockConfig+0x1f8>)
 800716a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800716c:	4b09      	ldr	r3, [pc, #36]	@ (8007194 <HAL_RCC_ClockConfig+0x1fc>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4618      	mov	r0, r3
 8007172:	f7fc f8bb 	bl	80032ec <HAL_InitTick>
 8007176:	4603      	mov	r3, r0
 8007178:	72fb      	strb	r3, [r7, #11]

  return status;
 800717a:	7afb      	ldrb	r3, [r7, #11]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	40022000 	.word	0x40022000
 8007188:	40021000 	.word	0x40021000
 800718c:	0800eee8 	.word	0x0800eee8
 8007190:	20000004 	.word	0x20000004
 8007194:	2000003c 	.word	0x2000003c

08007198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007198:	b480      	push	{r7}
 800719a:	b089      	sub	sp, #36	@ 0x24
 800719c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800719e:	2300      	movs	r3, #0
 80071a0:	61fb      	str	r3, [r7, #28]
 80071a2:	2300      	movs	r3, #0
 80071a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071a6:	4b3e      	ldr	r3, [pc, #248]	@ (80072a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f003 030c 	and.w	r3, r3, #12
 80071ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071b0:	4b3b      	ldr	r3, [pc, #236]	@ (80072a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f003 0303 	and.w	r3, r3, #3
 80071b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d005      	beq.n	80071cc <HAL_RCC_GetSysClockFreq+0x34>
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	2b0c      	cmp	r3, #12
 80071c4:	d121      	bne.n	800720a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d11e      	bne.n	800720a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80071cc:	4b34      	ldr	r3, [pc, #208]	@ (80072a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d107      	bne.n	80071e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80071d8:	4b31      	ldr	r3, [pc, #196]	@ (80072a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80071da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071de:	0a1b      	lsrs	r3, r3, #8
 80071e0:	f003 030f 	and.w	r3, r3, #15
 80071e4:	61fb      	str	r3, [r7, #28]
 80071e6:	e005      	b.n	80071f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80071e8:	4b2d      	ldr	r3, [pc, #180]	@ (80072a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	091b      	lsrs	r3, r3, #4
 80071ee:	f003 030f 	and.w	r3, r3, #15
 80071f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80071f4:	4a2b      	ldr	r2, [pc, #172]	@ (80072a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10d      	bne.n	8007220 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007208:	e00a      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	2b04      	cmp	r3, #4
 800720e:	d102      	bne.n	8007216 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007210:	4b25      	ldr	r3, [pc, #148]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007212:	61bb      	str	r3, [r7, #24]
 8007214:	e004      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	2b08      	cmp	r3, #8
 800721a:	d101      	bne.n	8007220 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800721c:	4b23      	ldr	r3, [pc, #140]	@ (80072ac <HAL_RCC_GetSysClockFreq+0x114>)
 800721e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	2b0c      	cmp	r3, #12
 8007224:	d134      	bne.n	8007290 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007226:	4b1e      	ldr	r3, [pc, #120]	@ (80072a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f003 0303 	and.w	r3, r3, #3
 800722e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b02      	cmp	r3, #2
 8007234:	d003      	beq.n	800723e <HAL_RCC_GetSysClockFreq+0xa6>
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2b03      	cmp	r3, #3
 800723a:	d003      	beq.n	8007244 <HAL_RCC_GetSysClockFreq+0xac>
 800723c:	e005      	b.n	800724a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800723e:	4b1a      	ldr	r3, [pc, #104]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007240:	617b      	str	r3, [r7, #20]
      break;
 8007242:	e005      	b.n	8007250 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007244:	4b19      	ldr	r3, [pc, #100]	@ (80072ac <HAL_RCC_GetSysClockFreq+0x114>)
 8007246:	617b      	str	r3, [r7, #20]
      break;
 8007248:	e002      	b.n	8007250 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	617b      	str	r3, [r7, #20]
      break;
 800724e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007250:	4b13      	ldr	r3, [pc, #76]	@ (80072a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	091b      	lsrs	r3, r3, #4
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	3301      	adds	r3, #1
 800725c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800725e:	4b10      	ldr	r3, [pc, #64]	@ (80072a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	0a1b      	lsrs	r3, r3, #8
 8007264:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	fb03 f202 	mul.w	r2, r3, r2
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	fbb2 f3f3 	udiv	r3, r2, r3
 8007274:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007276:	4b0a      	ldr	r3, [pc, #40]	@ (80072a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	0e5b      	lsrs	r3, r3, #25
 800727c:	f003 0303 	and.w	r3, r3, #3
 8007280:	3301      	adds	r3, #1
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	fbb2 f3f3 	udiv	r3, r2, r3
 800728e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007290:	69bb      	ldr	r3, [r7, #24]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3724      	adds	r7, #36	@ 0x24
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	40021000 	.word	0x40021000
 80072a4:	0800ef00 	.word	0x0800ef00
 80072a8:	00f42400 	.word	0x00f42400
 80072ac:	007a1200 	.word	0x007a1200

080072b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072b0:	b480      	push	{r7}
 80072b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072b4:	4b03      	ldr	r3, [pc, #12]	@ (80072c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80072b6:	681b      	ldr	r3, [r3, #0]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	20000004 	.word	0x20000004

080072c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80072cc:	f7ff fff0 	bl	80072b0 <HAL_RCC_GetHCLKFreq>
 80072d0:	4602      	mov	r2, r0
 80072d2:	4b06      	ldr	r3, [pc, #24]	@ (80072ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	0a1b      	lsrs	r3, r3, #8
 80072d8:	f003 0307 	and.w	r3, r3, #7
 80072dc:	4904      	ldr	r1, [pc, #16]	@ (80072f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072de:	5ccb      	ldrb	r3, [r1, r3]
 80072e0:	f003 031f 	and.w	r3, r3, #31
 80072e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	40021000 	.word	0x40021000
 80072f0:	0800eef8 	.word	0x0800eef8

080072f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80072f8:	f7ff ffda 	bl	80072b0 <HAL_RCC_GetHCLKFreq>
 80072fc:	4602      	mov	r2, r0
 80072fe:	4b06      	ldr	r3, [pc, #24]	@ (8007318 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	0adb      	lsrs	r3, r3, #11
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	4904      	ldr	r1, [pc, #16]	@ (800731c <HAL_RCC_GetPCLK2Freq+0x28>)
 800730a:	5ccb      	ldrb	r3, [r1, r3]
 800730c:	f003 031f 	and.w	r3, r3, #31
 8007310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007314:	4618      	mov	r0, r3
 8007316:	bd80      	pop	{r7, pc}
 8007318:	40021000 	.word	0x40021000
 800731c:	0800eef8 	.word	0x0800eef8

08007320 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007328:	2300      	movs	r3, #0
 800732a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800732c:	4b2a      	ldr	r3, [pc, #168]	@ (80073d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800732e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007338:	f7ff f922 	bl	8006580 <HAL_PWREx_GetVoltageRange>
 800733c:	6178      	str	r0, [r7, #20]
 800733e:	e014      	b.n	800736a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007340:	4b25      	ldr	r3, [pc, #148]	@ (80073d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007344:	4a24      	ldr	r2, [pc, #144]	@ (80073d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007346:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800734a:	6593      	str	r3, [r2, #88]	@ 0x58
 800734c:	4b22      	ldr	r3, [pc, #136]	@ (80073d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800734e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007354:	60fb      	str	r3, [r7, #12]
 8007356:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007358:	f7ff f912 	bl	8006580 <HAL_PWREx_GetVoltageRange>
 800735c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800735e:	4b1e      	ldr	r3, [pc, #120]	@ (80073d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007362:	4a1d      	ldr	r2, [pc, #116]	@ (80073d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007364:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007368:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007370:	d10b      	bne.n	800738a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b80      	cmp	r3, #128	@ 0x80
 8007376:	d919      	bls.n	80073ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2ba0      	cmp	r3, #160	@ 0xa0
 800737c:	d902      	bls.n	8007384 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800737e:	2302      	movs	r3, #2
 8007380:	613b      	str	r3, [r7, #16]
 8007382:	e013      	b.n	80073ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007384:	2301      	movs	r3, #1
 8007386:	613b      	str	r3, [r7, #16]
 8007388:	e010      	b.n	80073ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2b80      	cmp	r3, #128	@ 0x80
 800738e:	d902      	bls.n	8007396 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007390:	2303      	movs	r3, #3
 8007392:	613b      	str	r3, [r7, #16]
 8007394:	e00a      	b.n	80073ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b80      	cmp	r3, #128	@ 0x80
 800739a:	d102      	bne.n	80073a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800739c:	2302      	movs	r3, #2
 800739e:	613b      	str	r3, [r7, #16]
 80073a0:	e004      	b.n	80073ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b70      	cmp	r3, #112	@ 0x70
 80073a6:	d101      	bne.n	80073ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80073a8:	2301      	movs	r3, #1
 80073aa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80073ac:	4b0b      	ldr	r3, [pc, #44]	@ (80073dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f023 0207 	bic.w	r2, r3, #7
 80073b4:	4909      	ldr	r1, [pc, #36]	@ (80073dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80073bc:	4b07      	ldr	r3, [pc, #28]	@ (80073dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0307 	and.w	r3, r3, #7
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d001      	beq.n	80073ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e000      	b.n	80073d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3718      	adds	r7, #24
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	40021000 	.word	0x40021000
 80073dc:	40022000 	.word	0x40022000

080073e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073e8:	2300      	movs	r3, #0
 80073ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073ec:	2300      	movs	r3, #0
 80073ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d041      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007400:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007404:	d02a      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007406:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800740a:	d824      	bhi.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800740c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007410:	d008      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007412:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007416:	d81e      	bhi.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00a      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800741c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007420:	d010      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007422:	e018      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007424:	4b86      	ldr	r3, [pc, #536]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	4a85      	ldr	r2, [pc, #532]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800742a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800742e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007430:	e015      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	3304      	adds	r3, #4
 8007436:	2100      	movs	r1, #0
 8007438:	4618      	mov	r0, r3
 800743a:	f000 facb 	bl	80079d4 <RCCEx_PLLSAI1_Config>
 800743e:	4603      	mov	r3, r0
 8007440:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007442:	e00c      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	3320      	adds	r3, #32
 8007448:	2100      	movs	r1, #0
 800744a:	4618      	mov	r0, r3
 800744c:	f000 fbb6 	bl	8007bbc <RCCEx_PLLSAI2_Config>
 8007450:	4603      	mov	r3, r0
 8007452:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007454:	e003      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	74fb      	strb	r3, [r7, #19]
      break;
 800745a:	e000      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800745c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800745e:	7cfb      	ldrb	r3, [r7, #19]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10b      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007464:	4b76      	ldr	r3, [pc, #472]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800746a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007472:	4973      	ldr	r1, [pc, #460]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007474:	4313      	orrs	r3, r2
 8007476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800747a:	e001      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747c:	7cfb      	ldrb	r3, [r7, #19]
 800747e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d041      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007490:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007494:	d02a      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007496:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800749a:	d824      	bhi.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800749c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074a0:	d008      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80074a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074a6:	d81e      	bhi.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00a      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80074ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074b0:	d010      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80074b2:	e018      	b.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80074b4:	4b62      	ldr	r3, [pc, #392]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	4a61      	ldr	r2, [pc, #388]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80074c0:	e015      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	3304      	adds	r3, #4
 80074c6:	2100      	movs	r1, #0
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 fa83 	bl	80079d4 <RCCEx_PLLSAI1_Config>
 80074ce:	4603      	mov	r3, r0
 80074d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80074d2:	e00c      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3320      	adds	r3, #32
 80074d8:	2100      	movs	r1, #0
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fb6e 	bl	8007bbc <RCCEx_PLLSAI2_Config>
 80074e0:	4603      	mov	r3, r0
 80074e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80074e4:	e003      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	74fb      	strb	r3, [r7, #19]
      break;
 80074ea:	e000      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80074ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ee:	7cfb      	ldrb	r3, [r7, #19]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10b      	bne.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80074f4:	4b52      	ldr	r3, [pc, #328]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007502:	494f      	ldr	r1, [pc, #316]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007504:	4313      	orrs	r3, r2
 8007506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800750a:	e001      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800750c:	7cfb      	ldrb	r3, [r7, #19]
 800750e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 80a0 	beq.w	800765e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800751e:	2300      	movs	r3, #0
 8007520:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007522:	4b47      	ldr	r3, [pc, #284]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d101      	bne.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800752e:	2301      	movs	r3, #1
 8007530:	e000      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007532:	2300      	movs	r3, #0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00d      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007538:	4b41      	ldr	r3, [pc, #260]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800753a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800753c:	4a40      	ldr	r2, [pc, #256]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800753e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007542:	6593      	str	r3, [r2, #88]	@ 0x58
 8007544:	4b3e      	ldr	r3, [pc, #248]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800754c:	60bb      	str	r3, [r7, #8]
 800754e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007550:	2301      	movs	r3, #1
 8007552:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007554:	4b3b      	ldr	r3, [pc, #236]	@ (8007644 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a3a      	ldr	r2, [pc, #232]	@ (8007644 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800755a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800755e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007560:	f7fb ff14 	bl	800338c <HAL_GetTick>
 8007564:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007566:	e009      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007568:	f7fb ff10 	bl	800338c <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	2b02      	cmp	r3, #2
 8007574:	d902      	bls.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	74fb      	strb	r3, [r7, #19]
        break;
 800757a:	e005      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800757c:	4b31      	ldr	r3, [pc, #196]	@ (8007644 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007584:	2b00      	cmp	r3, #0
 8007586:	d0ef      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007588:	7cfb      	ldrb	r3, [r7, #19]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d15c      	bne.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800758e:	4b2c      	ldr	r3, [pc, #176]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007594:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007598:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d01f      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d019      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80075ac:	4b24      	ldr	r3, [pc, #144]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075b8:	4b21      	ldr	r3, [pc, #132]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075be:	4a20      	ldr	r2, [pc, #128]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075c8:	4b1d      	ldr	r3, [pc, #116]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ce:	4a1c      	ldr	r2, [pc, #112]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80075d8:	4a19      	ldr	r2, [pc, #100]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d016      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ea:	f7fb fecf 	bl	800338c <HAL_GetTick>
 80075ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075f0:	e00b      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075f2:	f7fb fecb 	bl	800338c <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007600:	4293      	cmp	r3, r2
 8007602:	d902      	bls.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	74fb      	strb	r3, [r7, #19]
            break;
 8007608:	e006      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800760a:	4b0d      	ldr	r3, [pc, #52]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800760c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007610:	f003 0302 	and.w	r3, r3, #2
 8007614:	2b00      	cmp	r3, #0
 8007616:	d0ec      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007618:	7cfb      	ldrb	r3, [r7, #19]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10c      	bne.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800761e:	4b08      	ldr	r3, [pc, #32]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007624:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800762e:	4904      	ldr	r1, [pc, #16]	@ (8007640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007630:	4313      	orrs	r3, r2
 8007632:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007636:	e009      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007638:	7cfb      	ldrb	r3, [r7, #19]
 800763a:	74bb      	strb	r3, [r7, #18]
 800763c:	e006      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800763e:	bf00      	nop
 8007640:	40021000 	.word	0x40021000
 8007644:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007648:	7cfb      	ldrb	r3, [r7, #19]
 800764a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800764c:	7c7b      	ldrb	r3, [r7, #17]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d105      	bne.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007652:	4b9e      	ldr	r3, [pc, #632]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007656:	4a9d      	ldr	r2, [pc, #628]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007658:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800765c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800766a:	4b98      	ldr	r3, [pc, #608]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800766c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007670:	f023 0203 	bic.w	r2, r3, #3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007678:	4994      	ldr	r1, [pc, #592]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800767a:	4313      	orrs	r3, r2
 800767c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00a      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800768c:	4b8f      	ldr	r3, [pc, #572]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800768e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007692:	f023 020c 	bic.w	r2, r3, #12
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800769a:	498c      	ldr	r1, [pc, #560]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800769c:	4313      	orrs	r3, r2
 800769e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0304 	and.w	r3, r3, #4
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80076ae:	4b87      	ldr	r3, [pc, #540]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076bc:	4983      	ldr	r1, [pc, #524]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0308 	and.w	r3, r3, #8
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076d0:	4b7e      	ldr	r3, [pc, #504]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076de:	497b      	ldr	r1, [pc, #492]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0310 	and.w	r3, r3, #16
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80076f2:	4b76      	ldr	r3, [pc, #472]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007700:	4972      	ldr	r1, [pc, #456]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007702:	4313      	orrs	r3, r2
 8007704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00a      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007714:	4b6d      	ldr	r3, [pc, #436]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800771a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007722:	496a      	ldr	r1, [pc, #424]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007724:	4313      	orrs	r3, r2
 8007726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007736:	4b65      	ldr	r3, [pc, #404]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800773c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007744:	4961      	ldr	r1, [pc, #388]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007746:	4313      	orrs	r3, r2
 8007748:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00a      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007758:	4b5c      	ldr	r3, [pc, #368]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800775a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800775e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007766:	4959      	ldr	r1, [pc, #356]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007768:	4313      	orrs	r3, r2
 800776a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800777a:	4b54      	ldr	r3, [pc, #336]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800777c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007780:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007788:	4950      	ldr	r1, [pc, #320]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800778a:	4313      	orrs	r3, r2
 800778c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800779c:	4b4b      	ldr	r3, [pc, #300]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800779e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077aa:	4948      	ldr	r1, [pc, #288]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80077be:	4b43      	ldr	r3, [pc, #268]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077cc:	493f      	ldr	r1, [pc, #252]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d028      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077e0:	4b3a      	ldr	r3, [pc, #232]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077ee:	4937      	ldr	r1, [pc, #220]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077fe:	d106      	bne.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007800:	4b32      	ldr	r3, [pc, #200]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	4a31      	ldr	r2, [pc, #196]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007806:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800780a:	60d3      	str	r3, [r2, #12]
 800780c:	e011      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007812:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007816:	d10c      	bne.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	3304      	adds	r3, #4
 800781c:	2101      	movs	r1, #1
 800781e:	4618      	mov	r0, r3
 8007820:	f000 f8d8 	bl	80079d4 <RCCEx_PLLSAI1_Config>
 8007824:	4603      	mov	r3, r0
 8007826:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007828:	7cfb      	ldrb	r3, [r7, #19]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800782e:	7cfb      	ldrb	r3, [r7, #19]
 8007830:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d028      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800783e:	4b23      	ldr	r3, [pc, #140]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007844:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800784c:	491f      	ldr	r1, [pc, #124]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800784e:	4313      	orrs	r3, r2
 8007850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007858:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800785c:	d106      	bne.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800785e:	4b1b      	ldr	r3, [pc, #108]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	4a1a      	ldr	r2, [pc, #104]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007864:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007868:	60d3      	str	r3, [r2, #12]
 800786a:	e011      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007870:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007874:	d10c      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	3304      	adds	r3, #4
 800787a:	2101      	movs	r1, #1
 800787c:	4618      	mov	r0, r3
 800787e:	f000 f8a9 	bl	80079d4 <RCCEx_PLLSAI1_Config>
 8007882:	4603      	mov	r3, r0
 8007884:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007886:	7cfb      	ldrb	r3, [r7, #19]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800788c:	7cfb      	ldrb	r3, [r7, #19]
 800788e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d02b      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800789c:	4b0b      	ldr	r3, [pc, #44]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800789e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078aa:	4908      	ldr	r1, [pc, #32]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078ba:	d109      	bne.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078bc:	4b03      	ldr	r3, [pc, #12]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	4a02      	ldr	r2, [pc, #8]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078c6:	60d3      	str	r3, [r2, #12]
 80078c8:	e014      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80078ca:	bf00      	nop
 80078cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80078d8:	d10c      	bne.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	3304      	adds	r3, #4
 80078de:	2101      	movs	r1, #1
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 f877 	bl	80079d4 <RCCEx_PLLSAI1_Config>
 80078e6:	4603      	mov	r3, r0
 80078e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078ea:	7cfb      	ldrb	r3, [r7, #19]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80078f0:	7cfb      	ldrb	r3, [r7, #19]
 80078f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d02f      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007900:	4b2b      	ldr	r3, [pc, #172]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007906:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800790e:	4928      	ldr	r1, [pc, #160]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007910:	4313      	orrs	r3, r2
 8007912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800791a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800791e:	d10d      	bne.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	3304      	adds	r3, #4
 8007924:	2102      	movs	r1, #2
 8007926:	4618      	mov	r0, r3
 8007928:	f000 f854 	bl	80079d4 <RCCEx_PLLSAI1_Config>
 800792c:	4603      	mov	r3, r0
 800792e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007930:	7cfb      	ldrb	r3, [r7, #19]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d014      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007936:	7cfb      	ldrb	r3, [r7, #19]
 8007938:	74bb      	strb	r3, [r7, #18]
 800793a:	e011      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007944:	d10c      	bne.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	3320      	adds	r3, #32
 800794a:	2102      	movs	r1, #2
 800794c:	4618      	mov	r0, r3
 800794e:	f000 f935 	bl	8007bbc <RCCEx_PLLSAI2_Config>
 8007952:	4603      	mov	r3, r0
 8007954:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007956:	7cfb      	ldrb	r3, [r7, #19]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800795c:	7cfb      	ldrb	r3, [r7, #19]
 800795e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800796c:	4b10      	ldr	r3, [pc, #64]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800796e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007972:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800797a:	490d      	ldr	r1, [pc, #52]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800797c:	4313      	orrs	r3, r2
 800797e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00b      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800798e:	4b08      	ldr	r3, [pc, #32]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007994:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800799e:	4904      	ldr	r1, [pc, #16]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80079a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	40021000 	.word	0x40021000

080079b4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80079b4:	b480      	push	{r7}
 80079b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80079b8:	4b05      	ldr	r3, [pc, #20]	@ (80079d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a04      	ldr	r2, [pc, #16]	@ (80079d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80079be:	f043 0304 	orr.w	r3, r3, #4
 80079c2:	6013      	str	r3, [r2, #0]
}
 80079c4:	bf00      	nop
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	40021000 	.word	0x40021000

080079d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80079e2:	4b75      	ldr	r3, [pc, #468]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	f003 0303 	and.w	r3, r3, #3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d018      	beq.n	8007a20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80079ee:	4b72      	ldr	r3, [pc, #456]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	f003 0203 	and.w	r2, r3, #3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d10d      	bne.n	8007a1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
       ||
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d009      	beq.n	8007a1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007a06:	4b6c      	ldr	r3, [pc, #432]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	091b      	lsrs	r3, r3, #4
 8007a0c:	f003 0307 	and.w	r3, r3, #7
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
       ||
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d047      	beq.n	8007aaa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	73fb      	strb	r3, [r7, #15]
 8007a1e:	e044      	b.n	8007aaa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	d018      	beq.n	8007a5a <RCCEx_PLLSAI1_Config+0x86>
 8007a28:	2b03      	cmp	r3, #3
 8007a2a:	d825      	bhi.n	8007a78 <RCCEx_PLLSAI1_Config+0xa4>
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d002      	beq.n	8007a36 <RCCEx_PLLSAI1_Config+0x62>
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d009      	beq.n	8007a48 <RCCEx_PLLSAI1_Config+0x74>
 8007a34:	e020      	b.n	8007a78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007a36:	4b60      	ldr	r3, [pc, #384]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d11d      	bne.n	8007a7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a46:	e01a      	b.n	8007a7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a48:	4b5b      	ldr	r3, [pc, #364]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d116      	bne.n	8007a82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a58:	e013      	b.n	8007a82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007a5a:	4b57      	ldr	r3, [pc, #348]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10f      	bne.n	8007a86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007a66:	4b54      	ldr	r3, [pc, #336]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d109      	bne.n	8007a86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a76:	e006      	b.n	8007a86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a7c:	e004      	b.n	8007a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a7e:	bf00      	nop
 8007a80:	e002      	b.n	8007a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a82:	bf00      	nop
 8007a84:	e000      	b.n	8007a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a86:	bf00      	nop
    }

    if(status == HAL_OK)
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10d      	bne.n	8007aaa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007a8e:	4b4a      	ldr	r3, [pc, #296]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6819      	ldr	r1, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	011b      	lsls	r3, r3, #4
 8007aa2:	430b      	orrs	r3, r1
 8007aa4:	4944      	ldr	r1, [pc, #272]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d17d      	bne.n	8007bac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007ab0:	4b41      	ldr	r3, [pc, #260]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a40      	ldr	r2, [pc, #256]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ab6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007abc:	f7fb fc66 	bl	800338c <HAL_GetTick>
 8007ac0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007ac2:	e009      	b.n	8007ad8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ac4:	f7fb fc62 	bl	800338c <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d902      	bls.n	8007ad8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	73fb      	strb	r3, [r7, #15]
        break;
 8007ad6:	e005      	b.n	8007ae4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007ad8:	4b37      	ldr	r3, [pc, #220]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1ef      	bne.n	8007ac4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d160      	bne.n	8007bac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d111      	bne.n	8007b14 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007af0:	4b31      	ldr	r3, [pc, #196]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007af8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6892      	ldr	r2, [r2, #8]
 8007b00:	0211      	lsls	r1, r2, #8
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	68d2      	ldr	r2, [r2, #12]
 8007b06:	0912      	lsrs	r2, r2, #4
 8007b08:	0452      	lsls	r2, r2, #17
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	492a      	ldr	r1, [pc, #168]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	610b      	str	r3, [r1, #16]
 8007b12:	e027      	b.n	8007b64 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d112      	bne.n	8007b40 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b1a:	4b27      	ldr	r3, [pc, #156]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007b22:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	6892      	ldr	r2, [r2, #8]
 8007b2a:	0211      	lsls	r1, r2, #8
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	6912      	ldr	r2, [r2, #16]
 8007b30:	0852      	lsrs	r2, r2, #1
 8007b32:	3a01      	subs	r2, #1
 8007b34:	0552      	lsls	r2, r2, #21
 8007b36:	430a      	orrs	r2, r1
 8007b38:	491f      	ldr	r1, [pc, #124]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	610b      	str	r3, [r1, #16]
 8007b3e:	e011      	b.n	8007b64 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b40:	4b1d      	ldr	r3, [pc, #116]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007b48:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	6892      	ldr	r2, [r2, #8]
 8007b50:	0211      	lsls	r1, r2, #8
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	6952      	ldr	r2, [r2, #20]
 8007b56:	0852      	lsrs	r2, r2, #1
 8007b58:	3a01      	subs	r2, #1
 8007b5a:	0652      	lsls	r2, r2, #25
 8007b5c:	430a      	orrs	r2, r1
 8007b5e:	4916      	ldr	r1, [pc, #88]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007b64:	4b14      	ldr	r3, [pc, #80]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a13      	ldr	r2, [pc, #76]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b70:	f7fb fc0c 	bl	800338c <HAL_GetTick>
 8007b74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007b76:	e009      	b.n	8007b8c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b78:	f7fb fc08 	bl	800338c <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d902      	bls.n	8007b8c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	73fb      	strb	r3, [r7, #15]
          break;
 8007b8a:	e005      	b.n	8007b98 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d0ef      	beq.n	8007b78 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d106      	bne.n	8007bac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007b9e:	4b06      	ldr	r3, [pc, #24]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ba0:	691a      	ldr	r2, [r3, #16]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	4904      	ldr	r1, [pc, #16]	@ (8007bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	40021000 	.word	0x40021000

08007bbc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007bca:	4b6a      	ldr	r3, [pc, #424]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	f003 0303 	and.w	r3, r3, #3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d018      	beq.n	8007c08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007bd6:	4b67      	ldr	r3, [pc, #412]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f003 0203 	and.w	r2, r3, #3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d10d      	bne.n	8007c02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
       ||
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d009      	beq.n	8007c02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007bee:	4b61      	ldr	r3, [pc, #388]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	091b      	lsrs	r3, r3, #4
 8007bf4:	f003 0307 	and.w	r3, r3, #7
 8007bf8:	1c5a      	adds	r2, r3, #1
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
       ||
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d047      	beq.n	8007c92 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	73fb      	strb	r3, [r7, #15]
 8007c06:	e044      	b.n	8007c92 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d018      	beq.n	8007c42 <RCCEx_PLLSAI2_Config+0x86>
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	d825      	bhi.n	8007c60 <RCCEx_PLLSAI2_Config+0xa4>
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d002      	beq.n	8007c1e <RCCEx_PLLSAI2_Config+0x62>
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d009      	beq.n	8007c30 <RCCEx_PLLSAI2_Config+0x74>
 8007c1c:	e020      	b.n	8007c60 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007c1e:	4b55      	ldr	r3, [pc, #340]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d11d      	bne.n	8007c66 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c2e:	e01a      	b.n	8007c66 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007c30:	4b50      	ldr	r3, [pc, #320]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d116      	bne.n	8007c6a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c40:	e013      	b.n	8007c6a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007c42:	4b4c      	ldr	r3, [pc, #304]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10f      	bne.n	8007c6e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007c4e:	4b49      	ldr	r3, [pc, #292]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d109      	bne.n	8007c6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c5e:	e006      	b.n	8007c6e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	73fb      	strb	r3, [r7, #15]
      break;
 8007c64:	e004      	b.n	8007c70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007c66:	bf00      	nop
 8007c68:	e002      	b.n	8007c70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007c6a:	bf00      	nop
 8007c6c:	e000      	b.n	8007c70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007c6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10d      	bne.n	8007c92 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007c76:	4b3f      	ldr	r3, [pc, #252]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6819      	ldr	r1, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	011b      	lsls	r3, r3, #4
 8007c8a:	430b      	orrs	r3, r1
 8007c8c:	4939      	ldr	r1, [pc, #228]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d167      	bne.n	8007d68 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007c98:	4b36      	ldr	r3, [pc, #216]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a35      	ldr	r2, [pc, #212]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ca4:	f7fb fb72 	bl	800338c <HAL_GetTick>
 8007ca8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007caa:	e009      	b.n	8007cc0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007cac:	f7fb fb6e 	bl	800338c <HAL_GetTick>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d902      	bls.n	8007cc0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	73fb      	strb	r3, [r7, #15]
        break;
 8007cbe:	e005      	b.n	8007ccc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007cc0:	4b2c      	ldr	r3, [pc, #176]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1ef      	bne.n	8007cac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d14a      	bne.n	8007d68 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d111      	bne.n	8007cfc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007cd8:	4b26      	ldr	r3, [pc, #152]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cda:	695b      	ldr	r3, [r3, #20]
 8007cdc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007ce0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6892      	ldr	r2, [r2, #8]
 8007ce8:	0211      	lsls	r1, r2, #8
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	68d2      	ldr	r2, [r2, #12]
 8007cee:	0912      	lsrs	r2, r2, #4
 8007cf0:	0452      	lsls	r2, r2, #17
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	491f      	ldr	r1, [pc, #124]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	614b      	str	r3, [r1, #20]
 8007cfa:	e011      	b.n	8007d20 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007d04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	6892      	ldr	r2, [r2, #8]
 8007d0c:	0211      	lsls	r1, r2, #8
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	6912      	ldr	r2, [r2, #16]
 8007d12:	0852      	lsrs	r2, r2, #1
 8007d14:	3a01      	subs	r2, #1
 8007d16:	0652      	lsls	r2, r2, #25
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	4916      	ldr	r1, [pc, #88]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007d20:	4b14      	ldr	r3, [pc, #80]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a13      	ldr	r2, [pc, #76]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d2c:	f7fb fb2e 	bl	800338c <HAL_GetTick>
 8007d30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007d32:	e009      	b.n	8007d48 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007d34:	f7fb fb2a 	bl	800338c <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d902      	bls.n	8007d48 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	73fb      	strb	r3, [r7, #15]
          break;
 8007d46:	e005      	b.n	8007d54 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007d48:	4b0a      	ldr	r3, [pc, #40]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d0ef      	beq.n	8007d34 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d106      	bne.n	8007d68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007d5a:	4b06      	ldr	r3, [pc, #24]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d5c:	695a      	ldr	r2, [r3, #20]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	4904      	ldr	r1, [pc, #16]	@ (8007d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	40021000 	.word	0x40021000

08007d78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e095      	b.n	8007eb6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d108      	bne.n	8007da4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d9a:	d009      	beq.n	8007db0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	61da      	str	r2, [r3, #28]
 8007da2:	e005      	b.n	8007db0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d106      	bne.n	8007dd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7fa fb6c 	bl	80024a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007de6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007df0:	d902      	bls.n	8007df8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007df2:	2300      	movs	r3, #0
 8007df4:	60fb      	str	r3, [r7, #12]
 8007df6:	e002      	b.n	8007dfe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007df8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007dfc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007e06:	d007      	beq.n	8007e18 <HAL_SPI_Init+0xa0>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e10:	d002      	beq.n	8007e18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007e28:	431a      	orrs	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	f003 0302 	and.w	r3, r3, #2
 8007e32:	431a      	orrs	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e46:	431a      	orrs	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e50:	431a      	orrs	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e5a:	ea42 0103 	orr.w	r1, r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e62:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	0c1b      	lsrs	r3, r3, #16
 8007e74:	f003 0204 	and.w	r2, r3, #4
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e7c:	f003 0310 	and.w	r3, r3, #16
 8007e80:	431a      	orrs	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e86:	f003 0308 	and.w	r3, r3, #8
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007e94:	ea42 0103 	orr.w	r1, r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e049      	b.n	8007f64 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d106      	bne.n	8007eea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7fa fb23 	bl	8002530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2202      	movs	r2, #2
 8007eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	3304      	adds	r3, #4
 8007efa:	4619      	mov	r1, r3
 8007efc:	4610      	mov	r0, r2
 8007efe:	f000 fe7b 	bl	8008bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d001      	beq.n	8007f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e04f      	b.n	8008024 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2202      	movs	r2, #2
 8007f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68da      	ldr	r2, [r3, #12]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f042 0201 	orr.w	r2, r2, #1
 8007f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a23      	ldr	r2, [pc, #140]	@ (8008030 <HAL_TIM_Base_Start_IT+0xc4>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d01d      	beq.n	8007fe2 <HAL_TIM_Base_Start_IT+0x76>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fae:	d018      	beq.n	8007fe2 <HAL_TIM_Base_Start_IT+0x76>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8008034 <HAL_TIM_Base_Start_IT+0xc8>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d013      	beq.n	8007fe2 <HAL_TIM_Base_Start_IT+0x76>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8008038 <HAL_TIM_Base_Start_IT+0xcc>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d00e      	beq.n	8007fe2 <HAL_TIM_Base_Start_IT+0x76>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800803c <HAL_TIM_Base_Start_IT+0xd0>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d009      	beq.n	8007fe2 <HAL_TIM_Base_Start_IT+0x76>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8008040 <HAL_TIM_Base_Start_IT+0xd4>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d004      	beq.n	8007fe2 <HAL_TIM_Base_Start_IT+0x76>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a19      	ldr	r2, [pc, #100]	@ (8008044 <HAL_TIM_Base_Start_IT+0xd8>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d115      	bne.n	800800e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	689a      	ldr	r2, [r3, #8]
 8007fe8:	4b17      	ldr	r3, [pc, #92]	@ (8008048 <HAL_TIM_Base_Start_IT+0xdc>)
 8007fea:	4013      	ands	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2b06      	cmp	r3, #6
 8007ff2:	d015      	beq.n	8008020 <HAL_TIM_Base_Start_IT+0xb4>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ffa:	d011      	beq.n	8008020 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f042 0201 	orr.w	r2, r2, #1
 800800a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800800c:	e008      	b.n	8008020 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f042 0201 	orr.w	r2, r2, #1
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	e000      	b.n	8008022 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008020:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr
 8008030:	40012c00 	.word	0x40012c00
 8008034:	40000400 	.word	0x40000400
 8008038:	40000800 	.word	0x40000800
 800803c:	40000c00 	.word	0x40000c00
 8008040:	40013400 	.word	0x40013400
 8008044:	40014000 	.word	0x40014000
 8008048:	00010007 	.word	0x00010007

0800804c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68da      	ldr	r2, [r3, #12]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 0201 	bic.w	r2, r2, #1
 8008062:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6a1a      	ldr	r2, [r3, #32]
 800806a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800806e:	4013      	ands	r3, r2
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10f      	bne.n	8008094 <HAL_TIM_Base_Stop_IT+0x48>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6a1a      	ldr	r2, [r3, #32]
 800807a:	f240 4344 	movw	r3, #1092	@ 0x444
 800807e:	4013      	ands	r3, r2
 8008080:	2b00      	cmp	r3, #0
 8008082:	d107      	bne.n	8008094 <HAL_TIM_Base_Stop_IT+0x48>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0201 	bic.w	r2, r2, #1
 8008092:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b082      	sub	sp, #8
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e049      	b.n	8008150 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d106      	bne.n	80080d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f841 	bl	8008158 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2202      	movs	r2, #2
 80080da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3304      	adds	r3, #4
 80080e6:	4619      	mov	r1, r3
 80080e8:	4610      	mov	r0, r2
 80080ea:	f000 fd85 	bl	8008bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008160:	bf00      	nop
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d109      	bne.n	8008194 <HAL_TIM_PWM_Start_IT+0x28>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2b01      	cmp	r3, #1
 800818a:	bf14      	ite	ne
 800818c:	2301      	movne	r3, #1
 800818e:	2300      	moveq	r3, #0
 8008190:	b2db      	uxtb	r3, r3
 8008192:	e03c      	b.n	800820e <HAL_TIM_PWM_Start_IT+0xa2>
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	2b04      	cmp	r3, #4
 8008198:	d109      	bne.n	80081ae <HAL_TIM_PWM_Start_IT+0x42>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	bf14      	ite	ne
 80081a6:	2301      	movne	r3, #1
 80081a8:	2300      	moveq	r3, #0
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	e02f      	b.n	800820e <HAL_TIM_PWM_Start_IT+0xa2>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b08      	cmp	r3, #8
 80081b2:	d109      	bne.n	80081c8 <HAL_TIM_PWM_Start_IT+0x5c>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b01      	cmp	r3, #1
 80081be:	bf14      	ite	ne
 80081c0:	2301      	movne	r3, #1
 80081c2:	2300      	moveq	r3, #0
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	e022      	b.n	800820e <HAL_TIM_PWM_Start_IT+0xa2>
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	2b0c      	cmp	r3, #12
 80081cc:	d109      	bne.n	80081e2 <HAL_TIM_PWM_Start_IT+0x76>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	bf14      	ite	ne
 80081da:	2301      	movne	r3, #1
 80081dc:	2300      	moveq	r3, #0
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	e015      	b.n	800820e <HAL_TIM_PWM_Start_IT+0xa2>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b10      	cmp	r3, #16
 80081e6:	d109      	bne.n	80081fc <HAL_TIM_PWM_Start_IT+0x90>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	bf14      	ite	ne
 80081f4:	2301      	movne	r3, #1
 80081f6:	2300      	moveq	r3, #0
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	e008      	b.n	800820e <HAL_TIM_PWM_Start_IT+0xa2>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b01      	cmp	r3, #1
 8008206:	bf14      	ite	ne
 8008208:	2301      	movne	r3, #1
 800820a:	2300      	moveq	r3, #0
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e0e7      	b.n	80083e6 <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d104      	bne.n	8008226 <HAL_TIM_PWM_Start_IT+0xba>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2202      	movs	r2, #2
 8008220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008224:	e023      	b.n	800826e <HAL_TIM_PWM_Start_IT+0x102>
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	2b04      	cmp	r3, #4
 800822a:	d104      	bne.n	8008236 <HAL_TIM_PWM_Start_IT+0xca>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2202      	movs	r2, #2
 8008230:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008234:	e01b      	b.n	800826e <HAL_TIM_PWM_Start_IT+0x102>
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2b08      	cmp	r3, #8
 800823a:	d104      	bne.n	8008246 <HAL_TIM_PWM_Start_IT+0xda>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008244:	e013      	b.n	800826e <HAL_TIM_PWM_Start_IT+0x102>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2b0c      	cmp	r3, #12
 800824a:	d104      	bne.n	8008256 <HAL_TIM_PWM_Start_IT+0xea>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2202      	movs	r2, #2
 8008250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008254:	e00b      	b.n	800826e <HAL_TIM_PWM_Start_IT+0x102>
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	2b10      	cmp	r3, #16
 800825a:	d104      	bne.n	8008266 <HAL_TIM_PWM_Start_IT+0xfa>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008264:	e003      	b.n	800826e <HAL_TIM_PWM_Start_IT+0x102>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2202      	movs	r2, #2
 800826a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2b0c      	cmp	r3, #12
 8008272:	d841      	bhi.n	80082f8 <HAL_TIM_PWM_Start_IT+0x18c>
 8008274:	a201      	add	r2, pc, #4	@ (adr r2, 800827c <HAL_TIM_PWM_Start_IT+0x110>)
 8008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827a:	bf00      	nop
 800827c:	080082b1 	.word	0x080082b1
 8008280:	080082f9 	.word	0x080082f9
 8008284:	080082f9 	.word	0x080082f9
 8008288:	080082f9 	.word	0x080082f9
 800828c:	080082c3 	.word	0x080082c3
 8008290:	080082f9 	.word	0x080082f9
 8008294:	080082f9 	.word	0x080082f9
 8008298:	080082f9 	.word	0x080082f9
 800829c:	080082d5 	.word	0x080082d5
 80082a0:	080082f9 	.word	0x080082f9
 80082a4:	080082f9 	.word	0x080082f9
 80082a8:	080082f9 	.word	0x080082f9
 80082ac:	080082e7 	.word	0x080082e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68da      	ldr	r2, [r3, #12]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f042 0202 	orr.w	r2, r2, #2
 80082be:	60da      	str	r2, [r3, #12]
      break;
 80082c0:	e01d      	b.n	80082fe <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68da      	ldr	r2, [r3, #12]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f042 0204 	orr.w	r2, r2, #4
 80082d0:	60da      	str	r2, [r3, #12]
      break;
 80082d2:	e014      	b.n	80082fe <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68da      	ldr	r2, [r3, #12]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0208 	orr.w	r2, r2, #8
 80082e2:	60da      	str	r2, [r3, #12]
      break;
 80082e4:	e00b      	b.n	80082fe <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68da      	ldr	r2, [r3, #12]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f042 0210 	orr.w	r2, r2, #16
 80082f4:	60da      	str	r2, [r3, #12]
      break;
 80082f6:	e002      	b.n	80082fe <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	73fb      	strb	r3, [r7, #15]
      break;
 80082fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d16f      	bne.n	80083e4 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2201      	movs	r2, #1
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	4618      	mov	r0, r3
 800830e:	f001 f889 	bl	8009424 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a36      	ldr	r2, [pc, #216]	@ (80083f0 <HAL_TIM_PWM_Start_IT+0x284>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d013      	beq.n	8008344 <HAL_TIM_PWM_Start_IT+0x1d8>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a34      	ldr	r2, [pc, #208]	@ (80083f4 <HAL_TIM_PWM_Start_IT+0x288>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d00e      	beq.n	8008344 <HAL_TIM_PWM_Start_IT+0x1d8>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a33      	ldr	r2, [pc, #204]	@ (80083f8 <HAL_TIM_PWM_Start_IT+0x28c>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d009      	beq.n	8008344 <HAL_TIM_PWM_Start_IT+0x1d8>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a31      	ldr	r2, [pc, #196]	@ (80083fc <HAL_TIM_PWM_Start_IT+0x290>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d004      	beq.n	8008344 <HAL_TIM_PWM_Start_IT+0x1d8>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a30      	ldr	r2, [pc, #192]	@ (8008400 <HAL_TIM_PWM_Start_IT+0x294>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d101      	bne.n	8008348 <HAL_TIM_PWM_Start_IT+0x1dc>
 8008344:	2301      	movs	r3, #1
 8008346:	e000      	b.n	800834a <HAL_TIM_PWM_Start_IT+0x1de>
 8008348:	2300      	movs	r3, #0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d007      	beq.n	800835e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800835c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a23      	ldr	r2, [pc, #140]	@ (80083f0 <HAL_TIM_PWM_Start_IT+0x284>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d01d      	beq.n	80083a4 <HAL_TIM_PWM_Start_IT+0x238>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008370:	d018      	beq.n	80083a4 <HAL_TIM_PWM_Start_IT+0x238>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a23      	ldr	r2, [pc, #140]	@ (8008404 <HAL_TIM_PWM_Start_IT+0x298>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d013      	beq.n	80083a4 <HAL_TIM_PWM_Start_IT+0x238>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a21      	ldr	r2, [pc, #132]	@ (8008408 <HAL_TIM_PWM_Start_IT+0x29c>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d00e      	beq.n	80083a4 <HAL_TIM_PWM_Start_IT+0x238>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a20      	ldr	r2, [pc, #128]	@ (800840c <HAL_TIM_PWM_Start_IT+0x2a0>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d009      	beq.n	80083a4 <HAL_TIM_PWM_Start_IT+0x238>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a17      	ldr	r2, [pc, #92]	@ (80083f4 <HAL_TIM_PWM_Start_IT+0x288>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d004      	beq.n	80083a4 <HAL_TIM_PWM_Start_IT+0x238>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a16      	ldr	r2, [pc, #88]	@ (80083f8 <HAL_TIM_PWM_Start_IT+0x28c>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d115      	bne.n	80083d0 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689a      	ldr	r2, [r3, #8]
 80083aa:	4b19      	ldr	r3, [pc, #100]	@ (8008410 <HAL_TIM_PWM_Start_IT+0x2a4>)
 80083ac:	4013      	ands	r3, r2
 80083ae:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2b06      	cmp	r3, #6
 80083b4:	d015      	beq.n	80083e2 <HAL_TIM_PWM_Start_IT+0x276>
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083bc:	d011      	beq.n	80083e2 <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f042 0201 	orr.w	r2, r2, #1
 80083cc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ce:	e008      	b.n	80083e2 <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f042 0201 	orr.w	r2, r2, #1
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	e000      	b.n	80083e4 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083e2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	40012c00 	.word	0x40012c00
 80083f4:	40013400 	.word	0x40013400
 80083f8:	40014000 	.word	0x40014000
 80083fc:	40014400 	.word	0x40014400
 8008400:	40014800 	.word	0x40014800
 8008404:	40000400 	.word	0x40000400
 8008408:	40000800 	.word	0x40000800
 800840c:	40000c00 	.word	0x40000c00
 8008410:	00010007 	.word	0x00010007

08008414 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b0c      	cmp	r3, #12
 8008426:	d841      	bhi.n	80084ac <HAL_TIM_PWM_Stop_IT+0x98>
 8008428:	a201      	add	r2, pc, #4	@ (adr r2, 8008430 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800842a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842e:	bf00      	nop
 8008430:	08008465 	.word	0x08008465
 8008434:	080084ad 	.word	0x080084ad
 8008438:	080084ad 	.word	0x080084ad
 800843c:	080084ad 	.word	0x080084ad
 8008440:	08008477 	.word	0x08008477
 8008444:	080084ad 	.word	0x080084ad
 8008448:	080084ad 	.word	0x080084ad
 800844c:	080084ad 	.word	0x080084ad
 8008450:	08008489 	.word	0x08008489
 8008454:	080084ad 	.word	0x080084ad
 8008458:	080084ad 	.word	0x080084ad
 800845c:	080084ad 	.word	0x080084ad
 8008460:	0800849b 	.word	0x0800849b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68da      	ldr	r2, [r3, #12]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f022 0202 	bic.w	r2, r2, #2
 8008472:	60da      	str	r2, [r3, #12]
      break;
 8008474:	e01d      	b.n	80084b2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68da      	ldr	r2, [r3, #12]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f022 0204 	bic.w	r2, r2, #4
 8008484:	60da      	str	r2, [r3, #12]
      break;
 8008486:	e014      	b.n	80084b2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68da      	ldr	r2, [r3, #12]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f022 0208 	bic.w	r2, r2, #8
 8008496:	60da      	str	r2, [r3, #12]
      break;
 8008498:	e00b      	b.n	80084b2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68da      	ldr	r2, [r3, #12]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f022 0210 	bic.w	r2, r2, #16
 80084a8:	60da      	str	r2, [r3, #12]
      break;
 80084aa:	e002      	b.n	80084b2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	73fb      	strb	r3, [r7, #15]
      break;
 80084b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f040 8081 	bne.w	80085bc <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2200      	movs	r2, #0
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 ffae 	bl	8009424 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a3e      	ldr	r2, [pc, #248]	@ (80085c8 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d013      	beq.n	80084fa <HAL_TIM_PWM_Stop_IT+0xe6>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a3d      	ldr	r2, [pc, #244]	@ (80085cc <HAL_TIM_PWM_Stop_IT+0x1b8>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d00e      	beq.n	80084fa <HAL_TIM_PWM_Stop_IT+0xe6>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a3b      	ldr	r2, [pc, #236]	@ (80085d0 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d009      	beq.n	80084fa <HAL_TIM_PWM_Stop_IT+0xe6>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a3a      	ldr	r2, [pc, #232]	@ (80085d4 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d004      	beq.n	80084fa <HAL_TIM_PWM_Stop_IT+0xe6>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a38      	ldr	r2, [pc, #224]	@ (80085d8 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d101      	bne.n	80084fe <HAL_TIM_PWM_Stop_IT+0xea>
 80084fa:	2301      	movs	r3, #1
 80084fc:	e000      	b.n	8008500 <HAL_TIM_PWM_Stop_IT+0xec>
 80084fe:	2300      	movs	r3, #0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d017      	beq.n	8008534 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6a1a      	ldr	r2, [r3, #32]
 800850a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800850e:	4013      	ands	r3, r2
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10f      	bne.n	8008534 <HAL_TIM_PWM_Stop_IT+0x120>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6a1a      	ldr	r2, [r3, #32]
 800851a:	f240 4344 	movw	r3, #1092	@ 0x444
 800851e:	4013      	ands	r3, r2
 8008520:	2b00      	cmp	r3, #0
 8008522:	d107      	bne.n	8008534 <HAL_TIM_PWM_Stop_IT+0x120>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008532:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6a1a      	ldr	r2, [r3, #32]
 800853a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800853e:	4013      	ands	r3, r2
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10f      	bne.n	8008564 <HAL_TIM_PWM_Stop_IT+0x150>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6a1a      	ldr	r2, [r3, #32]
 800854a:	f240 4344 	movw	r3, #1092	@ 0x444
 800854e:	4013      	ands	r3, r2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d107      	bne.n	8008564 <HAL_TIM_PWM_Stop_IT+0x150>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f022 0201 	bic.w	r2, r2, #1
 8008562:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d104      	bne.n	8008574 <HAL_TIM_PWM_Stop_IT+0x160>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008572:	e023      	b.n	80085bc <HAL_TIM_PWM_Stop_IT+0x1a8>
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	2b04      	cmp	r3, #4
 8008578:	d104      	bne.n	8008584 <HAL_TIM_PWM_Stop_IT+0x170>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008582:	e01b      	b.n	80085bc <HAL_TIM_PWM_Stop_IT+0x1a8>
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2b08      	cmp	r3, #8
 8008588:	d104      	bne.n	8008594 <HAL_TIM_PWM_Stop_IT+0x180>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008592:	e013      	b.n	80085bc <HAL_TIM_PWM_Stop_IT+0x1a8>
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	2b0c      	cmp	r3, #12
 8008598:	d104      	bne.n	80085a4 <HAL_TIM_PWM_Stop_IT+0x190>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80085a2:	e00b      	b.n	80085bc <HAL_TIM_PWM_Stop_IT+0x1a8>
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2b10      	cmp	r3, #16
 80085a8:	d104      	bne.n	80085b4 <HAL_TIM_PWM_Stop_IT+0x1a0>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085b2:	e003      	b.n	80085bc <HAL_TIM_PWM_Stop_IT+0x1a8>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	40012c00 	.word	0x40012c00
 80085cc:	40013400 	.word	0x40013400
 80085d0:	40014000 	.word	0x40014000
 80085d4:	40014400 	.word	0x40014400
 80085d8:	40014800 	.word	0x40014800

080085dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	f003 0302 	and.w	r3, r3, #2
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d020      	beq.n	8008640 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f003 0302 	and.w	r3, r3, #2
 8008604:	2b00      	cmp	r3, #0
 8008606:	d01b      	beq.n	8008640 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f06f 0202 	mvn.w	r2, #2
 8008610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	f003 0303 	and.w	r3, r3, #3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fac7 	bl	8008bba <HAL_TIM_IC_CaptureCallback>
 800862c:	e005      	b.n	800863a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fab9 	bl	8008ba6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 faca 	bl	8008bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f003 0304 	and.w	r3, r3, #4
 8008646:	2b00      	cmp	r3, #0
 8008648:	d020      	beq.n	800868c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f003 0304 	and.w	r3, r3, #4
 8008650:	2b00      	cmp	r3, #0
 8008652:	d01b      	beq.n	800868c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f06f 0204 	mvn.w	r2, #4
 800865c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2202      	movs	r2, #2
 8008662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800866e:	2b00      	cmp	r3, #0
 8008670:	d003      	beq.n	800867a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 faa1 	bl	8008bba <HAL_TIM_IC_CaptureCallback>
 8008678:	e005      	b.n	8008686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa93 	bl	8008ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 faa4 	bl	8008bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	f003 0308 	and.w	r3, r3, #8
 8008692:	2b00      	cmp	r3, #0
 8008694:	d020      	beq.n	80086d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f003 0308 	and.w	r3, r3, #8
 800869c:	2b00      	cmp	r3, #0
 800869e:	d01b      	beq.n	80086d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f06f 0208 	mvn.w	r2, #8
 80086a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2204      	movs	r2, #4
 80086ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	f003 0303 	and.w	r3, r3, #3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d003      	beq.n	80086c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fa7b 	bl	8008bba <HAL_TIM_IC_CaptureCallback>
 80086c4:	e005      	b.n	80086d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fa6d 	bl	8008ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fa7e 	bl	8008bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	f003 0310 	and.w	r3, r3, #16
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d020      	beq.n	8008724 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f003 0310 	and.w	r3, r3, #16
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d01b      	beq.n	8008724 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f06f 0210 	mvn.w	r2, #16
 80086f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2208      	movs	r2, #8
 80086fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	69db      	ldr	r3, [r3, #28]
 8008702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fa55 	bl	8008bba <HAL_TIM_IC_CaptureCallback>
 8008710:	e005      	b.n	800871e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fa47 	bl	8008ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fa58 	bl	8008bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00c      	beq.n	8008748 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	d007      	beq.n	8008748 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f06f 0201 	mvn.w	r2, #1
 8008740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7f9 f9d8 	bl	8001af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800874e:	2b00      	cmp	r3, #0
 8008750:	d104      	bne.n	800875c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00c      	beq.n	8008776 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008762:	2b00      	cmp	r3, #0
 8008764:	d007      	beq.n	8008776 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800876e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 ff0f 	bl	8009594 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00c      	beq.n	800879a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008786:	2b00      	cmp	r3, #0
 8008788:	d007      	beq.n	800879a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 ff07 	bl	80095a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00c      	beq.n	80087be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d007      	beq.n	80087be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80087b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fa12 	bl	8008be2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	f003 0320 	and.w	r3, r3, #32
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00c      	beq.n	80087e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f003 0320 	and.w	r3, r3, #32
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d007      	beq.n	80087e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f06f 0220 	mvn.w	r2, #32
 80087da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fecf 	bl	8009580 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087e2:	bf00      	nop
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
	...

080087ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087f8:	2300      	movs	r3, #0
 80087fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008802:	2b01      	cmp	r3, #1
 8008804:	d101      	bne.n	800880a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008806:	2302      	movs	r3, #2
 8008808:	e0ff      	b.n	8008a0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2b14      	cmp	r3, #20
 8008816:	f200 80f0 	bhi.w	80089fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800881a:	a201      	add	r2, pc, #4	@ (adr r2, 8008820 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800881c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008820:	08008875 	.word	0x08008875
 8008824:	080089fb 	.word	0x080089fb
 8008828:	080089fb 	.word	0x080089fb
 800882c:	080089fb 	.word	0x080089fb
 8008830:	080088b5 	.word	0x080088b5
 8008834:	080089fb 	.word	0x080089fb
 8008838:	080089fb 	.word	0x080089fb
 800883c:	080089fb 	.word	0x080089fb
 8008840:	080088f7 	.word	0x080088f7
 8008844:	080089fb 	.word	0x080089fb
 8008848:	080089fb 	.word	0x080089fb
 800884c:	080089fb 	.word	0x080089fb
 8008850:	08008937 	.word	0x08008937
 8008854:	080089fb 	.word	0x080089fb
 8008858:	080089fb 	.word	0x080089fb
 800885c:	080089fb 	.word	0x080089fb
 8008860:	08008979 	.word	0x08008979
 8008864:	080089fb 	.word	0x080089fb
 8008868:	080089fb 	.word	0x080089fb
 800886c:	080089fb 	.word	0x080089fb
 8008870:	080089b9 	.word	0x080089b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68b9      	ldr	r1, [r7, #8]
 800887a:	4618      	mov	r0, r3
 800887c:	f000 fa62 	bl	8008d44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	699a      	ldr	r2, [r3, #24]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f042 0208 	orr.w	r2, r2, #8
 800888e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	699a      	ldr	r2, [r3, #24]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f022 0204 	bic.w	r2, r2, #4
 800889e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6999      	ldr	r1, [r3, #24]
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	691a      	ldr	r2, [r3, #16]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	430a      	orrs	r2, r1
 80088b0:	619a      	str	r2, [r3, #24]
      break;
 80088b2:	e0a5      	b.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68b9      	ldr	r1, [r7, #8]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 fad2 	bl	8008e64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	699a      	ldr	r2, [r3, #24]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	699a      	ldr	r2, [r3, #24]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6999      	ldr	r1, [r3, #24]
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	021a      	lsls	r2, r3, #8
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	619a      	str	r2, [r3, #24]
      break;
 80088f4:	e084      	b.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68b9      	ldr	r1, [r7, #8]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 fb3b 	bl	8008f78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	69da      	ldr	r2, [r3, #28]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f042 0208 	orr.w	r2, r2, #8
 8008910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	69da      	ldr	r2, [r3, #28]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f022 0204 	bic.w	r2, r2, #4
 8008920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	69d9      	ldr	r1, [r3, #28]
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	691a      	ldr	r2, [r3, #16]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	430a      	orrs	r2, r1
 8008932:	61da      	str	r2, [r3, #28]
      break;
 8008934:	e064      	b.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68b9      	ldr	r1, [r7, #8]
 800893c:	4618      	mov	r0, r3
 800893e:	f000 fba3 	bl	8009088 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	69da      	ldr	r2, [r3, #28]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	69da      	ldr	r2, [r3, #28]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	69d9      	ldr	r1, [r3, #28]
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	021a      	lsls	r2, r3, #8
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	430a      	orrs	r2, r1
 8008974:	61da      	str	r2, [r3, #28]
      break;
 8008976:	e043      	b.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68b9      	ldr	r1, [r7, #8]
 800897e:	4618      	mov	r0, r3
 8008980:	f000 fbec 	bl	800915c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f042 0208 	orr.w	r2, r2, #8
 8008992:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f022 0204 	bic.w	r2, r2, #4
 80089a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	691a      	ldr	r2, [r3, #16]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80089b6:	e023      	b.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68b9      	ldr	r1, [r7, #8]
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 fc30 	bl	8009224 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	021a      	lsls	r2, r3, #8
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80089f8:	e002      	b.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	75fb      	strb	r3, [r7, #23]
      break;
 80089fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3718      	adds	r7, #24
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop

08008a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d101      	bne.n	8008a30 <HAL_TIM_ConfigClockSource+0x1c>
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	e0b6      	b.n	8008b9e <HAL_TIM_ConfigClockSource+0x18a>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a6c:	d03e      	beq.n	8008aec <HAL_TIM_ConfigClockSource+0xd8>
 8008a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a72:	f200 8087 	bhi.w	8008b84 <HAL_TIM_ConfigClockSource+0x170>
 8008a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a7a:	f000 8086 	beq.w	8008b8a <HAL_TIM_ConfigClockSource+0x176>
 8008a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a82:	d87f      	bhi.n	8008b84 <HAL_TIM_ConfigClockSource+0x170>
 8008a84:	2b70      	cmp	r3, #112	@ 0x70
 8008a86:	d01a      	beq.n	8008abe <HAL_TIM_ConfigClockSource+0xaa>
 8008a88:	2b70      	cmp	r3, #112	@ 0x70
 8008a8a:	d87b      	bhi.n	8008b84 <HAL_TIM_ConfigClockSource+0x170>
 8008a8c:	2b60      	cmp	r3, #96	@ 0x60
 8008a8e:	d050      	beq.n	8008b32 <HAL_TIM_ConfigClockSource+0x11e>
 8008a90:	2b60      	cmp	r3, #96	@ 0x60
 8008a92:	d877      	bhi.n	8008b84 <HAL_TIM_ConfigClockSource+0x170>
 8008a94:	2b50      	cmp	r3, #80	@ 0x50
 8008a96:	d03c      	beq.n	8008b12 <HAL_TIM_ConfigClockSource+0xfe>
 8008a98:	2b50      	cmp	r3, #80	@ 0x50
 8008a9a:	d873      	bhi.n	8008b84 <HAL_TIM_ConfigClockSource+0x170>
 8008a9c:	2b40      	cmp	r3, #64	@ 0x40
 8008a9e:	d058      	beq.n	8008b52 <HAL_TIM_ConfigClockSource+0x13e>
 8008aa0:	2b40      	cmp	r3, #64	@ 0x40
 8008aa2:	d86f      	bhi.n	8008b84 <HAL_TIM_ConfigClockSource+0x170>
 8008aa4:	2b30      	cmp	r3, #48	@ 0x30
 8008aa6:	d064      	beq.n	8008b72 <HAL_TIM_ConfigClockSource+0x15e>
 8008aa8:	2b30      	cmp	r3, #48	@ 0x30
 8008aaa:	d86b      	bhi.n	8008b84 <HAL_TIM_ConfigClockSource+0x170>
 8008aac:	2b20      	cmp	r3, #32
 8008aae:	d060      	beq.n	8008b72 <HAL_TIM_ConfigClockSource+0x15e>
 8008ab0:	2b20      	cmp	r3, #32
 8008ab2:	d867      	bhi.n	8008b84 <HAL_TIM_ConfigClockSource+0x170>
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d05c      	beq.n	8008b72 <HAL_TIM_ConfigClockSource+0x15e>
 8008ab8:	2b10      	cmp	r3, #16
 8008aba:	d05a      	beq.n	8008b72 <HAL_TIM_ConfigClockSource+0x15e>
 8008abc:	e062      	b.n	8008b84 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ace:	f000 fc89 	bl	80093e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008ae0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	609a      	str	r2, [r3, #8]
      break;
 8008aea:	e04f      	b.n	8008b8c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008afc:	f000 fc72 	bl	80093e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	689a      	ldr	r2, [r3, #8]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b0e:	609a      	str	r2, [r3, #8]
      break;
 8008b10:	e03c      	b.n	8008b8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b1e:	461a      	mov	r2, r3
 8008b20:	f000 fbe6 	bl	80092f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2150      	movs	r1, #80	@ 0x50
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 fc3f 	bl	80093ae <TIM_ITRx_SetConfig>
      break;
 8008b30:	e02c      	b.n	8008b8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b3e:	461a      	mov	r2, r3
 8008b40:	f000 fc05 	bl	800934e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2160      	movs	r1, #96	@ 0x60
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 fc2f 	bl	80093ae <TIM_ITRx_SetConfig>
      break;
 8008b50:	e01c      	b.n	8008b8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b5e:	461a      	mov	r2, r3
 8008b60:	f000 fbc6 	bl	80092f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2140      	movs	r1, #64	@ 0x40
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 fc1f 	bl	80093ae <TIM_ITRx_SetConfig>
      break;
 8008b70:	e00c      	b.n	8008b8c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	f000 fc16 	bl	80093ae <TIM_ITRx_SetConfig>
      break;
 8008b82:	e003      	b.n	8008b8c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	73fb      	strb	r3, [r7, #15]
      break;
 8008b88:	e000      	b.n	8008b8c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008b8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b083      	sub	sp, #12
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bae:	bf00      	nop
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bc2:	bf00      	nop
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b083      	sub	sp, #12
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bd6:	bf00      	nop
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bea:	bf00      	nop
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
	...

08008bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a46      	ldr	r2, [pc, #280]	@ (8008d24 <TIM_Base_SetConfig+0x12c>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d013      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c16:	d00f      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a43      	ldr	r2, [pc, #268]	@ (8008d28 <TIM_Base_SetConfig+0x130>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d00b      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a42      	ldr	r2, [pc, #264]	@ (8008d2c <TIM_Base_SetConfig+0x134>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d007      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a41      	ldr	r2, [pc, #260]	@ (8008d30 <TIM_Base_SetConfig+0x138>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d003      	beq.n	8008c38 <TIM_Base_SetConfig+0x40>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a40      	ldr	r2, [pc, #256]	@ (8008d34 <TIM_Base_SetConfig+0x13c>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d108      	bne.n	8008c4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a35      	ldr	r2, [pc, #212]	@ (8008d24 <TIM_Base_SetConfig+0x12c>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d01f      	beq.n	8008c92 <TIM_Base_SetConfig+0x9a>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c58:	d01b      	beq.n	8008c92 <TIM_Base_SetConfig+0x9a>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a32      	ldr	r2, [pc, #200]	@ (8008d28 <TIM_Base_SetConfig+0x130>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d017      	beq.n	8008c92 <TIM_Base_SetConfig+0x9a>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a31      	ldr	r2, [pc, #196]	@ (8008d2c <TIM_Base_SetConfig+0x134>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d013      	beq.n	8008c92 <TIM_Base_SetConfig+0x9a>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a30      	ldr	r2, [pc, #192]	@ (8008d30 <TIM_Base_SetConfig+0x138>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d00f      	beq.n	8008c92 <TIM_Base_SetConfig+0x9a>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a2f      	ldr	r2, [pc, #188]	@ (8008d34 <TIM_Base_SetConfig+0x13c>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d00b      	beq.n	8008c92 <TIM_Base_SetConfig+0x9a>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a2e      	ldr	r2, [pc, #184]	@ (8008d38 <TIM_Base_SetConfig+0x140>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d007      	beq.n	8008c92 <TIM_Base_SetConfig+0x9a>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a2d      	ldr	r2, [pc, #180]	@ (8008d3c <TIM_Base_SetConfig+0x144>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d003      	beq.n	8008c92 <TIM_Base_SetConfig+0x9a>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a2c      	ldr	r2, [pc, #176]	@ (8008d40 <TIM_Base_SetConfig+0x148>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d108      	bne.n	8008ca4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	689a      	ldr	r2, [r3, #8]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a16      	ldr	r2, [pc, #88]	@ (8008d24 <TIM_Base_SetConfig+0x12c>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d00f      	beq.n	8008cf0 <TIM_Base_SetConfig+0xf8>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a18      	ldr	r2, [pc, #96]	@ (8008d34 <TIM_Base_SetConfig+0x13c>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d00b      	beq.n	8008cf0 <TIM_Base_SetConfig+0xf8>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a17      	ldr	r2, [pc, #92]	@ (8008d38 <TIM_Base_SetConfig+0x140>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d007      	beq.n	8008cf0 <TIM_Base_SetConfig+0xf8>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a16      	ldr	r2, [pc, #88]	@ (8008d3c <TIM_Base_SetConfig+0x144>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d003      	beq.n	8008cf0 <TIM_Base_SetConfig+0xf8>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a15      	ldr	r2, [pc, #84]	@ (8008d40 <TIM_Base_SetConfig+0x148>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d103      	bne.n	8008cf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	691a      	ldr	r2, [r3, #16]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d105      	bne.n	8008d16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	f023 0201 	bic.w	r2, r3, #1
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	611a      	str	r2, [r3, #16]
  }
}
 8008d16:	bf00      	nop
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	40012c00 	.word	0x40012c00
 8008d28:	40000400 	.word	0x40000400
 8008d2c:	40000800 	.word	0x40000800
 8008d30:	40000c00 	.word	0x40000c00
 8008d34:	40013400 	.word	0x40013400
 8008d38:	40014000 	.word	0x40014000
 8008d3c:	40014400 	.word	0x40014400
 8008d40:	40014800 	.word	0x40014800

08008d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a1b      	ldr	r3, [r3, #32]
 8008d58:	f023 0201 	bic.w	r2, r3, #1
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 0303 	bic.w	r3, r3, #3
 8008d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f023 0302 	bic.w	r3, r3, #2
 8008d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a2c      	ldr	r2, [pc, #176]	@ (8008e50 <TIM_OC1_SetConfig+0x10c>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d00f      	beq.n	8008dc4 <TIM_OC1_SetConfig+0x80>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a2b      	ldr	r2, [pc, #172]	@ (8008e54 <TIM_OC1_SetConfig+0x110>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d00b      	beq.n	8008dc4 <TIM_OC1_SetConfig+0x80>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a2a      	ldr	r2, [pc, #168]	@ (8008e58 <TIM_OC1_SetConfig+0x114>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d007      	beq.n	8008dc4 <TIM_OC1_SetConfig+0x80>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a29      	ldr	r2, [pc, #164]	@ (8008e5c <TIM_OC1_SetConfig+0x118>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d003      	beq.n	8008dc4 <TIM_OC1_SetConfig+0x80>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a28      	ldr	r2, [pc, #160]	@ (8008e60 <TIM_OC1_SetConfig+0x11c>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d10c      	bne.n	8008dde <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f023 0308 	bic.w	r3, r3, #8
 8008dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	f023 0304 	bic.w	r3, r3, #4
 8008ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a1b      	ldr	r2, [pc, #108]	@ (8008e50 <TIM_OC1_SetConfig+0x10c>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d00f      	beq.n	8008e06 <TIM_OC1_SetConfig+0xc2>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a1a      	ldr	r2, [pc, #104]	@ (8008e54 <TIM_OC1_SetConfig+0x110>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d00b      	beq.n	8008e06 <TIM_OC1_SetConfig+0xc2>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a19      	ldr	r2, [pc, #100]	@ (8008e58 <TIM_OC1_SetConfig+0x114>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d007      	beq.n	8008e06 <TIM_OC1_SetConfig+0xc2>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a18      	ldr	r2, [pc, #96]	@ (8008e5c <TIM_OC1_SetConfig+0x118>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d003      	beq.n	8008e06 <TIM_OC1_SetConfig+0xc2>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a17      	ldr	r2, [pc, #92]	@ (8008e60 <TIM_OC1_SetConfig+0x11c>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d111      	bne.n	8008e2a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	695b      	ldr	r3, [r3, #20]
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	685a      	ldr	r2, [r3, #4]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	621a      	str	r2, [r3, #32]
}
 8008e44:	bf00      	nop
 8008e46:	371c      	adds	r7, #28
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	40012c00 	.word	0x40012c00
 8008e54:	40013400 	.word	0x40013400
 8008e58:	40014000 	.word	0x40014000
 8008e5c:	40014400 	.word	0x40014400
 8008e60:	40014800 	.word	0x40014800

08008e64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b087      	sub	sp, #28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a1b      	ldr	r3, [r3, #32]
 8008e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
 8008e78:	f023 0210 	bic.w	r2, r3, #16
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	021b      	lsls	r3, r3, #8
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	f023 0320 	bic.w	r3, r3, #32
 8008eb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	011b      	lsls	r3, r3, #4
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a28      	ldr	r2, [pc, #160]	@ (8008f64 <TIM_OC2_SetConfig+0x100>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d003      	beq.n	8008ed0 <TIM_OC2_SetConfig+0x6c>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a27      	ldr	r2, [pc, #156]	@ (8008f68 <TIM_OC2_SetConfig+0x104>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d10d      	bne.n	8008eec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	011b      	lsls	r3, r3, #4
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008eea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a1d      	ldr	r2, [pc, #116]	@ (8008f64 <TIM_OC2_SetConfig+0x100>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d00f      	beq.n	8008f14 <TIM_OC2_SetConfig+0xb0>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8008f68 <TIM_OC2_SetConfig+0x104>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d00b      	beq.n	8008f14 <TIM_OC2_SetConfig+0xb0>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a1b      	ldr	r2, [pc, #108]	@ (8008f6c <TIM_OC2_SetConfig+0x108>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d007      	beq.n	8008f14 <TIM_OC2_SetConfig+0xb0>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a1a      	ldr	r2, [pc, #104]	@ (8008f70 <TIM_OC2_SetConfig+0x10c>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d003      	beq.n	8008f14 <TIM_OC2_SetConfig+0xb0>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a19      	ldr	r2, [pc, #100]	@ (8008f74 <TIM_OC2_SetConfig+0x110>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d113      	bne.n	8008f3c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	621a      	str	r2, [r3, #32]
}
 8008f56:	bf00      	nop
 8008f58:	371c      	adds	r7, #28
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	40012c00 	.word	0x40012c00
 8008f68:	40013400 	.word	0x40013400
 8008f6c:	40014000 	.word	0x40014000
 8008f70:	40014400 	.word	0x40014400
 8008f74:	40014800 	.word	0x40014800

08008f78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b087      	sub	sp, #28
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a1b      	ldr	r3, [r3, #32]
 8008f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a1b      	ldr	r3, [r3, #32]
 8008f8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f023 0303 	bic.w	r3, r3, #3
 8008fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	021b      	lsls	r3, r3, #8
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a27      	ldr	r2, [pc, #156]	@ (8009074 <TIM_OC3_SetConfig+0xfc>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d003      	beq.n	8008fe2 <TIM_OC3_SetConfig+0x6a>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a26      	ldr	r2, [pc, #152]	@ (8009078 <TIM_OC3_SetConfig+0x100>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d10d      	bne.n	8008ffe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008fe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	021b      	lsls	r3, r3, #8
 8008ff0:	697a      	ldr	r2, [r7, #20]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a1c      	ldr	r2, [pc, #112]	@ (8009074 <TIM_OC3_SetConfig+0xfc>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d00f      	beq.n	8009026 <TIM_OC3_SetConfig+0xae>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a1b      	ldr	r2, [pc, #108]	@ (8009078 <TIM_OC3_SetConfig+0x100>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d00b      	beq.n	8009026 <TIM_OC3_SetConfig+0xae>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4a1a      	ldr	r2, [pc, #104]	@ (800907c <TIM_OC3_SetConfig+0x104>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d007      	beq.n	8009026 <TIM_OC3_SetConfig+0xae>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4a19      	ldr	r2, [pc, #100]	@ (8009080 <TIM_OC3_SetConfig+0x108>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d003      	beq.n	8009026 <TIM_OC3_SetConfig+0xae>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4a18      	ldr	r2, [pc, #96]	@ (8009084 <TIM_OC3_SetConfig+0x10c>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d113      	bne.n	800904e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800902c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	695b      	ldr	r3, [r3, #20]
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	4313      	orrs	r3, r2
 8009040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	011b      	lsls	r3, r3, #4
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	4313      	orrs	r3, r2
 800904c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	621a      	str	r2, [r3, #32]
}
 8009068:	bf00      	nop
 800906a:	371c      	adds	r7, #28
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	40012c00 	.word	0x40012c00
 8009078:	40013400 	.word	0x40013400
 800907c:	40014000 	.word	0x40014000
 8009080:	40014400 	.word	0x40014400
 8009084:	40014800 	.word	0x40014800

08009088 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009088:	b480      	push	{r7}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a1b      	ldr	r3, [r3, #32]
 8009096:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6a1b      	ldr	r3, [r3, #32]
 800909c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	69db      	ldr	r3, [r3, #28]
 80090ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	021b      	lsls	r3, r3, #8
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80090d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	031b      	lsls	r3, r3, #12
 80090de:	693a      	ldr	r2, [r7, #16]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a18      	ldr	r2, [pc, #96]	@ (8009148 <TIM_OC4_SetConfig+0xc0>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d00f      	beq.n	800910c <TIM_OC4_SetConfig+0x84>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a17      	ldr	r2, [pc, #92]	@ (800914c <TIM_OC4_SetConfig+0xc4>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d00b      	beq.n	800910c <TIM_OC4_SetConfig+0x84>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a16      	ldr	r2, [pc, #88]	@ (8009150 <TIM_OC4_SetConfig+0xc8>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d007      	beq.n	800910c <TIM_OC4_SetConfig+0x84>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a15      	ldr	r2, [pc, #84]	@ (8009154 <TIM_OC4_SetConfig+0xcc>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d003      	beq.n	800910c <TIM_OC4_SetConfig+0x84>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a14      	ldr	r2, [pc, #80]	@ (8009158 <TIM_OC4_SetConfig+0xd0>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d109      	bne.n	8009120 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009112:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	019b      	lsls	r3, r3, #6
 800911a:	697a      	ldr	r2, [r7, #20]
 800911c:	4313      	orrs	r3, r2
 800911e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	685a      	ldr	r2, [r3, #4]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	621a      	str	r2, [r3, #32]
}
 800913a:	bf00      	nop
 800913c:	371c      	adds	r7, #28
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	40012c00 	.word	0x40012c00
 800914c:	40013400 	.word	0x40013400
 8009150:	40014000 	.word	0x40014000
 8009154:	40014400 	.word	0x40014400
 8009158:	40014800 	.word	0x40014800

0800915c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800915c:	b480      	push	{r7}
 800915e:	b087      	sub	sp, #28
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a1b      	ldr	r3, [r3, #32]
 800916a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a1b      	ldr	r3, [r3, #32]
 8009170:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800918a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800918e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	4313      	orrs	r3, r2
 8009198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80091a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	041b      	lsls	r3, r3, #16
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a17      	ldr	r2, [pc, #92]	@ (8009210 <TIM_OC5_SetConfig+0xb4>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d00f      	beq.n	80091d6 <TIM_OC5_SetConfig+0x7a>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a16      	ldr	r2, [pc, #88]	@ (8009214 <TIM_OC5_SetConfig+0xb8>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d00b      	beq.n	80091d6 <TIM_OC5_SetConfig+0x7a>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a15      	ldr	r2, [pc, #84]	@ (8009218 <TIM_OC5_SetConfig+0xbc>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d007      	beq.n	80091d6 <TIM_OC5_SetConfig+0x7a>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a14      	ldr	r2, [pc, #80]	@ (800921c <TIM_OC5_SetConfig+0xc0>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d003      	beq.n	80091d6 <TIM_OC5_SetConfig+0x7a>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a13      	ldr	r2, [pc, #76]	@ (8009220 <TIM_OC5_SetConfig+0xc4>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d109      	bne.n	80091ea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	021b      	lsls	r3, r3, #8
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	621a      	str	r2, [r3, #32]
}
 8009204:	bf00      	nop
 8009206:	371c      	adds	r7, #28
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr
 8009210:	40012c00 	.word	0x40012c00
 8009214:	40013400 	.word	0x40013400
 8009218:	40014000 	.word	0x40014000
 800921c:	40014400 	.word	0x40014400
 8009220:	40014800 	.word	0x40014800

08009224 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a1b      	ldr	r3, [r3, #32]
 8009238:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800924a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	021b      	lsls	r3, r3, #8
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	4313      	orrs	r3, r2
 8009262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800926a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	051b      	lsls	r3, r3, #20
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	4313      	orrs	r3, r2
 8009276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a18      	ldr	r2, [pc, #96]	@ (80092dc <TIM_OC6_SetConfig+0xb8>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d00f      	beq.n	80092a0 <TIM_OC6_SetConfig+0x7c>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a17      	ldr	r2, [pc, #92]	@ (80092e0 <TIM_OC6_SetConfig+0xbc>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d00b      	beq.n	80092a0 <TIM_OC6_SetConfig+0x7c>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a16      	ldr	r2, [pc, #88]	@ (80092e4 <TIM_OC6_SetConfig+0xc0>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d007      	beq.n	80092a0 <TIM_OC6_SetConfig+0x7c>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a15      	ldr	r2, [pc, #84]	@ (80092e8 <TIM_OC6_SetConfig+0xc4>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d003      	beq.n	80092a0 <TIM_OC6_SetConfig+0x7c>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a14      	ldr	r2, [pc, #80]	@ (80092ec <TIM_OC6_SetConfig+0xc8>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d109      	bne.n	80092b4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	695b      	ldr	r3, [r3, #20]
 80092ac:	029b      	lsls	r3, r3, #10
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	685a      	ldr	r2, [r3, #4]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	621a      	str	r2, [r3, #32]
}
 80092ce:	bf00      	nop
 80092d0:	371c      	adds	r7, #28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	40012c00 	.word	0x40012c00
 80092e0:	40013400 	.word	0x40013400
 80092e4:	40014000 	.word	0x40014000
 80092e8:	40014400 	.word	0x40014400
 80092ec:	40014800 	.word	0x40014800

080092f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b087      	sub	sp, #28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6a1b      	ldr	r3, [r3, #32]
 8009300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	f023 0201 	bic.w	r2, r3, #1
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800931a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	011b      	lsls	r3, r3, #4
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	4313      	orrs	r3, r2
 8009324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f023 030a 	bic.w	r3, r3, #10
 800932c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800932e:	697a      	ldr	r2, [r7, #20]
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	4313      	orrs	r3, r2
 8009334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	621a      	str	r2, [r3, #32]
}
 8009342:	bf00      	nop
 8009344:	371c      	adds	r7, #28
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr

0800934e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800934e:	b480      	push	{r7}
 8009350:	b087      	sub	sp, #28
 8009352:	af00      	add	r7, sp, #0
 8009354:	60f8      	str	r0, [r7, #12]
 8009356:	60b9      	str	r1, [r7, #8]
 8009358:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6a1b      	ldr	r3, [r3, #32]
 800935e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6a1b      	ldr	r3, [r3, #32]
 8009364:	f023 0210 	bic.w	r2, r3, #16
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	699b      	ldr	r3, [r3, #24]
 8009370:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009378:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	031b      	lsls	r3, r3, #12
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	4313      	orrs	r3, r2
 8009382:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800938a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	011b      	lsls	r3, r3, #4
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	4313      	orrs	r3, r2
 8009394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	621a      	str	r2, [r3, #32]
}
 80093a2:	bf00      	nop
 80093a4:	371c      	adds	r7, #28
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr

080093ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093ae:	b480      	push	{r7}
 80093b0:	b085      	sub	sp, #20
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	f043 0307 	orr.w	r3, r3, #7
 80093d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	609a      	str	r2, [r3, #8]
}
 80093d8:	bf00      	nop
 80093da:	3714      	adds	r7, #20
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
 80093f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80093fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	021a      	lsls	r2, r3, #8
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	431a      	orrs	r2, r3
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	4313      	orrs	r3, r2
 800940c:	697a      	ldr	r2, [r7, #20]
 800940e:	4313      	orrs	r3, r2
 8009410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	609a      	str	r2, [r3, #8]
}
 8009418:	bf00      	nop
 800941a:	371c      	adds	r7, #28
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009424:	b480      	push	{r7}
 8009426:	b087      	sub	sp, #28
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	f003 031f 	and.w	r3, r3, #31
 8009436:	2201      	movs	r2, #1
 8009438:	fa02 f303 	lsl.w	r3, r2, r3
 800943c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6a1a      	ldr	r2, [r3, #32]
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	43db      	mvns	r3, r3
 8009446:	401a      	ands	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6a1a      	ldr	r2, [r3, #32]
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f003 031f 	and.w	r3, r3, #31
 8009456:	6879      	ldr	r1, [r7, #4]
 8009458:	fa01 f303 	lsl.w	r3, r1, r3
 800945c:	431a      	orrs	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	621a      	str	r2, [r3, #32]
}
 8009462:	bf00      	nop
 8009464:	371c      	adds	r7, #28
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
	...

08009470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009480:	2b01      	cmp	r3, #1
 8009482:	d101      	bne.n	8009488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009484:	2302      	movs	r3, #2
 8009486:	e068      	b.n	800955a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2202      	movs	r2, #2
 8009494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a2e      	ldr	r2, [pc, #184]	@ (8009568 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d004      	beq.n	80094bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a2d      	ldr	r2, [pc, #180]	@ (800956c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d108      	bne.n	80094ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80094c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	4313      	orrs	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a1e      	ldr	r2, [pc, #120]	@ (8009568 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d01d      	beq.n	800952e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094fa:	d018      	beq.n	800952e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a1b      	ldr	r2, [pc, #108]	@ (8009570 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d013      	beq.n	800952e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a1a      	ldr	r2, [pc, #104]	@ (8009574 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d00e      	beq.n	800952e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a18      	ldr	r2, [pc, #96]	@ (8009578 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d009      	beq.n	800952e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a13      	ldr	r2, [pc, #76]	@ (800956c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d004      	beq.n	800952e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a14      	ldr	r2, [pc, #80]	@ (800957c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d10c      	bne.n	8009548 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	4313      	orrs	r3, r2
 800953e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	40012c00 	.word	0x40012c00
 800956c:	40013400 	.word	0x40013400
 8009570:	40000400 	.word	0x40000400
 8009574:	40000800 	.word	0x40000800
 8009578:	40000c00 	.word	0x40000c00
 800957c:	40014000 	.word	0x40014000

08009580 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e040      	b.n	8009650 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d106      	bne.n	80095e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f7f9 f85e 	bl	80026a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2224      	movs	r2, #36	@ 0x24
 80095e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f022 0201 	bic.w	r2, r2, #1
 80095f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d002      	beq.n	8009608 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fb6a 	bl	8009cdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f8af 	bl	800976c <UART_SetConfig>
 800960e:	4603      	mov	r3, r0
 8009610:	2b01      	cmp	r3, #1
 8009612:	d101      	bne.n	8009618 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e01b      	b.n	8009650 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	685a      	ldr	r2, [r3, #4]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009626:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	689a      	ldr	r2, [r3, #8]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009636:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f042 0201 	orr.w	r2, r2, #1
 8009646:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fbe9 	bl	8009e20 <UART_CheckIdleState>
 800964e:	4603      	mov	r3, r0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b08a      	sub	sp, #40	@ 0x28
 800965c:	af02      	add	r7, sp, #8
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	603b      	str	r3, [r7, #0]
 8009664:	4613      	mov	r3, r2
 8009666:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800966c:	2b20      	cmp	r3, #32
 800966e:	d177      	bne.n	8009760 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d002      	beq.n	800967c <HAL_UART_Transmit+0x24>
 8009676:	88fb      	ldrh	r3, [r7, #6]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	e070      	b.n	8009762 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2221      	movs	r2, #33	@ 0x21
 800968c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800968e:	f7f9 fe7d 	bl	800338c <HAL_GetTick>
 8009692:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	88fa      	ldrh	r2, [r7, #6]
 8009698:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	88fa      	ldrh	r2, [r7, #6]
 80096a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096ac:	d108      	bne.n	80096c0 <HAL_UART_Transmit+0x68>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d104      	bne.n	80096c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80096b6:	2300      	movs	r3, #0
 80096b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	61bb      	str	r3, [r7, #24]
 80096be:	e003      	b.n	80096c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80096c4:	2300      	movs	r3, #0
 80096c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80096c8:	e02f      	b.n	800972a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	9300      	str	r3, [sp, #0]
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2200      	movs	r2, #0
 80096d2:	2180      	movs	r1, #128	@ 0x80
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f000 fc4b 	bl	8009f70 <UART_WaitOnFlagUntilTimeout>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d004      	beq.n	80096ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2220      	movs	r2, #32
 80096e4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80096e6:	2303      	movs	r3, #3
 80096e8:	e03b      	b.n	8009762 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d10b      	bne.n	8009708 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	881a      	ldrh	r2, [r3, #0]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096fc:	b292      	uxth	r2, r2
 80096fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	3302      	adds	r3, #2
 8009704:	61bb      	str	r3, [r7, #24]
 8009706:	e007      	b.n	8009718 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	781a      	ldrb	r2, [r3, #0]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	3301      	adds	r3, #1
 8009716:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800971e:	b29b      	uxth	r3, r3
 8009720:	3b01      	subs	r3, #1
 8009722:	b29a      	uxth	r2, r3
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009730:	b29b      	uxth	r3, r3
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1c9      	bne.n	80096ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	9300      	str	r3, [sp, #0]
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	2200      	movs	r2, #0
 800973e:	2140      	movs	r1, #64	@ 0x40
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f000 fc15 	bl	8009f70 <UART_WaitOnFlagUntilTimeout>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d004      	beq.n	8009756 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2220      	movs	r2, #32
 8009750:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009752:	2303      	movs	r3, #3
 8009754:	e005      	b.n	8009762 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2220      	movs	r2, #32
 800975a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	e000      	b.n	8009762 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009760:	2302      	movs	r3, #2
  }
}
 8009762:	4618      	mov	r0, r3
 8009764:	3720      	adds	r7, #32
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
	...

0800976c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800976c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009770:	b08a      	sub	sp, #40	@ 0x28
 8009772:	af00      	add	r7, sp, #0
 8009774:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	689a      	ldr	r2, [r3, #8]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	431a      	orrs	r2, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	695b      	ldr	r3, [r3, #20]
 800978a:	431a      	orrs	r2, r3
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	69db      	ldr	r3, [r3, #28]
 8009790:	4313      	orrs	r3, r2
 8009792:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	4ba4      	ldr	r3, [pc, #656]	@ (8009a2c <UART_SetConfig+0x2c0>)
 800979c:	4013      	ands	r3, r2
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	6812      	ldr	r2, [r2, #0]
 80097a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80097a4:	430b      	orrs	r3, r1
 80097a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	68da      	ldr	r2, [r3, #12]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	430a      	orrs	r2, r1
 80097bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	699b      	ldr	r3, [r3, #24]
 80097c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a99      	ldr	r2, [pc, #612]	@ (8009a30 <UART_SetConfig+0x2c4>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d004      	beq.n	80097d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097d4:	4313      	orrs	r3, r2
 80097d6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097e8:	430a      	orrs	r2, r1
 80097ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a90      	ldr	r2, [pc, #576]	@ (8009a34 <UART_SetConfig+0x2c8>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d126      	bne.n	8009844 <UART_SetConfig+0xd8>
 80097f6:	4b90      	ldr	r3, [pc, #576]	@ (8009a38 <UART_SetConfig+0x2cc>)
 80097f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097fc:	f003 0303 	and.w	r3, r3, #3
 8009800:	2b03      	cmp	r3, #3
 8009802:	d81b      	bhi.n	800983c <UART_SetConfig+0xd0>
 8009804:	a201      	add	r2, pc, #4	@ (adr r2, 800980c <UART_SetConfig+0xa0>)
 8009806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980a:	bf00      	nop
 800980c:	0800981d 	.word	0x0800981d
 8009810:	0800982d 	.word	0x0800982d
 8009814:	08009825 	.word	0x08009825
 8009818:	08009835 	.word	0x08009835
 800981c:	2301      	movs	r3, #1
 800981e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009822:	e116      	b.n	8009a52 <UART_SetConfig+0x2e6>
 8009824:	2302      	movs	r3, #2
 8009826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800982a:	e112      	b.n	8009a52 <UART_SetConfig+0x2e6>
 800982c:	2304      	movs	r3, #4
 800982e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009832:	e10e      	b.n	8009a52 <UART_SetConfig+0x2e6>
 8009834:	2308      	movs	r3, #8
 8009836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800983a:	e10a      	b.n	8009a52 <UART_SetConfig+0x2e6>
 800983c:	2310      	movs	r3, #16
 800983e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009842:	e106      	b.n	8009a52 <UART_SetConfig+0x2e6>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a7c      	ldr	r2, [pc, #496]	@ (8009a3c <UART_SetConfig+0x2d0>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d138      	bne.n	80098c0 <UART_SetConfig+0x154>
 800984e:	4b7a      	ldr	r3, [pc, #488]	@ (8009a38 <UART_SetConfig+0x2cc>)
 8009850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009854:	f003 030c 	and.w	r3, r3, #12
 8009858:	2b0c      	cmp	r3, #12
 800985a:	d82d      	bhi.n	80098b8 <UART_SetConfig+0x14c>
 800985c:	a201      	add	r2, pc, #4	@ (adr r2, 8009864 <UART_SetConfig+0xf8>)
 800985e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009862:	bf00      	nop
 8009864:	08009899 	.word	0x08009899
 8009868:	080098b9 	.word	0x080098b9
 800986c:	080098b9 	.word	0x080098b9
 8009870:	080098b9 	.word	0x080098b9
 8009874:	080098a9 	.word	0x080098a9
 8009878:	080098b9 	.word	0x080098b9
 800987c:	080098b9 	.word	0x080098b9
 8009880:	080098b9 	.word	0x080098b9
 8009884:	080098a1 	.word	0x080098a1
 8009888:	080098b9 	.word	0x080098b9
 800988c:	080098b9 	.word	0x080098b9
 8009890:	080098b9 	.word	0x080098b9
 8009894:	080098b1 	.word	0x080098b1
 8009898:	2300      	movs	r3, #0
 800989a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800989e:	e0d8      	b.n	8009a52 <UART_SetConfig+0x2e6>
 80098a0:	2302      	movs	r3, #2
 80098a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098a6:	e0d4      	b.n	8009a52 <UART_SetConfig+0x2e6>
 80098a8:	2304      	movs	r3, #4
 80098aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098ae:	e0d0      	b.n	8009a52 <UART_SetConfig+0x2e6>
 80098b0:	2308      	movs	r3, #8
 80098b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098b6:	e0cc      	b.n	8009a52 <UART_SetConfig+0x2e6>
 80098b8:	2310      	movs	r3, #16
 80098ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098be:	e0c8      	b.n	8009a52 <UART_SetConfig+0x2e6>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a5e      	ldr	r2, [pc, #376]	@ (8009a40 <UART_SetConfig+0x2d4>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d125      	bne.n	8009916 <UART_SetConfig+0x1aa>
 80098ca:	4b5b      	ldr	r3, [pc, #364]	@ (8009a38 <UART_SetConfig+0x2cc>)
 80098cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80098d4:	2b30      	cmp	r3, #48	@ 0x30
 80098d6:	d016      	beq.n	8009906 <UART_SetConfig+0x19a>
 80098d8:	2b30      	cmp	r3, #48	@ 0x30
 80098da:	d818      	bhi.n	800990e <UART_SetConfig+0x1a2>
 80098dc:	2b20      	cmp	r3, #32
 80098de:	d00a      	beq.n	80098f6 <UART_SetConfig+0x18a>
 80098e0:	2b20      	cmp	r3, #32
 80098e2:	d814      	bhi.n	800990e <UART_SetConfig+0x1a2>
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d002      	beq.n	80098ee <UART_SetConfig+0x182>
 80098e8:	2b10      	cmp	r3, #16
 80098ea:	d008      	beq.n	80098fe <UART_SetConfig+0x192>
 80098ec:	e00f      	b.n	800990e <UART_SetConfig+0x1a2>
 80098ee:	2300      	movs	r3, #0
 80098f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098f4:	e0ad      	b.n	8009a52 <UART_SetConfig+0x2e6>
 80098f6:	2302      	movs	r3, #2
 80098f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098fc:	e0a9      	b.n	8009a52 <UART_SetConfig+0x2e6>
 80098fe:	2304      	movs	r3, #4
 8009900:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009904:	e0a5      	b.n	8009a52 <UART_SetConfig+0x2e6>
 8009906:	2308      	movs	r3, #8
 8009908:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800990c:	e0a1      	b.n	8009a52 <UART_SetConfig+0x2e6>
 800990e:	2310      	movs	r3, #16
 8009910:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009914:	e09d      	b.n	8009a52 <UART_SetConfig+0x2e6>
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a4a      	ldr	r2, [pc, #296]	@ (8009a44 <UART_SetConfig+0x2d8>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d125      	bne.n	800996c <UART_SetConfig+0x200>
 8009920:	4b45      	ldr	r3, [pc, #276]	@ (8009a38 <UART_SetConfig+0x2cc>)
 8009922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009926:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800992a:	2bc0      	cmp	r3, #192	@ 0xc0
 800992c:	d016      	beq.n	800995c <UART_SetConfig+0x1f0>
 800992e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009930:	d818      	bhi.n	8009964 <UART_SetConfig+0x1f8>
 8009932:	2b80      	cmp	r3, #128	@ 0x80
 8009934:	d00a      	beq.n	800994c <UART_SetConfig+0x1e0>
 8009936:	2b80      	cmp	r3, #128	@ 0x80
 8009938:	d814      	bhi.n	8009964 <UART_SetConfig+0x1f8>
 800993a:	2b00      	cmp	r3, #0
 800993c:	d002      	beq.n	8009944 <UART_SetConfig+0x1d8>
 800993e:	2b40      	cmp	r3, #64	@ 0x40
 8009940:	d008      	beq.n	8009954 <UART_SetConfig+0x1e8>
 8009942:	e00f      	b.n	8009964 <UART_SetConfig+0x1f8>
 8009944:	2300      	movs	r3, #0
 8009946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800994a:	e082      	b.n	8009a52 <UART_SetConfig+0x2e6>
 800994c:	2302      	movs	r3, #2
 800994e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009952:	e07e      	b.n	8009a52 <UART_SetConfig+0x2e6>
 8009954:	2304      	movs	r3, #4
 8009956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800995a:	e07a      	b.n	8009a52 <UART_SetConfig+0x2e6>
 800995c:	2308      	movs	r3, #8
 800995e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009962:	e076      	b.n	8009a52 <UART_SetConfig+0x2e6>
 8009964:	2310      	movs	r3, #16
 8009966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800996a:	e072      	b.n	8009a52 <UART_SetConfig+0x2e6>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a35      	ldr	r2, [pc, #212]	@ (8009a48 <UART_SetConfig+0x2dc>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d12a      	bne.n	80099cc <UART_SetConfig+0x260>
 8009976:	4b30      	ldr	r3, [pc, #192]	@ (8009a38 <UART_SetConfig+0x2cc>)
 8009978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800997c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009980:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009984:	d01a      	beq.n	80099bc <UART_SetConfig+0x250>
 8009986:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800998a:	d81b      	bhi.n	80099c4 <UART_SetConfig+0x258>
 800998c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009990:	d00c      	beq.n	80099ac <UART_SetConfig+0x240>
 8009992:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009996:	d815      	bhi.n	80099c4 <UART_SetConfig+0x258>
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <UART_SetConfig+0x238>
 800999c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099a0:	d008      	beq.n	80099b4 <UART_SetConfig+0x248>
 80099a2:	e00f      	b.n	80099c4 <UART_SetConfig+0x258>
 80099a4:	2300      	movs	r3, #0
 80099a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099aa:	e052      	b.n	8009a52 <UART_SetConfig+0x2e6>
 80099ac:	2302      	movs	r3, #2
 80099ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099b2:	e04e      	b.n	8009a52 <UART_SetConfig+0x2e6>
 80099b4:	2304      	movs	r3, #4
 80099b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099ba:	e04a      	b.n	8009a52 <UART_SetConfig+0x2e6>
 80099bc:	2308      	movs	r3, #8
 80099be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099c2:	e046      	b.n	8009a52 <UART_SetConfig+0x2e6>
 80099c4:	2310      	movs	r3, #16
 80099c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099ca:	e042      	b.n	8009a52 <UART_SetConfig+0x2e6>
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a17      	ldr	r2, [pc, #92]	@ (8009a30 <UART_SetConfig+0x2c4>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d13a      	bne.n	8009a4c <UART_SetConfig+0x2e0>
 80099d6:	4b18      	ldr	r3, [pc, #96]	@ (8009a38 <UART_SetConfig+0x2cc>)
 80099d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80099e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099e4:	d01a      	beq.n	8009a1c <UART_SetConfig+0x2b0>
 80099e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099ea:	d81b      	bhi.n	8009a24 <UART_SetConfig+0x2b8>
 80099ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099f0:	d00c      	beq.n	8009a0c <UART_SetConfig+0x2a0>
 80099f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099f6:	d815      	bhi.n	8009a24 <UART_SetConfig+0x2b8>
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d003      	beq.n	8009a04 <UART_SetConfig+0x298>
 80099fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a00:	d008      	beq.n	8009a14 <UART_SetConfig+0x2a8>
 8009a02:	e00f      	b.n	8009a24 <UART_SetConfig+0x2b8>
 8009a04:	2300      	movs	r3, #0
 8009a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a0a:	e022      	b.n	8009a52 <UART_SetConfig+0x2e6>
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a12:	e01e      	b.n	8009a52 <UART_SetConfig+0x2e6>
 8009a14:	2304      	movs	r3, #4
 8009a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a1a:	e01a      	b.n	8009a52 <UART_SetConfig+0x2e6>
 8009a1c:	2308      	movs	r3, #8
 8009a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a22:	e016      	b.n	8009a52 <UART_SetConfig+0x2e6>
 8009a24:	2310      	movs	r3, #16
 8009a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a2a:	e012      	b.n	8009a52 <UART_SetConfig+0x2e6>
 8009a2c:	efff69f3 	.word	0xefff69f3
 8009a30:	40008000 	.word	0x40008000
 8009a34:	40013800 	.word	0x40013800
 8009a38:	40021000 	.word	0x40021000
 8009a3c:	40004400 	.word	0x40004400
 8009a40:	40004800 	.word	0x40004800
 8009a44:	40004c00 	.word	0x40004c00
 8009a48:	40005000 	.word	0x40005000
 8009a4c:	2310      	movs	r3, #16
 8009a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a9f      	ldr	r2, [pc, #636]	@ (8009cd4 <UART_SetConfig+0x568>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d17a      	bne.n	8009b52 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009a60:	2b08      	cmp	r3, #8
 8009a62:	d824      	bhi.n	8009aae <UART_SetConfig+0x342>
 8009a64:	a201      	add	r2, pc, #4	@ (adr r2, 8009a6c <UART_SetConfig+0x300>)
 8009a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a6a:	bf00      	nop
 8009a6c:	08009a91 	.word	0x08009a91
 8009a70:	08009aaf 	.word	0x08009aaf
 8009a74:	08009a99 	.word	0x08009a99
 8009a78:	08009aaf 	.word	0x08009aaf
 8009a7c:	08009a9f 	.word	0x08009a9f
 8009a80:	08009aaf 	.word	0x08009aaf
 8009a84:	08009aaf 	.word	0x08009aaf
 8009a88:	08009aaf 	.word	0x08009aaf
 8009a8c:	08009aa7 	.word	0x08009aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a90:	f7fd fc1a 	bl	80072c8 <HAL_RCC_GetPCLK1Freq>
 8009a94:	61f8      	str	r0, [r7, #28]
        break;
 8009a96:	e010      	b.n	8009aba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a98:	4b8f      	ldr	r3, [pc, #572]	@ (8009cd8 <UART_SetConfig+0x56c>)
 8009a9a:	61fb      	str	r3, [r7, #28]
        break;
 8009a9c:	e00d      	b.n	8009aba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a9e:	f7fd fb7b 	bl	8007198 <HAL_RCC_GetSysClockFreq>
 8009aa2:	61f8      	str	r0, [r7, #28]
        break;
 8009aa4:	e009      	b.n	8009aba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009aaa:	61fb      	str	r3, [r7, #28]
        break;
 8009aac:	e005      	b.n	8009aba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009ab8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f000 80fb 	beq.w	8009cb8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	685a      	ldr	r2, [r3, #4]
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	005b      	lsls	r3, r3, #1
 8009aca:	4413      	add	r3, r2
 8009acc:	69fa      	ldr	r2, [r7, #28]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d305      	bcc.n	8009ade <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009ad8:	69fa      	ldr	r2, [r7, #28]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d903      	bls.n	8009ae6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009ae4:	e0e8      	b.n	8009cb8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	461c      	mov	r4, r3
 8009aec:	4615      	mov	r5, r2
 8009aee:	f04f 0200 	mov.w	r2, #0
 8009af2:	f04f 0300 	mov.w	r3, #0
 8009af6:	022b      	lsls	r3, r5, #8
 8009af8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009afc:	0222      	lsls	r2, r4, #8
 8009afe:	68f9      	ldr	r1, [r7, #12]
 8009b00:	6849      	ldr	r1, [r1, #4]
 8009b02:	0849      	lsrs	r1, r1, #1
 8009b04:	2000      	movs	r0, #0
 8009b06:	4688      	mov	r8, r1
 8009b08:	4681      	mov	r9, r0
 8009b0a:	eb12 0a08 	adds.w	sl, r2, r8
 8009b0e:	eb43 0b09 	adc.w	fp, r3, r9
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	603b      	str	r3, [r7, #0]
 8009b1a:	607a      	str	r2, [r7, #4]
 8009b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b20:	4650      	mov	r0, sl
 8009b22:	4659      	mov	r1, fp
 8009b24:	f7f7 f8b0 	bl	8000c88 <__aeabi_uldivmod>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b36:	d308      	bcc.n	8009b4a <UART_SetConfig+0x3de>
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b3e:	d204      	bcs.n	8009b4a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	69ba      	ldr	r2, [r7, #24]
 8009b46:	60da      	str	r2, [r3, #12]
 8009b48:	e0b6      	b.n	8009cb8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009b50:	e0b2      	b.n	8009cb8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	69db      	ldr	r3, [r3, #28]
 8009b56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b5a:	d15e      	bne.n	8009c1a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009b5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009b60:	2b08      	cmp	r3, #8
 8009b62:	d828      	bhi.n	8009bb6 <UART_SetConfig+0x44a>
 8009b64:	a201      	add	r2, pc, #4	@ (adr r2, 8009b6c <UART_SetConfig+0x400>)
 8009b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6a:	bf00      	nop
 8009b6c:	08009b91 	.word	0x08009b91
 8009b70:	08009b99 	.word	0x08009b99
 8009b74:	08009ba1 	.word	0x08009ba1
 8009b78:	08009bb7 	.word	0x08009bb7
 8009b7c:	08009ba7 	.word	0x08009ba7
 8009b80:	08009bb7 	.word	0x08009bb7
 8009b84:	08009bb7 	.word	0x08009bb7
 8009b88:	08009bb7 	.word	0x08009bb7
 8009b8c:	08009baf 	.word	0x08009baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b90:	f7fd fb9a 	bl	80072c8 <HAL_RCC_GetPCLK1Freq>
 8009b94:	61f8      	str	r0, [r7, #28]
        break;
 8009b96:	e014      	b.n	8009bc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b98:	f7fd fbac 	bl	80072f4 <HAL_RCC_GetPCLK2Freq>
 8009b9c:	61f8      	str	r0, [r7, #28]
        break;
 8009b9e:	e010      	b.n	8009bc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ba0:	4b4d      	ldr	r3, [pc, #308]	@ (8009cd8 <UART_SetConfig+0x56c>)
 8009ba2:	61fb      	str	r3, [r7, #28]
        break;
 8009ba4:	e00d      	b.n	8009bc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ba6:	f7fd faf7 	bl	8007198 <HAL_RCC_GetSysClockFreq>
 8009baa:	61f8      	str	r0, [r7, #28]
        break;
 8009bac:	e009      	b.n	8009bc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bb2:	61fb      	str	r3, [r7, #28]
        break;
 8009bb4:	e005      	b.n	8009bc2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009bc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d077      	beq.n	8009cb8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	005a      	lsls	r2, r3, #1
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	085b      	lsrs	r3, r3, #1
 8009bd2:	441a      	add	r2, r3
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bdc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	2b0f      	cmp	r3, #15
 8009be2:	d916      	bls.n	8009c12 <UART_SetConfig+0x4a6>
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bea:	d212      	bcs.n	8009c12 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	f023 030f 	bic.w	r3, r3, #15
 8009bf4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	085b      	lsrs	r3, r3, #1
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	f003 0307 	and.w	r3, r3, #7
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	8afb      	ldrh	r3, [r7, #22]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	8afa      	ldrh	r2, [r7, #22]
 8009c0e:	60da      	str	r2, [r3, #12]
 8009c10:	e052      	b.n	8009cb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009c18:	e04e      	b.n	8009cb8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009c1e:	2b08      	cmp	r3, #8
 8009c20:	d827      	bhi.n	8009c72 <UART_SetConfig+0x506>
 8009c22:	a201      	add	r2, pc, #4	@ (adr r2, 8009c28 <UART_SetConfig+0x4bc>)
 8009c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c28:	08009c4d 	.word	0x08009c4d
 8009c2c:	08009c55 	.word	0x08009c55
 8009c30:	08009c5d 	.word	0x08009c5d
 8009c34:	08009c73 	.word	0x08009c73
 8009c38:	08009c63 	.word	0x08009c63
 8009c3c:	08009c73 	.word	0x08009c73
 8009c40:	08009c73 	.word	0x08009c73
 8009c44:	08009c73 	.word	0x08009c73
 8009c48:	08009c6b 	.word	0x08009c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c4c:	f7fd fb3c 	bl	80072c8 <HAL_RCC_GetPCLK1Freq>
 8009c50:	61f8      	str	r0, [r7, #28]
        break;
 8009c52:	e014      	b.n	8009c7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c54:	f7fd fb4e 	bl	80072f4 <HAL_RCC_GetPCLK2Freq>
 8009c58:	61f8      	str	r0, [r7, #28]
        break;
 8009c5a:	e010      	b.n	8009c7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8009cd8 <UART_SetConfig+0x56c>)
 8009c5e:	61fb      	str	r3, [r7, #28]
        break;
 8009c60:	e00d      	b.n	8009c7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c62:	f7fd fa99 	bl	8007198 <HAL_RCC_GetSysClockFreq>
 8009c66:	61f8      	str	r0, [r7, #28]
        break;
 8009c68:	e009      	b.n	8009c7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c6e:	61fb      	str	r3, [r7, #28]
        break;
 8009c70:	e005      	b.n	8009c7e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009c72:	2300      	movs	r3, #0
 8009c74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009c7c:	bf00      	nop
    }

    if (pclk != 0U)
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d019      	beq.n	8009cb8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	085a      	lsrs	r2, r3, #1
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	441a      	add	r2, r3
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c96:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	2b0f      	cmp	r3, #15
 8009c9c:	d909      	bls.n	8009cb2 <UART_SetConfig+0x546>
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ca4:	d205      	bcs.n	8009cb2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	60da      	str	r2, [r3, #12]
 8009cb0:	e002      	b.n	8009cb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009cc4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3728      	adds	r7, #40	@ 0x28
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009cd2:	bf00      	nop
 8009cd4:	40008000 	.word	0x40008000
 8009cd8:	00f42400 	.word	0x00f42400

08009cdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ce8:	f003 0308 	and.w	r3, r3, #8
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00a      	beq.n	8009d06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	430a      	orrs	r2, r1
 8009d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d0a:	f003 0301 	and.w	r3, r3, #1
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00a      	beq.n	8009d28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	430a      	orrs	r2, r1
 8009d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d2c:	f003 0302 	and.w	r3, r3, #2
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00a      	beq.n	8009d4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	430a      	orrs	r2, r1
 8009d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d4e:	f003 0304 	and.w	r3, r3, #4
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00a      	beq.n	8009d6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	430a      	orrs	r2, r1
 8009d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d70:	f003 0310 	and.w	r3, r3, #16
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00a      	beq.n	8009d8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	430a      	orrs	r2, r1
 8009d8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d92:	f003 0320 	and.w	r3, r3, #32
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00a      	beq.n	8009db0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	430a      	orrs	r2, r1
 8009dae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d01a      	beq.n	8009df2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dda:	d10a      	bne.n	8009df2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	430a      	orrs	r2, r1
 8009df0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00a      	beq.n	8009e14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	430a      	orrs	r2, r1
 8009e12:	605a      	str	r2, [r3, #4]
  }
}
 8009e14:	bf00      	nop
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b098      	sub	sp, #96	@ 0x60
 8009e24:	af02      	add	r7, sp, #8
 8009e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e30:	f7f9 faac 	bl	800338c <HAL_GetTick>
 8009e34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 0308 	and.w	r3, r3, #8
 8009e40:	2b08      	cmp	r3, #8
 8009e42:	d12e      	bne.n	8009ea2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f88c 	bl	8009f70 <UART_WaitOnFlagUntilTimeout>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d021      	beq.n	8009ea2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e66:	e853 3f00 	ldrex	r3, [r3]
 8009e6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e72:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e7e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e84:	e841 2300 	strex	r3, r2, [r1]
 8009e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1e6      	bne.n	8009e5e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2220      	movs	r2, #32
 8009e94:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	e062      	b.n	8009f68 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 0304 	and.w	r3, r3, #4
 8009eac:	2b04      	cmp	r3, #4
 8009eae:	d149      	bne.n	8009f44 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009eb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f856 	bl	8009f70 <UART_WaitOnFlagUntilTimeout>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d03c      	beq.n	8009f44 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed2:	e853 3f00 	ldrex	r3, [r3]
 8009ed6:	623b      	str	r3, [r7, #32]
   return(result);
 8009ed8:	6a3b      	ldr	r3, [r7, #32]
 8009eda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ee8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009eea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ef0:	e841 2300 	strex	r3, r2, [r1]
 8009ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1e6      	bne.n	8009eca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	3308      	adds	r3, #8
 8009f02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	e853 3f00 	ldrex	r3, [r3]
 8009f0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f023 0301 	bic.w	r3, r3, #1
 8009f12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	3308      	adds	r3, #8
 8009f1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f1c:	61fa      	str	r2, [r7, #28]
 8009f1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f20:	69b9      	ldr	r1, [r7, #24]
 8009f22:	69fa      	ldr	r2, [r7, #28]
 8009f24:	e841 2300 	strex	r3, r2, [r1]
 8009f28:	617b      	str	r3, [r7, #20]
   return(result);
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d1e5      	bne.n	8009efc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2220      	movs	r2, #32
 8009f34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f40:	2303      	movs	r3, #3
 8009f42:	e011      	b.n	8009f68 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2220      	movs	r2, #32
 8009f48:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2220      	movs	r2, #32
 8009f4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3758      	adds	r7, #88	@ 0x58
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	603b      	str	r3, [r7, #0]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f80:	e04f      	b.n	800a022 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f88:	d04b      	beq.n	800a022 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f8a:	f7f9 f9ff 	bl	800338c <HAL_GetTick>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	1ad3      	subs	r3, r2, r3
 8009f94:	69ba      	ldr	r2, [r7, #24]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d302      	bcc.n	8009fa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d101      	bne.n	8009fa4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	e04e      	b.n	800a042 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 0304 	and.w	r3, r3, #4
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d037      	beq.n	800a022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2b80      	cmp	r3, #128	@ 0x80
 8009fb6:	d034      	beq.n	800a022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	2b40      	cmp	r3, #64	@ 0x40
 8009fbc:	d031      	beq.n	800a022 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	69db      	ldr	r3, [r3, #28]
 8009fc4:	f003 0308 	and.w	r3, r3, #8
 8009fc8:	2b08      	cmp	r3, #8
 8009fca:	d110      	bne.n	8009fee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2208      	movs	r2, #8
 8009fd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f000 f838 	bl	800a04a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2208      	movs	r2, #8
 8009fde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e029      	b.n	800a042 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	69db      	ldr	r3, [r3, #28]
 8009ff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ffc:	d111      	bne.n	800a022 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 f81e 	bl	800a04a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2220      	movs	r2, #32
 800a012:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a01e:	2303      	movs	r3, #3
 800a020:	e00f      	b.n	800a042 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	69da      	ldr	r2, [r3, #28]
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	4013      	ands	r3, r2
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	429a      	cmp	r2, r3
 800a030:	bf0c      	ite	eq
 800a032:	2301      	moveq	r3, #1
 800a034:	2300      	movne	r3, #0
 800a036:	b2db      	uxtb	r3, r3
 800a038:	461a      	mov	r2, r3
 800a03a:	79fb      	ldrb	r3, [r7, #7]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d0a0      	beq.n	8009f82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a04a:	b480      	push	{r7}
 800a04c:	b095      	sub	sp, #84	@ 0x54
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a05a:	e853 3f00 	ldrex	r3, [r3]
 800a05e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a062:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	461a      	mov	r2, r3
 800a06e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a070:	643b      	str	r3, [r7, #64]	@ 0x40
 800a072:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a074:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a076:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a078:	e841 2300 	strex	r3, r2, [r1]
 800a07c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1e6      	bne.n	800a052 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	3308      	adds	r3, #8
 800a08a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	e853 3f00 	ldrex	r3, [r3]
 800a092:	61fb      	str	r3, [r7, #28]
   return(result);
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	f023 0301 	bic.w	r3, r3, #1
 800a09a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	3308      	adds	r3, #8
 800a0a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0ac:	e841 2300 	strex	r3, r2, [r1]
 800a0b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1e5      	bne.n	800a084 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d118      	bne.n	800a0f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	e853 3f00 	ldrex	r3, [r3]
 800a0cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	f023 0310 	bic.w	r3, r3, #16
 800a0d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0de:	61bb      	str	r3, [r7, #24]
 800a0e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e2:	6979      	ldr	r1, [r7, #20]
 800a0e4:	69ba      	ldr	r2, [r7, #24]
 800a0e6:	e841 2300 	strex	r3, r2, [r1]
 800a0ea:	613b      	str	r3, [r7, #16]
   return(result);
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1e6      	bne.n	800a0c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2220      	movs	r2, #32
 800a0f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a106:	bf00      	nop
 800a108:	3754      	adds	r7, #84	@ 0x54
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr

0800a112 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a112:	b084      	sub	sp, #16
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	f107 001c 	add.w	r0, r7, #28
 800a120:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 fa69 	bl	800a608 <USB_CoreReset>
 800a136:	4603      	mov	r3, r0
 800a138:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a13a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d106      	bne.n	800a150 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a146:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	639a      	str	r2, [r3, #56]	@ 0x38
 800a14e:	e005      	b.n	800a15c <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a154:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a168:	b004      	add	sp, #16
 800a16a:	4770      	bx	lr

0800a16c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f023 0201 	bic.w	r2, r3, #1
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	370c      	adds	r7, #12
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr

0800a18e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b084      	sub	sp, #16
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	460b      	mov	r3, r1
 800a198:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a19a:	2300      	movs	r3, #0
 800a19c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a1aa:	78fb      	ldrb	r3, [r7, #3]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d115      	bne.n	800a1dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a1bc:	200a      	movs	r0, #10
 800a1be:	f7f9 f8f1 	bl	80033a4 <HAL_Delay>
      ms += 10U;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	330a      	adds	r3, #10
 800a1c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fa0f 	bl	800a5ec <USB_GetMode>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d01e      	beq.n	800a212 <USB_SetCurrentMode+0x84>
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2bc7      	cmp	r3, #199	@ 0xc7
 800a1d8:	d9f0      	bls.n	800a1bc <USB_SetCurrentMode+0x2e>
 800a1da:	e01a      	b.n	800a212 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a1dc:	78fb      	ldrb	r3, [r7, #3]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d115      	bne.n	800a20e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a1ee:	200a      	movs	r0, #10
 800a1f0:	f7f9 f8d8 	bl	80033a4 <HAL_Delay>
      ms += 10U;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	330a      	adds	r3, #10
 800a1f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f9f6 	bl	800a5ec <USB_GetMode>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d005      	beq.n	800a212 <USB_SetCurrentMode+0x84>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2bc7      	cmp	r3, #199	@ 0xc7
 800a20a:	d9f0      	bls.n	800a1ee <USB_SetCurrentMode+0x60>
 800a20c:	e001      	b.n	800a212 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	e005      	b.n	800a21e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2bc8      	cmp	r3, #200	@ 0xc8
 800a216:	d101      	bne.n	800a21c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	e000      	b.n	800a21e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
	...

0800a228 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a228:	b084      	sub	sp, #16
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b086      	sub	sp, #24
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a236:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a23a:	2300      	movs	r3, #0
 800a23c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a242:	2300      	movs	r3, #0
 800a244:	613b      	str	r3, [r7, #16]
 800a246:	e009      	b.n	800a25c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	3340      	adds	r3, #64	@ 0x40
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4413      	add	r3, r2
 800a252:	2200      	movs	r2, #0
 800a254:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	3301      	adds	r3, #1
 800a25a:	613b      	str	r3, [r7, #16]
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	2b0e      	cmp	r3, #14
 800a260:	d9f2      	bls.n	800a248 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a262:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a266:	2b00      	cmp	r3, #0
 800a268:	d11c      	bne.n	800a2a4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a278:	f043 0302 	orr.w	r3, r3, #2
 800a27c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a282:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	601a      	str	r2, [r3, #0]
 800a2a2:	e005      	b.n	800a2b0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a2bc:	2103      	movs	r1, #3
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f95a 	bl	800a578 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a2c4:	2110      	movs	r1, #16
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 f8f6 	bl	800a4b8 <USB_FlushTxFifo>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d001      	beq.n	800a2d6 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f920 	bl	800a51c <USB_FlushRxFifo>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d001      	beq.n	800a2e6 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a304:	461a      	mov	r2, r3
 800a306:	2300      	movs	r3, #0
 800a308:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a30a:	2300      	movs	r3, #0
 800a30c:	613b      	str	r3, [r7, #16]
 800a30e:	e043      	b.n	800a398 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	015a      	lsls	r2, r3, #5
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	4413      	add	r3, r2
 800a318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a322:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a326:	d118      	bne.n	800a35a <USB_DevInit+0x132>
    {
      if (i == 0U)
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10a      	bne.n	800a344 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	015a      	lsls	r2, r3, #5
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	4413      	add	r3, r2
 800a336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a33a:	461a      	mov	r2, r3
 800a33c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a340:	6013      	str	r3, [r2, #0]
 800a342:	e013      	b.n	800a36c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	015a      	lsls	r2, r3, #5
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	4413      	add	r3, r2
 800a34c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a350:	461a      	mov	r2, r3
 800a352:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a356:	6013      	str	r3, [r2, #0]
 800a358:	e008      	b.n	800a36c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	015a      	lsls	r2, r3, #5
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	4413      	add	r3, r2
 800a362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a366:	461a      	mov	r2, r3
 800a368:	2300      	movs	r3, #0
 800a36a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	015a      	lsls	r2, r3, #5
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	4413      	add	r3, r2
 800a374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a378:	461a      	mov	r2, r3
 800a37a:	2300      	movs	r3, #0
 800a37c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	015a      	lsls	r2, r3, #5
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	4413      	add	r3, r2
 800a386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a38a:	461a      	mov	r2, r3
 800a38c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a390:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	3301      	adds	r3, #1
 800a396:	613b      	str	r3, [r7, #16]
 800a398:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a39c:	461a      	mov	r2, r3
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d3b5      	bcc.n	800a310 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	613b      	str	r3, [r7, #16]
 800a3a8:	e043      	b.n	800a432 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	015a      	lsls	r2, r3, #5
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3c0:	d118      	bne.n	800a3f4 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10a      	bne.n	800a3de <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	015a      	lsls	r2, r3, #5
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a3da:	6013      	str	r3, [r2, #0]
 800a3dc:	e013      	b.n	800a406 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	015a      	lsls	r2, r3, #5
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a3f0:	6013      	str	r3, [r2, #0]
 800a3f2:	e008      	b.n	800a406 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	015a      	lsls	r2, r3, #5
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a400:	461a      	mov	r2, r3
 800a402:	2300      	movs	r3, #0
 800a404:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a412:	461a      	mov	r2, r3
 800a414:	2300      	movs	r3, #0
 800a416:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	015a      	lsls	r2, r3, #5
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	4413      	add	r3, r2
 800a420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a424:	461a      	mov	r2, r3
 800a426:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a42a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	3301      	adds	r3, #1
 800a430:	613b      	str	r3, [r7, #16]
 800a432:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a436:	461a      	mov	r2, r3
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d3b5      	bcc.n	800a3aa <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a44c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a450:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a45e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	f043 0210 	orr.w	r2, r3, #16
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	699a      	ldr	r2, [r3, #24]
 800a470:	4b10      	ldr	r3, [pc, #64]	@ (800a4b4 <USB_DevInit+0x28c>)
 800a472:	4313      	orrs	r3, r2
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a478:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d005      	beq.n	800a48c <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	699b      	ldr	r3, [r3, #24]
 800a484:	f043 0208 	orr.w	r2, r3, #8
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a48c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a490:	2b01      	cmp	r3, #1
 800a492:	d107      	bne.n	800a4a4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a49c:	f043 0304 	orr.w	r3, r3, #4
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a4a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3718      	adds	r7, #24
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a4b0:	b004      	add	sp, #16
 800a4b2:	4770      	bx	lr
 800a4b4:	803c3800 	.word	0x803c3800

0800a4b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4d2:	d901      	bls.n	800a4d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a4d4:	2303      	movs	r3, #3
 800a4d6:	e01b      	b.n	800a510 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	daf2      	bge.n	800a4c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	019b      	lsls	r3, r3, #6
 800a4e8:	f043 0220 	orr.w	r2, r3, #32
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4fc:	d901      	bls.n	800a502 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a4fe:	2303      	movs	r3, #3
 800a500:	e006      	b.n	800a510 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	f003 0320 	and.w	r3, r3, #32
 800a50a:	2b20      	cmp	r3, #32
 800a50c:	d0f0      	beq.n	800a4f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3714      	adds	r7, #20
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b085      	sub	sp, #20
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a524:	2300      	movs	r3, #0
 800a526:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	3301      	adds	r3, #1
 800a52c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a534:	d901      	bls.n	800a53a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a536:	2303      	movs	r3, #3
 800a538:	e018      	b.n	800a56c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	daf2      	bge.n	800a528 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a542:	2300      	movs	r3, #0
 800a544:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2210      	movs	r2, #16
 800a54a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	3301      	adds	r3, #1
 800a550:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a558:	d901      	bls.n	800a55e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a55a:	2303      	movs	r3, #3
 800a55c:	e006      	b.n	800a56c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	f003 0310 	and.w	r3, r3, #16
 800a566:	2b10      	cmp	r3, #16
 800a568:	d0f0      	beq.n	800a54c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3714      	adds	r7, #20
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	460b      	mov	r3, r1
 800a582:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	78fb      	ldrb	r3, [r7, #3]
 800a592:	68f9      	ldr	r1, [r7, #12]
 800a594:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a598:	4313      	orrs	r3, r2
 800a59a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3714      	adds	r7, #20
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b085      	sub	sp, #20
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a5c4:	f023 0303 	bic.w	r3, r3, #3
 800a5c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a5d8:	f043 0302 	orr.w	r3, r3, #2
 800a5dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a5de:	2300      	movs	r3, #0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3714      	adds	r7, #20
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	695b      	ldr	r3, [r3, #20]
 800a5f8:	f003 0301 	and.w	r3, r3, #1
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a610:	2300      	movs	r3, #0
 800a612:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	3301      	adds	r3, #1
 800a618:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a620:	d901      	bls.n	800a626 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a622:	2303      	movs	r3, #3
 800a624:	e01b      	b.n	800a65e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	daf2      	bge.n	800a614 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a62e:	2300      	movs	r3, #0
 800a630:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	f043 0201 	orr.w	r2, r3, #1
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	3301      	adds	r3, #1
 800a642:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a64a:	d901      	bls.n	800a650 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a64c:	2303      	movs	r3, #3
 800a64e:	e006      	b.n	800a65e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d0f0      	beq.n	800a63e <USB_CoreReset+0x36>

  return HAL_OK;
 800a65c:	2300      	movs	r3, #0
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3714      	adds	r7, #20
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr

0800a66a <__cvt>:
 800a66a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a66e:	ec57 6b10 	vmov	r6, r7, d0
 800a672:	2f00      	cmp	r7, #0
 800a674:	460c      	mov	r4, r1
 800a676:	4619      	mov	r1, r3
 800a678:	463b      	mov	r3, r7
 800a67a:	bfbb      	ittet	lt
 800a67c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a680:	461f      	movlt	r7, r3
 800a682:	2300      	movge	r3, #0
 800a684:	232d      	movlt	r3, #45	@ 0x2d
 800a686:	700b      	strb	r3, [r1, #0]
 800a688:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a68a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a68e:	4691      	mov	r9, r2
 800a690:	f023 0820 	bic.w	r8, r3, #32
 800a694:	bfbc      	itt	lt
 800a696:	4632      	movlt	r2, r6
 800a698:	4616      	movlt	r6, r2
 800a69a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a69e:	d005      	beq.n	800a6ac <__cvt+0x42>
 800a6a0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a6a4:	d100      	bne.n	800a6a8 <__cvt+0x3e>
 800a6a6:	3401      	adds	r4, #1
 800a6a8:	2102      	movs	r1, #2
 800a6aa:	e000      	b.n	800a6ae <__cvt+0x44>
 800a6ac:	2103      	movs	r1, #3
 800a6ae:	ab03      	add	r3, sp, #12
 800a6b0:	9301      	str	r3, [sp, #4]
 800a6b2:	ab02      	add	r3, sp, #8
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	ec47 6b10 	vmov	d0, r6, r7
 800a6ba:	4653      	mov	r3, sl
 800a6bc:	4622      	mov	r2, r4
 800a6be:	f001 f987 	bl	800b9d0 <_dtoa_r>
 800a6c2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a6c6:	4605      	mov	r5, r0
 800a6c8:	d119      	bne.n	800a6fe <__cvt+0x94>
 800a6ca:	f019 0f01 	tst.w	r9, #1
 800a6ce:	d00e      	beq.n	800a6ee <__cvt+0x84>
 800a6d0:	eb00 0904 	add.w	r9, r0, r4
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	4630      	mov	r0, r6
 800a6da:	4639      	mov	r1, r7
 800a6dc:	f7f6 f9f4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6e0:	b108      	cbz	r0, 800a6e6 <__cvt+0x7c>
 800a6e2:	f8cd 900c 	str.w	r9, [sp, #12]
 800a6e6:	2230      	movs	r2, #48	@ 0x30
 800a6e8:	9b03      	ldr	r3, [sp, #12]
 800a6ea:	454b      	cmp	r3, r9
 800a6ec:	d31e      	bcc.n	800a72c <__cvt+0xc2>
 800a6ee:	9b03      	ldr	r3, [sp, #12]
 800a6f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6f2:	1b5b      	subs	r3, r3, r5
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	6013      	str	r3, [r2, #0]
 800a6f8:	b004      	add	sp, #16
 800a6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6fe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a702:	eb00 0904 	add.w	r9, r0, r4
 800a706:	d1e5      	bne.n	800a6d4 <__cvt+0x6a>
 800a708:	7803      	ldrb	r3, [r0, #0]
 800a70a:	2b30      	cmp	r3, #48	@ 0x30
 800a70c:	d10a      	bne.n	800a724 <__cvt+0xba>
 800a70e:	2200      	movs	r2, #0
 800a710:	2300      	movs	r3, #0
 800a712:	4630      	mov	r0, r6
 800a714:	4639      	mov	r1, r7
 800a716:	f7f6 f9d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a71a:	b918      	cbnz	r0, 800a724 <__cvt+0xba>
 800a71c:	f1c4 0401 	rsb	r4, r4, #1
 800a720:	f8ca 4000 	str.w	r4, [sl]
 800a724:	f8da 3000 	ldr.w	r3, [sl]
 800a728:	4499      	add	r9, r3
 800a72a:	e7d3      	b.n	800a6d4 <__cvt+0x6a>
 800a72c:	1c59      	adds	r1, r3, #1
 800a72e:	9103      	str	r1, [sp, #12]
 800a730:	701a      	strb	r2, [r3, #0]
 800a732:	e7d9      	b.n	800a6e8 <__cvt+0x7e>

0800a734 <__exponent>:
 800a734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a736:	2900      	cmp	r1, #0
 800a738:	bfba      	itte	lt
 800a73a:	4249      	neglt	r1, r1
 800a73c:	232d      	movlt	r3, #45	@ 0x2d
 800a73e:	232b      	movge	r3, #43	@ 0x2b
 800a740:	2909      	cmp	r1, #9
 800a742:	7002      	strb	r2, [r0, #0]
 800a744:	7043      	strb	r3, [r0, #1]
 800a746:	dd29      	ble.n	800a79c <__exponent+0x68>
 800a748:	f10d 0307 	add.w	r3, sp, #7
 800a74c:	461d      	mov	r5, r3
 800a74e:	270a      	movs	r7, #10
 800a750:	461a      	mov	r2, r3
 800a752:	fbb1 f6f7 	udiv	r6, r1, r7
 800a756:	fb07 1416 	mls	r4, r7, r6, r1
 800a75a:	3430      	adds	r4, #48	@ 0x30
 800a75c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a760:	460c      	mov	r4, r1
 800a762:	2c63      	cmp	r4, #99	@ 0x63
 800a764:	f103 33ff 	add.w	r3, r3, #4294967295
 800a768:	4631      	mov	r1, r6
 800a76a:	dcf1      	bgt.n	800a750 <__exponent+0x1c>
 800a76c:	3130      	adds	r1, #48	@ 0x30
 800a76e:	1e94      	subs	r4, r2, #2
 800a770:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a774:	1c41      	adds	r1, r0, #1
 800a776:	4623      	mov	r3, r4
 800a778:	42ab      	cmp	r3, r5
 800a77a:	d30a      	bcc.n	800a792 <__exponent+0x5e>
 800a77c:	f10d 0309 	add.w	r3, sp, #9
 800a780:	1a9b      	subs	r3, r3, r2
 800a782:	42ac      	cmp	r4, r5
 800a784:	bf88      	it	hi
 800a786:	2300      	movhi	r3, #0
 800a788:	3302      	adds	r3, #2
 800a78a:	4403      	add	r3, r0
 800a78c:	1a18      	subs	r0, r3, r0
 800a78e:	b003      	add	sp, #12
 800a790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a792:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a796:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a79a:	e7ed      	b.n	800a778 <__exponent+0x44>
 800a79c:	2330      	movs	r3, #48	@ 0x30
 800a79e:	3130      	adds	r1, #48	@ 0x30
 800a7a0:	7083      	strb	r3, [r0, #2]
 800a7a2:	70c1      	strb	r1, [r0, #3]
 800a7a4:	1d03      	adds	r3, r0, #4
 800a7a6:	e7f1      	b.n	800a78c <__exponent+0x58>

0800a7a8 <_printf_float>:
 800a7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ac:	b08d      	sub	sp, #52	@ 0x34
 800a7ae:	460c      	mov	r4, r1
 800a7b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a7b4:	4616      	mov	r6, r2
 800a7b6:	461f      	mov	r7, r3
 800a7b8:	4605      	mov	r5, r0
 800a7ba:	f000 fff3 	bl	800b7a4 <_localeconv_r>
 800a7be:	6803      	ldr	r3, [r0, #0]
 800a7c0:	9304      	str	r3, [sp, #16]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7f5 fd54 	bl	8000270 <strlen>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7cc:	f8d8 3000 	ldr.w	r3, [r8]
 800a7d0:	9005      	str	r0, [sp, #20]
 800a7d2:	3307      	adds	r3, #7
 800a7d4:	f023 0307 	bic.w	r3, r3, #7
 800a7d8:	f103 0208 	add.w	r2, r3, #8
 800a7dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a7e0:	f8d4 b000 	ldr.w	fp, [r4]
 800a7e4:	f8c8 2000 	str.w	r2, [r8]
 800a7e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a7ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a7f0:	9307      	str	r3, [sp, #28]
 800a7f2:	f8cd 8018 	str.w	r8, [sp, #24]
 800a7f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a7fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7fe:	4b9c      	ldr	r3, [pc, #624]	@ (800aa70 <_printf_float+0x2c8>)
 800a800:	f04f 32ff 	mov.w	r2, #4294967295
 800a804:	f7f6 f992 	bl	8000b2c <__aeabi_dcmpun>
 800a808:	bb70      	cbnz	r0, 800a868 <_printf_float+0xc0>
 800a80a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a80e:	4b98      	ldr	r3, [pc, #608]	@ (800aa70 <_printf_float+0x2c8>)
 800a810:	f04f 32ff 	mov.w	r2, #4294967295
 800a814:	f7f6 f96c 	bl	8000af0 <__aeabi_dcmple>
 800a818:	bb30      	cbnz	r0, 800a868 <_printf_float+0xc0>
 800a81a:	2200      	movs	r2, #0
 800a81c:	2300      	movs	r3, #0
 800a81e:	4640      	mov	r0, r8
 800a820:	4649      	mov	r1, r9
 800a822:	f7f6 f95b 	bl	8000adc <__aeabi_dcmplt>
 800a826:	b110      	cbz	r0, 800a82e <_printf_float+0x86>
 800a828:	232d      	movs	r3, #45	@ 0x2d
 800a82a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a82e:	4a91      	ldr	r2, [pc, #580]	@ (800aa74 <_printf_float+0x2cc>)
 800a830:	4b91      	ldr	r3, [pc, #580]	@ (800aa78 <_printf_float+0x2d0>)
 800a832:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a836:	bf94      	ite	ls
 800a838:	4690      	movls	r8, r2
 800a83a:	4698      	movhi	r8, r3
 800a83c:	2303      	movs	r3, #3
 800a83e:	6123      	str	r3, [r4, #16]
 800a840:	f02b 0304 	bic.w	r3, fp, #4
 800a844:	6023      	str	r3, [r4, #0]
 800a846:	f04f 0900 	mov.w	r9, #0
 800a84a:	9700      	str	r7, [sp, #0]
 800a84c:	4633      	mov	r3, r6
 800a84e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a850:	4621      	mov	r1, r4
 800a852:	4628      	mov	r0, r5
 800a854:	f000 f9d2 	bl	800abfc <_printf_common>
 800a858:	3001      	adds	r0, #1
 800a85a:	f040 808d 	bne.w	800a978 <_printf_float+0x1d0>
 800a85e:	f04f 30ff 	mov.w	r0, #4294967295
 800a862:	b00d      	add	sp, #52	@ 0x34
 800a864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a868:	4642      	mov	r2, r8
 800a86a:	464b      	mov	r3, r9
 800a86c:	4640      	mov	r0, r8
 800a86e:	4649      	mov	r1, r9
 800a870:	f7f6 f95c 	bl	8000b2c <__aeabi_dcmpun>
 800a874:	b140      	cbz	r0, 800a888 <_printf_float+0xe0>
 800a876:	464b      	mov	r3, r9
 800a878:	2b00      	cmp	r3, #0
 800a87a:	bfbc      	itt	lt
 800a87c:	232d      	movlt	r3, #45	@ 0x2d
 800a87e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a882:	4a7e      	ldr	r2, [pc, #504]	@ (800aa7c <_printf_float+0x2d4>)
 800a884:	4b7e      	ldr	r3, [pc, #504]	@ (800aa80 <_printf_float+0x2d8>)
 800a886:	e7d4      	b.n	800a832 <_printf_float+0x8a>
 800a888:	6863      	ldr	r3, [r4, #4]
 800a88a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a88e:	9206      	str	r2, [sp, #24]
 800a890:	1c5a      	adds	r2, r3, #1
 800a892:	d13b      	bne.n	800a90c <_printf_float+0x164>
 800a894:	2306      	movs	r3, #6
 800a896:	6063      	str	r3, [r4, #4]
 800a898:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a89c:	2300      	movs	r3, #0
 800a89e:	6022      	str	r2, [r4, #0]
 800a8a0:	9303      	str	r3, [sp, #12]
 800a8a2:	ab0a      	add	r3, sp, #40	@ 0x28
 800a8a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a8a8:	ab09      	add	r3, sp, #36	@ 0x24
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	6861      	ldr	r1, [r4, #4]
 800a8ae:	ec49 8b10 	vmov	d0, r8, r9
 800a8b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f7ff fed7 	bl	800a66a <__cvt>
 800a8bc:	9b06      	ldr	r3, [sp, #24]
 800a8be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a8c0:	2b47      	cmp	r3, #71	@ 0x47
 800a8c2:	4680      	mov	r8, r0
 800a8c4:	d129      	bne.n	800a91a <_printf_float+0x172>
 800a8c6:	1cc8      	adds	r0, r1, #3
 800a8c8:	db02      	blt.n	800a8d0 <_printf_float+0x128>
 800a8ca:	6863      	ldr	r3, [r4, #4]
 800a8cc:	4299      	cmp	r1, r3
 800a8ce:	dd41      	ble.n	800a954 <_printf_float+0x1ac>
 800a8d0:	f1aa 0a02 	sub.w	sl, sl, #2
 800a8d4:	fa5f fa8a 	uxtb.w	sl, sl
 800a8d8:	3901      	subs	r1, #1
 800a8da:	4652      	mov	r2, sl
 800a8dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a8e0:	9109      	str	r1, [sp, #36]	@ 0x24
 800a8e2:	f7ff ff27 	bl	800a734 <__exponent>
 800a8e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a8e8:	1813      	adds	r3, r2, r0
 800a8ea:	2a01      	cmp	r2, #1
 800a8ec:	4681      	mov	r9, r0
 800a8ee:	6123      	str	r3, [r4, #16]
 800a8f0:	dc02      	bgt.n	800a8f8 <_printf_float+0x150>
 800a8f2:	6822      	ldr	r2, [r4, #0]
 800a8f4:	07d2      	lsls	r2, r2, #31
 800a8f6:	d501      	bpl.n	800a8fc <_printf_float+0x154>
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	6123      	str	r3, [r4, #16]
 800a8fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a900:	2b00      	cmp	r3, #0
 800a902:	d0a2      	beq.n	800a84a <_printf_float+0xa2>
 800a904:	232d      	movs	r3, #45	@ 0x2d
 800a906:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a90a:	e79e      	b.n	800a84a <_printf_float+0xa2>
 800a90c:	9a06      	ldr	r2, [sp, #24]
 800a90e:	2a47      	cmp	r2, #71	@ 0x47
 800a910:	d1c2      	bne.n	800a898 <_printf_float+0xf0>
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1c0      	bne.n	800a898 <_printf_float+0xf0>
 800a916:	2301      	movs	r3, #1
 800a918:	e7bd      	b.n	800a896 <_printf_float+0xee>
 800a91a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a91e:	d9db      	bls.n	800a8d8 <_printf_float+0x130>
 800a920:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a924:	d118      	bne.n	800a958 <_printf_float+0x1b0>
 800a926:	2900      	cmp	r1, #0
 800a928:	6863      	ldr	r3, [r4, #4]
 800a92a:	dd0b      	ble.n	800a944 <_printf_float+0x19c>
 800a92c:	6121      	str	r1, [r4, #16]
 800a92e:	b913      	cbnz	r3, 800a936 <_printf_float+0x18e>
 800a930:	6822      	ldr	r2, [r4, #0]
 800a932:	07d0      	lsls	r0, r2, #31
 800a934:	d502      	bpl.n	800a93c <_printf_float+0x194>
 800a936:	3301      	adds	r3, #1
 800a938:	440b      	add	r3, r1
 800a93a:	6123      	str	r3, [r4, #16]
 800a93c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a93e:	f04f 0900 	mov.w	r9, #0
 800a942:	e7db      	b.n	800a8fc <_printf_float+0x154>
 800a944:	b913      	cbnz	r3, 800a94c <_printf_float+0x1a4>
 800a946:	6822      	ldr	r2, [r4, #0]
 800a948:	07d2      	lsls	r2, r2, #31
 800a94a:	d501      	bpl.n	800a950 <_printf_float+0x1a8>
 800a94c:	3302      	adds	r3, #2
 800a94e:	e7f4      	b.n	800a93a <_printf_float+0x192>
 800a950:	2301      	movs	r3, #1
 800a952:	e7f2      	b.n	800a93a <_printf_float+0x192>
 800a954:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a958:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a95a:	4299      	cmp	r1, r3
 800a95c:	db05      	blt.n	800a96a <_printf_float+0x1c2>
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	6121      	str	r1, [r4, #16]
 800a962:	07d8      	lsls	r0, r3, #31
 800a964:	d5ea      	bpl.n	800a93c <_printf_float+0x194>
 800a966:	1c4b      	adds	r3, r1, #1
 800a968:	e7e7      	b.n	800a93a <_printf_float+0x192>
 800a96a:	2900      	cmp	r1, #0
 800a96c:	bfd4      	ite	le
 800a96e:	f1c1 0202 	rsble	r2, r1, #2
 800a972:	2201      	movgt	r2, #1
 800a974:	4413      	add	r3, r2
 800a976:	e7e0      	b.n	800a93a <_printf_float+0x192>
 800a978:	6823      	ldr	r3, [r4, #0]
 800a97a:	055a      	lsls	r2, r3, #21
 800a97c:	d407      	bmi.n	800a98e <_printf_float+0x1e6>
 800a97e:	6923      	ldr	r3, [r4, #16]
 800a980:	4642      	mov	r2, r8
 800a982:	4631      	mov	r1, r6
 800a984:	4628      	mov	r0, r5
 800a986:	47b8      	blx	r7
 800a988:	3001      	adds	r0, #1
 800a98a:	d12b      	bne.n	800a9e4 <_printf_float+0x23c>
 800a98c:	e767      	b.n	800a85e <_printf_float+0xb6>
 800a98e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a992:	f240 80dd 	bls.w	800ab50 <_printf_float+0x3a8>
 800a996:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a99a:	2200      	movs	r2, #0
 800a99c:	2300      	movs	r3, #0
 800a99e:	f7f6 f893 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d033      	beq.n	800aa0e <_printf_float+0x266>
 800a9a6:	4a37      	ldr	r2, [pc, #220]	@ (800aa84 <_printf_float+0x2dc>)
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	4631      	mov	r1, r6
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	47b8      	blx	r7
 800a9b0:	3001      	adds	r0, #1
 800a9b2:	f43f af54 	beq.w	800a85e <_printf_float+0xb6>
 800a9b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a9ba:	4543      	cmp	r3, r8
 800a9bc:	db02      	blt.n	800a9c4 <_printf_float+0x21c>
 800a9be:	6823      	ldr	r3, [r4, #0]
 800a9c0:	07d8      	lsls	r0, r3, #31
 800a9c2:	d50f      	bpl.n	800a9e4 <_printf_float+0x23c>
 800a9c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9c8:	4631      	mov	r1, r6
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	47b8      	blx	r7
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	f43f af45 	beq.w	800a85e <_printf_float+0xb6>
 800a9d4:	f04f 0900 	mov.w	r9, #0
 800a9d8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a9dc:	f104 0a1a 	add.w	sl, r4, #26
 800a9e0:	45c8      	cmp	r8, r9
 800a9e2:	dc09      	bgt.n	800a9f8 <_printf_float+0x250>
 800a9e4:	6823      	ldr	r3, [r4, #0]
 800a9e6:	079b      	lsls	r3, r3, #30
 800a9e8:	f100 8103 	bmi.w	800abf2 <_printf_float+0x44a>
 800a9ec:	68e0      	ldr	r0, [r4, #12]
 800a9ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9f0:	4298      	cmp	r0, r3
 800a9f2:	bfb8      	it	lt
 800a9f4:	4618      	movlt	r0, r3
 800a9f6:	e734      	b.n	800a862 <_printf_float+0xba>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	4652      	mov	r2, sl
 800a9fc:	4631      	mov	r1, r6
 800a9fe:	4628      	mov	r0, r5
 800aa00:	47b8      	blx	r7
 800aa02:	3001      	adds	r0, #1
 800aa04:	f43f af2b 	beq.w	800a85e <_printf_float+0xb6>
 800aa08:	f109 0901 	add.w	r9, r9, #1
 800aa0c:	e7e8      	b.n	800a9e0 <_printf_float+0x238>
 800aa0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	dc39      	bgt.n	800aa88 <_printf_float+0x2e0>
 800aa14:	4a1b      	ldr	r2, [pc, #108]	@ (800aa84 <_printf_float+0x2dc>)
 800aa16:	2301      	movs	r3, #1
 800aa18:	4631      	mov	r1, r6
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	47b8      	blx	r7
 800aa1e:	3001      	adds	r0, #1
 800aa20:	f43f af1d 	beq.w	800a85e <_printf_float+0xb6>
 800aa24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aa28:	ea59 0303 	orrs.w	r3, r9, r3
 800aa2c:	d102      	bne.n	800aa34 <_printf_float+0x28c>
 800aa2e:	6823      	ldr	r3, [r4, #0]
 800aa30:	07d9      	lsls	r1, r3, #31
 800aa32:	d5d7      	bpl.n	800a9e4 <_printf_float+0x23c>
 800aa34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa38:	4631      	mov	r1, r6
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	47b8      	blx	r7
 800aa3e:	3001      	adds	r0, #1
 800aa40:	f43f af0d 	beq.w	800a85e <_printf_float+0xb6>
 800aa44:	f04f 0a00 	mov.w	sl, #0
 800aa48:	f104 0b1a 	add.w	fp, r4, #26
 800aa4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa4e:	425b      	negs	r3, r3
 800aa50:	4553      	cmp	r3, sl
 800aa52:	dc01      	bgt.n	800aa58 <_printf_float+0x2b0>
 800aa54:	464b      	mov	r3, r9
 800aa56:	e793      	b.n	800a980 <_printf_float+0x1d8>
 800aa58:	2301      	movs	r3, #1
 800aa5a:	465a      	mov	r2, fp
 800aa5c:	4631      	mov	r1, r6
 800aa5e:	4628      	mov	r0, r5
 800aa60:	47b8      	blx	r7
 800aa62:	3001      	adds	r0, #1
 800aa64:	f43f aefb 	beq.w	800a85e <_printf_float+0xb6>
 800aa68:	f10a 0a01 	add.w	sl, sl, #1
 800aa6c:	e7ee      	b.n	800aa4c <_printf_float+0x2a4>
 800aa6e:	bf00      	nop
 800aa70:	7fefffff 	.word	0x7fefffff
 800aa74:	0800ef30 	.word	0x0800ef30
 800aa78:	0800ef34 	.word	0x0800ef34
 800aa7c:	0800ef38 	.word	0x0800ef38
 800aa80:	0800ef3c 	.word	0x0800ef3c
 800aa84:	0800ef40 	.word	0x0800ef40
 800aa88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa8a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa8e:	4553      	cmp	r3, sl
 800aa90:	bfa8      	it	ge
 800aa92:	4653      	movge	r3, sl
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	4699      	mov	r9, r3
 800aa98:	dc36      	bgt.n	800ab08 <_printf_float+0x360>
 800aa9a:	f04f 0b00 	mov.w	fp, #0
 800aa9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aaa2:	f104 021a 	add.w	r2, r4, #26
 800aaa6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aaa8:	9306      	str	r3, [sp, #24]
 800aaaa:	eba3 0309 	sub.w	r3, r3, r9
 800aaae:	455b      	cmp	r3, fp
 800aab0:	dc31      	bgt.n	800ab16 <_printf_float+0x36e>
 800aab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aab4:	459a      	cmp	sl, r3
 800aab6:	dc3a      	bgt.n	800ab2e <_printf_float+0x386>
 800aab8:	6823      	ldr	r3, [r4, #0]
 800aaba:	07da      	lsls	r2, r3, #31
 800aabc:	d437      	bmi.n	800ab2e <_printf_float+0x386>
 800aabe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aac0:	ebaa 0903 	sub.w	r9, sl, r3
 800aac4:	9b06      	ldr	r3, [sp, #24]
 800aac6:	ebaa 0303 	sub.w	r3, sl, r3
 800aaca:	4599      	cmp	r9, r3
 800aacc:	bfa8      	it	ge
 800aace:	4699      	movge	r9, r3
 800aad0:	f1b9 0f00 	cmp.w	r9, #0
 800aad4:	dc33      	bgt.n	800ab3e <_printf_float+0x396>
 800aad6:	f04f 0800 	mov.w	r8, #0
 800aada:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aade:	f104 0b1a 	add.w	fp, r4, #26
 800aae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aae4:	ebaa 0303 	sub.w	r3, sl, r3
 800aae8:	eba3 0309 	sub.w	r3, r3, r9
 800aaec:	4543      	cmp	r3, r8
 800aaee:	f77f af79 	ble.w	800a9e4 <_printf_float+0x23c>
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	465a      	mov	r2, fp
 800aaf6:	4631      	mov	r1, r6
 800aaf8:	4628      	mov	r0, r5
 800aafa:	47b8      	blx	r7
 800aafc:	3001      	adds	r0, #1
 800aafe:	f43f aeae 	beq.w	800a85e <_printf_float+0xb6>
 800ab02:	f108 0801 	add.w	r8, r8, #1
 800ab06:	e7ec      	b.n	800aae2 <_printf_float+0x33a>
 800ab08:	4642      	mov	r2, r8
 800ab0a:	4631      	mov	r1, r6
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	47b8      	blx	r7
 800ab10:	3001      	adds	r0, #1
 800ab12:	d1c2      	bne.n	800aa9a <_printf_float+0x2f2>
 800ab14:	e6a3      	b.n	800a85e <_printf_float+0xb6>
 800ab16:	2301      	movs	r3, #1
 800ab18:	4631      	mov	r1, r6
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	9206      	str	r2, [sp, #24]
 800ab1e:	47b8      	blx	r7
 800ab20:	3001      	adds	r0, #1
 800ab22:	f43f ae9c 	beq.w	800a85e <_printf_float+0xb6>
 800ab26:	9a06      	ldr	r2, [sp, #24]
 800ab28:	f10b 0b01 	add.w	fp, fp, #1
 800ab2c:	e7bb      	b.n	800aaa6 <_printf_float+0x2fe>
 800ab2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab32:	4631      	mov	r1, r6
 800ab34:	4628      	mov	r0, r5
 800ab36:	47b8      	blx	r7
 800ab38:	3001      	adds	r0, #1
 800ab3a:	d1c0      	bne.n	800aabe <_printf_float+0x316>
 800ab3c:	e68f      	b.n	800a85e <_printf_float+0xb6>
 800ab3e:	9a06      	ldr	r2, [sp, #24]
 800ab40:	464b      	mov	r3, r9
 800ab42:	4442      	add	r2, r8
 800ab44:	4631      	mov	r1, r6
 800ab46:	4628      	mov	r0, r5
 800ab48:	47b8      	blx	r7
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	d1c3      	bne.n	800aad6 <_printf_float+0x32e>
 800ab4e:	e686      	b.n	800a85e <_printf_float+0xb6>
 800ab50:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ab54:	f1ba 0f01 	cmp.w	sl, #1
 800ab58:	dc01      	bgt.n	800ab5e <_printf_float+0x3b6>
 800ab5a:	07db      	lsls	r3, r3, #31
 800ab5c:	d536      	bpl.n	800abcc <_printf_float+0x424>
 800ab5e:	2301      	movs	r3, #1
 800ab60:	4642      	mov	r2, r8
 800ab62:	4631      	mov	r1, r6
 800ab64:	4628      	mov	r0, r5
 800ab66:	47b8      	blx	r7
 800ab68:	3001      	adds	r0, #1
 800ab6a:	f43f ae78 	beq.w	800a85e <_printf_float+0xb6>
 800ab6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab72:	4631      	mov	r1, r6
 800ab74:	4628      	mov	r0, r5
 800ab76:	47b8      	blx	r7
 800ab78:	3001      	adds	r0, #1
 800ab7a:	f43f ae70 	beq.w	800a85e <_printf_float+0xb6>
 800ab7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ab82:	2200      	movs	r2, #0
 800ab84:	2300      	movs	r3, #0
 800ab86:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab8a:	f7f5 ff9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab8e:	b9c0      	cbnz	r0, 800abc2 <_printf_float+0x41a>
 800ab90:	4653      	mov	r3, sl
 800ab92:	f108 0201 	add.w	r2, r8, #1
 800ab96:	4631      	mov	r1, r6
 800ab98:	4628      	mov	r0, r5
 800ab9a:	47b8      	blx	r7
 800ab9c:	3001      	adds	r0, #1
 800ab9e:	d10c      	bne.n	800abba <_printf_float+0x412>
 800aba0:	e65d      	b.n	800a85e <_printf_float+0xb6>
 800aba2:	2301      	movs	r3, #1
 800aba4:	465a      	mov	r2, fp
 800aba6:	4631      	mov	r1, r6
 800aba8:	4628      	mov	r0, r5
 800abaa:	47b8      	blx	r7
 800abac:	3001      	adds	r0, #1
 800abae:	f43f ae56 	beq.w	800a85e <_printf_float+0xb6>
 800abb2:	f108 0801 	add.w	r8, r8, #1
 800abb6:	45d0      	cmp	r8, sl
 800abb8:	dbf3      	blt.n	800aba2 <_printf_float+0x3fa>
 800abba:	464b      	mov	r3, r9
 800abbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800abc0:	e6df      	b.n	800a982 <_printf_float+0x1da>
 800abc2:	f04f 0800 	mov.w	r8, #0
 800abc6:	f104 0b1a 	add.w	fp, r4, #26
 800abca:	e7f4      	b.n	800abb6 <_printf_float+0x40e>
 800abcc:	2301      	movs	r3, #1
 800abce:	4642      	mov	r2, r8
 800abd0:	e7e1      	b.n	800ab96 <_printf_float+0x3ee>
 800abd2:	2301      	movs	r3, #1
 800abd4:	464a      	mov	r2, r9
 800abd6:	4631      	mov	r1, r6
 800abd8:	4628      	mov	r0, r5
 800abda:	47b8      	blx	r7
 800abdc:	3001      	adds	r0, #1
 800abde:	f43f ae3e 	beq.w	800a85e <_printf_float+0xb6>
 800abe2:	f108 0801 	add.w	r8, r8, #1
 800abe6:	68e3      	ldr	r3, [r4, #12]
 800abe8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800abea:	1a5b      	subs	r3, r3, r1
 800abec:	4543      	cmp	r3, r8
 800abee:	dcf0      	bgt.n	800abd2 <_printf_float+0x42a>
 800abf0:	e6fc      	b.n	800a9ec <_printf_float+0x244>
 800abf2:	f04f 0800 	mov.w	r8, #0
 800abf6:	f104 0919 	add.w	r9, r4, #25
 800abfa:	e7f4      	b.n	800abe6 <_printf_float+0x43e>

0800abfc <_printf_common>:
 800abfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac00:	4616      	mov	r6, r2
 800ac02:	4698      	mov	r8, r3
 800ac04:	688a      	ldr	r2, [r1, #8]
 800ac06:	690b      	ldr	r3, [r1, #16]
 800ac08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	bfb8      	it	lt
 800ac10:	4613      	movlt	r3, r2
 800ac12:	6033      	str	r3, [r6, #0]
 800ac14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac18:	4607      	mov	r7, r0
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	b10a      	cbz	r2, 800ac22 <_printf_common+0x26>
 800ac1e:	3301      	adds	r3, #1
 800ac20:	6033      	str	r3, [r6, #0]
 800ac22:	6823      	ldr	r3, [r4, #0]
 800ac24:	0699      	lsls	r1, r3, #26
 800ac26:	bf42      	ittt	mi
 800ac28:	6833      	ldrmi	r3, [r6, #0]
 800ac2a:	3302      	addmi	r3, #2
 800ac2c:	6033      	strmi	r3, [r6, #0]
 800ac2e:	6825      	ldr	r5, [r4, #0]
 800ac30:	f015 0506 	ands.w	r5, r5, #6
 800ac34:	d106      	bne.n	800ac44 <_printf_common+0x48>
 800ac36:	f104 0a19 	add.w	sl, r4, #25
 800ac3a:	68e3      	ldr	r3, [r4, #12]
 800ac3c:	6832      	ldr	r2, [r6, #0]
 800ac3e:	1a9b      	subs	r3, r3, r2
 800ac40:	42ab      	cmp	r3, r5
 800ac42:	dc26      	bgt.n	800ac92 <_printf_common+0x96>
 800ac44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac48:	6822      	ldr	r2, [r4, #0]
 800ac4a:	3b00      	subs	r3, #0
 800ac4c:	bf18      	it	ne
 800ac4e:	2301      	movne	r3, #1
 800ac50:	0692      	lsls	r2, r2, #26
 800ac52:	d42b      	bmi.n	800acac <_printf_common+0xb0>
 800ac54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac58:	4641      	mov	r1, r8
 800ac5a:	4638      	mov	r0, r7
 800ac5c:	47c8      	blx	r9
 800ac5e:	3001      	adds	r0, #1
 800ac60:	d01e      	beq.n	800aca0 <_printf_common+0xa4>
 800ac62:	6823      	ldr	r3, [r4, #0]
 800ac64:	6922      	ldr	r2, [r4, #16]
 800ac66:	f003 0306 	and.w	r3, r3, #6
 800ac6a:	2b04      	cmp	r3, #4
 800ac6c:	bf02      	ittt	eq
 800ac6e:	68e5      	ldreq	r5, [r4, #12]
 800ac70:	6833      	ldreq	r3, [r6, #0]
 800ac72:	1aed      	subeq	r5, r5, r3
 800ac74:	68a3      	ldr	r3, [r4, #8]
 800ac76:	bf0c      	ite	eq
 800ac78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac7c:	2500      	movne	r5, #0
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	bfc4      	itt	gt
 800ac82:	1a9b      	subgt	r3, r3, r2
 800ac84:	18ed      	addgt	r5, r5, r3
 800ac86:	2600      	movs	r6, #0
 800ac88:	341a      	adds	r4, #26
 800ac8a:	42b5      	cmp	r5, r6
 800ac8c:	d11a      	bne.n	800acc4 <_printf_common+0xc8>
 800ac8e:	2000      	movs	r0, #0
 800ac90:	e008      	b.n	800aca4 <_printf_common+0xa8>
 800ac92:	2301      	movs	r3, #1
 800ac94:	4652      	mov	r2, sl
 800ac96:	4641      	mov	r1, r8
 800ac98:	4638      	mov	r0, r7
 800ac9a:	47c8      	blx	r9
 800ac9c:	3001      	adds	r0, #1
 800ac9e:	d103      	bne.n	800aca8 <_printf_common+0xac>
 800aca0:	f04f 30ff 	mov.w	r0, #4294967295
 800aca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca8:	3501      	adds	r5, #1
 800acaa:	e7c6      	b.n	800ac3a <_printf_common+0x3e>
 800acac:	18e1      	adds	r1, r4, r3
 800acae:	1c5a      	adds	r2, r3, #1
 800acb0:	2030      	movs	r0, #48	@ 0x30
 800acb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800acb6:	4422      	add	r2, r4
 800acb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800acbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800acc0:	3302      	adds	r3, #2
 800acc2:	e7c7      	b.n	800ac54 <_printf_common+0x58>
 800acc4:	2301      	movs	r3, #1
 800acc6:	4622      	mov	r2, r4
 800acc8:	4641      	mov	r1, r8
 800acca:	4638      	mov	r0, r7
 800accc:	47c8      	blx	r9
 800acce:	3001      	adds	r0, #1
 800acd0:	d0e6      	beq.n	800aca0 <_printf_common+0xa4>
 800acd2:	3601      	adds	r6, #1
 800acd4:	e7d9      	b.n	800ac8a <_printf_common+0x8e>
	...

0800acd8 <_printf_i>:
 800acd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acdc:	7e0f      	ldrb	r7, [r1, #24]
 800acde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ace0:	2f78      	cmp	r7, #120	@ 0x78
 800ace2:	4691      	mov	r9, r2
 800ace4:	4680      	mov	r8, r0
 800ace6:	460c      	mov	r4, r1
 800ace8:	469a      	mov	sl, r3
 800acea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800acee:	d807      	bhi.n	800ad00 <_printf_i+0x28>
 800acf0:	2f62      	cmp	r7, #98	@ 0x62
 800acf2:	d80a      	bhi.n	800ad0a <_printf_i+0x32>
 800acf4:	2f00      	cmp	r7, #0
 800acf6:	f000 80d2 	beq.w	800ae9e <_printf_i+0x1c6>
 800acfa:	2f58      	cmp	r7, #88	@ 0x58
 800acfc:	f000 80b9 	beq.w	800ae72 <_printf_i+0x19a>
 800ad00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad08:	e03a      	b.n	800ad80 <_printf_i+0xa8>
 800ad0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad0e:	2b15      	cmp	r3, #21
 800ad10:	d8f6      	bhi.n	800ad00 <_printf_i+0x28>
 800ad12:	a101      	add	r1, pc, #4	@ (adr r1, 800ad18 <_printf_i+0x40>)
 800ad14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad18:	0800ad71 	.word	0x0800ad71
 800ad1c:	0800ad85 	.word	0x0800ad85
 800ad20:	0800ad01 	.word	0x0800ad01
 800ad24:	0800ad01 	.word	0x0800ad01
 800ad28:	0800ad01 	.word	0x0800ad01
 800ad2c:	0800ad01 	.word	0x0800ad01
 800ad30:	0800ad85 	.word	0x0800ad85
 800ad34:	0800ad01 	.word	0x0800ad01
 800ad38:	0800ad01 	.word	0x0800ad01
 800ad3c:	0800ad01 	.word	0x0800ad01
 800ad40:	0800ad01 	.word	0x0800ad01
 800ad44:	0800ae85 	.word	0x0800ae85
 800ad48:	0800adaf 	.word	0x0800adaf
 800ad4c:	0800ae3f 	.word	0x0800ae3f
 800ad50:	0800ad01 	.word	0x0800ad01
 800ad54:	0800ad01 	.word	0x0800ad01
 800ad58:	0800aea7 	.word	0x0800aea7
 800ad5c:	0800ad01 	.word	0x0800ad01
 800ad60:	0800adaf 	.word	0x0800adaf
 800ad64:	0800ad01 	.word	0x0800ad01
 800ad68:	0800ad01 	.word	0x0800ad01
 800ad6c:	0800ae47 	.word	0x0800ae47
 800ad70:	6833      	ldr	r3, [r6, #0]
 800ad72:	1d1a      	adds	r2, r3, #4
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	6032      	str	r2, [r6, #0]
 800ad78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad80:	2301      	movs	r3, #1
 800ad82:	e09d      	b.n	800aec0 <_printf_i+0x1e8>
 800ad84:	6833      	ldr	r3, [r6, #0]
 800ad86:	6820      	ldr	r0, [r4, #0]
 800ad88:	1d19      	adds	r1, r3, #4
 800ad8a:	6031      	str	r1, [r6, #0]
 800ad8c:	0606      	lsls	r6, r0, #24
 800ad8e:	d501      	bpl.n	800ad94 <_printf_i+0xbc>
 800ad90:	681d      	ldr	r5, [r3, #0]
 800ad92:	e003      	b.n	800ad9c <_printf_i+0xc4>
 800ad94:	0645      	lsls	r5, r0, #25
 800ad96:	d5fb      	bpl.n	800ad90 <_printf_i+0xb8>
 800ad98:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad9c:	2d00      	cmp	r5, #0
 800ad9e:	da03      	bge.n	800ada8 <_printf_i+0xd0>
 800ada0:	232d      	movs	r3, #45	@ 0x2d
 800ada2:	426d      	negs	r5, r5
 800ada4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ada8:	4859      	ldr	r0, [pc, #356]	@ (800af10 <_printf_i+0x238>)
 800adaa:	230a      	movs	r3, #10
 800adac:	e011      	b.n	800add2 <_printf_i+0xfa>
 800adae:	6821      	ldr	r1, [r4, #0]
 800adb0:	6833      	ldr	r3, [r6, #0]
 800adb2:	0608      	lsls	r0, r1, #24
 800adb4:	f853 5b04 	ldr.w	r5, [r3], #4
 800adb8:	d402      	bmi.n	800adc0 <_printf_i+0xe8>
 800adba:	0649      	lsls	r1, r1, #25
 800adbc:	bf48      	it	mi
 800adbe:	b2ad      	uxthmi	r5, r5
 800adc0:	2f6f      	cmp	r7, #111	@ 0x6f
 800adc2:	4853      	ldr	r0, [pc, #332]	@ (800af10 <_printf_i+0x238>)
 800adc4:	6033      	str	r3, [r6, #0]
 800adc6:	bf14      	ite	ne
 800adc8:	230a      	movne	r3, #10
 800adca:	2308      	moveq	r3, #8
 800adcc:	2100      	movs	r1, #0
 800adce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800add2:	6866      	ldr	r6, [r4, #4]
 800add4:	60a6      	str	r6, [r4, #8]
 800add6:	2e00      	cmp	r6, #0
 800add8:	bfa2      	ittt	ge
 800adda:	6821      	ldrge	r1, [r4, #0]
 800addc:	f021 0104 	bicge.w	r1, r1, #4
 800ade0:	6021      	strge	r1, [r4, #0]
 800ade2:	b90d      	cbnz	r5, 800ade8 <_printf_i+0x110>
 800ade4:	2e00      	cmp	r6, #0
 800ade6:	d04b      	beq.n	800ae80 <_printf_i+0x1a8>
 800ade8:	4616      	mov	r6, r2
 800adea:	fbb5 f1f3 	udiv	r1, r5, r3
 800adee:	fb03 5711 	mls	r7, r3, r1, r5
 800adf2:	5dc7      	ldrb	r7, [r0, r7]
 800adf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800adf8:	462f      	mov	r7, r5
 800adfa:	42bb      	cmp	r3, r7
 800adfc:	460d      	mov	r5, r1
 800adfe:	d9f4      	bls.n	800adea <_printf_i+0x112>
 800ae00:	2b08      	cmp	r3, #8
 800ae02:	d10b      	bne.n	800ae1c <_printf_i+0x144>
 800ae04:	6823      	ldr	r3, [r4, #0]
 800ae06:	07df      	lsls	r7, r3, #31
 800ae08:	d508      	bpl.n	800ae1c <_printf_i+0x144>
 800ae0a:	6923      	ldr	r3, [r4, #16]
 800ae0c:	6861      	ldr	r1, [r4, #4]
 800ae0e:	4299      	cmp	r1, r3
 800ae10:	bfde      	ittt	le
 800ae12:	2330      	movle	r3, #48	@ 0x30
 800ae14:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae18:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae1c:	1b92      	subs	r2, r2, r6
 800ae1e:	6122      	str	r2, [r4, #16]
 800ae20:	f8cd a000 	str.w	sl, [sp]
 800ae24:	464b      	mov	r3, r9
 800ae26:	aa03      	add	r2, sp, #12
 800ae28:	4621      	mov	r1, r4
 800ae2a:	4640      	mov	r0, r8
 800ae2c:	f7ff fee6 	bl	800abfc <_printf_common>
 800ae30:	3001      	adds	r0, #1
 800ae32:	d14a      	bne.n	800aeca <_printf_i+0x1f2>
 800ae34:	f04f 30ff 	mov.w	r0, #4294967295
 800ae38:	b004      	add	sp, #16
 800ae3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	f043 0320 	orr.w	r3, r3, #32
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	4833      	ldr	r0, [pc, #204]	@ (800af14 <_printf_i+0x23c>)
 800ae48:	2778      	movs	r7, #120	@ 0x78
 800ae4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae4e:	6823      	ldr	r3, [r4, #0]
 800ae50:	6831      	ldr	r1, [r6, #0]
 800ae52:	061f      	lsls	r7, r3, #24
 800ae54:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae58:	d402      	bmi.n	800ae60 <_printf_i+0x188>
 800ae5a:	065f      	lsls	r7, r3, #25
 800ae5c:	bf48      	it	mi
 800ae5e:	b2ad      	uxthmi	r5, r5
 800ae60:	6031      	str	r1, [r6, #0]
 800ae62:	07d9      	lsls	r1, r3, #31
 800ae64:	bf44      	itt	mi
 800ae66:	f043 0320 	orrmi.w	r3, r3, #32
 800ae6a:	6023      	strmi	r3, [r4, #0]
 800ae6c:	b11d      	cbz	r5, 800ae76 <_printf_i+0x19e>
 800ae6e:	2310      	movs	r3, #16
 800ae70:	e7ac      	b.n	800adcc <_printf_i+0xf4>
 800ae72:	4827      	ldr	r0, [pc, #156]	@ (800af10 <_printf_i+0x238>)
 800ae74:	e7e9      	b.n	800ae4a <_printf_i+0x172>
 800ae76:	6823      	ldr	r3, [r4, #0]
 800ae78:	f023 0320 	bic.w	r3, r3, #32
 800ae7c:	6023      	str	r3, [r4, #0]
 800ae7e:	e7f6      	b.n	800ae6e <_printf_i+0x196>
 800ae80:	4616      	mov	r6, r2
 800ae82:	e7bd      	b.n	800ae00 <_printf_i+0x128>
 800ae84:	6833      	ldr	r3, [r6, #0]
 800ae86:	6825      	ldr	r5, [r4, #0]
 800ae88:	6961      	ldr	r1, [r4, #20]
 800ae8a:	1d18      	adds	r0, r3, #4
 800ae8c:	6030      	str	r0, [r6, #0]
 800ae8e:	062e      	lsls	r6, r5, #24
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	d501      	bpl.n	800ae98 <_printf_i+0x1c0>
 800ae94:	6019      	str	r1, [r3, #0]
 800ae96:	e002      	b.n	800ae9e <_printf_i+0x1c6>
 800ae98:	0668      	lsls	r0, r5, #25
 800ae9a:	d5fb      	bpl.n	800ae94 <_printf_i+0x1bc>
 800ae9c:	8019      	strh	r1, [r3, #0]
 800ae9e:	2300      	movs	r3, #0
 800aea0:	6123      	str	r3, [r4, #16]
 800aea2:	4616      	mov	r6, r2
 800aea4:	e7bc      	b.n	800ae20 <_printf_i+0x148>
 800aea6:	6833      	ldr	r3, [r6, #0]
 800aea8:	1d1a      	adds	r2, r3, #4
 800aeaa:	6032      	str	r2, [r6, #0]
 800aeac:	681e      	ldr	r6, [r3, #0]
 800aeae:	6862      	ldr	r2, [r4, #4]
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	f7f5 f98c 	bl	80001d0 <memchr>
 800aeb8:	b108      	cbz	r0, 800aebe <_printf_i+0x1e6>
 800aeba:	1b80      	subs	r0, r0, r6
 800aebc:	6060      	str	r0, [r4, #4]
 800aebe:	6863      	ldr	r3, [r4, #4]
 800aec0:	6123      	str	r3, [r4, #16]
 800aec2:	2300      	movs	r3, #0
 800aec4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aec8:	e7aa      	b.n	800ae20 <_printf_i+0x148>
 800aeca:	6923      	ldr	r3, [r4, #16]
 800aecc:	4632      	mov	r2, r6
 800aece:	4649      	mov	r1, r9
 800aed0:	4640      	mov	r0, r8
 800aed2:	47d0      	blx	sl
 800aed4:	3001      	adds	r0, #1
 800aed6:	d0ad      	beq.n	800ae34 <_printf_i+0x15c>
 800aed8:	6823      	ldr	r3, [r4, #0]
 800aeda:	079b      	lsls	r3, r3, #30
 800aedc:	d413      	bmi.n	800af06 <_printf_i+0x22e>
 800aede:	68e0      	ldr	r0, [r4, #12]
 800aee0:	9b03      	ldr	r3, [sp, #12]
 800aee2:	4298      	cmp	r0, r3
 800aee4:	bfb8      	it	lt
 800aee6:	4618      	movlt	r0, r3
 800aee8:	e7a6      	b.n	800ae38 <_printf_i+0x160>
 800aeea:	2301      	movs	r3, #1
 800aeec:	4632      	mov	r2, r6
 800aeee:	4649      	mov	r1, r9
 800aef0:	4640      	mov	r0, r8
 800aef2:	47d0      	blx	sl
 800aef4:	3001      	adds	r0, #1
 800aef6:	d09d      	beq.n	800ae34 <_printf_i+0x15c>
 800aef8:	3501      	adds	r5, #1
 800aefa:	68e3      	ldr	r3, [r4, #12]
 800aefc:	9903      	ldr	r1, [sp, #12]
 800aefe:	1a5b      	subs	r3, r3, r1
 800af00:	42ab      	cmp	r3, r5
 800af02:	dcf2      	bgt.n	800aeea <_printf_i+0x212>
 800af04:	e7eb      	b.n	800aede <_printf_i+0x206>
 800af06:	2500      	movs	r5, #0
 800af08:	f104 0619 	add.w	r6, r4, #25
 800af0c:	e7f5      	b.n	800aefa <_printf_i+0x222>
 800af0e:	bf00      	nop
 800af10:	0800ef42 	.word	0x0800ef42
 800af14:	0800ef53 	.word	0x0800ef53

0800af18 <_scanf_float>:
 800af18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1c:	b087      	sub	sp, #28
 800af1e:	4617      	mov	r7, r2
 800af20:	9303      	str	r3, [sp, #12]
 800af22:	688b      	ldr	r3, [r1, #8]
 800af24:	1e5a      	subs	r2, r3, #1
 800af26:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800af2a:	bf81      	itttt	hi
 800af2c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800af30:	eb03 0b05 	addhi.w	fp, r3, r5
 800af34:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800af38:	608b      	strhi	r3, [r1, #8]
 800af3a:	680b      	ldr	r3, [r1, #0]
 800af3c:	460a      	mov	r2, r1
 800af3e:	f04f 0500 	mov.w	r5, #0
 800af42:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800af46:	f842 3b1c 	str.w	r3, [r2], #28
 800af4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800af4e:	4680      	mov	r8, r0
 800af50:	460c      	mov	r4, r1
 800af52:	bf98      	it	ls
 800af54:	f04f 0b00 	movls.w	fp, #0
 800af58:	9201      	str	r2, [sp, #4]
 800af5a:	4616      	mov	r6, r2
 800af5c:	46aa      	mov	sl, r5
 800af5e:	46a9      	mov	r9, r5
 800af60:	9502      	str	r5, [sp, #8]
 800af62:	68a2      	ldr	r2, [r4, #8]
 800af64:	b152      	cbz	r2, 800af7c <_scanf_float+0x64>
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	2b4e      	cmp	r3, #78	@ 0x4e
 800af6c:	d864      	bhi.n	800b038 <_scanf_float+0x120>
 800af6e:	2b40      	cmp	r3, #64	@ 0x40
 800af70:	d83c      	bhi.n	800afec <_scanf_float+0xd4>
 800af72:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800af76:	b2c8      	uxtb	r0, r1
 800af78:	280e      	cmp	r0, #14
 800af7a:	d93a      	bls.n	800aff2 <_scanf_float+0xda>
 800af7c:	f1b9 0f00 	cmp.w	r9, #0
 800af80:	d003      	beq.n	800af8a <_scanf_float+0x72>
 800af82:	6823      	ldr	r3, [r4, #0]
 800af84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af88:	6023      	str	r3, [r4, #0]
 800af8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af8e:	f1ba 0f01 	cmp.w	sl, #1
 800af92:	f200 8117 	bhi.w	800b1c4 <_scanf_float+0x2ac>
 800af96:	9b01      	ldr	r3, [sp, #4]
 800af98:	429e      	cmp	r6, r3
 800af9a:	f200 8108 	bhi.w	800b1ae <_scanf_float+0x296>
 800af9e:	2001      	movs	r0, #1
 800afa0:	b007      	add	sp, #28
 800afa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800afaa:	2a0d      	cmp	r2, #13
 800afac:	d8e6      	bhi.n	800af7c <_scanf_float+0x64>
 800afae:	a101      	add	r1, pc, #4	@ (adr r1, 800afb4 <_scanf_float+0x9c>)
 800afb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800afb4:	0800b0fb 	.word	0x0800b0fb
 800afb8:	0800af7d 	.word	0x0800af7d
 800afbc:	0800af7d 	.word	0x0800af7d
 800afc0:	0800af7d 	.word	0x0800af7d
 800afc4:	0800b15b 	.word	0x0800b15b
 800afc8:	0800b133 	.word	0x0800b133
 800afcc:	0800af7d 	.word	0x0800af7d
 800afd0:	0800af7d 	.word	0x0800af7d
 800afd4:	0800b109 	.word	0x0800b109
 800afd8:	0800af7d 	.word	0x0800af7d
 800afdc:	0800af7d 	.word	0x0800af7d
 800afe0:	0800af7d 	.word	0x0800af7d
 800afe4:	0800af7d 	.word	0x0800af7d
 800afe8:	0800b0c1 	.word	0x0800b0c1
 800afec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800aff0:	e7db      	b.n	800afaa <_scanf_float+0x92>
 800aff2:	290e      	cmp	r1, #14
 800aff4:	d8c2      	bhi.n	800af7c <_scanf_float+0x64>
 800aff6:	a001      	add	r0, pc, #4	@ (adr r0, 800affc <_scanf_float+0xe4>)
 800aff8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800affc:	0800b0b1 	.word	0x0800b0b1
 800b000:	0800af7d 	.word	0x0800af7d
 800b004:	0800b0b1 	.word	0x0800b0b1
 800b008:	0800b147 	.word	0x0800b147
 800b00c:	0800af7d 	.word	0x0800af7d
 800b010:	0800b059 	.word	0x0800b059
 800b014:	0800b097 	.word	0x0800b097
 800b018:	0800b097 	.word	0x0800b097
 800b01c:	0800b097 	.word	0x0800b097
 800b020:	0800b097 	.word	0x0800b097
 800b024:	0800b097 	.word	0x0800b097
 800b028:	0800b097 	.word	0x0800b097
 800b02c:	0800b097 	.word	0x0800b097
 800b030:	0800b097 	.word	0x0800b097
 800b034:	0800b097 	.word	0x0800b097
 800b038:	2b6e      	cmp	r3, #110	@ 0x6e
 800b03a:	d809      	bhi.n	800b050 <_scanf_float+0x138>
 800b03c:	2b60      	cmp	r3, #96	@ 0x60
 800b03e:	d8b2      	bhi.n	800afa6 <_scanf_float+0x8e>
 800b040:	2b54      	cmp	r3, #84	@ 0x54
 800b042:	d07b      	beq.n	800b13c <_scanf_float+0x224>
 800b044:	2b59      	cmp	r3, #89	@ 0x59
 800b046:	d199      	bne.n	800af7c <_scanf_float+0x64>
 800b048:	2d07      	cmp	r5, #7
 800b04a:	d197      	bne.n	800af7c <_scanf_float+0x64>
 800b04c:	2508      	movs	r5, #8
 800b04e:	e02c      	b.n	800b0aa <_scanf_float+0x192>
 800b050:	2b74      	cmp	r3, #116	@ 0x74
 800b052:	d073      	beq.n	800b13c <_scanf_float+0x224>
 800b054:	2b79      	cmp	r3, #121	@ 0x79
 800b056:	e7f6      	b.n	800b046 <_scanf_float+0x12e>
 800b058:	6821      	ldr	r1, [r4, #0]
 800b05a:	05c8      	lsls	r0, r1, #23
 800b05c:	d51b      	bpl.n	800b096 <_scanf_float+0x17e>
 800b05e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b062:	6021      	str	r1, [r4, #0]
 800b064:	f109 0901 	add.w	r9, r9, #1
 800b068:	f1bb 0f00 	cmp.w	fp, #0
 800b06c:	d003      	beq.n	800b076 <_scanf_float+0x15e>
 800b06e:	3201      	adds	r2, #1
 800b070:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b074:	60a2      	str	r2, [r4, #8]
 800b076:	68a3      	ldr	r3, [r4, #8]
 800b078:	3b01      	subs	r3, #1
 800b07a:	60a3      	str	r3, [r4, #8]
 800b07c:	6923      	ldr	r3, [r4, #16]
 800b07e:	3301      	adds	r3, #1
 800b080:	6123      	str	r3, [r4, #16]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	3b01      	subs	r3, #1
 800b086:	2b00      	cmp	r3, #0
 800b088:	607b      	str	r3, [r7, #4]
 800b08a:	f340 8087 	ble.w	800b19c <_scanf_float+0x284>
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	3301      	adds	r3, #1
 800b092:	603b      	str	r3, [r7, #0]
 800b094:	e765      	b.n	800af62 <_scanf_float+0x4a>
 800b096:	eb1a 0105 	adds.w	r1, sl, r5
 800b09a:	f47f af6f 	bne.w	800af7c <_scanf_float+0x64>
 800b09e:	6822      	ldr	r2, [r4, #0]
 800b0a0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b0a4:	6022      	str	r2, [r4, #0]
 800b0a6:	460d      	mov	r5, r1
 800b0a8:	468a      	mov	sl, r1
 800b0aa:	f806 3b01 	strb.w	r3, [r6], #1
 800b0ae:	e7e2      	b.n	800b076 <_scanf_float+0x15e>
 800b0b0:	6822      	ldr	r2, [r4, #0]
 800b0b2:	0610      	lsls	r0, r2, #24
 800b0b4:	f57f af62 	bpl.w	800af7c <_scanf_float+0x64>
 800b0b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b0bc:	6022      	str	r2, [r4, #0]
 800b0be:	e7f4      	b.n	800b0aa <_scanf_float+0x192>
 800b0c0:	f1ba 0f00 	cmp.w	sl, #0
 800b0c4:	d10e      	bne.n	800b0e4 <_scanf_float+0x1cc>
 800b0c6:	f1b9 0f00 	cmp.w	r9, #0
 800b0ca:	d10e      	bne.n	800b0ea <_scanf_float+0x1d2>
 800b0cc:	6822      	ldr	r2, [r4, #0]
 800b0ce:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b0d2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b0d6:	d108      	bne.n	800b0ea <_scanf_float+0x1d2>
 800b0d8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b0dc:	6022      	str	r2, [r4, #0]
 800b0de:	f04f 0a01 	mov.w	sl, #1
 800b0e2:	e7e2      	b.n	800b0aa <_scanf_float+0x192>
 800b0e4:	f1ba 0f02 	cmp.w	sl, #2
 800b0e8:	d055      	beq.n	800b196 <_scanf_float+0x27e>
 800b0ea:	2d01      	cmp	r5, #1
 800b0ec:	d002      	beq.n	800b0f4 <_scanf_float+0x1dc>
 800b0ee:	2d04      	cmp	r5, #4
 800b0f0:	f47f af44 	bne.w	800af7c <_scanf_float+0x64>
 800b0f4:	3501      	adds	r5, #1
 800b0f6:	b2ed      	uxtb	r5, r5
 800b0f8:	e7d7      	b.n	800b0aa <_scanf_float+0x192>
 800b0fa:	f1ba 0f01 	cmp.w	sl, #1
 800b0fe:	f47f af3d 	bne.w	800af7c <_scanf_float+0x64>
 800b102:	f04f 0a02 	mov.w	sl, #2
 800b106:	e7d0      	b.n	800b0aa <_scanf_float+0x192>
 800b108:	b97d      	cbnz	r5, 800b12a <_scanf_float+0x212>
 800b10a:	f1b9 0f00 	cmp.w	r9, #0
 800b10e:	f47f af38 	bne.w	800af82 <_scanf_float+0x6a>
 800b112:	6822      	ldr	r2, [r4, #0]
 800b114:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b118:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b11c:	f040 8108 	bne.w	800b330 <_scanf_float+0x418>
 800b120:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b124:	6022      	str	r2, [r4, #0]
 800b126:	2501      	movs	r5, #1
 800b128:	e7bf      	b.n	800b0aa <_scanf_float+0x192>
 800b12a:	2d03      	cmp	r5, #3
 800b12c:	d0e2      	beq.n	800b0f4 <_scanf_float+0x1dc>
 800b12e:	2d05      	cmp	r5, #5
 800b130:	e7de      	b.n	800b0f0 <_scanf_float+0x1d8>
 800b132:	2d02      	cmp	r5, #2
 800b134:	f47f af22 	bne.w	800af7c <_scanf_float+0x64>
 800b138:	2503      	movs	r5, #3
 800b13a:	e7b6      	b.n	800b0aa <_scanf_float+0x192>
 800b13c:	2d06      	cmp	r5, #6
 800b13e:	f47f af1d 	bne.w	800af7c <_scanf_float+0x64>
 800b142:	2507      	movs	r5, #7
 800b144:	e7b1      	b.n	800b0aa <_scanf_float+0x192>
 800b146:	6822      	ldr	r2, [r4, #0]
 800b148:	0591      	lsls	r1, r2, #22
 800b14a:	f57f af17 	bpl.w	800af7c <_scanf_float+0x64>
 800b14e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b152:	6022      	str	r2, [r4, #0]
 800b154:	f8cd 9008 	str.w	r9, [sp, #8]
 800b158:	e7a7      	b.n	800b0aa <_scanf_float+0x192>
 800b15a:	6822      	ldr	r2, [r4, #0]
 800b15c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b160:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b164:	d006      	beq.n	800b174 <_scanf_float+0x25c>
 800b166:	0550      	lsls	r0, r2, #21
 800b168:	f57f af08 	bpl.w	800af7c <_scanf_float+0x64>
 800b16c:	f1b9 0f00 	cmp.w	r9, #0
 800b170:	f000 80de 	beq.w	800b330 <_scanf_float+0x418>
 800b174:	0591      	lsls	r1, r2, #22
 800b176:	bf58      	it	pl
 800b178:	9902      	ldrpl	r1, [sp, #8]
 800b17a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b17e:	bf58      	it	pl
 800b180:	eba9 0101 	subpl.w	r1, r9, r1
 800b184:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b188:	bf58      	it	pl
 800b18a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b18e:	6022      	str	r2, [r4, #0]
 800b190:	f04f 0900 	mov.w	r9, #0
 800b194:	e789      	b.n	800b0aa <_scanf_float+0x192>
 800b196:	f04f 0a03 	mov.w	sl, #3
 800b19a:	e786      	b.n	800b0aa <_scanf_float+0x192>
 800b19c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	4798      	blx	r3
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	f43f aedb 	beq.w	800af62 <_scanf_float+0x4a>
 800b1ac:	e6e6      	b.n	800af7c <_scanf_float+0x64>
 800b1ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1b6:	463a      	mov	r2, r7
 800b1b8:	4640      	mov	r0, r8
 800b1ba:	4798      	blx	r3
 800b1bc:	6923      	ldr	r3, [r4, #16]
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	6123      	str	r3, [r4, #16]
 800b1c2:	e6e8      	b.n	800af96 <_scanf_float+0x7e>
 800b1c4:	1e6b      	subs	r3, r5, #1
 800b1c6:	2b06      	cmp	r3, #6
 800b1c8:	d824      	bhi.n	800b214 <_scanf_float+0x2fc>
 800b1ca:	2d02      	cmp	r5, #2
 800b1cc:	d836      	bhi.n	800b23c <_scanf_float+0x324>
 800b1ce:	9b01      	ldr	r3, [sp, #4]
 800b1d0:	429e      	cmp	r6, r3
 800b1d2:	f67f aee4 	bls.w	800af9e <_scanf_float+0x86>
 800b1d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1de:	463a      	mov	r2, r7
 800b1e0:	4640      	mov	r0, r8
 800b1e2:	4798      	blx	r3
 800b1e4:	6923      	ldr	r3, [r4, #16]
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	6123      	str	r3, [r4, #16]
 800b1ea:	e7f0      	b.n	800b1ce <_scanf_float+0x2b6>
 800b1ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1f0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b1f4:	463a      	mov	r2, r7
 800b1f6:	4640      	mov	r0, r8
 800b1f8:	4798      	blx	r3
 800b1fa:	6923      	ldr	r3, [r4, #16]
 800b1fc:	3b01      	subs	r3, #1
 800b1fe:	6123      	str	r3, [r4, #16]
 800b200:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b204:	fa5f fa8a 	uxtb.w	sl, sl
 800b208:	f1ba 0f02 	cmp.w	sl, #2
 800b20c:	d1ee      	bne.n	800b1ec <_scanf_float+0x2d4>
 800b20e:	3d03      	subs	r5, #3
 800b210:	b2ed      	uxtb	r5, r5
 800b212:	1b76      	subs	r6, r6, r5
 800b214:	6823      	ldr	r3, [r4, #0]
 800b216:	05da      	lsls	r2, r3, #23
 800b218:	d530      	bpl.n	800b27c <_scanf_float+0x364>
 800b21a:	055b      	lsls	r3, r3, #21
 800b21c:	d511      	bpl.n	800b242 <_scanf_float+0x32a>
 800b21e:	9b01      	ldr	r3, [sp, #4]
 800b220:	429e      	cmp	r6, r3
 800b222:	f67f aebc 	bls.w	800af9e <_scanf_float+0x86>
 800b226:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b22a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b22e:	463a      	mov	r2, r7
 800b230:	4640      	mov	r0, r8
 800b232:	4798      	blx	r3
 800b234:	6923      	ldr	r3, [r4, #16]
 800b236:	3b01      	subs	r3, #1
 800b238:	6123      	str	r3, [r4, #16]
 800b23a:	e7f0      	b.n	800b21e <_scanf_float+0x306>
 800b23c:	46aa      	mov	sl, r5
 800b23e:	46b3      	mov	fp, r6
 800b240:	e7de      	b.n	800b200 <_scanf_float+0x2e8>
 800b242:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b246:	6923      	ldr	r3, [r4, #16]
 800b248:	2965      	cmp	r1, #101	@ 0x65
 800b24a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b24e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b252:	6123      	str	r3, [r4, #16]
 800b254:	d00c      	beq.n	800b270 <_scanf_float+0x358>
 800b256:	2945      	cmp	r1, #69	@ 0x45
 800b258:	d00a      	beq.n	800b270 <_scanf_float+0x358>
 800b25a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b25e:	463a      	mov	r2, r7
 800b260:	4640      	mov	r0, r8
 800b262:	4798      	blx	r3
 800b264:	6923      	ldr	r3, [r4, #16]
 800b266:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b26a:	3b01      	subs	r3, #1
 800b26c:	1eb5      	subs	r5, r6, #2
 800b26e:	6123      	str	r3, [r4, #16]
 800b270:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b274:	463a      	mov	r2, r7
 800b276:	4640      	mov	r0, r8
 800b278:	4798      	blx	r3
 800b27a:	462e      	mov	r6, r5
 800b27c:	6822      	ldr	r2, [r4, #0]
 800b27e:	f012 0210 	ands.w	r2, r2, #16
 800b282:	d001      	beq.n	800b288 <_scanf_float+0x370>
 800b284:	2000      	movs	r0, #0
 800b286:	e68b      	b.n	800afa0 <_scanf_float+0x88>
 800b288:	7032      	strb	r2, [r6, #0]
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b294:	d11c      	bne.n	800b2d0 <_scanf_float+0x3b8>
 800b296:	9b02      	ldr	r3, [sp, #8]
 800b298:	454b      	cmp	r3, r9
 800b29a:	eba3 0209 	sub.w	r2, r3, r9
 800b29e:	d123      	bne.n	800b2e8 <_scanf_float+0x3d0>
 800b2a0:	9901      	ldr	r1, [sp, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	4640      	mov	r0, r8
 800b2a6:	f002 fd0b 	bl	800dcc0 <_strtod_r>
 800b2aa:	9b03      	ldr	r3, [sp, #12]
 800b2ac:	6821      	ldr	r1, [r4, #0]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f011 0f02 	tst.w	r1, #2
 800b2b4:	ec57 6b10 	vmov	r6, r7, d0
 800b2b8:	f103 0204 	add.w	r2, r3, #4
 800b2bc:	d01f      	beq.n	800b2fe <_scanf_float+0x3e6>
 800b2be:	9903      	ldr	r1, [sp, #12]
 800b2c0:	600a      	str	r2, [r1, #0]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	e9c3 6700 	strd	r6, r7, [r3]
 800b2c8:	68e3      	ldr	r3, [r4, #12]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	60e3      	str	r3, [r4, #12]
 800b2ce:	e7d9      	b.n	800b284 <_scanf_float+0x36c>
 800b2d0:	9b04      	ldr	r3, [sp, #16]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d0e4      	beq.n	800b2a0 <_scanf_float+0x388>
 800b2d6:	9905      	ldr	r1, [sp, #20]
 800b2d8:	230a      	movs	r3, #10
 800b2da:	3101      	adds	r1, #1
 800b2dc:	4640      	mov	r0, r8
 800b2de:	f002 fd6f 	bl	800ddc0 <_strtol_r>
 800b2e2:	9b04      	ldr	r3, [sp, #16]
 800b2e4:	9e05      	ldr	r6, [sp, #20]
 800b2e6:	1ac2      	subs	r2, r0, r3
 800b2e8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b2ec:	429e      	cmp	r6, r3
 800b2ee:	bf28      	it	cs
 800b2f0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b2f4:	4910      	ldr	r1, [pc, #64]	@ (800b338 <_scanf_float+0x420>)
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f000 f954 	bl	800b5a4 <siprintf>
 800b2fc:	e7d0      	b.n	800b2a0 <_scanf_float+0x388>
 800b2fe:	f011 0f04 	tst.w	r1, #4
 800b302:	9903      	ldr	r1, [sp, #12]
 800b304:	600a      	str	r2, [r1, #0]
 800b306:	d1dc      	bne.n	800b2c2 <_scanf_float+0x3aa>
 800b308:	681d      	ldr	r5, [r3, #0]
 800b30a:	4632      	mov	r2, r6
 800b30c:	463b      	mov	r3, r7
 800b30e:	4630      	mov	r0, r6
 800b310:	4639      	mov	r1, r7
 800b312:	f7f5 fc0b 	bl	8000b2c <__aeabi_dcmpun>
 800b316:	b128      	cbz	r0, 800b324 <_scanf_float+0x40c>
 800b318:	4808      	ldr	r0, [pc, #32]	@ (800b33c <_scanf_float+0x424>)
 800b31a:	f000 fac9 	bl	800b8b0 <nanf>
 800b31e:	ed85 0a00 	vstr	s0, [r5]
 800b322:	e7d1      	b.n	800b2c8 <_scanf_float+0x3b0>
 800b324:	4630      	mov	r0, r6
 800b326:	4639      	mov	r1, r7
 800b328:	f7f5 fc5e 	bl	8000be8 <__aeabi_d2f>
 800b32c:	6028      	str	r0, [r5, #0]
 800b32e:	e7cb      	b.n	800b2c8 <_scanf_float+0x3b0>
 800b330:	f04f 0900 	mov.w	r9, #0
 800b334:	e629      	b.n	800af8a <_scanf_float+0x72>
 800b336:	bf00      	nop
 800b338:	0800ef64 	.word	0x0800ef64
 800b33c:	0800f2fd 	.word	0x0800f2fd

0800b340 <std>:
 800b340:	2300      	movs	r3, #0
 800b342:	b510      	push	{r4, lr}
 800b344:	4604      	mov	r4, r0
 800b346:	e9c0 3300 	strd	r3, r3, [r0]
 800b34a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b34e:	6083      	str	r3, [r0, #8]
 800b350:	8181      	strh	r1, [r0, #12]
 800b352:	6643      	str	r3, [r0, #100]	@ 0x64
 800b354:	81c2      	strh	r2, [r0, #14]
 800b356:	6183      	str	r3, [r0, #24]
 800b358:	4619      	mov	r1, r3
 800b35a:	2208      	movs	r2, #8
 800b35c:	305c      	adds	r0, #92	@ 0x5c
 800b35e:	f000 fa19 	bl	800b794 <memset>
 800b362:	4b0d      	ldr	r3, [pc, #52]	@ (800b398 <std+0x58>)
 800b364:	6263      	str	r3, [r4, #36]	@ 0x24
 800b366:	4b0d      	ldr	r3, [pc, #52]	@ (800b39c <std+0x5c>)
 800b368:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b36a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a0 <std+0x60>)
 800b36c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b36e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a4 <std+0x64>)
 800b370:	6323      	str	r3, [r4, #48]	@ 0x30
 800b372:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a8 <std+0x68>)
 800b374:	6224      	str	r4, [r4, #32]
 800b376:	429c      	cmp	r4, r3
 800b378:	d006      	beq.n	800b388 <std+0x48>
 800b37a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b37e:	4294      	cmp	r4, r2
 800b380:	d002      	beq.n	800b388 <std+0x48>
 800b382:	33d0      	adds	r3, #208	@ 0xd0
 800b384:	429c      	cmp	r4, r3
 800b386:	d105      	bne.n	800b394 <std+0x54>
 800b388:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b390:	f000 ba7c 	b.w	800b88c <__retarget_lock_init_recursive>
 800b394:	bd10      	pop	{r4, pc}
 800b396:	bf00      	nop
 800b398:	0800b5e5 	.word	0x0800b5e5
 800b39c:	0800b607 	.word	0x0800b607
 800b3a0:	0800b63f 	.word	0x0800b63f
 800b3a4:	0800b663 	.word	0x0800b663
 800b3a8:	20000b54 	.word	0x20000b54

0800b3ac <stdio_exit_handler>:
 800b3ac:	4a02      	ldr	r2, [pc, #8]	@ (800b3b8 <stdio_exit_handler+0xc>)
 800b3ae:	4903      	ldr	r1, [pc, #12]	@ (800b3bc <stdio_exit_handler+0x10>)
 800b3b0:	4803      	ldr	r0, [pc, #12]	@ (800b3c0 <stdio_exit_handler+0x14>)
 800b3b2:	f000 b869 	b.w	800b488 <_fwalk_sglue>
 800b3b6:	bf00      	nop
 800b3b8:	20000044 	.word	0x20000044
 800b3bc:	0800e401 	.word	0x0800e401
 800b3c0:	20000054 	.word	0x20000054

0800b3c4 <cleanup_stdio>:
 800b3c4:	6841      	ldr	r1, [r0, #4]
 800b3c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b3f8 <cleanup_stdio+0x34>)
 800b3c8:	4299      	cmp	r1, r3
 800b3ca:	b510      	push	{r4, lr}
 800b3cc:	4604      	mov	r4, r0
 800b3ce:	d001      	beq.n	800b3d4 <cleanup_stdio+0x10>
 800b3d0:	f003 f816 	bl	800e400 <_fflush_r>
 800b3d4:	68a1      	ldr	r1, [r4, #8]
 800b3d6:	4b09      	ldr	r3, [pc, #36]	@ (800b3fc <cleanup_stdio+0x38>)
 800b3d8:	4299      	cmp	r1, r3
 800b3da:	d002      	beq.n	800b3e2 <cleanup_stdio+0x1e>
 800b3dc:	4620      	mov	r0, r4
 800b3de:	f003 f80f 	bl	800e400 <_fflush_r>
 800b3e2:	68e1      	ldr	r1, [r4, #12]
 800b3e4:	4b06      	ldr	r3, [pc, #24]	@ (800b400 <cleanup_stdio+0x3c>)
 800b3e6:	4299      	cmp	r1, r3
 800b3e8:	d004      	beq.n	800b3f4 <cleanup_stdio+0x30>
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3f0:	f003 b806 	b.w	800e400 <_fflush_r>
 800b3f4:	bd10      	pop	{r4, pc}
 800b3f6:	bf00      	nop
 800b3f8:	20000b54 	.word	0x20000b54
 800b3fc:	20000bbc 	.word	0x20000bbc
 800b400:	20000c24 	.word	0x20000c24

0800b404 <global_stdio_init.part.0>:
 800b404:	b510      	push	{r4, lr}
 800b406:	4b0b      	ldr	r3, [pc, #44]	@ (800b434 <global_stdio_init.part.0+0x30>)
 800b408:	4c0b      	ldr	r4, [pc, #44]	@ (800b438 <global_stdio_init.part.0+0x34>)
 800b40a:	4a0c      	ldr	r2, [pc, #48]	@ (800b43c <global_stdio_init.part.0+0x38>)
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	4620      	mov	r0, r4
 800b410:	2200      	movs	r2, #0
 800b412:	2104      	movs	r1, #4
 800b414:	f7ff ff94 	bl	800b340 <std>
 800b418:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b41c:	2201      	movs	r2, #1
 800b41e:	2109      	movs	r1, #9
 800b420:	f7ff ff8e 	bl	800b340 <std>
 800b424:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b428:	2202      	movs	r2, #2
 800b42a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b42e:	2112      	movs	r1, #18
 800b430:	f7ff bf86 	b.w	800b340 <std>
 800b434:	20000c8c 	.word	0x20000c8c
 800b438:	20000b54 	.word	0x20000b54
 800b43c:	0800b3ad 	.word	0x0800b3ad

0800b440 <__sfp_lock_acquire>:
 800b440:	4801      	ldr	r0, [pc, #4]	@ (800b448 <__sfp_lock_acquire+0x8>)
 800b442:	f000 ba24 	b.w	800b88e <__retarget_lock_acquire_recursive>
 800b446:	bf00      	nop
 800b448:	20000c95 	.word	0x20000c95

0800b44c <__sfp_lock_release>:
 800b44c:	4801      	ldr	r0, [pc, #4]	@ (800b454 <__sfp_lock_release+0x8>)
 800b44e:	f000 ba1f 	b.w	800b890 <__retarget_lock_release_recursive>
 800b452:	bf00      	nop
 800b454:	20000c95 	.word	0x20000c95

0800b458 <__sinit>:
 800b458:	b510      	push	{r4, lr}
 800b45a:	4604      	mov	r4, r0
 800b45c:	f7ff fff0 	bl	800b440 <__sfp_lock_acquire>
 800b460:	6a23      	ldr	r3, [r4, #32]
 800b462:	b11b      	cbz	r3, 800b46c <__sinit+0x14>
 800b464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b468:	f7ff bff0 	b.w	800b44c <__sfp_lock_release>
 800b46c:	4b04      	ldr	r3, [pc, #16]	@ (800b480 <__sinit+0x28>)
 800b46e:	6223      	str	r3, [r4, #32]
 800b470:	4b04      	ldr	r3, [pc, #16]	@ (800b484 <__sinit+0x2c>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1f5      	bne.n	800b464 <__sinit+0xc>
 800b478:	f7ff ffc4 	bl	800b404 <global_stdio_init.part.0>
 800b47c:	e7f2      	b.n	800b464 <__sinit+0xc>
 800b47e:	bf00      	nop
 800b480:	0800b3c5 	.word	0x0800b3c5
 800b484:	20000c8c 	.word	0x20000c8c

0800b488 <_fwalk_sglue>:
 800b488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b48c:	4607      	mov	r7, r0
 800b48e:	4688      	mov	r8, r1
 800b490:	4614      	mov	r4, r2
 800b492:	2600      	movs	r6, #0
 800b494:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b498:	f1b9 0901 	subs.w	r9, r9, #1
 800b49c:	d505      	bpl.n	800b4aa <_fwalk_sglue+0x22>
 800b49e:	6824      	ldr	r4, [r4, #0]
 800b4a0:	2c00      	cmp	r4, #0
 800b4a2:	d1f7      	bne.n	800b494 <_fwalk_sglue+0xc>
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4aa:	89ab      	ldrh	r3, [r5, #12]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d907      	bls.n	800b4c0 <_fwalk_sglue+0x38>
 800b4b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	d003      	beq.n	800b4c0 <_fwalk_sglue+0x38>
 800b4b8:	4629      	mov	r1, r5
 800b4ba:	4638      	mov	r0, r7
 800b4bc:	47c0      	blx	r8
 800b4be:	4306      	orrs	r6, r0
 800b4c0:	3568      	adds	r5, #104	@ 0x68
 800b4c2:	e7e9      	b.n	800b498 <_fwalk_sglue+0x10>

0800b4c4 <iprintf>:
 800b4c4:	b40f      	push	{r0, r1, r2, r3}
 800b4c6:	b507      	push	{r0, r1, r2, lr}
 800b4c8:	4906      	ldr	r1, [pc, #24]	@ (800b4e4 <iprintf+0x20>)
 800b4ca:	ab04      	add	r3, sp, #16
 800b4cc:	6808      	ldr	r0, [r1, #0]
 800b4ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4d2:	6881      	ldr	r1, [r0, #8]
 800b4d4:	9301      	str	r3, [sp, #4]
 800b4d6:	f002 fdf7 	bl	800e0c8 <_vfiprintf_r>
 800b4da:	b003      	add	sp, #12
 800b4dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4e0:	b004      	add	sp, #16
 800b4e2:	4770      	bx	lr
 800b4e4:	20000050 	.word	0x20000050

0800b4e8 <_puts_r>:
 800b4e8:	6a03      	ldr	r3, [r0, #32]
 800b4ea:	b570      	push	{r4, r5, r6, lr}
 800b4ec:	6884      	ldr	r4, [r0, #8]
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	460e      	mov	r6, r1
 800b4f2:	b90b      	cbnz	r3, 800b4f8 <_puts_r+0x10>
 800b4f4:	f7ff ffb0 	bl	800b458 <__sinit>
 800b4f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4fa:	07db      	lsls	r3, r3, #31
 800b4fc:	d405      	bmi.n	800b50a <_puts_r+0x22>
 800b4fe:	89a3      	ldrh	r3, [r4, #12]
 800b500:	0598      	lsls	r0, r3, #22
 800b502:	d402      	bmi.n	800b50a <_puts_r+0x22>
 800b504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b506:	f000 f9c2 	bl	800b88e <__retarget_lock_acquire_recursive>
 800b50a:	89a3      	ldrh	r3, [r4, #12]
 800b50c:	0719      	lsls	r1, r3, #28
 800b50e:	d502      	bpl.n	800b516 <_puts_r+0x2e>
 800b510:	6923      	ldr	r3, [r4, #16]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d135      	bne.n	800b582 <_puts_r+0x9a>
 800b516:	4621      	mov	r1, r4
 800b518:	4628      	mov	r0, r5
 800b51a:	f000 f8e5 	bl	800b6e8 <__swsetup_r>
 800b51e:	b380      	cbz	r0, 800b582 <_puts_r+0x9a>
 800b520:	f04f 35ff 	mov.w	r5, #4294967295
 800b524:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b526:	07da      	lsls	r2, r3, #31
 800b528:	d405      	bmi.n	800b536 <_puts_r+0x4e>
 800b52a:	89a3      	ldrh	r3, [r4, #12]
 800b52c:	059b      	lsls	r3, r3, #22
 800b52e:	d402      	bmi.n	800b536 <_puts_r+0x4e>
 800b530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b532:	f000 f9ad 	bl	800b890 <__retarget_lock_release_recursive>
 800b536:	4628      	mov	r0, r5
 800b538:	bd70      	pop	{r4, r5, r6, pc}
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	da04      	bge.n	800b548 <_puts_r+0x60>
 800b53e:	69a2      	ldr	r2, [r4, #24]
 800b540:	429a      	cmp	r2, r3
 800b542:	dc17      	bgt.n	800b574 <_puts_r+0x8c>
 800b544:	290a      	cmp	r1, #10
 800b546:	d015      	beq.n	800b574 <_puts_r+0x8c>
 800b548:	6823      	ldr	r3, [r4, #0]
 800b54a:	1c5a      	adds	r2, r3, #1
 800b54c:	6022      	str	r2, [r4, #0]
 800b54e:	7019      	strb	r1, [r3, #0]
 800b550:	68a3      	ldr	r3, [r4, #8]
 800b552:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b556:	3b01      	subs	r3, #1
 800b558:	60a3      	str	r3, [r4, #8]
 800b55a:	2900      	cmp	r1, #0
 800b55c:	d1ed      	bne.n	800b53a <_puts_r+0x52>
 800b55e:	2b00      	cmp	r3, #0
 800b560:	da11      	bge.n	800b586 <_puts_r+0x9e>
 800b562:	4622      	mov	r2, r4
 800b564:	210a      	movs	r1, #10
 800b566:	4628      	mov	r0, r5
 800b568:	f000 f87f 	bl	800b66a <__swbuf_r>
 800b56c:	3001      	adds	r0, #1
 800b56e:	d0d7      	beq.n	800b520 <_puts_r+0x38>
 800b570:	250a      	movs	r5, #10
 800b572:	e7d7      	b.n	800b524 <_puts_r+0x3c>
 800b574:	4622      	mov	r2, r4
 800b576:	4628      	mov	r0, r5
 800b578:	f000 f877 	bl	800b66a <__swbuf_r>
 800b57c:	3001      	adds	r0, #1
 800b57e:	d1e7      	bne.n	800b550 <_puts_r+0x68>
 800b580:	e7ce      	b.n	800b520 <_puts_r+0x38>
 800b582:	3e01      	subs	r6, #1
 800b584:	e7e4      	b.n	800b550 <_puts_r+0x68>
 800b586:	6823      	ldr	r3, [r4, #0]
 800b588:	1c5a      	adds	r2, r3, #1
 800b58a:	6022      	str	r2, [r4, #0]
 800b58c:	220a      	movs	r2, #10
 800b58e:	701a      	strb	r2, [r3, #0]
 800b590:	e7ee      	b.n	800b570 <_puts_r+0x88>
	...

0800b594 <puts>:
 800b594:	4b02      	ldr	r3, [pc, #8]	@ (800b5a0 <puts+0xc>)
 800b596:	4601      	mov	r1, r0
 800b598:	6818      	ldr	r0, [r3, #0]
 800b59a:	f7ff bfa5 	b.w	800b4e8 <_puts_r>
 800b59e:	bf00      	nop
 800b5a0:	20000050 	.word	0x20000050

0800b5a4 <siprintf>:
 800b5a4:	b40e      	push	{r1, r2, r3}
 800b5a6:	b500      	push	{lr}
 800b5a8:	b09c      	sub	sp, #112	@ 0x70
 800b5aa:	ab1d      	add	r3, sp, #116	@ 0x74
 800b5ac:	9002      	str	r0, [sp, #8]
 800b5ae:	9006      	str	r0, [sp, #24]
 800b5b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b5b4:	4809      	ldr	r0, [pc, #36]	@ (800b5dc <siprintf+0x38>)
 800b5b6:	9107      	str	r1, [sp, #28]
 800b5b8:	9104      	str	r1, [sp, #16]
 800b5ba:	4909      	ldr	r1, [pc, #36]	@ (800b5e0 <siprintf+0x3c>)
 800b5bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5c0:	9105      	str	r1, [sp, #20]
 800b5c2:	6800      	ldr	r0, [r0, #0]
 800b5c4:	9301      	str	r3, [sp, #4]
 800b5c6:	a902      	add	r1, sp, #8
 800b5c8:	f002 fc58 	bl	800de7c <_svfiprintf_r>
 800b5cc:	9b02      	ldr	r3, [sp, #8]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	701a      	strb	r2, [r3, #0]
 800b5d2:	b01c      	add	sp, #112	@ 0x70
 800b5d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5d8:	b003      	add	sp, #12
 800b5da:	4770      	bx	lr
 800b5dc:	20000050 	.word	0x20000050
 800b5e0:	ffff0208 	.word	0xffff0208

0800b5e4 <__sread>:
 800b5e4:	b510      	push	{r4, lr}
 800b5e6:	460c      	mov	r4, r1
 800b5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ec:	f000 f900 	bl	800b7f0 <_read_r>
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	bfab      	itete	ge
 800b5f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b5f6:	89a3      	ldrhlt	r3, [r4, #12]
 800b5f8:	181b      	addge	r3, r3, r0
 800b5fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b5fe:	bfac      	ite	ge
 800b600:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b602:	81a3      	strhlt	r3, [r4, #12]
 800b604:	bd10      	pop	{r4, pc}

0800b606 <__swrite>:
 800b606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b60a:	461f      	mov	r7, r3
 800b60c:	898b      	ldrh	r3, [r1, #12]
 800b60e:	05db      	lsls	r3, r3, #23
 800b610:	4605      	mov	r5, r0
 800b612:	460c      	mov	r4, r1
 800b614:	4616      	mov	r6, r2
 800b616:	d505      	bpl.n	800b624 <__swrite+0x1e>
 800b618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b61c:	2302      	movs	r3, #2
 800b61e:	2200      	movs	r2, #0
 800b620:	f000 f8d4 	bl	800b7cc <_lseek_r>
 800b624:	89a3      	ldrh	r3, [r4, #12]
 800b626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b62a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b62e:	81a3      	strh	r3, [r4, #12]
 800b630:	4632      	mov	r2, r6
 800b632:	463b      	mov	r3, r7
 800b634:	4628      	mov	r0, r5
 800b636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b63a:	f000 b8eb 	b.w	800b814 <_write_r>

0800b63e <__sseek>:
 800b63e:	b510      	push	{r4, lr}
 800b640:	460c      	mov	r4, r1
 800b642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b646:	f000 f8c1 	bl	800b7cc <_lseek_r>
 800b64a:	1c43      	adds	r3, r0, #1
 800b64c:	89a3      	ldrh	r3, [r4, #12]
 800b64e:	bf15      	itete	ne
 800b650:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b652:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b656:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b65a:	81a3      	strheq	r3, [r4, #12]
 800b65c:	bf18      	it	ne
 800b65e:	81a3      	strhne	r3, [r4, #12]
 800b660:	bd10      	pop	{r4, pc}

0800b662 <__sclose>:
 800b662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b666:	f000 b8a1 	b.w	800b7ac <_close_r>

0800b66a <__swbuf_r>:
 800b66a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b66c:	460e      	mov	r6, r1
 800b66e:	4614      	mov	r4, r2
 800b670:	4605      	mov	r5, r0
 800b672:	b118      	cbz	r0, 800b67c <__swbuf_r+0x12>
 800b674:	6a03      	ldr	r3, [r0, #32]
 800b676:	b90b      	cbnz	r3, 800b67c <__swbuf_r+0x12>
 800b678:	f7ff feee 	bl	800b458 <__sinit>
 800b67c:	69a3      	ldr	r3, [r4, #24]
 800b67e:	60a3      	str	r3, [r4, #8]
 800b680:	89a3      	ldrh	r3, [r4, #12]
 800b682:	071a      	lsls	r2, r3, #28
 800b684:	d501      	bpl.n	800b68a <__swbuf_r+0x20>
 800b686:	6923      	ldr	r3, [r4, #16]
 800b688:	b943      	cbnz	r3, 800b69c <__swbuf_r+0x32>
 800b68a:	4621      	mov	r1, r4
 800b68c:	4628      	mov	r0, r5
 800b68e:	f000 f82b 	bl	800b6e8 <__swsetup_r>
 800b692:	b118      	cbz	r0, 800b69c <__swbuf_r+0x32>
 800b694:	f04f 37ff 	mov.w	r7, #4294967295
 800b698:	4638      	mov	r0, r7
 800b69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b69c:	6823      	ldr	r3, [r4, #0]
 800b69e:	6922      	ldr	r2, [r4, #16]
 800b6a0:	1a98      	subs	r0, r3, r2
 800b6a2:	6963      	ldr	r3, [r4, #20]
 800b6a4:	b2f6      	uxtb	r6, r6
 800b6a6:	4283      	cmp	r3, r0
 800b6a8:	4637      	mov	r7, r6
 800b6aa:	dc05      	bgt.n	800b6b8 <__swbuf_r+0x4e>
 800b6ac:	4621      	mov	r1, r4
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f002 fea6 	bl	800e400 <_fflush_r>
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	d1ed      	bne.n	800b694 <__swbuf_r+0x2a>
 800b6b8:	68a3      	ldr	r3, [r4, #8]
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	60a3      	str	r3, [r4, #8]
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	1c5a      	adds	r2, r3, #1
 800b6c2:	6022      	str	r2, [r4, #0]
 800b6c4:	701e      	strb	r6, [r3, #0]
 800b6c6:	6962      	ldr	r2, [r4, #20]
 800b6c8:	1c43      	adds	r3, r0, #1
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d004      	beq.n	800b6d8 <__swbuf_r+0x6e>
 800b6ce:	89a3      	ldrh	r3, [r4, #12]
 800b6d0:	07db      	lsls	r3, r3, #31
 800b6d2:	d5e1      	bpl.n	800b698 <__swbuf_r+0x2e>
 800b6d4:	2e0a      	cmp	r6, #10
 800b6d6:	d1df      	bne.n	800b698 <__swbuf_r+0x2e>
 800b6d8:	4621      	mov	r1, r4
 800b6da:	4628      	mov	r0, r5
 800b6dc:	f002 fe90 	bl	800e400 <_fflush_r>
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d0d9      	beq.n	800b698 <__swbuf_r+0x2e>
 800b6e4:	e7d6      	b.n	800b694 <__swbuf_r+0x2a>
	...

0800b6e8 <__swsetup_r>:
 800b6e8:	b538      	push	{r3, r4, r5, lr}
 800b6ea:	4b29      	ldr	r3, [pc, #164]	@ (800b790 <__swsetup_r+0xa8>)
 800b6ec:	4605      	mov	r5, r0
 800b6ee:	6818      	ldr	r0, [r3, #0]
 800b6f0:	460c      	mov	r4, r1
 800b6f2:	b118      	cbz	r0, 800b6fc <__swsetup_r+0x14>
 800b6f4:	6a03      	ldr	r3, [r0, #32]
 800b6f6:	b90b      	cbnz	r3, 800b6fc <__swsetup_r+0x14>
 800b6f8:	f7ff feae 	bl	800b458 <__sinit>
 800b6fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b700:	0719      	lsls	r1, r3, #28
 800b702:	d422      	bmi.n	800b74a <__swsetup_r+0x62>
 800b704:	06da      	lsls	r2, r3, #27
 800b706:	d407      	bmi.n	800b718 <__swsetup_r+0x30>
 800b708:	2209      	movs	r2, #9
 800b70a:	602a      	str	r2, [r5, #0]
 800b70c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b710:	81a3      	strh	r3, [r4, #12]
 800b712:	f04f 30ff 	mov.w	r0, #4294967295
 800b716:	e033      	b.n	800b780 <__swsetup_r+0x98>
 800b718:	0758      	lsls	r0, r3, #29
 800b71a:	d512      	bpl.n	800b742 <__swsetup_r+0x5a>
 800b71c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b71e:	b141      	cbz	r1, 800b732 <__swsetup_r+0x4a>
 800b720:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b724:	4299      	cmp	r1, r3
 800b726:	d002      	beq.n	800b72e <__swsetup_r+0x46>
 800b728:	4628      	mov	r0, r5
 800b72a:	f000 ff15 	bl	800c558 <_free_r>
 800b72e:	2300      	movs	r3, #0
 800b730:	6363      	str	r3, [r4, #52]	@ 0x34
 800b732:	89a3      	ldrh	r3, [r4, #12]
 800b734:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b738:	81a3      	strh	r3, [r4, #12]
 800b73a:	2300      	movs	r3, #0
 800b73c:	6063      	str	r3, [r4, #4]
 800b73e:	6923      	ldr	r3, [r4, #16]
 800b740:	6023      	str	r3, [r4, #0]
 800b742:	89a3      	ldrh	r3, [r4, #12]
 800b744:	f043 0308 	orr.w	r3, r3, #8
 800b748:	81a3      	strh	r3, [r4, #12]
 800b74a:	6923      	ldr	r3, [r4, #16]
 800b74c:	b94b      	cbnz	r3, 800b762 <__swsetup_r+0x7a>
 800b74e:	89a3      	ldrh	r3, [r4, #12]
 800b750:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b758:	d003      	beq.n	800b762 <__swsetup_r+0x7a>
 800b75a:	4621      	mov	r1, r4
 800b75c:	4628      	mov	r0, r5
 800b75e:	f002 fe9d 	bl	800e49c <__smakebuf_r>
 800b762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b766:	f013 0201 	ands.w	r2, r3, #1
 800b76a:	d00a      	beq.n	800b782 <__swsetup_r+0x9a>
 800b76c:	2200      	movs	r2, #0
 800b76e:	60a2      	str	r2, [r4, #8]
 800b770:	6962      	ldr	r2, [r4, #20]
 800b772:	4252      	negs	r2, r2
 800b774:	61a2      	str	r2, [r4, #24]
 800b776:	6922      	ldr	r2, [r4, #16]
 800b778:	b942      	cbnz	r2, 800b78c <__swsetup_r+0xa4>
 800b77a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b77e:	d1c5      	bne.n	800b70c <__swsetup_r+0x24>
 800b780:	bd38      	pop	{r3, r4, r5, pc}
 800b782:	0799      	lsls	r1, r3, #30
 800b784:	bf58      	it	pl
 800b786:	6962      	ldrpl	r2, [r4, #20]
 800b788:	60a2      	str	r2, [r4, #8]
 800b78a:	e7f4      	b.n	800b776 <__swsetup_r+0x8e>
 800b78c:	2000      	movs	r0, #0
 800b78e:	e7f7      	b.n	800b780 <__swsetup_r+0x98>
 800b790:	20000050 	.word	0x20000050

0800b794 <memset>:
 800b794:	4402      	add	r2, r0
 800b796:	4603      	mov	r3, r0
 800b798:	4293      	cmp	r3, r2
 800b79a:	d100      	bne.n	800b79e <memset+0xa>
 800b79c:	4770      	bx	lr
 800b79e:	f803 1b01 	strb.w	r1, [r3], #1
 800b7a2:	e7f9      	b.n	800b798 <memset+0x4>

0800b7a4 <_localeconv_r>:
 800b7a4:	4800      	ldr	r0, [pc, #0]	@ (800b7a8 <_localeconv_r+0x4>)
 800b7a6:	4770      	bx	lr
 800b7a8:	20000190 	.word	0x20000190

0800b7ac <_close_r>:
 800b7ac:	b538      	push	{r3, r4, r5, lr}
 800b7ae:	4d06      	ldr	r5, [pc, #24]	@ (800b7c8 <_close_r+0x1c>)
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	4608      	mov	r0, r1
 800b7b6:	602b      	str	r3, [r5, #0]
 800b7b8:	f7f7 f960 	bl	8002a7c <_close>
 800b7bc:	1c43      	adds	r3, r0, #1
 800b7be:	d102      	bne.n	800b7c6 <_close_r+0x1a>
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	b103      	cbz	r3, 800b7c6 <_close_r+0x1a>
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	bd38      	pop	{r3, r4, r5, pc}
 800b7c8:	20000c90 	.word	0x20000c90

0800b7cc <_lseek_r>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	4d07      	ldr	r5, [pc, #28]	@ (800b7ec <_lseek_r+0x20>)
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	4608      	mov	r0, r1
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	602a      	str	r2, [r5, #0]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f7f7 f975 	bl	8002aca <_lseek>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d102      	bne.n	800b7ea <_lseek_r+0x1e>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	b103      	cbz	r3, 800b7ea <_lseek_r+0x1e>
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	20000c90 	.word	0x20000c90

0800b7f0 <_read_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4d07      	ldr	r5, [pc, #28]	@ (800b810 <_read_r+0x20>)
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	4608      	mov	r0, r1
 800b7f8:	4611      	mov	r1, r2
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	602a      	str	r2, [r5, #0]
 800b7fe:	461a      	mov	r2, r3
 800b800:	f7f7 f903 	bl	8002a0a <_read>
 800b804:	1c43      	adds	r3, r0, #1
 800b806:	d102      	bne.n	800b80e <_read_r+0x1e>
 800b808:	682b      	ldr	r3, [r5, #0]
 800b80a:	b103      	cbz	r3, 800b80e <_read_r+0x1e>
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	bd38      	pop	{r3, r4, r5, pc}
 800b810:	20000c90 	.word	0x20000c90

0800b814 <_write_r>:
 800b814:	b538      	push	{r3, r4, r5, lr}
 800b816:	4d07      	ldr	r5, [pc, #28]	@ (800b834 <_write_r+0x20>)
 800b818:	4604      	mov	r4, r0
 800b81a:	4608      	mov	r0, r1
 800b81c:	4611      	mov	r1, r2
 800b81e:	2200      	movs	r2, #0
 800b820:	602a      	str	r2, [r5, #0]
 800b822:	461a      	mov	r2, r3
 800b824:	f7f7 f90e 	bl	8002a44 <_write>
 800b828:	1c43      	adds	r3, r0, #1
 800b82a:	d102      	bne.n	800b832 <_write_r+0x1e>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	b103      	cbz	r3, 800b832 <_write_r+0x1e>
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	bd38      	pop	{r3, r4, r5, pc}
 800b834:	20000c90 	.word	0x20000c90

0800b838 <__errno>:
 800b838:	4b01      	ldr	r3, [pc, #4]	@ (800b840 <__errno+0x8>)
 800b83a:	6818      	ldr	r0, [r3, #0]
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop
 800b840:	20000050 	.word	0x20000050

0800b844 <__libc_init_array>:
 800b844:	b570      	push	{r4, r5, r6, lr}
 800b846:	4d0d      	ldr	r5, [pc, #52]	@ (800b87c <__libc_init_array+0x38>)
 800b848:	4c0d      	ldr	r4, [pc, #52]	@ (800b880 <__libc_init_array+0x3c>)
 800b84a:	1b64      	subs	r4, r4, r5
 800b84c:	10a4      	asrs	r4, r4, #2
 800b84e:	2600      	movs	r6, #0
 800b850:	42a6      	cmp	r6, r4
 800b852:	d109      	bne.n	800b868 <__libc_init_array+0x24>
 800b854:	4d0b      	ldr	r5, [pc, #44]	@ (800b884 <__libc_init_array+0x40>)
 800b856:	4c0c      	ldr	r4, [pc, #48]	@ (800b888 <__libc_init_array+0x44>)
 800b858:	f003 fae0 	bl	800ee1c <_init>
 800b85c:	1b64      	subs	r4, r4, r5
 800b85e:	10a4      	asrs	r4, r4, #2
 800b860:	2600      	movs	r6, #0
 800b862:	42a6      	cmp	r6, r4
 800b864:	d105      	bne.n	800b872 <__libc_init_array+0x2e>
 800b866:	bd70      	pop	{r4, r5, r6, pc}
 800b868:	f855 3b04 	ldr.w	r3, [r5], #4
 800b86c:	4798      	blx	r3
 800b86e:	3601      	adds	r6, #1
 800b870:	e7ee      	b.n	800b850 <__libc_init_array+0xc>
 800b872:	f855 3b04 	ldr.w	r3, [r5], #4
 800b876:	4798      	blx	r3
 800b878:	3601      	adds	r6, #1
 800b87a:	e7f2      	b.n	800b862 <__libc_init_array+0x1e>
 800b87c:	0800f368 	.word	0x0800f368
 800b880:	0800f368 	.word	0x0800f368
 800b884:	0800f368 	.word	0x0800f368
 800b888:	0800f36c 	.word	0x0800f36c

0800b88c <__retarget_lock_init_recursive>:
 800b88c:	4770      	bx	lr

0800b88e <__retarget_lock_acquire_recursive>:
 800b88e:	4770      	bx	lr

0800b890 <__retarget_lock_release_recursive>:
 800b890:	4770      	bx	lr

0800b892 <memcpy>:
 800b892:	440a      	add	r2, r1
 800b894:	4291      	cmp	r1, r2
 800b896:	f100 33ff 	add.w	r3, r0, #4294967295
 800b89a:	d100      	bne.n	800b89e <memcpy+0xc>
 800b89c:	4770      	bx	lr
 800b89e:	b510      	push	{r4, lr}
 800b8a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8a8:	4291      	cmp	r1, r2
 800b8aa:	d1f9      	bne.n	800b8a0 <memcpy+0xe>
 800b8ac:	bd10      	pop	{r4, pc}
	...

0800b8b0 <nanf>:
 800b8b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b8b8 <nanf+0x8>
 800b8b4:	4770      	bx	lr
 800b8b6:	bf00      	nop
 800b8b8:	7fc00000 	.word	0x7fc00000

0800b8bc <quorem>:
 800b8bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c0:	6903      	ldr	r3, [r0, #16]
 800b8c2:	690c      	ldr	r4, [r1, #16]
 800b8c4:	42a3      	cmp	r3, r4
 800b8c6:	4607      	mov	r7, r0
 800b8c8:	db7e      	blt.n	800b9c8 <quorem+0x10c>
 800b8ca:	3c01      	subs	r4, #1
 800b8cc:	f101 0814 	add.w	r8, r1, #20
 800b8d0:	00a3      	lsls	r3, r4, #2
 800b8d2:	f100 0514 	add.w	r5, r0, #20
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8dc:	9301      	str	r3, [sp, #4]
 800b8de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b8e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b8ee:	fbb2 f6f3 	udiv	r6, r2, r3
 800b8f2:	d32e      	bcc.n	800b952 <quorem+0x96>
 800b8f4:	f04f 0a00 	mov.w	sl, #0
 800b8f8:	46c4      	mov	ip, r8
 800b8fa:	46ae      	mov	lr, r5
 800b8fc:	46d3      	mov	fp, sl
 800b8fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b902:	b298      	uxth	r0, r3
 800b904:	fb06 a000 	mla	r0, r6, r0, sl
 800b908:	0c02      	lsrs	r2, r0, #16
 800b90a:	0c1b      	lsrs	r3, r3, #16
 800b90c:	fb06 2303 	mla	r3, r6, r3, r2
 800b910:	f8de 2000 	ldr.w	r2, [lr]
 800b914:	b280      	uxth	r0, r0
 800b916:	b292      	uxth	r2, r2
 800b918:	1a12      	subs	r2, r2, r0
 800b91a:	445a      	add	r2, fp
 800b91c:	f8de 0000 	ldr.w	r0, [lr]
 800b920:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b924:	b29b      	uxth	r3, r3
 800b926:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b92a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b92e:	b292      	uxth	r2, r2
 800b930:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b934:	45e1      	cmp	r9, ip
 800b936:	f84e 2b04 	str.w	r2, [lr], #4
 800b93a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b93e:	d2de      	bcs.n	800b8fe <quorem+0x42>
 800b940:	9b00      	ldr	r3, [sp, #0]
 800b942:	58eb      	ldr	r3, [r5, r3]
 800b944:	b92b      	cbnz	r3, 800b952 <quorem+0x96>
 800b946:	9b01      	ldr	r3, [sp, #4]
 800b948:	3b04      	subs	r3, #4
 800b94a:	429d      	cmp	r5, r3
 800b94c:	461a      	mov	r2, r3
 800b94e:	d32f      	bcc.n	800b9b0 <quorem+0xf4>
 800b950:	613c      	str	r4, [r7, #16]
 800b952:	4638      	mov	r0, r7
 800b954:	f001 f9c4 	bl	800cce0 <__mcmp>
 800b958:	2800      	cmp	r0, #0
 800b95a:	db25      	blt.n	800b9a8 <quorem+0xec>
 800b95c:	4629      	mov	r1, r5
 800b95e:	2000      	movs	r0, #0
 800b960:	f858 2b04 	ldr.w	r2, [r8], #4
 800b964:	f8d1 c000 	ldr.w	ip, [r1]
 800b968:	fa1f fe82 	uxth.w	lr, r2
 800b96c:	fa1f f38c 	uxth.w	r3, ip
 800b970:	eba3 030e 	sub.w	r3, r3, lr
 800b974:	4403      	add	r3, r0
 800b976:	0c12      	lsrs	r2, r2, #16
 800b978:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b97c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b980:	b29b      	uxth	r3, r3
 800b982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b986:	45c1      	cmp	r9, r8
 800b988:	f841 3b04 	str.w	r3, [r1], #4
 800b98c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b990:	d2e6      	bcs.n	800b960 <quorem+0xa4>
 800b992:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b99a:	b922      	cbnz	r2, 800b9a6 <quorem+0xea>
 800b99c:	3b04      	subs	r3, #4
 800b99e:	429d      	cmp	r5, r3
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	d30b      	bcc.n	800b9bc <quorem+0x100>
 800b9a4:	613c      	str	r4, [r7, #16]
 800b9a6:	3601      	adds	r6, #1
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	b003      	add	sp, #12
 800b9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b0:	6812      	ldr	r2, [r2, #0]
 800b9b2:	3b04      	subs	r3, #4
 800b9b4:	2a00      	cmp	r2, #0
 800b9b6:	d1cb      	bne.n	800b950 <quorem+0x94>
 800b9b8:	3c01      	subs	r4, #1
 800b9ba:	e7c6      	b.n	800b94a <quorem+0x8e>
 800b9bc:	6812      	ldr	r2, [r2, #0]
 800b9be:	3b04      	subs	r3, #4
 800b9c0:	2a00      	cmp	r2, #0
 800b9c2:	d1ef      	bne.n	800b9a4 <quorem+0xe8>
 800b9c4:	3c01      	subs	r4, #1
 800b9c6:	e7ea      	b.n	800b99e <quorem+0xe2>
 800b9c8:	2000      	movs	r0, #0
 800b9ca:	e7ee      	b.n	800b9aa <quorem+0xee>
 800b9cc:	0000      	movs	r0, r0
	...

0800b9d0 <_dtoa_r>:
 800b9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d4:	69c7      	ldr	r7, [r0, #28]
 800b9d6:	b099      	sub	sp, #100	@ 0x64
 800b9d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b9dc:	ec55 4b10 	vmov	r4, r5, d0
 800b9e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b9e2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b9e4:	4683      	mov	fp, r0
 800b9e6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b9e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b9ea:	b97f      	cbnz	r7, 800ba0c <_dtoa_r+0x3c>
 800b9ec:	2010      	movs	r0, #16
 800b9ee:	f000 fdfd 	bl	800c5ec <malloc>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b9f8:	b920      	cbnz	r0, 800ba04 <_dtoa_r+0x34>
 800b9fa:	4ba7      	ldr	r3, [pc, #668]	@ (800bc98 <_dtoa_r+0x2c8>)
 800b9fc:	21ef      	movs	r1, #239	@ 0xef
 800b9fe:	48a7      	ldr	r0, [pc, #668]	@ (800bc9c <_dtoa_r+0x2cc>)
 800ba00:	f002 fdee 	bl	800e5e0 <__assert_func>
 800ba04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ba08:	6007      	str	r7, [r0, #0]
 800ba0a:	60c7      	str	r7, [r0, #12]
 800ba0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ba10:	6819      	ldr	r1, [r3, #0]
 800ba12:	b159      	cbz	r1, 800ba2c <_dtoa_r+0x5c>
 800ba14:	685a      	ldr	r2, [r3, #4]
 800ba16:	604a      	str	r2, [r1, #4]
 800ba18:	2301      	movs	r3, #1
 800ba1a:	4093      	lsls	r3, r2
 800ba1c:	608b      	str	r3, [r1, #8]
 800ba1e:	4658      	mov	r0, fp
 800ba20:	f000 feda 	bl	800c7d8 <_Bfree>
 800ba24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	601a      	str	r2, [r3, #0]
 800ba2c:	1e2b      	subs	r3, r5, #0
 800ba2e:	bfb9      	ittee	lt
 800ba30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ba34:	9303      	strlt	r3, [sp, #12]
 800ba36:	2300      	movge	r3, #0
 800ba38:	6033      	strge	r3, [r6, #0]
 800ba3a:	9f03      	ldr	r7, [sp, #12]
 800ba3c:	4b98      	ldr	r3, [pc, #608]	@ (800bca0 <_dtoa_r+0x2d0>)
 800ba3e:	bfbc      	itt	lt
 800ba40:	2201      	movlt	r2, #1
 800ba42:	6032      	strlt	r2, [r6, #0]
 800ba44:	43bb      	bics	r3, r7
 800ba46:	d112      	bne.n	800ba6e <_dtoa_r+0x9e>
 800ba48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ba4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ba4e:	6013      	str	r3, [r2, #0]
 800ba50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba54:	4323      	orrs	r3, r4
 800ba56:	f000 854d 	beq.w	800c4f4 <_dtoa_r+0xb24>
 800ba5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bcb4 <_dtoa_r+0x2e4>
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 854f 	beq.w	800c504 <_dtoa_r+0xb34>
 800ba66:	f10a 0303 	add.w	r3, sl, #3
 800ba6a:	f000 bd49 	b.w	800c500 <_dtoa_r+0xb30>
 800ba6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba72:	2200      	movs	r2, #0
 800ba74:	ec51 0b17 	vmov	r0, r1, d7
 800ba78:	2300      	movs	r3, #0
 800ba7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ba7e:	f7f5 f823 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba82:	4680      	mov	r8, r0
 800ba84:	b158      	cbz	r0, 800ba9e <_dtoa_r+0xce>
 800ba86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ba88:	2301      	movs	r3, #1
 800ba8a:	6013      	str	r3, [r2, #0]
 800ba8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba8e:	b113      	cbz	r3, 800ba96 <_dtoa_r+0xc6>
 800ba90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ba92:	4b84      	ldr	r3, [pc, #528]	@ (800bca4 <_dtoa_r+0x2d4>)
 800ba94:	6013      	str	r3, [r2, #0]
 800ba96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bcb8 <_dtoa_r+0x2e8>
 800ba9a:	f000 bd33 	b.w	800c504 <_dtoa_r+0xb34>
 800ba9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800baa2:	aa16      	add	r2, sp, #88	@ 0x58
 800baa4:	a917      	add	r1, sp, #92	@ 0x5c
 800baa6:	4658      	mov	r0, fp
 800baa8:	f001 fa3a 	bl	800cf20 <__d2b>
 800baac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bab0:	4681      	mov	r9, r0
 800bab2:	2e00      	cmp	r6, #0
 800bab4:	d077      	beq.n	800bba6 <_dtoa_r+0x1d6>
 800bab6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bab8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800babc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bac4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bac8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bacc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bad0:	4619      	mov	r1, r3
 800bad2:	2200      	movs	r2, #0
 800bad4:	4b74      	ldr	r3, [pc, #464]	@ (800bca8 <_dtoa_r+0x2d8>)
 800bad6:	f7f4 fbd7 	bl	8000288 <__aeabi_dsub>
 800bada:	a369      	add	r3, pc, #420	@ (adr r3, 800bc80 <_dtoa_r+0x2b0>)
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	f7f4 fd8a 	bl	80005f8 <__aeabi_dmul>
 800bae4:	a368      	add	r3, pc, #416	@ (adr r3, 800bc88 <_dtoa_r+0x2b8>)
 800bae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baea:	f7f4 fbcf 	bl	800028c <__adddf3>
 800baee:	4604      	mov	r4, r0
 800baf0:	4630      	mov	r0, r6
 800baf2:	460d      	mov	r5, r1
 800baf4:	f7f4 fd16 	bl	8000524 <__aeabi_i2d>
 800baf8:	a365      	add	r3, pc, #404	@ (adr r3, 800bc90 <_dtoa_r+0x2c0>)
 800bafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafe:	f7f4 fd7b 	bl	80005f8 <__aeabi_dmul>
 800bb02:	4602      	mov	r2, r0
 800bb04:	460b      	mov	r3, r1
 800bb06:	4620      	mov	r0, r4
 800bb08:	4629      	mov	r1, r5
 800bb0a:	f7f4 fbbf 	bl	800028c <__adddf3>
 800bb0e:	4604      	mov	r4, r0
 800bb10:	460d      	mov	r5, r1
 800bb12:	f7f5 f821 	bl	8000b58 <__aeabi_d2iz>
 800bb16:	2200      	movs	r2, #0
 800bb18:	4607      	mov	r7, r0
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	4629      	mov	r1, r5
 800bb20:	f7f4 ffdc 	bl	8000adc <__aeabi_dcmplt>
 800bb24:	b140      	cbz	r0, 800bb38 <_dtoa_r+0x168>
 800bb26:	4638      	mov	r0, r7
 800bb28:	f7f4 fcfc 	bl	8000524 <__aeabi_i2d>
 800bb2c:	4622      	mov	r2, r4
 800bb2e:	462b      	mov	r3, r5
 800bb30:	f7f4 ffca 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb34:	b900      	cbnz	r0, 800bb38 <_dtoa_r+0x168>
 800bb36:	3f01      	subs	r7, #1
 800bb38:	2f16      	cmp	r7, #22
 800bb3a:	d851      	bhi.n	800bbe0 <_dtoa_r+0x210>
 800bb3c:	4b5b      	ldr	r3, [pc, #364]	@ (800bcac <_dtoa_r+0x2dc>)
 800bb3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb4a:	f7f4 ffc7 	bl	8000adc <__aeabi_dcmplt>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d048      	beq.n	800bbe4 <_dtoa_r+0x214>
 800bb52:	3f01      	subs	r7, #1
 800bb54:	2300      	movs	r3, #0
 800bb56:	9312      	str	r3, [sp, #72]	@ 0x48
 800bb58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bb5a:	1b9b      	subs	r3, r3, r6
 800bb5c:	1e5a      	subs	r2, r3, #1
 800bb5e:	bf44      	itt	mi
 800bb60:	f1c3 0801 	rsbmi	r8, r3, #1
 800bb64:	2300      	movmi	r3, #0
 800bb66:	9208      	str	r2, [sp, #32]
 800bb68:	bf54      	ite	pl
 800bb6a:	f04f 0800 	movpl.w	r8, #0
 800bb6e:	9308      	strmi	r3, [sp, #32]
 800bb70:	2f00      	cmp	r7, #0
 800bb72:	db39      	blt.n	800bbe8 <_dtoa_r+0x218>
 800bb74:	9b08      	ldr	r3, [sp, #32]
 800bb76:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bb78:	443b      	add	r3, r7
 800bb7a:	9308      	str	r3, [sp, #32]
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb82:	2b09      	cmp	r3, #9
 800bb84:	d864      	bhi.n	800bc50 <_dtoa_r+0x280>
 800bb86:	2b05      	cmp	r3, #5
 800bb88:	bfc4      	itt	gt
 800bb8a:	3b04      	subgt	r3, #4
 800bb8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bb8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb90:	f1a3 0302 	sub.w	r3, r3, #2
 800bb94:	bfcc      	ite	gt
 800bb96:	2400      	movgt	r4, #0
 800bb98:	2401      	movle	r4, #1
 800bb9a:	2b03      	cmp	r3, #3
 800bb9c:	d863      	bhi.n	800bc66 <_dtoa_r+0x296>
 800bb9e:	e8df f003 	tbb	[pc, r3]
 800bba2:	372a      	.short	0x372a
 800bba4:	5535      	.short	0x5535
 800bba6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bbaa:	441e      	add	r6, r3
 800bbac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bbb0:	2b20      	cmp	r3, #32
 800bbb2:	bfc1      	itttt	gt
 800bbb4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bbb8:	409f      	lslgt	r7, r3
 800bbba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bbbe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bbc2:	bfd6      	itet	le
 800bbc4:	f1c3 0320 	rsble	r3, r3, #32
 800bbc8:	ea47 0003 	orrgt.w	r0, r7, r3
 800bbcc:	fa04 f003 	lslle.w	r0, r4, r3
 800bbd0:	f7f4 fc98 	bl	8000504 <__aeabi_ui2d>
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bbda:	3e01      	subs	r6, #1
 800bbdc:	9214      	str	r2, [sp, #80]	@ 0x50
 800bbde:	e777      	b.n	800bad0 <_dtoa_r+0x100>
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e7b8      	b.n	800bb56 <_dtoa_r+0x186>
 800bbe4:	9012      	str	r0, [sp, #72]	@ 0x48
 800bbe6:	e7b7      	b.n	800bb58 <_dtoa_r+0x188>
 800bbe8:	427b      	negs	r3, r7
 800bbea:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbec:	2300      	movs	r3, #0
 800bbee:	eba8 0807 	sub.w	r8, r8, r7
 800bbf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bbf4:	e7c4      	b.n	800bb80 <_dtoa_r+0x1b0>
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bbfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	dc35      	bgt.n	800bc6c <_dtoa_r+0x29c>
 800bc00:	2301      	movs	r3, #1
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	9307      	str	r3, [sp, #28]
 800bc06:	461a      	mov	r2, r3
 800bc08:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc0a:	e00b      	b.n	800bc24 <_dtoa_r+0x254>
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e7f3      	b.n	800bbf8 <_dtoa_r+0x228>
 800bc10:	2300      	movs	r3, #0
 800bc12:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc16:	18fb      	adds	r3, r7, r3
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	9307      	str	r3, [sp, #28]
 800bc20:	bfb8      	it	lt
 800bc22:	2301      	movlt	r3, #1
 800bc24:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bc28:	2100      	movs	r1, #0
 800bc2a:	2204      	movs	r2, #4
 800bc2c:	f102 0514 	add.w	r5, r2, #20
 800bc30:	429d      	cmp	r5, r3
 800bc32:	d91f      	bls.n	800bc74 <_dtoa_r+0x2a4>
 800bc34:	6041      	str	r1, [r0, #4]
 800bc36:	4658      	mov	r0, fp
 800bc38:	f000 fd8e 	bl	800c758 <_Balloc>
 800bc3c:	4682      	mov	sl, r0
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	d13c      	bne.n	800bcbc <_dtoa_r+0x2ec>
 800bc42:	4b1b      	ldr	r3, [pc, #108]	@ (800bcb0 <_dtoa_r+0x2e0>)
 800bc44:	4602      	mov	r2, r0
 800bc46:	f240 11af 	movw	r1, #431	@ 0x1af
 800bc4a:	e6d8      	b.n	800b9fe <_dtoa_r+0x2e>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e7e0      	b.n	800bc12 <_dtoa_r+0x242>
 800bc50:	2401      	movs	r4, #1
 800bc52:	2300      	movs	r3, #0
 800bc54:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc56:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bc58:	f04f 33ff 	mov.w	r3, #4294967295
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	9307      	str	r3, [sp, #28]
 800bc60:	2200      	movs	r2, #0
 800bc62:	2312      	movs	r3, #18
 800bc64:	e7d0      	b.n	800bc08 <_dtoa_r+0x238>
 800bc66:	2301      	movs	r3, #1
 800bc68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc6a:	e7f5      	b.n	800bc58 <_dtoa_r+0x288>
 800bc6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	9307      	str	r3, [sp, #28]
 800bc72:	e7d7      	b.n	800bc24 <_dtoa_r+0x254>
 800bc74:	3101      	adds	r1, #1
 800bc76:	0052      	lsls	r2, r2, #1
 800bc78:	e7d8      	b.n	800bc2c <_dtoa_r+0x25c>
 800bc7a:	bf00      	nop
 800bc7c:	f3af 8000 	nop.w
 800bc80:	636f4361 	.word	0x636f4361
 800bc84:	3fd287a7 	.word	0x3fd287a7
 800bc88:	8b60c8b3 	.word	0x8b60c8b3
 800bc8c:	3fc68a28 	.word	0x3fc68a28
 800bc90:	509f79fb 	.word	0x509f79fb
 800bc94:	3fd34413 	.word	0x3fd34413
 800bc98:	0800ef76 	.word	0x0800ef76
 800bc9c:	0800ef8d 	.word	0x0800ef8d
 800bca0:	7ff00000 	.word	0x7ff00000
 800bca4:	0800ef41 	.word	0x0800ef41
 800bca8:	3ff80000 	.word	0x3ff80000
 800bcac:	0800f088 	.word	0x0800f088
 800bcb0:	0800efe5 	.word	0x0800efe5
 800bcb4:	0800ef72 	.word	0x0800ef72
 800bcb8:	0800ef40 	.word	0x0800ef40
 800bcbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bcc0:	6018      	str	r0, [r3, #0]
 800bcc2:	9b07      	ldr	r3, [sp, #28]
 800bcc4:	2b0e      	cmp	r3, #14
 800bcc6:	f200 80a4 	bhi.w	800be12 <_dtoa_r+0x442>
 800bcca:	2c00      	cmp	r4, #0
 800bccc:	f000 80a1 	beq.w	800be12 <_dtoa_r+0x442>
 800bcd0:	2f00      	cmp	r7, #0
 800bcd2:	dd33      	ble.n	800bd3c <_dtoa_r+0x36c>
 800bcd4:	4bad      	ldr	r3, [pc, #692]	@ (800bf8c <_dtoa_r+0x5bc>)
 800bcd6:	f007 020f 	and.w	r2, r7, #15
 800bcda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcde:	ed93 7b00 	vldr	d7, [r3]
 800bce2:	05f8      	lsls	r0, r7, #23
 800bce4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bce8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bcec:	d516      	bpl.n	800bd1c <_dtoa_r+0x34c>
 800bcee:	4ba8      	ldr	r3, [pc, #672]	@ (800bf90 <_dtoa_r+0x5c0>)
 800bcf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bcf8:	f7f4 fda8 	bl	800084c <__aeabi_ddiv>
 800bcfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd00:	f004 040f 	and.w	r4, r4, #15
 800bd04:	2603      	movs	r6, #3
 800bd06:	4da2      	ldr	r5, [pc, #648]	@ (800bf90 <_dtoa_r+0x5c0>)
 800bd08:	b954      	cbnz	r4, 800bd20 <_dtoa_r+0x350>
 800bd0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd12:	f7f4 fd9b 	bl	800084c <__aeabi_ddiv>
 800bd16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd1a:	e028      	b.n	800bd6e <_dtoa_r+0x39e>
 800bd1c:	2602      	movs	r6, #2
 800bd1e:	e7f2      	b.n	800bd06 <_dtoa_r+0x336>
 800bd20:	07e1      	lsls	r1, r4, #31
 800bd22:	d508      	bpl.n	800bd36 <_dtoa_r+0x366>
 800bd24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd28:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd2c:	f7f4 fc64 	bl	80005f8 <__aeabi_dmul>
 800bd30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd34:	3601      	adds	r6, #1
 800bd36:	1064      	asrs	r4, r4, #1
 800bd38:	3508      	adds	r5, #8
 800bd3a:	e7e5      	b.n	800bd08 <_dtoa_r+0x338>
 800bd3c:	f000 80d2 	beq.w	800bee4 <_dtoa_r+0x514>
 800bd40:	427c      	negs	r4, r7
 800bd42:	4b92      	ldr	r3, [pc, #584]	@ (800bf8c <_dtoa_r+0x5bc>)
 800bd44:	4d92      	ldr	r5, [pc, #584]	@ (800bf90 <_dtoa_r+0x5c0>)
 800bd46:	f004 020f 	and.w	r2, r4, #15
 800bd4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd56:	f7f4 fc4f 	bl	80005f8 <__aeabi_dmul>
 800bd5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd5e:	1124      	asrs	r4, r4, #4
 800bd60:	2300      	movs	r3, #0
 800bd62:	2602      	movs	r6, #2
 800bd64:	2c00      	cmp	r4, #0
 800bd66:	f040 80b2 	bne.w	800bece <_dtoa_r+0x4fe>
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1d3      	bne.n	800bd16 <_dtoa_r+0x346>
 800bd6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bd70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	f000 80b7 	beq.w	800bee8 <_dtoa_r+0x518>
 800bd7a:	4b86      	ldr	r3, [pc, #536]	@ (800bf94 <_dtoa_r+0x5c4>)
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	4620      	mov	r0, r4
 800bd80:	4629      	mov	r1, r5
 800bd82:	f7f4 feab 	bl	8000adc <__aeabi_dcmplt>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	f000 80ae 	beq.w	800bee8 <_dtoa_r+0x518>
 800bd8c:	9b07      	ldr	r3, [sp, #28]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f000 80aa 	beq.w	800bee8 <_dtoa_r+0x518>
 800bd94:	9b00      	ldr	r3, [sp, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	dd37      	ble.n	800be0a <_dtoa_r+0x43a>
 800bd9a:	1e7b      	subs	r3, r7, #1
 800bd9c:	9304      	str	r3, [sp, #16]
 800bd9e:	4620      	mov	r0, r4
 800bda0:	4b7d      	ldr	r3, [pc, #500]	@ (800bf98 <_dtoa_r+0x5c8>)
 800bda2:	2200      	movs	r2, #0
 800bda4:	4629      	mov	r1, r5
 800bda6:	f7f4 fc27 	bl	80005f8 <__aeabi_dmul>
 800bdaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdae:	9c00      	ldr	r4, [sp, #0]
 800bdb0:	3601      	adds	r6, #1
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	f7f4 fbb6 	bl	8000524 <__aeabi_i2d>
 800bdb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdbc:	f7f4 fc1c 	bl	80005f8 <__aeabi_dmul>
 800bdc0:	4b76      	ldr	r3, [pc, #472]	@ (800bf9c <_dtoa_r+0x5cc>)
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f7f4 fa62 	bl	800028c <__adddf3>
 800bdc8:	4605      	mov	r5, r0
 800bdca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bdce:	2c00      	cmp	r4, #0
 800bdd0:	f040 808d 	bne.w	800beee <_dtoa_r+0x51e>
 800bdd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdd8:	4b71      	ldr	r3, [pc, #452]	@ (800bfa0 <_dtoa_r+0x5d0>)
 800bdda:	2200      	movs	r2, #0
 800bddc:	f7f4 fa54 	bl	8000288 <__aeabi_dsub>
 800bde0:	4602      	mov	r2, r0
 800bde2:	460b      	mov	r3, r1
 800bde4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bde8:	462a      	mov	r2, r5
 800bdea:	4633      	mov	r3, r6
 800bdec:	f7f4 fe94 	bl	8000b18 <__aeabi_dcmpgt>
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	f040 828b 	bne.w	800c30c <_dtoa_r+0x93c>
 800bdf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdfa:	462a      	mov	r2, r5
 800bdfc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800be00:	f7f4 fe6c 	bl	8000adc <__aeabi_dcmplt>
 800be04:	2800      	cmp	r0, #0
 800be06:	f040 8128 	bne.w	800c05a <_dtoa_r+0x68a>
 800be0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800be0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800be12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800be14:	2b00      	cmp	r3, #0
 800be16:	f2c0 815a 	blt.w	800c0ce <_dtoa_r+0x6fe>
 800be1a:	2f0e      	cmp	r7, #14
 800be1c:	f300 8157 	bgt.w	800c0ce <_dtoa_r+0x6fe>
 800be20:	4b5a      	ldr	r3, [pc, #360]	@ (800bf8c <_dtoa_r+0x5bc>)
 800be22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be26:	ed93 7b00 	vldr	d7, [r3]
 800be2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	ed8d 7b00 	vstr	d7, [sp]
 800be32:	da03      	bge.n	800be3c <_dtoa_r+0x46c>
 800be34:	9b07      	ldr	r3, [sp, #28]
 800be36:	2b00      	cmp	r3, #0
 800be38:	f340 8101 	ble.w	800c03e <_dtoa_r+0x66e>
 800be3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800be40:	4656      	mov	r6, sl
 800be42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be46:	4620      	mov	r0, r4
 800be48:	4629      	mov	r1, r5
 800be4a:	f7f4 fcff 	bl	800084c <__aeabi_ddiv>
 800be4e:	f7f4 fe83 	bl	8000b58 <__aeabi_d2iz>
 800be52:	4680      	mov	r8, r0
 800be54:	f7f4 fb66 	bl	8000524 <__aeabi_i2d>
 800be58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be5c:	f7f4 fbcc 	bl	80005f8 <__aeabi_dmul>
 800be60:	4602      	mov	r2, r0
 800be62:	460b      	mov	r3, r1
 800be64:	4620      	mov	r0, r4
 800be66:	4629      	mov	r1, r5
 800be68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800be6c:	f7f4 fa0c 	bl	8000288 <__aeabi_dsub>
 800be70:	f806 4b01 	strb.w	r4, [r6], #1
 800be74:	9d07      	ldr	r5, [sp, #28]
 800be76:	eba6 040a 	sub.w	r4, r6, sl
 800be7a:	42a5      	cmp	r5, r4
 800be7c:	4602      	mov	r2, r0
 800be7e:	460b      	mov	r3, r1
 800be80:	f040 8117 	bne.w	800c0b2 <_dtoa_r+0x6e2>
 800be84:	f7f4 fa02 	bl	800028c <__adddf3>
 800be88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be8c:	4604      	mov	r4, r0
 800be8e:	460d      	mov	r5, r1
 800be90:	f7f4 fe42 	bl	8000b18 <__aeabi_dcmpgt>
 800be94:	2800      	cmp	r0, #0
 800be96:	f040 80f9 	bne.w	800c08c <_dtoa_r+0x6bc>
 800be9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be9e:	4620      	mov	r0, r4
 800bea0:	4629      	mov	r1, r5
 800bea2:	f7f4 fe11 	bl	8000ac8 <__aeabi_dcmpeq>
 800bea6:	b118      	cbz	r0, 800beb0 <_dtoa_r+0x4e0>
 800bea8:	f018 0f01 	tst.w	r8, #1
 800beac:	f040 80ee 	bne.w	800c08c <_dtoa_r+0x6bc>
 800beb0:	4649      	mov	r1, r9
 800beb2:	4658      	mov	r0, fp
 800beb4:	f000 fc90 	bl	800c7d8 <_Bfree>
 800beb8:	2300      	movs	r3, #0
 800beba:	7033      	strb	r3, [r6, #0]
 800bebc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bebe:	3701      	adds	r7, #1
 800bec0:	601f      	str	r7, [r3, #0]
 800bec2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f000 831d 	beq.w	800c504 <_dtoa_r+0xb34>
 800beca:	601e      	str	r6, [r3, #0]
 800becc:	e31a      	b.n	800c504 <_dtoa_r+0xb34>
 800bece:	07e2      	lsls	r2, r4, #31
 800bed0:	d505      	bpl.n	800bede <_dtoa_r+0x50e>
 800bed2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bed6:	f7f4 fb8f 	bl	80005f8 <__aeabi_dmul>
 800beda:	3601      	adds	r6, #1
 800bedc:	2301      	movs	r3, #1
 800bede:	1064      	asrs	r4, r4, #1
 800bee0:	3508      	adds	r5, #8
 800bee2:	e73f      	b.n	800bd64 <_dtoa_r+0x394>
 800bee4:	2602      	movs	r6, #2
 800bee6:	e742      	b.n	800bd6e <_dtoa_r+0x39e>
 800bee8:	9c07      	ldr	r4, [sp, #28]
 800beea:	9704      	str	r7, [sp, #16]
 800beec:	e761      	b.n	800bdb2 <_dtoa_r+0x3e2>
 800beee:	4b27      	ldr	r3, [pc, #156]	@ (800bf8c <_dtoa_r+0x5bc>)
 800bef0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bef2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bef6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800befa:	4454      	add	r4, sl
 800befc:	2900      	cmp	r1, #0
 800befe:	d053      	beq.n	800bfa8 <_dtoa_r+0x5d8>
 800bf00:	4928      	ldr	r1, [pc, #160]	@ (800bfa4 <_dtoa_r+0x5d4>)
 800bf02:	2000      	movs	r0, #0
 800bf04:	f7f4 fca2 	bl	800084c <__aeabi_ddiv>
 800bf08:	4633      	mov	r3, r6
 800bf0a:	462a      	mov	r2, r5
 800bf0c:	f7f4 f9bc 	bl	8000288 <__aeabi_dsub>
 800bf10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bf14:	4656      	mov	r6, sl
 800bf16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf1a:	f7f4 fe1d 	bl	8000b58 <__aeabi_d2iz>
 800bf1e:	4605      	mov	r5, r0
 800bf20:	f7f4 fb00 	bl	8000524 <__aeabi_i2d>
 800bf24:	4602      	mov	r2, r0
 800bf26:	460b      	mov	r3, r1
 800bf28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf2c:	f7f4 f9ac 	bl	8000288 <__aeabi_dsub>
 800bf30:	3530      	adds	r5, #48	@ 0x30
 800bf32:	4602      	mov	r2, r0
 800bf34:	460b      	mov	r3, r1
 800bf36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf3a:	f806 5b01 	strb.w	r5, [r6], #1
 800bf3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bf42:	f7f4 fdcb 	bl	8000adc <__aeabi_dcmplt>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d171      	bne.n	800c02e <_dtoa_r+0x65e>
 800bf4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf4e:	4911      	ldr	r1, [pc, #68]	@ (800bf94 <_dtoa_r+0x5c4>)
 800bf50:	2000      	movs	r0, #0
 800bf52:	f7f4 f999 	bl	8000288 <__aeabi_dsub>
 800bf56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bf5a:	f7f4 fdbf 	bl	8000adc <__aeabi_dcmplt>
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	f040 8095 	bne.w	800c08e <_dtoa_r+0x6be>
 800bf64:	42a6      	cmp	r6, r4
 800bf66:	f43f af50 	beq.w	800be0a <_dtoa_r+0x43a>
 800bf6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bf6e:	4b0a      	ldr	r3, [pc, #40]	@ (800bf98 <_dtoa_r+0x5c8>)
 800bf70:	2200      	movs	r2, #0
 800bf72:	f7f4 fb41 	bl	80005f8 <__aeabi_dmul>
 800bf76:	4b08      	ldr	r3, [pc, #32]	@ (800bf98 <_dtoa_r+0x5c8>)
 800bf78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf82:	f7f4 fb39 	bl	80005f8 <__aeabi_dmul>
 800bf86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf8a:	e7c4      	b.n	800bf16 <_dtoa_r+0x546>
 800bf8c:	0800f088 	.word	0x0800f088
 800bf90:	0800f060 	.word	0x0800f060
 800bf94:	3ff00000 	.word	0x3ff00000
 800bf98:	40240000 	.word	0x40240000
 800bf9c:	401c0000 	.word	0x401c0000
 800bfa0:	40140000 	.word	0x40140000
 800bfa4:	3fe00000 	.word	0x3fe00000
 800bfa8:	4631      	mov	r1, r6
 800bfaa:	4628      	mov	r0, r5
 800bfac:	f7f4 fb24 	bl	80005f8 <__aeabi_dmul>
 800bfb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bfb4:	9415      	str	r4, [sp, #84]	@ 0x54
 800bfb6:	4656      	mov	r6, sl
 800bfb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfbc:	f7f4 fdcc 	bl	8000b58 <__aeabi_d2iz>
 800bfc0:	4605      	mov	r5, r0
 800bfc2:	f7f4 faaf 	bl	8000524 <__aeabi_i2d>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	460b      	mov	r3, r1
 800bfca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfce:	f7f4 f95b 	bl	8000288 <__aeabi_dsub>
 800bfd2:	3530      	adds	r5, #48	@ 0x30
 800bfd4:	f806 5b01 	strb.w	r5, [r6], #1
 800bfd8:	4602      	mov	r2, r0
 800bfda:	460b      	mov	r3, r1
 800bfdc:	42a6      	cmp	r6, r4
 800bfde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfe2:	f04f 0200 	mov.w	r2, #0
 800bfe6:	d124      	bne.n	800c032 <_dtoa_r+0x662>
 800bfe8:	4bac      	ldr	r3, [pc, #688]	@ (800c29c <_dtoa_r+0x8cc>)
 800bfea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bfee:	f7f4 f94d 	bl	800028c <__adddf3>
 800bff2:	4602      	mov	r2, r0
 800bff4:	460b      	mov	r3, r1
 800bff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bffa:	f7f4 fd8d 	bl	8000b18 <__aeabi_dcmpgt>
 800bffe:	2800      	cmp	r0, #0
 800c000:	d145      	bne.n	800c08e <_dtoa_r+0x6be>
 800c002:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c006:	49a5      	ldr	r1, [pc, #660]	@ (800c29c <_dtoa_r+0x8cc>)
 800c008:	2000      	movs	r0, #0
 800c00a:	f7f4 f93d 	bl	8000288 <__aeabi_dsub>
 800c00e:	4602      	mov	r2, r0
 800c010:	460b      	mov	r3, r1
 800c012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c016:	f7f4 fd61 	bl	8000adc <__aeabi_dcmplt>
 800c01a:	2800      	cmp	r0, #0
 800c01c:	f43f aef5 	beq.w	800be0a <_dtoa_r+0x43a>
 800c020:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c022:	1e73      	subs	r3, r6, #1
 800c024:	9315      	str	r3, [sp, #84]	@ 0x54
 800c026:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c02a:	2b30      	cmp	r3, #48	@ 0x30
 800c02c:	d0f8      	beq.n	800c020 <_dtoa_r+0x650>
 800c02e:	9f04      	ldr	r7, [sp, #16]
 800c030:	e73e      	b.n	800beb0 <_dtoa_r+0x4e0>
 800c032:	4b9b      	ldr	r3, [pc, #620]	@ (800c2a0 <_dtoa_r+0x8d0>)
 800c034:	f7f4 fae0 	bl	80005f8 <__aeabi_dmul>
 800c038:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c03c:	e7bc      	b.n	800bfb8 <_dtoa_r+0x5e8>
 800c03e:	d10c      	bne.n	800c05a <_dtoa_r+0x68a>
 800c040:	4b98      	ldr	r3, [pc, #608]	@ (800c2a4 <_dtoa_r+0x8d4>)
 800c042:	2200      	movs	r2, #0
 800c044:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c048:	f7f4 fad6 	bl	80005f8 <__aeabi_dmul>
 800c04c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c050:	f7f4 fd58 	bl	8000b04 <__aeabi_dcmpge>
 800c054:	2800      	cmp	r0, #0
 800c056:	f000 8157 	beq.w	800c308 <_dtoa_r+0x938>
 800c05a:	2400      	movs	r4, #0
 800c05c:	4625      	mov	r5, r4
 800c05e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c060:	43db      	mvns	r3, r3
 800c062:	9304      	str	r3, [sp, #16]
 800c064:	4656      	mov	r6, sl
 800c066:	2700      	movs	r7, #0
 800c068:	4621      	mov	r1, r4
 800c06a:	4658      	mov	r0, fp
 800c06c:	f000 fbb4 	bl	800c7d8 <_Bfree>
 800c070:	2d00      	cmp	r5, #0
 800c072:	d0dc      	beq.n	800c02e <_dtoa_r+0x65e>
 800c074:	b12f      	cbz	r7, 800c082 <_dtoa_r+0x6b2>
 800c076:	42af      	cmp	r7, r5
 800c078:	d003      	beq.n	800c082 <_dtoa_r+0x6b2>
 800c07a:	4639      	mov	r1, r7
 800c07c:	4658      	mov	r0, fp
 800c07e:	f000 fbab 	bl	800c7d8 <_Bfree>
 800c082:	4629      	mov	r1, r5
 800c084:	4658      	mov	r0, fp
 800c086:	f000 fba7 	bl	800c7d8 <_Bfree>
 800c08a:	e7d0      	b.n	800c02e <_dtoa_r+0x65e>
 800c08c:	9704      	str	r7, [sp, #16]
 800c08e:	4633      	mov	r3, r6
 800c090:	461e      	mov	r6, r3
 800c092:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c096:	2a39      	cmp	r2, #57	@ 0x39
 800c098:	d107      	bne.n	800c0aa <_dtoa_r+0x6da>
 800c09a:	459a      	cmp	sl, r3
 800c09c:	d1f8      	bne.n	800c090 <_dtoa_r+0x6c0>
 800c09e:	9a04      	ldr	r2, [sp, #16]
 800c0a0:	3201      	adds	r2, #1
 800c0a2:	9204      	str	r2, [sp, #16]
 800c0a4:	2230      	movs	r2, #48	@ 0x30
 800c0a6:	f88a 2000 	strb.w	r2, [sl]
 800c0aa:	781a      	ldrb	r2, [r3, #0]
 800c0ac:	3201      	adds	r2, #1
 800c0ae:	701a      	strb	r2, [r3, #0]
 800c0b0:	e7bd      	b.n	800c02e <_dtoa_r+0x65e>
 800c0b2:	4b7b      	ldr	r3, [pc, #492]	@ (800c2a0 <_dtoa_r+0x8d0>)
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f7f4 fa9f 	bl	80005f8 <__aeabi_dmul>
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	2300      	movs	r3, #0
 800c0be:	4604      	mov	r4, r0
 800c0c0:	460d      	mov	r5, r1
 800c0c2:	f7f4 fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	f43f aebb 	beq.w	800be42 <_dtoa_r+0x472>
 800c0cc:	e6f0      	b.n	800beb0 <_dtoa_r+0x4e0>
 800c0ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c0d0:	2a00      	cmp	r2, #0
 800c0d2:	f000 80db 	beq.w	800c28c <_dtoa_r+0x8bc>
 800c0d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0d8:	2a01      	cmp	r2, #1
 800c0da:	f300 80bf 	bgt.w	800c25c <_dtoa_r+0x88c>
 800c0de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c0e0:	2a00      	cmp	r2, #0
 800c0e2:	f000 80b7 	beq.w	800c254 <_dtoa_r+0x884>
 800c0e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c0ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c0ec:	4646      	mov	r6, r8
 800c0ee:	9a08      	ldr	r2, [sp, #32]
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	441a      	add	r2, r3
 800c0f4:	4658      	mov	r0, fp
 800c0f6:	4498      	add	r8, r3
 800c0f8:	9208      	str	r2, [sp, #32]
 800c0fa:	f000 fc6b 	bl	800c9d4 <__i2b>
 800c0fe:	4605      	mov	r5, r0
 800c100:	b15e      	cbz	r6, 800c11a <_dtoa_r+0x74a>
 800c102:	9b08      	ldr	r3, [sp, #32]
 800c104:	2b00      	cmp	r3, #0
 800c106:	dd08      	ble.n	800c11a <_dtoa_r+0x74a>
 800c108:	42b3      	cmp	r3, r6
 800c10a:	9a08      	ldr	r2, [sp, #32]
 800c10c:	bfa8      	it	ge
 800c10e:	4633      	movge	r3, r6
 800c110:	eba8 0803 	sub.w	r8, r8, r3
 800c114:	1af6      	subs	r6, r6, r3
 800c116:	1ad3      	subs	r3, r2, r3
 800c118:	9308      	str	r3, [sp, #32]
 800c11a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c11c:	b1f3      	cbz	r3, 800c15c <_dtoa_r+0x78c>
 800c11e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c120:	2b00      	cmp	r3, #0
 800c122:	f000 80b7 	beq.w	800c294 <_dtoa_r+0x8c4>
 800c126:	b18c      	cbz	r4, 800c14c <_dtoa_r+0x77c>
 800c128:	4629      	mov	r1, r5
 800c12a:	4622      	mov	r2, r4
 800c12c:	4658      	mov	r0, fp
 800c12e:	f000 fd11 	bl	800cb54 <__pow5mult>
 800c132:	464a      	mov	r2, r9
 800c134:	4601      	mov	r1, r0
 800c136:	4605      	mov	r5, r0
 800c138:	4658      	mov	r0, fp
 800c13a:	f000 fc61 	bl	800ca00 <__multiply>
 800c13e:	4649      	mov	r1, r9
 800c140:	9004      	str	r0, [sp, #16]
 800c142:	4658      	mov	r0, fp
 800c144:	f000 fb48 	bl	800c7d8 <_Bfree>
 800c148:	9b04      	ldr	r3, [sp, #16]
 800c14a:	4699      	mov	r9, r3
 800c14c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c14e:	1b1a      	subs	r2, r3, r4
 800c150:	d004      	beq.n	800c15c <_dtoa_r+0x78c>
 800c152:	4649      	mov	r1, r9
 800c154:	4658      	mov	r0, fp
 800c156:	f000 fcfd 	bl	800cb54 <__pow5mult>
 800c15a:	4681      	mov	r9, r0
 800c15c:	2101      	movs	r1, #1
 800c15e:	4658      	mov	r0, fp
 800c160:	f000 fc38 	bl	800c9d4 <__i2b>
 800c164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c166:	4604      	mov	r4, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f000 81cf 	beq.w	800c50c <_dtoa_r+0xb3c>
 800c16e:	461a      	mov	r2, r3
 800c170:	4601      	mov	r1, r0
 800c172:	4658      	mov	r0, fp
 800c174:	f000 fcee 	bl	800cb54 <__pow5mult>
 800c178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	4604      	mov	r4, r0
 800c17e:	f300 8095 	bgt.w	800c2ac <_dtoa_r+0x8dc>
 800c182:	9b02      	ldr	r3, [sp, #8]
 800c184:	2b00      	cmp	r3, #0
 800c186:	f040 8087 	bne.w	800c298 <_dtoa_r+0x8c8>
 800c18a:	9b03      	ldr	r3, [sp, #12]
 800c18c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c190:	2b00      	cmp	r3, #0
 800c192:	f040 8089 	bne.w	800c2a8 <_dtoa_r+0x8d8>
 800c196:	9b03      	ldr	r3, [sp, #12]
 800c198:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c19c:	0d1b      	lsrs	r3, r3, #20
 800c19e:	051b      	lsls	r3, r3, #20
 800c1a0:	b12b      	cbz	r3, 800c1ae <_dtoa_r+0x7de>
 800c1a2:	9b08      	ldr	r3, [sp, #32]
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	9308      	str	r3, [sp, #32]
 800c1a8:	f108 0801 	add.w	r8, r8, #1
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	f000 81b0 	beq.w	800c518 <_dtoa_r+0xb48>
 800c1b8:	6923      	ldr	r3, [r4, #16]
 800c1ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c1be:	6918      	ldr	r0, [r3, #16]
 800c1c0:	f000 fbbc 	bl	800c93c <__hi0bits>
 800c1c4:	f1c0 0020 	rsb	r0, r0, #32
 800c1c8:	9b08      	ldr	r3, [sp, #32]
 800c1ca:	4418      	add	r0, r3
 800c1cc:	f010 001f 	ands.w	r0, r0, #31
 800c1d0:	d077      	beq.n	800c2c2 <_dtoa_r+0x8f2>
 800c1d2:	f1c0 0320 	rsb	r3, r0, #32
 800c1d6:	2b04      	cmp	r3, #4
 800c1d8:	dd6b      	ble.n	800c2b2 <_dtoa_r+0x8e2>
 800c1da:	9b08      	ldr	r3, [sp, #32]
 800c1dc:	f1c0 001c 	rsb	r0, r0, #28
 800c1e0:	4403      	add	r3, r0
 800c1e2:	4480      	add	r8, r0
 800c1e4:	4406      	add	r6, r0
 800c1e6:	9308      	str	r3, [sp, #32]
 800c1e8:	f1b8 0f00 	cmp.w	r8, #0
 800c1ec:	dd05      	ble.n	800c1fa <_dtoa_r+0x82a>
 800c1ee:	4649      	mov	r1, r9
 800c1f0:	4642      	mov	r2, r8
 800c1f2:	4658      	mov	r0, fp
 800c1f4:	f000 fd08 	bl	800cc08 <__lshift>
 800c1f8:	4681      	mov	r9, r0
 800c1fa:	9b08      	ldr	r3, [sp, #32]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	dd05      	ble.n	800c20c <_dtoa_r+0x83c>
 800c200:	4621      	mov	r1, r4
 800c202:	461a      	mov	r2, r3
 800c204:	4658      	mov	r0, fp
 800c206:	f000 fcff 	bl	800cc08 <__lshift>
 800c20a:	4604      	mov	r4, r0
 800c20c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d059      	beq.n	800c2c6 <_dtoa_r+0x8f6>
 800c212:	4621      	mov	r1, r4
 800c214:	4648      	mov	r0, r9
 800c216:	f000 fd63 	bl	800cce0 <__mcmp>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	da53      	bge.n	800c2c6 <_dtoa_r+0x8f6>
 800c21e:	1e7b      	subs	r3, r7, #1
 800c220:	9304      	str	r3, [sp, #16]
 800c222:	4649      	mov	r1, r9
 800c224:	2300      	movs	r3, #0
 800c226:	220a      	movs	r2, #10
 800c228:	4658      	mov	r0, fp
 800c22a:	f000 faf7 	bl	800c81c <__multadd>
 800c22e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c230:	4681      	mov	r9, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	f000 8172 	beq.w	800c51c <_dtoa_r+0xb4c>
 800c238:	2300      	movs	r3, #0
 800c23a:	4629      	mov	r1, r5
 800c23c:	220a      	movs	r2, #10
 800c23e:	4658      	mov	r0, fp
 800c240:	f000 faec 	bl	800c81c <__multadd>
 800c244:	9b00      	ldr	r3, [sp, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	4605      	mov	r5, r0
 800c24a:	dc67      	bgt.n	800c31c <_dtoa_r+0x94c>
 800c24c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c24e:	2b02      	cmp	r3, #2
 800c250:	dc41      	bgt.n	800c2d6 <_dtoa_r+0x906>
 800c252:	e063      	b.n	800c31c <_dtoa_r+0x94c>
 800c254:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c256:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c25a:	e746      	b.n	800c0ea <_dtoa_r+0x71a>
 800c25c:	9b07      	ldr	r3, [sp, #28]
 800c25e:	1e5c      	subs	r4, r3, #1
 800c260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c262:	42a3      	cmp	r3, r4
 800c264:	bfbf      	itttt	lt
 800c266:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c268:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c26a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c26c:	1ae3      	sublt	r3, r4, r3
 800c26e:	bfb4      	ite	lt
 800c270:	18d2      	addlt	r2, r2, r3
 800c272:	1b1c      	subge	r4, r3, r4
 800c274:	9b07      	ldr	r3, [sp, #28]
 800c276:	bfbc      	itt	lt
 800c278:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c27a:	2400      	movlt	r4, #0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	bfb5      	itete	lt
 800c280:	eba8 0603 	sublt.w	r6, r8, r3
 800c284:	9b07      	ldrge	r3, [sp, #28]
 800c286:	2300      	movlt	r3, #0
 800c288:	4646      	movge	r6, r8
 800c28a:	e730      	b.n	800c0ee <_dtoa_r+0x71e>
 800c28c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c28e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c290:	4646      	mov	r6, r8
 800c292:	e735      	b.n	800c100 <_dtoa_r+0x730>
 800c294:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c296:	e75c      	b.n	800c152 <_dtoa_r+0x782>
 800c298:	2300      	movs	r3, #0
 800c29a:	e788      	b.n	800c1ae <_dtoa_r+0x7de>
 800c29c:	3fe00000 	.word	0x3fe00000
 800c2a0:	40240000 	.word	0x40240000
 800c2a4:	40140000 	.word	0x40140000
 800c2a8:	9b02      	ldr	r3, [sp, #8]
 800c2aa:	e780      	b.n	800c1ae <_dtoa_r+0x7de>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2b0:	e782      	b.n	800c1b8 <_dtoa_r+0x7e8>
 800c2b2:	d099      	beq.n	800c1e8 <_dtoa_r+0x818>
 800c2b4:	9a08      	ldr	r2, [sp, #32]
 800c2b6:	331c      	adds	r3, #28
 800c2b8:	441a      	add	r2, r3
 800c2ba:	4498      	add	r8, r3
 800c2bc:	441e      	add	r6, r3
 800c2be:	9208      	str	r2, [sp, #32]
 800c2c0:	e792      	b.n	800c1e8 <_dtoa_r+0x818>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	e7f6      	b.n	800c2b4 <_dtoa_r+0x8e4>
 800c2c6:	9b07      	ldr	r3, [sp, #28]
 800c2c8:	9704      	str	r7, [sp, #16]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	dc20      	bgt.n	800c310 <_dtoa_r+0x940>
 800c2ce:	9300      	str	r3, [sp, #0]
 800c2d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	dd1e      	ble.n	800c314 <_dtoa_r+0x944>
 800c2d6:	9b00      	ldr	r3, [sp, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	f47f aec0 	bne.w	800c05e <_dtoa_r+0x68e>
 800c2de:	4621      	mov	r1, r4
 800c2e0:	2205      	movs	r2, #5
 800c2e2:	4658      	mov	r0, fp
 800c2e4:	f000 fa9a 	bl	800c81c <__multadd>
 800c2e8:	4601      	mov	r1, r0
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	4648      	mov	r0, r9
 800c2ee:	f000 fcf7 	bl	800cce0 <__mcmp>
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	f77f aeb3 	ble.w	800c05e <_dtoa_r+0x68e>
 800c2f8:	4656      	mov	r6, sl
 800c2fa:	2331      	movs	r3, #49	@ 0x31
 800c2fc:	f806 3b01 	strb.w	r3, [r6], #1
 800c300:	9b04      	ldr	r3, [sp, #16]
 800c302:	3301      	adds	r3, #1
 800c304:	9304      	str	r3, [sp, #16]
 800c306:	e6ae      	b.n	800c066 <_dtoa_r+0x696>
 800c308:	9c07      	ldr	r4, [sp, #28]
 800c30a:	9704      	str	r7, [sp, #16]
 800c30c:	4625      	mov	r5, r4
 800c30e:	e7f3      	b.n	800c2f8 <_dtoa_r+0x928>
 800c310:	9b07      	ldr	r3, [sp, #28]
 800c312:	9300      	str	r3, [sp, #0]
 800c314:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c316:	2b00      	cmp	r3, #0
 800c318:	f000 8104 	beq.w	800c524 <_dtoa_r+0xb54>
 800c31c:	2e00      	cmp	r6, #0
 800c31e:	dd05      	ble.n	800c32c <_dtoa_r+0x95c>
 800c320:	4629      	mov	r1, r5
 800c322:	4632      	mov	r2, r6
 800c324:	4658      	mov	r0, fp
 800c326:	f000 fc6f 	bl	800cc08 <__lshift>
 800c32a:	4605      	mov	r5, r0
 800c32c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d05a      	beq.n	800c3e8 <_dtoa_r+0xa18>
 800c332:	6869      	ldr	r1, [r5, #4]
 800c334:	4658      	mov	r0, fp
 800c336:	f000 fa0f 	bl	800c758 <_Balloc>
 800c33a:	4606      	mov	r6, r0
 800c33c:	b928      	cbnz	r0, 800c34a <_dtoa_r+0x97a>
 800c33e:	4b84      	ldr	r3, [pc, #528]	@ (800c550 <_dtoa_r+0xb80>)
 800c340:	4602      	mov	r2, r0
 800c342:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c346:	f7ff bb5a 	b.w	800b9fe <_dtoa_r+0x2e>
 800c34a:	692a      	ldr	r2, [r5, #16]
 800c34c:	3202      	adds	r2, #2
 800c34e:	0092      	lsls	r2, r2, #2
 800c350:	f105 010c 	add.w	r1, r5, #12
 800c354:	300c      	adds	r0, #12
 800c356:	f7ff fa9c 	bl	800b892 <memcpy>
 800c35a:	2201      	movs	r2, #1
 800c35c:	4631      	mov	r1, r6
 800c35e:	4658      	mov	r0, fp
 800c360:	f000 fc52 	bl	800cc08 <__lshift>
 800c364:	f10a 0301 	add.w	r3, sl, #1
 800c368:	9307      	str	r3, [sp, #28]
 800c36a:	9b00      	ldr	r3, [sp, #0]
 800c36c:	4453      	add	r3, sl
 800c36e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c370:	9b02      	ldr	r3, [sp, #8]
 800c372:	f003 0301 	and.w	r3, r3, #1
 800c376:	462f      	mov	r7, r5
 800c378:	930a      	str	r3, [sp, #40]	@ 0x28
 800c37a:	4605      	mov	r5, r0
 800c37c:	9b07      	ldr	r3, [sp, #28]
 800c37e:	4621      	mov	r1, r4
 800c380:	3b01      	subs	r3, #1
 800c382:	4648      	mov	r0, r9
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	f7ff fa99 	bl	800b8bc <quorem>
 800c38a:	4639      	mov	r1, r7
 800c38c:	9002      	str	r0, [sp, #8]
 800c38e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c392:	4648      	mov	r0, r9
 800c394:	f000 fca4 	bl	800cce0 <__mcmp>
 800c398:	462a      	mov	r2, r5
 800c39a:	9008      	str	r0, [sp, #32]
 800c39c:	4621      	mov	r1, r4
 800c39e:	4658      	mov	r0, fp
 800c3a0:	f000 fcba 	bl	800cd18 <__mdiff>
 800c3a4:	68c2      	ldr	r2, [r0, #12]
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	bb02      	cbnz	r2, 800c3ec <_dtoa_r+0xa1c>
 800c3aa:	4601      	mov	r1, r0
 800c3ac:	4648      	mov	r0, r9
 800c3ae:	f000 fc97 	bl	800cce0 <__mcmp>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	4631      	mov	r1, r6
 800c3b6:	4658      	mov	r0, fp
 800c3b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c3ba:	f000 fa0d 	bl	800c7d8 <_Bfree>
 800c3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3c2:	9e07      	ldr	r6, [sp, #28]
 800c3c4:	ea43 0102 	orr.w	r1, r3, r2
 800c3c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3ca:	4319      	orrs	r1, r3
 800c3cc:	d110      	bne.n	800c3f0 <_dtoa_r+0xa20>
 800c3ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c3d2:	d029      	beq.n	800c428 <_dtoa_r+0xa58>
 800c3d4:	9b08      	ldr	r3, [sp, #32]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	dd02      	ble.n	800c3e0 <_dtoa_r+0xa10>
 800c3da:	9b02      	ldr	r3, [sp, #8]
 800c3dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c3e0:	9b00      	ldr	r3, [sp, #0]
 800c3e2:	f883 8000 	strb.w	r8, [r3]
 800c3e6:	e63f      	b.n	800c068 <_dtoa_r+0x698>
 800c3e8:	4628      	mov	r0, r5
 800c3ea:	e7bb      	b.n	800c364 <_dtoa_r+0x994>
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	e7e1      	b.n	800c3b4 <_dtoa_r+0x9e4>
 800c3f0:	9b08      	ldr	r3, [sp, #32]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	db04      	blt.n	800c400 <_dtoa_r+0xa30>
 800c3f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3f8:	430b      	orrs	r3, r1
 800c3fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c3fc:	430b      	orrs	r3, r1
 800c3fe:	d120      	bne.n	800c442 <_dtoa_r+0xa72>
 800c400:	2a00      	cmp	r2, #0
 800c402:	dded      	ble.n	800c3e0 <_dtoa_r+0xa10>
 800c404:	4649      	mov	r1, r9
 800c406:	2201      	movs	r2, #1
 800c408:	4658      	mov	r0, fp
 800c40a:	f000 fbfd 	bl	800cc08 <__lshift>
 800c40e:	4621      	mov	r1, r4
 800c410:	4681      	mov	r9, r0
 800c412:	f000 fc65 	bl	800cce0 <__mcmp>
 800c416:	2800      	cmp	r0, #0
 800c418:	dc03      	bgt.n	800c422 <_dtoa_r+0xa52>
 800c41a:	d1e1      	bne.n	800c3e0 <_dtoa_r+0xa10>
 800c41c:	f018 0f01 	tst.w	r8, #1
 800c420:	d0de      	beq.n	800c3e0 <_dtoa_r+0xa10>
 800c422:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c426:	d1d8      	bne.n	800c3da <_dtoa_r+0xa0a>
 800c428:	9a00      	ldr	r2, [sp, #0]
 800c42a:	2339      	movs	r3, #57	@ 0x39
 800c42c:	7013      	strb	r3, [r2, #0]
 800c42e:	4633      	mov	r3, r6
 800c430:	461e      	mov	r6, r3
 800c432:	3b01      	subs	r3, #1
 800c434:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c438:	2a39      	cmp	r2, #57	@ 0x39
 800c43a:	d052      	beq.n	800c4e2 <_dtoa_r+0xb12>
 800c43c:	3201      	adds	r2, #1
 800c43e:	701a      	strb	r2, [r3, #0]
 800c440:	e612      	b.n	800c068 <_dtoa_r+0x698>
 800c442:	2a00      	cmp	r2, #0
 800c444:	dd07      	ble.n	800c456 <_dtoa_r+0xa86>
 800c446:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c44a:	d0ed      	beq.n	800c428 <_dtoa_r+0xa58>
 800c44c:	9a00      	ldr	r2, [sp, #0]
 800c44e:	f108 0301 	add.w	r3, r8, #1
 800c452:	7013      	strb	r3, [r2, #0]
 800c454:	e608      	b.n	800c068 <_dtoa_r+0x698>
 800c456:	9b07      	ldr	r3, [sp, #28]
 800c458:	9a07      	ldr	r2, [sp, #28]
 800c45a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c45e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c460:	4293      	cmp	r3, r2
 800c462:	d028      	beq.n	800c4b6 <_dtoa_r+0xae6>
 800c464:	4649      	mov	r1, r9
 800c466:	2300      	movs	r3, #0
 800c468:	220a      	movs	r2, #10
 800c46a:	4658      	mov	r0, fp
 800c46c:	f000 f9d6 	bl	800c81c <__multadd>
 800c470:	42af      	cmp	r7, r5
 800c472:	4681      	mov	r9, r0
 800c474:	f04f 0300 	mov.w	r3, #0
 800c478:	f04f 020a 	mov.w	r2, #10
 800c47c:	4639      	mov	r1, r7
 800c47e:	4658      	mov	r0, fp
 800c480:	d107      	bne.n	800c492 <_dtoa_r+0xac2>
 800c482:	f000 f9cb 	bl	800c81c <__multadd>
 800c486:	4607      	mov	r7, r0
 800c488:	4605      	mov	r5, r0
 800c48a:	9b07      	ldr	r3, [sp, #28]
 800c48c:	3301      	adds	r3, #1
 800c48e:	9307      	str	r3, [sp, #28]
 800c490:	e774      	b.n	800c37c <_dtoa_r+0x9ac>
 800c492:	f000 f9c3 	bl	800c81c <__multadd>
 800c496:	4629      	mov	r1, r5
 800c498:	4607      	mov	r7, r0
 800c49a:	2300      	movs	r3, #0
 800c49c:	220a      	movs	r2, #10
 800c49e:	4658      	mov	r0, fp
 800c4a0:	f000 f9bc 	bl	800c81c <__multadd>
 800c4a4:	4605      	mov	r5, r0
 800c4a6:	e7f0      	b.n	800c48a <_dtoa_r+0xaba>
 800c4a8:	9b00      	ldr	r3, [sp, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	bfcc      	ite	gt
 800c4ae:	461e      	movgt	r6, r3
 800c4b0:	2601      	movle	r6, #1
 800c4b2:	4456      	add	r6, sl
 800c4b4:	2700      	movs	r7, #0
 800c4b6:	4649      	mov	r1, r9
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	4658      	mov	r0, fp
 800c4bc:	f000 fba4 	bl	800cc08 <__lshift>
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	4681      	mov	r9, r0
 800c4c4:	f000 fc0c 	bl	800cce0 <__mcmp>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	dcb0      	bgt.n	800c42e <_dtoa_r+0xa5e>
 800c4cc:	d102      	bne.n	800c4d4 <_dtoa_r+0xb04>
 800c4ce:	f018 0f01 	tst.w	r8, #1
 800c4d2:	d1ac      	bne.n	800c42e <_dtoa_r+0xa5e>
 800c4d4:	4633      	mov	r3, r6
 800c4d6:	461e      	mov	r6, r3
 800c4d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4dc:	2a30      	cmp	r2, #48	@ 0x30
 800c4de:	d0fa      	beq.n	800c4d6 <_dtoa_r+0xb06>
 800c4e0:	e5c2      	b.n	800c068 <_dtoa_r+0x698>
 800c4e2:	459a      	cmp	sl, r3
 800c4e4:	d1a4      	bne.n	800c430 <_dtoa_r+0xa60>
 800c4e6:	9b04      	ldr	r3, [sp, #16]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	9304      	str	r3, [sp, #16]
 800c4ec:	2331      	movs	r3, #49	@ 0x31
 800c4ee:	f88a 3000 	strb.w	r3, [sl]
 800c4f2:	e5b9      	b.n	800c068 <_dtoa_r+0x698>
 800c4f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c4f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c554 <_dtoa_r+0xb84>
 800c4fa:	b11b      	cbz	r3, 800c504 <_dtoa_r+0xb34>
 800c4fc:	f10a 0308 	add.w	r3, sl, #8
 800c500:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c502:	6013      	str	r3, [r2, #0]
 800c504:	4650      	mov	r0, sl
 800c506:	b019      	add	sp, #100	@ 0x64
 800c508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c50e:	2b01      	cmp	r3, #1
 800c510:	f77f ae37 	ble.w	800c182 <_dtoa_r+0x7b2>
 800c514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c516:	930a      	str	r3, [sp, #40]	@ 0x28
 800c518:	2001      	movs	r0, #1
 800c51a:	e655      	b.n	800c1c8 <_dtoa_r+0x7f8>
 800c51c:	9b00      	ldr	r3, [sp, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	f77f aed6 	ble.w	800c2d0 <_dtoa_r+0x900>
 800c524:	4656      	mov	r6, sl
 800c526:	4621      	mov	r1, r4
 800c528:	4648      	mov	r0, r9
 800c52a:	f7ff f9c7 	bl	800b8bc <quorem>
 800c52e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c532:	f806 8b01 	strb.w	r8, [r6], #1
 800c536:	9b00      	ldr	r3, [sp, #0]
 800c538:	eba6 020a 	sub.w	r2, r6, sl
 800c53c:	4293      	cmp	r3, r2
 800c53e:	ddb3      	ble.n	800c4a8 <_dtoa_r+0xad8>
 800c540:	4649      	mov	r1, r9
 800c542:	2300      	movs	r3, #0
 800c544:	220a      	movs	r2, #10
 800c546:	4658      	mov	r0, fp
 800c548:	f000 f968 	bl	800c81c <__multadd>
 800c54c:	4681      	mov	r9, r0
 800c54e:	e7ea      	b.n	800c526 <_dtoa_r+0xb56>
 800c550:	0800efe5 	.word	0x0800efe5
 800c554:	0800ef69 	.word	0x0800ef69

0800c558 <_free_r>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	4605      	mov	r5, r0
 800c55c:	2900      	cmp	r1, #0
 800c55e:	d041      	beq.n	800c5e4 <_free_r+0x8c>
 800c560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c564:	1f0c      	subs	r4, r1, #4
 800c566:	2b00      	cmp	r3, #0
 800c568:	bfb8      	it	lt
 800c56a:	18e4      	addlt	r4, r4, r3
 800c56c:	f000 f8e8 	bl	800c740 <__malloc_lock>
 800c570:	4a1d      	ldr	r2, [pc, #116]	@ (800c5e8 <_free_r+0x90>)
 800c572:	6813      	ldr	r3, [r2, #0]
 800c574:	b933      	cbnz	r3, 800c584 <_free_r+0x2c>
 800c576:	6063      	str	r3, [r4, #4]
 800c578:	6014      	str	r4, [r2, #0]
 800c57a:	4628      	mov	r0, r5
 800c57c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c580:	f000 b8e4 	b.w	800c74c <__malloc_unlock>
 800c584:	42a3      	cmp	r3, r4
 800c586:	d908      	bls.n	800c59a <_free_r+0x42>
 800c588:	6820      	ldr	r0, [r4, #0]
 800c58a:	1821      	adds	r1, r4, r0
 800c58c:	428b      	cmp	r3, r1
 800c58e:	bf01      	itttt	eq
 800c590:	6819      	ldreq	r1, [r3, #0]
 800c592:	685b      	ldreq	r3, [r3, #4]
 800c594:	1809      	addeq	r1, r1, r0
 800c596:	6021      	streq	r1, [r4, #0]
 800c598:	e7ed      	b.n	800c576 <_free_r+0x1e>
 800c59a:	461a      	mov	r2, r3
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	b10b      	cbz	r3, 800c5a4 <_free_r+0x4c>
 800c5a0:	42a3      	cmp	r3, r4
 800c5a2:	d9fa      	bls.n	800c59a <_free_r+0x42>
 800c5a4:	6811      	ldr	r1, [r2, #0]
 800c5a6:	1850      	adds	r0, r2, r1
 800c5a8:	42a0      	cmp	r0, r4
 800c5aa:	d10b      	bne.n	800c5c4 <_free_r+0x6c>
 800c5ac:	6820      	ldr	r0, [r4, #0]
 800c5ae:	4401      	add	r1, r0
 800c5b0:	1850      	adds	r0, r2, r1
 800c5b2:	4283      	cmp	r3, r0
 800c5b4:	6011      	str	r1, [r2, #0]
 800c5b6:	d1e0      	bne.n	800c57a <_free_r+0x22>
 800c5b8:	6818      	ldr	r0, [r3, #0]
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	6053      	str	r3, [r2, #4]
 800c5be:	4408      	add	r0, r1
 800c5c0:	6010      	str	r0, [r2, #0]
 800c5c2:	e7da      	b.n	800c57a <_free_r+0x22>
 800c5c4:	d902      	bls.n	800c5cc <_free_r+0x74>
 800c5c6:	230c      	movs	r3, #12
 800c5c8:	602b      	str	r3, [r5, #0]
 800c5ca:	e7d6      	b.n	800c57a <_free_r+0x22>
 800c5cc:	6820      	ldr	r0, [r4, #0]
 800c5ce:	1821      	adds	r1, r4, r0
 800c5d0:	428b      	cmp	r3, r1
 800c5d2:	bf04      	itt	eq
 800c5d4:	6819      	ldreq	r1, [r3, #0]
 800c5d6:	685b      	ldreq	r3, [r3, #4]
 800c5d8:	6063      	str	r3, [r4, #4]
 800c5da:	bf04      	itt	eq
 800c5dc:	1809      	addeq	r1, r1, r0
 800c5de:	6021      	streq	r1, [r4, #0]
 800c5e0:	6054      	str	r4, [r2, #4]
 800c5e2:	e7ca      	b.n	800c57a <_free_r+0x22>
 800c5e4:	bd38      	pop	{r3, r4, r5, pc}
 800c5e6:	bf00      	nop
 800c5e8:	20000c9c 	.word	0x20000c9c

0800c5ec <malloc>:
 800c5ec:	4b02      	ldr	r3, [pc, #8]	@ (800c5f8 <malloc+0xc>)
 800c5ee:	4601      	mov	r1, r0
 800c5f0:	6818      	ldr	r0, [r3, #0]
 800c5f2:	f000 b825 	b.w	800c640 <_malloc_r>
 800c5f6:	bf00      	nop
 800c5f8:	20000050 	.word	0x20000050

0800c5fc <sbrk_aligned>:
 800c5fc:	b570      	push	{r4, r5, r6, lr}
 800c5fe:	4e0f      	ldr	r6, [pc, #60]	@ (800c63c <sbrk_aligned+0x40>)
 800c600:	460c      	mov	r4, r1
 800c602:	6831      	ldr	r1, [r6, #0]
 800c604:	4605      	mov	r5, r0
 800c606:	b911      	cbnz	r1, 800c60e <sbrk_aligned+0x12>
 800c608:	f001 ffd2 	bl	800e5b0 <_sbrk_r>
 800c60c:	6030      	str	r0, [r6, #0]
 800c60e:	4621      	mov	r1, r4
 800c610:	4628      	mov	r0, r5
 800c612:	f001 ffcd 	bl	800e5b0 <_sbrk_r>
 800c616:	1c43      	adds	r3, r0, #1
 800c618:	d103      	bne.n	800c622 <sbrk_aligned+0x26>
 800c61a:	f04f 34ff 	mov.w	r4, #4294967295
 800c61e:	4620      	mov	r0, r4
 800c620:	bd70      	pop	{r4, r5, r6, pc}
 800c622:	1cc4      	adds	r4, r0, #3
 800c624:	f024 0403 	bic.w	r4, r4, #3
 800c628:	42a0      	cmp	r0, r4
 800c62a:	d0f8      	beq.n	800c61e <sbrk_aligned+0x22>
 800c62c:	1a21      	subs	r1, r4, r0
 800c62e:	4628      	mov	r0, r5
 800c630:	f001 ffbe 	bl	800e5b0 <_sbrk_r>
 800c634:	3001      	adds	r0, #1
 800c636:	d1f2      	bne.n	800c61e <sbrk_aligned+0x22>
 800c638:	e7ef      	b.n	800c61a <sbrk_aligned+0x1e>
 800c63a:	bf00      	nop
 800c63c:	20000c98 	.word	0x20000c98

0800c640 <_malloc_r>:
 800c640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c644:	1ccd      	adds	r5, r1, #3
 800c646:	f025 0503 	bic.w	r5, r5, #3
 800c64a:	3508      	adds	r5, #8
 800c64c:	2d0c      	cmp	r5, #12
 800c64e:	bf38      	it	cc
 800c650:	250c      	movcc	r5, #12
 800c652:	2d00      	cmp	r5, #0
 800c654:	4606      	mov	r6, r0
 800c656:	db01      	blt.n	800c65c <_malloc_r+0x1c>
 800c658:	42a9      	cmp	r1, r5
 800c65a:	d904      	bls.n	800c666 <_malloc_r+0x26>
 800c65c:	230c      	movs	r3, #12
 800c65e:	6033      	str	r3, [r6, #0]
 800c660:	2000      	movs	r0, #0
 800c662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c666:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c73c <_malloc_r+0xfc>
 800c66a:	f000 f869 	bl	800c740 <__malloc_lock>
 800c66e:	f8d8 3000 	ldr.w	r3, [r8]
 800c672:	461c      	mov	r4, r3
 800c674:	bb44      	cbnz	r4, 800c6c8 <_malloc_r+0x88>
 800c676:	4629      	mov	r1, r5
 800c678:	4630      	mov	r0, r6
 800c67a:	f7ff ffbf 	bl	800c5fc <sbrk_aligned>
 800c67e:	1c43      	adds	r3, r0, #1
 800c680:	4604      	mov	r4, r0
 800c682:	d158      	bne.n	800c736 <_malloc_r+0xf6>
 800c684:	f8d8 4000 	ldr.w	r4, [r8]
 800c688:	4627      	mov	r7, r4
 800c68a:	2f00      	cmp	r7, #0
 800c68c:	d143      	bne.n	800c716 <_malloc_r+0xd6>
 800c68e:	2c00      	cmp	r4, #0
 800c690:	d04b      	beq.n	800c72a <_malloc_r+0xea>
 800c692:	6823      	ldr	r3, [r4, #0]
 800c694:	4639      	mov	r1, r7
 800c696:	4630      	mov	r0, r6
 800c698:	eb04 0903 	add.w	r9, r4, r3
 800c69c:	f001 ff88 	bl	800e5b0 <_sbrk_r>
 800c6a0:	4581      	cmp	r9, r0
 800c6a2:	d142      	bne.n	800c72a <_malloc_r+0xea>
 800c6a4:	6821      	ldr	r1, [r4, #0]
 800c6a6:	1a6d      	subs	r5, r5, r1
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	f7ff ffa6 	bl	800c5fc <sbrk_aligned>
 800c6b0:	3001      	adds	r0, #1
 800c6b2:	d03a      	beq.n	800c72a <_malloc_r+0xea>
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	442b      	add	r3, r5
 800c6b8:	6023      	str	r3, [r4, #0]
 800c6ba:	f8d8 3000 	ldr.w	r3, [r8]
 800c6be:	685a      	ldr	r2, [r3, #4]
 800c6c0:	bb62      	cbnz	r2, 800c71c <_malloc_r+0xdc>
 800c6c2:	f8c8 7000 	str.w	r7, [r8]
 800c6c6:	e00f      	b.n	800c6e8 <_malloc_r+0xa8>
 800c6c8:	6822      	ldr	r2, [r4, #0]
 800c6ca:	1b52      	subs	r2, r2, r5
 800c6cc:	d420      	bmi.n	800c710 <_malloc_r+0xd0>
 800c6ce:	2a0b      	cmp	r2, #11
 800c6d0:	d917      	bls.n	800c702 <_malloc_r+0xc2>
 800c6d2:	1961      	adds	r1, r4, r5
 800c6d4:	42a3      	cmp	r3, r4
 800c6d6:	6025      	str	r5, [r4, #0]
 800c6d8:	bf18      	it	ne
 800c6da:	6059      	strne	r1, [r3, #4]
 800c6dc:	6863      	ldr	r3, [r4, #4]
 800c6de:	bf08      	it	eq
 800c6e0:	f8c8 1000 	streq.w	r1, [r8]
 800c6e4:	5162      	str	r2, [r4, r5]
 800c6e6:	604b      	str	r3, [r1, #4]
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	f000 f82f 	bl	800c74c <__malloc_unlock>
 800c6ee:	f104 000b 	add.w	r0, r4, #11
 800c6f2:	1d23      	adds	r3, r4, #4
 800c6f4:	f020 0007 	bic.w	r0, r0, #7
 800c6f8:	1ac2      	subs	r2, r0, r3
 800c6fa:	bf1c      	itt	ne
 800c6fc:	1a1b      	subne	r3, r3, r0
 800c6fe:	50a3      	strne	r3, [r4, r2]
 800c700:	e7af      	b.n	800c662 <_malloc_r+0x22>
 800c702:	6862      	ldr	r2, [r4, #4]
 800c704:	42a3      	cmp	r3, r4
 800c706:	bf0c      	ite	eq
 800c708:	f8c8 2000 	streq.w	r2, [r8]
 800c70c:	605a      	strne	r2, [r3, #4]
 800c70e:	e7eb      	b.n	800c6e8 <_malloc_r+0xa8>
 800c710:	4623      	mov	r3, r4
 800c712:	6864      	ldr	r4, [r4, #4]
 800c714:	e7ae      	b.n	800c674 <_malloc_r+0x34>
 800c716:	463c      	mov	r4, r7
 800c718:	687f      	ldr	r7, [r7, #4]
 800c71a:	e7b6      	b.n	800c68a <_malloc_r+0x4a>
 800c71c:	461a      	mov	r2, r3
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	42a3      	cmp	r3, r4
 800c722:	d1fb      	bne.n	800c71c <_malloc_r+0xdc>
 800c724:	2300      	movs	r3, #0
 800c726:	6053      	str	r3, [r2, #4]
 800c728:	e7de      	b.n	800c6e8 <_malloc_r+0xa8>
 800c72a:	230c      	movs	r3, #12
 800c72c:	6033      	str	r3, [r6, #0]
 800c72e:	4630      	mov	r0, r6
 800c730:	f000 f80c 	bl	800c74c <__malloc_unlock>
 800c734:	e794      	b.n	800c660 <_malloc_r+0x20>
 800c736:	6005      	str	r5, [r0, #0]
 800c738:	e7d6      	b.n	800c6e8 <_malloc_r+0xa8>
 800c73a:	bf00      	nop
 800c73c:	20000c9c 	.word	0x20000c9c

0800c740 <__malloc_lock>:
 800c740:	4801      	ldr	r0, [pc, #4]	@ (800c748 <__malloc_lock+0x8>)
 800c742:	f7ff b8a4 	b.w	800b88e <__retarget_lock_acquire_recursive>
 800c746:	bf00      	nop
 800c748:	20000c94 	.word	0x20000c94

0800c74c <__malloc_unlock>:
 800c74c:	4801      	ldr	r0, [pc, #4]	@ (800c754 <__malloc_unlock+0x8>)
 800c74e:	f7ff b89f 	b.w	800b890 <__retarget_lock_release_recursive>
 800c752:	bf00      	nop
 800c754:	20000c94 	.word	0x20000c94

0800c758 <_Balloc>:
 800c758:	b570      	push	{r4, r5, r6, lr}
 800c75a:	69c6      	ldr	r6, [r0, #28]
 800c75c:	4604      	mov	r4, r0
 800c75e:	460d      	mov	r5, r1
 800c760:	b976      	cbnz	r6, 800c780 <_Balloc+0x28>
 800c762:	2010      	movs	r0, #16
 800c764:	f7ff ff42 	bl	800c5ec <malloc>
 800c768:	4602      	mov	r2, r0
 800c76a:	61e0      	str	r0, [r4, #28]
 800c76c:	b920      	cbnz	r0, 800c778 <_Balloc+0x20>
 800c76e:	4b18      	ldr	r3, [pc, #96]	@ (800c7d0 <_Balloc+0x78>)
 800c770:	4818      	ldr	r0, [pc, #96]	@ (800c7d4 <_Balloc+0x7c>)
 800c772:	216b      	movs	r1, #107	@ 0x6b
 800c774:	f001 ff34 	bl	800e5e0 <__assert_func>
 800c778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c77c:	6006      	str	r6, [r0, #0]
 800c77e:	60c6      	str	r6, [r0, #12]
 800c780:	69e6      	ldr	r6, [r4, #28]
 800c782:	68f3      	ldr	r3, [r6, #12]
 800c784:	b183      	cbz	r3, 800c7a8 <_Balloc+0x50>
 800c786:	69e3      	ldr	r3, [r4, #28]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c78e:	b9b8      	cbnz	r0, 800c7c0 <_Balloc+0x68>
 800c790:	2101      	movs	r1, #1
 800c792:	fa01 f605 	lsl.w	r6, r1, r5
 800c796:	1d72      	adds	r2, r6, #5
 800c798:	0092      	lsls	r2, r2, #2
 800c79a:	4620      	mov	r0, r4
 800c79c:	f001 ff3e 	bl	800e61c <_calloc_r>
 800c7a0:	b160      	cbz	r0, 800c7bc <_Balloc+0x64>
 800c7a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c7a6:	e00e      	b.n	800c7c6 <_Balloc+0x6e>
 800c7a8:	2221      	movs	r2, #33	@ 0x21
 800c7aa:	2104      	movs	r1, #4
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	f001 ff35 	bl	800e61c <_calloc_r>
 800c7b2:	69e3      	ldr	r3, [r4, #28]
 800c7b4:	60f0      	str	r0, [r6, #12]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d1e4      	bne.n	800c786 <_Balloc+0x2e>
 800c7bc:	2000      	movs	r0, #0
 800c7be:	bd70      	pop	{r4, r5, r6, pc}
 800c7c0:	6802      	ldr	r2, [r0, #0]
 800c7c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c7cc:	e7f7      	b.n	800c7be <_Balloc+0x66>
 800c7ce:	bf00      	nop
 800c7d0:	0800ef76 	.word	0x0800ef76
 800c7d4:	0800eff6 	.word	0x0800eff6

0800c7d8 <_Bfree>:
 800c7d8:	b570      	push	{r4, r5, r6, lr}
 800c7da:	69c6      	ldr	r6, [r0, #28]
 800c7dc:	4605      	mov	r5, r0
 800c7de:	460c      	mov	r4, r1
 800c7e0:	b976      	cbnz	r6, 800c800 <_Bfree+0x28>
 800c7e2:	2010      	movs	r0, #16
 800c7e4:	f7ff ff02 	bl	800c5ec <malloc>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	61e8      	str	r0, [r5, #28]
 800c7ec:	b920      	cbnz	r0, 800c7f8 <_Bfree+0x20>
 800c7ee:	4b09      	ldr	r3, [pc, #36]	@ (800c814 <_Bfree+0x3c>)
 800c7f0:	4809      	ldr	r0, [pc, #36]	@ (800c818 <_Bfree+0x40>)
 800c7f2:	218f      	movs	r1, #143	@ 0x8f
 800c7f4:	f001 fef4 	bl	800e5e0 <__assert_func>
 800c7f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7fc:	6006      	str	r6, [r0, #0]
 800c7fe:	60c6      	str	r6, [r0, #12]
 800c800:	b13c      	cbz	r4, 800c812 <_Bfree+0x3a>
 800c802:	69eb      	ldr	r3, [r5, #28]
 800c804:	6862      	ldr	r2, [r4, #4]
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c80c:	6021      	str	r1, [r4, #0]
 800c80e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c812:	bd70      	pop	{r4, r5, r6, pc}
 800c814:	0800ef76 	.word	0x0800ef76
 800c818:	0800eff6 	.word	0x0800eff6

0800c81c <__multadd>:
 800c81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c820:	690d      	ldr	r5, [r1, #16]
 800c822:	4607      	mov	r7, r0
 800c824:	460c      	mov	r4, r1
 800c826:	461e      	mov	r6, r3
 800c828:	f101 0c14 	add.w	ip, r1, #20
 800c82c:	2000      	movs	r0, #0
 800c82e:	f8dc 3000 	ldr.w	r3, [ip]
 800c832:	b299      	uxth	r1, r3
 800c834:	fb02 6101 	mla	r1, r2, r1, r6
 800c838:	0c1e      	lsrs	r6, r3, #16
 800c83a:	0c0b      	lsrs	r3, r1, #16
 800c83c:	fb02 3306 	mla	r3, r2, r6, r3
 800c840:	b289      	uxth	r1, r1
 800c842:	3001      	adds	r0, #1
 800c844:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c848:	4285      	cmp	r5, r0
 800c84a:	f84c 1b04 	str.w	r1, [ip], #4
 800c84e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c852:	dcec      	bgt.n	800c82e <__multadd+0x12>
 800c854:	b30e      	cbz	r6, 800c89a <__multadd+0x7e>
 800c856:	68a3      	ldr	r3, [r4, #8]
 800c858:	42ab      	cmp	r3, r5
 800c85a:	dc19      	bgt.n	800c890 <__multadd+0x74>
 800c85c:	6861      	ldr	r1, [r4, #4]
 800c85e:	4638      	mov	r0, r7
 800c860:	3101      	adds	r1, #1
 800c862:	f7ff ff79 	bl	800c758 <_Balloc>
 800c866:	4680      	mov	r8, r0
 800c868:	b928      	cbnz	r0, 800c876 <__multadd+0x5a>
 800c86a:	4602      	mov	r2, r0
 800c86c:	4b0c      	ldr	r3, [pc, #48]	@ (800c8a0 <__multadd+0x84>)
 800c86e:	480d      	ldr	r0, [pc, #52]	@ (800c8a4 <__multadd+0x88>)
 800c870:	21ba      	movs	r1, #186	@ 0xba
 800c872:	f001 feb5 	bl	800e5e0 <__assert_func>
 800c876:	6922      	ldr	r2, [r4, #16]
 800c878:	3202      	adds	r2, #2
 800c87a:	f104 010c 	add.w	r1, r4, #12
 800c87e:	0092      	lsls	r2, r2, #2
 800c880:	300c      	adds	r0, #12
 800c882:	f7ff f806 	bl	800b892 <memcpy>
 800c886:	4621      	mov	r1, r4
 800c888:	4638      	mov	r0, r7
 800c88a:	f7ff ffa5 	bl	800c7d8 <_Bfree>
 800c88e:	4644      	mov	r4, r8
 800c890:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c894:	3501      	adds	r5, #1
 800c896:	615e      	str	r6, [r3, #20]
 800c898:	6125      	str	r5, [r4, #16]
 800c89a:	4620      	mov	r0, r4
 800c89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a0:	0800efe5 	.word	0x0800efe5
 800c8a4:	0800eff6 	.word	0x0800eff6

0800c8a8 <__s2b>:
 800c8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8ac:	460c      	mov	r4, r1
 800c8ae:	4615      	mov	r5, r2
 800c8b0:	461f      	mov	r7, r3
 800c8b2:	2209      	movs	r2, #9
 800c8b4:	3308      	adds	r3, #8
 800c8b6:	4606      	mov	r6, r0
 800c8b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8bc:	2100      	movs	r1, #0
 800c8be:	2201      	movs	r2, #1
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	db09      	blt.n	800c8d8 <__s2b+0x30>
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f7ff ff47 	bl	800c758 <_Balloc>
 800c8ca:	b940      	cbnz	r0, 800c8de <__s2b+0x36>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	4b19      	ldr	r3, [pc, #100]	@ (800c934 <__s2b+0x8c>)
 800c8d0:	4819      	ldr	r0, [pc, #100]	@ (800c938 <__s2b+0x90>)
 800c8d2:	21d3      	movs	r1, #211	@ 0xd3
 800c8d4:	f001 fe84 	bl	800e5e0 <__assert_func>
 800c8d8:	0052      	lsls	r2, r2, #1
 800c8da:	3101      	adds	r1, #1
 800c8dc:	e7f0      	b.n	800c8c0 <__s2b+0x18>
 800c8de:	9b08      	ldr	r3, [sp, #32]
 800c8e0:	6143      	str	r3, [r0, #20]
 800c8e2:	2d09      	cmp	r5, #9
 800c8e4:	f04f 0301 	mov.w	r3, #1
 800c8e8:	6103      	str	r3, [r0, #16]
 800c8ea:	dd16      	ble.n	800c91a <__s2b+0x72>
 800c8ec:	f104 0909 	add.w	r9, r4, #9
 800c8f0:	46c8      	mov	r8, r9
 800c8f2:	442c      	add	r4, r5
 800c8f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c8f8:	4601      	mov	r1, r0
 800c8fa:	3b30      	subs	r3, #48	@ 0x30
 800c8fc:	220a      	movs	r2, #10
 800c8fe:	4630      	mov	r0, r6
 800c900:	f7ff ff8c 	bl	800c81c <__multadd>
 800c904:	45a0      	cmp	r8, r4
 800c906:	d1f5      	bne.n	800c8f4 <__s2b+0x4c>
 800c908:	f1a5 0408 	sub.w	r4, r5, #8
 800c90c:	444c      	add	r4, r9
 800c90e:	1b2d      	subs	r5, r5, r4
 800c910:	1963      	adds	r3, r4, r5
 800c912:	42bb      	cmp	r3, r7
 800c914:	db04      	blt.n	800c920 <__s2b+0x78>
 800c916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c91a:	340a      	adds	r4, #10
 800c91c:	2509      	movs	r5, #9
 800c91e:	e7f6      	b.n	800c90e <__s2b+0x66>
 800c920:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c924:	4601      	mov	r1, r0
 800c926:	3b30      	subs	r3, #48	@ 0x30
 800c928:	220a      	movs	r2, #10
 800c92a:	4630      	mov	r0, r6
 800c92c:	f7ff ff76 	bl	800c81c <__multadd>
 800c930:	e7ee      	b.n	800c910 <__s2b+0x68>
 800c932:	bf00      	nop
 800c934:	0800efe5 	.word	0x0800efe5
 800c938:	0800eff6 	.word	0x0800eff6

0800c93c <__hi0bits>:
 800c93c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c940:	4603      	mov	r3, r0
 800c942:	bf36      	itet	cc
 800c944:	0403      	lslcc	r3, r0, #16
 800c946:	2000      	movcs	r0, #0
 800c948:	2010      	movcc	r0, #16
 800c94a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c94e:	bf3c      	itt	cc
 800c950:	021b      	lslcc	r3, r3, #8
 800c952:	3008      	addcc	r0, #8
 800c954:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c958:	bf3c      	itt	cc
 800c95a:	011b      	lslcc	r3, r3, #4
 800c95c:	3004      	addcc	r0, #4
 800c95e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c962:	bf3c      	itt	cc
 800c964:	009b      	lslcc	r3, r3, #2
 800c966:	3002      	addcc	r0, #2
 800c968:	2b00      	cmp	r3, #0
 800c96a:	db05      	blt.n	800c978 <__hi0bits+0x3c>
 800c96c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c970:	f100 0001 	add.w	r0, r0, #1
 800c974:	bf08      	it	eq
 800c976:	2020      	moveq	r0, #32
 800c978:	4770      	bx	lr

0800c97a <__lo0bits>:
 800c97a:	6803      	ldr	r3, [r0, #0]
 800c97c:	4602      	mov	r2, r0
 800c97e:	f013 0007 	ands.w	r0, r3, #7
 800c982:	d00b      	beq.n	800c99c <__lo0bits+0x22>
 800c984:	07d9      	lsls	r1, r3, #31
 800c986:	d421      	bmi.n	800c9cc <__lo0bits+0x52>
 800c988:	0798      	lsls	r0, r3, #30
 800c98a:	bf49      	itett	mi
 800c98c:	085b      	lsrmi	r3, r3, #1
 800c98e:	089b      	lsrpl	r3, r3, #2
 800c990:	2001      	movmi	r0, #1
 800c992:	6013      	strmi	r3, [r2, #0]
 800c994:	bf5c      	itt	pl
 800c996:	6013      	strpl	r3, [r2, #0]
 800c998:	2002      	movpl	r0, #2
 800c99a:	4770      	bx	lr
 800c99c:	b299      	uxth	r1, r3
 800c99e:	b909      	cbnz	r1, 800c9a4 <__lo0bits+0x2a>
 800c9a0:	0c1b      	lsrs	r3, r3, #16
 800c9a2:	2010      	movs	r0, #16
 800c9a4:	b2d9      	uxtb	r1, r3
 800c9a6:	b909      	cbnz	r1, 800c9ac <__lo0bits+0x32>
 800c9a8:	3008      	adds	r0, #8
 800c9aa:	0a1b      	lsrs	r3, r3, #8
 800c9ac:	0719      	lsls	r1, r3, #28
 800c9ae:	bf04      	itt	eq
 800c9b0:	091b      	lsreq	r3, r3, #4
 800c9b2:	3004      	addeq	r0, #4
 800c9b4:	0799      	lsls	r1, r3, #30
 800c9b6:	bf04      	itt	eq
 800c9b8:	089b      	lsreq	r3, r3, #2
 800c9ba:	3002      	addeq	r0, #2
 800c9bc:	07d9      	lsls	r1, r3, #31
 800c9be:	d403      	bmi.n	800c9c8 <__lo0bits+0x4e>
 800c9c0:	085b      	lsrs	r3, r3, #1
 800c9c2:	f100 0001 	add.w	r0, r0, #1
 800c9c6:	d003      	beq.n	800c9d0 <__lo0bits+0x56>
 800c9c8:	6013      	str	r3, [r2, #0]
 800c9ca:	4770      	bx	lr
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	4770      	bx	lr
 800c9d0:	2020      	movs	r0, #32
 800c9d2:	4770      	bx	lr

0800c9d4 <__i2b>:
 800c9d4:	b510      	push	{r4, lr}
 800c9d6:	460c      	mov	r4, r1
 800c9d8:	2101      	movs	r1, #1
 800c9da:	f7ff febd 	bl	800c758 <_Balloc>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	b928      	cbnz	r0, 800c9ee <__i2b+0x1a>
 800c9e2:	4b05      	ldr	r3, [pc, #20]	@ (800c9f8 <__i2b+0x24>)
 800c9e4:	4805      	ldr	r0, [pc, #20]	@ (800c9fc <__i2b+0x28>)
 800c9e6:	f240 1145 	movw	r1, #325	@ 0x145
 800c9ea:	f001 fdf9 	bl	800e5e0 <__assert_func>
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	6144      	str	r4, [r0, #20]
 800c9f2:	6103      	str	r3, [r0, #16]
 800c9f4:	bd10      	pop	{r4, pc}
 800c9f6:	bf00      	nop
 800c9f8:	0800efe5 	.word	0x0800efe5
 800c9fc:	0800eff6 	.word	0x0800eff6

0800ca00 <__multiply>:
 800ca00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca04:	4614      	mov	r4, r2
 800ca06:	690a      	ldr	r2, [r1, #16]
 800ca08:	6923      	ldr	r3, [r4, #16]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	bfa8      	it	ge
 800ca0e:	4623      	movge	r3, r4
 800ca10:	460f      	mov	r7, r1
 800ca12:	bfa4      	itt	ge
 800ca14:	460c      	movge	r4, r1
 800ca16:	461f      	movge	r7, r3
 800ca18:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ca1c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ca20:	68a3      	ldr	r3, [r4, #8]
 800ca22:	6861      	ldr	r1, [r4, #4]
 800ca24:	eb0a 0609 	add.w	r6, sl, r9
 800ca28:	42b3      	cmp	r3, r6
 800ca2a:	b085      	sub	sp, #20
 800ca2c:	bfb8      	it	lt
 800ca2e:	3101      	addlt	r1, #1
 800ca30:	f7ff fe92 	bl	800c758 <_Balloc>
 800ca34:	b930      	cbnz	r0, 800ca44 <__multiply+0x44>
 800ca36:	4602      	mov	r2, r0
 800ca38:	4b44      	ldr	r3, [pc, #272]	@ (800cb4c <__multiply+0x14c>)
 800ca3a:	4845      	ldr	r0, [pc, #276]	@ (800cb50 <__multiply+0x150>)
 800ca3c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ca40:	f001 fdce 	bl	800e5e0 <__assert_func>
 800ca44:	f100 0514 	add.w	r5, r0, #20
 800ca48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ca4c:	462b      	mov	r3, r5
 800ca4e:	2200      	movs	r2, #0
 800ca50:	4543      	cmp	r3, r8
 800ca52:	d321      	bcc.n	800ca98 <__multiply+0x98>
 800ca54:	f107 0114 	add.w	r1, r7, #20
 800ca58:	f104 0214 	add.w	r2, r4, #20
 800ca5c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ca60:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ca64:	9302      	str	r3, [sp, #8]
 800ca66:	1b13      	subs	r3, r2, r4
 800ca68:	3b15      	subs	r3, #21
 800ca6a:	f023 0303 	bic.w	r3, r3, #3
 800ca6e:	3304      	adds	r3, #4
 800ca70:	f104 0715 	add.w	r7, r4, #21
 800ca74:	42ba      	cmp	r2, r7
 800ca76:	bf38      	it	cc
 800ca78:	2304      	movcc	r3, #4
 800ca7a:	9301      	str	r3, [sp, #4]
 800ca7c:	9b02      	ldr	r3, [sp, #8]
 800ca7e:	9103      	str	r1, [sp, #12]
 800ca80:	428b      	cmp	r3, r1
 800ca82:	d80c      	bhi.n	800ca9e <__multiply+0x9e>
 800ca84:	2e00      	cmp	r6, #0
 800ca86:	dd03      	ble.n	800ca90 <__multiply+0x90>
 800ca88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d05b      	beq.n	800cb48 <__multiply+0x148>
 800ca90:	6106      	str	r6, [r0, #16]
 800ca92:	b005      	add	sp, #20
 800ca94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca98:	f843 2b04 	str.w	r2, [r3], #4
 800ca9c:	e7d8      	b.n	800ca50 <__multiply+0x50>
 800ca9e:	f8b1 a000 	ldrh.w	sl, [r1]
 800caa2:	f1ba 0f00 	cmp.w	sl, #0
 800caa6:	d024      	beq.n	800caf2 <__multiply+0xf2>
 800caa8:	f104 0e14 	add.w	lr, r4, #20
 800caac:	46a9      	mov	r9, r5
 800caae:	f04f 0c00 	mov.w	ip, #0
 800cab2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cab6:	f8d9 3000 	ldr.w	r3, [r9]
 800caba:	fa1f fb87 	uxth.w	fp, r7
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	fb0a 330b 	mla	r3, sl, fp, r3
 800cac4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cac8:	f8d9 7000 	ldr.w	r7, [r9]
 800cacc:	4463      	add	r3, ip
 800cace:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cad2:	fb0a c70b 	mla	r7, sl, fp, ip
 800cad6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cada:	b29b      	uxth	r3, r3
 800cadc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cae0:	4572      	cmp	r2, lr
 800cae2:	f849 3b04 	str.w	r3, [r9], #4
 800cae6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800caea:	d8e2      	bhi.n	800cab2 <__multiply+0xb2>
 800caec:	9b01      	ldr	r3, [sp, #4]
 800caee:	f845 c003 	str.w	ip, [r5, r3]
 800caf2:	9b03      	ldr	r3, [sp, #12]
 800caf4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800caf8:	3104      	adds	r1, #4
 800cafa:	f1b9 0f00 	cmp.w	r9, #0
 800cafe:	d021      	beq.n	800cb44 <__multiply+0x144>
 800cb00:	682b      	ldr	r3, [r5, #0]
 800cb02:	f104 0c14 	add.w	ip, r4, #20
 800cb06:	46ae      	mov	lr, r5
 800cb08:	f04f 0a00 	mov.w	sl, #0
 800cb0c:	f8bc b000 	ldrh.w	fp, [ip]
 800cb10:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cb14:	fb09 770b 	mla	r7, r9, fp, r7
 800cb18:	4457      	add	r7, sl
 800cb1a:	b29b      	uxth	r3, r3
 800cb1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cb20:	f84e 3b04 	str.w	r3, [lr], #4
 800cb24:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cb28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb2c:	f8be 3000 	ldrh.w	r3, [lr]
 800cb30:	fb09 330a 	mla	r3, r9, sl, r3
 800cb34:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cb38:	4562      	cmp	r2, ip
 800cb3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb3e:	d8e5      	bhi.n	800cb0c <__multiply+0x10c>
 800cb40:	9f01      	ldr	r7, [sp, #4]
 800cb42:	51eb      	str	r3, [r5, r7]
 800cb44:	3504      	adds	r5, #4
 800cb46:	e799      	b.n	800ca7c <__multiply+0x7c>
 800cb48:	3e01      	subs	r6, #1
 800cb4a:	e79b      	b.n	800ca84 <__multiply+0x84>
 800cb4c:	0800efe5 	.word	0x0800efe5
 800cb50:	0800eff6 	.word	0x0800eff6

0800cb54 <__pow5mult>:
 800cb54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb58:	4615      	mov	r5, r2
 800cb5a:	f012 0203 	ands.w	r2, r2, #3
 800cb5e:	4607      	mov	r7, r0
 800cb60:	460e      	mov	r6, r1
 800cb62:	d007      	beq.n	800cb74 <__pow5mult+0x20>
 800cb64:	4c25      	ldr	r4, [pc, #148]	@ (800cbfc <__pow5mult+0xa8>)
 800cb66:	3a01      	subs	r2, #1
 800cb68:	2300      	movs	r3, #0
 800cb6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb6e:	f7ff fe55 	bl	800c81c <__multadd>
 800cb72:	4606      	mov	r6, r0
 800cb74:	10ad      	asrs	r5, r5, #2
 800cb76:	d03d      	beq.n	800cbf4 <__pow5mult+0xa0>
 800cb78:	69fc      	ldr	r4, [r7, #28]
 800cb7a:	b97c      	cbnz	r4, 800cb9c <__pow5mult+0x48>
 800cb7c:	2010      	movs	r0, #16
 800cb7e:	f7ff fd35 	bl	800c5ec <malloc>
 800cb82:	4602      	mov	r2, r0
 800cb84:	61f8      	str	r0, [r7, #28]
 800cb86:	b928      	cbnz	r0, 800cb94 <__pow5mult+0x40>
 800cb88:	4b1d      	ldr	r3, [pc, #116]	@ (800cc00 <__pow5mult+0xac>)
 800cb8a:	481e      	ldr	r0, [pc, #120]	@ (800cc04 <__pow5mult+0xb0>)
 800cb8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cb90:	f001 fd26 	bl	800e5e0 <__assert_func>
 800cb94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb98:	6004      	str	r4, [r0, #0]
 800cb9a:	60c4      	str	r4, [r0, #12]
 800cb9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cba0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cba4:	b94c      	cbnz	r4, 800cbba <__pow5mult+0x66>
 800cba6:	f240 2171 	movw	r1, #625	@ 0x271
 800cbaa:	4638      	mov	r0, r7
 800cbac:	f7ff ff12 	bl	800c9d4 <__i2b>
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	f8c8 0008 	str.w	r0, [r8, #8]
 800cbb6:	4604      	mov	r4, r0
 800cbb8:	6003      	str	r3, [r0, #0]
 800cbba:	f04f 0900 	mov.w	r9, #0
 800cbbe:	07eb      	lsls	r3, r5, #31
 800cbc0:	d50a      	bpl.n	800cbd8 <__pow5mult+0x84>
 800cbc2:	4631      	mov	r1, r6
 800cbc4:	4622      	mov	r2, r4
 800cbc6:	4638      	mov	r0, r7
 800cbc8:	f7ff ff1a 	bl	800ca00 <__multiply>
 800cbcc:	4631      	mov	r1, r6
 800cbce:	4680      	mov	r8, r0
 800cbd0:	4638      	mov	r0, r7
 800cbd2:	f7ff fe01 	bl	800c7d8 <_Bfree>
 800cbd6:	4646      	mov	r6, r8
 800cbd8:	106d      	asrs	r5, r5, #1
 800cbda:	d00b      	beq.n	800cbf4 <__pow5mult+0xa0>
 800cbdc:	6820      	ldr	r0, [r4, #0]
 800cbde:	b938      	cbnz	r0, 800cbf0 <__pow5mult+0x9c>
 800cbe0:	4622      	mov	r2, r4
 800cbe2:	4621      	mov	r1, r4
 800cbe4:	4638      	mov	r0, r7
 800cbe6:	f7ff ff0b 	bl	800ca00 <__multiply>
 800cbea:	6020      	str	r0, [r4, #0]
 800cbec:	f8c0 9000 	str.w	r9, [r0]
 800cbf0:	4604      	mov	r4, r0
 800cbf2:	e7e4      	b.n	800cbbe <__pow5mult+0x6a>
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbfa:	bf00      	nop
 800cbfc:	0800f050 	.word	0x0800f050
 800cc00:	0800ef76 	.word	0x0800ef76
 800cc04:	0800eff6 	.word	0x0800eff6

0800cc08 <__lshift>:
 800cc08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc0c:	460c      	mov	r4, r1
 800cc0e:	6849      	ldr	r1, [r1, #4]
 800cc10:	6923      	ldr	r3, [r4, #16]
 800cc12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc16:	68a3      	ldr	r3, [r4, #8]
 800cc18:	4607      	mov	r7, r0
 800cc1a:	4691      	mov	r9, r2
 800cc1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc20:	f108 0601 	add.w	r6, r8, #1
 800cc24:	42b3      	cmp	r3, r6
 800cc26:	db0b      	blt.n	800cc40 <__lshift+0x38>
 800cc28:	4638      	mov	r0, r7
 800cc2a:	f7ff fd95 	bl	800c758 <_Balloc>
 800cc2e:	4605      	mov	r5, r0
 800cc30:	b948      	cbnz	r0, 800cc46 <__lshift+0x3e>
 800cc32:	4602      	mov	r2, r0
 800cc34:	4b28      	ldr	r3, [pc, #160]	@ (800ccd8 <__lshift+0xd0>)
 800cc36:	4829      	ldr	r0, [pc, #164]	@ (800ccdc <__lshift+0xd4>)
 800cc38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cc3c:	f001 fcd0 	bl	800e5e0 <__assert_func>
 800cc40:	3101      	adds	r1, #1
 800cc42:	005b      	lsls	r3, r3, #1
 800cc44:	e7ee      	b.n	800cc24 <__lshift+0x1c>
 800cc46:	2300      	movs	r3, #0
 800cc48:	f100 0114 	add.w	r1, r0, #20
 800cc4c:	f100 0210 	add.w	r2, r0, #16
 800cc50:	4618      	mov	r0, r3
 800cc52:	4553      	cmp	r3, sl
 800cc54:	db33      	blt.n	800ccbe <__lshift+0xb6>
 800cc56:	6920      	ldr	r0, [r4, #16]
 800cc58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc5c:	f104 0314 	add.w	r3, r4, #20
 800cc60:	f019 091f 	ands.w	r9, r9, #31
 800cc64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc6c:	d02b      	beq.n	800ccc6 <__lshift+0xbe>
 800cc6e:	f1c9 0e20 	rsb	lr, r9, #32
 800cc72:	468a      	mov	sl, r1
 800cc74:	2200      	movs	r2, #0
 800cc76:	6818      	ldr	r0, [r3, #0]
 800cc78:	fa00 f009 	lsl.w	r0, r0, r9
 800cc7c:	4310      	orrs	r0, r2
 800cc7e:	f84a 0b04 	str.w	r0, [sl], #4
 800cc82:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc86:	459c      	cmp	ip, r3
 800cc88:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc8c:	d8f3      	bhi.n	800cc76 <__lshift+0x6e>
 800cc8e:	ebac 0304 	sub.w	r3, ip, r4
 800cc92:	3b15      	subs	r3, #21
 800cc94:	f023 0303 	bic.w	r3, r3, #3
 800cc98:	3304      	adds	r3, #4
 800cc9a:	f104 0015 	add.w	r0, r4, #21
 800cc9e:	4584      	cmp	ip, r0
 800cca0:	bf38      	it	cc
 800cca2:	2304      	movcc	r3, #4
 800cca4:	50ca      	str	r2, [r1, r3]
 800cca6:	b10a      	cbz	r2, 800ccac <__lshift+0xa4>
 800cca8:	f108 0602 	add.w	r6, r8, #2
 800ccac:	3e01      	subs	r6, #1
 800ccae:	4638      	mov	r0, r7
 800ccb0:	612e      	str	r6, [r5, #16]
 800ccb2:	4621      	mov	r1, r4
 800ccb4:	f7ff fd90 	bl	800c7d8 <_Bfree>
 800ccb8:	4628      	mov	r0, r5
 800ccba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccbe:	f842 0f04 	str.w	r0, [r2, #4]!
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	e7c5      	b.n	800cc52 <__lshift+0x4a>
 800ccc6:	3904      	subs	r1, #4
 800ccc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cccc:	f841 2f04 	str.w	r2, [r1, #4]!
 800ccd0:	459c      	cmp	ip, r3
 800ccd2:	d8f9      	bhi.n	800ccc8 <__lshift+0xc0>
 800ccd4:	e7ea      	b.n	800ccac <__lshift+0xa4>
 800ccd6:	bf00      	nop
 800ccd8:	0800efe5 	.word	0x0800efe5
 800ccdc:	0800eff6 	.word	0x0800eff6

0800cce0 <__mcmp>:
 800cce0:	690a      	ldr	r2, [r1, #16]
 800cce2:	4603      	mov	r3, r0
 800cce4:	6900      	ldr	r0, [r0, #16]
 800cce6:	1a80      	subs	r0, r0, r2
 800cce8:	b530      	push	{r4, r5, lr}
 800ccea:	d10e      	bne.n	800cd0a <__mcmp+0x2a>
 800ccec:	3314      	adds	r3, #20
 800ccee:	3114      	adds	r1, #20
 800ccf0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ccf4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ccf8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ccfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cd00:	4295      	cmp	r5, r2
 800cd02:	d003      	beq.n	800cd0c <__mcmp+0x2c>
 800cd04:	d205      	bcs.n	800cd12 <__mcmp+0x32>
 800cd06:	f04f 30ff 	mov.w	r0, #4294967295
 800cd0a:	bd30      	pop	{r4, r5, pc}
 800cd0c:	42a3      	cmp	r3, r4
 800cd0e:	d3f3      	bcc.n	800ccf8 <__mcmp+0x18>
 800cd10:	e7fb      	b.n	800cd0a <__mcmp+0x2a>
 800cd12:	2001      	movs	r0, #1
 800cd14:	e7f9      	b.n	800cd0a <__mcmp+0x2a>
	...

0800cd18 <__mdiff>:
 800cd18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1c:	4689      	mov	r9, r1
 800cd1e:	4606      	mov	r6, r0
 800cd20:	4611      	mov	r1, r2
 800cd22:	4648      	mov	r0, r9
 800cd24:	4614      	mov	r4, r2
 800cd26:	f7ff ffdb 	bl	800cce0 <__mcmp>
 800cd2a:	1e05      	subs	r5, r0, #0
 800cd2c:	d112      	bne.n	800cd54 <__mdiff+0x3c>
 800cd2e:	4629      	mov	r1, r5
 800cd30:	4630      	mov	r0, r6
 800cd32:	f7ff fd11 	bl	800c758 <_Balloc>
 800cd36:	4602      	mov	r2, r0
 800cd38:	b928      	cbnz	r0, 800cd46 <__mdiff+0x2e>
 800cd3a:	4b3f      	ldr	r3, [pc, #252]	@ (800ce38 <__mdiff+0x120>)
 800cd3c:	f240 2137 	movw	r1, #567	@ 0x237
 800cd40:	483e      	ldr	r0, [pc, #248]	@ (800ce3c <__mdiff+0x124>)
 800cd42:	f001 fc4d 	bl	800e5e0 <__assert_func>
 800cd46:	2301      	movs	r3, #1
 800cd48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd4c:	4610      	mov	r0, r2
 800cd4e:	b003      	add	sp, #12
 800cd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd54:	bfbc      	itt	lt
 800cd56:	464b      	movlt	r3, r9
 800cd58:	46a1      	movlt	r9, r4
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cd60:	bfba      	itte	lt
 800cd62:	461c      	movlt	r4, r3
 800cd64:	2501      	movlt	r5, #1
 800cd66:	2500      	movge	r5, #0
 800cd68:	f7ff fcf6 	bl	800c758 <_Balloc>
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	b918      	cbnz	r0, 800cd78 <__mdiff+0x60>
 800cd70:	4b31      	ldr	r3, [pc, #196]	@ (800ce38 <__mdiff+0x120>)
 800cd72:	f240 2145 	movw	r1, #581	@ 0x245
 800cd76:	e7e3      	b.n	800cd40 <__mdiff+0x28>
 800cd78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cd7c:	6926      	ldr	r6, [r4, #16]
 800cd7e:	60c5      	str	r5, [r0, #12]
 800cd80:	f109 0310 	add.w	r3, r9, #16
 800cd84:	f109 0514 	add.w	r5, r9, #20
 800cd88:	f104 0e14 	add.w	lr, r4, #20
 800cd8c:	f100 0b14 	add.w	fp, r0, #20
 800cd90:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cd94:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cd98:	9301      	str	r3, [sp, #4]
 800cd9a:	46d9      	mov	r9, fp
 800cd9c:	f04f 0c00 	mov.w	ip, #0
 800cda0:	9b01      	ldr	r3, [sp, #4]
 800cda2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cda6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cdaa:	9301      	str	r3, [sp, #4]
 800cdac:	fa1f f38a 	uxth.w	r3, sl
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	b283      	uxth	r3, r0
 800cdb4:	1acb      	subs	r3, r1, r3
 800cdb6:	0c00      	lsrs	r0, r0, #16
 800cdb8:	4463      	add	r3, ip
 800cdba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cdbe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cdc8:	4576      	cmp	r6, lr
 800cdca:	f849 3b04 	str.w	r3, [r9], #4
 800cdce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cdd2:	d8e5      	bhi.n	800cda0 <__mdiff+0x88>
 800cdd4:	1b33      	subs	r3, r6, r4
 800cdd6:	3b15      	subs	r3, #21
 800cdd8:	f023 0303 	bic.w	r3, r3, #3
 800cddc:	3415      	adds	r4, #21
 800cdde:	3304      	adds	r3, #4
 800cde0:	42a6      	cmp	r6, r4
 800cde2:	bf38      	it	cc
 800cde4:	2304      	movcc	r3, #4
 800cde6:	441d      	add	r5, r3
 800cde8:	445b      	add	r3, fp
 800cdea:	461e      	mov	r6, r3
 800cdec:	462c      	mov	r4, r5
 800cdee:	4544      	cmp	r4, r8
 800cdf0:	d30e      	bcc.n	800ce10 <__mdiff+0xf8>
 800cdf2:	f108 0103 	add.w	r1, r8, #3
 800cdf6:	1b49      	subs	r1, r1, r5
 800cdf8:	f021 0103 	bic.w	r1, r1, #3
 800cdfc:	3d03      	subs	r5, #3
 800cdfe:	45a8      	cmp	r8, r5
 800ce00:	bf38      	it	cc
 800ce02:	2100      	movcc	r1, #0
 800ce04:	440b      	add	r3, r1
 800ce06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce0a:	b191      	cbz	r1, 800ce32 <__mdiff+0x11a>
 800ce0c:	6117      	str	r7, [r2, #16]
 800ce0e:	e79d      	b.n	800cd4c <__mdiff+0x34>
 800ce10:	f854 1b04 	ldr.w	r1, [r4], #4
 800ce14:	46e6      	mov	lr, ip
 800ce16:	0c08      	lsrs	r0, r1, #16
 800ce18:	fa1c fc81 	uxtah	ip, ip, r1
 800ce1c:	4471      	add	r1, lr
 800ce1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ce22:	b289      	uxth	r1, r1
 800ce24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ce28:	f846 1b04 	str.w	r1, [r6], #4
 800ce2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ce30:	e7dd      	b.n	800cdee <__mdiff+0xd6>
 800ce32:	3f01      	subs	r7, #1
 800ce34:	e7e7      	b.n	800ce06 <__mdiff+0xee>
 800ce36:	bf00      	nop
 800ce38:	0800efe5 	.word	0x0800efe5
 800ce3c:	0800eff6 	.word	0x0800eff6

0800ce40 <__ulp>:
 800ce40:	b082      	sub	sp, #8
 800ce42:	ed8d 0b00 	vstr	d0, [sp]
 800ce46:	9a01      	ldr	r2, [sp, #4]
 800ce48:	4b0f      	ldr	r3, [pc, #60]	@ (800ce88 <__ulp+0x48>)
 800ce4a:	4013      	ands	r3, r2
 800ce4c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	dc08      	bgt.n	800ce66 <__ulp+0x26>
 800ce54:	425b      	negs	r3, r3
 800ce56:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ce5a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ce5e:	da04      	bge.n	800ce6a <__ulp+0x2a>
 800ce60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ce64:	4113      	asrs	r3, r2
 800ce66:	2200      	movs	r2, #0
 800ce68:	e008      	b.n	800ce7c <__ulp+0x3c>
 800ce6a:	f1a2 0314 	sub.w	r3, r2, #20
 800ce6e:	2b1e      	cmp	r3, #30
 800ce70:	bfda      	itte	le
 800ce72:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ce76:	40da      	lsrle	r2, r3
 800ce78:	2201      	movgt	r2, #1
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	4610      	mov	r0, r2
 800ce80:	ec41 0b10 	vmov	d0, r0, r1
 800ce84:	b002      	add	sp, #8
 800ce86:	4770      	bx	lr
 800ce88:	7ff00000 	.word	0x7ff00000

0800ce8c <__b2d>:
 800ce8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce90:	6906      	ldr	r6, [r0, #16]
 800ce92:	f100 0814 	add.w	r8, r0, #20
 800ce96:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ce9a:	1f37      	subs	r7, r6, #4
 800ce9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cea0:	4610      	mov	r0, r2
 800cea2:	f7ff fd4b 	bl	800c93c <__hi0bits>
 800cea6:	f1c0 0320 	rsb	r3, r0, #32
 800ceaa:	280a      	cmp	r0, #10
 800ceac:	600b      	str	r3, [r1, #0]
 800ceae:	491b      	ldr	r1, [pc, #108]	@ (800cf1c <__b2d+0x90>)
 800ceb0:	dc15      	bgt.n	800cede <__b2d+0x52>
 800ceb2:	f1c0 0c0b 	rsb	ip, r0, #11
 800ceb6:	fa22 f30c 	lsr.w	r3, r2, ip
 800ceba:	45b8      	cmp	r8, r7
 800cebc:	ea43 0501 	orr.w	r5, r3, r1
 800cec0:	bf34      	ite	cc
 800cec2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cec6:	2300      	movcs	r3, #0
 800cec8:	3015      	adds	r0, #21
 800ceca:	fa02 f000 	lsl.w	r0, r2, r0
 800cece:	fa23 f30c 	lsr.w	r3, r3, ip
 800ced2:	4303      	orrs	r3, r0
 800ced4:	461c      	mov	r4, r3
 800ced6:	ec45 4b10 	vmov	d0, r4, r5
 800ceda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cede:	45b8      	cmp	r8, r7
 800cee0:	bf3a      	itte	cc
 800cee2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cee6:	f1a6 0708 	subcc.w	r7, r6, #8
 800ceea:	2300      	movcs	r3, #0
 800ceec:	380b      	subs	r0, #11
 800ceee:	d012      	beq.n	800cf16 <__b2d+0x8a>
 800cef0:	f1c0 0120 	rsb	r1, r0, #32
 800cef4:	fa23 f401 	lsr.w	r4, r3, r1
 800cef8:	4082      	lsls	r2, r0
 800cefa:	4322      	orrs	r2, r4
 800cefc:	4547      	cmp	r7, r8
 800cefe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cf02:	bf8c      	ite	hi
 800cf04:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cf08:	2200      	movls	r2, #0
 800cf0a:	4083      	lsls	r3, r0
 800cf0c:	40ca      	lsrs	r2, r1
 800cf0e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cf12:	4313      	orrs	r3, r2
 800cf14:	e7de      	b.n	800ced4 <__b2d+0x48>
 800cf16:	ea42 0501 	orr.w	r5, r2, r1
 800cf1a:	e7db      	b.n	800ced4 <__b2d+0x48>
 800cf1c:	3ff00000 	.word	0x3ff00000

0800cf20 <__d2b>:
 800cf20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cf24:	460f      	mov	r7, r1
 800cf26:	2101      	movs	r1, #1
 800cf28:	ec59 8b10 	vmov	r8, r9, d0
 800cf2c:	4616      	mov	r6, r2
 800cf2e:	f7ff fc13 	bl	800c758 <_Balloc>
 800cf32:	4604      	mov	r4, r0
 800cf34:	b930      	cbnz	r0, 800cf44 <__d2b+0x24>
 800cf36:	4602      	mov	r2, r0
 800cf38:	4b23      	ldr	r3, [pc, #140]	@ (800cfc8 <__d2b+0xa8>)
 800cf3a:	4824      	ldr	r0, [pc, #144]	@ (800cfcc <__d2b+0xac>)
 800cf3c:	f240 310f 	movw	r1, #783	@ 0x30f
 800cf40:	f001 fb4e 	bl	800e5e0 <__assert_func>
 800cf44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cf48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cf4c:	b10d      	cbz	r5, 800cf52 <__d2b+0x32>
 800cf4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cf52:	9301      	str	r3, [sp, #4]
 800cf54:	f1b8 0300 	subs.w	r3, r8, #0
 800cf58:	d023      	beq.n	800cfa2 <__d2b+0x82>
 800cf5a:	4668      	mov	r0, sp
 800cf5c:	9300      	str	r3, [sp, #0]
 800cf5e:	f7ff fd0c 	bl	800c97a <__lo0bits>
 800cf62:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cf66:	b1d0      	cbz	r0, 800cf9e <__d2b+0x7e>
 800cf68:	f1c0 0320 	rsb	r3, r0, #32
 800cf6c:	fa02 f303 	lsl.w	r3, r2, r3
 800cf70:	430b      	orrs	r3, r1
 800cf72:	40c2      	lsrs	r2, r0
 800cf74:	6163      	str	r3, [r4, #20]
 800cf76:	9201      	str	r2, [sp, #4]
 800cf78:	9b01      	ldr	r3, [sp, #4]
 800cf7a:	61a3      	str	r3, [r4, #24]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	bf0c      	ite	eq
 800cf80:	2201      	moveq	r2, #1
 800cf82:	2202      	movne	r2, #2
 800cf84:	6122      	str	r2, [r4, #16]
 800cf86:	b1a5      	cbz	r5, 800cfb2 <__d2b+0x92>
 800cf88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cf8c:	4405      	add	r5, r0
 800cf8e:	603d      	str	r5, [r7, #0]
 800cf90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cf94:	6030      	str	r0, [r6, #0]
 800cf96:	4620      	mov	r0, r4
 800cf98:	b003      	add	sp, #12
 800cf9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf9e:	6161      	str	r1, [r4, #20]
 800cfa0:	e7ea      	b.n	800cf78 <__d2b+0x58>
 800cfa2:	a801      	add	r0, sp, #4
 800cfa4:	f7ff fce9 	bl	800c97a <__lo0bits>
 800cfa8:	9b01      	ldr	r3, [sp, #4]
 800cfaa:	6163      	str	r3, [r4, #20]
 800cfac:	3020      	adds	r0, #32
 800cfae:	2201      	movs	r2, #1
 800cfb0:	e7e8      	b.n	800cf84 <__d2b+0x64>
 800cfb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cfb6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cfba:	6038      	str	r0, [r7, #0]
 800cfbc:	6918      	ldr	r0, [r3, #16]
 800cfbe:	f7ff fcbd 	bl	800c93c <__hi0bits>
 800cfc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cfc6:	e7e5      	b.n	800cf94 <__d2b+0x74>
 800cfc8:	0800efe5 	.word	0x0800efe5
 800cfcc:	0800eff6 	.word	0x0800eff6

0800cfd0 <__ratio>:
 800cfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd4:	b085      	sub	sp, #20
 800cfd6:	e9cd 1000 	strd	r1, r0, [sp]
 800cfda:	a902      	add	r1, sp, #8
 800cfdc:	f7ff ff56 	bl	800ce8c <__b2d>
 800cfe0:	9800      	ldr	r0, [sp, #0]
 800cfe2:	a903      	add	r1, sp, #12
 800cfe4:	ec55 4b10 	vmov	r4, r5, d0
 800cfe8:	f7ff ff50 	bl	800ce8c <__b2d>
 800cfec:	9b01      	ldr	r3, [sp, #4]
 800cfee:	6919      	ldr	r1, [r3, #16]
 800cff0:	9b00      	ldr	r3, [sp, #0]
 800cff2:	691b      	ldr	r3, [r3, #16]
 800cff4:	1ac9      	subs	r1, r1, r3
 800cff6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cffa:	1a9b      	subs	r3, r3, r2
 800cffc:	ec5b ab10 	vmov	sl, fp, d0
 800d000:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d004:	2b00      	cmp	r3, #0
 800d006:	bfce      	itee	gt
 800d008:	462a      	movgt	r2, r5
 800d00a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d00e:	465a      	movle	r2, fp
 800d010:	462f      	mov	r7, r5
 800d012:	46d9      	mov	r9, fp
 800d014:	bfcc      	ite	gt
 800d016:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d01a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d01e:	464b      	mov	r3, r9
 800d020:	4652      	mov	r2, sl
 800d022:	4620      	mov	r0, r4
 800d024:	4639      	mov	r1, r7
 800d026:	f7f3 fc11 	bl	800084c <__aeabi_ddiv>
 800d02a:	ec41 0b10 	vmov	d0, r0, r1
 800d02e:	b005      	add	sp, #20
 800d030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d034 <__copybits>:
 800d034:	3901      	subs	r1, #1
 800d036:	b570      	push	{r4, r5, r6, lr}
 800d038:	1149      	asrs	r1, r1, #5
 800d03a:	6914      	ldr	r4, [r2, #16]
 800d03c:	3101      	adds	r1, #1
 800d03e:	f102 0314 	add.w	r3, r2, #20
 800d042:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d046:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d04a:	1f05      	subs	r5, r0, #4
 800d04c:	42a3      	cmp	r3, r4
 800d04e:	d30c      	bcc.n	800d06a <__copybits+0x36>
 800d050:	1aa3      	subs	r3, r4, r2
 800d052:	3b11      	subs	r3, #17
 800d054:	f023 0303 	bic.w	r3, r3, #3
 800d058:	3211      	adds	r2, #17
 800d05a:	42a2      	cmp	r2, r4
 800d05c:	bf88      	it	hi
 800d05e:	2300      	movhi	r3, #0
 800d060:	4418      	add	r0, r3
 800d062:	2300      	movs	r3, #0
 800d064:	4288      	cmp	r0, r1
 800d066:	d305      	bcc.n	800d074 <__copybits+0x40>
 800d068:	bd70      	pop	{r4, r5, r6, pc}
 800d06a:	f853 6b04 	ldr.w	r6, [r3], #4
 800d06e:	f845 6f04 	str.w	r6, [r5, #4]!
 800d072:	e7eb      	b.n	800d04c <__copybits+0x18>
 800d074:	f840 3b04 	str.w	r3, [r0], #4
 800d078:	e7f4      	b.n	800d064 <__copybits+0x30>

0800d07a <__any_on>:
 800d07a:	f100 0214 	add.w	r2, r0, #20
 800d07e:	6900      	ldr	r0, [r0, #16]
 800d080:	114b      	asrs	r3, r1, #5
 800d082:	4298      	cmp	r0, r3
 800d084:	b510      	push	{r4, lr}
 800d086:	db11      	blt.n	800d0ac <__any_on+0x32>
 800d088:	dd0a      	ble.n	800d0a0 <__any_on+0x26>
 800d08a:	f011 011f 	ands.w	r1, r1, #31
 800d08e:	d007      	beq.n	800d0a0 <__any_on+0x26>
 800d090:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d094:	fa24 f001 	lsr.w	r0, r4, r1
 800d098:	fa00 f101 	lsl.w	r1, r0, r1
 800d09c:	428c      	cmp	r4, r1
 800d09e:	d10b      	bne.n	800d0b8 <__any_on+0x3e>
 800d0a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d803      	bhi.n	800d0b0 <__any_on+0x36>
 800d0a8:	2000      	movs	r0, #0
 800d0aa:	bd10      	pop	{r4, pc}
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	e7f7      	b.n	800d0a0 <__any_on+0x26>
 800d0b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d0b4:	2900      	cmp	r1, #0
 800d0b6:	d0f5      	beq.n	800d0a4 <__any_on+0x2a>
 800d0b8:	2001      	movs	r0, #1
 800d0ba:	e7f6      	b.n	800d0aa <__any_on+0x30>

0800d0bc <sulp>:
 800d0bc:	b570      	push	{r4, r5, r6, lr}
 800d0be:	4604      	mov	r4, r0
 800d0c0:	460d      	mov	r5, r1
 800d0c2:	ec45 4b10 	vmov	d0, r4, r5
 800d0c6:	4616      	mov	r6, r2
 800d0c8:	f7ff feba 	bl	800ce40 <__ulp>
 800d0cc:	ec51 0b10 	vmov	r0, r1, d0
 800d0d0:	b17e      	cbz	r6, 800d0f2 <sulp+0x36>
 800d0d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d0d6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	dd09      	ble.n	800d0f2 <sulp+0x36>
 800d0de:	051b      	lsls	r3, r3, #20
 800d0e0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d0e4:	2400      	movs	r4, #0
 800d0e6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d0ea:	4622      	mov	r2, r4
 800d0ec:	462b      	mov	r3, r5
 800d0ee:	f7f3 fa83 	bl	80005f8 <__aeabi_dmul>
 800d0f2:	ec41 0b10 	vmov	d0, r0, r1
 800d0f6:	bd70      	pop	{r4, r5, r6, pc}

0800d0f8 <_strtod_l>:
 800d0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0fc:	b09f      	sub	sp, #124	@ 0x7c
 800d0fe:	460c      	mov	r4, r1
 800d100:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d102:	2200      	movs	r2, #0
 800d104:	921a      	str	r2, [sp, #104]	@ 0x68
 800d106:	9005      	str	r0, [sp, #20]
 800d108:	f04f 0a00 	mov.w	sl, #0
 800d10c:	f04f 0b00 	mov.w	fp, #0
 800d110:	460a      	mov	r2, r1
 800d112:	9219      	str	r2, [sp, #100]	@ 0x64
 800d114:	7811      	ldrb	r1, [r2, #0]
 800d116:	292b      	cmp	r1, #43	@ 0x2b
 800d118:	d04a      	beq.n	800d1b0 <_strtod_l+0xb8>
 800d11a:	d838      	bhi.n	800d18e <_strtod_l+0x96>
 800d11c:	290d      	cmp	r1, #13
 800d11e:	d832      	bhi.n	800d186 <_strtod_l+0x8e>
 800d120:	2908      	cmp	r1, #8
 800d122:	d832      	bhi.n	800d18a <_strtod_l+0x92>
 800d124:	2900      	cmp	r1, #0
 800d126:	d03b      	beq.n	800d1a0 <_strtod_l+0xa8>
 800d128:	2200      	movs	r2, #0
 800d12a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d12c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d12e:	782a      	ldrb	r2, [r5, #0]
 800d130:	2a30      	cmp	r2, #48	@ 0x30
 800d132:	f040 80b3 	bne.w	800d29c <_strtod_l+0x1a4>
 800d136:	786a      	ldrb	r2, [r5, #1]
 800d138:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d13c:	2a58      	cmp	r2, #88	@ 0x58
 800d13e:	d16e      	bne.n	800d21e <_strtod_l+0x126>
 800d140:	9302      	str	r3, [sp, #8]
 800d142:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d144:	9301      	str	r3, [sp, #4]
 800d146:	ab1a      	add	r3, sp, #104	@ 0x68
 800d148:	9300      	str	r3, [sp, #0]
 800d14a:	4a8e      	ldr	r2, [pc, #568]	@ (800d384 <_strtod_l+0x28c>)
 800d14c:	9805      	ldr	r0, [sp, #20]
 800d14e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d150:	a919      	add	r1, sp, #100	@ 0x64
 800d152:	f001 fadf 	bl	800e714 <__gethex>
 800d156:	f010 060f 	ands.w	r6, r0, #15
 800d15a:	4604      	mov	r4, r0
 800d15c:	d005      	beq.n	800d16a <_strtod_l+0x72>
 800d15e:	2e06      	cmp	r6, #6
 800d160:	d128      	bne.n	800d1b4 <_strtod_l+0xbc>
 800d162:	3501      	adds	r5, #1
 800d164:	2300      	movs	r3, #0
 800d166:	9519      	str	r5, [sp, #100]	@ 0x64
 800d168:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d16a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	f040 858e 	bne.w	800dc8e <_strtod_l+0xb96>
 800d172:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d174:	b1cb      	cbz	r3, 800d1aa <_strtod_l+0xb2>
 800d176:	4652      	mov	r2, sl
 800d178:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d17c:	ec43 2b10 	vmov	d0, r2, r3
 800d180:	b01f      	add	sp, #124	@ 0x7c
 800d182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d186:	2920      	cmp	r1, #32
 800d188:	d1ce      	bne.n	800d128 <_strtod_l+0x30>
 800d18a:	3201      	adds	r2, #1
 800d18c:	e7c1      	b.n	800d112 <_strtod_l+0x1a>
 800d18e:	292d      	cmp	r1, #45	@ 0x2d
 800d190:	d1ca      	bne.n	800d128 <_strtod_l+0x30>
 800d192:	2101      	movs	r1, #1
 800d194:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d196:	1c51      	adds	r1, r2, #1
 800d198:	9119      	str	r1, [sp, #100]	@ 0x64
 800d19a:	7852      	ldrb	r2, [r2, #1]
 800d19c:	2a00      	cmp	r2, #0
 800d19e:	d1c5      	bne.n	800d12c <_strtod_l+0x34>
 800d1a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d1a2:	9419      	str	r4, [sp, #100]	@ 0x64
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	f040 8570 	bne.w	800dc8a <_strtod_l+0xb92>
 800d1aa:	4652      	mov	r2, sl
 800d1ac:	465b      	mov	r3, fp
 800d1ae:	e7e5      	b.n	800d17c <_strtod_l+0x84>
 800d1b0:	2100      	movs	r1, #0
 800d1b2:	e7ef      	b.n	800d194 <_strtod_l+0x9c>
 800d1b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d1b6:	b13a      	cbz	r2, 800d1c8 <_strtod_l+0xd0>
 800d1b8:	2135      	movs	r1, #53	@ 0x35
 800d1ba:	a81c      	add	r0, sp, #112	@ 0x70
 800d1bc:	f7ff ff3a 	bl	800d034 <__copybits>
 800d1c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1c2:	9805      	ldr	r0, [sp, #20]
 800d1c4:	f7ff fb08 	bl	800c7d8 <_Bfree>
 800d1c8:	3e01      	subs	r6, #1
 800d1ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d1cc:	2e04      	cmp	r6, #4
 800d1ce:	d806      	bhi.n	800d1de <_strtod_l+0xe6>
 800d1d0:	e8df f006 	tbb	[pc, r6]
 800d1d4:	201d0314 	.word	0x201d0314
 800d1d8:	14          	.byte	0x14
 800d1d9:	00          	.byte	0x00
 800d1da:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d1de:	05e1      	lsls	r1, r4, #23
 800d1e0:	bf48      	it	mi
 800d1e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d1e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d1ea:	0d1b      	lsrs	r3, r3, #20
 800d1ec:	051b      	lsls	r3, r3, #20
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d1bb      	bne.n	800d16a <_strtod_l+0x72>
 800d1f2:	f7fe fb21 	bl	800b838 <__errno>
 800d1f6:	2322      	movs	r3, #34	@ 0x22
 800d1f8:	6003      	str	r3, [r0, #0]
 800d1fa:	e7b6      	b.n	800d16a <_strtod_l+0x72>
 800d1fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d200:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d204:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d208:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d20c:	e7e7      	b.n	800d1de <_strtod_l+0xe6>
 800d20e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d38c <_strtod_l+0x294>
 800d212:	e7e4      	b.n	800d1de <_strtod_l+0xe6>
 800d214:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d218:	f04f 3aff 	mov.w	sl, #4294967295
 800d21c:	e7df      	b.n	800d1de <_strtod_l+0xe6>
 800d21e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d220:	1c5a      	adds	r2, r3, #1
 800d222:	9219      	str	r2, [sp, #100]	@ 0x64
 800d224:	785b      	ldrb	r3, [r3, #1]
 800d226:	2b30      	cmp	r3, #48	@ 0x30
 800d228:	d0f9      	beq.n	800d21e <_strtod_l+0x126>
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d09d      	beq.n	800d16a <_strtod_l+0x72>
 800d22e:	2301      	movs	r3, #1
 800d230:	9309      	str	r3, [sp, #36]	@ 0x24
 800d232:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d234:	930c      	str	r3, [sp, #48]	@ 0x30
 800d236:	2300      	movs	r3, #0
 800d238:	9308      	str	r3, [sp, #32]
 800d23a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d23c:	461f      	mov	r7, r3
 800d23e:	220a      	movs	r2, #10
 800d240:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d242:	7805      	ldrb	r5, [r0, #0]
 800d244:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d248:	b2d9      	uxtb	r1, r3
 800d24a:	2909      	cmp	r1, #9
 800d24c:	d928      	bls.n	800d2a0 <_strtod_l+0x1a8>
 800d24e:	494e      	ldr	r1, [pc, #312]	@ (800d388 <_strtod_l+0x290>)
 800d250:	2201      	movs	r2, #1
 800d252:	f001 f979 	bl	800e548 <strncmp>
 800d256:	2800      	cmp	r0, #0
 800d258:	d032      	beq.n	800d2c0 <_strtod_l+0x1c8>
 800d25a:	2000      	movs	r0, #0
 800d25c:	462a      	mov	r2, r5
 800d25e:	4681      	mov	r9, r0
 800d260:	463d      	mov	r5, r7
 800d262:	4603      	mov	r3, r0
 800d264:	2a65      	cmp	r2, #101	@ 0x65
 800d266:	d001      	beq.n	800d26c <_strtod_l+0x174>
 800d268:	2a45      	cmp	r2, #69	@ 0x45
 800d26a:	d114      	bne.n	800d296 <_strtod_l+0x19e>
 800d26c:	b91d      	cbnz	r5, 800d276 <_strtod_l+0x17e>
 800d26e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d270:	4302      	orrs	r2, r0
 800d272:	d095      	beq.n	800d1a0 <_strtod_l+0xa8>
 800d274:	2500      	movs	r5, #0
 800d276:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d278:	1c62      	adds	r2, r4, #1
 800d27a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d27c:	7862      	ldrb	r2, [r4, #1]
 800d27e:	2a2b      	cmp	r2, #43	@ 0x2b
 800d280:	d077      	beq.n	800d372 <_strtod_l+0x27a>
 800d282:	2a2d      	cmp	r2, #45	@ 0x2d
 800d284:	d07b      	beq.n	800d37e <_strtod_l+0x286>
 800d286:	f04f 0c00 	mov.w	ip, #0
 800d28a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d28e:	2909      	cmp	r1, #9
 800d290:	f240 8082 	bls.w	800d398 <_strtod_l+0x2a0>
 800d294:	9419      	str	r4, [sp, #100]	@ 0x64
 800d296:	f04f 0800 	mov.w	r8, #0
 800d29a:	e0a2      	b.n	800d3e2 <_strtod_l+0x2ea>
 800d29c:	2300      	movs	r3, #0
 800d29e:	e7c7      	b.n	800d230 <_strtod_l+0x138>
 800d2a0:	2f08      	cmp	r7, #8
 800d2a2:	bfd5      	itete	le
 800d2a4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d2a6:	9908      	ldrgt	r1, [sp, #32]
 800d2a8:	fb02 3301 	mlale	r3, r2, r1, r3
 800d2ac:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d2b0:	f100 0001 	add.w	r0, r0, #1
 800d2b4:	bfd4      	ite	le
 800d2b6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d2b8:	9308      	strgt	r3, [sp, #32]
 800d2ba:	3701      	adds	r7, #1
 800d2bc:	9019      	str	r0, [sp, #100]	@ 0x64
 800d2be:	e7bf      	b.n	800d240 <_strtod_l+0x148>
 800d2c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2c2:	1c5a      	adds	r2, r3, #1
 800d2c4:	9219      	str	r2, [sp, #100]	@ 0x64
 800d2c6:	785a      	ldrb	r2, [r3, #1]
 800d2c8:	b37f      	cbz	r7, 800d32a <_strtod_l+0x232>
 800d2ca:	4681      	mov	r9, r0
 800d2cc:	463d      	mov	r5, r7
 800d2ce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d2d2:	2b09      	cmp	r3, #9
 800d2d4:	d912      	bls.n	800d2fc <_strtod_l+0x204>
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e7c4      	b.n	800d264 <_strtod_l+0x16c>
 800d2da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2dc:	1c5a      	adds	r2, r3, #1
 800d2de:	9219      	str	r2, [sp, #100]	@ 0x64
 800d2e0:	785a      	ldrb	r2, [r3, #1]
 800d2e2:	3001      	adds	r0, #1
 800d2e4:	2a30      	cmp	r2, #48	@ 0x30
 800d2e6:	d0f8      	beq.n	800d2da <_strtod_l+0x1e2>
 800d2e8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d2ec:	2b08      	cmp	r3, #8
 800d2ee:	f200 84d3 	bhi.w	800dc98 <_strtod_l+0xba0>
 800d2f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2f4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d2f6:	4681      	mov	r9, r0
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	4605      	mov	r5, r0
 800d2fc:	3a30      	subs	r2, #48	@ 0x30
 800d2fe:	f100 0301 	add.w	r3, r0, #1
 800d302:	d02a      	beq.n	800d35a <_strtod_l+0x262>
 800d304:	4499      	add	r9, r3
 800d306:	eb00 0c05 	add.w	ip, r0, r5
 800d30a:	462b      	mov	r3, r5
 800d30c:	210a      	movs	r1, #10
 800d30e:	4563      	cmp	r3, ip
 800d310:	d10d      	bne.n	800d32e <_strtod_l+0x236>
 800d312:	1c69      	adds	r1, r5, #1
 800d314:	4401      	add	r1, r0
 800d316:	4428      	add	r0, r5
 800d318:	2808      	cmp	r0, #8
 800d31a:	dc16      	bgt.n	800d34a <_strtod_l+0x252>
 800d31c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d31e:	230a      	movs	r3, #10
 800d320:	fb03 2300 	mla	r3, r3, r0, r2
 800d324:	930a      	str	r3, [sp, #40]	@ 0x28
 800d326:	2300      	movs	r3, #0
 800d328:	e018      	b.n	800d35c <_strtod_l+0x264>
 800d32a:	4638      	mov	r0, r7
 800d32c:	e7da      	b.n	800d2e4 <_strtod_l+0x1ec>
 800d32e:	2b08      	cmp	r3, #8
 800d330:	f103 0301 	add.w	r3, r3, #1
 800d334:	dc03      	bgt.n	800d33e <_strtod_l+0x246>
 800d336:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d338:	434e      	muls	r6, r1
 800d33a:	960a      	str	r6, [sp, #40]	@ 0x28
 800d33c:	e7e7      	b.n	800d30e <_strtod_l+0x216>
 800d33e:	2b10      	cmp	r3, #16
 800d340:	bfde      	ittt	le
 800d342:	9e08      	ldrle	r6, [sp, #32]
 800d344:	434e      	mulle	r6, r1
 800d346:	9608      	strle	r6, [sp, #32]
 800d348:	e7e1      	b.n	800d30e <_strtod_l+0x216>
 800d34a:	280f      	cmp	r0, #15
 800d34c:	dceb      	bgt.n	800d326 <_strtod_l+0x22e>
 800d34e:	9808      	ldr	r0, [sp, #32]
 800d350:	230a      	movs	r3, #10
 800d352:	fb03 2300 	mla	r3, r3, r0, r2
 800d356:	9308      	str	r3, [sp, #32]
 800d358:	e7e5      	b.n	800d326 <_strtod_l+0x22e>
 800d35a:	4629      	mov	r1, r5
 800d35c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d35e:	1c50      	adds	r0, r2, #1
 800d360:	9019      	str	r0, [sp, #100]	@ 0x64
 800d362:	7852      	ldrb	r2, [r2, #1]
 800d364:	4618      	mov	r0, r3
 800d366:	460d      	mov	r5, r1
 800d368:	e7b1      	b.n	800d2ce <_strtod_l+0x1d6>
 800d36a:	f04f 0900 	mov.w	r9, #0
 800d36e:	2301      	movs	r3, #1
 800d370:	e77d      	b.n	800d26e <_strtod_l+0x176>
 800d372:	f04f 0c00 	mov.w	ip, #0
 800d376:	1ca2      	adds	r2, r4, #2
 800d378:	9219      	str	r2, [sp, #100]	@ 0x64
 800d37a:	78a2      	ldrb	r2, [r4, #2]
 800d37c:	e785      	b.n	800d28a <_strtod_l+0x192>
 800d37e:	f04f 0c01 	mov.w	ip, #1
 800d382:	e7f8      	b.n	800d376 <_strtod_l+0x27e>
 800d384:	0800f168 	.word	0x0800f168
 800d388:	0800f150 	.word	0x0800f150
 800d38c:	7ff00000 	.word	0x7ff00000
 800d390:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d392:	1c51      	adds	r1, r2, #1
 800d394:	9119      	str	r1, [sp, #100]	@ 0x64
 800d396:	7852      	ldrb	r2, [r2, #1]
 800d398:	2a30      	cmp	r2, #48	@ 0x30
 800d39a:	d0f9      	beq.n	800d390 <_strtod_l+0x298>
 800d39c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d3a0:	2908      	cmp	r1, #8
 800d3a2:	f63f af78 	bhi.w	800d296 <_strtod_l+0x19e>
 800d3a6:	3a30      	subs	r2, #48	@ 0x30
 800d3a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d3aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d3ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d3ae:	f04f 080a 	mov.w	r8, #10
 800d3b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d3b4:	1c56      	adds	r6, r2, #1
 800d3b6:	9619      	str	r6, [sp, #100]	@ 0x64
 800d3b8:	7852      	ldrb	r2, [r2, #1]
 800d3ba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d3be:	f1be 0f09 	cmp.w	lr, #9
 800d3c2:	d939      	bls.n	800d438 <_strtod_l+0x340>
 800d3c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d3c6:	1a76      	subs	r6, r6, r1
 800d3c8:	2e08      	cmp	r6, #8
 800d3ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d3ce:	dc03      	bgt.n	800d3d8 <_strtod_l+0x2e0>
 800d3d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d3d2:	4588      	cmp	r8, r1
 800d3d4:	bfa8      	it	ge
 800d3d6:	4688      	movge	r8, r1
 800d3d8:	f1bc 0f00 	cmp.w	ip, #0
 800d3dc:	d001      	beq.n	800d3e2 <_strtod_l+0x2ea>
 800d3de:	f1c8 0800 	rsb	r8, r8, #0
 800d3e2:	2d00      	cmp	r5, #0
 800d3e4:	d14e      	bne.n	800d484 <_strtod_l+0x38c>
 800d3e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d3e8:	4308      	orrs	r0, r1
 800d3ea:	f47f aebe 	bne.w	800d16a <_strtod_l+0x72>
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f47f aed6 	bne.w	800d1a0 <_strtod_l+0xa8>
 800d3f4:	2a69      	cmp	r2, #105	@ 0x69
 800d3f6:	d028      	beq.n	800d44a <_strtod_l+0x352>
 800d3f8:	dc25      	bgt.n	800d446 <_strtod_l+0x34e>
 800d3fa:	2a49      	cmp	r2, #73	@ 0x49
 800d3fc:	d025      	beq.n	800d44a <_strtod_l+0x352>
 800d3fe:	2a4e      	cmp	r2, #78	@ 0x4e
 800d400:	f47f aece 	bne.w	800d1a0 <_strtod_l+0xa8>
 800d404:	499b      	ldr	r1, [pc, #620]	@ (800d674 <_strtod_l+0x57c>)
 800d406:	a819      	add	r0, sp, #100	@ 0x64
 800d408:	f001 fba6 	bl	800eb58 <__match>
 800d40c:	2800      	cmp	r0, #0
 800d40e:	f43f aec7 	beq.w	800d1a0 <_strtod_l+0xa8>
 800d412:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	2b28      	cmp	r3, #40	@ 0x28
 800d418:	d12e      	bne.n	800d478 <_strtod_l+0x380>
 800d41a:	4997      	ldr	r1, [pc, #604]	@ (800d678 <_strtod_l+0x580>)
 800d41c:	aa1c      	add	r2, sp, #112	@ 0x70
 800d41e:	a819      	add	r0, sp, #100	@ 0x64
 800d420:	f001 fbae 	bl	800eb80 <__hexnan>
 800d424:	2805      	cmp	r0, #5
 800d426:	d127      	bne.n	800d478 <_strtod_l+0x380>
 800d428:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d42a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d42e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d432:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d436:	e698      	b.n	800d16a <_strtod_l+0x72>
 800d438:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d43a:	fb08 2101 	mla	r1, r8, r1, r2
 800d43e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d442:	920e      	str	r2, [sp, #56]	@ 0x38
 800d444:	e7b5      	b.n	800d3b2 <_strtod_l+0x2ba>
 800d446:	2a6e      	cmp	r2, #110	@ 0x6e
 800d448:	e7da      	b.n	800d400 <_strtod_l+0x308>
 800d44a:	498c      	ldr	r1, [pc, #560]	@ (800d67c <_strtod_l+0x584>)
 800d44c:	a819      	add	r0, sp, #100	@ 0x64
 800d44e:	f001 fb83 	bl	800eb58 <__match>
 800d452:	2800      	cmp	r0, #0
 800d454:	f43f aea4 	beq.w	800d1a0 <_strtod_l+0xa8>
 800d458:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d45a:	4989      	ldr	r1, [pc, #548]	@ (800d680 <_strtod_l+0x588>)
 800d45c:	3b01      	subs	r3, #1
 800d45e:	a819      	add	r0, sp, #100	@ 0x64
 800d460:	9319      	str	r3, [sp, #100]	@ 0x64
 800d462:	f001 fb79 	bl	800eb58 <__match>
 800d466:	b910      	cbnz	r0, 800d46e <_strtod_l+0x376>
 800d468:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d46a:	3301      	adds	r3, #1
 800d46c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d46e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d690 <_strtod_l+0x598>
 800d472:	f04f 0a00 	mov.w	sl, #0
 800d476:	e678      	b.n	800d16a <_strtod_l+0x72>
 800d478:	4882      	ldr	r0, [pc, #520]	@ (800d684 <_strtod_l+0x58c>)
 800d47a:	f001 f8a9 	bl	800e5d0 <nan>
 800d47e:	ec5b ab10 	vmov	sl, fp, d0
 800d482:	e672      	b.n	800d16a <_strtod_l+0x72>
 800d484:	eba8 0309 	sub.w	r3, r8, r9
 800d488:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d48a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d48c:	2f00      	cmp	r7, #0
 800d48e:	bf08      	it	eq
 800d490:	462f      	moveq	r7, r5
 800d492:	2d10      	cmp	r5, #16
 800d494:	462c      	mov	r4, r5
 800d496:	bfa8      	it	ge
 800d498:	2410      	movge	r4, #16
 800d49a:	f7f3 f833 	bl	8000504 <__aeabi_ui2d>
 800d49e:	2d09      	cmp	r5, #9
 800d4a0:	4682      	mov	sl, r0
 800d4a2:	468b      	mov	fp, r1
 800d4a4:	dc13      	bgt.n	800d4ce <_strtod_l+0x3d6>
 800d4a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	f43f ae5e 	beq.w	800d16a <_strtod_l+0x72>
 800d4ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4b0:	dd78      	ble.n	800d5a4 <_strtod_l+0x4ac>
 800d4b2:	2b16      	cmp	r3, #22
 800d4b4:	dc5f      	bgt.n	800d576 <_strtod_l+0x47e>
 800d4b6:	4974      	ldr	r1, [pc, #464]	@ (800d688 <_strtod_l+0x590>)
 800d4b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d4bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4c0:	4652      	mov	r2, sl
 800d4c2:	465b      	mov	r3, fp
 800d4c4:	f7f3 f898 	bl	80005f8 <__aeabi_dmul>
 800d4c8:	4682      	mov	sl, r0
 800d4ca:	468b      	mov	fp, r1
 800d4cc:	e64d      	b.n	800d16a <_strtod_l+0x72>
 800d4ce:	4b6e      	ldr	r3, [pc, #440]	@ (800d688 <_strtod_l+0x590>)
 800d4d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d4d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d4d8:	f7f3 f88e 	bl	80005f8 <__aeabi_dmul>
 800d4dc:	4682      	mov	sl, r0
 800d4de:	9808      	ldr	r0, [sp, #32]
 800d4e0:	468b      	mov	fp, r1
 800d4e2:	f7f3 f80f 	bl	8000504 <__aeabi_ui2d>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	4650      	mov	r0, sl
 800d4ec:	4659      	mov	r1, fp
 800d4ee:	f7f2 fecd 	bl	800028c <__adddf3>
 800d4f2:	2d0f      	cmp	r5, #15
 800d4f4:	4682      	mov	sl, r0
 800d4f6:	468b      	mov	fp, r1
 800d4f8:	ddd5      	ble.n	800d4a6 <_strtod_l+0x3ae>
 800d4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4fc:	1b2c      	subs	r4, r5, r4
 800d4fe:	441c      	add	r4, r3
 800d500:	2c00      	cmp	r4, #0
 800d502:	f340 8096 	ble.w	800d632 <_strtod_l+0x53a>
 800d506:	f014 030f 	ands.w	r3, r4, #15
 800d50a:	d00a      	beq.n	800d522 <_strtod_l+0x42a>
 800d50c:	495e      	ldr	r1, [pc, #376]	@ (800d688 <_strtod_l+0x590>)
 800d50e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d512:	4652      	mov	r2, sl
 800d514:	465b      	mov	r3, fp
 800d516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d51a:	f7f3 f86d 	bl	80005f8 <__aeabi_dmul>
 800d51e:	4682      	mov	sl, r0
 800d520:	468b      	mov	fp, r1
 800d522:	f034 040f 	bics.w	r4, r4, #15
 800d526:	d073      	beq.n	800d610 <_strtod_l+0x518>
 800d528:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d52c:	dd48      	ble.n	800d5c0 <_strtod_l+0x4c8>
 800d52e:	2400      	movs	r4, #0
 800d530:	46a0      	mov	r8, r4
 800d532:	940a      	str	r4, [sp, #40]	@ 0x28
 800d534:	46a1      	mov	r9, r4
 800d536:	9a05      	ldr	r2, [sp, #20]
 800d538:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d690 <_strtod_l+0x598>
 800d53c:	2322      	movs	r3, #34	@ 0x22
 800d53e:	6013      	str	r3, [r2, #0]
 800d540:	f04f 0a00 	mov.w	sl, #0
 800d544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d546:	2b00      	cmp	r3, #0
 800d548:	f43f ae0f 	beq.w	800d16a <_strtod_l+0x72>
 800d54c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d54e:	9805      	ldr	r0, [sp, #20]
 800d550:	f7ff f942 	bl	800c7d8 <_Bfree>
 800d554:	9805      	ldr	r0, [sp, #20]
 800d556:	4649      	mov	r1, r9
 800d558:	f7ff f93e 	bl	800c7d8 <_Bfree>
 800d55c:	9805      	ldr	r0, [sp, #20]
 800d55e:	4641      	mov	r1, r8
 800d560:	f7ff f93a 	bl	800c7d8 <_Bfree>
 800d564:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d566:	9805      	ldr	r0, [sp, #20]
 800d568:	f7ff f936 	bl	800c7d8 <_Bfree>
 800d56c:	9805      	ldr	r0, [sp, #20]
 800d56e:	4621      	mov	r1, r4
 800d570:	f7ff f932 	bl	800c7d8 <_Bfree>
 800d574:	e5f9      	b.n	800d16a <_strtod_l+0x72>
 800d576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d578:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d57c:	4293      	cmp	r3, r2
 800d57e:	dbbc      	blt.n	800d4fa <_strtod_l+0x402>
 800d580:	4c41      	ldr	r4, [pc, #260]	@ (800d688 <_strtod_l+0x590>)
 800d582:	f1c5 050f 	rsb	r5, r5, #15
 800d586:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d58a:	4652      	mov	r2, sl
 800d58c:	465b      	mov	r3, fp
 800d58e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d592:	f7f3 f831 	bl	80005f8 <__aeabi_dmul>
 800d596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d598:	1b5d      	subs	r5, r3, r5
 800d59a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d59e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d5a2:	e78f      	b.n	800d4c4 <_strtod_l+0x3cc>
 800d5a4:	3316      	adds	r3, #22
 800d5a6:	dba8      	blt.n	800d4fa <_strtod_l+0x402>
 800d5a8:	4b37      	ldr	r3, [pc, #220]	@ (800d688 <_strtod_l+0x590>)
 800d5aa:	eba9 0808 	sub.w	r8, r9, r8
 800d5ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d5b2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d5b6:	4650      	mov	r0, sl
 800d5b8:	4659      	mov	r1, fp
 800d5ba:	f7f3 f947 	bl	800084c <__aeabi_ddiv>
 800d5be:	e783      	b.n	800d4c8 <_strtod_l+0x3d0>
 800d5c0:	4b32      	ldr	r3, [pc, #200]	@ (800d68c <_strtod_l+0x594>)
 800d5c2:	9308      	str	r3, [sp, #32]
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	1124      	asrs	r4, r4, #4
 800d5c8:	4650      	mov	r0, sl
 800d5ca:	4659      	mov	r1, fp
 800d5cc:	461e      	mov	r6, r3
 800d5ce:	2c01      	cmp	r4, #1
 800d5d0:	dc21      	bgt.n	800d616 <_strtod_l+0x51e>
 800d5d2:	b10b      	cbz	r3, 800d5d8 <_strtod_l+0x4e0>
 800d5d4:	4682      	mov	sl, r0
 800d5d6:	468b      	mov	fp, r1
 800d5d8:	492c      	ldr	r1, [pc, #176]	@ (800d68c <_strtod_l+0x594>)
 800d5da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d5de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d5e2:	4652      	mov	r2, sl
 800d5e4:	465b      	mov	r3, fp
 800d5e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5ea:	f7f3 f805 	bl	80005f8 <__aeabi_dmul>
 800d5ee:	4b28      	ldr	r3, [pc, #160]	@ (800d690 <_strtod_l+0x598>)
 800d5f0:	460a      	mov	r2, r1
 800d5f2:	400b      	ands	r3, r1
 800d5f4:	4927      	ldr	r1, [pc, #156]	@ (800d694 <_strtod_l+0x59c>)
 800d5f6:	428b      	cmp	r3, r1
 800d5f8:	4682      	mov	sl, r0
 800d5fa:	d898      	bhi.n	800d52e <_strtod_l+0x436>
 800d5fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d600:	428b      	cmp	r3, r1
 800d602:	bf86      	itte	hi
 800d604:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d698 <_strtod_l+0x5a0>
 800d608:	f04f 3aff 	movhi.w	sl, #4294967295
 800d60c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d610:	2300      	movs	r3, #0
 800d612:	9308      	str	r3, [sp, #32]
 800d614:	e07a      	b.n	800d70c <_strtod_l+0x614>
 800d616:	07e2      	lsls	r2, r4, #31
 800d618:	d505      	bpl.n	800d626 <_strtod_l+0x52e>
 800d61a:	9b08      	ldr	r3, [sp, #32]
 800d61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d620:	f7f2 ffea 	bl	80005f8 <__aeabi_dmul>
 800d624:	2301      	movs	r3, #1
 800d626:	9a08      	ldr	r2, [sp, #32]
 800d628:	3208      	adds	r2, #8
 800d62a:	3601      	adds	r6, #1
 800d62c:	1064      	asrs	r4, r4, #1
 800d62e:	9208      	str	r2, [sp, #32]
 800d630:	e7cd      	b.n	800d5ce <_strtod_l+0x4d6>
 800d632:	d0ed      	beq.n	800d610 <_strtod_l+0x518>
 800d634:	4264      	negs	r4, r4
 800d636:	f014 020f 	ands.w	r2, r4, #15
 800d63a:	d00a      	beq.n	800d652 <_strtod_l+0x55a>
 800d63c:	4b12      	ldr	r3, [pc, #72]	@ (800d688 <_strtod_l+0x590>)
 800d63e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d642:	4650      	mov	r0, sl
 800d644:	4659      	mov	r1, fp
 800d646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64a:	f7f3 f8ff 	bl	800084c <__aeabi_ddiv>
 800d64e:	4682      	mov	sl, r0
 800d650:	468b      	mov	fp, r1
 800d652:	1124      	asrs	r4, r4, #4
 800d654:	d0dc      	beq.n	800d610 <_strtod_l+0x518>
 800d656:	2c1f      	cmp	r4, #31
 800d658:	dd20      	ble.n	800d69c <_strtod_l+0x5a4>
 800d65a:	2400      	movs	r4, #0
 800d65c:	46a0      	mov	r8, r4
 800d65e:	940a      	str	r4, [sp, #40]	@ 0x28
 800d660:	46a1      	mov	r9, r4
 800d662:	9a05      	ldr	r2, [sp, #20]
 800d664:	2322      	movs	r3, #34	@ 0x22
 800d666:	f04f 0a00 	mov.w	sl, #0
 800d66a:	f04f 0b00 	mov.w	fp, #0
 800d66e:	6013      	str	r3, [r2, #0]
 800d670:	e768      	b.n	800d544 <_strtod_l+0x44c>
 800d672:	bf00      	nop
 800d674:	0800ef3d 	.word	0x0800ef3d
 800d678:	0800f154 	.word	0x0800f154
 800d67c:	0800ef35 	.word	0x0800ef35
 800d680:	0800ef6c 	.word	0x0800ef6c
 800d684:	0800f2fd 	.word	0x0800f2fd
 800d688:	0800f088 	.word	0x0800f088
 800d68c:	0800f060 	.word	0x0800f060
 800d690:	7ff00000 	.word	0x7ff00000
 800d694:	7ca00000 	.word	0x7ca00000
 800d698:	7fefffff 	.word	0x7fefffff
 800d69c:	f014 0310 	ands.w	r3, r4, #16
 800d6a0:	bf18      	it	ne
 800d6a2:	236a      	movne	r3, #106	@ 0x6a
 800d6a4:	4ea9      	ldr	r6, [pc, #676]	@ (800d94c <_strtod_l+0x854>)
 800d6a6:	9308      	str	r3, [sp, #32]
 800d6a8:	4650      	mov	r0, sl
 800d6aa:	4659      	mov	r1, fp
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	07e2      	lsls	r2, r4, #31
 800d6b0:	d504      	bpl.n	800d6bc <_strtod_l+0x5c4>
 800d6b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d6b6:	f7f2 ff9f 	bl	80005f8 <__aeabi_dmul>
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	1064      	asrs	r4, r4, #1
 800d6be:	f106 0608 	add.w	r6, r6, #8
 800d6c2:	d1f4      	bne.n	800d6ae <_strtod_l+0x5b6>
 800d6c4:	b10b      	cbz	r3, 800d6ca <_strtod_l+0x5d2>
 800d6c6:	4682      	mov	sl, r0
 800d6c8:	468b      	mov	fp, r1
 800d6ca:	9b08      	ldr	r3, [sp, #32]
 800d6cc:	b1b3      	cbz	r3, 800d6fc <_strtod_l+0x604>
 800d6ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d6d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	4659      	mov	r1, fp
 800d6da:	dd0f      	ble.n	800d6fc <_strtod_l+0x604>
 800d6dc:	2b1f      	cmp	r3, #31
 800d6de:	dd55      	ble.n	800d78c <_strtod_l+0x694>
 800d6e0:	2b34      	cmp	r3, #52	@ 0x34
 800d6e2:	bfde      	ittt	le
 800d6e4:	f04f 33ff 	movle.w	r3, #4294967295
 800d6e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d6ec:	4093      	lslle	r3, r2
 800d6ee:	f04f 0a00 	mov.w	sl, #0
 800d6f2:	bfcc      	ite	gt
 800d6f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d6f8:	ea03 0b01 	andle.w	fp, r3, r1
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	2300      	movs	r3, #0
 800d700:	4650      	mov	r0, sl
 800d702:	4659      	mov	r1, fp
 800d704:	f7f3 f9e0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d708:	2800      	cmp	r0, #0
 800d70a:	d1a6      	bne.n	800d65a <_strtod_l+0x562>
 800d70c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d70e:	9300      	str	r3, [sp, #0]
 800d710:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d712:	9805      	ldr	r0, [sp, #20]
 800d714:	462b      	mov	r3, r5
 800d716:	463a      	mov	r2, r7
 800d718:	f7ff f8c6 	bl	800c8a8 <__s2b>
 800d71c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d71e:	2800      	cmp	r0, #0
 800d720:	f43f af05 	beq.w	800d52e <_strtod_l+0x436>
 800d724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d726:	2a00      	cmp	r2, #0
 800d728:	eba9 0308 	sub.w	r3, r9, r8
 800d72c:	bfa8      	it	ge
 800d72e:	2300      	movge	r3, #0
 800d730:	9312      	str	r3, [sp, #72]	@ 0x48
 800d732:	2400      	movs	r4, #0
 800d734:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d738:	9316      	str	r3, [sp, #88]	@ 0x58
 800d73a:	46a0      	mov	r8, r4
 800d73c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d73e:	9805      	ldr	r0, [sp, #20]
 800d740:	6859      	ldr	r1, [r3, #4]
 800d742:	f7ff f809 	bl	800c758 <_Balloc>
 800d746:	4681      	mov	r9, r0
 800d748:	2800      	cmp	r0, #0
 800d74a:	f43f aef4 	beq.w	800d536 <_strtod_l+0x43e>
 800d74e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d750:	691a      	ldr	r2, [r3, #16]
 800d752:	3202      	adds	r2, #2
 800d754:	f103 010c 	add.w	r1, r3, #12
 800d758:	0092      	lsls	r2, r2, #2
 800d75a:	300c      	adds	r0, #12
 800d75c:	f7fe f899 	bl	800b892 <memcpy>
 800d760:	ec4b ab10 	vmov	d0, sl, fp
 800d764:	9805      	ldr	r0, [sp, #20]
 800d766:	aa1c      	add	r2, sp, #112	@ 0x70
 800d768:	a91b      	add	r1, sp, #108	@ 0x6c
 800d76a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d76e:	f7ff fbd7 	bl	800cf20 <__d2b>
 800d772:	901a      	str	r0, [sp, #104]	@ 0x68
 800d774:	2800      	cmp	r0, #0
 800d776:	f43f aede 	beq.w	800d536 <_strtod_l+0x43e>
 800d77a:	9805      	ldr	r0, [sp, #20]
 800d77c:	2101      	movs	r1, #1
 800d77e:	f7ff f929 	bl	800c9d4 <__i2b>
 800d782:	4680      	mov	r8, r0
 800d784:	b948      	cbnz	r0, 800d79a <_strtod_l+0x6a2>
 800d786:	f04f 0800 	mov.w	r8, #0
 800d78a:	e6d4      	b.n	800d536 <_strtod_l+0x43e>
 800d78c:	f04f 32ff 	mov.w	r2, #4294967295
 800d790:	fa02 f303 	lsl.w	r3, r2, r3
 800d794:	ea03 0a0a 	and.w	sl, r3, sl
 800d798:	e7b0      	b.n	800d6fc <_strtod_l+0x604>
 800d79a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d79c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d79e:	2d00      	cmp	r5, #0
 800d7a0:	bfab      	itete	ge
 800d7a2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d7a4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d7a6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d7a8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d7aa:	bfac      	ite	ge
 800d7ac:	18ef      	addge	r7, r5, r3
 800d7ae:	1b5e      	sublt	r6, r3, r5
 800d7b0:	9b08      	ldr	r3, [sp, #32]
 800d7b2:	1aed      	subs	r5, r5, r3
 800d7b4:	4415      	add	r5, r2
 800d7b6:	4b66      	ldr	r3, [pc, #408]	@ (800d950 <_strtod_l+0x858>)
 800d7b8:	3d01      	subs	r5, #1
 800d7ba:	429d      	cmp	r5, r3
 800d7bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d7c0:	da50      	bge.n	800d864 <_strtod_l+0x76c>
 800d7c2:	1b5b      	subs	r3, r3, r5
 800d7c4:	2b1f      	cmp	r3, #31
 800d7c6:	eba2 0203 	sub.w	r2, r2, r3
 800d7ca:	f04f 0101 	mov.w	r1, #1
 800d7ce:	dc3d      	bgt.n	800d84c <_strtod_l+0x754>
 800d7d0:	fa01 f303 	lsl.w	r3, r1, r3
 800d7d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	9310      	str	r3, [sp, #64]	@ 0x40
 800d7da:	18bd      	adds	r5, r7, r2
 800d7dc:	9b08      	ldr	r3, [sp, #32]
 800d7de:	42af      	cmp	r7, r5
 800d7e0:	4416      	add	r6, r2
 800d7e2:	441e      	add	r6, r3
 800d7e4:	463b      	mov	r3, r7
 800d7e6:	bfa8      	it	ge
 800d7e8:	462b      	movge	r3, r5
 800d7ea:	42b3      	cmp	r3, r6
 800d7ec:	bfa8      	it	ge
 800d7ee:	4633      	movge	r3, r6
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	bfc2      	ittt	gt
 800d7f4:	1aed      	subgt	r5, r5, r3
 800d7f6:	1af6      	subgt	r6, r6, r3
 800d7f8:	1aff      	subgt	r7, r7, r3
 800d7fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	dd16      	ble.n	800d82e <_strtod_l+0x736>
 800d800:	4641      	mov	r1, r8
 800d802:	9805      	ldr	r0, [sp, #20]
 800d804:	461a      	mov	r2, r3
 800d806:	f7ff f9a5 	bl	800cb54 <__pow5mult>
 800d80a:	4680      	mov	r8, r0
 800d80c:	2800      	cmp	r0, #0
 800d80e:	d0ba      	beq.n	800d786 <_strtod_l+0x68e>
 800d810:	4601      	mov	r1, r0
 800d812:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d814:	9805      	ldr	r0, [sp, #20]
 800d816:	f7ff f8f3 	bl	800ca00 <__multiply>
 800d81a:	900e      	str	r0, [sp, #56]	@ 0x38
 800d81c:	2800      	cmp	r0, #0
 800d81e:	f43f ae8a 	beq.w	800d536 <_strtod_l+0x43e>
 800d822:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d824:	9805      	ldr	r0, [sp, #20]
 800d826:	f7fe ffd7 	bl	800c7d8 <_Bfree>
 800d82a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d82c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d82e:	2d00      	cmp	r5, #0
 800d830:	dc1d      	bgt.n	800d86e <_strtod_l+0x776>
 800d832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d834:	2b00      	cmp	r3, #0
 800d836:	dd23      	ble.n	800d880 <_strtod_l+0x788>
 800d838:	4649      	mov	r1, r9
 800d83a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d83c:	9805      	ldr	r0, [sp, #20]
 800d83e:	f7ff f989 	bl	800cb54 <__pow5mult>
 800d842:	4681      	mov	r9, r0
 800d844:	b9e0      	cbnz	r0, 800d880 <_strtod_l+0x788>
 800d846:	f04f 0900 	mov.w	r9, #0
 800d84a:	e674      	b.n	800d536 <_strtod_l+0x43e>
 800d84c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d850:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d854:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d858:	35e2      	adds	r5, #226	@ 0xe2
 800d85a:	fa01 f305 	lsl.w	r3, r1, r5
 800d85e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d860:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d862:	e7ba      	b.n	800d7da <_strtod_l+0x6e2>
 800d864:	2300      	movs	r3, #0
 800d866:	9310      	str	r3, [sp, #64]	@ 0x40
 800d868:	2301      	movs	r3, #1
 800d86a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d86c:	e7b5      	b.n	800d7da <_strtod_l+0x6e2>
 800d86e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d870:	9805      	ldr	r0, [sp, #20]
 800d872:	462a      	mov	r2, r5
 800d874:	f7ff f9c8 	bl	800cc08 <__lshift>
 800d878:	901a      	str	r0, [sp, #104]	@ 0x68
 800d87a:	2800      	cmp	r0, #0
 800d87c:	d1d9      	bne.n	800d832 <_strtod_l+0x73a>
 800d87e:	e65a      	b.n	800d536 <_strtod_l+0x43e>
 800d880:	2e00      	cmp	r6, #0
 800d882:	dd07      	ble.n	800d894 <_strtod_l+0x79c>
 800d884:	4649      	mov	r1, r9
 800d886:	9805      	ldr	r0, [sp, #20]
 800d888:	4632      	mov	r2, r6
 800d88a:	f7ff f9bd 	bl	800cc08 <__lshift>
 800d88e:	4681      	mov	r9, r0
 800d890:	2800      	cmp	r0, #0
 800d892:	d0d8      	beq.n	800d846 <_strtod_l+0x74e>
 800d894:	2f00      	cmp	r7, #0
 800d896:	dd08      	ble.n	800d8aa <_strtod_l+0x7b2>
 800d898:	4641      	mov	r1, r8
 800d89a:	9805      	ldr	r0, [sp, #20]
 800d89c:	463a      	mov	r2, r7
 800d89e:	f7ff f9b3 	bl	800cc08 <__lshift>
 800d8a2:	4680      	mov	r8, r0
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	f43f ae46 	beq.w	800d536 <_strtod_l+0x43e>
 800d8aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d8ac:	9805      	ldr	r0, [sp, #20]
 800d8ae:	464a      	mov	r2, r9
 800d8b0:	f7ff fa32 	bl	800cd18 <__mdiff>
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	2800      	cmp	r0, #0
 800d8b8:	f43f ae3d 	beq.w	800d536 <_strtod_l+0x43e>
 800d8bc:	68c3      	ldr	r3, [r0, #12]
 800d8be:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	60c3      	str	r3, [r0, #12]
 800d8c4:	4641      	mov	r1, r8
 800d8c6:	f7ff fa0b 	bl	800cce0 <__mcmp>
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	da46      	bge.n	800d95c <_strtod_l+0x864>
 800d8ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8d0:	ea53 030a 	orrs.w	r3, r3, sl
 800d8d4:	d16c      	bne.n	800d9b0 <_strtod_l+0x8b8>
 800d8d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d168      	bne.n	800d9b0 <_strtod_l+0x8b8>
 800d8de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d8e2:	0d1b      	lsrs	r3, r3, #20
 800d8e4:	051b      	lsls	r3, r3, #20
 800d8e6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d8ea:	d961      	bls.n	800d9b0 <_strtod_l+0x8b8>
 800d8ec:	6963      	ldr	r3, [r4, #20]
 800d8ee:	b913      	cbnz	r3, 800d8f6 <_strtod_l+0x7fe>
 800d8f0:	6923      	ldr	r3, [r4, #16]
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	dd5c      	ble.n	800d9b0 <_strtod_l+0x8b8>
 800d8f6:	4621      	mov	r1, r4
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	9805      	ldr	r0, [sp, #20]
 800d8fc:	f7ff f984 	bl	800cc08 <__lshift>
 800d900:	4641      	mov	r1, r8
 800d902:	4604      	mov	r4, r0
 800d904:	f7ff f9ec 	bl	800cce0 <__mcmp>
 800d908:	2800      	cmp	r0, #0
 800d90a:	dd51      	ble.n	800d9b0 <_strtod_l+0x8b8>
 800d90c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d910:	9a08      	ldr	r2, [sp, #32]
 800d912:	0d1b      	lsrs	r3, r3, #20
 800d914:	051b      	lsls	r3, r3, #20
 800d916:	2a00      	cmp	r2, #0
 800d918:	d06b      	beq.n	800d9f2 <_strtod_l+0x8fa>
 800d91a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d91e:	d868      	bhi.n	800d9f2 <_strtod_l+0x8fa>
 800d920:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d924:	f67f ae9d 	bls.w	800d662 <_strtod_l+0x56a>
 800d928:	4b0a      	ldr	r3, [pc, #40]	@ (800d954 <_strtod_l+0x85c>)
 800d92a:	4650      	mov	r0, sl
 800d92c:	4659      	mov	r1, fp
 800d92e:	2200      	movs	r2, #0
 800d930:	f7f2 fe62 	bl	80005f8 <__aeabi_dmul>
 800d934:	4b08      	ldr	r3, [pc, #32]	@ (800d958 <_strtod_l+0x860>)
 800d936:	400b      	ands	r3, r1
 800d938:	4682      	mov	sl, r0
 800d93a:	468b      	mov	fp, r1
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	f47f ae05 	bne.w	800d54c <_strtod_l+0x454>
 800d942:	9a05      	ldr	r2, [sp, #20]
 800d944:	2322      	movs	r3, #34	@ 0x22
 800d946:	6013      	str	r3, [r2, #0]
 800d948:	e600      	b.n	800d54c <_strtod_l+0x454>
 800d94a:	bf00      	nop
 800d94c:	0800f180 	.word	0x0800f180
 800d950:	fffffc02 	.word	0xfffffc02
 800d954:	39500000 	.word	0x39500000
 800d958:	7ff00000 	.word	0x7ff00000
 800d95c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d960:	d165      	bne.n	800da2e <_strtod_l+0x936>
 800d962:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d964:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d968:	b35a      	cbz	r2, 800d9c2 <_strtod_l+0x8ca>
 800d96a:	4a9f      	ldr	r2, [pc, #636]	@ (800dbe8 <_strtod_l+0xaf0>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d12b      	bne.n	800d9c8 <_strtod_l+0x8d0>
 800d970:	9b08      	ldr	r3, [sp, #32]
 800d972:	4651      	mov	r1, sl
 800d974:	b303      	cbz	r3, 800d9b8 <_strtod_l+0x8c0>
 800d976:	4b9d      	ldr	r3, [pc, #628]	@ (800dbec <_strtod_l+0xaf4>)
 800d978:	465a      	mov	r2, fp
 800d97a:	4013      	ands	r3, r2
 800d97c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d980:	f04f 32ff 	mov.w	r2, #4294967295
 800d984:	d81b      	bhi.n	800d9be <_strtod_l+0x8c6>
 800d986:	0d1b      	lsrs	r3, r3, #20
 800d988:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d98c:	fa02 f303 	lsl.w	r3, r2, r3
 800d990:	4299      	cmp	r1, r3
 800d992:	d119      	bne.n	800d9c8 <_strtod_l+0x8d0>
 800d994:	4b96      	ldr	r3, [pc, #600]	@ (800dbf0 <_strtod_l+0xaf8>)
 800d996:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d998:	429a      	cmp	r2, r3
 800d99a:	d102      	bne.n	800d9a2 <_strtod_l+0x8aa>
 800d99c:	3101      	adds	r1, #1
 800d99e:	f43f adca 	beq.w	800d536 <_strtod_l+0x43e>
 800d9a2:	4b92      	ldr	r3, [pc, #584]	@ (800dbec <_strtod_l+0xaf4>)
 800d9a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d9a6:	401a      	ands	r2, r3
 800d9a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d9ac:	f04f 0a00 	mov.w	sl, #0
 800d9b0:	9b08      	ldr	r3, [sp, #32]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d1b8      	bne.n	800d928 <_strtod_l+0x830>
 800d9b6:	e5c9      	b.n	800d54c <_strtod_l+0x454>
 800d9b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9bc:	e7e8      	b.n	800d990 <_strtod_l+0x898>
 800d9be:	4613      	mov	r3, r2
 800d9c0:	e7e6      	b.n	800d990 <_strtod_l+0x898>
 800d9c2:	ea53 030a 	orrs.w	r3, r3, sl
 800d9c6:	d0a1      	beq.n	800d90c <_strtod_l+0x814>
 800d9c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d9ca:	b1db      	cbz	r3, 800da04 <_strtod_l+0x90c>
 800d9cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d9ce:	4213      	tst	r3, r2
 800d9d0:	d0ee      	beq.n	800d9b0 <_strtod_l+0x8b8>
 800d9d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9d4:	9a08      	ldr	r2, [sp, #32]
 800d9d6:	4650      	mov	r0, sl
 800d9d8:	4659      	mov	r1, fp
 800d9da:	b1bb      	cbz	r3, 800da0c <_strtod_l+0x914>
 800d9dc:	f7ff fb6e 	bl	800d0bc <sulp>
 800d9e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d9e4:	ec53 2b10 	vmov	r2, r3, d0
 800d9e8:	f7f2 fc50 	bl	800028c <__adddf3>
 800d9ec:	4682      	mov	sl, r0
 800d9ee:	468b      	mov	fp, r1
 800d9f0:	e7de      	b.n	800d9b0 <_strtod_l+0x8b8>
 800d9f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d9f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d9fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d9fe:	f04f 3aff 	mov.w	sl, #4294967295
 800da02:	e7d5      	b.n	800d9b0 <_strtod_l+0x8b8>
 800da04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800da06:	ea13 0f0a 	tst.w	r3, sl
 800da0a:	e7e1      	b.n	800d9d0 <_strtod_l+0x8d8>
 800da0c:	f7ff fb56 	bl	800d0bc <sulp>
 800da10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800da14:	ec53 2b10 	vmov	r2, r3, d0
 800da18:	f7f2 fc36 	bl	8000288 <__aeabi_dsub>
 800da1c:	2200      	movs	r2, #0
 800da1e:	2300      	movs	r3, #0
 800da20:	4682      	mov	sl, r0
 800da22:	468b      	mov	fp, r1
 800da24:	f7f3 f850 	bl	8000ac8 <__aeabi_dcmpeq>
 800da28:	2800      	cmp	r0, #0
 800da2a:	d0c1      	beq.n	800d9b0 <_strtod_l+0x8b8>
 800da2c:	e619      	b.n	800d662 <_strtod_l+0x56a>
 800da2e:	4641      	mov	r1, r8
 800da30:	4620      	mov	r0, r4
 800da32:	f7ff facd 	bl	800cfd0 <__ratio>
 800da36:	ec57 6b10 	vmov	r6, r7, d0
 800da3a:	2200      	movs	r2, #0
 800da3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800da40:	4630      	mov	r0, r6
 800da42:	4639      	mov	r1, r7
 800da44:	f7f3 f854 	bl	8000af0 <__aeabi_dcmple>
 800da48:	2800      	cmp	r0, #0
 800da4a:	d06f      	beq.n	800db2c <_strtod_l+0xa34>
 800da4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d17a      	bne.n	800db48 <_strtod_l+0xa50>
 800da52:	f1ba 0f00 	cmp.w	sl, #0
 800da56:	d158      	bne.n	800db0a <_strtod_l+0xa12>
 800da58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d15a      	bne.n	800db18 <_strtod_l+0xa20>
 800da62:	4b64      	ldr	r3, [pc, #400]	@ (800dbf4 <_strtod_l+0xafc>)
 800da64:	2200      	movs	r2, #0
 800da66:	4630      	mov	r0, r6
 800da68:	4639      	mov	r1, r7
 800da6a:	f7f3 f837 	bl	8000adc <__aeabi_dcmplt>
 800da6e:	2800      	cmp	r0, #0
 800da70:	d159      	bne.n	800db26 <_strtod_l+0xa2e>
 800da72:	4630      	mov	r0, r6
 800da74:	4639      	mov	r1, r7
 800da76:	4b60      	ldr	r3, [pc, #384]	@ (800dbf8 <_strtod_l+0xb00>)
 800da78:	2200      	movs	r2, #0
 800da7a:	f7f2 fdbd 	bl	80005f8 <__aeabi_dmul>
 800da7e:	4606      	mov	r6, r0
 800da80:	460f      	mov	r7, r1
 800da82:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800da86:	9606      	str	r6, [sp, #24]
 800da88:	9307      	str	r3, [sp, #28]
 800da8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da8e:	4d57      	ldr	r5, [pc, #348]	@ (800dbec <_strtod_l+0xaf4>)
 800da90:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800da94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da96:	401d      	ands	r5, r3
 800da98:	4b58      	ldr	r3, [pc, #352]	@ (800dbfc <_strtod_l+0xb04>)
 800da9a:	429d      	cmp	r5, r3
 800da9c:	f040 80b2 	bne.w	800dc04 <_strtod_l+0xb0c>
 800daa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800daa2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800daa6:	ec4b ab10 	vmov	d0, sl, fp
 800daaa:	f7ff f9c9 	bl	800ce40 <__ulp>
 800daae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dab2:	ec51 0b10 	vmov	r0, r1, d0
 800dab6:	f7f2 fd9f 	bl	80005f8 <__aeabi_dmul>
 800daba:	4652      	mov	r2, sl
 800dabc:	465b      	mov	r3, fp
 800dabe:	f7f2 fbe5 	bl	800028c <__adddf3>
 800dac2:	460b      	mov	r3, r1
 800dac4:	4949      	ldr	r1, [pc, #292]	@ (800dbec <_strtod_l+0xaf4>)
 800dac6:	4a4e      	ldr	r2, [pc, #312]	@ (800dc00 <_strtod_l+0xb08>)
 800dac8:	4019      	ands	r1, r3
 800daca:	4291      	cmp	r1, r2
 800dacc:	4682      	mov	sl, r0
 800dace:	d942      	bls.n	800db56 <_strtod_l+0xa5e>
 800dad0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dad2:	4b47      	ldr	r3, [pc, #284]	@ (800dbf0 <_strtod_l+0xaf8>)
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d103      	bne.n	800dae0 <_strtod_l+0x9e8>
 800dad8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dada:	3301      	adds	r3, #1
 800dadc:	f43f ad2b 	beq.w	800d536 <_strtod_l+0x43e>
 800dae0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800dbf0 <_strtod_l+0xaf8>
 800dae4:	f04f 3aff 	mov.w	sl, #4294967295
 800dae8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800daea:	9805      	ldr	r0, [sp, #20]
 800daec:	f7fe fe74 	bl	800c7d8 <_Bfree>
 800daf0:	9805      	ldr	r0, [sp, #20]
 800daf2:	4649      	mov	r1, r9
 800daf4:	f7fe fe70 	bl	800c7d8 <_Bfree>
 800daf8:	9805      	ldr	r0, [sp, #20]
 800dafa:	4641      	mov	r1, r8
 800dafc:	f7fe fe6c 	bl	800c7d8 <_Bfree>
 800db00:	9805      	ldr	r0, [sp, #20]
 800db02:	4621      	mov	r1, r4
 800db04:	f7fe fe68 	bl	800c7d8 <_Bfree>
 800db08:	e618      	b.n	800d73c <_strtod_l+0x644>
 800db0a:	f1ba 0f01 	cmp.w	sl, #1
 800db0e:	d103      	bne.n	800db18 <_strtod_l+0xa20>
 800db10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db12:	2b00      	cmp	r3, #0
 800db14:	f43f ada5 	beq.w	800d662 <_strtod_l+0x56a>
 800db18:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800dbc8 <_strtod_l+0xad0>
 800db1c:	4f35      	ldr	r7, [pc, #212]	@ (800dbf4 <_strtod_l+0xafc>)
 800db1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800db22:	2600      	movs	r6, #0
 800db24:	e7b1      	b.n	800da8a <_strtod_l+0x992>
 800db26:	4f34      	ldr	r7, [pc, #208]	@ (800dbf8 <_strtod_l+0xb00>)
 800db28:	2600      	movs	r6, #0
 800db2a:	e7aa      	b.n	800da82 <_strtod_l+0x98a>
 800db2c:	4b32      	ldr	r3, [pc, #200]	@ (800dbf8 <_strtod_l+0xb00>)
 800db2e:	4630      	mov	r0, r6
 800db30:	4639      	mov	r1, r7
 800db32:	2200      	movs	r2, #0
 800db34:	f7f2 fd60 	bl	80005f8 <__aeabi_dmul>
 800db38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db3a:	4606      	mov	r6, r0
 800db3c:	460f      	mov	r7, r1
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d09f      	beq.n	800da82 <_strtod_l+0x98a>
 800db42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800db46:	e7a0      	b.n	800da8a <_strtod_l+0x992>
 800db48:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800dbd0 <_strtod_l+0xad8>
 800db4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800db50:	ec57 6b17 	vmov	r6, r7, d7
 800db54:	e799      	b.n	800da8a <_strtod_l+0x992>
 800db56:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800db5a:	9b08      	ldr	r3, [sp, #32]
 800db5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800db60:	2b00      	cmp	r3, #0
 800db62:	d1c1      	bne.n	800dae8 <_strtod_l+0x9f0>
 800db64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800db68:	0d1b      	lsrs	r3, r3, #20
 800db6a:	051b      	lsls	r3, r3, #20
 800db6c:	429d      	cmp	r5, r3
 800db6e:	d1bb      	bne.n	800dae8 <_strtod_l+0x9f0>
 800db70:	4630      	mov	r0, r6
 800db72:	4639      	mov	r1, r7
 800db74:	f7f3 f8a0 	bl	8000cb8 <__aeabi_d2lz>
 800db78:	f7f2 fd10 	bl	800059c <__aeabi_l2d>
 800db7c:	4602      	mov	r2, r0
 800db7e:	460b      	mov	r3, r1
 800db80:	4630      	mov	r0, r6
 800db82:	4639      	mov	r1, r7
 800db84:	f7f2 fb80 	bl	8000288 <__aeabi_dsub>
 800db88:	460b      	mov	r3, r1
 800db8a:	4602      	mov	r2, r0
 800db8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800db90:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800db94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db96:	ea46 060a 	orr.w	r6, r6, sl
 800db9a:	431e      	orrs	r6, r3
 800db9c:	d06f      	beq.n	800dc7e <_strtod_l+0xb86>
 800db9e:	a30e      	add	r3, pc, #56	@ (adr r3, 800dbd8 <_strtod_l+0xae0>)
 800dba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba4:	f7f2 ff9a 	bl	8000adc <__aeabi_dcmplt>
 800dba8:	2800      	cmp	r0, #0
 800dbaa:	f47f accf 	bne.w	800d54c <_strtod_l+0x454>
 800dbae:	a30c      	add	r3, pc, #48	@ (adr r3, 800dbe0 <_strtod_l+0xae8>)
 800dbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dbb8:	f7f2 ffae 	bl	8000b18 <__aeabi_dcmpgt>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	d093      	beq.n	800dae8 <_strtod_l+0x9f0>
 800dbc0:	e4c4      	b.n	800d54c <_strtod_l+0x454>
 800dbc2:	bf00      	nop
 800dbc4:	f3af 8000 	nop.w
 800dbc8:	00000000 	.word	0x00000000
 800dbcc:	bff00000 	.word	0xbff00000
 800dbd0:	00000000 	.word	0x00000000
 800dbd4:	3ff00000 	.word	0x3ff00000
 800dbd8:	94a03595 	.word	0x94a03595
 800dbdc:	3fdfffff 	.word	0x3fdfffff
 800dbe0:	35afe535 	.word	0x35afe535
 800dbe4:	3fe00000 	.word	0x3fe00000
 800dbe8:	000fffff 	.word	0x000fffff
 800dbec:	7ff00000 	.word	0x7ff00000
 800dbf0:	7fefffff 	.word	0x7fefffff
 800dbf4:	3ff00000 	.word	0x3ff00000
 800dbf8:	3fe00000 	.word	0x3fe00000
 800dbfc:	7fe00000 	.word	0x7fe00000
 800dc00:	7c9fffff 	.word	0x7c9fffff
 800dc04:	9b08      	ldr	r3, [sp, #32]
 800dc06:	b323      	cbz	r3, 800dc52 <_strtod_l+0xb5a>
 800dc08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800dc0c:	d821      	bhi.n	800dc52 <_strtod_l+0xb5a>
 800dc0e:	a328      	add	r3, pc, #160	@ (adr r3, 800dcb0 <_strtod_l+0xbb8>)
 800dc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc14:	4630      	mov	r0, r6
 800dc16:	4639      	mov	r1, r7
 800dc18:	f7f2 ff6a 	bl	8000af0 <__aeabi_dcmple>
 800dc1c:	b1a0      	cbz	r0, 800dc48 <_strtod_l+0xb50>
 800dc1e:	4639      	mov	r1, r7
 800dc20:	4630      	mov	r0, r6
 800dc22:	f7f2 ffc1 	bl	8000ba8 <__aeabi_d2uiz>
 800dc26:	2801      	cmp	r0, #1
 800dc28:	bf38      	it	cc
 800dc2a:	2001      	movcc	r0, #1
 800dc2c:	f7f2 fc6a 	bl	8000504 <__aeabi_ui2d>
 800dc30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc32:	4606      	mov	r6, r0
 800dc34:	460f      	mov	r7, r1
 800dc36:	b9fb      	cbnz	r3, 800dc78 <_strtod_l+0xb80>
 800dc38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dc3c:	9014      	str	r0, [sp, #80]	@ 0x50
 800dc3e:	9315      	str	r3, [sp, #84]	@ 0x54
 800dc40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800dc44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dc48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dc4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800dc4e:	1b5b      	subs	r3, r3, r5
 800dc50:	9311      	str	r3, [sp, #68]	@ 0x44
 800dc52:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dc56:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800dc5a:	f7ff f8f1 	bl	800ce40 <__ulp>
 800dc5e:	4650      	mov	r0, sl
 800dc60:	ec53 2b10 	vmov	r2, r3, d0
 800dc64:	4659      	mov	r1, fp
 800dc66:	f7f2 fcc7 	bl	80005f8 <__aeabi_dmul>
 800dc6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800dc6e:	f7f2 fb0d 	bl	800028c <__adddf3>
 800dc72:	4682      	mov	sl, r0
 800dc74:	468b      	mov	fp, r1
 800dc76:	e770      	b.n	800db5a <_strtod_l+0xa62>
 800dc78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800dc7c:	e7e0      	b.n	800dc40 <_strtod_l+0xb48>
 800dc7e:	a30e      	add	r3, pc, #56	@ (adr r3, 800dcb8 <_strtod_l+0xbc0>)
 800dc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc84:	f7f2 ff2a 	bl	8000adc <__aeabi_dcmplt>
 800dc88:	e798      	b.n	800dbbc <_strtod_l+0xac4>
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc8e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dc90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc92:	6013      	str	r3, [r2, #0]
 800dc94:	f7ff ba6d 	b.w	800d172 <_strtod_l+0x7a>
 800dc98:	2a65      	cmp	r2, #101	@ 0x65
 800dc9a:	f43f ab66 	beq.w	800d36a <_strtod_l+0x272>
 800dc9e:	2a45      	cmp	r2, #69	@ 0x45
 800dca0:	f43f ab63 	beq.w	800d36a <_strtod_l+0x272>
 800dca4:	2301      	movs	r3, #1
 800dca6:	f7ff bb9e 	b.w	800d3e6 <_strtod_l+0x2ee>
 800dcaa:	bf00      	nop
 800dcac:	f3af 8000 	nop.w
 800dcb0:	ffc00000 	.word	0xffc00000
 800dcb4:	41dfffff 	.word	0x41dfffff
 800dcb8:	94a03595 	.word	0x94a03595
 800dcbc:	3fcfffff 	.word	0x3fcfffff

0800dcc0 <_strtod_r>:
 800dcc0:	4b01      	ldr	r3, [pc, #4]	@ (800dcc8 <_strtod_r+0x8>)
 800dcc2:	f7ff ba19 	b.w	800d0f8 <_strtod_l>
 800dcc6:	bf00      	nop
 800dcc8:	200000a0 	.word	0x200000a0

0800dccc <_strtol_l.constprop.0>:
 800dccc:	2b24      	cmp	r3, #36	@ 0x24
 800dcce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcd2:	4686      	mov	lr, r0
 800dcd4:	4690      	mov	r8, r2
 800dcd6:	d801      	bhi.n	800dcdc <_strtol_l.constprop.0+0x10>
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d106      	bne.n	800dcea <_strtol_l.constprop.0+0x1e>
 800dcdc:	f7fd fdac 	bl	800b838 <__errno>
 800dce0:	2316      	movs	r3, #22
 800dce2:	6003      	str	r3, [r0, #0]
 800dce4:	2000      	movs	r0, #0
 800dce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcea:	4834      	ldr	r0, [pc, #208]	@ (800ddbc <_strtol_l.constprop.0+0xf0>)
 800dcec:	460d      	mov	r5, r1
 800dcee:	462a      	mov	r2, r5
 800dcf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcf4:	5d06      	ldrb	r6, [r0, r4]
 800dcf6:	f016 0608 	ands.w	r6, r6, #8
 800dcfa:	d1f8      	bne.n	800dcee <_strtol_l.constprop.0+0x22>
 800dcfc:	2c2d      	cmp	r4, #45	@ 0x2d
 800dcfe:	d12d      	bne.n	800dd5c <_strtol_l.constprop.0+0x90>
 800dd00:	782c      	ldrb	r4, [r5, #0]
 800dd02:	2601      	movs	r6, #1
 800dd04:	1c95      	adds	r5, r2, #2
 800dd06:	f033 0210 	bics.w	r2, r3, #16
 800dd0a:	d109      	bne.n	800dd20 <_strtol_l.constprop.0+0x54>
 800dd0c:	2c30      	cmp	r4, #48	@ 0x30
 800dd0e:	d12a      	bne.n	800dd66 <_strtol_l.constprop.0+0x9a>
 800dd10:	782a      	ldrb	r2, [r5, #0]
 800dd12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dd16:	2a58      	cmp	r2, #88	@ 0x58
 800dd18:	d125      	bne.n	800dd66 <_strtol_l.constprop.0+0x9a>
 800dd1a:	786c      	ldrb	r4, [r5, #1]
 800dd1c:	2310      	movs	r3, #16
 800dd1e:	3502      	adds	r5, #2
 800dd20:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800dd24:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dd28:	2200      	movs	r2, #0
 800dd2a:	fbbc f9f3 	udiv	r9, ip, r3
 800dd2e:	4610      	mov	r0, r2
 800dd30:	fb03 ca19 	mls	sl, r3, r9, ip
 800dd34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800dd38:	2f09      	cmp	r7, #9
 800dd3a:	d81b      	bhi.n	800dd74 <_strtol_l.constprop.0+0xa8>
 800dd3c:	463c      	mov	r4, r7
 800dd3e:	42a3      	cmp	r3, r4
 800dd40:	dd27      	ble.n	800dd92 <_strtol_l.constprop.0+0xc6>
 800dd42:	1c57      	adds	r7, r2, #1
 800dd44:	d007      	beq.n	800dd56 <_strtol_l.constprop.0+0x8a>
 800dd46:	4581      	cmp	r9, r0
 800dd48:	d320      	bcc.n	800dd8c <_strtol_l.constprop.0+0xc0>
 800dd4a:	d101      	bne.n	800dd50 <_strtol_l.constprop.0+0x84>
 800dd4c:	45a2      	cmp	sl, r4
 800dd4e:	db1d      	blt.n	800dd8c <_strtol_l.constprop.0+0xc0>
 800dd50:	fb00 4003 	mla	r0, r0, r3, r4
 800dd54:	2201      	movs	r2, #1
 800dd56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd5a:	e7eb      	b.n	800dd34 <_strtol_l.constprop.0+0x68>
 800dd5c:	2c2b      	cmp	r4, #43	@ 0x2b
 800dd5e:	bf04      	itt	eq
 800dd60:	782c      	ldrbeq	r4, [r5, #0]
 800dd62:	1c95      	addeq	r5, r2, #2
 800dd64:	e7cf      	b.n	800dd06 <_strtol_l.constprop.0+0x3a>
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d1da      	bne.n	800dd20 <_strtol_l.constprop.0+0x54>
 800dd6a:	2c30      	cmp	r4, #48	@ 0x30
 800dd6c:	bf0c      	ite	eq
 800dd6e:	2308      	moveq	r3, #8
 800dd70:	230a      	movne	r3, #10
 800dd72:	e7d5      	b.n	800dd20 <_strtol_l.constprop.0+0x54>
 800dd74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dd78:	2f19      	cmp	r7, #25
 800dd7a:	d801      	bhi.n	800dd80 <_strtol_l.constprop.0+0xb4>
 800dd7c:	3c37      	subs	r4, #55	@ 0x37
 800dd7e:	e7de      	b.n	800dd3e <_strtol_l.constprop.0+0x72>
 800dd80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dd84:	2f19      	cmp	r7, #25
 800dd86:	d804      	bhi.n	800dd92 <_strtol_l.constprop.0+0xc6>
 800dd88:	3c57      	subs	r4, #87	@ 0x57
 800dd8a:	e7d8      	b.n	800dd3e <_strtol_l.constprop.0+0x72>
 800dd8c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd90:	e7e1      	b.n	800dd56 <_strtol_l.constprop.0+0x8a>
 800dd92:	1c53      	adds	r3, r2, #1
 800dd94:	d108      	bne.n	800dda8 <_strtol_l.constprop.0+0xdc>
 800dd96:	2322      	movs	r3, #34	@ 0x22
 800dd98:	f8ce 3000 	str.w	r3, [lr]
 800dd9c:	4660      	mov	r0, ip
 800dd9e:	f1b8 0f00 	cmp.w	r8, #0
 800dda2:	d0a0      	beq.n	800dce6 <_strtol_l.constprop.0+0x1a>
 800dda4:	1e69      	subs	r1, r5, #1
 800dda6:	e006      	b.n	800ddb6 <_strtol_l.constprop.0+0xea>
 800dda8:	b106      	cbz	r6, 800ddac <_strtol_l.constprop.0+0xe0>
 800ddaa:	4240      	negs	r0, r0
 800ddac:	f1b8 0f00 	cmp.w	r8, #0
 800ddb0:	d099      	beq.n	800dce6 <_strtol_l.constprop.0+0x1a>
 800ddb2:	2a00      	cmp	r2, #0
 800ddb4:	d1f6      	bne.n	800dda4 <_strtol_l.constprop.0+0xd8>
 800ddb6:	f8c8 1000 	str.w	r1, [r8]
 800ddba:	e794      	b.n	800dce6 <_strtol_l.constprop.0+0x1a>
 800ddbc:	0800f1a9 	.word	0x0800f1a9

0800ddc0 <_strtol_r>:
 800ddc0:	f7ff bf84 	b.w	800dccc <_strtol_l.constprop.0>

0800ddc4 <__ssputs_r>:
 800ddc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddc8:	688e      	ldr	r6, [r1, #8]
 800ddca:	461f      	mov	r7, r3
 800ddcc:	42be      	cmp	r6, r7
 800ddce:	680b      	ldr	r3, [r1, #0]
 800ddd0:	4682      	mov	sl, r0
 800ddd2:	460c      	mov	r4, r1
 800ddd4:	4690      	mov	r8, r2
 800ddd6:	d82d      	bhi.n	800de34 <__ssputs_r+0x70>
 800ddd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dddc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dde0:	d026      	beq.n	800de30 <__ssputs_r+0x6c>
 800dde2:	6965      	ldr	r5, [r4, #20]
 800dde4:	6909      	ldr	r1, [r1, #16]
 800dde6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ddea:	eba3 0901 	sub.w	r9, r3, r1
 800ddee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ddf2:	1c7b      	adds	r3, r7, #1
 800ddf4:	444b      	add	r3, r9
 800ddf6:	106d      	asrs	r5, r5, #1
 800ddf8:	429d      	cmp	r5, r3
 800ddfa:	bf38      	it	cc
 800ddfc:	461d      	movcc	r5, r3
 800ddfe:	0553      	lsls	r3, r2, #21
 800de00:	d527      	bpl.n	800de52 <__ssputs_r+0x8e>
 800de02:	4629      	mov	r1, r5
 800de04:	f7fe fc1c 	bl	800c640 <_malloc_r>
 800de08:	4606      	mov	r6, r0
 800de0a:	b360      	cbz	r0, 800de66 <__ssputs_r+0xa2>
 800de0c:	6921      	ldr	r1, [r4, #16]
 800de0e:	464a      	mov	r2, r9
 800de10:	f7fd fd3f 	bl	800b892 <memcpy>
 800de14:	89a3      	ldrh	r3, [r4, #12]
 800de16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800de1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de1e:	81a3      	strh	r3, [r4, #12]
 800de20:	6126      	str	r6, [r4, #16]
 800de22:	6165      	str	r5, [r4, #20]
 800de24:	444e      	add	r6, r9
 800de26:	eba5 0509 	sub.w	r5, r5, r9
 800de2a:	6026      	str	r6, [r4, #0]
 800de2c:	60a5      	str	r5, [r4, #8]
 800de2e:	463e      	mov	r6, r7
 800de30:	42be      	cmp	r6, r7
 800de32:	d900      	bls.n	800de36 <__ssputs_r+0x72>
 800de34:	463e      	mov	r6, r7
 800de36:	6820      	ldr	r0, [r4, #0]
 800de38:	4632      	mov	r2, r6
 800de3a:	4641      	mov	r1, r8
 800de3c:	f000 fb6a 	bl	800e514 <memmove>
 800de40:	68a3      	ldr	r3, [r4, #8]
 800de42:	1b9b      	subs	r3, r3, r6
 800de44:	60a3      	str	r3, [r4, #8]
 800de46:	6823      	ldr	r3, [r4, #0]
 800de48:	4433      	add	r3, r6
 800de4a:	6023      	str	r3, [r4, #0]
 800de4c:	2000      	movs	r0, #0
 800de4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de52:	462a      	mov	r2, r5
 800de54:	f000 ff41 	bl	800ecda <_realloc_r>
 800de58:	4606      	mov	r6, r0
 800de5a:	2800      	cmp	r0, #0
 800de5c:	d1e0      	bne.n	800de20 <__ssputs_r+0x5c>
 800de5e:	6921      	ldr	r1, [r4, #16]
 800de60:	4650      	mov	r0, sl
 800de62:	f7fe fb79 	bl	800c558 <_free_r>
 800de66:	230c      	movs	r3, #12
 800de68:	f8ca 3000 	str.w	r3, [sl]
 800de6c:	89a3      	ldrh	r3, [r4, #12]
 800de6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de72:	81a3      	strh	r3, [r4, #12]
 800de74:	f04f 30ff 	mov.w	r0, #4294967295
 800de78:	e7e9      	b.n	800de4e <__ssputs_r+0x8a>
	...

0800de7c <_svfiprintf_r>:
 800de7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de80:	4698      	mov	r8, r3
 800de82:	898b      	ldrh	r3, [r1, #12]
 800de84:	061b      	lsls	r3, r3, #24
 800de86:	b09d      	sub	sp, #116	@ 0x74
 800de88:	4607      	mov	r7, r0
 800de8a:	460d      	mov	r5, r1
 800de8c:	4614      	mov	r4, r2
 800de8e:	d510      	bpl.n	800deb2 <_svfiprintf_r+0x36>
 800de90:	690b      	ldr	r3, [r1, #16]
 800de92:	b973      	cbnz	r3, 800deb2 <_svfiprintf_r+0x36>
 800de94:	2140      	movs	r1, #64	@ 0x40
 800de96:	f7fe fbd3 	bl	800c640 <_malloc_r>
 800de9a:	6028      	str	r0, [r5, #0]
 800de9c:	6128      	str	r0, [r5, #16]
 800de9e:	b930      	cbnz	r0, 800deae <_svfiprintf_r+0x32>
 800dea0:	230c      	movs	r3, #12
 800dea2:	603b      	str	r3, [r7, #0]
 800dea4:	f04f 30ff 	mov.w	r0, #4294967295
 800dea8:	b01d      	add	sp, #116	@ 0x74
 800deaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deae:	2340      	movs	r3, #64	@ 0x40
 800deb0:	616b      	str	r3, [r5, #20]
 800deb2:	2300      	movs	r3, #0
 800deb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800deb6:	2320      	movs	r3, #32
 800deb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800debc:	f8cd 800c 	str.w	r8, [sp, #12]
 800dec0:	2330      	movs	r3, #48	@ 0x30
 800dec2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e060 <_svfiprintf_r+0x1e4>
 800dec6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800deca:	f04f 0901 	mov.w	r9, #1
 800dece:	4623      	mov	r3, r4
 800ded0:	469a      	mov	sl, r3
 800ded2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ded6:	b10a      	cbz	r2, 800dedc <_svfiprintf_r+0x60>
 800ded8:	2a25      	cmp	r2, #37	@ 0x25
 800deda:	d1f9      	bne.n	800ded0 <_svfiprintf_r+0x54>
 800dedc:	ebba 0b04 	subs.w	fp, sl, r4
 800dee0:	d00b      	beq.n	800defa <_svfiprintf_r+0x7e>
 800dee2:	465b      	mov	r3, fp
 800dee4:	4622      	mov	r2, r4
 800dee6:	4629      	mov	r1, r5
 800dee8:	4638      	mov	r0, r7
 800deea:	f7ff ff6b 	bl	800ddc4 <__ssputs_r>
 800deee:	3001      	adds	r0, #1
 800def0:	f000 80a7 	beq.w	800e042 <_svfiprintf_r+0x1c6>
 800def4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800def6:	445a      	add	r2, fp
 800def8:	9209      	str	r2, [sp, #36]	@ 0x24
 800defa:	f89a 3000 	ldrb.w	r3, [sl]
 800defe:	2b00      	cmp	r3, #0
 800df00:	f000 809f 	beq.w	800e042 <_svfiprintf_r+0x1c6>
 800df04:	2300      	movs	r3, #0
 800df06:	f04f 32ff 	mov.w	r2, #4294967295
 800df0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df0e:	f10a 0a01 	add.w	sl, sl, #1
 800df12:	9304      	str	r3, [sp, #16]
 800df14:	9307      	str	r3, [sp, #28]
 800df16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df1a:	931a      	str	r3, [sp, #104]	@ 0x68
 800df1c:	4654      	mov	r4, sl
 800df1e:	2205      	movs	r2, #5
 800df20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df24:	484e      	ldr	r0, [pc, #312]	@ (800e060 <_svfiprintf_r+0x1e4>)
 800df26:	f7f2 f953 	bl	80001d0 <memchr>
 800df2a:	9a04      	ldr	r2, [sp, #16]
 800df2c:	b9d8      	cbnz	r0, 800df66 <_svfiprintf_r+0xea>
 800df2e:	06d0      	lsls	r0, r2, #27
 800df30:	bf44      	itt	mi
 800df32:	2320      	movmi	r3, #32
 800df34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df38:	0711      	lsls	r1, r2, #28
 800df3a:	bf44      	itt	mi
 800df3c:	232b      	movmi	r3, #43	@ 0x2b
 800df3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df42:	f89a 3000 	ldrb.w	r3, [sl]
 800df46:	2b2a      	cmp	r3, #42	@ 0x2a
 800df48:	d015      	beq.n	800df76 <_svfiprintf_r+0xfa>
 800df4a:	9a07      	ldr	r2, [sp, #28]
 800df4c:	4654      	mov	r4, sl
 800df4e:	2000      	movs	r0, #0
 800df50:	f04f 0c0a 	mov.w	ip, #10
 800df54:	4621      	mov	r1, r4
 800df56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df5a:	3b30      	subs	r3, #48	@ 0x30
 800df5c:	2b09      	cmp	r3, #9
 800df5e:	d94b      	bls.n	800dff8 <_svfiprintf_r+0x17c>
 800df60:	b1b0      	cbz	r0, 800df90 <_svfiprintf_r+0x114>
 800df62:	9207      	str	r2, [sp, #28]
 800df64:	e014      	b.n	800df90 <_svfiprintf_r+0x114>
 800df66:	eba0 0308 	sub.w	r3, r0, r8
 800df6a:	fa09 f303 	lsl.w	r3, r9, r3
 800df6e:	4313      	orrs	r3, r2
 800df70:	9304      	str	r3, [sp, #16]
 800df72:	46a2      	mov	sl, r4
 800df74:	e7d2      	b.n	800df1c <_svfiprintf_r+0xa0>
 800df76:	9b03      	ldr	r3, [sp, #12]
 800df78:	1d19      	adds	r1, r3, #4
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	9103      	str	r1, [sp, #12]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	bfbb      	ittet	lt
 800df82:	425b      	neglt	r3, r3
 800df84:	f042 0202 	orrlt.w	r2, r2, #2
 800df88:	9307      	strge	r3, [sp, #28]
 800df8a:	9307      	strlt	r3, [sp, #28]
 800df8c:	bfb8      	it	lt
 800df8e:	9204      	strlt	r2, [sp, #16]
 800df90:	7823      	ldrb	r3, [r4, #0]
 800df92:	2b2e      	cmp	r3, #46	@ 0x2e
 800df94:	d10a      	bne.n	800dfac <_svfiprintf_r+0x130>
 800df96:	7863      	ldrb	r3, [r4, #1]
 800df98:	2b2a      	cmp	r3, #42	@ 0x2a
 800df9a:	d132      	bne.n	800e002 <_svfiprintf_r+0x186>
 800df9c:	9b03      	ldr	r3, [sp, #12]
 800df9e:	1d1a      	adds	r2, r3, #4
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	9203      	str	r2, [sp, #12]
 800dfa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dfa8:	3402      	adds	r4, #2
 800dfaa:	9305      	str	r3, [sp, #20]
 800dfac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e070 <_svfiprintf_r+0x1f4>
 800dfb0:	7821      	ldrb	r1, [r4, #0]
 800dfb2:	2203      	movs	r2, #3
 800dfb4:	4650      	mov	r0, sl
 800dfb6:	f7f2 f90b 	bl	80001d0 <memchr>
 800dfba:	b138      	cbz	r0, 800dfcc <_svfiprintf_r+0x150>
 800dfbc:	9b04      	ldr	r3, [sp, #16]
 800dfbe:	eba0 000a 	sub.w	r0, r0, sl
 800dfc2:	2240      	movs	r2, #64	@ 0x40
 800dfc4:	4082      	lsls	r2, r0
 800dfc6:	4313      	orrs	r3, r2
 800dfc8:	3401      	adds	r4, #1
 800dfca:	9304      	str	r3, [sp, #16]
 800dfcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfd0:	4824      	ldr	r0, [pc, #144]	@ (800e064 <_svfiprintf_r+0x1e8>)
 800dfd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dfd6:	2206      	movs	r2, #6
 800dfd8:	f7f2 f8fa 	bl	80001d0 <memchr>
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	d036      	beq.n	800e04e <_svfiprintf_r+0x1d2>
 800dfe0:	4b21      	ldr	r3, [pc, #132]	@ (800e068 <_svfiprintf_r+0x1ec>)
 800dfe2:	bb1b      	cbnz	r3, 800e02c <_svfiprintf_r+0x1b0>
 800dfe4:	9b03      	ldr	r3, [sp, #12]
 800dfe6:	3307      	adds	r3, #7
 800dfe8:	f023 0307 	bic.w	r3, r3, #7
 800dfec:	3308      	adds	r3, #8
 800dfee:	9303      	str	r3, [sp, #12]
 800dff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dff2:	4433      	add	r3, r6
 800dff4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dff6:	e76a      	b.n	800dece <_svfiprintf_r+0x52>
 800dff8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dffc:	460c      	mov	r4, r1
 800dffe:	2001      	movs	r0, #1
 800e000:	e7a8      	b.n	800df54 <_svfiprintf_r+0xd8>
 800e002:	2300      	movs	r3, #0
 800e004:	3401      	adds	r4, #1
 800e006:	9305      	str	r3, [sp, #20]
 800e008:	4619      	mov	r1, r3
 800e00a:	f04f 0c0a 	mov.w	ip, #10
 800e00e:	4620      	mov	r0, r4
 800e010:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e014:	3a30      	subs	r2, #48	@ 0x30
 800e016:	2a09      	cmp	r2, #9
 800e018:	d903      	bls.n	800e022 <_svfiprintf_r+0x1a6>
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d0c6      	beq.n	800dfac <_svfiprintf_r+0x130>
 800e01e:	9105      	str	r1, [sp, #20]
 800e020:	e7c4      	b.n	800dfac <_svfiprintf_r+0x130>
 800e022:	fb0c 2101 	mla	r1, ip, r1, r2
 800e026:	4604      	mov	r4, r0
 800e028:	2301      	movs	r3, #1
 800e02a:	e7f0      	b.n	800e00e <_svfiprintf_r+0x192>
 800e02c:	ab03      	add	r3, sp, #12
 800e02e:	9300      	str	r3, [sp, #0]
 800e030:	462a      	mov	r2, r5
 800e032:	4b0e      	ldr	r3, [pc, #56]	@ (800e06c <_svfiprintf_r+0x1f0>)
 800e034:	a904      	add	r1, sp, #16
 800e036:	4638      	mov	r0, r7
 800e038:	f7fc fbb6 	bl	800a7a8 <_printf_float>
 800e03c:	1c42      	adds	r2, r0, #1
 800e03e:	4606      	mov	r6, r0
 800e040:	d1d6      	bne.n	800dff0 <_svfiprintf_r+0x174>
 800e042:	89ab      	ldrh	r3, [r5, #12]
 800e044:	065b      	lsls	r3, r3, #25
 800e046:	f53f af2d 	bmi.w	800dea4 <_svfiprintf_r+0x28>
 800e04a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e04c:	e72c      	b.n	800dea8 <_svfiprintf_r+0x2c>
 800e04e:	ab03      	add	r3, sp, #12
 800e050:	9300      	str	r3, [sp, #0]
 800e052:	462a      	mov	r2, r5
 800e054:	4b05      	ldr	r3, [pc, #20]	@ (800e06c <_svfiprintf_r+0x1f0>)
 800e056:	a904      	add	r1, sp, #16
 800e058:	4638      	mov	r0, r7
 800e05a:	f7fc fe3d 	bl	800acd8 <_printf_i>
 800e05e:	e7ed      	b.n	800e03c <_svfiprintf_r+0x1c0>
 800e060:	0800f2a9 	.word	0x0800f2a9
 800e064:	0800f2b3 	.word	0x0800f2b3
 800e068:	0800a7a9 	.word	0x0800a7a9
 800e06c:	0800ddc5 	.word	0x0800ddc5
 800e070:	0800f2af 	.word	0x0800f2af

0800e074 <__sfputc_r>:
 800e074:	6893      	ldr	r3, [r2, #8]
 800e076:	3b01      	subs	r3, #1
 800e078:	2b00      	cmp	r3, #0
 800e07a:	b410      	push	{r4}
 800e07c:	6093      	str	r3, [r2, #8]
 800e07e:	da08      	bge.n	800e092 <__sfputc_r+0x1e>
 800e080:	6994      	ldr	r4, [r2, #24]
 800e082:	42a3      	cmp	r3, r4
 800e084:	db01      	blt.n	800e08a <__sfputc_r+0x16>
 800e086:	290a      	cmp	r1, #10
 800e088:	d103      	bne.n	800e092 <__sfputc_r+0x1e>
 800e08a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e08e:	f7fd baec 	b.w	800b66a <__swbuf_r>
 800e092:	6813      	ldr	r3, [r2, #0]
 800e094:	1c58      	adds	r0, r3, #1
 800e096:	6010      	str	r0, [r2, #0]
 800e098:	7019      	strb	r1, [r3, #0]
 800e09a:	4608      	mov	r0, r1
 800e09c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0a0:	4770      	bx	lr

0800e0a2 <__sfputs_r>:
 800e0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0a4:	4606      	mov	r6, r0
 800e0a6:	460f      	mov	r7, r1
 800e0a8:	4614      	mov	r4, r2
 800e0aa:	18d5      	adds	r5, r2, r3
 800e0ac:	42ac      	cmp	r4, r5
 800e0ae:	d101      	bne.n	800e0b4 <__sfputs_r+0x12>
 800e0b0:	2000      	movs	r0, #0
 800e0b2:	e007      	b.n	800e0c4 <__sfputs_r+0x22>
 800e0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0b8:	463a      	mov	r2, r7
 800e0ba:	4630      	mov	r0, r6
 800e0bc:	f7ff ffda 	bl	800e074 <__sfputc_r>
 800e0c0:	1c43      	adds	r3, r0, #1
 800e0c2:	d1f3      	bne.n	800e0ac <__sfputs_r+0xa>
 800e0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e0c8 <_vfiprintf_r>:
 800e0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0cc:	460d      	mov	r5, r1
 800e0ce:	b09d      	sub	sp, #116	@ 0x74
 800e0d0:	4614      	mov	r4, r2
 800e0d2:	4698      	mov	r8, r3
 800e0d4:	4606      	mov	r6, r0
 800e0d6:	b118      	cbz	r0, 800e0e0 <_vfiprintf_r+0x18>
 800e0d8:	6a03      	ldr	r3, [r0, #32]
 800e0da:	b90b      	cbnz	r3, 800e0e0 <_vfiprintf_r+0x18>
 800e0dc:	f7fd f9bc 	bl	800b458 <__sinit>
 800e0e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0e2:	07d9      	lsls	r1, r3, #31
 800e0e4:	d405      	bmi.n	800e0f2 <_vfiprintf_r+0x2a>
 800e0e6:	89ab      	ldrh	r3, [r5, #12]
 800e0e8:	059a      	lsls	r2, r3, #22
 800e0ea:	d402      	bmi.n	800e0f2 <_vfiprintf_r+0x2a>
 800e0ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0ee:	f7fd fbce 	bl	800b88e <__retarget_lock_acquire_recursive>
 800e0f2:	89ab      	ldrh	r3, [r5, #12]
 800e0f4:	071b      	lsls	r3, r3, #28
 800e0f6:	d501      	bpl.n	800e0fc <_vfiprintf_r+0x34>
 800e0f8:	692b      	ldr	r3, [r5, #16]
 800e0fa:	b99b      	cbnz	r3, 800e124 <_vfiprintf_r+0x5c>
 800e0fc:	4629      	mov	r1, r5
 800e0fe:	4630      	mov	r0, r6
 800e100:	f7fd faf2 	bl	800b6e8 <__swsetup_r>
 800e104:	b170      	cbz	r0, 800e124 <_vfiprintf_r+0x5c>
 800e106:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e108:	07dc      	lsls	r4, r3, #31
 800e10a:	d504      	bpl.n	800e116 <_vfiprintf_r+0x4e>
 800e10c:	f04f 30ff 	mov.w	r0, #4294967295
 800e110:	b01d      	add	sp, #116	@ 0x74
 800e112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e116:	89ab      	ldrh	r3, [r5, #12]
 800e118:	0598      	lsls	r0, r3, #22
 800e11a:	d4f7      	bmi.n	800e10c <_vfiprintf_r+0x44>
 800e11c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e11e:	f7fd fbb7 	bl	800b890 <__retarget_lock_release_recursive>
 800e122:	e7f3      	b.n	800e10c <_vfiprintf_r+0x44>
 800e124:	2300      	movs	r3, #0
 800e126:	9309      	str	r3, [sp, #36]	@ 0x24
 800e128:	2320      	movs	r3, #32
 800e12a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e12e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e132:	2330      	movs	r3, #48	@ 0x30
 800e134:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e2e4 <_vfiprintf_r+0x21c>
 800e138:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e13c:	f04f 0901 	mov.w	r9, #1
 800e140:	4623      	mov	r3, r4
 800e142:	469a      	mov	sl, r3
 800e144:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e148:	b10a      	cbz	r2, 800e14e <_vfiprintf_r+0x86>
 800e14a:	2a25      	cmp	r2, #37	@ 0x25
 800e14c:	d1f9      	bne.n	800e142 <_vfiprintf_r+0x7a>
 800e14e:	ebba 0b04 	subs.w	fp, sl, r4
 800e152:	d00b      	beq.n	800e16c <_vfiprintf_r+0xa4>
 800e154:	465b      	mov	r3, fp
 800e156:	4622      	mov	r2, r4
 800e158:	4629      	mov	r1, r5
 800e15a:	4630      	mov	r0, r6
 800e15c:	f7ff ffa1 	bl	800e0a2 <__sfputs_r>
 800e160:	3001      	adds	r0, #1
 800e162:	f000 80a7 	beq.w	800e2b4 <_vfiprintf_r+0x1ec>
 800e166:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e168:	445a      	add	r2, fp
 800e16a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e16c:	f89a 3000 	ldrb.w	r3, [sl]
 800e170:	2b00      	cmp	r3, #0
 800e172:	f000 809f 	beq.w	800e2b4 <_vfiprintf_r+0x1ec>
 800e176:	2300      	movs	r3, #0
 800e178:	f04f 32ff 	mov.w	r2, #4294967295
 800e17c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e180:	f10a 0a01 	add.w	sl, sl, #1
 800e184:	9304      	str	r3, [sp, #16]
 800e186:	9307      	str	r3, [sp, #28]
 800e188:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e18c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e18e:	4654      	mov	r4, sl
 800e190:	2205      	movs	r2, #5
 800e192:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e196:	4853      	ldr	r0, [pc, #332]	@ (800e2e4 <_vfiprintf_r+0x21c>)
 800e198:	f7f2 f81a 	bl	80001d0 <memchr>
 800e19c:	9a04      	ldr	r2, [sp, #16]
 800e19e:	b9d8      	cbnz	r0, 800e1d8 <_vfiprintf_r+0x110>
 800e1a0:	06d1      	lsls	r1, r2, #27
 800e1a2:	bf44      	itt	mi
 800e1a4:	2320      	movmi	r3, #32
 800e1a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1aa:	0713      	lsls	r3, r2, #28
 800e1ac:	bf44      	itt	mi
 800e1ae:	232b      	movmi	r3, #43	@ 0x2b
 800e1b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e1b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1ba:	d015      	beq.n	800e1e8 <_vfiprintf_r+0x120>
 800e1bc:	9a07      	ldr	r2, [sp, #28]
 800e1be:	4654      	mov	r4, sl
 800e1c0:	2000      	movs	r0, #0
 800e1c2:	f04f 0c0a 	mov.w	ip, #10
 800e1c6:	4621      	mov	r1, r4
 800e1c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1cc:	3b30      	subs	r3, #48	@ 0x30
 800e1ce:	2b09      	cmp	r3, #9
 800e1d0:	d94b      	bls.n	800e26a <_vfiprintf_r+0x1a2>
 800e1d2:	b1b0      	cbz	r0, 800e202 <_vfiprintf_r+0x13a>
 800e1d4:	9207      	str	r2, [sp, #28]
 800e1d6:	e014      	b.n	800e202 <_vfiprintf_r+0x13a>
 800e1d8:	eba0 0308 	sub.w	r3, r0, r8
 800e1dc:	fa09 f303 	lsl.w	r3, r9, r3
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	9304      	str	r3, [sp, #16]
 800e1e4:	46a2      	mov	sl, r4
 800e1e6:	e7d2      	b.n	800e18e <_vfiprintf_r+0xc6>
 800e1e8:	9b03      	ldr	r3, [sp, #12]
 800e1ea:	1d19      	adds	r1, r3, #4
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	9103      	str	r1, [sp, #12]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	bfbb      	ittet	lt
 800e1f4:	425b      	neglt	r3, r3
 800e1f6:	f042 0202 	orrlt.w	r2, r2, #2
 800e1fa:	9307      	strge	r3, [sp, #28]
 800e1fc:	9307      	strlt	r3, [sp, #28]
 800e1fe:	bfb8      	it	lt
 800e200:	9204      	strlt	r2, [sp, #16]
 800e202:	7823      	ldrb	r3, [r4, #0]
 800e204:	2b2e      	cmp	r3, #46	@ 0x2e
 800e206:	d10a      	bne.n	800e21e <_vfiprintf_r+0x156>
 800e208:	7863      	ldrb	r3, [r4, #1]
 800e20a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e20c:	d132      	bne.n	800e274 <_vfiprintf_r+0x1ac>
 800e20e:	9b03      	ldr	r3, [sp, #12]
 800e210:	1d1a      	adds	r2, r3, #4
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	9203      	str	r2, [sp, #12]
 800e216:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e21a:	3402      	adds	r4, #2
 800e21c:	9305      	str	r3, [sp, #20]
 800e21e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e2f4 <_vfiprintf_r+0x22c>
 800e222:	7821      	ldrb	r1, [r4, #0]
 800e224:	2203      	movs	r2, #3
 800e226:	4650      	mov	r0, sl
 800e228:	f7f1 ffd2 	bl	80001d0 <memchr>
 800e22c:	b138      	cbz	r0, 800e23e <_vfiprintf_r+0x176>
 800e22e:	9b04      	ldr	r3, [sp, #16]
 800e230:	eba0 000a 	sub.w	r0, r0, sl
 800e234:	2240      	movs	r2, #64	@ 0x40
 800e236:	4082      	lsls	r2, r0
 800e238:	4313      	orrs	r3, r2
 800e23a:	3401      	adds	r4, #1
 800e23c:	9304      	str	r3, [sp, #16]
 800e23e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e242:	4829      	ldr	r0, [pc, #164]	@ (800e2e8 <_vfiprintf_r+0x220>)
 800e244:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e248:	2206      	movs	r2, #6
 800e24a:	f7f1 ffc1 	bl	80001d0 <memchr>
 800e24e:	2800      	cmp	r0, #0
 800e250:	d03f      	beq.n	800e2d2 <_vfiprintf_r+0x20a>
 800e252:	4b26      	ldr	r3, [pc, #152]	@ (800e2ec <_vfiprintf_r+0x224>)
 800e254:	bb1b      	cbnz	r3, 800e29e <_vfiprintf_r+0x1d6>
 800e256:	9b03      	ldr	r3, [sp, #12]
 800e258:	3307      	adds	r3, #7
 800e25a:	f023 0307 	bic.w	r3, r3, #7
 800e25e:	3308      	adds	r3, #8
 800e260:	9303      	str	r3, [sp, #12]
 800e262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e264:	443b      	add	r3, r7
 800e266:	9309      	str	r3, [sp, #36]	@ 0x24
 800e268:	e76a      	b.n	800e140 <_vfiprintf_r+0x78>
 800e26a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e26e:	460c      	mov	r4, r1
 800e270:	2001      	movs	r0, #1
 800e272:	e7a8      	b.n	800e1c6 <_vfiprintf_r+0xfe>
 800e274:	2300      	movs	r3, #0
 800e276:	3401      	adds	r4, #1
 800e278:	9305      	str	r3, [sp, #20]
 800e27a:	4619      	mov	r1, r3
 800e27c:	f04f 0c0a 	mov.w	ip, #10
 800e280:	4620      	mov	r0, r4
 800e282:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e286:	3a30      	subs	r2, #48	@ 0x30
 800e288:	2a09      	cmp	r2, #9
 800e28a:	d903      	bls.n	800e294 <_vfiprintf_r+0x1cc>
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d0c6      	beq.n	800e21e <_vfiprintf_r+0x156>
 800e290:	9105      	str	r1, [sp, #20]
 800e292:	e7c4      	b.n	800e21e <_vfiprintf_r+0x156>
 800e294:	fb0c 2101 	mla	r1, ip, r1, r2
 800e298:	4604      	mov	r4, r0
 800e29a:	2301      	movs	r3, #1
 800e29c:	e7f0      	b.n	800e280 <_vfiprintf_r+0x1b8>
 800e29e:	ab03      	add	r3, sp, #12
 800e2a0:	9300      	str	r3, [sp, #0]
 800e2a2:	462a      	mov	r2, r5
 800e2a4:	4b12      	ldr	r3, [pc, #72]	@ (800e2f0 <_vfiprintf_r+0x228>)
 800e2a6:	a904      	add	r1, sp, #16
 800e2a8:	4630      	mov	r0, r6
 800e2aa:	f7fc fa7d 	bl	800a7a8 <_printf_float>
 800e2ae:	4607      	mov	r7, r0
 800e2b0:	1c78      	adds	r0, r7, #1
 800e2b2:	d1d6      	bne.n	800e262 <_vfiprintf_r+0x19a>
 800e2b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2b6:	07d9      	lsls	r1, r3, #31
 800e2b8:	d405      	bmi.n	800e2c6 <_vfiprintf_r+0x1fe>
 800e2ba:	89ab      	ldrh	r3, [r5, #12]
 800e2bc:	059a      	lsls	r2, r3, #22
 800e2be:	d402      	bmi.n	800e2c6 <_vfiprintf_r+0x1fe>
 800e2c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2c2:	f7fd fae5 	bl	800b890 <__retarget_lock_release_recursive>
 800e2c6:	89ab      	ldrh	r3, [r5, #12]
 800e2c8:	065b      	lsls	r3, r3, #25
 800e2ca:	f53f af1f 	bmi.w	800e10c <_vfiprintf_r+0x44>
 800e2ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e2d0:	e71e      	b.n	800e110 <_vfiprintf_r+0x48>
 800e2d2:	ab03      	add	r3, sp, #12
 800e2d4:	9300      	str	r3, [sp, #0]
 800e2d6:	462a      	mov	r2, r5
 800e2d8:	4b05      	ldr	r3, [pc, #20]	@ (800e2f0 <_vfiprintf_r+0x228>)
 800e2da:	a904      	add	r1, sp, #16
 800e2dc:	4630      	mov	r0, r6
 800e2de:	f7fc fcfb 	bl	800acd8 <_printf_i>
 800e2e2:	e7e4      	b.n	800e2ae <_vfiprintf_r+0x1e6>
 800e2e4:	0800f2a9 	.word	0x0800f2a9
 800e2e8:	0800f2b3 	.word	0x0800f2b3
 800e2ec:	0800a7a9 	.word	0x0800a7a9
 800e2f0:	0800e0a3 	.word	0x0800e0a3
 800e2f4:	0800f2af 	.word	0x0800f2af

0800e2f8 <__sflush_r>:
 800e2f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e300:	0716      	lsls	r6, r2, #28
 800e302:	4605      	mov	r5, r0
 800e304:	460c      	mov	r4, r1
 800e306:	d454      	bmi.n	800e3b2 <__sflush_r+0xba>
 800e308:	684b      	ldr	r3, [r1, #4]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	dc02      	bgt.n	800e314 <__sflush_r+0x1c>
 800e30e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e310:	2b00      	cmp	r3, #0
 800e312:	dd48      	ble.n	800e3a6 <__sflush_r+0xae>
 800e314:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e316:	2e00      	cmp	r6, #0
 800e318:	d045      	beq.n	800e3a6 <__sflush_r+0xae>
 800e31a:	2300      	movs	r3, #0
 800e31c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e320:	682f      	ldr	r7, [r5, #0]
 800e322:	6a21      	ldr	r1, [r4, #32]
 800e324:	602b      	str	r3, [r5, #0]
 800e326:	d030      	beq.n	800e38a <__sflush_r+0x92>
 800e328:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e32a:	89a3      	ldrh	r3, [r4, #12]
 800e32c:	0759      	lsls	r1, r3, #29
 800e32e:	d505      	bpl.n	800e33c <__sflush_r+0x44>
 800e330:	6863      	ldr	r3, [r4, #4]
 800e332:	1ad2      	subs	r2, r2, r3
 800e334:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e336:	b10b      	cbz	r3, 800e33c <__sflush_r+0x44>
 800e338:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e33a:	1ad2      	subs	r2, r2, r3
 800e33c:	2300      	movs	r3, #0
 800e33e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e340:	6a21      	ldr	r1, [r4, #32]
 800e342:	4628      	mov	r0, r5
 800e344:	47b0      	blx	r6
 800e346:	1c43      	adds	r3, r0, #1
 800e348:	89a3      	ldrh	r3, [r4, #12]
 800e34a:	d106      	bne.n	800e35a <__sflush_r+0x62>
 800e34c:	6829      	ldr	r1, [r5, #0]
 800e34e:	291d      	cmp	r1, #29
 800e350:	d82b      	bhi.n	800e3aa <__sflush_r+0xb2>
 800e352:	4a2a      	ldr	r2, [pc, #168]	@ (800e3fc <__sflush_r+0x104>)
 800e354:	410a      	asrs	r2, r1
 800e356:	07d6      	lsls	r6, r2, #31
 800e358:	d427      	bmi.n	800e3aa <__sflush_r+0xb2>
 800e35a:	2200      	movs	r2, #0
 800e35c:	6062      	str	r2, [r4, #4]
 800e35e:	04d9      	lsls	r1, r3, #19
 800e360:	6922      	ldr	r2, [r4, #16]
 800e362:	6022      	str	r2, [r4, #0]
 800e364:	d504      	bpl.n	800e370 <__sflush_r+0x78>
 800e366:	1c42      	adds	r2, r0, #1
 800e368:	d101      	bne.n	800e36e <__sflush_r+0x76>
 800e36a:	682b      	ldr	r3, [r5, #0]
 800e36c:	b903      	cbnz	r3, 800e370 <__sflush_r+0x78>
 800e36e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e370:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e372:	602f      	str	r7, [r5, #0]
 800e374:	b1b9      	cbz	r1, 800e3a6 <__sflush_r+0xae>
 800e376:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e37a:	4299      	cmp	r1, r3
 800e37c:	d002      	beq.n	800e384 <__sflush_r+0x8c>
 800e37e:	4628      	mov	r0, r5
 800e380:	f7fe f8ea 	bl	800c558 <_free_r>
 800e384:	2300      	movs	r3, #0
 800e386:	6363      	str	r3, [r4, #52]	@ 0x34
 800e388:	e00d      	b.n	800e3a6 <__sflush_r+0xae>
 800e38a:	2301      	movs	r3, #1
 800e38c:	4628      	mov	r0, r5
 800e38e:	47b0      	blx	r6
 800e390:	4602      	mov	r2, r0
 800e392:	1c50      	adds	r0, r2, #1
 800e394:	d1c9      	bne.n	800e32a <__sflush_r+0x32>
 800e396:	682b      	ldr	r3, [r5, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d0c6      	beq.n	800e32a <__sflush_r+0x32>
 800e39c:	2b1d      	cmp	r3, #29
 800e39e:	d001      	beq.n	800e3a4 <__sflush_r+0xac>
 800e3a0:	2b16      	cmp	r3, #22
 800e3a2:	d11e      	bne.n	800e3e2 <__sflush_r+0xea>
 800e3a4:	602f      	str	r7, [r5, #0]
 800e3a6:	2000      	movs	r0, #0
 800e3a8:	e022      	b.n	800e3f0 <__sflush_r+0xf8>
 800e3aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3ae:	b21b      	sxth	r3, r3
 800e3b0:	e01b      	b.n	800e3ea <__sflush_r+0xf2>
 800e3b2:	690f      	ldr	r7, [r1, #16]
 800e3b4:	2f00      	cmp	r7, #0
 800e3b6:	d0f6      	beq.n	800e3a6 <__sflush_r+0xae>
 800e3b8:	0793      	lsls	r3, r2, #30
 800e3ba:	680e      	ldr	r6, [r1, #0]
 800e3bc:	bf08      	it	eq
 800e3be:	694b      	ldreq	r3, [r1, #20]
 800e3c0:	600f      	str	r7, [r1, #0]
 800e3c2:	bf18      	it	ne
 800e3c4:	2300      	movne	r3, #0
 800e3c6:	eba6 0807 	sub.w	r8, r6, r7
 800e3ca:	608b      	str	r3, [r1, #8]
 800e3cc:	f1b8 0f00 	cmp.w	r8, #0
 800e3d0:	dde9      	ble.n	800e3a6 <__sflush_r+0xae>
 800e3d2:	6a21      	ldr	r1, [r4, #32]
 800e3d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e3d6:	4643      	mov	r3, r8
 800e3d8:	463a      	mov	r2, r7
 800e3da:	4628      	mov	r0, r5
 800e3dc:	47b0      	blx	r6
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	dc08      	bgt.n	800e3f4 <__sflush_r+0xfc>
 800e3e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3ea:	81a3      	strh	r3, [r4, #12]
 800e3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3f4:	4407      	add	r7, r0
 800e3f6:	eba8 0800 	sub.w	r8, r8, r0
 800e3fa:	e7e7      	b.n	800e3cc <__sflush_r+0xd4>
 800e3fc:	dfbffffe 	.word	0xdfbffffe

0800e400 <_fflush_r>:
 800e400:	b538      	push	{r3, r4, r5, lr}
 800e402:	690b      	ldr	r3, [r1, #16]
 800e404:	4605      	mov	r5, r0
 800e406:	460c      	mov	r4, r1
 800e408:	b913      	cbnz	r3, 800e410 <_fflush_r+0x10>
 800e40a:	2500      	movs	r5, #0
 800e40c:	4628      	mov	r0, r5
 800e40e:	bd38      	pop	{r3, r4, r5, pc}
 800e410:	b118      	cbz	r0, 800e41a <_fflush_r+0x1a>
 800e412:	6a03      	ldr	r3, [r0, #32]
 800e414:	b90b      	cbnz	r3, 800e41a <_fflush_r+0x1a>
 800e416:	f7fd f81f 	bl	800b458 <__sinit>
 800e41a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d0f3      	beq.n	800e40a <_fflush_r+0xa>
 800e422:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e424:	07d0      	lsls	r0, r2, #31
 800e426:	d404      	bmi.n	800e432 <_fflush_r+0x32>
 800e428:	0599      	lsls	r1, r3, #22
 800e42a:	d402      	bmi.n	800e432 <_fflush_r+0x32>
 800e42c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e42e:	f7fd fa2e 	bl	800b88e <__retarget_lock_acquire_recursive>
 800e432:	4628      	mov	r0, r5
 800e434:	4621      	mov	r1, r4
 800e436:	f7ff ff5f 	bl	800e2f8 <__sflush_r>
 800e43a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e43c:	07da      	lsls	r2, r3, #31
 800e43e:	4605      	mov	r5, r0
 800e440:	d4e4      	bmi.n	800e40c <_fflush_r+0xc>
 800e442:	89a3      	ldrh	r3, [r4, #12]
 800e444:	059b      	lsls	r3, r3, #22
 800e446:	d4e1      	bmi.n	800e40c <_fflush_r+0xc>
 800e448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e44a:	f7fd fa21 	bl	800b890 <__retarget_lock_release_recursive>
 800e44e:	e7dd      	b.n	800e40c <_fflush_r+0xc>

0800e450 <__swhatbuf_r>:
 800e450:	b570      	push	{r4, r5, r6, lr}
 800e452:	460c      	mov	r4, r1
 800e454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e458:	2900      	cmp	r1, #0
 800e45a:	b096      	sub	sp, #88	@ 0x58
 800e45c:	4615      	mov	r5, r2
 800e45e:	461e      	mov	r6, r3
 800e460:	da0d      	bge.n	800e47e <__swhatbuf_r+0x2e>
 800e462:	89a3      	ldrh	r3, [r4, #12]
 800e464:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e468:	f04f 0100 	mov.w	r1, #0
 800e46c:	bf14      	ite	ne
 800e46e:	2340      	movne	r3, #64	@ 0x40
 800e470:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e474:	2000      	movs	r0, #0
 800e476:	6031      	str	r1, [r6, #0]
 800e478:	602b      	str	r3, [r5, #0]
 800e47a:	b016      	add	sp, #88	@ 0x58
 800e47c:	bd70      	pop	{r4, r5, r6, pc}
 800e47e:	466a      	mov	r2, sp
 800e480:	f000 f874 	bl	800e56c <_fstat_r>
 800e484:	2800      	cmp	r0, #0
 800e486:	dbec      	blt.n	800e462 <__swhatbuf_r+0x12>
 800e488:	9901      	ldr	r1, [sp, #4]
 800e48a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e48e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e492:	4259      	negs	r1, r3
 800e494:	4159      	adcs	r1, r3
 800e496:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e49a:	e7eb      	b.n	800e474 <__swhatbuf_r+0x24>

0800e49c <__smakebuf_r>:
 800e49c:	898b      	ldrh	r3, [r1, #12]
 800e49e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4a0:	079d      	lsls	r5, r3, #30
 800e4a2:	4606      	mov	r6, r0
 800e4a4:	460c      	mov	r4, r1
 800e4a6:	d507      	bpl.n	800e4b8 <__smakebuf_r+0x1c>
 800e4a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e4ac:	6023      	str	r3, [r4, #0]
 800e4ae:	6123      	str	r3, [r4, #16]
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	6163      	str	r3, [r4, #20]
 800e4b4:	b003      	add	sp, #12
 800e4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4b8:	ab01      	add	r3, sp, #4
 800e4ba:	466a      	mov	r2, sp
 800e4bc:	f7ff ffc8 	bl	800e450 <__swhatbuf_r>
 800e4c0:	9f00      	ldr	r7, [sp, #0]
 800e4c2:	4605      	mov	r5, r0
 800e4c4:	4639      	mov	r1, r7
 800e4c6:	4630      	mov	r0, r6
 800e4c8:	f7fe f8ba 	bl	800c640 <_malloc_r>
 800e4cc:	b948      	cbnz	r0, 800e4e2 <__smakebuf_r+0x46>
 800e4ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4d2:	059a      	lsls	r2, r3, #22
 800e4d4:	d4ee      	bmi.n	800e4b4 <__smakebuf_r+0x18>
 800e4d6:	f023 0303 	bic.w	r3, r3, #3
 800e4da:	f043 0302 	orr.w	r3, r3, #2
 800e4de:	81a3      	strh	r3, [r4, #12]
 800e4e0:	e7e2      	b.n	800e4a8 <__smakebuf_r+0xc>
 800e4e2:	89a3      	ldrh	r3, [r4, #12]
 800e4e4:	6020      	str	r0, [r4, #0]
 800e4e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4ea:	81a3      	strh	r3, [r4, #12]
 800e4ec:	9b01      	ldr	r3, [sp, #4]
 800e4ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e4f2:	b15b      	cbz	r3, 800e50c <__smakebuf_r+0x70>
 800e4f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4f8:	4630      	mov	r0, r6
 800e4fa:	f000 f849 	bl	800e590 <_isatty_r>
 800e4fe:	b128      	cbz	r0, 800e50c <__smakebuf_r+0x70>
 800e500:	89a3      	ldrh	r3, [r4, #12]
 800e502:	f023 0303 	bic.w	r3, r3, #3
 800e506:	f043 0301 	orr.w	r3, r3, #1
 800e50a:	81a3      	strh	r3, [r4, #12]
 800e50c:	89a3      	ldrh	r3, [r4, #12]
 800e50e:	431d      	orrs	r5, r3
 800e510:	81a5      	strh	r5, [r4, #12]
 800e512:	e7cf      	b.n	800e4b4 <__smakebuf_r+0x18>

0800e514 <memmove>:
 800e514:	4288      	cmp	r0, r1
 800e516:	b510      	push	{r4, lr}
 800e518:	eb01 0402 	add.w	r4, r1, r2
 800e51c:	d902      	bls.n	800e524 <memmove+0x10>
 800e51e:	4284      	cmp	r4, r0
 800e520:	4623      	mov	r3, r4
 800e522:	d807      	bhi.n	800e534 <memmove+0x20>
 800e524:	1e43      	subs	r3, r0, #1
 800e526:	42a1      	cmp	r1, r4
 800e528:	d008      	beq.n	800e53c <memmove+0x28>
 800e52a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e52e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e532:	e7f8      	b.n	800e526 <memmove+0x12>
 800e534:	4402      	add	r2, r0
 800e536:	4601      	mov	r1, r0
 800e538:	428a      	cmp	r2, r1
 800e53a:	d100      	bne.n	800e53e <memmove+0x2a>
 800e53c:	bd10      	pop	{r4, pc}
 800e53e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e546:	e7f7      	b.n	800e538 <memmove+0x24>

0800e548 <strncmp>:
 800e548:	b510      	push	{r4, lr}
 800e54a:	b16a      	cbz	r2, 800e568 <strncmp+0x20>
 800e54c:	3901      	subs	r1, #1
 800e54e:	1884      	adds	r4, r0, r2
 800e550:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e554:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e558:	429a      	cmp	r2, r3
 800e55a:	d103      	bne.n	800e564 <strncmp+0x1c>
 800e55c:	42a0      	cmp	r0, r4
 800e55e:	d001      	beq.n	800e564 <strncmp+0x1c>
 800e560:	2a00      	cmp	r2, #0
 800e562:	d1f5      	bne.n	800e550 <strncmp+0x8>
 800e564:	1ad0      	subs	r0, r2, r3
 800e566:	bd10      	pop	{r4, pc}
 800e568:	4610      	mov	r0, r2
 800e56a:	e7fc      	b.n	800e566 <strncmp+0x1e>

0800e56c <_fstat_r>:
 800e56c:	b538      	push	{r3, r4, r5, lr}
 800e56e:	4d07      	ldr	r5, [pc, #28]	@ (800e58c <_fstat_r+0x20>)
 800e570:	2300      	movs	r3, #0
 800e572:	4604      	mov	r4, r0
 800e574:	4608      	mov	r0, r1
 800e576:	4611      	mov	r1, r2
 800e578:	602b      	str	r3, [r5, #0]
 800e57a:	f7f4 fa8b 	bl	8002a94 <_fstat>
 800e57e:	1c43      	adds	r3, r0, #1
 800e580:	d102      	bne.n	800e588 <_fstat_r+0x1c>
 800e582:	682b      	ldr	r3, [r5, #0]
 800e584:	b103      	cbz	r3, 800e588 <_fstat_r+0x1c>
 800e586:	6023      	str	r3, [r4, #0]
 800e588:	bd38      	pop	{r3, r4, r5, pc}
 800e58a:	bf00      	nop
 800e58c:	20000c90 	.word	0x20000c90

0800e590 <_isatty_r>:
 800e590:	b538      	push	{r3, r4, r5, lr}
 800e592:	4d06      	ldr	r5, [pc, #24]	@ (800e5ac <_isatty_r+0x1c>)
 800e594:	2300      	movs	r3, #0
 800e596:	4604      	mov	r4, r0
 800e598:	4608      	mov	r0, r1
 800e59a:	602b      	str	r3, [r5, #0]
 800e59c:	f7f4 fa8a 	bl	8002ab4 <_isatty>
 800e5a0:	1c43      	adds	r3, r0, #1
 800e5a2:	d102      	bne.n	800e5aa <_isatty_r+0x1a>
 800e5a4:	682b      	ldr	r3, [r5, #0]
 800e5a6:	b103      	cbz	r3, 800e5aa <_isatty_r+0x1a>
 800e5a8:	6023      	str	r3, [r4, #0]
 800e5aa:	bd38      	pop	{r3, r4, r5, pc}
 800e5ac:	20000c90 	.word	0x20000c90

0800e5b0 <_sbrk_r>:
 800e5b0:	b538      	push	{r3, r4, r5, lr}
 800e5b2:	4d06      	ldr	r5, [pc, #24]	@ (800e5cc <_sbrk_r+0x1c>)
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	4604      	mov	r4, r0
 800e5b8:	4608      	mov	r0, r1
 800e5ba:	602b      	str	r3, [r5, #0]
 800e5bc:	f7f4 fa92 	bl	8002ae4 <_sbrk>
 800e5c0:	1c43      	adds	r3, r0, #1
 800e5c2:	d102      	bne.n	800e5ca <_sbrk_r+0x1a>
 800e5c4:	682b      	ldr	r3, [r5, #0]
 800e5c6:	b103      	cbz	r3, 800e5ca <_sbrk_r+0x1a>
 800e5c8:	6023      	str	r3, [r4, #0]
 800e5ca:	bd38      	pop	{r3, r4, r5, pc}
 800e5cc:	20000c90 	.word	0x20000c90

0800e5d0 <nan>:
 800e5d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e5d8 <nan+0x8>
 800e5d4:	4770      	bx	lr
 800e5d6:	bf00      	nop
 800e5d8:	00000000 	.word	0x00000000
 800e5dc:	7ff80000 	.word	0x7ff80000

0800e5e0 <__assert_func>:
 800e5e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5e2:	4614      	mov	r4, r2
 800e5e4:	461a      	mov	r2, r3
 800e5e6:	4b09      	ldr	r3, [pc, #36]	@ (800e60c <__assert_func+0x2c>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	4605      	mov	r5, r0
 800e5ec:	68d8      	ldr	r0, [r3, #12]
 800e5ee:	b954      	cbnz	r4, 800e606 <__assert_func+0x26>
 800e5f0:	4b07      	ldr	r3, [pc, #28]	@ (800e610 <__assert_func+0x30>)
 800e5f2:	461c      	mov	r4, r3
 800e5f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e5f8:	9100      	str	r1, [sp, #0]
 800e5fa:	462b      	mov	r3, r5
 800e5fc:	4905      	ldr	r1, [pc, #20]	@ (800e614 <__assert_func+0x34>)
 800e5fe:	f000 fba7 	bl	800ed50 <fiprintf>
 800e602:	f000 fbb7 	bl	800ed74 <abort>
 800e606:	4b04      	ldr	r3, [pc, #16]	@ (800e618 <__assert_func+0x38>)
 800e608:	e7f4      	b.n	800e5f4 <__assert_func+0x14>
 800e60a:	bf00      	nop
 800e60c:	20000050 	.word	0x20000050
 800e610:	0800f2fd 	.word	0x0800f2fd
 800e614:	0800f2cf 	.word	0x0800f2cf
 800e618:	0800f2c2 	.word	0x0800f2c2

0800e61c <_calloc_r>:
 800e61c:	b570      	push	{r4, r5, r6, lr}
 800e61e:	fba1 5402 	umull	r5, r4, r1, r2
 800e622:	b93c      	cbnz	r4, 800e634 <_calloc_r+0x18>
 800e624:	4629      	mov	r1, r5
 800e626:	f7fe f80b 	bl	800c640 <_malloc_r>
 800e62a:	4606      	mov	r6, r0
 800e62c:	b928      	cbnz	r0, 800e63a <_calloc_r+0x1e>
 800e62e:	2600      	movs	r6, #0
 800e630:	4630      	mov	r0, r6
 800e632:	bd70      	pop	{r4, r5, r6, pc}
 800e634:	220c      	movs	r2, #12
 800e636:	6002      	str	r2, [r0, #0]
 800e638:	e7f9      	b.n	800e62e <_calloc_r+0x12>
 800e63a:	462a      	mov	r2, r5
 800e63c:	4621      	mov	r1, r4
 800e63e:	f7fd f8a9 	bl	800b794 <memset>
 800e642:	e7f5      	b.n	800e630 <_calloc_r+0x14>

0800e644 <rshift>:
 800e644:	6903      	ldr	r3, [r0, #16]
 800e646:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e64a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e64e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e652:	f100 0414 	add.w	r4, r0, #20
 800e656:	dd45      	ble.n	800e6e4 <rshift+0xa0>
 800e658:	f011 011f 	ands.w	r1, r1, #31
 800e65c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e660:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e664:	d10c      	bne.n	800e680 <rshift+0x3c>
 800e666:	f100 0710 	add.w	r7, r0, #16
 800e66a:	4629      	mov	r1, r5
 800e66c:	42b1      	cmp	r1, r6
 800e66e:	d334      	bcc.n	800e6da <rshift+0x96>
 800e670:	1a9b      	subs	r3, r3, r2
 800e672:	009b      	lsls	r3, r3, #2
 800e674:	1eea      	subs	r2, r5, #3
 800e676:	4296      	cmp	r6, r2
 800e678:	bf38      	it	cc
 800e67a:	2300      	movcc	r3, #0
 800e67c:	4423      	add	r3, r4
 800e67e:	e015      	b.n	800e6ac <rshift+0x68>
 800e680:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e684:	f1c1 0820 	rsb	r8, r1, #32
 800e688:	40cf      	lsrs	r7, r1
 800e68a:	f105 0e04 	add.w	lr, r5, #4
 800e68e:	46a1      	mov	r9, r4
 800e690:	4576      	cmp	r6, lr
 800e692:	46f4      	mov	ip, lr
 800e694:	d815      	bhi.n	800e6c2 <rshift+0x7e>
 800e696:	1a9a      	subs	r2, r3, r2
 800e698:	0092      	lsls	r2, r2, #2
 800e69a:	3a04      	subs	r2, #4
 800e69c:	3501      	adds	r5, #1
 800e69e:	42ae      	cmp	r6, r5
 800e6a0:	bf38      	it	cc
 800e6a2:	2200      	movcc	r2, #0
 800e6a4:	18a3      	adds	r3, r4, r2
 800e6a6:	50a7      	str	r7, [r4, r2]
 800e6a8:	b107      	cbz	r7, 800e6ac <rshift+0x68>
 800e6aa:	3304      	adds	r3, #4
 800e6ac:	1b1a      	subs	r2, r3, r4
 800e6ae:	42a3      	cmp	r3, r4
 800e6b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e6b4:	bf08      	it	eq
 800e6b6:	2300      	moveq	r3, #0
 800e6b8:	6102      	str	r2, [r0, #16]
 800e6ba:	bf08      	it	eq
 800e6bc:	6143      	streq	r3, [r0, #20]
 800e6be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6c2:	f8dc c000 	ldr.w	ip, [ip]
 800e6c6:	fa0c fc08 	lsl.w	ip, ip, r8
 800e6ca:	ea4c 0707 	orr.w	r7, ip, r7
 800e6ce:	f849 7b04 	str.w	r7, [r9], #4
 800e6d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e6d6:	40cf      	lsrs	r7, r1
 800e6d8:	e7da      	b.n	800e690 <rshift+0x4c>
 800e6da:	f851 cb04 	ldr.w	ip, [r1], #4
 800e6de:	f847 cf04 	str.w	ip, [r7, #4]!
 800e6e2:	e7c3      	b.n	800e66c <rshift+0x28>
 800e6e4:	4623      	mov	r3, r4
 800e6e6:	e7e1      	b.n	800e6ac <rshift+0x68>

0800e6e8 <__hexdig_fun>:
 800e6e8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e6ec:	2b09      	cmp	r3, #9
 800e6ee:	d802      	bhi.n	800e6f6 <__hexdig_fun+0xe>
 800e6f0:	3820      	subs	r0, #32
 800e6f2:	b2c0      	uxtb	r0, r0
 800e6f4:	4770      	bx	lr
 800e6f6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e6fa:	2b05      	cmp	r3, #5
 800e6fc:	d801      	bhi.n	800e702 <__hexdig_fun+0x1a>
 800e6fe:	3847      	subs	r0, #71	@ 0x47
 800e700:	e7f7      	b.n	800e6f2 <__hexdig_fun+0xa>
 800e702:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e706:	2b05      	cmp	r3, #5
 800e708:	d801      	bhi.n	800e70e <__hexdig_fun+0x26>
 800e70a:	3827      	subs	r0, #39	@ 0x27
 800e70c:	e7f1      	b.n	800e6f2 <__hexdig_fun+0xa>
 800e70e:	2000      	movs	r0, #0
 800e710:	4770      	bx	lr
	...

0800e714 <__gethex>:
 800e714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e718:	b085      	sub	sp, #20
 800e71a:	468a      	mov	sl, r1
 800e71c:	9302      	str	r3, [sp, #8]
 800e71e:	680b      	ldr	r3, [r1, #0]
 800e720:	9001      	str	r0, [sp, #4]
 800e722:	4690      	mov	r8, r2
 800e724:	1c9c      	adds	r4, r3, #2
 800e726:	46a1      	mov	r9, r4
 800e728:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e72c:	2830      	cmp	r0, #48	@ 0x30
 800e72e:	d0fa      	beq.n	800e726 <__gethex+0x12>
 800e730:	eba9 0303 	sub.w	r3, r9, r3
 800e734:	f1a3 0b02 	sub.w	fp, r3, #2
 800e738:	f7ff ffd6 	bl	800e6e8 <__hexdig_fun>
 800e73c:	4605      	mov	r5, r0
 800e73e:	2800      	cmp	r0, #0
 800e740:	d168      	bne.n	800e814 <__gethex+0x100>
 800e742:	49a0      	ldr	r1, [pc, #640]	@ (800e9c4 <__gethex+0x2b0>)
 800e744:	2201      	movs	r2, #1
 800e746:	4648      	mov	r0, r9
 800e748:	f7ff fefe 	bl	800e548 <strncmp>
 800e74c:	4607      	mov	r7, r0
 800e74e:	2800      	cmp	r0, #0
 800e750:	d167      	bne.n	800e822 <__gethex+0x10e>
 800e752:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e756:	4626      	mov	r6, r4
 800e758:	f7ff ffc6 	bl	800e6e8 <__hexdig_fun>
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d062      	beq.n	800e826 <__gethex+0x112>
 800e760:	4623      	mov	r3, r4
 800e762:	7818      	ldrb	r0, [r3, #0]
 800e764:	2830      	cmp	r0, #48	@ 0x30
 800e766:	4699      	mov	r9, r3
 800e768:	f103 0301 	add.w	r3, r3, #1
 800e76c:	d0f9      	beq.n	800e762 <__gethex+0x4e>
 800e76e:	f7ff ffbb 	bl	800e6e8 <__hexdig_fun>
 800e772:	fab0 f580 	clz	r5, r0
 800e776:	096d      	lsrs	r5, r5, #5
 800e778:	f04f 0b01 	mov.w	fp, #1
 800e77c:	464a      	mov	r2, r9
 800e77e:	4616      	mov	r6, r2
 800e780:	3201      	adds	r2, #1
 800e782:	7830      	ldrb	r0, [r6, #0]
 800e784:	f7ff ffb0 	bl	800e6e8 <__hexdig_fun>
 800e788:	2800      	cmp	r0, #0
 800e78a:	d1f8      	bne.n	800e77e <__gethex+0x6a>
 800e78c:	498d      	ldr	r1, [pc, #564]	@ (800e9c4 <__gethex+0x2b0>)
 800e78e:	2201      	movs	r2, #1
 800e790:	4630      	mov	r0, r6
 800e792:	f7ff fed9 	bl	800e548 <strncmp>
 800e796:	2800      	cmp	r0, #0
 800e798:	d13f      	bne.n	800e81a <__gethex+0x106>
 800e79a:	b944      	cbnz	r4, 800e7ae <__gethex+0x9a>
 800e79c:	1c74      	adds	r4, r6, #1
 800e79e:	4622      	mov	r2, r4
 800e7a0:	4616      	mov	r6, r2
 800e7a2:	3201      	adds	r2, #1
 800e7a4:	7830      	ldrb	r0, [r6, #0]
 800e7a6:	f7ff ff9f 	bl	800e6e8 <__hexdig_fun>
 800e7aa:	2800      	cmp	r0, #0
 800e7ac:	d1f8      	bne.n	800e7a0 <__gethex+0x8c>
 800e7ae:	1ba4      	subs	r4, r4, r6
 800e7b0:	00a7      	lsls	r7, r4, #2
 800e7b2:	7833      	ldrb	r3, [r6, #0]
 800e7b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e7b8:	2b50      	cmp	r3, #80	@ 0x50
 800e7ba:	d13e      	bne.n	800e83a <__gethex+0x126>
 800e7bc:	7873      	ldrb	r3, [r6, #1]
 800e7be:	2b2b      	cmp	r3, #43	@ 0x2b
 800e7c0:	d033      	beq.n	800e82a <__gethex+0x116>
 800e7c2:	2b2d      	cmp	r3, #45	@ 0x2d
 800e7c4:	d034      	beq.n	800e830 <__gethex+0x11c>
 800e7c6:	1c71      	adds	r1, r6, #1
 800e7c8:	2400      	movs	r4, #0
 800e7ca:	7808      	ldrb	r0, [r1, #0]
 800e7cc:	f7ff ff8c 	bl	800e6e8 <__hexdig_fun>
 800e7d0:	1e43      	subs	r3, r0, #1
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	2b18      	cmp	r3, #24
 800e7d6:	d830      	bhi.n	800e83a <__gethex+0x126>
 800e7d8:	f1a0 0210 	sub.w	r2, r0, #16
 800e7dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e7e0:	f7ff ff82 	bl	800e6e8 <__hexdig_fun>
 800e7e4:	f100 3cff 	add.w	ip, r0, #4294967295
 800e7e8:	fa5f fc8c 	uxtb.w	ip, ip
 800e7ec:	f1bc 0f18 	cmp.w	ip, #24
 800e7f0:	f04f 030a 	mov.w	r3, #10
 800e7f4:	d91e      	bls.n	800e834 <__gethex+0x120>
 800e7f6:	b104      	cbz	r4, 800e7fa <__gethex+0xe6>
 800e7f8:	4252      	negs	r2, r2
 800e7fa:	4417      	add	r7, r2
 800e7fc:	f8ca 1000 	str.w	r1, [sl]
 800e800:	b1ed      	cbz	r5, 800e83e <__gethex+0x12a>
 800e802:	f1bb 0f00 	cmp.w	fp, #0
 800e806:	bf0c      	ite	eq
 800e808:	2506      	moveq	r5, #6
 800e80a:	2500      	movne	r5, #0
 800e80c:	4628      	mov	r0, r5
 800e80e:	b005      	add	sp, #20
 800e810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e814:	2500      	movs	r5, #0
 800e816:	462c      	mov	r4, r5
 800e818:	e7b0      	b.n	800e77c <__gethex+0x68>
 800e81a:	2c00      	cmp	r4, #0
 800e81c:	d1c7      	bne.n	800e7ae <__gethex+0x9a>
 800e81e:	4627      	mov	r7, r4
 800e820:	e7c7      	b.n	800e7b2 <__gethex+0x9e>
 800e822:	464e      	mov	r6, r9
 800e824:	462f      	mov	r7, r5
 800e826:	2501      	movs	r5, #1
 800e828:	e7c3      	b.n	800e7b2 <__gethex+0x9e>
 800e82a:	2400      	movs	r4, #0
 800e82c:	1cb1      	adds	r1, r6, #2
 800e82e:	e7cc      	b.n	800e7ca <__gethex+0xb6>
 800e830:	2401      	movs	r4, #1
 800e832:	e7fb      	b.n	800e82c <__gethex+0x118>
 800e834:	fb03 0002 	mla	r0, r3, r2, r0
 800e838:	e7ce      	b.n	800e7d8 <__gethex+0xc4>
 800e83a:	4631      	mov	r1, r6
 800e83c:	e7de      	b.n	800e7fc <__gethex+0xe8>
 800e83e:	eba6 0309 	sub.w	r3, r6, r9
 800e842:	3b01      	subs	r3, #1
 800e844:	4629      	mov	r1, r5
 800e846:	2b07      	cmp	r3, #7
 800e848:	dc0a      	bgt.n	800e860 <__gethex+0x14c>
 800e84a:	9801      	ldr	r0, [sp, #4]
 800e84c:	f7fd ff84 	bl	800c758 <_Balloc>
 800e850:	4604      	mov	r4, r0
 800e852:	b940      	cbnz	r0, 800e866 <__gethex+0x152>
 800e854:	4b5c      	ldr	r3, [pc, #368]	@ (800e9c8 <__gethex+0x2b4>)
 800e856:	4602      	mov	r2, r0
 800e858:	21e4      	movs	r1, #228	@ 0xe4
 800e85a:	485c      	ldr	r0, [pc, #368]	@ (800e9cc <__gethex+0x2b8>)
 800e85c:	f7ff fec0 	bl	800e5e0 <__assert_func>
 800e860:	3101      	adds	r1, #1
 800e862:	105b      	asrs	r3, r3, #1
 800e864:	e7ef      	b.n	800e846 <__gethex+0x132>
 800e866:	f100 0a14 	add.w	sl, r0, #20
 800e86a:	2300      	movs	r3, #0
 800e86c:	4655      	mov	r5, sl
 800e86e:	469b      	mov	fp, r3
 800e870:	45b1      	cmp	r9, r6
 800e872:	d337      	bcc.n	800e8e4 <__gethex+0x1d0>
 800e874:	f845 bb04 	str.w	fp, [r5], #4
 800e878:	eba5 050a 	sub.w	r5, r5, sl
 800e87c:	10ad      	asrs	r5, r5, #2
 800e87e:	6125      	str	r5, [r4, #16]
 800e880:	4658      	mov	r0, fp
 800e882:	f7fe f85b 	bl	800c93c <__hi0bits>
 800e886:	016d      	lsls	r5, r5, #5
 800e888:	f8d8 6000 	ldr.w	r6, [r8]
 800e88c:	1a2d      	subs	r5, r5, r0
 800e88e:	42b5      	cmp	r5, r6
 800e890:	dd54      	ble.n	800e93c <__gethex+0x228>
 800e892:	1bad      	subs	r5, r5, r6
 800e894:	4629      	mov	r1, r5
 800e896:	4620      	mov	r0, r4
 800e898:	f7fe fbef 	bl	800d07a <__any_on>
 800e89c:	4681      	mov	r9, r0
 800e89e:	b178      	cbz	r0, 800e8c0 <__gethex+0x1ac>
 800e8a0:	1e6b      	subs	r3, r5, #1
 800e8a2:	1159      	asrs	r1, r3, #5
 800e8a4:	f003 021f 	and.w	r2, r3, #31
 800e8a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e8ac:	f04f 0901 	mov.w	r9, #1
 800e8b0:	fa09 f202 	lsl.w	r2, r9, r2
 800e8b4:	420a      	tst	r2, r1
 800e8b6:	d003      	beq.n	800e8c0 <__gethex+0x1ac>
 800e8b8:	454b      	cmp	r3, r9
 800e8ba:	dc36      	bgt.n	800e92a <__gethex+0x216>
 800e8bc:	f04f 0902 	mov.w	r9, #2
 800e8c0:	4629      	mov	r1, r5
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	f7ff febe 	bl	800e644 <rshift>
 800e8c8:	442f      	add	r7, r5
 800e8ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e8ce:	42bb      	cmp	r3, r7
 800e8d0:	da42      	bge.n	800e958 <__gethex+0x244>
 800e8d2:	9801      	ldr	r0, [sp, #4]
 800e8d4:	4621      	mov	r1, r4
 800e8d6:	f7fd ff7f 	bl	800c7d8 <_Bfree>
 800e8da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e8dc:	2300      	movs	r3, #0
 800e8de:	6013      	str	r3, [r2, #0]
 800e8e0:	25a3      	movs	r5, #163	@ 0xa3
 800e8e2:	e793      	b.n	800e80c <__gethex+0xf8>
 800e8e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e8e8:	2a2e      	cmp	r2, #46	@ 0x2e
 800e8ea:	d012      	beq.n	800e912 <__gethex+0x1fe>
 800e8ec:	2b20      	cmp	r3, #32
 800e8ee:	d104      	bne.n	800e8fa <__gethex+0x1e6>
 800e8f0:	f845 bb04 	str.w	fp, [r5], #4
 800e8f4:	f04f 0b00 	mov.w	fp, #0
 800e8f8:	465b      	mov	r3, fp
 800e8fa:	7830      	ldrb	r0, [r6, #0]
 800e8fc:	9303      	str	r3, [sp, #12]
 800e8fe:	f7ff fef3 	bl	800e6e8 <__hexdig_fun>
 800e902:	9b03      	ldr	r3, [sp, #12]
 800e904:	f000 000f 	and.w	r0, r0, #15
 800e908:	4098      	lsls	r0, r3
 800e90a:	ea4b 0b00 	orr.w	fp, fp, r0
 800e90e:	3304      	adds	r3, #4
 800e910:	e7ae      	b.n	800e870 <__gethex+0x15c>
 800e912:	45b1      	cmp	r9, r6
 800e914:	d8ea      	bhi.n	800e8ec <__gethex+0x1d8>
 800e916:	492b      	ldr	r1, [pc, #172]	@ (800e9c4 <__gethex+0x2b0>)
 800e918:	9303      	str	r3, [sp, #12]
 800e91a:	2201      	movs	r2, #1
 800e91c:	4630      	mov	r0, r6
 800e91e:	f7ff fe13 	bl	800e548 <strncmp>
 800e922:	9b03      	ldr	r3, [sp, #12]
 800e924:	2800      	cmp	r0, #0
 800e926:	d1e1      	bne.n	800e8ec <__gethex+0x1d8>
 800e928:	e7a2      	b.n	800e870 <__gethex+0x15c>
 800e92a:	1ea9      	subs	r1, r5, #2
 800e92c:	4620      	mov	r0, r4
 800e92e:	f7fe fba4 	bl	800d07a <__any_on>
 800e932:	2800      	cmp	r0, #0
 800e934:	d0c2      	beq.n	800e8bc <__gethex+0x1a8>
 800e936:	f04f 0903 	mov.w	r9, #3
 800e93a:	e7c1      	b.n	800e8c0 <__gethex+0x1ac>
 800e93c:	da09      	bge.n	800e952 <__gethex+0x23e>
 800e93e:	1b75      	subs	r5, r6, r5
 800e940:	4621      	mov	r1, r4
 800e942:	9801      	ldr	r0, [sp, #4]
 800e944:	462a      	mov	r2, r5
 800e946:	f7fe f95f 	bl	800cc08 <__lshift>
 800e94a:	1b7f      	subs	r7, r7, r5
 800e94c:	4604      	mov	r4, r0
 800e94e:	f100 0a14 	add.w	sl, r0, #20
 800e952:	f04f 0900 	mov.w	r9, #0
 800e956:	e7b8      	b.n	800e8ca <__gethex+0x1b6>
 800e958:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e95c:	42bd      	cmp	r5, r7
 800e95e:	dd6f      	ble.n	800ea40 <__gethex+0x32c>
 800e960:	1bed      	subs	r5, r5, r7
 800e962:	42ae      	cmp	r6, r5
 800e964:	dc34      	bgt.n	800e9d0 <__gethex+0x2bc>
 800e966:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e96a:	2b02      	cmp	r3, #2
 800e96c:	d022      	beq.n	800e9b4 <__gethex+0x2a0>
 800e96e:	2b03      	cmp	r3, #3
 800e970:	d024      	beq.n	800e9bc <__gethex+0x2a8>
 800e972:	2b01      	cmp	r3, #1
 800e974:	d115      	bne.n	800e9a2 <__gethex+0x28e>
 800e976:	42ae      	cmp	r6, r5
 800e978:	d113      	bne.n	800e9a2 <__gethex+0x28e>
 800e97a:	2e01      	cmp	r6, #1
 800e97c:	d10b      	bne.n	800e996 <__gethex+0x282>
 800e97e:	9a02      	ldr	r2, [sp, #8]
 800e980:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e984:	6013      	str	r3, [r2, #0]
 800e986:	2301      	movs	r3, #1
 800e988:	6123      	str	r3, [r4, #16]
 800e98a:	f8ca 3000 	str.w	r3, [sl]
 800e98e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e990:	2562      	movs	r5, #98	@ 0x62
 800e992:	601c      	str	r4, [r3, #0]
 800e994:	e73a      	b.n	800e80c <__gethex+0xf8>
 800e996:	1e71      	subs	r1, r6, #1
 800e998:	4620      	mov	r0, r4
 800e99a:	f7fe fb6e 	bl	800d07a <__any_on>
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	d1ed      	bne.n	800e97e <__gethex+0x26a>
 800e9a2:	9801      	ldr	r0, [sp, #4]
 800e9a4:	4621      	mov	r1, r4
 800e9a6:	f7fd ff17 	bl	800c7d8 <_Bfree>
 800e9aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	6013      	str	r3, [r2, #0]
 800e9b0:	2550      	movs	r5, #80	@ 0x50
 800e9b2:	e72b      	b.n	800e80c <__gethex+0xf8>
 800e9b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d1f3      	bne.n	800e9a2 <__gethex+0x28e>
 800e9ba:	e7e0      	b.n	800e97e <__gethex+0x26a>
 800e9bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d1dd      	bne.n	800e97e <__gethex+0x26a>
 800e9c2:	e7ee      	b.n	800e9a2 <__gethex+0x28e>
 800e9c4:	0800f150 	.word	0x0800f150
 800e9c8:	0800efe5 	.word	0x0800efe5
 800e9cc:	0800f2fe 	.word	0x0800f2fe
 800e9d0:	1e6f      	subs	r7, r5, #1
 800e9d2:	f1b9 0f00 	cmp.w	r9, #0
 800e9d6:	d130      	bne.n	800ea3a <__gethex+0x326>
 800e9d8:	b127      	cbz	r7, 800e9e4 <__gethex+0x2d0>
 800e9da:	4639      	mov	r1, r7
 800e9dc:	4620      	mov	r0, r4
 800e9de:	f7fe fb4c 	bl	800d07a <__any_on>
 800e9e2:	4681      	mov	r9, r0
 800e9e4:	117a      	asrs	r2, r7, #5
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e9ec:	f007 071f 	and.w	r7, r7, #31
 800e9f0:	40bb      	lsls	r3, r7
 800e9f2:	4213      	tst	r3, r2
 800e9f4:	4629      	mov	r1, r5
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	bf18      	it	ne
 800e9fa:	f049 0902 	orrne.w	r9, r9, #2
 800e9fe:	f7ff fe21 	bl	800e644 <rshift>
 800ea02:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ea06:	1b76      	subs	r6, r6, r5
 800ea08:	2502      	movs	r5, #2
 800ea0a:	f1b9 0f00 	cmp.w	r9, #0
 800ea0e:	d047      	beq.n	800eaa0 <__gethex+0x38c>
 800ea10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ea14:	2b02      	cmp	r3, #2
 800ea16:	d015      	beq.n	800ea44 <__gethex+0x330>
 800ea18:	2b03      	cmp	r3, #3
 800ea1a:	d017      	beq.n	800ea4c <__gethex+0x338>
 800ea1c:	2b01      	cmp	r3, #1
 800ea1e:	d109      	bne.n	800ea34 <__gethex+0x320>
 800ea20:	f019 0f02 	tst.w	r9, #2
 800ea24:	d006      	beq.n	800ea34 <__gethex+0x320>
 800ea26:	f8da 3000 	ldr.w	r3, [sl]
 800ea2a:	ea49 0903 	orr.w	r9, r9, r3
 800ea2e:	f019 0f01 	tst.w	r9, #1
 800ea32:	d10e      	bne.n	800ea52 <__gethex+0x33e>
 800ea34:	f045 0510 	orr.w	r5, r5, #16
 800ea38:	e032      	b.n	800eaa0 <__gethex+0x38c>
 800ea3a:	f04f 0901 	mov.w	r9, #1
 800ea3e:	e7d1      	b.n	800e9e4 <__gethex+0x2d0>
 800ea40:	2501      	movs	r5, #1
 800ea42:	e7e2      	b.n	800ea0a <__gethex+0x2f6>
 800ea44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea46:	f1c3 0301 	rsb	r3, r3, #1
 800ea4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ea4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d0f0      	beq.n	800ea34 <__gethex+0x320>
 800ea52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ea56:	f104 0314 	add.w	r3, r4, #20
 800ea5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ea5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ea62:	f04f 0c00 	mov.w	ip, #0
 800ea66:	4618      	mov	r0, r3
 800ea68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ea70:	d01b      	beq.n	800eaaa <__gethex+0x396>
 800ea72:	3201      	adds	r2, #1
 800ea74:	6002      	str	r2, [r0, #0]
 800ea76:	2d02      	cmp	r5, #2
 800ea78:	f104 0314 	add.w	r3, r4, #20
 800ea7c:	d13c      	bne.n	800eaf8 <__gethex+0x3e4>
 800ea7e:	f8d8 2000 	ldr.w	r2, [r8]
 800ea82:	3a01      	subs	r2, #1
 800ea84:	42b2      	cmp	r2, r6
 800ea86:	d109      	bne.n	800ea9c <__gethex+0x388>
 800ea88:	1171      	asrs	r1, r6, #5
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ea90:	f006 061f 	and.w	r6, r6, #31
 800ea94:	fa02 f606 	lsl.w	r6, r2, r6
 800ea98:	421e      	tst	r6, r3
 800ea9a:	d13a      	bne.n	800eb12 <__gethex+0x3fe>
 800ea9c:	f045 0520 	orr.w	r5, r5, #32
 800eaa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eaa2:	601c      	str	r4, [r3, #0]
 800eaa4:	9b02      	ldr	r3, [sp, #8]
 800eaa6:	601f      	str	r7, [r3, #0]
 800eaa8:	e6b0      	b.n	800e80c <__gethex+0xf8>
 800eaaa:	4299      	cmp	r1, r3
 800eaac:	f843 cc04 	str.w	ip, [r3, #-4]
 800eab0:	d8d9      	bhi.n	800ea66 <__gethex+0x352>
 800eab2:	68a3      	ldr	r3, [r4, #8]
 800eab4:	459b      	cmp	fp, r3
 800eab6:	db17      	blt.n	800eae8 <__gethex+0x3d4>
 800eab8:	6861      	ldr	r1, [r4, #4]
 800eaba:	9801      	ldr	r0, [sp, #4]
 800eabc:	3101      	adds	r1, #1
 800eabe:	f7fd fe4b 	bl	800c758 <_Balloc>
 800eac2:	4681      	mov	r9, r0
 800eac4:	b918      	cbnz	r0, 800eace <__gethex+0x3ba>
 800eac6:	4b1a      	ldr	r3, [pc, #104]	@ (800eb30 <__gethex+0x41c>)
 800eac8:	4602      	mov	r2, r0
 800eaca:	2184      	movs	r1, #132	@ 0x84
 800eacc:	e6c5      	b.n	800e85a <__gethex+0x146>
 800eace:	6922      	ldr	r2, [r4, #16]
 800ead0:	3202      	adds	r2, #2
 800ead2:	f104 010c 	add.w	r1, r4, #12
 800ead6:	0092      	lsls	r2, r2, #2
 800ead8:	300c      	adds	r0, #12
 800eada:	f7fc feda 	bl	800b892 <memcpy>
 800eade:	4621      	mov	r1, r4
 800eae0:	9801      	ldr	r0, [sp, #4]
 800eae2:	f7fd fe79 	bl	800c7d8 <_Bfree>
 800eae6:	464c      	mov	r4, r9
 800eae8:	6923      	ldr	r3, [r4, #16]
 800eaea:	1c5a      	adds	r2, r3, #1
 800eaec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eaf0:	6122      	str	r2, [r4, #16]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	615a      	str	r2, [r3, #20]
 800eaf6:	e7be      	b.n	800ea76 <__gethex+0x362>
 800eaf8:	6922      	ldr	r2, [r4, #16]
 800eafa:	455a      	cmp	r2, fp
 800eafc:	dd0b      	ble.n	800eb16 <__gethex+0x402>
 800eafe:	2101      	movs	r1, #1
 800eb00:	4620      	mov	r0, r4
 800eb02:	f7ff fd9f 	bl	800e644 <rshift>
 800eb06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb0a:	3701      	adds	r7, #1
 800eb0c:	42bb      	cmp	r3, r7
 800eb0e:	f6ff aee0 	blt.w	800e8d2 <__gethex+0x1be>
 800eb12:	2501      	movs	r5, #1
 800eb14:	e7c2      	b.n	800ea9c <__gethex+0x388>
 800eb16:	f016 061f 	ands.w	r6, r6, #31
 800eb1a:	d0fa      	beq.n	800eb12 <__gethex+0x3fe>
 800eb1c:	4453      	add	r3, sl
 800eb1e:	f1c6 0620 	rsb	r6, r6, #32
 800eb22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eb26:	f7fd ff09 	bl	800c93c <__hi0bits>
 800eb2a:	42b0      	cmp	r0, r6
 800eb2c:	dbe7      	blt.n	800eafe <__gethex+0x3ea>
 800eb2e:	e7f0      	b.n	800eb12 <__gethex+0x3fe>
 800eb30:	0800efe5 	.word	0x0800efe5

0800eb34 <L_shift>:
 800eb34:	f1c2 0208 	rsb	r2, r2, #8
 800eb38:	0092      	lsls	r2, r2, #2
 800eb3a:	b570      	push	{r4, r5, r6, lr}
 800eb3c:	f1c2 0620 	rsb	r6, r2, #32
 800eb40:	6843      	ldr	r3, [r0, #4]
 800eb42:	6804      	ldr	r4, [r0, #0]
 800eb44:	fa03 f506 	lsl.w	r5, r3, r6
 800eb48:	432c      	orrs	r4, r5
 800eb4a:	40d3      	lsrs	r3, r2
 800eb4c:	6004      	str	r4, [r0, #0]
 800eb4e:	f840 3f04 	str.w	r3, [r0, #4]!
 800eb52:	4288      	cmp	r0, r1
 800eb54:	d3f4      	bcc.n	800eb40 <L_shift+0xc>
 800eb56:	bd70      	pop	{r4, r5, r6, pc}

0800eb58 <__match>:
 800eb58:	b530      	push	{r4, r5, lr}
 800eb5a:	6803      	ldr	r3, [r0, #0]
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb62:	b914      	cbnz	r4, 800eb6a <__match+0x12>
 800eb64:	6003      	str	r3, [r0, #0]
 800eb66:	2001      	movs	r0, #1
 800eb68:	bd30      	pop	{r4, r5, pc}
 800eb6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb6e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800eb72:	2d19      	cmp	r5, #25
 800eb74:	bf98      	it	ls
 800eb76:	3220      	addls	r2, #32
 800eb78:	42a2      	cmp	r2, r4
 800eb7a:	d0f0      	beq.n	800eb5e <__match+0x6>
 800eb7c:	2000      	movs	r0, #0
 800eb7e:	e7f3      	b.n	800eb68 <__match+0x10>

0800eb80 <__hexnan>:
 800eb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb84:	680b      	ldr	r3, [r1, #0]
 800eb86:	6801      	ldr	r1, [r0, #0]
 800eb88:	115e      	asrs	r6, r3, #5
 800eb8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eb8e:	f013 031f 	ands.w	r3, r3, #31
 800eb92:	b087      	sub	sp, #28
 800eb94:	bf18      	it	ne
 800eb96:	3604      	addne	r6, #4
 800eb98:	2500      	movs	r5, #0
 800eb9a:	1f37      	subs	r7, r6, #4
 800eb9c:	4682      	mov	sl, r0
 800eb9e:	4690      	mov	r8, r2
 800eba0:	9301      	str	r3, [sp, #4]
 800eba2:	f846 5c04 	str.w	r5, [r6, #-4]
 800eba6:	46b9      	mov	r9, r7
 800eba8:	463c      	mov	r4, r7
 800ebaa:	9502      	str	r5, [sp, #8]
 800ebac:	46ab      	mov	fp, r5
 800ebae:	784a      	ldrb	r2, [r1, #1]
 800ebb0:	1c4b      	adds	r3, r1, #1
 800ebb2:	9303      	str	r3, [sp, #12]
 800ebb4:	b342      	cbz	r2, 800ec08 <__hexnan+0x88>
 800ebb6:	4610      	mov	r0, r2
 800ebb8:	9105      	str	r1, [sp, #20]
 800ebba:	9204      	str	r2, [sp, #16]
 800ebbc:	f7ff fd94 	bl	800e6e8 <__hexdig_fun>
 800ebc0:	2800      	cmp	r0, #0
 800ebc2:	d151      	bne.n	800ec68 <__hexnan+0xe8>
 800ebc4:	9a04      	ldr	r2, [sp, #16]
 800ebc6:	9905      	ldr	r1, [sp, #20]
 800ebc8:	2a20      	cmp	r2, #32
 800ebca:	d818      	bhi.n	800ebfe <__hexnan+0x7e>
 800ebcc:	9b02      	ldr	r3, [sp, #8]
 800ebce:	459b      	cmp	fp, r3
 800ebd0:	dd13      	ble.n	800ebfa <__hexnan+0x7a>
 800ebd2:	454c      	cmp	r4, r9
 800ebd4:	d206      	bcs.n	800ebe4 <__hexnan+0x64>
 800ebd6:	2d07      	cmp	r5, #7
 800ebd8:	dc04      	bgt.n	800ebe4 <__hexnan+0x64>
 800ebda:	462a      	mov	r2, r5
 800ebdc:	4649      	mov	r1, r9
 800ebde:	4620      	mov	r0, r4
 800ebe0:	f7ff ffa8 	bl	800eb34 <L_shift>
 800ebe4:	4544      	cmp	r4, r8
 800ebe6:	d952      	bls.n	800ec8e <__hexnan+0x10e>
 800ebe8:	2300      	movs	r3, #0
 800ebea:	f1a4 0904 	sub.w	r9, r4, #4
 800ebee:	f844 3c04 	str.w	r3, [r4, #-4]
 800ebf2:	f8cd b008 	str.w	fp, [sp, #8]
 800ebf6:	464c      	mov	r4, r9
 800ebf8:	461d      	mov	r5, r3
 800ebfa:	9903      	ldr	r1, [sp, #12]
 800ebfc:	e7d7      	b.n	800ebae <__hexnan+0x2e>
 800ebfe:	2a29      	cmp	r2, #41	@ 0x29
 800ec00:	d157      	bne.n	800ecb2 <__hexnan+0x132>
 800ec02:	3102      	adds	r1, #2
 800ec04:	f8ca 1000 	str.w	r1, [sl]
 800ec08:	f1bb 0f00 	cmp.w	fp, #0
 800ec0c:	d051      	beq.n	800ecb2 <__hexnan+0x132>
 800ec0e:	454c      	cmp	r4, r9
 800ec10:	d206      	bcs.n	800ec20 <__hexnan+0xa0>
 800ec12:	2d07      	cmp	r5, #7
 800ec14:	dc04      	bgt.n	800ec20 <__hexnan+0xa0>
 800ec16:	462a      	mov	r2, r5
 800ec18:	4649      	mov	r1, r9
 800ec1a:	4620      	mov	r0, r4
 800ec1c:	f7ff ff8a 	bl	800eb34 <L_shift>
 800ec20:	4544      	cmp	r4, r8
 800ec22:	d936      	bls.n	800ec92 <__hexnan+0x112>
 800ec24:	f1a8 0204 	sub.w	r2, r8, #4
 800ec28:	4623      	mov	r3, r4
 800ec2a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ec2e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ec32:	429f      	cmp	r7, r3
 800ec34:	d2f9      	bcs.n	800ec2a <__hexnan+0xaa>
 800ec36:	1b3b      	subs	r3, r7, r4
 800ec38:	f023 0303 	bic.w	r3, r3, #3
 800ec3c:	3304      	adds	r3, #4
 800ec3e:	3401      	adds	r4, #1
 800ec40:	3e03      	subs	r6, #3
 800ec42:	42b4      	cmp	r4, r6
 800ec44:	bf88      	it	hi
 800ec46:	2304      	movhi	r3, #4
 800ec48:	4443      	add	r3, r8
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	f843 2b04 	str.w	r2, [r3], #4
 800ec50:	429f      	cmp	r7, r3
 800ec52:	d2fb      	bcs.n	800ec4c <__hexnan+0xcc>
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	b91b      	cbnz	r3, 800ec60 <__hexnan+0xe0>
 800ec58:	4547      	cmp	r7, r8
 800ec5a:	d128      	bne.n	800ecae <__hexnan+0x12e>
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	603b      	str	r3, [r7, #0]
 800ec60:	2005      	movs	r0, #5
 800ec62:	b007      	add	sp, #28
 800ec64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec68:	3501      	adds	r5, #1
 800ec6a:	2d08      	cmp	r5, #8
 800ec6c:	f10b 0b01 	add.w	fp, fp, #1
 800ec70:	dd06      	ble.n	800ec80 <__hexnan+0x100>
 800ec72:	4544      	cmp	r4, r8
 800ec74:	d9c1      	bls.n	800ebfa <__hexnan+0x7a>
 800ec76:	2300      	movs	r3, #0
 800ec78:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec7c:	2501      	movs	r5, #1
 800ec7e:	3c04      	subs	r4, #4
 800ec80:	6822      	ldr	r2, [r4, #0]
 800ec82:	f000 000f 	and.w	r0, r0, #15
 800ec86:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ec8a:	6020      	str	r0, [r4, #0]
 800ec8c:	e7b5      	b.n	800ebfa <__hexnan+0x7a>
 800ec8e:	2508      	movs	r5, #8
 800ec90:	e7b3      	b.n	800ebfa <__hexnan+0x7a>
 800ec92:	9b01      	ldr	r3, [sp, #4]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d0dd      	beq.n	800ec54 <__hexnan+0xd4>
 800ec98:	f1c3 0320 	rsb	r3, r3, #32
 800ec9c:	f04f 32ff 	mov.w	r2, #4294967295
 800eca0:	40da      	lsrs	r2, r3
 800eca2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800eca6:	4013      	ands	r3, r2
 800eca8:	f846 3c04 	str.w	r3, [r6, #-4]
 800ecac:	e7d2      	b.n	800ec54 <__hexnan+0xd4>
 800ecae:	3f04      	subs	r7, #4
 800ecb0:	e7d0      	b.n	800ec54 <__hexnan+0xd4>
 800ecb2:	2004      	movs	r0, #4
 800ecb4:	e7d5      	b.n	800ec62 <__hexnan+0xe2>

0800ecb6 <__ascii_mbtowc>:
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	b901      	cbnz	r1, 800ecbc <__ascii_mbtowc+0x6>
 800ecba:	a901      	add	r1, sp, #4
 800ecbc:	b142      	cbz	r2, 800ecd0 <__ascii_mbtowc+0x1a>
 800ecbe:	b14b      	cbz	r3, 800ecd4 <__ascii_mbtowc+0x1e>
 800ecc0:	7813      	ldrb	r3, [r2, #0]
 800ecc2:	600b      	str	r3, [r1, #0]
 800ecc4:	7812      	ldrb	r2, [r2, #0]
 800ecc6:	1e10      	subs	r0, r2, #0
 800ecc8:	bf18      	it	ne
 800ecca:	2001      	movne	r0, #1
 800eccc:	b002      	add	sp, #8
 800ecce:	4770      	bx	lr
 800ecd0:	4610      	mov	r0, r2
 800ecd2:	e7fb      	b.n	800eccc <__ascii_mbtowc+0x16>
 800ecd4:	f06f 0001 	mvn.w	r0, #1
 800ecd8:	e7f8      	b.n	800eccc <__ascii_mbtowc+0x16>

0800ecda <_realloc_r>:
 800ecda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecde:	4680      	mov	r8, r0
 800ece0:	4615      	mov	r5, r2
 800ece2:	460c      	mov	r4, r1
 800ece4:	b921      	cbnz	r1, 800ecf0 <_realloc_r+0x16>
 800ece6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecea:	4611      	mov	r1, r2
 800ecec:	f7fd bca8 	b.w	800c640 <_malloc_r>
 800ecf0:	b92a      	cbnz	r2, 800ecfe <_realloc_r+0x24>
 800ecf2:	f7fd fc31 	bl	800c558 <_free_r>
 800ecf6:	2400      	movs	r4, #0
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecfe:	f000 f840 	bl	800ed82 <_malloc_usable_size_r>
 800ed02:	4285      	cmp	r5, r0
 800ed04:	4606      	mov	r6, r0
 800ed06:	d802      	bhi.n	800ed0e <_realloc_r+0x34>
 800ed08:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ed0c:	d8f4      	bhi.n	800ecf8 <_realloc_r+0x1e>
 800ed0e:	4629      	mov	r1, r5
 800ed10:	4640      	mov	r0, r8
 800ed12:	f7fd fc95 	bl	800c640 <_malloc_r>
 800ed16:	4607      	mov	r7, r0
 800ed18:	2800      	cmp	r0, #0
 800ed1a:	d0ec      	beq.n	800ecf6 <_realloc_r+0x1c>
 800ed1c:	42b5      	cmp	r5, r6
 800ed1e:	462a      	mov	r2, r5
 800ed20:	4621      	mov	r1, r4
 800ed22:	bf28      	it	cs
 800ed24:	4632      	movcs	r2, r6
 800ed26:	f7fc fdb4 	bl	800b892 <memcpy>
 800ed2a:	4621      	mov	r1, r4
 800ed2c:	4640      	mov	r0, r8
 800ed2e:	f7fd fc13 	bl	800c558 <_free_r>
 800ed32:	463c      	mov	r4, r7
 800ed34:	e7e0      	b.n	800ecf8 <_realloc_r+0x1e>

0800ed36 <__ascii_wctomb>:
 800ed36:	4603      	mov	r3, r0
 800ed38:	4608      	mov	r0, r1
 800ed3a:	b141      	cbz	r1, 800ed4e <__ascii_wctomb+0x18>
 800ed3c:	2aff      	cmp	r2, #255	@ 0xff
 800ed3e:	d904      	bls.n	800ed4a <__ascii_wctomb+0x14>
 800ed40:	228a      	movs	r2, #138	@ 0x8a
 800ed42:	601a      	str	r2, [r3, #0]
 800ed44:	f04f 30ff 	mov.w	r0, #4294967295
 800ed48:	4770      	bx	lr
 800ed4a:	700a      	strb	r2, [r1, #0]
 800ed4c:	2001      	movs	r0, #1
 800ed4e:	4770      	bx	lr

0800ed50 <fiprintf>:
 800ed50:	b40e      	push	{r1, r2, r3}
 800ed52:	b503      	push	{r0, r1, lr}
 800ed54:	4601      	mov	r1, r0
 800ed56:	ab03      	add	r3, sp, #12
 800ed58:	4805      	ldr	r0, [pc, #20]	@ (800ed70 <fiprintf+0x20>)
 800ed5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed5e:	6800      	ldr	r0, [r0, #0]
 800ed60:	9301      	str	r3, [sp, #4]
 800ed62:	f7ff f9b1 	bl	800e0c8 <_vfiprintf_r>
 800ed66:	b002      	add	sp, #8
 800ed68:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed6c:	b003      	add	sp, #12
 800ed6e:	4770      	bx	lr
 800ed70:	20000050 	.word	0x20000050

0800ed74 <abort>:
 800ed74:	b508      	push	{r3, lr}
 800ed76:	2006      	movs	r0, #6
 800ed78:	f000 f834 	bl	800ede4 <raise>
 800ed7c:	2001      	movs	r0, #1
 800ed7e:	f7f3 fe39 	bl	80029f4 <_exit>

0800ed82 <_malloc_usable_size_r>:
 800ed82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed86:	1f18      	subs	r0, r3, #4
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	bfbc      	itt	lt
 800ed8c:	580b      	ldrlt	r3, [r1, r0]
 800ed8e:	18c0      	addlt	r0, r0, r3
 800ed90:	4770      	bx	lr

0800ed92 <_raise_r>:
 800ed92:	291f      	cmp	r1, #31
 800ed94:	b538      	push	{r3, r4, r5, lr}
 800ed96:	4605      	mov	r5, r0
 800ed98:	460c      	mov	r4, r1
 800ed9a:	d904      	bls.n	800eda6 <_raise_r+0x14>
 800ed9c:	2316      	movs	r3, #22
 800ed9e:	6003      	str	r3, [r0, #0]
 800eda0:	f04f 30ff 	mov.w	r0, #4294967295
 800eda4:	bd38      	pop	{r3, r4, r5, pc}
 800eda6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eda8:	b112      	cbz	r2, 800edb0 <_raise_r+0x1e>
 800edaa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800edae:	b94b      	cbnz	r3, 800edc4 <_raise_r+0x32>
 800edb0:	4628      	mov	r0, r5
 800edb2:	f000 f831 	bl	800ee18 <_getpid_r>
 800edb6:	4622      	mov	r2, r4
 800edb8:	4601      	mov	r1, r0
 800edba:	4628      	mov	r0, r5
 800edbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edc0:	f000 b818 	b.w	800edf4 <_kill_r>
 800edc4:	2b01      	cmp	r3, #1
 800edc6:	d00a      	beq.n	800edde <_raise_r+0x4c>
 800edc8:	1c59      	adds	r1, r3, #1
 800edca:	d103      	bne.n	800edd4 <_raise_r+0x42>
 800edcc:	2316      	movs	r3, #22
 800edce:	6003      	str	r3, [r0, #0]
 800edd0:	2001      	movs	r0, #1
 800edd2:	e7e7      	b.n	800eda4 <_raise_r+0x12>
 800edd4:	2100      	movs	r1, #0
 800edd6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800edda:	4620      	mov	r0, r4
 800eddc:	4798      	blx	r3
 800edde:	2000      	movs	r0, #0
 800ede0:	e7e0      	b.n	800eda4 <_raise_r+0x12>
	...

0800ede4 <raise>:
 800ede4:	4b02      	ldr	r3, [pc, #8]	@ (800edf0 <raise+0xc>)
 800ede6:	4601      	mov	r1, r0
 800ede8:	6818      	ldr	r0, [r3, #0]
 800edea:	f7ff bfd2 	b.w	800ed92 <_raise_r>
 800edee:	bf00      	nop
 800edf0:	20000050 	.word	0x20000050

0800edf4 <_kill_r>:
 800edf4:	b538      	push	{r3, r4, r5, lr}
 800edf6:	4d07      	ldr	r5, [pc, #28]	@ (800ee14 <_kill_r+0x20>)
 800edf8:	2300      	movs	r3, #0
 800edfa:	4604      	mov	r4, r0
 800edfc:	4608      	mov	r0, r1
 800edfe:	4611      	mov	r1, r2
 800ee00:	602b      	str	r3, [r5, #0]
 800ee02:	f7f3 fde7 	bl	80029d4 <_kill>
 800ee06:	1c43      	adds	r3, r0, #1
 800ee08:	d102      	bne.n	800ee10 <_kill_r+0x1c>
 800ee0a:	682b      	ldr	r3, [r5, #0]
 800ee0c:	b103      	cbz	r3, 800ee10 <_kill_r+0x1c>
 800ee0e:	6023      	str	r3, [r4, #0]
 800ee10:	bd38      	pop	{r3, r4, r5, pc}
 800ee12:	bf00      	nop
 800ee14:	20000c90 	.word	0x20000c90

0800ee18 <_getpid_r>:
 800ee18:	f7f3 bdd4 	b.w	80029c4 <_getpid>

0800ee1c <_init>:
 800ee1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee1e:	bf00      	nop
 800ee20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee22:	bc08      	pop	{r3}
 800ee24:	469e      	mov	lr, r3
 800ee26:	4770      	bx	lr

0800ee28 <_fini>:
 800ee28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee2a:	bf00      	nop
 800ee2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee2e:	bc08      	pop	{r3}
 800ee30:	469e      	mov	lr, r3
 800ee32:	4770      	bx	lr
