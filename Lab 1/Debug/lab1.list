
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005fe4  08005fe4  00006fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060b0  080060b0  00008010  2**0
                  CONTENTS
  4 .ARM          00000000  080060b0  080060b0  00008010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060b0  080060b0  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060b0  080060b0  000070b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060b4  080060b4  000070b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080060b8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001988  20000010  080060c8  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001998  080060c8  00008998  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013dc9  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d54  00000000  00000000  0001be09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  0001eb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edc  00000000  00000000  0001fea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002af7  00000000  00000000  00020d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f67  00000000  00000000  0002387b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f68c0  00000000  00000000  000377e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e0a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050e4  00000000  00000000  0012e0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001331cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005fcc 	.word	0x08005fcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005fcc 	.word	0x08005fcc

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fce5 	bl	8000ba2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f83a 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f8c2 	bl	8000364 <MX_GPIO_Init>
  MX_TIM6_Init();
 80001e0:	f000 f888 	bl	80002f4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK)
 80001e4:	4811      	ldr	r0, [pc, #68]	@ (800022c <main+0x5c>)
 80001e6:	f001 fed9 	bl	8001f9c <HAL_TIM_Base_Start_IT>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <main+0x24>
  {
      /* Starting Error */
      Error_Handler();
 80001f0:	f000 fbec 	bl	80009cc <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001f4:	f002 f9f2 	bl	80025dc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of LED2_Mutex */
  LED2_MutexHandle = osMutexNew(&LED2_Mutex_attributes);
 80001f8:	480d      	ldr	r0, [pc, #52]	@ (8000230 <main+0x60>)
 80001fa:	f002 fbf3 	bl	80029e4 <osMutexNew>
 80001fe:	4603      	mov	r3, r0
 8000200:	4a0c      	ldr	r2, [pc, #48]	@ (8000234 <main+0x64>)
 8000202:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_1 */
  Task_1Handle = osThreadNew(StartTask_1, NULL, &Task_1_attributes);
 8000204:	4a0c      	ldr	r2, [pc, #48]	@ (8000238 <main+0x68>)
 8000206:	2100      	movs	r1, #0
 8000208:	480c      	ldr	r0, [pc, #48]	@ (800023c <main+0x6c>)
 800020a:	f002 fa31 	bl	8002670 <osThreadNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a0b      	ldr	r2, [pc, #44]	@ (8000240 <main+0x70>)
 8000212:	6013      	str	r3, [r2, #0]

  /* creation of Task_2 */
  Task_2Handle = osThreadNew(StartTask_2, NULL, &Task_2_attributes);
 8000214:	4a0b      	ldr	r2, [pc, #44]	@ (8000244 <main+0x74>)
 8000216:	2100      	movs	r1, #0
 8000218:	480b      	ldr	r0, [pc, #44]	@ (8000248 <main+0x78>)
 800021a:	f002 fa29 	bl	8002670 <osThreadNew>
 800021e:	4603      	mov	r3, r0
 8000220:	4a0a      	ldr	r2, [pc, #40]	@ (800024c <main+0x7c>)
 8000222:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000224:	f002 f9fe 	bl	8002624 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000228:	bf00      	nop
 800022a:	e7fd      	b.n	8000228 <main+0x58>
 800022c:	2000002c 	.word	0x2000002c
 8000230:	08006060 	.word	0x08006060
 8000234:	20000080 	.word	0x20000080
 8000238:	08006018 	.word	0x08006018
 800023c:	08000865 	.word	0x08000865
 8000240:	20000078 	.word	0x20000078
 8000244:	0800603c 	.word	0x0800603c
 8000248:	08000955 	.word	0x08000955
 800024c:	2000007c 	.word	0x2000007c

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b096      	sub	sp, #88	@ 0x58
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0314 	add.w	r3, r7, #20
 800025a:	2244      	movs	r2, #68	@ 0x44
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f005 fe7a 	bl	8005f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	463b      	mov	r3, r7
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000272:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000276:	f001 f81b 	bl	80012b0 <HAL_PWREx_ControlVoltageScaling>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000280:	f000 fba4 	bl	80009cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000284:	2310      	movs	r3, #16
 8000286:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000288:	2301      	movs	r3, #1
 800028a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000290:	2360      	movs	r3, #96	@ 0x60
 8000292:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000294:	2302      	movs	r3, #2
 8000296:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000298:	2301      	movs	r3, #1
 800029a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800029c:	2301      	movs	r3, #1
 800029e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002a0:	2328      	movs	r3, #40	@ 0x28
 80002a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002a4:	2307      	movs	r3, #7
 80002a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a8:	2302      	movs	r3, #2
 80002aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ac:	2302      	movs	r3, #2
 80002ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 f851 	bl	800135c <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002c0:	f000 fb84 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c8:	2303      	movs	r3, #3
 80002ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002d8:	463b      	mov	r3, r7
 80002da:	2104      	movs	r1, #4
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 fc19 	bl	8001b14 <HAL_RCC_ClockConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002e8:	f000 fb70 	bl	80009cc <Error_Handler>
  }
}
 80002ec:	bf00      	nop
 80002ee:	3758      	adds	r7, #88	@ 0x58
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000304:	4b15      	ldr	r3, [pc, #84]	@ (800035c <MX_TIM6_Init+0x68>)
 8000306:	4a16      	ldr	r2, [pc, #88]	@ (8000360 <MX_TIM6_Init+0x6c>)
 8000308:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19999;
 800030a:	4b14      	ldr	r3, [pc, #80]	@ (800035c <MX_TIM6_Init+0x68>)
 800030c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000310:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000312:	4b12      	ldr	r3, [pc, #72]	@ (800035c <MX_TIM6_Init+0x68>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 39999;
 8000318:	4b10      	ldr	r3, [pc, #64]	@ (800035c <MX_TIM6_Init+0x68>)
 800031a:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800031e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000320:	4b0e      	ldr	r3, [pc, #56]	@ (800035c <MX_TIM6_Init+0x68>)
 8000322:	2280      	movs	r2, #128	@ 0x80
 8000324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000326:	480d      	ldr	r0, [pc, #52]	@ (800035c <MX_TIM6_Init+0x68>)
 8000328:	f001 fde0 	bl	8001eec <HAL_TIM_Base_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000332:	f000 fb4b 	bl	80009cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000336:	2300      	movs	r3, #0
 8000338:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800033a:	2300      	movs	r3, #0
 800033c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4619      	mov	r1, r3
 8000342:	4806      	ldr	r0, [pc, #24]	@ (800035c <MX_TIM6_Init+0x68>)
 8000344:	f002 f870 	bl	8002428 <HAL_TIMEx_MasterConfigSynchronization>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800034e:	f000 fb3d 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	2000002c 	.word	0x2000002c
 8000360:	40001000 	.word	0x40001000

08000364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b08a      	sub	sp, #40	@ 0x28
 8000368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	f107 0314 	add.w	r3, r7, #20
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
 8000378:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800037a:	4bbc      	ldr	r3, [pc, #752]	@ (800066c <MX_GPIO_Init+0x308>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800037e:	4abb      	ldr	r2, [pc, #748]	@ (800066c <MX_GPIO_Init+0x308>)
 8000380:	f043 0310 	orr.w	r3, r3, #16
 8000384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000386:	4bb9      	ldr	r3, [pc, #740]	@ (800066c <MX_GPIO_Init+0x308>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800038a:	f003 0310 	and.w	r3, r3, #16
 800038e:	613b      	str	r3, [r7, #16]
 8000390:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000392:	4bb6      	ldr	r3, [pc, #728]	@ (800066c <MX_GPIO_Init+0x308>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000396:	4ab5      	ldr	r2, [pc, #724]	@ (800066c <MX_GPIO_Init+0x308>)
 8000398:	f043 0304 	orr.w	r3, r3, #4
 800039c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800039e:	4bb3      	ldr	r3, [pc, #716]	@ (800066c <MX_GPIO_Init+0x308>)
 80003a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a2:	f003 0304 	and.w	r3, r3, #4
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003aa:	4bb0      	ldr	r3, [pc, #704]	@ (800066c <MX_GPIO_Init+0x308>)
 80003ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ae:	4aaf      	ldr	r2, [pc, #700]	@ (800066c <MX_GPIO_Init+0x308>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003b6:	4bad      	ldr	r3, [pc, #692]	@ (800066c <MX_GPIO_Init+0x308>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	60bb      	str	r3, [r7, #8]
 80003c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c2:	4baa      	ldr	r3, [pc, #680]	@ (800066c <MX_GPIO_Init+0x308>)
 80003c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003c6:	4aa9      	ldr	r2, [pc, #676]	@ (800066c <MX_GPIO_Init+0x308>)
 80003c8:	f043 0302 	orr.w	r3, r3, #2
 80003cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ce:	4ba7      	ldr	r3, [pc, #668]	@ (800066c <MX_GPIO_Init+0x308>)
 80003d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d2:	f003 0302 	and.w	r3, r3, #2
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003da:	4ba4      	ldr	r3, [pc, #656]	@ (800066c <MX_GPIO_Init+0x308>)
 80003dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003de:	4aa3      	ldr	r2, [pc, #652]	@ (800066c <MX_GPIO_Init+0x308>)
 80003e0:	f043 0308 	orr.w	r3, r3, #8
 80003e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003e6:	4ba1      	ldr	r3, [pc, #644]	@ (800066c <MX_GPIO_Init+0x308>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ea:	f003 0308 	and.w	r3, r3, #8
 80003ee:	603b      	str	r3, [r7, #0]
 80003f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80003f8:	489d      	ldr	r0, [pc, #628]	@ (8000670 <MX_GPIO_Init+0x30c>)
 80003fa:	f000 ff1b 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000404:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000408:	f000 ff14 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800040c:	2200      	movs	r2, #0
 800040e:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000412:	4898      	ldr	r0, [pc, #608]	@ (8000674 <MX_GPIO_Init+0x310>)
 8000414:	f000 ff0e 	bl	8001234 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f241 0181 	movw	r1, #4225	@ 0x1081
 800041e:	4896      	ldr	r0, [pc, #600]	@ (8000678 <MX_GPIO_Init+0x314>)
 8000420:	f000 ff08 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000424:	2201      	movs	r2, #1
 8000426:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800042a:	4893      	ldr	r0, [pc, #588]	@ (8000678 <MX_GPIO_Init+0x314>)
 800042c:	f000 ff02 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000436:	4891      	ldr	r0, [pc, #580]	@ (800067c <MX_GPIO_Init+0x318>)
 8000438:	f000 fefc 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2120      	movs	r1, #32
 8000440:	488c      	ldr	r0, [pc, #560]	@ (8000674 <MX_GPIO_Init+0x310>)
 8000442:	f000 fef7 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000446:	2201      	movs	r2, #1
 8000448:	2101      	movs	r1, #1
 800044a:	4889      	ldr	r0, [pc, #548]	@ (8000670 <MX_GPIO_Init+0x30c>)
 800044c:	f000 fef2 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000450:	f240 1315 	movw	r3, #277	@ 0x115
 8000454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000456:	2301      	movs	r3, #1
 8000458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045e:	2300      	movs	r3, #0
 8000460:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000462:	f107 0314 	add.w	r3, r7, #20
 8000466:	4619      	mov	r1, r3
 8000468:	4881      	ldr	r0, [pc, #516]	@ (8000670 <MX_GPIO_Init+0x30c>)
 800046a:	f000 fd21 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800046e:	236a      	movs	r3, #106	@ 0x6a
 8000470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000472:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800047c:	f107 0314 	add.w	r3, r7, #20
 8000480:	4619      	mov	r1, r3
 8000482:	487b      	ldr	r0, [pc, #492]	@ (8000670 <MX_GPIO_Init+0x30c>)
 8000484:	f000 fd14 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000488:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800048c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800048e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000494:	2301      	movs	r3, #1
 8000496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000498:	f107 0314 	add.w	r3, r7, #20
 800049c:	4619      	mov	r1, r3
 800049e:	4877      	ldr	r0, [pc, #476]	@ (800067c <MX_GPIO_Init+0x318>)
 80004a0:	f000 fd06 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80004a4:	233f      	movs	r3, #63	@ 0x3f
 80004a6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80004a8:	230b      	movs	r3, #11
 80004aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b0:	f107 0314 	add.w	r3, r7, #20
 80004b4:	4619      	mov	r1, r3
 80004b6:	4871      	ldr	r0, [pc, #452]	@ (800067c <MX_GPIO_Init+0x318>)
 80004b8:	f000 fcfa 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80004bc:	2303      	movs	r3, #3
 80004be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c0:	2302      	movs	r3, #2
 80004c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004c8:	2303      	movs	r3, #3
 80004ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80004cc:	2308      	movs	r3, #8
 80004ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	f107 0314 	add.w	r3, r7, #20
 80004d4:	4619      	mov	r1, r3
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004da:	f000 fce9 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80004de:	f248 1304 	movw	r3, #33028	@ 0x8104
 80004e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e4:	2301      	movs	r3, #1
 80004e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ec:	2300      	movs	r3, #0
 80004ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	f107 0314 	add.w	r3, r7, #20
 80004f4:	4619      	mov	r1, r3
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004fa:	f000 fcd9 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80004fe:	2308      	movs	r3, #8
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000502:	2302      	movs	r3, #2
 8000504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	2300      	movs	r3, #0
 800050c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800050e:	2301      	movs	r3, #1
 8000510:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	4619      	mov	r1, r3
 8000518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051c:	f000 fcc8 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000520:	2310      	movs	r3, #16
 8000522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000524:	230b      	movs	r3, #11
 8000526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	4619      	mov	r1, r3
 8000532:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000536:	f000 fcbb 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800053a:	23e0      	movs	r3, #224	@ 0xe0
 800053c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053e:	2302      	movs	r3, #2
 8000540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000546:	2303      	movs	r3, #3
 8000548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800054a:	2305      	movs	r3, #5
 800054c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	4619      	mov	r1, r3
 8000554:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000558:	f000 fcaa 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800055c:	2301      	movs	r3, #1
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000560:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	4619      	mov	r1, r3
 8000570:	4840      	ldr	r0, [pc, #256]	@ (8000674 <MX_GPIO_Init+0x310>)
 8000572:	f000 fc9d 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000576:	2302      	movs	r3, #2
 8000578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800057a:	230b      	movs	r3, #11
 800057c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	483a      	ldr	r0, [pc, #232]	@ (8000674 <MX_GPIO_Init+0x310>)
 800058a:	f000 fc91 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800058e:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000592:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	2301      	movs	r3, #1
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4619      	mov	r1, r3
 80005a6:	4833      	ldr	r0, [pc, #204]	@ (8000674 <MX_GPIO_Init+0x310>)
 80005a8:	f000 fc82 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80005ac:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80005b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b2:	2302      	movs	r3, #2
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2300      	movs	r3, #0
 80005bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80005be:	2306      	movs	r3, #6
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	4829      	ldr	r0, [pc, #164]	@ (8000670 <MX_GPIO_Init+0x30c>)
 80005ca:	f000 fc71 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80005ce:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80005d2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d4:	2302      	movs	r3, #2
 80005d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005dc:	2303      	movs	r3, #3
 80005de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80005e0:	230a      	movs	r3, #10
 80005e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4619      	mov	r1, r3
 80005ea:	4821      	ldr	r0, [pc, #132]	@ (8000670 <MX_GPIO_Init+0x30c>)
 80005ec:	f000 fc60 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80005f0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80005f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f6:	2312      	movs	r3, #18
 80005f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fe:	2303      	movs	r3, #3
 8000600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000602:	2304      	movs	r3, #4
 8000604:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	4819      	ldr	r0, [pc, #100]	@ (8000674 <MX_GPIO_Init+0x310>)
 800060e:	f000 fc4f 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000612:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000618:	2302      	movs	r3, #2
 800061a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000624:	2307      	movs	r3, #7
 8000626:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4619      	mov	r1, r3
 800062e:	4812      	ldr	r0, [pc, #72]	@ (8000678 <MX_GPIO_Init+0x314>)
 8000630:	f000 fc3e 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000634:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000638:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800063a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800063e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4619      	mov	r1, r3
 800064a:	480b      	ldr	r0, [pc, #44]	@ (8000678 <MX_GPIO_Init+0x314>)
 800064c:	f000 fc30 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000650:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	e00a      	b.n	8000680 <MX_GPIO_Init+0x31c>
 800066a:	bf00      	nop
 800066c:	40021000 	.word	0x40021000
 8000670:	48001000 	.word	0x48001000
 8000674:	48000400 	.word	0x48000400
 8000678:	48000c00 	.word	0x48000c00
 800067c:	48000800 	.word	0x48000800
 8000680:	4852      	ldr	r0, [pc, #328]	@ (80007cc <MX_GPIO_Init+0x468>)
 8000682:	f000 fc15 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000686:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	484c      	ldr	r0, [pc, #304]	@ (80007d0 <MX_GPIO_Init+0x46c>)
 80006a0:	f000 fc06 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80006a4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	4619      	mov	r1, r3
 80006ba:	4845      	ldr	r0, [pc, #276]	@ (80007d0 <MX_GPIO_Init+0x46c>)
 80006bc:	f000 fbf8 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80006c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d8:	f000 fbea 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80006dc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	2302      	movs	r3, #2
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ea:	2303      	movs	r3, #3
 80006ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006ee:	230a      	movs	r3, #10
 80006f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006fc:	f000 fbd8 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000700:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000712:	2306      	movs	r3, #6
 8000714:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	482c      	ldr	r0, [pc, #176]	@ (80007d0 <MX_GPIO_Init+0x46c>)
 800071e:	f000 fbc7 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000722:	2302      	movs	r3, #2
 8000724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000726:	2302      	movs	r3, #2
 8000728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072e:	2303      	movs	r3, #3
 8000730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000732:	2305      	movs	r3, #5
 8000734:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	4823      	ldr	r0, [pc, #140]	@ (80007cc <MX_GPIO_Init+0x468>)
 800073e:	f000 fbb7 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000742:	2378      	movs	r3, #120	@ 0x78
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000752:	2307      	movs	r3, #7
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	481b      	ldr	r0, [pc, #108]	@ (80007cc <MX_GPIO_Init+0x468>)
 800075e:	f000 fba7 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST_LINK_UART1_TX_Pin ST_LINK_UART1_RX_Pin */
  GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000762:	23c0      	movs	r3, #192	@ 0xc0
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000772:	2307      	movs	r3, #7
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	4815      	ldr	r0, [pc, #84]	@ (80007d4 <MX_GPIO_Init+0x470>)
 800077e:	f000 fb97 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000782:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000788:	2312      	movs	r3, #18
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000790:	2303      	movs	r3, #3
 8000792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000794:	2304      	movs	r3, #4
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	480d      	ldr	r0, [pc, #52]	@ (80007d4 <MX_GPIO_Init+0x470>)
 80007a0:	f000 fb86 	bl	8000eb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2105      	movs	r1, #5
 80007a8:	2017      	movs	r0, #23
 80007aa:	f000 fb4a 	bl	8000e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007ae:	2017      	movs	r0, #23
 80007b0:	f000 fb63 	bl	8000e7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2105      	movs	r1, #5
 80007b8:	2028      	movs	r0, #40	@ 0x28
 80007ba:	f000 fb42 	bl	8000e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007be:	2028      	movs	r0, #40	@ 0x28
 80007c0:	f000 fb5b 	bl	8000e7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c4:	bf00      	nop
 80007c6:	3728      	adds	r7, #40	@ 0x28
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	48000c00 	.word	0x48000c00
 80007d0:	48000800 	.word	0x48000800
 80007d4:	48000400 	.word	0x48000400

080007d8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// user button interrupt callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_pin == GPIO_PIN_13)
 80007e2:	88fb      	ldrh	r3, [r7, #6]
 80007e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007e8:	d119      	bne.n	800081e <HAL_GPIO_EXTI_Callback+0x46>
	{
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80007ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ee:	480e      	ldr	r0, [pc, #56]	@ (8000828 <HAL_GPIO_EXTI_Callback+0x50>)
 80007f0:	f000 fd08 	bl	8001204 <HAL_GPIO_ReadPin>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d10e      	bne.n	8000818 <HAL_GPIO_EXTI_Callback+0x40>
		{
			pressed_time = HAL_GetTick();
 80007fa:	f000 fa3b 	bl	8000c74 <HAL_GetTick>
 80007fe:	4603      	mov	r3, r0
 8000800:	4a0a      	ldr	r2, [pc, #40]	@ (800082c <HAL_GPIO_EXTI_Callback+0x54>)
 8000802:	6013      	str	r3, [r2, #0]
			button_is_pressed = 1;
 8000804:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <HAL_GPIO_EXTI_Callback+0x58>)
 8000806:	2201      	movs	r2, #1
 8000808:	701a      	strb	r2, [r3, #0]
			osThreadFlagsSet(Task_1Handle, 0x0001);
 800080a:	4b0a      	ldr	r3, [pc, #40]	@ (8000834 <HAL_GPIO_EXTI_Callback+0x5c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2101      	movs	r1, #1
 8000810:	4618      	mov	r0, r3
 8000812:	f001 ffbf 	bl	8002794 <osThreadFlagsSet>
		else
		{
			button_is_pressed = 0;
		}
	}
}
 8000816:	e002      	b.n	800081e <HAL_GPIO_EXTI_Callback+0x46>
			button_is_pressed = 0;
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <HAL_GPIO_EXTI_Callback+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	48000800 	.word	0x48000800
 800082c:	20000084 	.word	0x20000084
 8000830:	20000088 	.word	0x20000088
 8000834:	20000078 	.word	0x20000078

08000838 <HAL_TIM_PeriodElapsedCallback>:

// timer interrupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a06      	ldr	r2, [pc, #24]	@ (800085c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d105      	bne.n	8000854 <HAL_TIM_PeriodElapsedCallback+0x1c>
		osThreadFlagsSet(Task_2Handle, 0x0001);
 8000848:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2101      	movs	r1, #1
 800084e:	4618      	mov	r0, r3
 8000850:	f001 ffa0 	bl	8002794 <osThreadFlagsSet>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000002c 	.word	0x2000002c
 8000860:	2000007c 	.word	0x2000007c

08000864 <StartTask_1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask_1 */
void StartTask_1(void *argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    // LED2 blinks at 1 Hz for 5s
	osThreadFlagsWait(0x0001, osFlagsWaitAny, osWaitForever);
 800086c:	f04f 32ff 	mov.w	r2, #4294967295
 8000870:	2100      	movs	r1, #0
 8000872:	2001      	movs	r0, #1
 8000874:	f002 f81a 	bl	80028ac <osThreadFlagsWait>
	uint32_t t;
	while (1) {
		t = HAL_GetTick() - pressed_time;
 8000878:	f000 f9fc 	bl	8000c74 <HAL_GetTick>
 800087c:	4602      	mov	r2, r0
 800087e:	4b31      	ldr	r3, [pc, #196]	@ (8000944 <StartTask_1+0xe0>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	60fb      	str	r3, [r7, #12]
		if (t > 1000 || !button_is_pressed)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800088c:	d807      	bhi.n	800089e <StartTask_1+0x3a>
 800088e:	4b2e      	ldr	r3, [pc, #184]	@ (8000948 <StartTask_1+0xe4>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d003      	beq.n	800089e <StartTask_1+0x3a>
			break;
		osDelay(1);
 8000896:	2001      	movs	r0, #1
 8000898:	f002 f889 	bl	80029ae <osDelay>
		t = HAL_GetTick() - pressed_time;
 800089c:	e7ec      	b.n	8000878 <StartTask_1+0x14>
	}
	osStatus_t mutex_status = osMutexAcquire(LED2_MutexHandle, 0);
 800089e:	4b2b      	ldr	r3, [pc, #172]	@ (800094c <StartTask_1+0xe8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 f923 	bl	8002af0 <osMutexAcquire>
 80008aa:	60b8      	str	r0, [r7, #8]
	if (mutex_status == osOK)
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d143      	bne.n	800093a <StartTask_1+0xd6>
	{
		if (t<1000)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80008b8:	d21c      	bcs.n	80008f4 <StartTask_1+0x90>
		{
			for(int i=0;i<5;i++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	e015      	b.n	80008ec <StartTask_1+0x88>
			{
				HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008c6:	4822      	ldr	r0, [pc, #136]	@ (8000950 <StartTask_1+0xec>)
 80008c8:	f000 fcb4 	bl	8001234 <HAL_GPIO_WritePin>
				osDelay(10);
 80008cc:	200a      	movs	r0, #10
 80008ce:	f002 f86e 	bl	80029ae <osDelay>
				HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008d8:	481d      	ldr	r0, [pc, #116]	@ (8000950 <StartTask_1+0xec>)
 80008da:	f000 fcab 	bl	8001234 <HAL_GPIO_WritePin>
				osDelay(990);
 80008de:	f240 30de 	movw	r0, #990	@ 0x3de
 80008e2:	f002 f864 	bl	80029ae <osDelay>
			for(int i=0;i<5;i++)
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	3301      	adds	r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	dde6      	ble.n	80008c0 <StartTask_1+0x5c>
 80008f2:	e01a      	b.n	800092a <StartTask_1+0xc6>
			}
		}
		else
		{
			for(int i=0;i<50;i++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	e014      	b.n	8000924 <StartTask_1+0xc0>
			{
				HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000900:	4813      	ldr	r0, [pc, #76]	@ (8000950 <StartTask_1+0xec>)
 8000902:	f000 fc97 	bl	8001234 <HAL_GPIO_WritePin>
				osDelay(10);
 8000906:	200a      	movs	r0, #10
 8000908:	f002 f851 	bl	80029ae <osDelay>
				HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000912:	480f      	ldr	r0, [pc, #60]	@ (8000950 <StartTask_1+0xec>)
 8000914:	f000 fc8e 	bl	8001234 <HAL_GPIO_WritePin>
				osDelay(90);
 8000918:	205a      	movs	r0, #90	@ 0x5a
 800091a:	f002 f848 	bl	80029ae <osDelay>
			for(int i=0;i<50;i++)
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	3301      	adds	r3, #1
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	2b31      	cmp	r3, #49	@ 0x31
 8000928:	dde7      	ble.n	80008fa <StartTask_1+0x96>
			}
		}
		osMutexRelease(LED2_MutexHandle);
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <StartTask_1+0xe8>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4618      	mov	r0, r3
 8000930:	f002 f929 	bl	8002b86 <osMutexRelease>
		osThreadFlagsClear(0x0001);
 8000934:	2001      	movs	r0, #1
 8000936:	f001 ff7b 	bl	8002830 <osThreadFlagsClear>
	}
    osDelay(1);
 800093a:	2001      	movs	r0, #1
 800093c:	f002 f837 	bl	80029ae <osDelay>
  {
 8000940:	e794      	b.n	800086c <StartTask_1+0x8>
 8000942:	bf00      	nop
 8000944:	20000084 	.word	0x20000084
 8000948:	20000088 	.word	0x20000088
 800094c:	20000080 	.word	0x20000080
 8000950:	48000400 	.word	0x48000400

08000954 <StartTask_2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_2 */
void StartTask_2(void *argument)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  // LED2 blinks at 10 Hz for 2s
  osStatus_t mutex_status;
  /* Infinite loop */
  for(;;)
  {
    osThreadFlagsWait(0x0001, osFlagsWaitAny, osWaitForever);
 800095c:	f04f 32ff 	mov.w	r2, #4294967295
 8000960:	2100      	movs	r1, #0
 8000962:	2001      	movs	r0, #1
 8000964:	f001 ffa2 	bl	80028ac <osThreadFlagsWait>
	mutex_status = osMutexAcquire(LED2_MutexHandle, 0);
 8000968:	4b16      	ldr	r3, [pc, #88]	@ (80009c4 <StartTask_2+0x70>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f002 f8be 	bl	8002af0 <osMutexAcquire>
 8000974:	60b8      	str	r0, [r7, #8]
	if (mutex_status == osOK)
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d11f      	bne.n	80009bc <StartTask_2+0x68>
	{
		for(int i=0;i<20;i++)
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	e014      	b.n	80009ac <StartTask_2+0x58>
		{
			HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 8000982:	2201      	movs	r2, #1
 8000984:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000988:	480f      	ldr	r0, [pc, #60]	@ (80009c8 <StartTask_2+0x74>)
 800098a:	f000 fc53 	bl	8001234 <HAL_GPIO_WritePin>
			osDelay(10);
 800098e:	200a      	movs	r0, #10
 8000990:	f002 f80d 	bl	80029ae <osDelay>
			HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800099a:	480b      	ldr	r0, [pc, #44]	@ (80009c8 <StartTask_2+0x74>)
 800099c:	f000 fc4a 	bl	8001234 <HAL_GPIO_WritePin>
			osDelay(90);
 80009a0:	205a      	movs	r0, #90	@ 0x5a
 80009a2:	f002 f804 	bl	80029ae <osDelay>
		for(int i=0;i<20;i++)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	3301      	adds	r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2b13      	cmp	r3, #19
 80009b0:	dde7      	ble.n	8000982 <StartTask_2+0x2e>
		}
		osMutexRelease(LED2_MutexHandle);
 80009b2:	4b04      	ldr	r3, [pc, #16]	@ (80009c4 <StartTask_2+0x70>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 f8e5 	bl	8002b86 <osMutexRelease>
	}
    osDelay(1);
 80009bc:	2001      	movs	r0, #1
 80009be:	f001 fff6 	bl	80029ae <osDelay>
    osThreadFlagsWait(0x0001, osFlagsWaitAny, osWaitForever);
 80009c2:	e7cb      	b.n	800095c <StartTask_2+0x8>
 80009c4:	20000080 	.word	0x20000080
 80009c8:	48000400 	.word	0x48000400

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <Error_Handler+0x8>

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <HAL_MspInit+0x4c>)
 80009e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009e2:	4a10      	ldr	r2, [pc, #64]	@ (8000a24 <HAL_MspInit+0x4c>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <HAL_MspInit+0x4c>)
 80009ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <HAL_MspInit+0x4c>)
 80009f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <HAL_MspInit+0x4c>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <HAL_MspInit+0x4c>)
 8000a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	210f      	movs	r1, #15
 8000a12:	f06f 0001 	mvn.w	r0, #1
 8000a16:	f000 fa14 	bl	8000e42 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0d      	ldr	r2, [pc, #52]	@ (8000a6c <HAL_TIM_Base_MspInit+0x44>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d113      	bne.n	8000a62 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <HAL_TIM_Base_MspInit+0x48>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000a70 <HAL_TIM_Base_MspInit+0x48>)
 8000a40:	f043 0310 	orr.w	r3, r3, #16
 8000a44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <HAL_TIM_Base_MspInit+0x48>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4a:	f003 0310 	and.w	r3, r3, #16
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2105      	movs	r1, #5
 8000a56:	2036      	movs	r0, #54	@ 0x36
 8000a58:	f000 f9f3 	bl	8000e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a5c:	2036      	movs	r0, #54	@ 0x36
 8000a5e:	f000 fa0c 	bl	8000e7a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40001000 	.word	0x40001000
 8000a70:	40021000 	.word	0x40021000

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <NMI_Handler+0x4>

08000a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aae:	f000 f8cd 	bl	8000c4c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ab2:	f003 fedd 	bl	8004870 <xTaskGetSchedulerState>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d001      	beq.n	8000ac0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000abc:	f004 ffcc 	bl	8005a58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8000ac8:	2020      	movs	r0, #32
 8000aca:	f000 fbcb 	bl	8001264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8000ace:	2040      	movs	r0, #64	@ 0x40
 8000ad0:	f000 fbc8 	bl	8001264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8000ad4:	2080      	movs	r0, #128	@ 0x80
 8000ad6:	f000 fbc5 	bl	8001264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8000ada:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000ade:	f000 fbc1 	bl	8001264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8000aea:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000aee:	f000 fbb9 	bl	8001264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8000af2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000af6:	f000 fbb5 	bl	8001264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000afa:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000afe:	f000 fbb1 	bl	8001264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8000b02:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000b06:	f000 fbad 	bl	8001264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8000b0a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000b0e:	f000 fba9 	bl	8001264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b1c:	4802      	ldr	r0, [pc, #8]	@ (8000b28 <TIM6_DAC_IRQHandler+0x10>)
 8000b1e:	f001 faad 	bl	800207c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000002c 	.word	0x2000002c

08000b2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	@ (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b54:	f7ff ffea 	bl	8000b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	@ (8000b90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <LoopForever+0xe>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	@ (8000b9c <LoopForever+0x16>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f005 f9f3 	bl	8005f68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b82:	f7ff fb25 	bl	80001d0 <main>

08000b86 <LoopForever>:

LoopForever:
    b LoopForever
 8000b86:	e7fe      	b.n	8000b86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b94:	080060b8 	.word	0x080060b8
  ldr r2, =_sbss
 8000b98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b9c:	20001998 	.word	0x20001998

08000ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC1_2_IRQHandler>

08000ba2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bac:	2003      	movs	r0, #3
 8000bae:	f000 f93d 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb2:	200f      	movs	r0, #15
 8000bb4:	f000 f80e 	bl	8000bd4 <HAL_InitTick>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	71fb      	strb	r3, [r7, #7]
 8000bc2:	e001      	b.n	8000bc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bc4:	f7ff ff08 	bl	80009d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000be0:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <HAL_InitTick+0x6c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d023      	beq.n	8000c30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000be8:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <HAL_InitTick+0x70>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <HAL_InitTick+0x6c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f949 	bl	8000e96 <HAL_SYSTICK_Config>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d10f      	bne.n	8000c2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b0f      	cmp	r3, #15
 8000c0e:	d809      	bhi.n	8000c24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c10:	2200      	movs	r2, #0
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f000 f913 	bl	8000e42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c48 <HAL_InitTick+0x74>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	e007      	b.n	8000c34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	73fb      	strb	r3, [r7, #15]
 8000c28:	e004      	b.n	8000c34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	73fb      	strb	r3, [r7, #15]
 8000c2e:	e001      	b.n	8000c34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_IncTick+0x20>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_IncTick+0x24>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a04      	ldr	r2, [pc, #16]	@ (8000c70 <HAL_IncTick+0x24>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	2000008c 	.word	0x2000008c

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b03      	ldr	r3, [pc, #12]	@ (8000c88 <HAL_GetTick+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	2000008c 	.word	0x2000008c

08000c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cbe:	4a04      	ldr	r2, [pc, #16]	@ (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	60d3      	str	r3, [r2, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd8:	4b04      	ldr	r3, [pc, #16]	@ (8000cec <__NVIC_GetPriorityGrouping+0x18>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	f003 0307 	and.w	r3, r3, #7
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	db0b      	blt.n	8000d1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	f003 021f 	and.w	r2, r3, #31
 8000d08:	4907      	ldr	r1, [pc, #28]	@ (8000d28 <__NVIC_EnableIRQ+0x38>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	095b      	lsrs	r3, r3, #5
 8000d10:	2001      	movs	r0, #1
 8000d12:	fa00 f202 	lsl.w	r2, r0, r2
 8000d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000e100 	.word	0xe000e100

08000d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	db0a      	blt.n	8000d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	490c      	ldr	r1, [pc, #48]	@ (8000d78 <__NVIC_SetPriority+0x4c>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	0112      	lsls	r2, r2, #4
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d54:	e00a      	b.n	8000d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4908      	ldr	r1, [pc, #32]	@ (8000d7c <__NVIC_SetPriority+0x50>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	3b04      	subs	r3, #4
 8000d64:	0112      	lsls	r2, r2, #4
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	440b      	add	r3, r1
 8000d6a:	761a      	strb	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	@ 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2304      	movcs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3304      	adds	r3, #4
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d902      	bls.n	8000db0 <NVIC_EncodePriority+0x30>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3b03      	subs	r3, #3
 8000dae:	e000      	b.n	8000db2 <NVIC_EncodePriority+0x32>
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43d9      	mvns	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	4313      	orrs	r3, r2
         );
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	@ 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000df8:	d301      	bcc.n	8000dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00f      	b.n	8000e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <SysTick_Config+0x40>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e06:	210f      	movs	r1, #15
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f7ff ff8e 	bl	8000d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e10:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <SysTick_Config+0x40>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <SysTick_Config+0x40>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	e000e010 	.word	0xe000e010

08000e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff29 	bl	8000c8c <__NVIC_SetPriorityGrouping>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e54:	f7ff ff3e 	bl	8000cd4 <__NVIC_GetPriorityGrouping>
 8000e58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	6978      	ldr	r0, [r7, #20]
 8000e60:	f7ff ff8e 	bl	8000d80 <NVIC_EncodePriority>
 8000e64:	4602      	mov	r2, r0
 8000e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff5d 	bl	8000d2c <__NVIC_SetPriority>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff31 	bl	8000cf0 <__NVIC_EnableIRQ>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ffa2 	bl	8000de8 <SysTick_Config>
 8000ea4:	4603      	mov	r3, r0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b087      	sub	sp, #28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ebe:	e17f      	b.n	80011c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 8171 	beq.w	80011ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d005      	beq.n	8000ef0 <HAL_GPIO_Init+0x40>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d130      	bne.n	8000f52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68da      	ldr	r2, [r3, #12]
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f26:	2201      	movs	r2, #1
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	091b      	lsrs	r3, r3, #4
 8000f3c:	f003 0201 	and.w	r2, r3, #1
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	d118      	bne.n	8000f90 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f64:	2201      	movs	r2, #1
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	08db      	lsrs	r3, r3, #3
 8000f7a:	f003 0201 	and.w	r2, r3, #1
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	d017      	beq.n	8000fcc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d123      	bne.n	8001020 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	08da      	lsrs	r2, r3, #3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3208      	adds	r2, #8
 8000fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f003 0307 	and.w	r3, r3, #7
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	220f      	movs	r2, #15
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	691a      	ldr	r2, [r3, #16]
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	08da      	lsrs	r2, r3, #3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3208      	adds	r2, #8
 800101a:	6939      	ldr	r1, [r7, #16]
 800101c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0203 	and.w	r2, r3, #3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800105c:	2b00      	cmp	r3, #0
 800105e:	f000 80ac 	beq.w	80011ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	4b5f      	ldr	r3, [pc, #380]	@ (80011e0 <HAL_GPIO_Init+0x330>)
 8001064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001066:	4a5e      	ldr	r2, [pc, #376]	@ (80011e0 <HAL_GPIO_Init+0x330>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6613      	str	r3, [r2, #96]	@ 0x60
 800106e:	4b5c      	ldr	r3, [pc, #368]	@ (80011e0 <HAL_GPIO_Init+0x330>)
 8001070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800107a:	4a5a      	ldr	r2, [pc, #360]	@ (80011e4 <HAL_GPIO_Init+0x334>)
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010a4:	d025      	beq.n	80010f2 <HAL_GPIO_Init+0x242>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4f      	ldr	r2, [pc, #316]	@ (80011e8 <HAL_GPIO_Init+0x338>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d01f      	beq.n	80010ee <HAL_GPIO_Init+0x23e>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4e      	ldr	r2, [pc, #312]	@ (80011ec <HAL_GPIO_Init+0x33c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d019      	beq.n	80010ea <HAL_GPIO_Init+0x23a>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4d      	ldr	r2, [pc, #308]	@ (80011f0 <HAL_GPIO_Init+0x340>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d013      	beq.n	80010e6 <HAL_GPIO_Init+0x236>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4c      	ldr	r2, [pc, #304]	@ (80011f4 <HAL_GPIO_Init+0x344>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d00d      	beq.n	80010e2 <HAL_GPIO_Init+0x232>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4b      	ldr	r2, [pc, #300]	@ (80011f8 <HAL_GPIO_Init+0x348>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d007      	beq.n	80010de <HAL_GPIO_Init+0x22e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4a      	ldr	r2, [pc, #296]	@ (80011fc <HAL_GPIO_Init+0x34c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d101      	bne.n	80010da <HAL_GPIO_Init+0x22a>
 80010d6:	2306      	movs	r3, #6
 80010d8:	e00c      	b.n	80010f4 <HAL_GPIO_Init+0x244>
 80010da:	2307      	movs	r3, #7
 80010dc:	e00a      	b.n	80010f4 <HAL_GPIO_Init+0x244>
 80010de:	2305      	movs	r3, #5
 80010e0:	e008      	b.n	80010f4 <HAL_GPIO_Init+0x244>
 80010e2:	2304      	movs	r3, #4
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x244>
 80010e6:	2303      	movs	r3, #3
 80010e8:	e004      	b.n	80010f4 <HAL_GPIO_Init+0x244>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e002      	b.n	80010f4 <HAL_GPIO_Init+0x244>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <HAL_GPIO_Init+0x244>
 80010f2:	2300      	movs	r3, #0
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	f002 0203 	and.w	r2, r2, #3
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	4093      	lsls	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001104:	4937      	ldr	r1, [pc, #220]	@ (80011e4 <HAL_GPIO_Init+0x334>)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001112:	4b3b      	ldr	r3, [pc, #236]	@ (8001200 <HAL_GPIO_Init+0x350>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001136:	4a32      	ldr	r2, [pc, #200]	@ (8001200 <HAL_GPIO_Init+0x350>)
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800113c:	4b30      	ldr	r3, [pc, #192]	@ (8001200 <HAL_GPIO_Init+0x350>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	43db      	mvns	r3, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001160:	4a27      	ldr	r2, [pc, #156]	@ (8001200 <HAL_GPIO_Init+0x350>)
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001166:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <HAL_GPIO_Init+0x350>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	43db      	mvns	r3, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800118a:	4a1d      	ldr	r2, [pc, #116]	@ (8001200 <HAL_GPIO_Init+0x350>)
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <HAL_GPIO_Init+0x350>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011b4:	4a12      	ldr	r2, [pc, #72]	@ (8001200 <HAL_GPIO_Init+0x350>)
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3301      	adds	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa22 f303 	lsr.w	r3, r2, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f47f ae78 	bne.w	8000ec0 <HAL_GPIO_Init+0x10>
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	371c      	adds	r7, #28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010000 	.word	0x40010000
 80011e8:	48000400 	.word	0x48000400
 80011ec:	48000800 	.word	0x48000800
 80011f0:	48000c00 	.word	0x48000c00
 80011f4:	48001000 	.word	0x48001000
 80011f8:	48001400 	.word	0x48001400
 80011fc:	48001800 	.word	0x48001800
 8001200:	40010400 	.word	0x40010400

08001204 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691a      	ldr	r2, [r3, #16]
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	4013      	ands	r3, r2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d002      	beq.n	8001222 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e001      	b.n	8001226 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
 8001240:	4613      	mov	r3, r2
 8001242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001244:	787b      	ldrb	r3, [r7, #1]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001250:	e002      	b.n	8001258 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800126e:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001270:	695a      	ldr	r2, [r3, #20]
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	4013      	ands	r3, r2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d006      	beq.n	8001288 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800127a:	4a05      	ldr	r2, [pc, #20]	@ (8001290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff faa8 	bl	80007d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40010400 	.word	0x40010400

08001294 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <HAL_PWREx_GetVoltageRange+0x18>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40007000 	.word	0x40007000

080012b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012be:	d130      	bne.n	8001322 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012c0:	4b23      	ldr	r3, [pc, #140]	@ (8001350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012cc:	d038      	beq.n	8001340 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ce:	4b20      	ldr	r3, [pc, #128]	@ (8001350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012de:	4b1d      	ldr	r3, [pc, #116]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2232      	movs	r2, #50	@ 0x32
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	0c9b      	lsrs	r3, r3, #18
 80012f0:	3301      	adds	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012f4:	e002      	b.n	80012fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012fc:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001304:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001308:	d102      	bne.n	8001310 <HAL_PWREx_ControlVoltageScaling+0x60>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f2      	bne.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001310:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001318:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800131c:	d110      	bne.n	8001340 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e00f      	b.n	8001342 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001322:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800132a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800132e:	d007      	beq.n	8001340 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001330:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001338:	4a05      	ldr	r2, [pc, #20]	@ (8001350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800133e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40007000 	.word	0x40007000
 8001354:	20000000 	.word	0x20000000
 8001358:	431bde83 	.word	0x431bde83

0800135c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e3ca      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800136e:	4b97      	ldr	r3, [pc, #604]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
 8001376:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001378:	4b94      	ldr	r3, [pc, #592]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 80e4 	beq.w	8001558 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d007      	beq.n	80013a6 <HAL_RCC_OscConfig+0x4a>
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	2b0c      	cmp	r3, #12
 800139a:	f040 808b 	bne.w	80014b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	f040 8087 	bne.w	80014b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013a6:	4b89      	ldr	r3, [pc, #548]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d005      	beq.n	80013be <HAL_RCC_OscConfig+0x62>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e3a2      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1a      	ldr	r2, [r3, #32]
 80013c2:	4b82      	ldr	r3, [pc, #520]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d004      	beq.n	80013d8 <HAL_RCC_OscConfig+0x7c>
 80013ce:	4b7f      	ldr	r3, [pc, #508]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013d6:	e005      	b.n	80013e4 <HAL_RCC_OscConfig+0x88>
 80013d8:	4b7c      	ldr	r3, [pc, #496]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 80013da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d223      	bcs.n	8001430 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 fd1d 	bl	8001e2c <RCC_SetFlashLatencyFromMSIRange>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e383      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013fc:	4b73      	ldr	r3, [pc, #460]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a72      	ldr	r2, [pc, #456]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 8001402:	f043 0308 	orr.w	r3, r3, #8
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b70      	ldr	r3, [pc, #448]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	496d      	ldr	r1, [pc, #436]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 8001416:	4313      	orrs	r3, r2
 8001418:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800141a:	4b6c      	ldr	r3, [pc, #432]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	4968      	ldr	r1, [pc, #416]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 800142a:	4313      	orrs	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
 800142e:	e025      	b.n	800147c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001430:	4b66      	ldr	r3, [pc, #408]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a65      	ldr	r2, [pc, #404]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 8001436:	f043 0308 	orr.w	r3, r3, #8
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b63      	ldr	r3, [pc, #396]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	4960      	ldr	r1, [pc, #384]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800144e:	4b5f      	ldr	r3, [pc, #380]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	495b      	ldr	r1, [pc, #364]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d109      	bne.n	800147c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fcdd 	bl	8001e2c <RCC_SetFlashLatencyFromMSIRange>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e343      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800147c:	f000 fc4a 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 8001480:	4602      	mov	r2, r0
 8001482:	4b52      	ldr	r3, [pc, #328]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	091b      	lsrs	r3, r3, #4
 8001488:	f003 030f 	and.w	r3, r3, #15
 800148c:	4950      	ldr	r1, [pc, #320]	@ (80015d0 <HAL_RCC_OscConfig+0x274>)
 800148e:	5ccb      	ldrb	r3, [r1, r3]
 8001490:	f003 031f 	and.w	r3, r3, #31
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
 8001498:	4a4e      	ldr	r2, [pc, #312]	@ (80015d4 <HAL_RCC_OscConfig+0x278>)
 800149a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800149c:	4b4e      	ldr	r3, [pc, #312]	@ (80015d8 <HAL_RCC_OscConfig+0x27c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fb97 	bl	8000bd4 <HAL_InitTick>
 80014a6:	4603      	mov	r3, r0
 80014a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d052      	beq.n	8001556 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	e327      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d032      	beq.n	8001522 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014bc:	4b43      	ldr	r3, [pc, #268]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a42      	ldr	r2, [pc, #264]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fbd4 	bl	8000c74 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014d0:	f7ff fbd0 	bl	8000c74 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e310      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014e2:	4b3a      	ldr	r3, [pc, #232]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ee:	4b37      	ldr	r3, [pc, #220]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a36      	ldr	r2, [pc, #216]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 80014f4:	f043 0308 	orr.w	r3, r3, #8
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b34      	ldr	r3, [pc, #208]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	4931      	ldr	r1, [pc, #196]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 8001508:	4313      	orrs	r3, r2
 800150a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800150c:	4b2f      	ldr	r3, [pc, #188]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	492c      	ldr	r1, [pc, #176]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
 8001520:	e01a      	b.n	8001558 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001522:	4b2a      	ldr	r3, [pc, #168]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a29      	ldr	r2, [pc, #164]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800152e:	f7ff fba1 	bl	8000c74 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001536:	f7ff fb9d 	bl	8000c74 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e2dd      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001548:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x1da>
 8001554:	e000      	b.n	8001558 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001556:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b00      	cmp	r3, #0
 8001562:	d074      	beq.n	800164e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2b08      	cmp	r3, #8
 8001568:	d005      	beq.n	8001576 <HAL_RCC_OscConfig+0x21a>
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	2b0c      	cmp	r3, #12
 800156e:	d10e      	bne.n	800158e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2b03      	cmp	r3, #3
 8001574:	d10b      	bne.n	800158e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d064      	beq.n	800164c <HAL_RCC_OscConfig+0x2f0>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d160      	bne.n	800164c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e2ba      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x24a>
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0b      	ldr	r2, [pc, #44]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 800159e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	e026      	b.n	80015f4 <HAL_RCC_OscConfig+0x298>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015ae:	d115      	bne.n	80015dc <HAL_RCC_OscConfig+0x280>
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a05      	ldr	r2, [pc, #20]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 80015b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b03      	ldr	r3, [pc, #12]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a02      	ldr	r2, [pc, #8]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 80015c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	e014      	b.n	80015f4 <HAL_RCC_OscConfig+0x298>
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	08006070 	.word	0x08006070
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000004 	.word	0x20000004
 80015dc:	4ba0      	ldr	r3, [pc, #640]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a9f      	ldr	r2, [pc, #636]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 80015e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b9d      	ldr	r3, [pc, #628]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a9c      	ldr	r2, [pc, #624]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 80015ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d013      	beq.n	8001624 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff fb3a 	bl	8000c74 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001604:	f7ff fb36 	bl	8000c74 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	@ 0x64
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e276      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001616:	4b92      	ldr	r3, [pc, #584]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x2a8>
 8001622:	e014      	b.n	800164e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fb26 	bl	8000c74 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fb22 	bl	8000c74 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	@ 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e262      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800163e:	4b88      	ldr	r3, [pc, #544]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x2d0>
 800164a:	e000      	b.n	800164e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d060      	beq.n	800171c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	2b04      	cmp	r3, #4
 800165e:	d005      	beq.n	800166c <HAL_RCC_OscConfig+0x310>
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b0c      	cmp	r3, #12
 8001664:	d119      	bne.n	800169a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d116      	bne.n	800169a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800166c:	4b7c      	ldr	r3, [pc, #496]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <HAL_RCC_OscConfig+0x328>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e23f      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001684:	4b76      	ldr	r3, [pc, #472]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	061b      	lsls	r3, r3, #24
 8001692:	4973      	ldr	r1, [pc, #460]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001698:	e040      	b.n	800171c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d023      	beq.n	80016ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 80016a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff fae1 	bl	8000c74 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b6:	f7ff fadd 	bl	8000c74 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e21d      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016c8:	4b65      	ldr	r3, [pc, #404]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d4:	4b62      	ldr	r3, [pc, #392]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	061b      	lsls	r3, r3, #24
 80016e2:	495f      	ldr	r1, [pc, #380]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
 80016e8:	e018      	b.n	800171c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 80016f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f6:	f7ff fabd 	bl	8000c74 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fe:	f7ff fab9 	bl	8000c74 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e1f9      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001710:	4b53      	ldr	r3, [pc, #332]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f0      	bne.n	80016fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03c      	beq.n	80017a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d01c      	beq.n	800176a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001730:	4b4b      	ldr	r3, [pc, #300]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 8001732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001736:	4a4a      	ldr	r2, [pc, #296]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001740:	f7ff fa98 	bl	8000c74 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001748:	f7ff fa94 	bl	8000c74 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e1d4      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800175a:	4b41      	ldr	r3, [pc, #260]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 800175c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0ef      	beq.n	8001748 <HAL_RCC_OscConfig+0x3ec>
 8001768:	e01b      	b.n	80017a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800176a:	4b3d      	ldr	r3, [pc, #244]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 800176c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001770:	4a3b      	ldr	r2, [pc, #236]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177a:	f7ff fa7b 	bl	8000c74 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001782:	f7ff fa77 	bl	8000c74 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e1b7      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001794:	4b32      	ldr	r3, [pc, #200]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 8001796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1ef      	bne.n	8001782 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 80a6 	beq.w	80018fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 80017b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10d      	bne.n	80017dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c0:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 80017c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c4:	4a26      	ldr	r2, [pc, #152]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 80017c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80017cc:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017d8:	2301      	movs	r3, #1
 80017da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017dc:	4b21      	ldr	r3, [pc, #132]	@ (8001864 <HAL_RCC_OscConfig+0x508>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d118      	bne.n	800181a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001864 <HAL_RCC_OscConfig+0x508>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001864 <HAL_RCC_OscConfig+0x508>)
 80017ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017f4:	f7ff fa3e 	bl	8000c74 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017fc:	f7ff fa3a 	bl	8000c74 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e17a      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800180e:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <HAL_RCC_OscConfig+0x508>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d108      	bne.n	8001834 <HAL_RCC_OscConfig+0x4d8>
 8001822:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 8001824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001828:	4a0d      	ldr	r2, [pc, #52]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001832:	e029      	b.n	8001888 <HAL_RCC_OscConfig+0x52c>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b05      	cmp	r3, #5
 800183a:	d115      	bne.n	8001868 <HAL_RCC_OscConfig+0x50c>
 800183c:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 800183e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001842:	4a07      	ldr	r2, [pc, #28]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800184c:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 800184e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001852:	4a03      	ldr	r2, [pc, #12]	@ (8001860 <HAL_RCC_OscConfig+0x504>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800185c:	e014      	b.n	8001888 <HAL_RCC_OscConfig+0x52c>
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000
 8001864:	40007000 	.word	0x40007000
 8001868:	4b9c      	ldr	r3, [pc, #624]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 800186a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800186e:	4a9b      	ldr	r2, [pc, #620]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001878:	4b98      	ldr	r3, [pc, #608]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 800187a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800187e:	4a97      	ldr	r2, [pc, #604]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 8001880:	f023 0304 	bic.w	r3, r3, #4
 8001884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d016      	beq.n	80018be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001890:	f7ff f9f0 	bl	8000c74 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001896:	e00a      	b.n	80018ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001898:	f7ff f9ec 	bl	8000c74 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e12a      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ae:	4b8b      	ldr	r3, [pc, #556]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 80018b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0ed      	beq.n	8001898 <HAL_RCC_OscConfig+0x53c>
 80018bc:	e015      	b.n	80018ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018be:	f7ff f9d9 	bl	8000c74 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c4:	e00a      	b.n	80018dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c6:	f7ff f9d5 	bl	8000c74 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e113      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018dc:	4b7f      	ldr	r3, [pc, #508]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 80018de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1ed      	bne.n	80018c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ea:	7ffb      	ldrb	r3, [r7, #31]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d105      	bne.n	80018fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f0:	4b7a      	ldr	r3, [pc, #488]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f4:	4a79      	ldr	r2, [pc, #484]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 80018f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018fa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80fe 	beq.w	8001b02 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190a:	2b02      	cmp	r3, #2
 800190c:	f040 80d0 	bne.w	8001ab0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001910:	4b72      	ldr	r3, [pc, #456]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f003 0203 	and.w	r2, r3, #3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001920:	429a      	cmp	r2, r3
 8001922:	d130      	bne.n	8001986 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	3b01      	subs	r3, #1
 8001930:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d127      	bne.n	8001986 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001940:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d11f      	bne.n	8001986 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001950:	2a07      	cmp	r2, #7
 8001952:	bf14      	ite	ne
 8001954:	2201      	movne	r2, #1
 8001956:	2200      	moveq	r2, #0
 8001958:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800195a:	4293      	cmp	r3, r2
 800195c:	d113      	bne.n	8001986 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001968:	085b      	lsrs	r3, r3, #1
 800196a:	3b01      	subs	r3, #1
 800196c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d109      	bne.n	8001986 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	085b      	lsrs	r3, r3, #1
 800197e:	3b01      	subs	r3, #1
 8001980:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001982:	429a      	cmp	r2, r3
 8001984:	d06e      	beq.n	8001a64 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	2b0c      	cmp	r3, #12
 800198a:	d069      	beq.n	8001a60 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800198c:	4b53      	ldr	r3, [pc, #332]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d105      	bne.n	80019a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001998:	4b50      	ldr	r3, [pc, #320]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0ad      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019a8:	4b4c      	ldr	r3, [pc, #304]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a4b      	ldr	r2, [pc, #300]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 80019ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019b4:	f7ff f95e 	bl	8000c74 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019bc:	f7ff f95a 	bl	8000c74 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e09a      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ce:	4b43      	ldr	r3, [pc, #268]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019da:	4b40      	ldr	r3, [pc, #256]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	4b40      	ldr	r3, [pc, #256]	@ (8001ae0 <HAL_RCC_OscConfig+0x784>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019ea:	3a01      	subs	r2, #1
 80019ec:	0112      	lsls	r2, r2, #4
 80019ee:	4311      	orrs	r1, r2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019f4:	0212      	lsls	r2, r2, #8
 80019f6:	4311      	orrs	r1, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019fc:	0852      	lsrs	r2, r2, #1
 80019fe:	3a01      	subs	r2, #1
 8001a00:	0552      	lsls	r2, r2, #21
 8001a02:	4311      	orrs	r1, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a08:	0852      	lsrs	r2, r2, #1
 8001a0a:	3a01      	subs	r2, #1
 8001a0c:	0652      	lsls	r2, r2, #25
 8001a0e:	4311      	orrs	r1, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a14:	0912      	lsrs	r2, r2, #4
 8001a16:	0452      	lsls	r2, r2, #17
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	4930      	ldr	r1, [pc, #192]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a20:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a2d      	ldr	r2, [pc, #180]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 8001a26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	4a2a      	ldr	r2, [pc, #168]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 8001a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a38:	f7ff f91c 	bl	8000c74 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a40:	f7ff f918 	bl	8000c74 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e058      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a52:	4b22      	ldr	r3, [pc, #136]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a5e:	e050      	b.n	8001b02 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e04f      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a64:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d148      	bne.n	8001b02 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a70:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a19      	ldr	r2, [pc, #100]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 8001a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a7c:	4b17      	ldr	r3, [pc, #92]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4a16      	ldr	r2, [pc, #88]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 8001a82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a88:	f7ff f8f4 	bl	8000c74 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff f8f0 	bl	8000c74 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e030      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x734>
 8001aae:	e028      	b.n	8001b02 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2b0c      	cmp	r3, #12
 8001ab4:	d023      	beq.n	8001afe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a08      	ldr	r2, [pc, #32]	@ (8001adc <HAL_RCC_OscConfig+0x780>)
 8001abc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac2:	f7ff f8d7 	bl	8000c74 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac8:	e00c      	b.n	8001ae4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aca:	f7ff f8d3 	bl	8000c74 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d905      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e013      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae4:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <HAL_RCC_OscConfig+0x7b0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1ec      	bne.n	8001aca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001af0:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <HAL_RCC_OscConfig+0x7b0>)
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	4905      	ldr	r1, [pc, #20]	@ (8001b0c <HAL_RCC_OscConfig+0x7b0>)
 8001af6:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_RCC_OscConfig+0x7b4>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	60cb      	str	r3, [r1, #12]
 8001afc:	e001      	b.n	8001b02 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	feeefffc 	.word	0xfeeefffc

08001b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0e7      	b.n	8001cf8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b28:	4b75      	ldr	r3, [pc, #468]	@ (8001d00 <HAL_RCC_ClockConfig+0x1ec>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d910      	bls.n	8001b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b72      	ldr	r3, [pc, #456]	@ (8001d00 <HAL_RCC_ClockConfig+0x1ec>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 0207 	bic.w	r2, r3, #7
 8001b3e:	4970      	ldr	r1, [pc, #448]	@ (8001d00 <HAL_RCC_ClockConfig+0x1ec>)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b6e      	ldr	r3, [pc, #440]	@ (8001d00 <HAL_RCC_ClockConfig+0x1ec>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0cf      	b.n	8001cf8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d010      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	4b66      	ldr	r3, [pc, #408]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d908      	bls.n	8001b86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b74:	4b63      	ldr	r3, [pc, #396]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f0>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	4960      	ldr	r1, [pc, #384]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f0>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d04c      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9a:	4b5a      	ldr	r3, [pc, #360]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d121      	bne.n	8001bea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e0a6      	b.n	8001cf8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb2:	4b54      	ldr	r3, [pc, #336]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d115      	bne.n	8001bea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e09a      	b.n	8001cf8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bca:	4b4e      	ldr	r3, [pc, #312]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d109      	bne.n	8001bea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e08e      	b.n	8001cf8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bda:	4b4a      	ldr	r3, [pc, #296]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e086      	b.n	8001cf8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bea:	4b46      	ldr	r3, [pc, #280]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f0>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f023 0203 	bic.w	r2, r3, #3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4943      	ldr	r1, [pc, #268]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bfc:	f7ff f83a 	bl	8000c74 <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c04:	f7ff f836 	bl	8000c74 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e06e      	b.n	8001cf8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 020c 	and.w	r2, r3, #12
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d1eb      	bne.n	8001c04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d010      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	4b31      	ldr	r3, [pc, #196]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d208      	bcs.n	8001c5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c48:	4b2e      	ldr	r3, [pc, #184]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	492b      	ldr	r1, [pc, #172]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f0>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c5a:	4b29      	ldr	r3, [pc, #164]	@ (8001d00 <HAL_RCC_ClockConfig+0x1ec>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d210      	bcs.n	8001c8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c68:	4b25      	ldr	r3, [pc, #148]	@ (8001d00 <HAL_RCC_ClockConfig+0x1ec>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f023 0207 	bic.w	r2, r3, #7
 8001c70:	4923      	ldr	r1, [pc, #140]	@ (8001d00 <HAL_RCC_ClockConfig+0x1ec>)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c78:	4b21      	ldr	r3, [pc, #132]	@ (8001d00 <HAL_RCC_ClockConfig+0x1ec>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e036      	b.n	8001cf8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d008      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c96:	4b1b      	ldr	r3, [pc, #108]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f0>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	4918      	ldr	r1, [pc, #96]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d009      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cb4:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4910      	ldr	r1, [pc, #64]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cc8:	f000 f824 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	091b      	lsrs	r3, r3, #4
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	490b      	ldr	r1, [pc, #44]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f4>)
 8001cda:	5ccb      	ldrb	r3, [r1, r3]
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce4:	4a09      	ldr	r2, [pc, #36]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f8>)
 8001ce6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ce8:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <HAL_RCC_ClockConfig+0x1fc>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe ff71 	bl	8000bd4 <HAL_InitTick>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cf6:	7afb      	ldrb	r3, [r7, #11]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40022000 	.word	0x40022000
 8001d04:	40021000 	.word	0x40021000
 8001d08:	08006070 	.word	0x08006070
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	20000004 	.word	0x20000004

08001d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	@ 0x24
 8001d18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d22:	4b3e      	ldr	r3, [pc, #248]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_GetSysClockFreq+0x34>
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2b0c      	cmp	r3, #12
 8001d40:	d121      	bne.n	8001d86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d11e      	bne.n	8001d86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d48:	4b34      	ldr	r3, [pc, #208]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d54:	4b31      	ldr	r3, [pc, #196]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d5a:	0a1b      	lsrs	r3, r3, #8
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	e005      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d64:	4b2d      	ldr	r3, [pc, #180]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d70:	4a2b      	ldr	r2, [pc, #172]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10d      	bne.n	8001d9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d84:	e00a      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d102      	bne.n	8001d92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d8c:	4b25      	ldr	r3, [pc, #148]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d8e:	61bb      	str	r3, [r7, #24]
 8001d90:	e004      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d98:	4b23      	ldr	r3, [pc, #140]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	2b0c      	cmp	r3, #12
 8001da0:	d134      	bne.n	8001e0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001da2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d003      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0xa6>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d003      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0xac>
 8001db8:	e005      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dba:	4b1a      	ldr	r3, [pc, #104]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dbc:	617b      	str	r3, [r7, #20]
      break;
 8001dbe:	e005      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dc0:	4b19      	ldr	r3, [pc, #100]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dc2:	617b      	str	r3, [r7, #20]
      break;
 8001dc4:	e002      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	617b      	str	r3, [r7, #20]
      break;
 8001dca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dcc:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	0a1b      	lsrs	r3, r3, #8
 8001de0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	fb03 f202 	mul.w	r2, r3, r2
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001df2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	0e5b      	lsrs	r3, r3, #25
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e0c:	69bb      	ldr	r3, [r7, #24]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	@ 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	08006080 	.word	0x08006080
 8001e24:	00f42400 	.word	0x00f42400
 8001e28:	007a1200 	.word	0x007a1200

08001e2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e44:	f7ff fa26 	bl	8001294 <HAL_PWREx_GetVoltageRange>
 8001e48:	6178      	str	r0, [r7, #20]
 8001e4a:	e014      	b.n	8001e76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e4c:	4b25      	ldr	r3, [pc, #148]	@ (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e50:	4a24      	ldr	r2, [pc, #144]	@ (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e58:	4b22      	ldr	r3, [pc, #136]	@ (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e64:	f7ff fa16 	bl	8001294 <HAL_PWREx_GetVoltageRange>
 8001e68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e74:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e7c:	d10b      	bne.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b80      	cmp	r3, #128	@ 0x80
 8001e82:	d919      	bls.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e88:	d902      	bls.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	e013      	b.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e90:	2301      	movs	r3, #1
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	e010      	b.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b80      	cmp	r3, #128	@ 0x80
 8001e9a:	d902      	bls.n	8001ea2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	e00a      	b.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b80      	cmp	r3, #128	@ 0x80
 8001ea6:	d102      	bne.n	8001eae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	e004      	b.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b70      	cmp	r3, #112	@ 0x70
 8001eb2:	d101      	bne.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 0207 	bic.w	r2, r3, #7
 8001ec0:	4909      	ldr	r1, [pc, #36]	@ (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ec8:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d001      	beq.n	8001eda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40022000 	.word	0x40022000

08001eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e049      	b.n	8001f92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d106      	bne.n	8001f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7fe fd88 	bl	8000a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3304      	adds	r3, #4
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	f000 f9d6 	bl	80022dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d001      	beq.n	8001fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e04f      	b.n	8002054 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a23      	ldr	r2, [pc, #140]	@ (8002060 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01d      	beq.n	8002012 <HAL_TIM_Base_Start_IT+0x76>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fde:	d018      	beq.n	8002012 <HAL_TIM_Base_Start_IT+0x76>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8002064 <HAL_TIM_Base_Start_IT+0xc8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d013      	beq.n	8002012 <HAL_TIM_Base_Start_IT+0x76>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1e      	ldr	r2, [pc, #120]	@ (8002068 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00e      	beq.n	8002012 <HAL_TIM_Base_Start_IT+0x76>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800206c <HAL_TIM_Base_Start_IT+0xd0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d009      	beq.n	8002012 <HAL_TIM_Base_Start_IT+0x76>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a1b      	ldr	r2, [pc, #108]	@ (8002070 <HAL_TIM_Base_Start_IT+0xd4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d004      	beq.n	8002012 <HAL_TIM_Base_Start_IT+0x76>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a19      	ldr	r2, [pc, #100]	@ (8002074 <HAL_TIM_Base_Start_IT+0xd8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d115      	bne.n	800203e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	4b17      	ldr	r3, [pc, #92]	@ (8002078 <HAL_TIM_Base_Start_IT+0xdc>)
 800201a:	4013      	ands	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2b06      	cmp	r3, #6
 8002022:	d015      	beq.n	8002050 <HAL_TIM_Base_Start_IT+0xb4>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800202a:	d011      	beq.n	8002050 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800203c:	e008      	b.n	8002050 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e000      	b.n	8002052 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002050:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	40012c00 	.word	0x40012c00
 8002064:	40000400 	.word	0x40000400
 8002068:	40000800 	.word	0x40000800
 800206c:	40000c00 	.word	0x40000c00
 8002070:	40013400 	.word	0x40013400
 8002074:	40014000 	.word	0x40014000
 8002078:	00010007 	.word	0x00010007

0800207c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d020      	beq.n	80020e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01b      	beq.n	80020e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0202 	mvn.w	r2, #2
 80020b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f8e9 	bl	800229e <HAL_TIM_IC_CaptureCallback>
 80020cc:	e005      	b.n	80020da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f8db 	bl	800228a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f8ec 	bl	80022b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d020      	beq.n	800212c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01b      	beq.n	800212c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0204 	mvn.w	r2, #4
 80020fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2202      	movs	r2, #2
 8002102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f8c3 	bl	800229e <HAL_TIM_IC_CaptureCallback>
 8002118:	e005      	b.n	8002126 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f8b5 	bl	800228a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f8c6 	bl	80022b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d020      	beq.n	8002178 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01b      	beq.n	8002178 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0208 	mvn.w	r2, #8
 8002148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2204      	movs	r2, #4
 800214e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f89d 	bl	800229e <HAL_TIM_IC_CaptureCallback>
 8002164:	e005      	b.n	8002172 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f88f 	bl	800228a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f8a0 	bl	80022b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b00      	cmp	r3, #0
 8002180:	d020      	beq.n	80021c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	2b00      	cmp	r3, #0
 800218a:	d01b      	beq.n	80021c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0210 	mvn.w	r2, #16
 8002194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2208      	movs	r2, #8
 800219a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f877 	bl	800229e <HAL_TIM_IC_CaptureCallback>
 80021b0:	e005      	b.n	80021be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f869 	bl	800228a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f87a 	bl	80022b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00c      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0201 	mvn.w	r2, #1
 80021e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe fb28 	bl	8000838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d104      	bne.n	80021fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00c      	beq.n	8002216 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002202:	2b00      	cmp	r3, #0
 8002204:	d007      	beq.n	8002216 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800220e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f99b 	bl	800254c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00c      	beq.n	800223a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f993 	bl	8002560 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00c      	beq.n	800225e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800224a:	2b00      	cmp	r3, #0
 800224c:	d007      	beq.n	800225e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f834 	bl	80022c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f003 0320 	and.w	r3, r3, #32
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00c      	beq.n	8002282 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f06f 0220 	mvn.w	r2, #32
 800227a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f95b 	bl	8002538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a46      	ldr	r2, [pc, #280]	@ (8002408 <TIM_Base_SetConfig+0x12c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d013      	beq.n	800231c <TIM_Base_SetConfig+0x40>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022fa:	d00f      	beq.n	800231c <TIM_Base_SetConfig+0x40>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a43      	ldr	r2, [pc, #268]	@ (800240c <TIM_Base_SetConfig+0x130>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d00b      	beq.n	800231c <TIM_Base_SetConfig+0x40>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a42      	ldr	r2, [pc, #264]	@ (8002410 <TIM_Base_SetConfig+0x134>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d007      	beq.n	800231c <TIM_Base_SetConfig+0x40>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a41      	ldr	r2, [pc, #260]	@ (8002414 <TIM_Base_SetConfig+0x138>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d003      	beq.n	800231c <TIM_Base_SetConfig+0x40>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a40      	ldr	r2, [pc, #256]	@ (8002418 <TIM_Base_SetConfig+0x13c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d108      	bne.n	800232e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a35      	ldr	r2, [pc, #212]	@ (8002408 <TIM_Base_SetConfig+0x12c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d01f      	beq.n	8002376 <TIM_Base_SetConfig+0x9a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800233c:	d01b      	beq.n	8002376 <TIM_Base_SetConfig+0x9a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a32      	ldr	r2, [pc, #200]	@ (800240c <TIM_Base_SetConfig+0x130>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d017      	beq.n	8002376 <TIM_Base_SetConfig+0x9a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a31      	ldr	r2, [pc, #196]	@ (8002410 <TIM_Base_SetConfig+0x134>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d013      	beq.n	8002376 <TIM_Base_SetConfig+0x9a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a30      	ldr	r2, [pc, #192]	@ (8002414 <TIM_Base_SetConfig+0x138>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00f      	beq.n	8002376 <TIM_Base_SetConfig+0x9a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a2f      	ldr	r2, [pc, #188]	@ (8002418 <TIM_Base_SetConfig+0x13c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00b      	beq.n	8002376 <TIM_Base_SetConfig+0x9a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a2e      	ldr	r2, [pc, #184]	@ (800241c <TIM_Base_SetConfig+0x140>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d007      	beq.n	8002376 <TIM_Base_SetConfig+0x9a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a2d      	ldr	r2, [pc, #180]	@ (8002420 <TIM_Base_SetConfig+0x144>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d003      	beq.n	8002376 <TIM_Base_SetConfig+0x9a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a2c      	ldr	r2, [pc, #176]	@ (8002424 <TIM_Base_SetConfig+0x148>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d108      	bne.n	8002388 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800237c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	4313      	orrs	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a16      	ldr	r2, [pc, #88]	@ (8002408 <TIM_Base_SetConfig+0x12c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d00f      	beq.n	80023d4 <TIM_Base_SetConfig+0xf8>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a18      	ldr	r2, [pc, #96]	@ (8002418 <TIM_Base_SetConfig+0x13c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d00b      	beq.n	80023d4 <TIM_Base_SetConfig+0xf8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a17      	ldr	r2, [pc, #92]	@ (800241c <TIM_Base_SetConfig+0x140>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d007      	beq.n	80023d4 <TIM_Base_SetConfig+0xf8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a16      	ldr	r2, [pc, #88]	@ (8002420 <TIM_Base_SetConfig+0x144>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d003      	beq.n	80023d4 <TIM_Base_SetConfig+0xf8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a15      	ldr	r2, [pc, #84]	@ (8002424 <TIM_Base_SetConfig+0x148>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d103      	bne.n	80023dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d105      	bne.n	80023fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	f023 0201 	bic.w	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	611a      	str	r2, [r3, #16]
  }
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40012c00 	.word	0x40012c00
 800240c:	40000400 	.word	0x40000400
 8002410:	40000800 	.word	0x40000800
 8002414:	40000c00 	.word	0x40000c00
 8002418:	40013400 	.word	0x40013400
 800241c:	40014000 	.word	0x40014000
 8002420:	40014400 	.word	0x40014400
 8002424:	40014800 	.word	0x40014800

08002428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800243c:	2302      	movs	r3, #2
 800243e:	e068      	b.n	8002512 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a2e      	ldr	r2, [pc, #184]	@ (8002520 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d004      	beq.n	8002474 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a2d      	ldr	r2, [pc, #180]	@ (8002524 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d108      	bne.n	8002486 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800247a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800248c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4313      	orrs	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002520 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d01d      	beq.n	80024e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024b2:	d018      	beq.n	80024e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002528 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d013      	beq.n	80024e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a1a      	ldr	r2, [pc, #104]	@ (800252c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d00e      	beq.n	80024e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a18      	ldr	r2, [pc, #96]	@ (8002530 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d009      	beq.n	80024e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a13      	ldr	r2, [pc, #76]	@ (8002524 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d004      	beq.n	80024e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a14      	ldr	r2, [pc, #80]	@ (8002534 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d10c      	bne.n	8002500 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40012c00 	.word	0x40012c00
 8002524:	40013400 	.word	0x40013400
 8002528:	40000400 	.word	0x40000400
 800252c:	40000800 	.word	0x40000800
 8002530:	40000c00 	.word	0x40000c00
 8002534:	40014000 	.word	0x40014000

08002538 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <__NVIC_SetPriority>:
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	6039      	str	r1, [r7, #0]
 800257e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	2b00      	cmp	r3, #0
 8002586:	db0a      	blt.n	800259e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	490c      	ldr	r1, [pc, #48]	@ (80025c0 <__NVIC_SetPriority+0x4c>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	0112      	lsls	r2, r2, #4
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	440b      	add	r3, r1
 8002598:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800259c:	e00a      	b.n	80025b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4908      	ldr	r1, [pc, #32]	@ (80025c4 <__NVIC_SetPriority+0x50>)
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3b04      	subs	r3, #4
 80025ac:	0112      	lsls	r2, r2, #4
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	440b      	add	r3, r1
 80025b2:	761a      	strb	r2, [r3, #24]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000e100 	.word	0xe000e100
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80025cc:	2100      	movs	r1, #0
 80025ce:	f06f 0004 	mvn.w	r0, #4
 80025d2:	f7ff ffcf 	bl	8002574 <__NVIC_SetPriority>
#endif
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025e2:	f3ef 8305 	mrs	r3, IPSR
 80025e6:	603b      	str	r3, [r7, #0]
  return(result);
 80025e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80025ee:	f06f 0305 	mvn.w	r3, #5
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	e00c      	b.n	8002610 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80025f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002620 <osKernelInitialize+0x44>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d105      	bne.n	800260a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80025fe:	4b08      	ldr	r3, [pc, #32]	@ (8002620 <osKernelInitialize+0x44>)
 8002600:	2201      	movs	r2, #1
 8002602:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002604:	2300      	movs	r3, #0
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	e002      	b.n	8002610 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
 800260e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002610:	687b      	ldr	r3, [r7, #4]
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	20000090 	.word	0x20000090

08002624 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800262a:	f3ef 8305 	mrs	r3, IPSR
 800262e:	603b      	str	r3, [r7, #0]
  return(result);
 8002630:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002636:	f06f 0305 	mvn.w	r3, #5
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	e010      	b.n	8002660 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800263e:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <osKernelStart+0x48>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d109      	bne.n	800265a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002646:	f7ff ffbf 	bl	80025c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800264a:	4b08      	ldr	r3, [pc, #32]	@ (800266c <osKernelStart+0x48>)
 800264c:	2202      	movs	r2, #2
 800264e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002650:	f001 fcb0 	bl	8003fb4 <vTaskStartScheduler>
      stat = osOK;
 8002654:	2300      	movs	r3, #0
 8002656:	607b      	str	r3, [r7, #4]
 8002658:	e002      	b.n	8002660 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800265a:	f04f 33ff 	mov.w	r3, #4294967295
 800265e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002660:	687b      	ldr	r3, [r7, #4]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000090 	.word	0x20000090

08002670 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b08e      	sub	sp, #56	@ 0x38
 8002674:	af04      	add	r7, sp, #16
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800267c:	2300      	movs	r3, #0
 800267e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002680:	f3ef 8305 	mrs	r3, IPSR
 8002684:	617b      	str	r3, [r7, #20]
  return(result);
 8002686:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002688:	2b00      	cmp	r3, #0
 800268a:	d17e      	bne.n	800278a <osThreadNew+0x11a>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d07b      	beq.n	800278a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002692:	2380      	movs	r3, #128	@ 0x80
 8002694:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002696:	2318      	movs	r3, #24
 8002698:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800269a:	2300      	movs	r3, #0
 800269c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
 80026a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d045      	beq.n	8002736 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <osThreadNew+0x48>
        name = attr->name;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <osThreadNew+0x6e>
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	2b38      	cmp	r3, #56	@ 0x38
 80026d0:	d805      	bhi.n	80026de <osThreadNew+0x6e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <osThreadNew+0x72>
        return (NULL);
 80026de:	2300      	movs	r3, #0
 80026e0:	e054      	b.n	800278c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	089b      	lsrs	r3, r3, #2
 80026f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00e      	beq.n	8002718 <osThreadNew+0xa8>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b5b      	cmp	r3, #91	@ 0x5b
 8002700:	d90a      	bls.n	8002718 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002706:	2b00      	cmp	r3, #0
 8002708:	d006      	beq.n	8002718 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <osThreadNew+0xa8>
        mem = 1;
 8002712:	2301      	movs	r3, #1
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	e010      	b.n	800273a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10c      	bne.n	800273a <osThreadNew+0xca>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d108      	bne.n	800273a <osThreadNew+0xca>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d104      	bne.n	800273a <osThreadNew+0xca>
          mem = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	e001      	b.n	800273a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d110      	bne.n	8002762 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002748:	9202      	str	r2, [sp, #8]
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	6a3a      	ldr	r2, [r7, #32]
 8002754:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f001 fa50 	bl	8003bfc <xTaskCreateStatic>
 800275c:	4603      	mov	r3, r0
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	e013      	b.n	800278a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d110      	bne.n	800278a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	b29a      	uxth	r2, r3
 800276c:	f107 0310 	add.w	r3, r7, #16
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f001 fa9e 	bl	8003cbc <xTaskCreate>
 8002780:	4603      	mov	r3, r0
 8002782:	2b01      	cmp	r3, #1
 8002784:	d001      	beq.n	800278a <osThreadNew+0x11a>
            hTask = NULL;
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800278a:	693b      	ldr	r3, [r7, #16]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3728      	adds	r7, #40	@ 0x28
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af02      	add	r7, sp, #8
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <osThreadFlagsSet+0x1a>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	da03      	bge.n	80027b6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80027ae:	f06f 0303 	mvn.w	r3, #3
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e035      	b.n	8002822 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027bc:	f3ef 8305 	mrs	r3, IPSR
 80027c0:	613b      	str	r3, [r7, #16]
  return(result);
 80027c2:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d01f      	beq.n	8002808 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80027cc:	f107 0308 	add.w	r3, r7, #8
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	2300      	movs	r3, #0
 80027d4:	2201      	movs	r2, #1
 80027d6:	6839      	ldr	r1, [r7, #0]
 80027d8:	6978      	ldr	r0, [r7, #20]
 80027da:	f002 faeb 	bl	8004db4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80027de:	f107 030c 	add.w	r3, r7, #12
 80027e2:	2200      	movs	r2, #0
 80027e4:	9200      	str	r2, [sp, #0]
 80027e6:	2200      	movs	r2, #0
 80027e8:	2100      	movs	r1, #0
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f002 fae2 	bl	8004db4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d015      	beq.n	8002822 <osThreadFlagsSet+0x8e>
 80027f6:	4b0d      	ldr	r3, [pc, #52]	@ (800282c <osThreadFlagsSet+0x98>)
 80027f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	f3bf 8f4f 	dsb	sy
 8002802:	f3bf 8f6f 	isb	sy
 8002806:	e00c      	b.n	8002822 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8002808:	2300      	movs	r3, #0
 800280a:	2201      	movs	r2, #1
 800280c:	6839      	ldr	r1, [r7, #0]
 800280e:	6978      	ldr	r0, [r7, #20]
 8002810:	f002 fa16 	bl	8004c40 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8002814:	f107 030c 	add.w	r3, r7, #12
 8002818:	2200      	movs	r2, #0
 800281a:	2100      	movs	r1, #0
 800281c:	6978      	ldr	r0, [r7, #20]
 800281e:	f002 fa0f 	bl	8004c40 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8002822:	68fb      	ldr	r3, [r7, #12]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	e000ed04 	.word	0xe000ed04

08002830 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002838:	f3ef 8305 	mrs	r3, IPSR
 800283c:	60fb      	str	r3, [r7, #12]
  return(result);
 800283e:	68fb      	ldr	r3, [r7, #12]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <osThreadFlagsClear+0x1c>
    rflags = (uint32_t)osErrorISR;
 8002844:	f06f 0305 	mvn.w	r3, #5
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e02a      	b.n	80028a2 <osThreadFlagsClear+0x72>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	da03      	bge.n	800285a <osThreadFlagsClear+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8002852:	f06f 0303 	mvn.w	r3, #3
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	e023      	b.n	80028a2 <osThreadFlagsClear+0x72>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800285a:	f001 fff9 	bl	8004850 <xTaskGetCurrentTaskHandle>
 800285e:	6138      	str	r0, [r7, #16]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 8002860:	f107 0308 	add.w	r3, r7, #8
 8002864:	2200      	movs	r2, #0
 8002866:	2100      	movs	r1, #0
 8002868:	6938      	ldr	r0, [r7, #16]
 800286a:	f002 f9e9 	bl	8004c40 <xTaskGenericNotify>
 800286e:	4603      	mov	r3, r0
 8002870:	2b01      	cmp	r3, #1
 8002872:	d113      	bne.n	800289c <osThreadFlagsClear+0x6c>
      rflags = cflags;
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	617b      	str	r3, [r7, #20]
      cflags &= ~flags;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	43da      	mvns	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4013      	ands	r3, r2
 8002880:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	2300      	movs	r3, #0
 8002886:	2203      	movs	r2, #3
 8002888:	6938      	ldr	r0, [r7, #16]
 800288a:	f002 f9d9 	bl	8004c40 <xTaskGenericNotify>
 800288e:	4603      	mov	r3, r0
 8002890:	2b01      	cmp	r3, #1
 8002892:	d006      	beq.n	80028a2 <osThreadFlagsClear+0x72>
        rflags = (uint32_t)osError;
 8002894:	f04f 33ff 	mov.w	r3, #4294967295
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	e002      	b.n	80028a2 <osThreadFlagsClear+0x72>
      }
    }
    else {
      rflags = (uint32_t)osError;
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
 80028a0:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 80028a2:	697b      	ldr	r3, [r7, #20]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08c      	sub	sp, #48	@ 0x30
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028b8:	f3ef 8305 	mrs	r3, IPSR
 80028bc:	617b      	str	r3, [r7, #20]
  return(result);
 80028be:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80028c4:	f06f 0305 	mvn.w	r3, #5
 80028c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028ca:	e06b      	b.n	80029a4 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	da03      	bge.n	80028da <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80028d2:	f06f 0303 	mvn.w	r3, #3
 80028d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028d8:	e064      	b.n	80029a4 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <osThreadFlagsWait+0x3e>
      clear = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028e8:	e001      	b.n	80028ee <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 80028f6:	f001 fc71 	bl	80041dc <xTaskGetTickCount>
 80028fa:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80028fc:	f107 0210 	add.w	r2, r7, #16
 8002900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002902:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002904:	2000      	movs	r0, #0
 8002906:	f002 f941 	bl	8004b8c <xTaskNotifyWait>
 800290a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d137      	bne.n	8002982 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8002912:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4013      	ands	r3, r2
 8002918:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800291e:	4313      	orrs	r3, r2
 8002920:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00c      	beq.n	8002946 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002930:	4013      	ands	r3, r2
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	429a      	cmp	r2, r3
 8002936:	d032      	beq.n	800299e <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10f      	bne.n	800295e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800293e:	f06f 0302 	mvn.w	r3, #2
 8002942:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8002944:	e02e      	b.n	80029a4 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d128      	bne.n	80029a2 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8002956:	f06f 0302 	mvn.w	r3, #2
 800295a:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800295c:	e022      	b.n	80029a4 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800295e:	f001 fc3d 	bl	80041dc <xTaskGetTickCount>
 8002962:	4602      	mov	r2, r0
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	429a      	cmp	r2, r3
 8002970:	d902      	bls.n	8002978 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	627b      	str	r3, [r7, #36]	@ 0x24
 8002976:	e00e      	b.n	8002996 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8002978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002980:	e009      	b.n	8002996 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d103      	bne.n	8002990 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8002988:	f06f 0302 	mvn.w	r3, #2
 800298c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800298e:	e002      	b.n	8002996 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8002990:	f06f 0301 	mvn.w	r3, #1
 8002994:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1af      	bne.n	80028fc <osThreadFlagsWait+0x50>
 800299c:	e002      	b.n	80029a4 <osThreadFlagsWait+0xf8>
            break;
 800299e:	bf00      	nop
 80029a0:	e000      	b.n	80029a4 <osThreadFlagsWait+0xf8>
            break;
 80029a2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80029a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3730      	adds	r7, #48	@ 0x30
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029b6:	f3ef 8305 	mrs	r3, IPSR
 80029ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80029bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <osDelay+0x1c>
    stat = osErrorISR;
 80029c2:	f06f 0305 	mvn.w	r3, #5
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	e007      	b.n	80029da <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <osDelay+0x2c>
      vTaskDelay(ticks);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f001 fab7 	bl	8003f48 <vTaskDelay>
    }
  }

  return (stat);
 80029da:	68fb      	ldr	r3, [r7, #12]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029f0:	f3ef 8305 	mrs	r3, IPSR
 80029f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80029f6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d174      	bne.n	8002ae6 <osMutexNew+0x102>
    if (attr != NULL) {
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <osMutexNew+0x26>
      type = attr->attr_bits;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	61bb      	str	r3, [r7, #24]
 8002a08:	e001      	b.n	8002a0e <osMutexNew+0x2a>
    } else {
      type = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <osMutexNew+0x3a>
      rmtx = 1U;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	e001      	b.n	8002a22 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d15c      	bne.n	8002ae6 <osMutexNew+0x102>
      mem = -1;
 8002a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a30:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d015      	beq.n	8002a64 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d006      	beq.n	8002a4e <osMutexNew+0x6a>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b4f      	cmp	r3, #79	@ 0x4f
 8002a46:	d902      	bls.n	8002a4e <osMutexNew+0x6a>
          mem = 1;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	e00c      	b.n	8002a68 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d108      	bne.n	8002a68 <osMutexNew+0x84>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d104      	bne.n	8002a68 <osMutexNew+0x84>
            mem = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	e001      	b.n	8002a68 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d112      	bne.n	8002a94 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	2004      	movs	r0, #4
 8002a7c:	f000 fb1f 	bl	80030be <xQueueCreateMutexStatic>
 8002a80:	61f8      	str	r0, [r7, #28]
 8002a82:	e016      	b.n	8002ab2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f000 fb17 	bl	80030be <xQueueCreateMutexStatic>
 8002a90:	61f8      	str	r0, [r7, #28]
 8002a92:	e00e      	b.n	8002ab2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10b      	bne.n	8002ab2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d004      	beq.n	8002aaa <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8002aa0:	2004      	movs	r0, #4
 8002aa2:	f000 faf4 	bl	800308e <xQueueCreateMutex>
 8002aa6:	61f8      	str	r0, [r7, #28]
 8002aa8:	e003      	b.n	8002ab2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8002aaa:	2001      	movs	r0, #1
 8002aac:	f000 faef 	bl	800308e <xQueueCreateMutex>
 8002ab0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00c      	beq.n	8002ad2 <osMutexNew+0xee>
        if (attr != NULL) {
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <osMutexNew+0xe2>
          name = attr->name;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	e001      	b.n	8002aca <osMutexNew+0xe6>
        } else {
          name = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8002aca:	68f9      	ldr	r1, [r7, #12]
 8002acc:	69f8      	ldr	r0, [r7, #28]
 8002ace:	f001 f837 	bl	8003b40 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d006      	beq.n	8002ae6 <osMutexNew+0x102>
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002ae6:	69fb      	ldr	r3, [r7, #28]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3720      	adds	r7, #32
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b0e:	f3ef 8305 	mrs	r3, IPSR
 8002b12:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b14:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8002b1a:	f06f 0305 	mvn.w	r3, #5
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	e02c      	b.n	8002b7c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d103      	bne.n	8002b30 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8002b28:	f06f 0303 	mvn.w	r3, #3
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	e025      	b.n	8002b7c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d011      	beq.n	8002b5a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002b36:	6839      	ldr	r1, [r7, #0]
 8002b38:	6938      	ldr	r0, [r7, #16]
 8002b3a:	f000 fb10 	bl	800315e <xQueueTakeMutexRecursive>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d01b      	beq.n	8002b7c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8002b4a:	f06f 0301 	mvn.w	r3, #1
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	e014      	b.n	8002b7c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002b52:	f06f 0302 	mvn.w	r3, #2
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	e010      	b.n	8002b7c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8002b5a:	6839      	ldr	r1, [r7, #0]
 8002b5c:	6938      	ldr	r0, [r7, #16]
 8002b5e:	f000 fdb7 	bl	80036d0 <xQueueSemaphoreTake>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d009      	beq.n	8002b7c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8002b6e:	f06f 0301 	mvn.w	r3, #1
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	e002      	b.n	8002b7c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002b76:	f06f 0302 	mvn.w	r3, #2
 8002b7a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8002b7c:	697b      	ldr	r3, [r7, #20]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b086      	sub	sp, #24
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ba2:	f3ef 8305 	mrs	r3, IPSR
 8002ba6:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ba8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <osMutexRelease+0x30>
    stat = osErrorISR;
 8002bae:	f06f 0305 	mvn.w	r3, #5
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	e01f      	b.n	8002bf6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d103      	bne.n	8002bc4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8002bbc:	f06f 0303 	mvn.w	r3, #3
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	e018      	b.n	8002bf6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8002bca:	6938      	ldr	r0, [r7, #16]
 8002bcc:	f000 fa92 	bl	80030f4 <xQueueGiveMutexRecursive>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d00f      	beq.n	8002bf6 <osMutexRelease+0x70>
        stat = osErrorResource;
 8002bd6:	f06f 0302 	mvn.w	r3, #2
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	e00b      	b.n	8002bf6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8002bde:	2300      	movs	r3, #0
 8002be0:	2200      	movs	r2, #0
 8002be2:	2100      	movs	r1, #0
 8002be4:	6938      	ldr	r0, [r7, #16]
 8002be6:	f000 faf1 	bl	80031cc <xQueueGenericSend>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d002      	beq.n	8002bf6 <osMutexRelease+0x70>
        stat = osErrorResource;
 8002bf0:	f06f 0302 	mvn.w	r3, #2
 8002bf4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002bf6:	697b      	ldr	r3, [r7, #20]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a07      	ldr	r2, [pc, #28]	@ (8002c2c <vApplicationGetIdleTaskMemory+0x2c>)
 8002c10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4a06      	ldr	r2, [pc, #24]	@ (8002c30 <vApplicationGetIdleTaskMemory+0x30>)
 8002c16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2280      	movs	r2, #128	@ 0x80
 8002c1c:	601a      	str	r2, [r3, #0]
}
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	20000094 	.word	0x20000094
 8002c30:	200000f0 	.word	0x200000f0

08002c34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4a07      	ldr	r2, [pc, #28]	@ (8002c60 <vApplicationGetTimerTaskMemory+0x2c>)
 8002c44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4a06      	ldr	r2, [pc, #24]	@ (8002c64 <vApplicationGetTimerTaskMemory+0x30>)
 8002c4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c52:	601a      	str	r2, [r3, #0]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	200002f0 	.word	0x200002f0
 8002c64:	2000034c 	.word	0x2000034c

08002c68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f103 0208 	add.w	r2, r3, #8
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f103 0208 	add.w	r2, r3, #8
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f103 0208 	add.w	r2, r3, #8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b085      	sub	sp, #20
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	601a      	str	r2, [r3, #0]
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b085      	sub	sp, #20
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d20:	d103      	bne.n	8002d2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	e00c      	b.n	8002d44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3308      	adds	r3, #8
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	e002      	b.n	8002d38 <vListInsert+0x2e>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d2f6      	bcs.n	8002d32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	601a      	str	r2, [r3, #0]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6892      	ldr	r2, [r2, #8]
 8002d92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6852      	ldr	r2, [r2, #4]
 8002d9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d103      	bne.n	8002db0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	1e5a      	subs	r2, r3, #1
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10b      	bne.n	8002dfc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002df6:	bf00      	nop
 8002df8:	bf00      	nop
 8002dfa:	e7fd      	b.n	8002df8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002dfc:	f002 fd9c 	bl	8005938 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e08:	68f9      	ldr	r1, [r7, #12]
 8002e0a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	441a      	add	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	68f9      	ldr	r1, [r7, #12]
 8002e30:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	441a      	add	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	22ff      	movs	r2, #255	@ 0xff
 8002e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	22ff      	movs	r2, #255	@ 0xff
 8002e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d114      	bne.n	8002e7c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01a      	beq.n	8002e90 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	3310      	adds	r3, #16
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f001 fb36 	bl	80044d0 <xTaskRemoveFromEventList>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d012      	beq.n	8002e90 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea0 <xQueueGenericReset+0xd0>)
 8002e6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	e009      	b.n	8002e90 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3310      	adds	r3, #16
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fef1 	bl	8002c68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3324      	adds	r3, #36	@ 0x24
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff feec 	bl	8002c68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e90:	f002 fd84 	bl	800599c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e94:	2301      	movs	r3, #1
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	e000ed04 	.word	0xe000ed04

08002ea4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08e      	sub	sp, #56	@ 0x38
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10b      	bne.n	8002ed0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002eca:	bf00      	nop
 8002ecc:	bf00      	nop
 8002ece:	e7fd      	b.n	8002ecc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10b      	bne.n	8002eee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	e7fd      	b.n	8002eea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <xQueueGenericCreateStatic+0x56>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <xQueueGenericCreateStatic+0x5a>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <xQueueGenericCreateStatic+0x5c>
 8002efe:	2300      	movs	r3, #0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10b      	bne.n	8002f1c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	623b      	str	r3, [r7, #32]
}
 8002f16:	bf00      	nop
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d102      	bne.n	8002f28 <xQueueGenericCreateStatic+0x84>
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <xQueueGenericCreateStatic+0x88>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <xQueueGenericCreateStatic+0x8a>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10b      	bne.n	8002f4a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	61fb      	str	r3, [r7, #28]
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	e7fd      	b.n	8002f46 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f4a:	2350      	movs	r3, #80	@ 0x50
 8002f4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b50      	cmp	r3, #80	@ 0x50
 8002f52:	d00b      	beq.n	8002f6c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	61bb      	str	r3, [r7, #24]
}
 8002f66:	bf00      	nop
 8002f68:	bf00      	nop
 8002f6a:	e7fd      	b.n	8002f68 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f6c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00d      	beq.n	8002f94 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f80:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f840 	bl	8003014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3730      	adds	r7, #48	@ 0x30
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b08a      	sub	sp, #40	@ 0x28
 8002fa2:	af02      	add	r7, sp, #8
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10b      	bne.n	8002fca <xQueueGenericCreate+0x2c>
	__asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	613b      	str	r3, [r7, #16]
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	e7fd      	b.n	8002fc6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	3350      	adds	r3, #80	@ 0x50
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f002 fdcf 	bl	8005b7c <pvPortMalloc>
 8002fde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d011      	beq.n	800300a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	3350      	adds	r3, #80	@ 0x50
 8002fee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ff8:	79fa      	ldrb	r2, [r7, #7]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	4613      	mov	r3, r2
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f805 	bl	8003014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800300a:	69bb      	ldr	r3, [r7, #24]
	}
 800300c:	4618      	mov	r0, r3
 800300e:	3720      	adds	r7, #32
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d103      	bne.n	8003030 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	e002      	b.n	8003036 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003042:	2101      	movs	r1, #1
 8003044:	69b8      	ldr	r0, [r7, #24]
 8003046:	f7ff fec3 	bl	8002dd0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00e      	beq.n	8003086 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800307a:	2300      	movs	r3, #0
 800307c:	2200      	movs	r2, #0
 800307e:	2100      	movs	r1, #0
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f8a3 	bl	80031cc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af00      	add	r7, sp, #0
 8003094:	4603      	mov	r3, r0
 8003096:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003098:	2301      	movs	r3, #1
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	2300      	movs	r3, #0
 800309e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	461a      	mov	r2, r3
 80030a4:	6939      	ldr	r1, [r7, #16]
 80030a6:	6978      	ldr	r0, [r7, #20]
 80030a8:	f7ff ff79 	bl	8002f9e <xQueueGenericCreate>
 80030ac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f7ff ffd3 	bl	800305a <prvInitialiseMutex>

		return xNewQueue;
 80030b4:	68fb      	ldr	r3, [r7, #12]
	}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b088      	sub	sp, #32
 80030c2:	af02      	add	r7, sp, #8
 80030c4:	4603      	mov	r3, r0
 80030c6:	6039      	str	r1, [r7, #0]
 80030c8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80030ca:	2301      	movs	r3, #1
 80030cc:	617b      	str	r3, [r7, #20]
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2200      	movs	r2, #0
 80030da:	6939      	ldr	r1, [r7, #16]
 80030dc:	6978      	ldr	r0, [r7, #20]
 80030de:	f7ff fee1 	bl	8002ea4 <xQueueGenericCreateStatic>
 80030e2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f7ff ffb8 	bl	800305a <prvInitialiseMutex>

		return xNewQueue;
 80030ea:	68fb      	ldr	r3, [r7, #12]
	}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10b      	bne.n	800311e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	60fb      	str	r3, [r7, #12]
}
 8003118:	bf00      	nop
 800311a:	bf00      	nop
 800311c:	e7fd      	b.n	800311a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	689c      	ldr	r4, [r3, #8]
 8003122:	f001 fb95 	bl	8004850 <xTaskGetCurrentTaskHandle>
 8003126:	4603      	mov	r3, r0
 8003128:	429c      	cmp	r4, r3
 800312a:	d111      	bne.n	8003150 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	1e5a      	subs	r2, r3, #1
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d105      	bne.n	800314a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800313e:	2300      	movs	r3, #0
 8003140:	2200      	movs	r2, #0
 8003142:	2100      	movs	r1, #0
 8003144:	6938      	ldr	r0, [r7, #16]
 8003146:	f000 f841 	bl	80031cc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800314a:	2301      	movs	r3, #1
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	e001      	b.n	8003154 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8003154:	697b      	ldr	r3, [r7, #20]
	}
 8003156:	4618      	mov	r0, r3
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd90      	pop	{r4, r7, pc}

0800315e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800315e:	b590      	push	{r4, r7, lr}
 8003160:	b087      	sub	sp, #28
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10b      	bne.n	800318a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8003172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003176:	f383 8811 	msr	BASEPRI, r3
 800317a:	f3bf 8f6f 	isb	sy
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	60fb      	str	r3, [r7, #12]
}
 8003184:	bf00      	nop
 8003186:	bf00      	nop
 8003188:	e7fd      	b.n	8003186 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	689c      	ldr	r4, [r3, #8]
 800318e:	f001 fb5f 	bl	8004850 <xTaskGetCurrentTaskHandle>
 8003192:	4603      	mov	r3, r0
 8003194:	429c      	cmp	r4, r3
 8003196:	d107      	bne.n	80031a8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80031a2:	2301      	movs	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	e00c      	b.n	80031c2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80031a8:	6839      	ldr	r1, [r7, #0]
 80031aa:	6938      	ldr	r0, [r7, #16]
 80031ac:	f000 fa90 	bl	80036d0 <xQueueSemaphoreTake>
 80031b0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d004      	beq.n	80031c2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80031c2:	697b      	ldr	r3, [r7, #20]
	}
 80031c4:	4618      	mov	r0, r3
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd90      	pop	{r4, r7, pc}

080031cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08e      	sub	sp, #56	@ 0x38
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80031da:	2300      	movs	r3, #0
 80031dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80031e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10b      	bne.n	8003200 <xQueueGenericSend+0x34>
	__asm volatile
 80031e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80031fa:	bf00      	nop
 80031fc:	bf00      	nop
 80031fe:	e7fd      	b.n	80031fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d103      	bne.n	800320e <xQueueGenericSend+0x42>
 8003206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <xQueueGenericSend+0x46>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <xQueueGenericSend+0x48>
 8003212:	2300      	movs	r3, #0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10b      	bne.n	8003230 <xQueueGenericSend+0x64>
	__asm volatile
 8003218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800322a:	bf00      	nop
 800322c:	bf00      	nop
 800322e:	e7fd      	b.n	800322c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d103      	bne.n	800323e <xQueueGenericSend+0x72>
 8003236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <xQueueGenericSend+0x76>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <xQueueGenericSend+0x78>
 8003242:	2300      	movs	r3, #0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10b      	bne.n	8003260 <xQueueGenericSend+0x94>
	__asm volatile
 8003248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	623b      	str	r3, [r7, #32]
}
 800325a:	bf00      	nop
 800325c:	bf00      	nop
 800325e:	e7fd      	b.n	800325c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003260:	f001 fb06 	bl	8004870 <xTaskGetSchedulerState>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d102      	bne.n	8003270 <xQueueGenericSend+0xa4>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <xQueueGenericSend+0xa8>
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <xQueueGenericSend+0xaa>
 8003274:	2300      	movs	r3, #0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10b      	bne.n	8003292 <xQueueGenericSend+0xc6>
	__asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	61fb      	str	r3, [r7, #28]
}
 800328c:	bf00      	nop
 800328e:	bf00      	nop
 8003290:	e7fd      	b.n	800328e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003292:	f002 fb51 	bl	8005938 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003298:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800329a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800329e:	429a      	cmp	r2, r3
 80032a0:	d302      	bcc.n	80032a8 <xQueueGenericSend+0xdc>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d129      	bne.n	80032fc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	68b9      	ldr	r1, [r7, #8]
 80032ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032ae:	f000 fb37 	bl	8003920 <prvCopyDataToQueue>
 80032b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d010      	beq.n	80032de <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032be:	3324      	adds	r3, #36	@ 0x24
 80032c0:	4618      	mov	r0, r3
 80032c2:	f001 f905 	bl	80044d0 <xTaskRemoveFromEventList>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d013      	beq.n	80032f4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80032cc:	4b3f      	ldr	r3, [pc, #252]	@ (80033cc <xQueueGenericSend+0x200>)
 80032ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	e00a      	b.n	80032f4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80032de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032e4:	4b39      	ldr	r3, [pc, #228]	@ (80033cc <xQueueGenericSend+0x200>)
 80032e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032f4:	f002 fb52 	bl	800599c <vPortExitCritical>
				return pdPASS;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e063      	b.n	80033c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d103      	bne.n	800330a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003302:	f002 fb4b 	bl	800599c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003306:	2300      	movs	r3, #0
 8003308:	e05c      	b.n	80033c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800330a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330c:	2b00      	cmp	r3, #0
 800330e:	d106      	bne.n	800331e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003310:	f107 0314 	add.w	r3, r7, #20
 8003314:	4618      	mov	r0, r3
 8003316:	f001 f93f 	bl	8004598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800331a:	2301      	movs	r3, #1
 800331c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800331e:	f002 fb3d 	bl	800599c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003322:	f000 feaf 	bl	8004084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003326:	f002 fb07 	bl	8005938 <vPortEnterCritical>
 800332a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003330:	b25b      	sxtb	r3, r3
 8003332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003336:	d103      	bne.n	8003340 <xQueueGenericSend+0x174>
 8003338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003342:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003346:	b25b      	sxtb	r3, r3
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334c:	d103      	bne.n	8003356 <xQueueGenericSend+0x18a>
 800334e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003356:	f002 fb21 	bl	800599c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800335a:	1d3a      	adds	r2, r7, #4
 800335c:	f107 0314 	add.w	r3, r7, #20
 8003360:	4611      	mov	r1, r2
 8003362:	4618      	mov	r0, r3
 8003364:	f001 f92e 	bl	80045c4 <xTaskCheckForTimeOut>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d124      	bne.n	80033b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800336e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003370:	f000 fbce 	bl	8003b10 <prvIsQueueFull>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d018      	beq.n	80033ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800337a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800337c:	3310      	adds	r3, #16
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	4611      	mov	r1, r2
 8003382:	4618      	mov	r0, r3
 8003384:	f001 f852 	bl	800442c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003388:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800338a:	f000 fb59 	bl	8003a40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800338e:	f000 fe87 	bl	80040a0 <xTaskResumeAll>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	f47f af7c 	bne.w	8003292 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800339a:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <xQueueGenericSend+0x200>)
 800339c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	f3bf 8f4f 	dsb	sy
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	e772      	b.n	8003292 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80033ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033ae:	f000 fb47 	bl	8003a40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033b2:	f000 fe75 	bl	80040a0 <xTaskResumeAll>
 80033b6:	e76c      	b.n	8003292 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80033b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033ba:	f000 fb41 	bl	8003a40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033be:	f000 fe6f 	bl	80040a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80033c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3738      	adds	r7, #56	@ 0x38
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	e000ed04 	.word	0xe000ed04

080033d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b090      	sub	sp, #64	@ 0x40
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80033e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10b      	bne.n	8003400 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80033e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80033fa:	bf00      	nop
 80033fc:	bf00      	nop
 80033fe:	e7fd      	b.n	80033fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d103      	bne.n	800340e <xQueueGenericSendFromISR+0x3e>
 8003406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <xQueueGenericSendFromISR+0x42>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <xQueueGenericSendFromISR+0x44>
 8003412:	2300      	movs	r3, #0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10b      	bne.n	8003430 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800342a:	bf00      	nop
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d103      	bne.n	800343e <xQueueGenericSendFromISR+0x6e>
 8003436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <xQueueGenericSendFromISR+0x72>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <xQueueGenericSendFromISR+0x74>
 8003442:	2300      	movs	r3, #0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10b      	bne.n	8003460 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	623b      	str	r3, [r7, #32]
}
 800345a:	bf00      	nop
 800345c:	bf00      	nop
 800345e:	e7fd      	b.n	800345c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003460:	f002 fb4a 	bl	8005af8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003464:	f3ef 8211 	mrs	r2, BASEPRI
 8003468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	61fa      	str	r2, [r7, #28]
 800347a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800347c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800347e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003482:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003488:	429a      	cmp	r2, r3
 800348a:	d302      	bcc.n	8003492 <xQueueGenericSendFromISR+0xc2>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d12f      	bne.n	80034f2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003494:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003498:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800349c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800349e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80034a8:	f000 fa3a 	bl	8003920 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80034ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b4:	d112      	bne.n	80034dc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d016      	beq.n	80034ec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c0:	3324      	adds	r3, #36	@ 0x24
 80034c2:	4618      	mov	r0, r3
 80034c4:	f001 f804 	bl	80044d0 <xTaskRemoveFromEventList>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00e      	beq.n	80034ec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00b      	beq.n	80034ec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e007      	b.n	80034ec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80034dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80034e0:	3301      	adds	r3, #1
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	b25a      	sxtb	r2, r3
 80034e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80034ec:	2301      	movs	r3, #1
 80034ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80034f0:	e001      	b.n	80034f6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003500:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003504:	4618      	mov	r0, r3
 8003506:	3740      	adds	r7, #64	@ 0x40
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08c      	sub	sp, #48	@ 0x30
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003518:	2300      	movs	r3, #0
 800351a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10b      	bne.n	800353e <xQueueReceive+0x32>
	__asm volatile
 8003526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	623b      	str	r3, [r7, #32]
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	e7fd      	b.n	800353a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d103      	bne.n	800354c <xQueueReceive+0x40>
 8003544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <xQueueReceive+0x44>
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <xQueueReceive+0x46>
 8003550:	2300      	movs	r3, #0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10b      	bne.n	800356e <xQueueReceive+0x62>
	__asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	61fb      	str	r3, [r7, #28]
}
 8003568:	bf00      	nop
 800356a:	bf00      	nop
 800356c:	e7fd      	b.n	800356a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800356e:	f001 f97f 	bl	8004870 <xTaskGetSchedulerState>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d102      	bne.n	800357e <xQueueReceive+0x72>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <xQueueReceive+0x76>
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <xQueueReceive+0x78>
 8003582:	2300      	movs	r3, #0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10b      	bne.n	80035a0 <xQueueReceive+0x94>
	__asm volatile
 8003588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	61bb      	str	r3, [r7, #24]
}
 800359a:	bf00      	nop
 800359c:	bf00      	nop
 800359e:	e7fd      	b.n	800359c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035a0:	f002 f9ca 	bl	8005938 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01f      	beq.n	80035f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035b4:	f000 fa1e 	bl	80039f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ba:	1e5a      	subs	r2, r3, #1
 80035bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00f      	beq.n	80035e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ca:	3310      	adds	r3, #16
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 ff7f 	bl	80044d0 <xTaskRemoveFromEventList>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80035d8:	4b3c      	ldr	r3, [pc, #240]	@ (80036cc <xQueueReceive+0x1c0>)
 80035da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80035e8:	f002 f9d8 	bl	800599c <vPortExitCritical>
				return pdPASS;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e069      	b.n	80036c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d103      	bne.n	80035fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035f6:	f002 f9d1 	bl	800599c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035fa:	2300      	movs	r3, #0
 80035fc:	e062      	b.n	80036c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003600:	2b00      	cmp	r3, #0
 8003602:	d106      	bne.n	8003612 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003604:	f107 0310 	add.w	r3, r7, #16
 8003608:	4618      	mov	r0, r3
 800360a:	f000 ffc5 	bl	8004598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800360e:	2301      	movs	r3, #1
 8003610:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003612:	f002 f9c3 	bl	800599c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003616:	f000 fd35 	bl	8004084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800361a:	f002 f98d 	bl	8005938 <vPortEnterCritical>
 800361e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003620:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003624:	b25b      	sxtb	r3, r3
 8003626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362a:	d103      	bne.n	8003634 <xQueueReceive+0x128>
 800362c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003636:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800363a:	b25b      	sxtb	r3, r3
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d103      	bne.n	800364a <xQueueReceive+0x13e>
 8003642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800364a:	f002 f9a7 	bl	800599c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800364e:	1d3a      	adds	r2, r7, #4
 8003650:	f107 0310 	add.w	r3, r7, #16
 8003654:	4611      	mov	r1, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f000 ffb4 	bl	80045c4 <xTaskCheckForTimeOut>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d123      	bne.n	80036aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003662:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003664:	f000 fa3e 	bl	8003ae4 <prvIsQueueEmpty>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d017      	beq.n	800369e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800366e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003670:	3324      	adds	r3, #36	@ 0x24
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	4611      	mov	r1, r2
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fed8 	bl	800442c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800367c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800367e:	f000 f9df 	bl	8003a40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003682:	f000 fd0d 	bl	80040a0 <xTaskResumeAll>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d189      	bne.n	80035a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800368c:	4b0f      	ldr	r3, [pc, #60]	@ (80036cc <xQueueReceive+0x1c0>)
 800368e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	e780      	b.n	80035a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800369e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036a0:	f000 f9ce 	bl	8003a40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036a4:	f000 fcfc 	bl	80040a0 <xTaskResumeAll>
 80036a8:	e77a      	b.n	80035a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80036aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036ac:	f000 f9c8 	bl	8003a40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036b0:	f000 fcf6 	bl	80040a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036b6:	f000 fa15 	bl	8003ae4 <prvIsQueueEmpty>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f43f af6f 	beq.w	80035a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80036c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3730      	adds	r7, #48	@ 0x30
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	e000ed04 	.word	0xe000ed04

080036d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08e      	sub	sp, #56	@ 0x38
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80036da:	2300      	movs	r3, #0
 80036dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80036e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10b      	bne.n	8003704 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80036ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	623b      	str	r3, [r7, #32]
}
 80036fe:	bf00      	nop
 8003700:	bf00      	nop
 8003702:	e7fd      	b.n	8003700 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00b      	beq.n	8003724 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800370c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003710:	f383 8811 	msr	BASEPRI, r3
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	f3bf 8f4f 	dsb	sy
 800371c:	61fb      	str	r3, [r7, #28]
}
 800371e:	bf00      	nop
 8003720:	bf00      	nop
 8003722:	e7fd      	b.n	8003720 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003724:	f001 f8a4 	bl	8004870 <xTaskGetSchedulerState>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d102      	bne.n	8003734 <xQueueSemaphoreTake+0x64>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <xQueueSemaphoreTake+0x68>
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <xQueueSemaphoreTake+0x6a>
 8003738:	2300      	movs	r3, #0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10b      	bne.n	8003756 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	61bb      	str	r3, [r7, #24]
}
 8003750:	bf00      	nop
 8003752:	bf00      	nop
 8003754:	e7fd      	b.n	8003752 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003756:	f002 f8ef 	bl	8005938 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800375a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800375e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003762:	2b00      	cmp	r3, #0
 8003764:	d024      	beq.n	80037b0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003768:	1e5a      	subs	r2, r3, #1
 800376a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800376c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800376e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d104      	bne.n	8003780 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003776:	f001 f9f5 	bl	8004b64 <pvTaskIncrementMutexHeldCount>
 800377a:	4602      	mov	r2, r0
 800377c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00f      	beq.n	80037a8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800378a:	3310      	adds	r3, #16
 800378c:	4618      	mov	r0, r3
 800378e:	f000 fe9f 	bl	80044d0 <xTaskRemoveFromEventList>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003798:	4b54      	ldr	r3, [pc, #336]	@ (80038ec <xQueueSemaphoreTake+0x21c>)
 800379a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037a8:	f002 f8f8 	bl	800599c <vPortExitCritical>
				return pdPASS;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e098      	b.n	80038e2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d112      	bne.n	80037dc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80037b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00b      	beq.n	80037d4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	617b      	str	r3, [r7, #20]
}
 80037ce:	bf00      	nop
 80037d0:	bf00      	nop
 80037d2:	e7fd      	b.n	80037d0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80037d4:	f002 f8e2 	bl	800599c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80037d8:	2300      	movs	r3, #0
 80037da:	e082      	b.n	80038e2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037e2:	f107 030c 	add.w	r3, r7, #12
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fed6 	bl	8004598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037ec:	2301      	movs	r3, #1
 80037ee:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037f0:	f002 f8d4 	bl	800599c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037f4:	f000 fc46 	bl	8004084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037f8:	f002 f89e 	bl	8005938 <vPortEnterCritical>
 80037fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003802:	b25b      	sxtb	r3, r3
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003808:	d103      	bne.n	8003812 <xQueueSemaphoreTake+0x142>
 800380a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003814:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003818:	b25b      	sxtb	r3, r3
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381e:	d103      	bne.n	8003828 <xQueueSemaphoreTake+0x158>
 8003820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003828:	f002 f8b8 	bl	800599c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800382c:	463a      	mov	r2, r7
 800382e:	f107 030c 	add.w	r3, r7, #12
 8003832:	4611      	mov	r1, r2
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fec5 	bl	80045c4 <xTaskCheckForTimeOut>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d132      	bne.n	80038a6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003840:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003842:	f000 f94f 	bl	8003ae4 <prvIsQueueEmpty>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d026      	beq.n	800389a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800384c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d109      	bne.n	8003868 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003854:	f002 f870 	bl	8005938 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4618      	mov	r0, r3
 800385e:	f001 f825 	bl	80048ac <xTaskPriorityInherit>
 8003862:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003864:	f002 f89a 	bl	800599c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386a:	3324      	adds	r3, #36	@ 0x24
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	4611      	mov	r1, r2
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fddb 	bl	800442c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003876:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003878:	f000 f8e2 	bl	8003a40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800387c:	f000 fc10 	bl	80040a0 <xTaskResumeAll>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	f47f af67 	bne.w	8003756 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003888:	4b18      	ldr	r3, [pc, #96]	@ (80038ec <xQueueSemaphoreTake+0x21c>)
 800388a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	e75d      	b.n	8003756 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800389a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800389c:	f000 f8d0 	bl	8003a40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038a0:	f000 fbfe 	bl	80040a0 <xTaskResumeAll>
 80038a4:	e757      	b.n	8003756 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80038a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80038a8:	f000 f8ca 	bl	8003a40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038ac:	f000 fbf8 	bl	80040a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80038b2:	f000 f917 	bl	8003ae4 <prvIsQueueEmpty>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f43f af4c 	beq.w	8003756 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80038be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00d      	beq.n	80038e0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80038c4:	f002 f838 	bl	8005938 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80038c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80038ca:	f000 f811 	bl	80038f0 <prvGetDisinheritPriorityAfterTimeout>
 80038ce:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80038d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038d6:	4618      	mov	r0, r3
 80038d8:	f001 f8c0 	bl	8004a5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80038dc:	f002 f85e 	bl	800599c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80038e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3738      	adds	r7, #56	@ 0x38
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	e000ed04 	.word	0xe000ed04

080038f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d006      	beq.n	800390e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	e001      	b.n	8003912 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003912:	68fb      	ldr	r3, [r7, #12]
	}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003934:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10d      	bne.n	800395a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d14d      	bne.n	80039e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	4618      	mov	r0, r3
 800394c:	f001 f816 	bl	800497c <xTaskPriorityDisinherit>
 8003950:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	e043      	b.n	80039e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d119      	bne.n	8003994 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6858      	ldr	r0, [r3, #4]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	461a      	mov	r2, r3
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	f002 fb20 	bl	8005fb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	441a      	add	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	429a      	cmp	r2, r3
 8003988:	d32b      	bcc.n	80039e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	605a      	str	r2, [r3, #4]
 8003992:	e026      	b.n	80039e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	68d8      	ldr	r0, [r3, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399c:	461a      	mov	r2, r3
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	f002 fb06 	bl	8005fb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	425b      	negs	r3, r3
 80039ae:	441a      	add	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d207      	bcs.n	80039d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c8:	425b      	negs	r3, r3
 80039ca:	441a      	add	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d105      	bne.n	80039e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	3b01      	subs	r3, #1
 80039e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80039ea:	697b      	ldr	r3, [r7, #20]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d018      	beq.n	8003a38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	441a      	add	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d303      	bcc.n	8003a28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68d9      	ldr	r1, [r3, #12]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a30:	461a      	mov	r2, r3
 8003a32:	6838      	ldr	r0, [r7, #0]
 8003a34:	f002 fabc 	bl	8005fb0 <memcpy>
	}
}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a48:	f001 ff76 	bl	8005938 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a54:	e011      	b.n	8003a7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d012      	beq.n	8003a84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3324      	adds	r3, #36	@ 0x24
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fd34 	bl	80044d0 <xTaskRemoveFromEventList>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a6e:	f000 fe0d 	bl	800468c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	dce9      	bgt.n	8003a56 <prvUnlockQueue+0x16>
 8003a82:	e000      	b.n	8003a86 <prvUnlockQueue+0x46>
					break;
 8003a84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	22ff      	movs	r2, #255	@ 0xff
 8003a8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003a8e:	f001 ff85 	bl	800599c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a92:	f001 ff51 	bl	8005938 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a9e:	e011      	b.n	8003ac4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d012      	beq.n	8003ace <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3310      	adds	r3, #16
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fd0f 	bl	80044d0 <xTaskRemoveFromEventList>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ab8:	f000 fde8 	bl	800468c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003abc:	7bbb      	ldrb	r3, [r7, #14]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	dce9      	bgt.n	8003aa0 <prvUnlockQueue+0x60>
 8003acc:	e000      	b.n	8003ad0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ace:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	22ff      	movs	r2, #255	@ 0xff
 8003ad4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003ad8:	f001 ff60 	bl	800599c <vPortExitCritical>
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003aec:	f001 ff24 	bl	8005938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d102      	bne.n	8003afe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003af8:	2301      	movs	r3, #1
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	e001      	b.n	8003b02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b02:	f001 ff4b 	bl	800599c <vPortExitCritical>

	return xReturn;
 8003b06:	68fb      	ldr	r3, [r7, #12]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b18:	f001 ff0e 	bl	8005938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d102      	bne.n	8003b2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	e001      	b.n	8003b32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b32:	f001 ff33 	bl	800599c <vPortExitCritical>

	return xReturn;
 8003b36:	68fb      	ldr	r3, [r7, #12]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	e014      	b.n	8003b7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b50:	4a0f      	ldr	r2, [pc, #60]	@ (8003b90 <vQueueAddToRegistry+0x50>)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10b      	bne.n	8003b74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b5c:	490c      	ldr	r1, [pc, #48]	@ (8003b90 <vQueueAddToRegistry+0x50>)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b66:	4a0a      	ldr	r2, [pc, #40]	@ (8003b90 <vQueueAddToRegistry+0x50>)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b72:	e006      	b.n	8003b82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	3301      	adds	r3, #1
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b07      	cmp	r3, #7
 8003b7e:	d9e7      	bls.n	8003b50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	2000074c 	.word	0x2000074c

08003b94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ba4:	f001 fec8 	bl	8005938 <vPortEnterCritical>
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bae:	b25b      	sxtb	r3, r3
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb4:	d103      	bne.n	8003bbe <vQueueWaitForMessageRestricted+0x2a>
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bc4:	b25b      	sxtb	r3, r3
 8003bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bca:	d103      	bne.n	8003bd4 <vQueueWaitForMessageRestricted+0x40>
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bd4:	f001 fee2 	bl	800599c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d106      	bne.n	8003bee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	3324      	adds	r3, #36	@ 0x24
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	68b9      	ldr	r1, [r7, #8]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 fc45 	bl	8004478 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003bee:	6978      	ldr	r0, [r7, #20]
 8003bf0:	f7ff ff26 	bl	8003a40 <prvUnlockQueue>
	}
 8003bf4:	bf00      	nop
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08e      	sub	sp, #56	@ 0x38
 8003c00:	af04      	add	r7, sp, #16
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10b      	bne.n	8003c28 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	623b      	str	r3, [r7, #32]
}
 8003c22:	bf00      	nop
 8003c24:	bf00      	nop
 8003c26:	e7fd      	b.n	8003c24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10b      	bne.n	8003c46 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	61fb      	str	r3, [r7, #28]
}
 8003c40:	bf00      	nop
 8003c42:	bf00      	nop
 8003c44:	e7fd      	b.n	8003c42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c46:	235c      	movs	r3, #92	@ 0x5c
 8003c48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2b5c      	cmp	r3, #92	@ 0x5c
 8003c4e:	d00b      	beq.n	8003c68 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	61bb      	str	r3, [r7, #24]
}
 8003c62:	bf00      	nop
 8003c64:	bf00      	nop
 8003c66:	e7fd      	b.n	8003c64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01e      	beq.n	8003cae <xTaskCreateStatic+0xb2>
 8003c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d01b      	beq.n	8003cae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c88:	2300      	movs	r3, #0
 8003c8a:	9303      	str	r3, [sp, #12]
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8e:	9302      	str	r3, [sp, #8]
 8003c90:	f107 0314 	add.w	r3, r7, #20
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	68b9      	ldr	r1, [r7, #8]
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f850 	bl	8003d46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ca6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ca8:	f000 f8de 	bl	8003e68 <prvAddNewTaskToReadyList>
 8003cac:	e001      	b.n	8003cb2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003cb2:	697b      	ldr	r3, [r7, #20]
	}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3728      	adds	r7, #40	@ 0x28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08c      	sub	sp, #48	@ 0x30
 8003cc0:	af04      	add	r7, sp, #16
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ccc:	88fb      	ldrh	r3, [r7, #6]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f001 ff53 	bl	8005b7c <pvPortMalloc>
 8003cd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00e      	beq.n	8003cfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003cde:	205c      	movs	r0, #92	@ 0x5c
 8003ce0:	f001 ff4c 	bl	8005b7c <pvPortMalloc>
 8003ce4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cf2:	e005      	b.n	8003d00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003cf4:	6978      	ldr	r0, [r7, #20]
 8003cf6:	f002 f80f 	bl	8005d18 <vPortFree>
 8003cfa:	e001      	b.n	8003d00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d017      	beq.n	8003d36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d0e:	88fa      	ldrh	r2, [r7, #6]
 8003d10:	2300      	movs	r3, #0
 8003d12:	9303      	str	r3, [sp, #12]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	9302      	str	r3, [sp, #8]
 8003d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f80e 	bl	8003d46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d2a:	69f8      	ldr	r0, [r7, #28]
 8003d2c:	f000 f89c 	bl	8003e68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d30:	2301      	movs	r3, #1
 8003d32:	61bb      	str	r3, [r7, #24]
 8003d34:	e002      	b.n	8003d3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d36:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d3c:	69bb      	ldr	r3, [r7, #24]
	}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3720      	adds	r7, #32
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b088      	sub	sp, #32
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	607a      	str	r2, [r7, #4]
 8003d52:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d56:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	21a5      	movs	r1, #165	@ 0xa5
 8003d60:	f002 f8fa 	bl	8005f58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	f023 0307 	bic.w	r3, r3, #7
 8003d7c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00b      	beq.n	8003da0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8c:	f383 8811 	msr	BASEPRI, r3
 8003d90:	f3bf 8f6f 	isb	sy
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	617b      	str	r3, [r7, #20]
}
 8003d9a:	bf00      	nop
 8003d9c:	bf00      	nop
 8003d9e:	e7fd      	b.n	8003d9c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d01f      	beq.n	8003de6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	e012      	b.n	8003dd2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	4413      	add	r3, r2
 8003db2:	7819      	ldrb	r1, [r3, #0]
 8003db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	4413      	add	r3, r2
 8003dba:	3334      	adds	r3, #52	@ 0x34
 8003dbc:	460a      	mov	r2, r1
 8003dbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d006      	beq.n	8003dda <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	61fb      	str	r3, [r7, #28]
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	2b0f      	cmp	r3, #15
 8003dd6:	d9e9      	bls.n	8003dac <prvInitialiseNewTask+0x66>
 8003dd8:	e000      	b.n	8003ddc <prvInitialiseNewTask+0x96>
			{
				break;
 8003dda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003de4:	e003      	b.n	8003dee <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df0:	2b37      	cmp	r3, #55	@ 0x37
 8003df2:	d901      	bls.n	8003df8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003df4:	2337      	movs	r3, #55	@ 0x37
 8003df6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e02:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e06:	2200      	movs	r2, #0
 8003e08:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe ff4a 	bl	8002ca8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e16:	3318      	adds	r3, #24
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe ff45 	bl	8002ca8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e26:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e32:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e36:	2200      	movs	r2, #0
 8003e38:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	68f9      	ldr	r1, [r7, #12]
 8003e46:	69b8      	ldr	r0, [r7, #24]
 8003e48:	f001 fc42 	bl	80056d0 <pxPortInitialiseStack>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e5e:	bf00      	nop
 8003e60:	3720      	adds	r7, #32
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e70:	f001 fd62 	bl	8005938 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e74:	4b2d      	ldr	r3, [pc, #180]	@ (8003f2c <prvAddNewTaskToReadyList+0xc4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8003f2c <prvAddNewTaskToReadyList+0xc4>)
 8003e7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8003f30 <prvAddNewTaskToReadyList+0xc8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d109      	bne.n	8003e9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e86:	4a2a      	ldr	r2, [pc, #168]	@ (8003f30 <prvAddNewTaskToReadyList+0xc8>)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e8c:	4b27      	ldr	r3, [pc, #156]	@ (8003f2c <prvAddNewTaskToReadyList+0xc4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d110      	bne.n	8003eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e94:	f000 fc1e 	bl	80046d4 <prvInitialiseTaskLists>
 8003e98:	e00d      	b.n	8003eb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e9a:	4b26      	ldr	r3, [pc, #152]	@ (8003f34 <prvAddNewTaskToReadyList+0xcc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d109      	bne.n	8003eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ea2:	4b23      	ldr	r3, [pc, #140]	@ (8003f30 <prvAddNewTaskToReadyList+0xc8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d802      	bhi.n	8003eb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003eb0:	4a1f      	ldr	r2, [pc, #124]	@ (8003f30 <prvAddNewTaskToReadyList+0xc8>)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003eb6:	4b20      	ldr	r3, [pc, #128]	@ (8003f38 <prvAddNewTaskToReadyList+0xd0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8003f38 <prvAddNewTaskToReadyList+0xd0>)
 8003ebe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f38 <prvAddNewTaskToReadyList+0xd0>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f3c <prvAddNewTaskToReadyList+0xd4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d903      	bls.n	8003edc <prvAddNewTaskToReadyList+0x74>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed8:	4a18      	ldr	r2, [pc, #96]	@ (8003f3c <prvAddNewTaskToReadyList+0xd4>)
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4a15      	ldr	r2, [pc, #84]	@ (8003f40 <prvAddNewTaskToReadyList+0xd8>)
 8003eea:	441a      	add	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	f7fe fee5 	bl	8002cc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ef8:	f001 fd50 	bl	800599c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003efc:	4b0d      	ldr	r3, [pc, #52]	@ (8003f34 <prvAddNewTaskToReadyList+0xcc>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00e      	beq.n	8003f22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f04:	4b0a      	ldr	r3, [pc, #40]	@ (8003f30 <prvAddNewTaskToReadyList+0xc8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d207      	bcs.n	8003f22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f12:	4b0c      	ldr	r3, [pc, #48]	@ (8003f44 <prvAddNewTaskToReadyList+0xdc>)
 8003f14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000c60 	.word	0x20000c60
 8003f30:	2000078c 	.word	0x2000078c
 8003f34:	20000c6c 	.word	0x20000c6c
 8003f38:	20000c7c 	.word	0x20000c7c
 8003f3c:	20000c68 	.word	0x20000c68
 8003f40:	20000790 	.word	0x20000790
 8003f44:	e000ed04 	.word	0xe000ed04

08003f48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d018      	beq.n	8003f8c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f5a:	4b14      	ldr	r3, [pc, #80]	@ (8003fac <vTaskDelay+0x64>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00b      	beq.n	8003f7a <vTaskDelay+0x32>
	__asm volatile
 8003f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	60bb      	str	r3, [r7, #8]
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	e7fd      	b.n	8003f76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f7a:	f000 f883 	bl	8004084 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f7e:	2100      	movs	r1, #0
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fff7 	bl	8004f74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f86:	f000 f88b 	bl	80040a0 <xTaskResumeAll>
 8003f8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d107      	bne.n	8003fa2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003f92:	4b07      	ldr	r3, [pc, #28]	@ (8003fb0 <vTaskDelay+0x68>)
 8003f94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000c88 	.word	0x20000c88
 8003fb0:	e000ed04 	.word	0xe000ed04

08003fb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08a      	sub	sp, #40	@ 0x28
 8003fb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003fc2:	463a      	mov	r2, r7
 8003fc4:	1d39      	adds	r1, r7, #4
 8003fc6:	f107 0308 	add.w	r3, r7, #8
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe fe18 	bl	8002c00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003fd0:	6839      	ldr	r1, [r7, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	9202      	str	r2, [sp, #8]
 8003fd8:	9301      	str	r3, [sp, #4]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	460a      	mov	r2, r1
 8003fe2:	4922      	ldr	r1, [pc, #136]	@ (800406c <vTaskStartScheduler+0xb8>)
 8003fe4:	4822      	ldr	r0, [pc, #136]	@ (8004070 <vTaskStartScheduler+0xbc>)
 8003fe6:	f7ff fe09 	bl	8003bfc <xTaskCreateStatic>
 8003fea:	4603      	mov	r3, r0
 8003fec:	4a21      	ldr	r2, [pc, #132]	@ (8004074 <vTaskStartScheduler+0xc0>)
 8003fee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ff0:	4b20      	ldr	r3, [pc, #128]	@ (8004074 <vTaskStartScheduler+0xc0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	e001      	b.n	8004002 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d102      	bne.n	800400e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004008:	f001 f808 	bl	800501c <xTimerCreateTimerTask>
 800400c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d116      	bne.n	8004042 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	613b      	str	r3, [r7, #16]
}
 8004026:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004028:	4b13      	ldr	r3, [pc, #76]	@ (8004078 <vTaskStartScheduler+0xc4>)
 800402a:	f04f 32ff 	mov.w	r2, #4294967295
 800402e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004030:	4b12      	ldr	r3, [pc, #72]	@ (800407c <vTaskStartScheduler+0xc8>)
 8004032:	2201      	movs	r2, #1
 8004034:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004036:	4b12      	ldr	r3, [pc, #72]	@ (8004080 <vTaskStartScheduler+0xcc>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800403c:	f001 fbd8 	bl	80057f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004040:	e00f      	b.n	8004062 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004048:	d10b      	bne.n	8004062 <vTaskStartScheduler+0xae>
	__asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	60fb      	str	r3, [r7, #12]
}
 800405c:	bf00      	nop
 800405e:	bf00      	nop
 8004060:	e7fd      	b.n	800405e <vTaskStartScheduler+0xaa>
}
 8004062:	bf00      	nop
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	08006000 	.word	0x08006000
 8004070:	080046a5 	.word	0x080046a5
 8004074:	20000c84 	.word	0x20000c84
 8004078:	20000c80 	.word	0x20000c80
 800407c:	20000c6c 	.word	0x20000c6c
 8004080:	20000c64 	.word	0x20000c64

08004084 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004088:	4b04      	ldr	r3, [pc, #16]	@ (800409c <vTaskSuspendAll+0x18>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3301      	adds	r3, #1
 800408e:	4a03      	ldr	r2, [pc, #12]	@ (800409c <vTaskSuspendAll+0x18>)
 8004090:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004092:	bf00      	nop
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	20000c88 	.word	0x20000c88

080040a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040ae:	4b42      	ldr	r3, [pc, #264]	@ (80041b8 <xTaskResumeAll+0x118>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10b      	bne.n	80040ce <xTaskResumeAll+0x2e>
	__asm volatile
 80040b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ba:	f383 8811 	msr	BASEPRI, r3
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	603b      	str	r3, [r7, #0]
}
 80040c8:	bf00      	nop
 80040ca:	bf00      	nop
 80040cc:	e7fd      	b.n	80040ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040ce:	f001 fc33 	bl	8005938 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040d2:	4b39      	ldr	r3, [pc, #228]	@ (80041b8 <xTaskResumeAll+0x118>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	4a37      	ldr	r2, [pc, #220]	@ (80041b8 <xTaskResumeAll+0x118>)
 80040da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040dc:	4b36      	ldr	r3, [pc, #216]	@ (80041b8 <xTaskResumeAll+0x118>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d162      	bne.n	80041aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040e4:	4b35      	ldr	r3, [pc, #212]	@ (80041bc <xTaskResumeAll+0x11c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d05e      	beq.n	80041aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040ec:	e02f      	b.n	800414e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ee:	4b34      	ldr	r3, [pc, #208]	@ (80041c0 <xTaskResumeAll+0x120>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3318      	adds	r3, #24
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe fe3e 	bl	8002d7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3304      	adds	r3, #4
 8004104:	4618      	mov	r0, r3
 8004106:	f7fe fe39 	bl	8002d7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800410e:	4b2d      	ldr	r3, [pc, #180]	@ (80041c4 <xTaskResumeAll+0x124>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d903      	bls.n	800411e <xTaskResumeAll+0x7e>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411a:	4a2a      	ldr	r2, [pc, #168]	@ (80041c4 <xTaskResumeAll+0x124>)
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4a27      	ldr	r2, [pc, #156]	@ (80041c8 <xTaskResumeAll+0x128>)
 800412c:	441a      	add	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3304      	adds	r3, #4
 8004132:	4619      	mov	r1, r3
 8004134:	4610      	mov	r0, r2
 8004136:	f7fe fdc4 	bl	8002cc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800413e:	4b23      	ldr	r3, [pc, #140]	@ (80041cc <xTaskResumeAll+0x12c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	429a      	cmp	r2, r3
 8004146:	d302      	bcc.n	800414e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004148:	4b21      	ldr	r3, [pc, #132]	@ (80041d0 <xTaskResumeAll+0x130>)
 800414a:	2201      	movs	r2, #1
 800414c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800414e:	4b1c      	ldr	r3, [pc, #112]	@ (80041c0 <xTaskResumeAll+0x120>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1cb      	bne.n	80040ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800415c:	f000 fb58 	bl	8004810 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004160:	4b1c      	ldr	r3, [pc, #112]	@ (80041d4 <xTaskResumeAll+0x134>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d010      	beq.n	800418e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800416c:	f000 f846 	bl	80041fc <xTaskIncrementTick>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004176:	4b16      	ldr	r3, [pc, #88]	@ (80041d0 <xTaskResumeAll+0x130>)
 8004178:	2201      	movs	r2, #1
 800417a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3b01      	subs	r3, #1
 8004180:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1f1      	bne.n	800416c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004188:	4b12      	ldr	r3, [pc, #72]	@ (80041d4 <xTaskResumeAll+0x134>)
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800418e:	4b10      	ldr	r3, [pc, #64]	@ (80041d0 <xTaskResumeAll+0x130>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d009      	beq.n	80041aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004196:	2301      	movs	r3, #1
 8004198:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800419a:	4b0f      	ldr	r3, [pc, #60]	@ (80041d8 <xTaskResumeAll+0x138>)
 800419c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041aa:	f001 fbf7 	bl	800599c <vPortExitCritical>

	return xAlreadyYielded;
 80041ae:	68bb      	ldr	r3, [r7, #8]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20000c88 	.word	0x20000c88
 80041bc:	20000c60 	.word	0x20000c60
 80041c0:	20000c20 	.word	0x20000c20
 80041c4:	20000c68 	.word	0x20000c68
 80041c8:	20000790 	.word	0x20000790
 80041cc:	2000078c 	.word	0x2000078c
 80041d0:	20000c74 	.word	0x20000c74
 80041d4:	20000c70 	.word	0x20000c70
 80041d8:	e000ed04 	.word	0xe000ed04

080041dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80041e2:	4b05      	ldr	r3, [pc, #20]	@ (80041f8 <xTaskGetTickCount+0x1c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80041e8:	687b      	ldr	r3, [r7, #4]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	20000c64 	.word	0x20000c64

080041fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004206:	4b4f      	ldr	r3, [pc, #316]	@ (8004344 <xTaskIncrementTick+0x148>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	f040 8090 	bne.w	8004330 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004210:	4b4d      	ldr	r3, [pc, #308]	@ (8004348 <xTaskIncrementTick+0x14c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3301      	adds	r3, #1
 8004216:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004218:	4a4b      	ldr	r2, [pc, #300]	@ (8004348 <xTaskIncrementTick+0x14c>)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d121      	bne.n	8004268 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004224:	4b49      	ldr	r3, [pc, #292]	@ (800434c <xTaskIncrementTick+0x150>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00b      	beq.n	8004246 <xTaskIncrementTick+0x4a>
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	603b      	str	r3, [r7, #0]
}
 8004240:	bf00      	nop
 8004242:	bf00      	nop
 8004244:	e7fd      	b.n	8004242 <xTaskIncrementTick+0x46>
 8004246:	4b41      	ldr	r3, [pc, #260]	@ (800434c <xTaskIncrementTick+0x150>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	4b40      	ldr	r3, [pc, #256]	@ (8004350 <xTaskIncrementTick+0x154>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a3e      	ldr	r2, [pc, #248]	@ (800434c <xTaskIncrementTick+0x150>)
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	4a3e      	ldr	r2, [pc, #248]	@ (8004350 <xTaskIncrementTick+0x154>)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4b3e      	ldr	r3, [pc, #248]	@ (8004354 <xTaskIncrementTick+0x158>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3301      	adds	r3, #1
 8004260:	4a3c      	ldr	r2, [pc, #240]	@ (8004354 <xTaskIncrementTick+0x158>)
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	f000 fad4 	bl	8004810 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004268:	4b3b      	ldr	r3, [pc, #236]	@ (8004358 <xTaskIncrementTick+0x15c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	429a      	cmp	r2, r3
 8004270:	d349      	bcc.n	8004306 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004272:	4b36      	ldr	r3, [pc, #216]	@ (800434c <xTaskIncrementTick+0x150>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d104      	bne.n	8004286 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800427c:	4b36      	ldr	r3, [pc, #216]	@ (8004358 <xTaskIncrementTick+0x15c>)
 800427e:	f04f 32ff 	mov.w	r2, #4294967295
 8004282:	601a      	str	r2, [r3, #0]
					break;
 8004284:	e03f      	b.n	8004306 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004286:	4b31      	ldr	r3, [pc, #196]	@ (800434c <xTaskIncrementTick+0x150>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	429a      	cmp	r2, r3
 800429c:	d203      	bcs.n	80042a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800429e:	4a2e      	ldr	r2, [pc, #184]	@ (8004358 <xTaskIncrementTick+0x15c>)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80042a4:	e02f      	b.n	8004306 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	3304      	adds	r3, #4
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe fd66 	bl	8002d7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d004      	beq.n	80042c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	3318      	adds	r3, #24
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fe fd5d 	bl	8002d7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042c6:	4b25      	ldr	r3, [pc, #148]	@ (800435c <xTaskIncrementTick+0x160>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d903      	bls.n	80042d6 <xTaskIncrementTick+0xda>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d2:	4a22      	ldr	r2, [pc, #136]	@ (800435c <xTaskIncrementTick+0x160>)
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042da:	4613      	mov	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004360 <xTaskIncrementTick+0x164>)
 80042e4:	441a      	add	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	3304      	adds	r3, #4
 80042ea:	4619      	mov	r1, r3
 80042ec:	4610      	mov	r0, r2
 80042ee:	f7fe fce8 	bl	8002cc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004364 <xTaskIncrementTick+0x168>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d3b8      	bcc.n	8004272 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004300:	2301      	movs	r3, #1
 8004302:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004304:	e7b5      	b.n	8004272 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004306:	4b17      	ldr	r3, [pc, #92]	@ (8004364 <xTaskIncrementTick+0x168>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800430c:	4914      	ldr	r1, [pc, #80]	@ (8004360 <xTaskIncrementTick+0x164>)
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d901      	bls.n	8004322 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800431e:	2301      	movs	r3, #1
 8004320:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004322:	4b11      	ldr	r3, [pc, #68]	@ (8004368 <xTaskIncrementTick+0x16c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d007      	beq.n	800433a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800432a:	2301      	movs	r3, #1
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	e004      	b.n	800433a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004330:	4b0e      	ldr	r3, [pc, #56]	@ (800436c <xTaskIncrementTick+0x170>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3301      	adds	r3, #1
 8004336:	4a0d      	ldr	r2, [pc, #52]	@ (800436c <xTaskIncrementTick+0x170>)
 8004338:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800433a:	697b      	ldr	r3, [r7, #20]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000c88 	.word	0x20000c88
 8004348:	20000c64 	.word	0x20000c64
 800434c:	20000c18 	.word	0x20000c18
 8004350:	20000c1c 	.word	0x20000c1c
 8004354:	20000c78 	.word	0x20000c78
 8004358:	20000c80 	.word	0x20000c80
 800435c:	20000c68 	.word	0x20000c68
 8004360:	20000790 	.word	0x20000790
 8004364:	2000078c 	.word	0x2000078c
 8004368:	20000c74 	.word	0x20000c74
 800436c:	20000c70 	.word	0x20000c70

08004370 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004376:	4b28      	ldr	r3, [pc, #160]	@ (8004418 <vTaskSwitchContext+0xa8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800437e:	4b27      	ldr	r3, [pc, #156]	@ (800441c <vTaskSwitchContext+0xac>)
 8004380:	2201      	movs	r2, #1
 8004382:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004384:	e042      	b.n	800440c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004386:	4b25      	ldr	r3, [pc, #148]	@ (800441c <vTaskSwitchContext+0xac>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800438c:	4b24      	ldr	r3, [pc, #144]	@ (8004420 <vTaskSwitchContext+0xb0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	e011      	b.n	80043b8 <vTaskSwitchContext+0x48>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10b      	bne.n	80043b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	607b      	str	r3, [r7, #4]
}
 80043ac:	bf00      	nop
 80043ae:	bf00      	nop
 80043b0:	e7fd      	b.n	80043ae <vTaskSwitchContext+0x3e>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3b01      	subs	r3, #1
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	491a      	ldr	r1, [pc, #104]	@ (8004424 <vTaskSwitchContext+0xb4>)
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0e3      	beq.n	8004394 <vTaskSwitchContext+0x24>
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4a13      	ldr	r2, [pc, #76]	@ (8004424 <vTaskSwitchContext+0xb4>)
 80043d8:	4413      	add	r3, r2
 80043da:	60bb      	str	r3, [r7, #8]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	605a      	str	r2, [r3, #4]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	3308      	adds	r3, #8
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d104      	bne.n	80043fc <vTaskSwitchContext+0x8c>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	605a      	str	r2, [r3, #4]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	4a09      	ldr	r2, [pc, #36]	@ (8004428 <vTaskSwitchContext+0xb8>)
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	4a06      	ldr	r2, [pc, #24]	@ (8004420 <vTaskSwitchContext+0xb0>)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6013      	str	r3, [r2, #0]
}
 800440c:	bf00      	nop
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	20000c88 	.word	0x20000c88
 800441c:	20000c74 	.word	0x20000c74
 8004420:	20000c68 	.word	0x20000c68
 8004424:	20000790 	.word	0x20000790
 8004428:	2000078c 	.word	0x2000078c

0800442c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10b      	bne.n	8004454 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800443c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	60fb      	str	r3, [r7, #12]
}
 800444e:	bf00      	nop
 8004450:	bf00      	nop
 8004452:	e7fd      	b.n	8004450 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004454:	4b07      	ldr	r3, [pc, #28]	@ (8004474 <vTaskPlaceOnEventList+0x48>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3318      	adds	r3, #24
 800445a:	4619      	mov	r1, r3
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7fe fc54 	bl	8002d0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004462:	2101      	movs	r1, #1
 8004464:	6838      	ldr	r0, [r7, #0]
 8004466:	f000 fd85 	bl	8004f74 <prvAddCurrentTaskToDelayedList>
}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	2000078c 	.word	0x2000078c

08004478 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10b      	bne.n	80044a2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	617b      	str	r3, [r7, #20]
}
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	e7fd      	b.n	800449e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044a2:	4b0a      	ldr	r3, [pc, #40]	@ (80044cc <vTaskPlaceOnEventListRestricted+0x54>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3318      	adds	r3, #24
 80044a8:	4619      	mov	r1, r3
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f7fe fc09 	bl	8002cc2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80044b6:	f04f 33ff 	mov.w	r3, #4294967295
 80044ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	68b8      	ldr	r0, [r7, #8]
 80044c0:	f000 fd58 	bl	8004f74 <prvAddCurrentTaskToDelayedList>
	}
 80044c4:	bf00      	nop
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	2000078c 	.word	0x2000078c

080044d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10b      	bne.n	80044fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	60fb      	str	r3, [r7, #12]
}
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	e7fd      	b.n	80044fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	3318      	adds	r3, #24
 8004502:	4618      	mov	r0, r3
 8004504:	f7fe fc3a 	bl	8002d7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004508:	4b1d      	ldr	r3, [pc, #116]	@ (8004580 <xTaskRemoveFromEventList+0xb0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d11d      	bne.n	800454c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	3304      	adds	r3, #4
 8004514:	4618      	mov	r0, r3
 8004516:	f7fe fc31 	bl	8002d7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800451e:	4b19      	ldr	r3, [pc, #100]	@ (8004584 <xTaskRemoveFromEventList+0xb4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d903      	bls.n	800452e <xTaskRemoveFromEventList+0x5e>
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452a:	4a16      	ldr	r2, [pc, #88]	@ (8004584 <xTaskRemoveFromEventList+0xb4>)
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4a13      	ldr	r2, [pc, #76]	@ (8004588 <xTaskRemoveFromEventList+0xb8>)
 800453c:	441a      	add	r2, r3
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	3304      	adds	r3, #4
 8004542:	4619      	mov	r1, r3
 8004544:	4610      	mov	r0, r2
 8004546:	f7fe fbbc 	bl	8002cc2 <vListInsertEnd>
 800454a:	e005      	b.n	8004558 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	3318      	adds	r3, #24
 8004550:	4619      	mov	r1, r3
 8004552:	480e      	ldr	r0, [pc, #56]	@ (800458c <xTaskRemoveFromEventList+0xbc>)
 8004554:	f7fe fbb5 	bl	8002cc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800455c:	4b0c      	ldr	r3, [pc, #48]	@ (8004590 <xTaskRemoveFromEventList+0xc0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004562:	429a      	cmp	r2, r3
 8004564:	d905      	bls.n	8004572 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004566:	2301      	movs	r3, #1
 8004568:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800456a:	4b0a      	ldr	r3, [pc, #40]	@ (8004594 <xTaskRemoveFromEventList+0xc4>)
 800456c:	2201      	movs	r2, #1
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	e001      	b.n	8004576 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004572:	2300      	movs	r3, #0
 8004574:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004576:	697b      	ldr	r3, [r7, #20]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	20000c88 	.word	0x20000c88
 8004584:	20000c68 	.word	0x20000c68
 8004588:	20000790 	.word	0x20000790
 800458c:	20000c20 	.word	0x20000c20
 8004590:	2000078c 	.word	0x2000078c
 8004594:	20000c74 	.word	0x20000c74

08004598 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80045a0:	4b06      	ldr	r3, [pc, #24]	@ (80045bc <vTaskInternalSetTimeOutState+0x24>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80045a8:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <vTaskInternalSetTimeOutState+0x28>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	605a      	str	r2, [r3, #4]
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	20000c78 	.word	0x20000c78
 80045c0:	20000c64 	.word	0x20000c64

080045c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10b      	bne.n	80045ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	613b      	str	r3, [r7, #16]
}
 80045e6:	bf00      	nop
 80045e8:	bf00      	nop
 80045ea:	e7fd      	b.n	80045e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10b      	bne.n	800460a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	60fb      	str	r3, [r7, #12]
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	e7fd      	b.n	8004606 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800460a:	f001 f995 	bl	8005938 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800460e:	4b1d      	ldr	r3, [pc, #116]	@ (8004684 <xTaskCheckForTimeOut+0xc0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004626:	d102      	bne.n	800462e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004628:	2300      	movs	r3, #0
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	e023      	b.n	8004676 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	4b15      	ldr	r3, [pc, #84]	@ (8004688 <xTaskCheckForTimeOut+0xc4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d007      	beq.n	800464a <xTaskCheckForTimeOut+0x86>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	429a      	cmp	r2, r3
 8004642:	d302      	bcc.n	800464a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004644:	2301      	movs	r3, #1
 8004646:	61fb      	str	r3, [r7, #28]
 8004648:	e015      	b.n	8004676 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	429a      	cmp	r2, r3
 8004652:	d20b      	bcs.n	800466c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	1ad2      	subs	r2, r2, r3
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff ff99 	bl	8004598 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	e004      	b.n	8004676 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004672:	2301      	movs	r3, #1
 8004674:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004676:	f001 f991 	bl	800599c <vPortExitCritical>

	return xReturn;
 800467a:	69fb      	ldr	r3, [r7, #28]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3720      	adds	r7, #32
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	20000c64 	.word	0x20000c64
 8004688:	20000c78 	.word	0x20000c78

0800468c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004690:	4b03      	ldr	r3, [pc, #12]	@ (80046a0 <vTaskMissedYield+0x14>)
 8004692:	2201      	movs	r2, #1
 8004694:	601a      	str	r2, [r3, #0]
}
 8004696:	bf00      	nop
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	20000c74 	.word	0x20000c74

080046a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80046ac:	f000 f852 	bl	8004754 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046b0:	4b06      	ldr	r3, [pc, #24]	@ (80046cc <prvIdleTask+0x28>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d9f9      	bls.n	80046ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80046b8:	4b05      	ldr	r3, [pc, #20]	@ (80046d0 <prvIdleTask+0x2c>)
 80046ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046c8:	e7f0      	b.n	80046ac <prvIdleTask+0x8>
 80046ca:	bf00      	nop
 80046cc:	20000790 	.word	0x20000790
 80046d0:	e000ed04 	.word	0xe000ed04

080046d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046da:	2300      	movs	r3, #0
 80046dc:	607b      	str	r3, [r7, #4]
 80046de:	e00c      	b.n	80046fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4a12      	ldr	r2, [pc, #72]	@ (8004734 <prvInitialiseTaskLists+0x60>)
 80046ec:	4413      	add	r3, r2
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fe faba 	bl	8002c68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3301      	adds	r3, #1
 80046f8:	607b      	str	r3, [r7, #4]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b37      	cmp	r3, #55	@ 0x37
 80046fe:	d9ef      	bls.n	80046e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004700:	480d      	ldr	r0, [pc, #52]	@ (8004738 <prvInitialiseTaskLists+0x64>)
 8004702:	f7fe fab1 	bl	8002c68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004706:	480d      	ldr	r0, [pc, #52]	@ (800473c <prvInitialiseTaskLists+0x68>)
 8004708:	f7fe faae 	bl	8002c68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800470c:	480c      	ldr	r0, [pc, #48]	@ (8004740 <prvInitialiseTaskLists+0x6c>)
 800470e:	f7fe faab 	bl	8002c68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004712:	480c      	ldr	r0, [pc, #48]	@ (8004744 <prvInitialiseTaskLists+0x70>)
 8004714:	f7fe faa8 	bl	8002c68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004718:	480b      	ldr	r0, [pc, #44]	@ (8004748 <prvInitialiseTaskLists+0x74>)
 800471a:	f7fe faa5 	bl	8002c68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800471e:	4b0b      	ldr	r3, [pc, #44]	@ (800474c <prvInitialiseTaskLists+0x78>)
 8004720:	4a05      	ldr	r2, [pc, #20]	@ (8004738 <prvInitialiseTaskLists+0x64>)
 8004722:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004724:	4b0a      	ldr	r3, [pc, #40]	@ (8004750 <prvInitialiseTaskLists+0x7c>)
 8004726:	4a05      	ldr	r2, [pc, #20]	@ (800473c <prvInitialiseTaskLists+0x68>)
 8004728:	601a      	str	r2, [r3, #0]
}
 800472a:	bf00      	nop
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20000790 	.word	0x20000790
 8004738:	20000bf0 	.word	0x20000bf0
 800473c:	20000c04 	.word	0x20000c04
 8004740:	20000c20 	.word	0x20000c20
 8004744:	20000c34 	.word	0x20000c34
 8004748:	20000c4c 	.word	0x20000c4c
 800474c:	20000c18 	.word	0x20000c18
 8004750:	20000c1c 	.word	0x20000c1c

08004754 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800475a:	e019      	b.n	8004790 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800475c:	f001 f8ec 	bl	8005938 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004760:	4b10      	ldr	r3, [pc, #64]	@ (80047a4 <prvCheckTasksWaitingTermination+0x50>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3304      	adds	r3, #4
 800476c:	4618      	mov	r0, r3
 800476e:	f7fe fb05 	bl	8002d7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004772:	4b0d      	ldr	r3, [pc, #52]	@ (80047a8 <prvCheckTasksWaitingTermination+0x54>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3b01      	subs	r3, #1
 8004778:	4a0b      	ldr	r2, [pc, #44]	@ (80047a8 <prvCheckTasksWaitingTermination+0x54>)
 800477a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800477c:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <prvCheckTasksWaitingTermination+0x58>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3b01      	subs	r3, #1
 8004782:	4a0a      	ldr	r2, [pc, #40]	@ (80047ac <prvCheckTasksWaitingTermination+0x58>)
 8004784:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004786:	f001 f909 	bl	800599c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f810 	bl	80047b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004790:	4b06      	ldr	r3, [pc, #24]	@ (80047ac <prvCheckTasksWaitingTermination+0x58>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e1      	bne.n	800475c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004798:	bf00      	nop
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000c34 	.word	0x20000c34
 80047a8:	20000c60 	.word	0x20000c60
 80047ac:	20000c48 	.word	0x20000c48

080047b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d108      	bne.n	80047d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c6:	4618      	mov	r0, r3
 80047c8:	f001 faa6 	bl	8005d18 <vPortFree>
				vPortFree( pxTCB );
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f001 faa3 	bl	8005d18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047d2:	e019      	b.n	8004808 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d103      	bne.n	80047e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f001 fa9a 	bl	8005d18 <vPortFree>
	}
 80047e4:	e010      	b.n	8004808 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d00b      	beq.n	8004808 <prvDeleteTCB+0x58>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	60fb      	str	r3, [r7, #12]
}
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	e7fd      	b.n	8004804 <prvDeleteTCB+0x54>
	}
 8004808:	bf00      	nop
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004816:	4b0c      	ldr	r3, [pc, #48]	@ (8004848 <prvResetNextTaskUnblockTime+0x38>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d104      	bne.n	800482a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004820:	4b0a      	ldr	r3, [pc, #40]	@ (800484c <prvResetNextTaskUnblockTime+0x3c>)
 8004822:	f04f 32ff 	mov.w	r2, #4294967295
 8004826:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004828:	e008      	b.n	800483c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800482a:	4b07      	ldr	r3, [pc, #28]	@ (8004848 <prvResetNextTaskUnblockTime+0x38>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	4a04      	ldr	r2, [pc, #16]	@ (800484c <prvResetNextTaskUnblockTime+0x3c>)
 800483a:	6013      	str	r3, [r2, #0]
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	20000c18 	.word	0x20000c18
 800484c:	20000c80 	.word	0x20000c80

08004850 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004856:	4b05      	ldr	r3, [pc, #20]	@ (800486c <xTaskGetCurrentTaskHandle+0x1c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800485c:	687b      	ldr	r3, [r7, #4]
	}
 800485e:	4618      	mov	r0, r3
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	2000078c 	.word	0x2000078c

08004870 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004876:	4b0b      	ldr	r3, [pc, #44]	@ (80048a4 <xTaskGetSchedulerState+0x34>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d102      	bne.n	8004884 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800487e:	2301      	movs	r3, #1
 8004880:	607b      	str	r3, [r7, #4]
 8004882:	e008      	b.n	8004896 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004884:	4b08      	ldr	r3, [pc, #32]	@ (80048a8 <xTaskGetSchedulerState+0x38>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d102      	bne.n	8004892 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800488c:	2302      	movs	r3, #2
 800488e:	607b      	str	r3, [r7, #4]
 8004890:	e001      	b.n	8004896 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004892:	2300      	movs	r3, #0
 8004894:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004896:	687b      	ldr	r3, [r7, #4]
	}
 8004898:	4618      	mov	r0, r3
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	20000c6c 	.word	0x20000c6c
 80048a8:	20000c88 	.word	0x20000c88

080048ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d051      	beq.n	8004966 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004970 <xTaskPriorityInherit+0xc4>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d241      	bcs.n	8004954 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	db06      	blt.n	80048e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048d8:	4b25      	ldr	r3, [pc, #148]	@ (8004970 <xTaskPriorityInherit+0xc4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	6959      	ldr	r1, [r3, #20]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ee:	4613      	mov	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004974 <xTaskPriorityInherit+0xc8>)
 80048f8:	4413      	add	r3, r2
 80048fa:	4299      	cmp	r1, r3
 80048fc:	d122      	bne.n	8004944 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	3304      	adds	r3, #4
 8004902:	4618      	mov	r0, r3
 8004904:	f7fe fa3a 	bl	8002d7c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004908:	4b19      	ldr	r3, [pc, #100]	@ (8004970 <xTaskPriorityInherit+0xc4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004916:	4b18      	ldr	r3, [pc, #96]	@ (8004978 <xTaskPriorityInherit+0xcc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d903      	bls.n	8004926 <xTaskPriorityInherit+0x7a>
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004922:	4a15      	ldr	r2, [pc, #84]	@ (8004978 <xTaskPriorityInherit+0xcc>)
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4a10      	ldr	r2, [pc, #64]	@ (8004974 <xTaskPriorityInherit+0xc8>)
 8004934:	441a      	add	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	3304      	adds	r3, #4
 800493a:	4619      	mov	r1, r3
 800493c:	4610      	mov	r0, r2
 800493e:	f7fe f9c0 	bl	8002cc2 <vListInsertEnd>
 8004942:	e004      	b.n	800494e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004944:	4b0a      	ldr	r3, [pc, #40]	@ (8004970 <xTaskPriorityInherit+0xc4>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800494e:	2301      	movs	r3, #1
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	e008      	b.n	8004966 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004958:	4b05      	ldr	r3, [pc, #20]	@ (8004970 <xTaskPriorityInherit+0xc4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495e:	429a      	cmp	r2, r3
 8004960:	d201      	bcs.n	8004966 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004962:	2301      	movs	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004966:	68fb      	ldr	r3, [r7, #12]
	}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	2000078c 	.word	0x2000078c
 8004974:	20000790 	.word	0x20000790
 8004978:	20000c68 	.word	0x20000c68

0800497c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d058      	beq.n	8004a44 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004992:	4b2f      	ldr	r3, [pc, #188]	@ (8004a50 <xTaskPriorityDisinherit+0xd4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	429a      	cmp	r2, r3
 800499a:	d00b      	beq.n	80049b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	60fb      	str	r3, [r7, #12]
}
 80049ae:	bf00      	nop
 80049b0:	bf00      	nop
 80049b2:	e7fd      	b.n	80049b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10b      	bne.n	80049d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	60bb      	str	r3, [r7, #8]
}
 80049ce:	bf00      	nop
 80049d0:	bf00      	nop
 80049d2:	e7fd      	b.n	80049d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d8:	1e5a      	subs	r2, r3, #1
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d02c      	beq.n	8004a44 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d128      	bne.n	8004a44 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	3304      	adds	r3, #4
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fe f9c0 	bl	8002d7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a14:	4b0f      	ldr	r3, [pc, #60]	@ (8004a54 <xTaskPriorityDisinherit+0xd8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d903      	bls.n	8004a24 <xTaskPriorityDisinherit+0xa8>
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a20:	4a0c      	ldr	r2, [pc, #48]	@ (8004a54 <xTaskPriorityDisinherit+0xd8>)
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4a09      	ldr	r2, [pc, #36]	@ (8004a58 <xTaskPriorityDisinherit+0xdc>)
 8004a32:	441a      	add	r2, r3
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	3304      	adds	r3, #4
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	f7fe f941 	bl	8002cc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a40:	2301      	movs	r3, #1
 8004a42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a44:	697b      	ldr	r3, [r7, #20]
	}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	2000078c 	.word	0x2000078c
 8004a54:	20000c68 	.word	0x20000c68
 8004a58:	20000790 	.word	0x20000790

08004a5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d06c      	beq.n	8004b4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10b      	bne.n	8004a94 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	60fb      	str	r3, [r7, #12]
}
 8004a8e:	bf00      	nop
 8004a90:	bf00      	nop
 8004a92:	e7fd      	b.n	8004a90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d902      	bls.n	8004aa4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	61fb      	str	r3, [r7, #28]
 8004aa2:	e002      	b.n	8004aaa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aa8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aae:	69fa      	ldr	r2, [r7, #28]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d04c      	beq.n	8004b4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d147      	bne.n	8004b4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004abe:	4b26      	ldr	r3, [pc, #152]	@ (8004b58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d10b      	bne.n	8004ae0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	60bb      	str	r3, [r7, #8]
}
 8004ada:	bf00      	nop
 8004adc:	bf00      	nop
 8004ade:	e7fd      	b.n	8004adc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	db04      	blt.n	8004afe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	6959      	ldr	r1, [r3, #20]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4a13      	ldr	r2, [pc, #76]	@ (8004b5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004b0e:	4413      	add	r3, r2
 8004b10:	4299      	cmp	r1, r3
 8004b12:	d11c      	bne.n	8004b4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	3304      	adds	r3, #4
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fe f92f 	bl	8002d7c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b22:	4b0f      	ldr	r3, [pc, #60]	@ (8004b60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d903      	bls.n	8004b32 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8004b60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b36:	4613      	mov	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4a07      	ldr	r2, [pc, #28]	@ (8004b5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004b40:	441a      	add	r2, r3
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	3304      	adds	r3, #4
 8004b46:	4619      	mov	r1, r3
 8004b48:	4610      	mov	r0, r2
 8004b4a:	f7fe f8ba 	bl	8002cc2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b4e:	bf00      	nop
 8004b50:	3720      	adds	r7, #32
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	2000078c 	.word	0x2000078c
 8004b5c:	20000790 	.word	0x20000790
 8004b60:	20000c68 	.word	0x20000c68

08004b64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004b68:	4b07      	ldr	r3, [pc, #28]	@ (8004b88 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d004      	beq.n	8004b7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004b70:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b76:	3201      	adds	r2, #1
 8004b78:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004b7a:	4b03      	ldr	r3, [pc, #12]	@ (8004b88 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
	}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	2000078c 	.word	0x2000078c

08004b8c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004b9a:	f000 fecd 	bl	8005938 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004b9e:	4b26      	ldr	r3, [pc, #152]	@ (8004c38 <xTaskNotifyWait+0xac>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d01a      	beq.n	8004be2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004bac:	4b22      	ldr	r3, [pc, #136]	@ (8004c38 <xTaskNotifyWait+0xac>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	43d2      	mvns	r2, r2
 8004bb6:	400a      	ands	r2, r1
 8004bb8:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004bba:	4b1f      	ldr	r3, [pc, #124]	@ (8004c38 <xTaskNotifyWait+0xac>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00b      	beq.n	8004be2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bca:	2101      	movs	r1, #1
 8004bcc:	6838      	ldr	r0, [r7, #0]
 8004bce:	f000 f9d1 	bl	8004f74 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8004c3c <xTaskNotifyWait+0xb0>)
 8004bd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004be2:	f000 fedb 	bl	800599c <vPortExitCritical>

		taskENTER_CRITICAL();
 8004be6:	f000 fea7 	bl	8005938 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d004      	beq.n	8004bfa <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004bf0:	4b11      	ldr	r3, [pc, #68]	@ (8004c38 <xTaskNotifyWait+0xac>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8004c38 <xTaskNotifyWait+0xac>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d002      	beq.n	8004c0e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	e008      	b.n	8004c20 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c38 <xTaskNotifyWait+0xac>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	43d2      	mvns	r2, r2
 8004c18:	400a      	ands	r2, r1
 8004c1a:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c20:	4b05      	ldr	r3, [pc, #20]	@ (8004c38 <xTaskNotifyWait+0xac>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 8004c2a:	f000 feb7 	bl	800599c <vPortExitCritical>

		return xReturn;
 8004c2e:	697b      	ldr	r3, [r7, #20]
	}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	2000078c 	.word	0x2000078c
 8004c3c:	e000ed04 	.word	0xe000ed04

08004c40 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08a      	sub	sp, #40	@ 0x28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	603b      	str	r3, [r7, #0]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004c50:	2301      	movs	r3, #1
 8004c52:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10b      	bne.n	8004c72 <xTaskGenericNotify+0x32>
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	61bb      	str	r3, [r7, #24]
}
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop
 8004c70:	e7fd      	b.n	8004c6e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8004c76:	f000 fe5f 	bl	8005938 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c8e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d827      	bhi.n	8004cee <xTaskGenericNotify+0xae>
 8004c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca4 <xTaskGenericNotify+0x64>)
 8004ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca4:	08004d11 	.word	0x08004d11
 8004ca8:	08004cb9 	.word	0x08004cb9
 8004cac:	08004cc7 	.word	0x08004cc7
 8004cb0:	08004cd3 	.word	0x08004cd3
 8004cb4:	08004cdb 	.word	0x08004cdb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8004cc4:	e027      	b.n	8004d16 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8004cd0:	e021      	b.n	8004d16 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8004cd8:	e01d      	b.n	8004d16 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004cda:	7ffb      	ldrb	r3, [r7, #31]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d003      	beq.n	8004ce8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004ce6:	e016      	b.n	8004d16 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8004cec:	e013      	b.n	8004d16 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf6:	d00d      	beq.n	8004d14 <xTaskGenericNotify+0xd4>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	617b      	str	r3, [r7, #20]
}
 8004d0a:	bf00      	nop
 8004d0c:	bf00      	nop
 8004d0e:	e7fd      	b.n	8004d0c <xTaskGenericNotify+0xcc>
					break;
 8004d10:	bf00      	nop
 8004d12:	e000      	b.n	8004d16 <xTaskGenericNotify+0xd6>

					break;
 8004d14:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004d16:	7ffb      	ldrb	r3, [r7, #31]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d13b      	bne.n	8004d94 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fe f82b 	bl	8002d7c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8004da4 <xTaskGenericNotify+0x164>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d903      	bls.n	8004d3a <xTaskGenericNotify+0xfa>
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d36:	4a1b      	ldr	r2, [pc, #108]	@ (8004da4 <xTaskGenericNotify+0x164>)
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4a18      	ldr	r2, [pc, #96]	@ (8004da8 <xTaskGenericNotify+0x168>)
 8004d48:	441a      	add	r2, r3
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4610      	mov	r0, r2
 8004d52:	f7fd ffb6 	bl	8002cc2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <xTaskGenericNotify+0x136>
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	613b      	str	r3, [r7, #16]
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	e7fd      	b.n	8004d72 <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004dac <xTaskGenericNotify+0x16c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d907      	bls.n	8004d94 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8004d84:	4b0a      	ldr	r3, [pc, #40]	@ (8004db0 <xTaskGenericNotify+0x170>)
 8004d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004d94:	f000 fe02 	bl	800599c <vPortExitCritical>

		return xReturn;
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3728      	adds	r7, #40	@ 0x28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20000c68 	.word	0x20000c68
 8004da8:	20000790 	.word	0x20000790
 8004dac:	2000078c 	.word	0x2000078c
 8004db0:	e000ed04 	.word	0xe000ed04

08004db4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08e      	sub	sp, #56	@ 0x38
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	603b      	str	r3, [r7, #0]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10b      	bne.n	8004de6 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004de0:	bf00      	nop
 8004de2:	bf00      	nop
 8004de4:	e7fd      	b.n	8004de2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004de6:	f000 fe87 	bl	8005af8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8004dee:	f3ef 8211 	mrs	r2, BASEPRI
 8004df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	623a      	str	r2, [r7, #32]
 8004e04:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004e06:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e12:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e24:	2202      	movs	r2, #2
 8004e26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d829      	bhi.n	8004e84 <xTaskGenericNotifyFromISR+0xd0>
 8004e30:	a201      	add	r2, pc, #4	@ (adr r2, 8004e38 <xTaskGenericNotifyFromISR+0x84>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004ea7 	.word	0x08004ea7
 8004e3c:	08004e4d 	.word	0x08004e4d
 8004e40:	08004e5b 	.word	0x08004e5b
 8004e44:	08004e67 	.word	0x08004e67
 8004e48:	08004e6f 	.word	0x08004e6f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e56:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8004e58:	e028      	b.n	8004eac <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e62:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8004e64:	e022      	b.n	8004eac <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8004e6c:	e01e      	b.n	8004eac <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004e6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d003      	beq.n	8004e7e <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004e7c:	e016      	b.n	8004eac <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8004e82:	e013      	b.n	8004eac <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8c:	d00d      	beq.n	8004eaa <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	61bb      	str	r3, [r7, #24]
}
 8004ea0:	bf00      	nop
 8004ea2:	bf00      	nop
 8004ea4:	e7fd      	b.n	8004ea2 <xTaskGenericNotifyFromISR+0xee>
					break;
 8004ea6:	bf00      	nop
 8004ea8:	e000      	b.n	8004eac <xTaskGenericNotifyFromISR+0xf8>
					break;
 8004eaa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004eac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d147      	bne.n	8004f44 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00b      	beq.n	8004ed4 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	617b      	str	r3, [r7, #20]
}
 8004ece:	bf00      	nop
 8004ed0:	bf00      	nop
 8004ed2:	e7fd      	b.n	8004ed0 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ed4:	4b21      	ldr	r3, [pc, #132]	@ (8004f5c <xTaskGenericNotifyFromISR+0x1a8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d11d      	bne.n	8004f18 <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ede:	3304      	adds	r3, #4
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fd ff4b 	bl	8002d7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eea:	4b1d      	ldr	r3, [pc, #116]	@ (8004f60 <xTaskGenericNotifyFromISR+0x1ac>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d903      	bls.n	8004efa <xTaskGenericNotifyFromISR+0x146>
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8004f60 <xTaskGenericNotifyFromISR+0x1ac>)
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4a17      	ldr	r2, [pc, #92]	@ (8004f64 <xTaskGenericNotifyFromISR+0x1b0>)
 8004f08:	441a      	add	r2, r3
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4610      	mov	r0, r2
 8004f12:	f7fd fed6 	bl	8002cc2 <vListInsertEnd>
 8004f16:	e005      	b.n	8004f24 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1a:	3318      	adds	r3, #24
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4812      	ldr	r0, [pc, #72]	@ (8004f68 <xTaskGenericNotifyFromISR+0x1b4>)
 8004f20:	f7fd fecf 	bl	8002cc2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f28:	4b10      	ldr	r3, [pc, #64]	@ (8004f6c <xTaskGenericNotifyFromISR+0x1b8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d908      	bls.n	8004f44 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004f32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f70 <xTaskGenericNotifyFromISR+0x1bc>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f46:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f383 8811 	msr	BASEPRI, r3
}
 8004f4e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8004f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3738      	adds	r7, #56	@ 0x38
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	20000c88 	.word	0x20000c88
 8004f60:	20000c68 	.word	0x20000c68
 8004f64:	20000790 	.word	0x20000790
 8004f68:	20000c20 	.word	0x20000c20
 8004f6c:	2000078c 	.word	0x2000078c
 8004f70:	20000c74 	.word	0x20000c74

08004f74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f7e:	4b21      	ldr	r3, [pc, #132]	@ (8005004 <prvAddCurrentTaskToDelayedList+0x90>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f84:	4b20      	ldr	r3, [pc, #128]	@ (8005008 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fd fef6 	bl	8002d7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f96:	d10a      	bne.n	8004fae <prvAddCurrentTaskToDelayedList+0x3a>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d007      	beq.n	8004fae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005008 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4819      	ldr	r0, [pc, #100]	@ (800500c <prvAddCurrentTaskToDelayedList+0x98>)
 8004fa8:	f7fd fe8b 	bl	8002cc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fac:	e026      	b.n	8004ffc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fb6:	4b14      	ldr	r3, [pc, #80]	@ (8005008 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d209      	bcs.n	8004fda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fc6:	4b12      	ldr	r3, [pc, #72]	@ (8005010 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4b0f      	ldr	r3, [pc, #60]	@ (8005008 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	f7fd fe99 	bl	8002d0a <vListInsert>
}
 8004fd8:	e010      	b.n	8004ffc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fda:	4b0e      	ldr	r3, [pc, #56]	@ (8005014 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	4b0a      	ldr	r3, [pc, #40]	@ (8005008 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	f7fd fe8f 	bl	8002d0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fec:	4b0a      	ldr	r3, [pc, #40]	@ (8005018 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d202      	bcs.n	8004ffc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004ff6:	4a08      	ldr	r2, [pc, #32]	@ (8005018 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	6013      	str	r3, [r2, #0]
}
 8004ffc:	bf00      	nop
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20000c64 	.word	0x20000c64
 8005008:	2000078c 	.word	0x2000078c
 800500c:	20000c4c 	.word	0x20000c4c
 8005010:	20000c1c 	.word	0x20000c1c
 8005014:	20000c18 	.word	0x20000c18
 8005018:	20000c80 	.word	0x20000c80

0800501c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08a      	sub	sp, #40	@ 0x28
 8005020:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005022:	2300      	movs	r3, #0
 8005024:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005026:	f000 fb13 	bl	8005650 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800502a:	4b1d      	ldr	r3, [pc, #116]	@ (80050a0 <xTimerCreateTimerTask+0x84>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d021      	beq.n	8005076 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005032:	2300      	movs	r3, #0
 8005034:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005036:	2300      	movs	r3, #0
 8005038:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800503a:	1d3a      	adds	r2, r7, #4
 800503c:	f107 0108 	add.w	r1, r7, #8
 8005040:	f107 030c 	add.w	r3, r7, #12
 8005044:	4618      	mov	r0, r3
 8005046:	f7fd fdf5 	bl	8002c34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	9202      	str	r2, [sp, #8]
 8005052:	9301      	str	r3, [sp, #4]
 8005054:	2302      	movs	r3, #2
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	2300      	movs	r3, #0
 800505a:	460a      	mov	r2, r1
 800505c:	4911      	ldr	r1, [pc, #68]	@ (80050a4 <xTimerCreateTimerTask+0x88>)
 800505e:	4812      	ldr	r0, [pc, #72]	@ (80050a8 <xTimerCreateTimerTask+0x8c>)
 8005060:	f7fe fdcc 	bl	8003bfc <xTaskCreateStatic>
 8005064:	4603      	mov	r3, r0
 8005066:	4a11      	ldr	r2, [pc, #68]	@ (80050ac <xTimerCreateTimerTask+0x90>)
 8005068:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800506a:	4b10      	ldr	r3, [pc, #64]	@ (80050ac <xTimerCreateTimerTask+0x90>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005072:	2301      	movs	r3, #1
 8005074:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10b      	bne.n	8005094 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	613b      	str	r3, [r7, #16]
}
 800508e:	bf00      	nop
 8005090:	bf00      	nop
 8005092:	e7fd      	b.n	8005090 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005094:	697b      	ldr	r3, [r7, #20]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20000cbc 	.word	0x20000cbc
 80050a4:	08006008 	.word	0x08006008
 80050a8:	080051e9 	.word	0x080051e9
 80050ac:	20000cc0 	.word	0x20000cc0

080050b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08a      	sub	sp, #40	@ 0x28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80050be:	2300      	movs	r3, #0
 80050c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10b      	bne.n	80050e0 <xTimerGenericCommand+0x30>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	623b      	str	r3, [r7, #32]
}
 80050da:	bf00      	nop
 80050dc:	bf00      	nop
 80050de:	e7fd      	b.n	80050dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80050e0:	4b19      	ldr	r3, [pc, #100]	@ (8005148 <xTimerGenericCommand+0x98>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d02a      	beq.n	800513e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2b05      	cmp	r3, #5
 80050f8:	dc18      	bgt.n	800512c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80050fa:	f7ff fbb9 	bl	8004870 <xTaskGetSchedulerState>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b02      	cmp	r3, #2
 8005102:	d109      	bne.n	8005118 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005104:	4b10      	ldr	r3, [pc, #64]	@ (8005148 <xTimerGenericCommand+0x98>)
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	f107 0110 	add.w	r1, r7, #16
 800510c:	2300      	movs	r3, #0
 800510e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005110:	f7fe f85c 	bl	80031cc <xQueueGenericSend>
 8005114:	6278      	str	r0, [r7, #36]	@ 0x24
 8005116:	e012      	b.n	800513e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005118:	4b0b      	ldr	r3, [pc, #44]	@ (8005148 <xTimerGenericCommand+0x98>)
 800511a:	6818      	ldr	r0, [r3, #0]
 800511c:	f107 0110 	add.w	r1, r7, #16
 8005120:	2300      	movs	r3, #0
 8005122:	2200      	movs	r2, #0
 8005124:	f7fe f852 	bl	80031cc <xQueueGenericSend>
 8005128:	6278      	str	r0, [r7, #36]	@ 0x24
 800512a:	e008      	b.n	800513e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800512c:	4b06      	ldr	r3, [pc, #24]	@ (8005148 <xTimerGenericCommand+0x98>)
 800512e:	6818      	ldr	r0, [r3, #0]
 8005130:	f107 0110 	add.w	r1, r7, #16
 8005134:	2300      	movs	r3, #0
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	f7fe f94a 	bl	80033d0 <xQueueGenericSendFromISR>
 800513c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005140:	4618      	mov	r0, r3
 8005142:	3728      	adds	r7, #40	@ 0x28
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20000cbc 	.word	0x20000cbc

0800514c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af02      	add	r7, sp, #8
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005156:	4b23      	ldr	r3, [pc, #140]	@ (80051e4 <prvProcessExpiredTimer+0x98>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	3304      	adds	r3, #4
 8005164:	4618      	mov	r0, r3
 8005166:	f7fd fe09 	bl	8002d7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	d023      	beq.n	80051c0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	699a      	ldr	r2, [r3, #24]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	18d1      	adds	r1, r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	6978      	ldr	r0, [r7, #20]
 8005186:	f000 f8d5 	bl	8005334 <prvInsertTimerInActiveList>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d020      	beq.n	80051d2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005190:	2300      	movs	r3, #0
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	2300      	movs	r3, #0
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	2100      	movs	r1, #0
 800519a:	6978      	ldr	r0, [r7, #20]
 800519c:	f7ff ff88 	bl	80050b0 <xTimerGenericCommand>
 80051a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d114      	bne.n	80051d2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	60fb      	str	r3, [r7, #12]
}
 80051ba:	bf00      	nop
 80051bc:	bf00      	nop
 80051be:	e7fd      	b.n	80051bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051c6:	f023 0301 	bic.w	r3, r3, #1
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	6978      	ldr	r0, [r7, #20]
 80051d8:	4798      	blx	r3
}
 80051da:	bf00      	nop
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	20000cb4 	.word	0x20000cb4

080051e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051f0:	f107 0308 	add.w	r3, r7, #8
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 f859 	bl	80052ac <prvGetNextExpireTime>
 80051fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4619      	mov	r1, r3
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 f805 	bl	8005210 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005206:	f000 f8d7 	bl	80053b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800520a:	bf00      	nop
 800520c:	e7f0      	b.n	80051f0 <prvTimerTask+0x8>
	...

08005210 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800521a:	f7fe ff33 	bl	8004084 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800521e:	f107 0308 	add.w	r3, r7, #8
 8005222:	4618      	mov	r0, r3
 8005224:	f000 f866 	bl	80052f4 <prvSampleTimeNow>
 8005228:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d130      	bne.n	8005292 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10a      	bne.n	800524c <prvProcessTimerOrBlockTask+0x3c>
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	429a      	cmp	r2, r3
 800523c:	d806      	bhi.n	800524c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800523e:	f7fe ff2f 	bl	80040a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005242:	68f9      	ldr	r1, [r7, #12]
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff ff81 	bl	800514c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800524a:	e024      	b.n	8005296 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d008      	beq.n	8005264 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005252:	4b13      	ldr	r3, [pc, #76]	@ (80052a0 <prvProcessTimerOrBlockTask+0x90>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <prvProcessTimerOrBlockTask+0x50>
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <prvProcessTimerOrBlockTask+0x52>
 8005260:	2300      	movs	r3, #0
 8005262:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005264:	4b0f      	ldr	r3, [pc, #60]	@ (80052a4 <prvProcessTimerOrBlockTask+0x94>)
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	4619      	mov	r1, r3
 8005272:	f7fe fc8f 	bl	8003b94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005276:	f7fe ff13 	bl	80040a0 <xTaskResumeAll>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10a      	bne.n	8005296 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005280:	4b09      	ldr	r3, [pc, #36]	@ (80052a8 <prvProcessTimerOrBlockTask+0x98>)
 8005282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	f3bf 8f6f 	isb	sy
}
 8005290:	e001      	b.n	8005296 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005292:	f7fe ff05 	bl	80040a0 <xTaskResumeAll>
}
 8005296:	bf00      	nop
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000cb8 	.word	0x20000cb8
 80052a4:	20000cbc 	.word	0x20000cbc
 80052a8:	e000ed04 	.word	0xe000ed04

080052ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80052b4:	4b0e      	ldr	r3, [pc, #56]	@ (80052f0 <prvGetNextExpireTime+0x44>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <prvGetNextExpireTime+0x16>
 80052be:	2201      	movs	r2, #1
 80052c0:	e000      	b.n	80052c4 <prvGetNextExpireTime+0x18>
 80052c2:	2200      	movs	r2, #0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d105      	bne.n	80052dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052d0:	4b07      	ldr	r3, [pc, #28]	@ (80052f0 <prvGetNextExpireTime+0x44>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	e001      	b.n	80052e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80052e0:	68fb      	ldr	r3, [r7, #12]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000cb4 	.word	0x20000cb4

080052f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80052fc:	f7fe ff6e 	bl	80041dc <xTaskGetTickCount>
 8005300:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005302:	4b0b      	ldr	r3, [pc, #44]	@ (8005330 <prvSampleTimeNow+0x3c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	429a      	cmp	r2, r3
 800530a:	d205      	bcs.n	8005318 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800530c:	f000 f93a 	bl	8005584 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	e002      	b.n	800531e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800531e:	4a04      	ldr	r2, [pc, #16]	@ (8005330 <prvSampleTimeNow+0x3c>)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005324:	68fb      	ldr	r3, [r7, #12]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20000cc4 	.word	0x20000cc4

08005334 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005342:	2300      	movs	r3, #0
 8005344:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	429a      	cmp	r2, r3
 8005358:	d812      	bhi.n	8005380 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	1ad2      	subs	r2, r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	429a      	cmp	r2, r3
 8005366:	d302      	bcc.n	800536e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005368:	2301      	movs	r3, #1
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	e01b      	b.n	80053a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800536e:	4b10      	ldr	r3, [pc, #64]	@ (80053b0 <prvInsertTimerInActiveList+0x7c>)
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	3304      	adds	r3, #4
 8005376:	4619      	mov	r1, r3
 8005378:	4610      	mov	r0, r2
 800537a:	f7fd fcc6 	bl	8002d0a <vListInsert>
 800537e:	e012      	b.n	80053a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d206      	bcs.n	8005396 <prvInsertTimerInActiveList+0x62>
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d302      	bcc.n	8005396 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005390:	2301      	movs	r3, #1
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	e007      	b.n	80053a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005396:	4b07      	ldr	r3, [pc, #28]	@ (80053b4 <prvInsertTimerInActiveList+0x80>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3304      	adds	r3, #4
 800539e:	4619      	mov	r1, r3
 80053a0:	4610      	mov	r0, r2
 80053a2:	f7fd fcb2 	bl	8002d0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80053a6:	697b      	ldr	r3, [r7, #20]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	20000cb8 	.word	0x20000cb8
 80053b4:	20000cb4 	.word	0x20000cb4

080053b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08e      	sub	sp, #56	@ 0x38
 80053bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053be:	e0ce      	b.n	800555e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	da19      	bge.n	80053fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80053c6:	1d3b      	adds	r3, r7, #4
 80053c8:	3304      	adds	r3, #4
 80053ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80053cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10b      	bne.n	80053ea <prvProcessReceivedCommands+0x32>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	61fb      	str	r3, [r7, #28]
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	e7fd      	b.n	80053e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80053ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053f0:	6850      	ldr	r0, [r2, #4]
 80053f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053f4:	6892      	ldr	r2, [r2, #8]
 80053f6:	4611      	mov	r1, r2
 80053f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f2c0 80ae 	blt.w	800555e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d004      	beq.n	8005418 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800540e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005410:	3304      	adds	r3, #4
 8005412:	4618      	mov	r0, r3
 8005414:	f7fd fcb2 	bl	8002d7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005418:	463b      	mov	r3, r7
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff ff6a 	bl	80052f4 <prvSampleTimeNow>
 8005420:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b09      	cmp	r3, #9
 8005426:	f200 8097 	bhi.w	8005558 <prvProcessReceivedCommands+0x1a0>
 800542a:	a201      	add	r2, pc, #4	@ (adr r2, 8005430 <prvProcessReceivedCommands+0x78>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08005459 	.word	0x08005459
 8005434:	08005459 	.word	0x08005459
 8005438:	08005459 	.word	0x08005459
 800543c:	080054cf 	.word	0x080054cf
 8005440:	080054e3 	.word	0x080054e3
 8005444:	0800552f 	.word	0x0800552f
 8005448:	08005459 	.word	0x08005459
 800544c:	08005459 	.word	0x08005459
 8005450:	080054cf 	.word	0x080054cf
 8005454:	080054e3 	.word	0x080054e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800545e:	f043 0301 	orr.w	r3, r3, #1
 8005462:	b2da      	uxtb	r2, r3
 8005464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005466:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	18d1      	adds	r1, r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005476:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005478:	f7ff ff5c 	bl	8005334 <prvInsertTimerInActiveList>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d06c      	beq.n	800555c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005488:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800548a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b00      	cmp	r3, #0
 8005496:	d061      	beq.n	800555c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	441a      	add	r2, r3
 80054a0:	2300      	movs	r3, #0
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	2300      	movs	r3, #0
 80054a6:	2100      	movs	r1, #0
 80054a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054aa:	f7ff fe01 	bl	80050b0 <xTimerGenericCommand>
 80054ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d152      	bne.n	800555c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	61bb      	str	r3, [r7, #24]
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	e7fd      	b.n	80054ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054d4:	f023 0301 	bic.w	r3, r3, #1
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80054e0:	e03d      	b.n	800555e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054e8:	f043 0301 	orr.w	r3, r3, #1
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80054fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10b      	bne.n	800551a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	617b      	str	r3, [r7, #20]
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	e7fd      	b.n	8005516 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800551a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005520:	18d1      	adds	r1, r2, r3
 8005522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005528:	f7ff ff04 	bl	8005334 <prvInsertTimerInActiveList>
					break;
 800552c:	e017      	b.n	800555e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800552e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005530:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d103      	bne.n	8005544 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800553c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800553e:	f000 fbeb 	bl	8005d18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005542:	e00c      	b.n	800555e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005546:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800554a:	f023 0301 	bic.w	r3, r3, #1
 800554e:	b2da      	uxtb	r2, r3
 8005550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005552:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005556:	e002      	b.n	800555e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005558:	bf00      	nop
 800555a:	e000      	b.n	800555e <prvProcessReceivedCommands+0x1a6>
					break;
 800555c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800555e:	4b08      	ldr	r3, [pc, #32]	@ (8005580 <prvProcessReceivedCommands+0x1c8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	1d39      	adds	r1, r7, #4
 8005564:	2200      	movs	r2, #0
 8005566:	4618      	mov	r0, r3
 8005568:	f7fd ffd0 	bl	800350c <xQueueReceive>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	f47f af26 	bne.w	80053c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop
 8005578:	3730      	adds	r7, #48	@ 0x30
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000cbc 	.word	0x20000cbc

08005584 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b088      	sub	sp, #32
 8005588:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800558a:	e049      	b.n	8005620 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800558c:	4b2e      	ldr	r3, [pc, #184]	@ (8005648 <prvSwitchTimerLists+0xc4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005596:	4b2c      	ldr	r3, [pc, #176]	@ (8005648 <prvSwitchTimerLists+0xc4>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fd fbe9 	bl	8002d7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d02f      	beq.n	8005620 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4413      	add	r3, r2
 80055c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d90e      	bls.n	80055f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055de:	4b1a      	ldr	r3, [pc, #104]	@ (8005648 <prvSwitchTimerLists+0xc4>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	3304      	adds	r3, #4
 80055e6:	4619      	mov	r1, r3
 80055e8:	4610      	mov	r0, r2
 80055ea:	f7fd fb8e 	bl	8002d0a <vListInsert>
 80055ee:	e017      	b.n	8005620 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055f0:	2300      	movs	r3, #0
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	2300      	movs	r3, #0
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	2100      	movs	r1, #0
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f7ff fd58 	bl	80050b0 <xTimerGenericCommand>
 8005600:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10b      	bne.n	8005620 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	603b      	str	r3, [r7, #0]
}
 800561a:	bf00      	nop
 800561c:	bf00      	nop
 800561e:	e7fd      	b.n	800561c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005620:	4b09      	ldr	r3, [pc, #36]	@ (8005648 <prvSwitchTimerLists+0xc4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1b0      	bne.n	800558c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800562a:	4b07      	ldr	r3, [pc, #28]	@ (8005648 <prvSwitchTimerLists+0xc4>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005630:	4b06      	ldr	r3, [pc, #24]	@ (800564c <prvSwitchTimerLists+0xc8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a04      	ldr	r2, [pc, #16]	@ (8005648 <prvSwitchTimerLists+0xc4>)
 8005636:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005638:	4a04      	ldr	r2, [pc, #16]	@ (800564c <prvSwitchTimerLists+0xc8>)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	6013      	str	r3, [r2, #0]
}
 800563e:	bf00      	nop
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000cb4 	.word	0x20000cb4
 800564c:	20000cb8 	.word	0x20000cb8

08005650 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005656:	f000 f96f 	bl	8005938 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800565a:	4b15      	ldr	r3, [pc, #84]	@ (80056b0 <prvCheckForValidListAndQueue+0x60>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d120      	bne.n	80056a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005662:	4814      	ldr	r0, [pc, #80]	@ (80056b4 <prvCheckForValidListAndQueue+0x64>)
 8005664:	f7fd fb00 	bl	8002c68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005668:	4813      	ldr	r0, [pc, #76]	@ (80056b8 <prvCheckForValidListAndQueue+0x68>)
 800566a:	f7fd fafd 	bl	8002c68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800566e:	4b13      	ldr	r3, [pc, #76]	@ (80056bc <prvCheckForValidListAndQueue+0x6c>)
 8005670:	4a10      	ldr	r2, [pc, #64]	@ (80056b4 <prvCheckForValidListAndQueue+0x64>)
 8005672:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005674:	4b12      	ldr	r3, [pc, #72]	@ (80056c0 <prvCheckForValidListAndQueue+0x70>)
 8005676:	4a10      	ldr	r2, [pc, #64]	@ (80056b8 <prvCheckForValidListAndQueue+0x68>)
 8005678:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800567a:	2300      	movs	r3, #0
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	4b11      	ldr	r3, [pc, #68]	@ (80056c4 <prvCheckForValidListAndQueue+0x74>)
 8005680:	4a11      	ldr	r2, [pc, #68]	@ (80056c8 <prvCheckForValidListAndQueue+0x78>)
 8005682:	2110      	movs	r1, #16
 8005684:	200a      	movs	r0, #10
 8005686:	f7fd fc0d 	bl	8002ea4 <xQueueGenericCreateStatic>
 800568a:	4603      	mov	r3, r0
 800568c:	4a08      	ldr	r2, [pc, #32]	@ (80056b0 <prvCheckForValidListAndQueue+0x60>)
 800568e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005690:	4b07      	ldr	r3, [pc, #28]	@ (80056b0 <prvCheckForValidListAndQueue+0x60>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005698:	4b05      	ldr	r3, [pc, #20]	@ (80056b0 <prvCheckForValidListAndQueue+0x60>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	490b      	ldr	r1, [pc, #44]	@ (80056cc <prvCheckForValidListAndQueue+0x7c>)
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fe fa4e 	bl	8003b40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056a4:	f000 f97a 	bl	800599c <vPortExitCritical>
}
 80056a8:	bf00      	nop
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20000cbc 	.word	0x20000cbc
 80056b4:	20000c8c 	.word	0x20000c8c
 80056b8:	20000ca0 	.word	0x20000ca0
 80056bc:	20000cb4 	.word	0x20000cb4
 80056c0:	20000cb8 	.word	0x20000cb8
 80056c4:	20000d68 	.word	0x20000d68
 80056c8:	20000cc8 	.word	0x20000cc8
 80056cc:	08006010 	.word	0x08006010

080056d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	3b04      	subs	r3, #4
 80056e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80056e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3b04      	subs	r3, #4
 80056ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f023 0201 	bic.w	r2, r3, #1
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3b04      	subs	r3, #4
 80056fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005700:	4a0c      	ldr	r2, [pc, #48]	@ (8005734 <pxPortInitialiseStack+0x64>)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3b14      	subs	r3, #20
 800570a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3b04      	subs	r3, #4
 8005716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f06f 0202 	mvn.w	r2, #2
 800571e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	3b20      	subs	r3, #32
 8005724:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005726:	68fb      	ldr	r3, [r7, #12]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	08005739 	.word	0x08005739

08005738 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005742:	4b13      	ldr	r3, [pc, #76]	@ (8005790 <prvTaskExitError+0x58>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574a:	d00b      	beq.n	8005764 <prvTaskExitError+0x2c>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	60fb      	str	r3, [r7, #12]
}
 800575e:	bf00      	nop
 8005760:	bf00      	nop
 8005762:	e7fd      	b.n	8005760 <prvTaskExitError+0x28>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	60bb      	str	r3, [r7, #8]
}
 8005776:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005778:	bf00      	nop
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0fc      	beq.n	800577a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	2000000c 	.word	0x2000000c
	...

080057a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057a0:	4b07      	ldr	r3, [pc, #28]	@ (80057c0 <pxCurrentTCBConst2>)
 80057a2:	6819      	ldr	r1, [r3, #0]
 80057a4:	6808      	ldr	r0, [r1, #0]
 80057a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057aa:	f380 8809 	msr	PSP, r0
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f04f 0000 	mov.w	r0, #0
 80057b6:	f380 8811 	msr	BASEPRI, r0
 80057ba:	4770      	bx	lr
 80057bc:	f3af 8000 	nop.w

080057c0 <pxCurrentTCBConst2>:
 80057c0:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057c4:	bf00      	nop
 80057c6:	bf00      	nop

080057c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057c8:	4808      	ldr	r0, [pc, #32]	@ (80057ec <prvPortStartFirstTask+0x24>)
 80057ca:	6800      	ldr	r0, [r0, #0]
 80057cc:	6800      	ldr	r0, [r0, #0]
 80057ce:	f380 8808 	msr	MSP, r0
 80057d2:	f04f 0000 	mov.w	r0, #0
 80057d6:	f380 8814 	msr	CONTROL, r0
 80057da:	b662      	cpsie	i
 80057dc:	b661      	cpsie	f
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	df00      	svc	0
 80057e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057ea:	bf00      	nop
 80057ec:	e000ed08 	.word	0xe000ed08

080057f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057f6:	4b47      	ldr	r3, [pc, #284]	@ (8005914 <xPortStartScheduler+0x124>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a47      	ldr	r2, [pc, #284]	@ (8005918 <xPortStartScheduler+0x128>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d10b      	bne.n	8005818 <xPortStartScheduler+0x28>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	613b      	str	r3, [r7, #16]
}
 8005812:	bf00      	nop
 8005814:	bf00      	nop
 8005816:	e7fd      	b.n	8005814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005818:	4b3e      	ldr	r3, [pc, #248]	@ (8005914 <xPortStartScheduler+0x124>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a3f      	ldr	r2, [pc, #252]	@ (800591c <xPortStartScheduler+0x12c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d10b      	bne.n	800583a <xPortStartScheduler+0x4a>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	60fb      	str	r3, [r7, #12]
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	e7fd      	b.n	8005836 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800583a:	4b39      	ldr	r3, [pc, #228]	@ (8005920 <xPortStartScheduler+0x130>)
 800583c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	22ff      	movs	r2, #255	@ 0xff
 800584a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800585c:	b2da      	uxtb	r2, r3
 800585e:	4b31      	ldr	r3, [pc, #196]	@ (8005924 <xPortStartScheduler+0x134>)
 8005860:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005862:	4b31      	ldr	r3, [pc, #196]	@ (8005928 <xPortStartScheduler+0x138>)
 8005864:	2207      	movs	r2, #7
 8005866:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005868:	e009      	b.n	800587e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800586a:	4b2f      	ldr	r3, [pc, #188]	@ (8005928 <xPortStartScheduler+0x138>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3b01      	subs	r3, #1
 8005870:	4a2d      	ldr	r2, [pc, #180]	@ (8005928 <xPortStartScheduler+0x138>)
 8005872:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005874:	78fb      	ldrb	r3, [r7, #3]
 8005876:	b2db      	uxtb	r3, r3
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	b2db      	uxtb	r3, r3
 800587c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800587e:	78fb      	ldrb	r3, [r7, #3]
 8005880:	b2db      	uxtb	r3, r3
 8005882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005886:	2b80      	cmp	r3, #128	@ 0x80
 8005888:	d0ef      	beq.n	800586a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800588a:	4b27      	ldr	r3, [pc, #156]	@ (8005928 <xPortStartScheduler+0x138>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f1c3 0307 	rsb	r3, r3, #7
 8005892:	2b04      	cmp	r3, #4
 8005894:	d00b      	beq.n	80058ae <xPortStartScheduler+0xbe>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	60bb      	str	r3, [r7, #8]
}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	e7fd      	b.n	80058aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005928 <xPortStartScheduler+0x138>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	021b      	lsls	r3, r3, #8
 80058b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005928 <xPortStartScheduler+0x138>)
 80058b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005928 <xPortStartScheduler+0x138>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80058c0:	4a19      	ldr	r2, [pc, #100]	@ (8005928 <xPortStartScheduler+0x138>)
 80058c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058cc:	4b17      	ldr	r3, [pc, #92]	@ (800592c <xPortStartScheduler+0x13c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a16      	ldr	r2, [pc, #88]	@ (800592c <xPortStartScheduler+0x13c>)
 80058d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80058d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058d8:	4b14      	ldr	r3, [pc, #80]	@ (800592c <xPortStartScheduler+0x13c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a13      	ldr	r2, [pc, #76]	@ (800592c <xPortStartScheduler+0x13c>)
 80058de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80058e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058e4:	f000 f8da 	bl	8005a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058e8:	4b11      	ldr	r3, [pc, #68]	@ (8005930 <xPortStartScheduler+0x140>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058ee:	f000 f8f9 	bl	8005ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058f2:	4b10      	ldr	r3, [pc, #64]	@ (8005934 <xPortStartScheduler+0x144>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005934 <xPortStartScheduler+0x144>)
 80058f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80058fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058fe:	f7ff ff63 	bl	80057c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005902:	f7fe fd35 	bl	8004370 <vTaskSwitchContext>
	prvTaskExitError();
 8005906:	f7ff ff17 	bl	8005738 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	e000ed00 	.word	0xe000ed00
 8005918:	410fc271 	.word	0x410fc271
 800591c:	410fc270 	.word	0x410fc270
 8005920:	e000e400 	.word	0xe000e400
 8005924:	20000db8 	.word	0x20000db8
 8005928:	20000dbc 	.word	0x20000dbc
 800592c:	e000ed20 	.word	0xe000ed20
 8005930:	2000000c 	.word	0x2000000c
 8005934:	e000ef34 	.word	0xe000ef34

08005938 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	607b      	str	r3, [r7, #4]
}
 8005950:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005952:	4b10      	ldr	r3, [pc, #64]	@ (8005994 <vPortEnterCritical+0x5c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3301      	adds	r3, #1
 8005958:	4a0e      	ldr	r2, [pc, #56]	@ (8005994 <vPortEnterCritical+0x5c>)
 800595a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800595c:	4b0d      	ldr	r3, [pc, #52]	@ (8005994 <vPortEnterCritical+0x5c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d110      	bne.n	8005986 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005964:	4b0c      	ldr	r3, [pc, #48]	@ (8005998 <vPortEnterCritical+0x60>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00b      	beq.n	8005986 <vPortEnterCritical+0x4e>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	603b      	str	r3, [r7, #0]
}
 8005980:	bf00      	nop
 8005982:	bf00      	nop
 8005984:	e7fd      	b.n	8005982 <vPortEnterCritical+0x4a>
	}
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	2000000c 	.word	0x2000000c
 8005998:	e000ed04 	.word	0xe000ed04

0800599c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059a2:	4b12      	ldr	r3, [pc, #72]	@ (80059ec <vPortExitCritical+0x50>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10b      	bne.n	80059c2 <vPortExitCritical+0x26>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	607b      	str	r3, [r7, #4]
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	e7fd      	b.n	80059be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059c2:	4b0a      	ldr	r3, [pc, #40]	@ (80059ec <vPortExitCritical+0x50>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	4a08      	ldr	r2, [pc, #32]	@ (80059ec <vPortExitCritical+0x50>)
 80059ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059cc:	4b07      	ldr	r3, [pc, #28]	@ (80059ec <vPortExitCritical+0x50>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d105      	bne.n	80059e0 <vPortExitCritical+0x44>
 80059d4:	2300      	movs	r3, #0
 80059d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	f383 8811 	msr	BASEPRI, r3
}
 80059de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	2000000c 	.word	0x2000000c

080059f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059f0:	f3ef 8009 	mrs	r0, PSP
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	4b15      	ldr	r3, [pc, #84]	@ (8005a50 <pxCurrentTCBConst>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	f01e 0f10 	tst.w	lr, #16
 8005a00:	bf08      	it	eq
 8005a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0a:	6010      	str	r0, [r2, #0]
 8005a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005a14:	f380 8811 	msr	BASEPRI, r0
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f7fe fca6 	bl	8004370 <vTaskSwitchContext>
 8005a24:	f04f 0000 	mov.w	r0, #0
 8005a28:	f380 8811 	msr	BASEPRI, r0
 8005a2c:	bc09      	pop	{r0, r3}
 8005a2e:	6819      	ldr	r1, [r3, #0]
 8005a30:	6808      	ldr	r0, [r1, #0]
 8005a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a36:	f01e 0f10 	tst.w	lr, #16
 8005a3a:	bf08      	it	eq
 8005a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a40:	f380 8809 	msr	PSP, r0
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	f3af 8000 	nop.w

08005a50 <pxCurrentTCBConst>:
 8005a50:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop

08005a58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	607b      	str	r3, [r7, #4]
}
 8005a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a72:	f7fe fbc3 	bl	80041fc <xTaskIncrementTick>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a7c:	4b06      	ldr	r3, [pc, #24]	@ (8005a98 <xPortSysTickHandler+0x40>)
 8005a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	2300      	movs	r3, #0
 8005a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f383 8811 	msr	BASEPRI, r3
}
 8005a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a90:	bf00      	nop
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad0 <vPortSetupTimerInterrupt+0x34>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad4 <vPortSetupTimerInterrupt+0x38>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005aac:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad8 <vPortSetupTimerInterrupt+0x3c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8005adc <vPortSetupTimerInterrupt+0x40>)
 8005ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab6:	099b      	lsrs	r3, r3, #6
 8005ab8:	4a09      	ldr	r2, [pc, #36]	@ (8005ae0 <vPortSetupTimerInterrupt+0x44>)
 8005aba:	3b01      	subs	r3, #1
 8005abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005abe:	4b04      	ldr	r3, [pc, #16]	@ (8005ad0 <vPortSetupTimerInterrupt+0x34>)
 8005ac0:	2207      	movs	r2, #7
 8005ac2:	601a      	str	r2, [r3, #0]
}
 8005ac4:	bf00      	nop
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	e000e010 	.word	0xe000e010
 8005ad4:	e000e018 	.word	0xe000e018
 8005ad8:	20000000 	.word	0x20000000
 8005adc:	10624dd3 	.word	0x10624dd3
 8005ae0:	e000e014 	.word	0xe000e014

08005ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005af4 <vPortEnableVFP+0x10>
 8005ae8:	6801      	ldr	r1, [r0, #0]
 8005aea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005aee:	6001      	str	r1, [r0, #0]
 8005af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005af2:	bf00      	nop
 8005af4:	e000ed88 	.word	0xe000ed88

08005af8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005afe:	f3ef 8305 	mrs	r3, IPSR
 8005b02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b0f      	cmp	r3, #15
 8005b08:	d915      	bls.n	8005b36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b0a:	4a18      	ldr	r2, [pc, #96]	@ (8005b6c <vPortValidateInterruptPriority+0x74>)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b14:	4b16      	ldr	r3, [pc, #88]	@ (8005b70 <vPortValidateInterruptPriority+0x78>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	7afa      	ldrb	r2, [r7, #11]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d20b      	bcs.n	8005b36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	607b      	str	r3, [r7, #4]
}
 8005b30:	bf00      	nop
 8005b32:	bf00      	nop
 8005b34:	e7fd      	b.n	8005b32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b36:	4b0f      	ldr	r3, [pc, #60]	@ (8005b74 <vPortValidateInterruptPriority+0x7c>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b78 <vPortValidateInterruptPriority+0x80>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d90b      	bls.n	8005b5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	603b      	str	r3, [r7, #0]
}
 8005b58:	bf00      	nop
 8005b5a:	bf00      	nop
 8005b5c:	e7fd      	b.n	8005b5a <vPortValidateInterruptPriority+0x62>
	}
 8005b5e:	bf00      	nop
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	e000e3f0 	.word	0xe000e3f0
 8005b70:	20000db8 	.word	0x20000db8
 8005b74:	e000ed0c 	.word	0xe000ed0c
 8005b78:	20000dbc 	.word	0x20000dbc

08005b7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08a      	sub	sp, #40	@ 0x28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b84:	2300      	movs	r3, #0
 8005b86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b88:	f7fe fa7c 	bl	8004084 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b8c:	4b5c      	ldr	r3, [pc, #368]	@ (8005d00 <pvPortMalloc+0x184>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b94:	f000 f924 	bl	8005de0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b98:	4b5a      	ldr	r3, [pc, #360]	@ (8005d04 <pvPortMalloc+0x188>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f040 8095 	bne.w	8005cd0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01e      	beq.n	8005bea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005bac:	2208      	movs	r2, #8
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d015      	beq.n	8005bea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f023 0307 	bic.w	r3, r3, #7
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f003 0307 	and.w	r3, r3, #7
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00b      	beq.n	8005bea <pvPortMalloc+0x6e>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	617b      	str	r3, [r7, #20]
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
 8005be8:	e7fd      	b.n	8005be6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d06f      	beq.n	8005cd0 <pvPortMalloc+0x154>
 8005bf0:	4b45      	ldr	r3, [pc, #276]	@ (8005d08 <pvPortMalloc+0x18c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d86a      	bhi.n	8005cd0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bfa:	4b44      	ldr	r3, [pc, #272]	@ (8005d0c <pvPortMalloc+0x190>)
 8005bfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bfe:	4b43      	ldr	r3, [pc, #268]	@ (8005d0c <pvPortMalloc+0x190>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c04:	e004      	b.n	8005c10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d903      	bls.n	8005c22 <pvPortMalloc+0xa6>
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1f1      	bne.n	8005c06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c22:	4b37      	ldr	r3, [pc, #220]	@ (8005d00 <pvPortMalloc+0x184>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d051      	beq.n	8005cd0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2208      	movs	r2, #8
 8005c32:	4413      	add	r3, r2
 8005c34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	1ad2      	subs	r2, r2, r3
 8005c46:	2308      	movs	r3, #8
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d920      	bls.n	8005c90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4413      	add	r3, r2
 8005c54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	f003 0307 	and.w	r3, r3, #7
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00b      	beq.n	8005c78 <pvPortMalloc+0xfc>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	613b      	str	r3, [r7, #16]
}
 8005c72:	bf00      	nop
 8005c74:	bf00      	nop
 8005c76:	e7fd      	b.n	8005c74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	1ad2      	subs	r2, r2, r3
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c8a:	69b8      	ldr	r0, [r7, #24]
 8005c8c:	f000 f90a 	bl	8005ea4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c90:	4b1d      	ldr	r3, [pc, #116]	@ (8005d08 <pvPortMalloc+0x18c>)
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8005d08 <pvPortMalloc+0x18c>)
 8005c9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005d08 <pvPortMalloc+0x18c>)
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8005d10 <pvPortMalloc+0x194>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d203      	bcs.n	8005cb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005caa:	4b17      	ldr	r3, [pc, #92]	@ (8005d08 <pvPortMalloc+0x18c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a18      	ldr	r2, [pc, #96]	@ (8005d10 <pvPortMalloc+0x194>)
 8005cb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	4b13      	ldr	r3, [pc, #76]	@ (8005d04 <pvPortMalloc+0x188>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005cc6:	4b13      	ldr	r3, [pc, #76]	@ (8005d14 <pvPortMalloc+0x198>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	4a11      	ldr	r2, [pc, #68]	@ (8005d14 <pvPortMalloc+0x198>)
 8005cce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005cd0:	f7fe f9e6 	bl	80040a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00b      	beq.n	8005cf6 <pvPortMalloc+0x17a>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	60fb      	str	r3, [r7, #12]
}
 8005cf0:	bf00      	nop
 8005cf2:	bf00      	nop
 8005cf4:	e7fd      	b.n	8005cf2 <pvPortMalloc+0x176>
	return pvReturn;
 8005cf6:	69fb      	ldr	r3, [r7, #28]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3728      	adds	r7, #40	@ 0x28
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20001980 	.word	0x20001980
 8005d04:	20001994 	.word	0x20001994
 8005d08:	20001984 	.word	0x20001984
 8005d0c:	20001978 	.word	0x20001978
 8005d10:	20001988 	.word	0x20001988
 8005d14:	2000198c 	.word	0x2000198c

08005d18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d04f      	beq.n	8005dca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d2a:	2308      	movs	r3, #8
 8005d2c:	425b      	negs	r3, r3
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4413      	add	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	4b25      	ldr	r3, [pc, #148]	@ (8005dd4 <vPortFree+0xbc>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4013      	ands	r3, r2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10b      	bne.n	8005d5e <vPortFree+0x46>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	60fb      	str	r3, [r7, #12]
}
 8005d58:	bf00      	nop
 8005d5a:	bf00      	nop
 8005d5c:	e7fd      	b.n	8005d5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00b      	beq.n	8005d7e <vPortFree+0x66>
	__asm volatile
 8005d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	60bb      	str	r3, [r7, #8]
}
 8005d78:	bf00      	nop
 8005d7a:	bf00      	nop
 8005d7c:	e7fd      	b.n	8005d7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	4b14      	ldr	r3, [pc, #80]	@ (8005dd4 <vPortFree+0xbc>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4013      	ands	r3, r2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01e      	beq.n	8005dca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d11a      	bne.n	8005dca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd4 <vPortFree+0xbc>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	43db      	mvns	r3, r3
 8005d9e:	401a      	ands	r2, r3
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005da4:	f7fe f96e 	bl	8004084 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd8 <vPortFree+0xc0>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4413      	add	r3, r2
 8005db2:	4a09      	ldr	r2, [pc, #36]	@ (8005dd8 <vPortFree+0xc0>)
 8005db4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005db6:	6938      	ldr	r0, [r7, #16]
 8005db8:	f000 f874 	bl	8005ea4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005dbc:	4b07      	ldr	r3, [pc, #28]	@ (8005ddc <vPortFree+0xc4>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	4a06      	ldr	r2, [pc, #24]	@ (8005ddc <vPortFree+0xc4>)
 8005dc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005dc6:	f7fe f96b 	bl	80040a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dca:	bf00      	nop
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20001994 	.word	0x20001994
 8005dd8:	20001984 	.word	0x20001984
 8005ddc:	20001990 	.word	0x20001990

08005de0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005de6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005dea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005dec:	4b27      	ldr	r3, [pc, #156]	@ (8005e8c <prvHeapInit+0xac>)
 8005dee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00c      	beq.n	8005e14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	3307      	adds	r3, #7
 8005dfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 0307 	bic.w	r3, r3, #7
 8005e06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8005e8c <prvHeapInit+0xac>)
 8005e10:	4413      	add	r3, r2
 8005e12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e18:	4a1d      	ldr	r2, [pc, #116]	@ (8005e90 <prvHeapInit+0xb0>)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8005e90 <prvHeapInit+0xb0>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	4413      	add	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e2c:	2208      	movs	r2, #8
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	1a9b      	subs	r3, r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0307 	bic.w	r3, r3, #7
 8005e3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4a15      	ldr	r2, [pc, #84]	@ (8005e94 <prvHeapInit+0xb4>)
 8005e40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e42:	4b14      	ldr	r3, [pc, #80]	@ (8005e94 <prvHeapInit+0xb4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2200      	movs	r2, #0
 8005e48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e4a:	4b12      	ldr	r3, [pc, #72]	@ (8005e94 <prvHeapInit+0xb4>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	1ad2      	subs	r2, r2, r3
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e60:	4b0c      	ldr	r3, [pc, #48]	@ (8005e94 <prvHeapInit+0xb4>)
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8005e98 <prvHeapInit+0xb8>)
 8005e6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	4a09      	ldr	r2, [pc, #36]	@ (8005e9c <prvHeapInit+0xbc>)
 8005e76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e78:	4b09      	ldr	r3, [pc, #36]	@ (8005ea0 <prvHeapInit+0xc0>)
 8005e7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005e7e:	601a      	str	r2, [r3, #0]
}
 8005e80:	bf00      	nop
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	20000dc0 	.word	0x20000dc0
 8005e90:	20001978 	.word	0x20001978
 8005e94:	20001980 	.word	0x20001980
 8005e98:	20001988 	.word	0x20001988
 8005e9c:	20001984 	.word	0x20001984
 8005ea0:	20001994 	.word	0x20001994

08005ea4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005eac:	4b28      	ldr	r3, [pc, #160]	@ (8005f50 <prvInsertBlockIntoFreeList+0xac>)
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	e002      	b.n	8005eb8 <prvInsertBlockIntoFreeList+0x14>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d8f7      	bhi.n	8005eb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	4413      	add	r3, r2
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d108      	bne.n	8005ee6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	441a      	add	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	441a      	add	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d118      	bne.n	8005f2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	4b15      	ldr	r3, [pc, #84]	@ (8005f54 <prvInsertBlockIntoFreeList+0xb0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d00d      	beq.n	8005f22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	441a      	add	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	e008      	b.n	8005f34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f22:	4b0c      	ldr	r3, [pc, #48]	@ (8005f54 <prvInsertBlockIntoFreeList+0xb0>)
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	e003      	b.n	8005f34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d002      	beq.n	8005f42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f42:	bf00      	nop
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	20001978 	.word	0x20001978
 8005f54:	20001980 	.word	0x20001980

08005f58 <memset>:
 8005f58:	4402      	add	r2, r0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d100      	bne.n	8005f62 <memset+0xa>
 8005f60:	4770      	bx	lr
 8005f62:	f803 1b01 	strb.w	r1, [r3], #1
 8005f66:	e7f9      	b.n	8005f5c <memset+0x4>

08005f68 <__libc_init_array>:
 8005f68:	b570      	push	{r4, r5, r6, lr}
 8005f6a:	4d0d      	ldr	r5, [pc, #52]	@ (8005fa0 <__libc_init_array+0x38>)
 8005f6c:	4c0d      	ldr	r4, [pc, #52]	@ (8005fa4 <__libc_init_array+0x3c>)
 8005f6e:	1b64      	subs	r4, r4, r5
 8005f70:	10a4      	asrs	r4, r4, #2
 8005f72:	2600      	movs	r6, #0
 8005f74:	42a6      	cmp	r6, r4
 8005f76:	d109      	bne.n	8005f8c <__libc_init_array+0x24>
 8005f78:	4d0b      	ldr	r5, [pc, #44]	@ (8005fa8 <__libc_init_array+0x40>)
 8005f7a:	4c0c      	ldr	r4, [pc, #48]	@ (8005fac <__libc_init_array+0x44>)
 8005f7c:	f000 f826 	bl	8005fcc <_init>
 8005f80:	1b64      	subs	r4, r4, r5
 8005f82:	10a4      	asrs	r4, r4, #2
 8005f84:	2600      	movs	r6, #0
 8005f86:	42a6      	cmp	r6, r4
 8005f88:	d105      	bne.n	8005f96 <__libc_init_array+0x2e>
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}
 8005f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f90:	4798      	blx	r3
 8005f92:	3601      	adds	r6, #1
 8005f94:	e7ee      	b.n	8005f74 <__libc_init_array+0xc>
 8005f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f9a:	4798      	blx	r3
 8005f9c:	3601      	adds	r6, #1
 8005f9e:	e7f2      	b.n	8005f86 <__libc_init_array+0x1e>
 8005fa0:	080060b0 	.word	0x080060b0
 8005fa4:	080060b0 	.word	0x080060b0
 8005fa8:	080060b0 	.word	0x080060b0
 8005fac:	080060b4 	.word	0x080060b4

08005fb0 <memcpy>:
 8005fb0:	440a      	add	r2, r1
 8005fb2:	4291      	cmp	r1, r2
 8005fb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fb8:	d100      	bne.n	8005fbc <memcpy+0xc>
 8005fba:	4770      	bx	lr
 8005fbc:	b510      	push	{r4, lr}
 8005fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fc6:	4291      	cmp	r1, r2
 8005fc8:	d1f9      	bne.n	8005fbe <memcpy+0xe>
 8005fca:	bd10      	pop	{r4, pc}

08005fcc <_init>:
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	bf00      	nop
 8005fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd2:	bc08      	pop	{r3}
 8005fd4:	469e      	mov	lr, r3
 8005fd6:	4770      	bx	lr

08005fd8 <_fini>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	bf00      	nop
 8005fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fde:	bc08      	pop	{r3}
 8005fe0:	469e      	mov	lr, r3
 8005fe2:	4770      	bx	lr
