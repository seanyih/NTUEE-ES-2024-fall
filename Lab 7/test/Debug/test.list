
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  08009c98  08009c98  0000ac98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1b0  0800a1b0  0000cc10  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1b0  0800a1b0  0000b1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1b8  0800a1b8  0000cc10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1b8  0800a1b8  0000b1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1bc  0800a1bc  0000b1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000c10  20000000  0800a1c0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f8  20000c10  0800add0  0000cc10  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e08  0800add0  0000ce08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000cc10  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac5b  00000000  00000000  0000cc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ac3  00000000  00000000  0002789b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  0002b360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002a4be  00000000  00000000  0002cc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001e227  00000000  00000000  00057116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f9693  00000000  00000000  0007533d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0016e9d0  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00001324  00000000  00000000  0016ea13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007a84  00000000  00000000  0016fd38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001777bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000c10 	.word	0x20000c10
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c7c 	.word	0x08009c7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000c14 	.word	0x20000c14
 80001cc:	08009c7c 	.word	0x08009c7c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <arm_fir_f32>:
void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b08f      	sub	sp, #60	@ 0x3c
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	603b      	str	r3, [r7, #0]
        float32_t *pState = S->pState;                 /* State pointer */
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	637b      	str	r3, [r7, #52]	@ 0x34
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	617b      	str	r3, [r7, #20]
        float32_t *pStateCurnt;                        /* Points to the current sample of the state */
        float32_t *px;                                 /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	613b      	str	r3, [r7, #16]
        float32_t c0;                                           /* Temporary variable to hold coefficient value */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000f62:	3b01      	subs	r3, #1
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	633b      	str	r3, [r7, #48]	@ 0x30
  blkCnt = blockSize % 0x8U;

#else

  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8000f6e:	e033      	b.n	8000fd8 <arm_fir_f32+0xa0>
  {
    /* Copy one sample at a time into state buffer */
    *pStateCurnt++ = *pSrc++;
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	1d13      	adds	r3, r2, #4
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f78:	1d19      	adds	r1, r3, #4
 8000f7a:	6339      	str	r1, [r7, #48]	@ 0x30
 8000f7c:	6812      	ldr	r2, [r2, #0]
 8000f7e:	601a      	str	r2, [r3, #0]

    /* Set the accumulator to zero */
    acc0 = 0.0f;
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Initialize state pointer */
    px = pState;
 8000f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f88:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Initialize Coefficient pointer */
    pb = pCoeffs;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	62bb      	str	r3, [r7, #40]	@ 0x28

    i = numTaps;
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	623b      	str	r3, [r7, #32]

    /* Perform the multiply-accumulates */
    do
    {
      /* acc =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0] */
      acc0 += *px++ * *pb++;
 8000f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f94:	1d1a      	adds	r2, r3, #4
 8000f96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000f98:	ed93 7a00 	vldr	s14, [r3]
 8000f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f9e:	1d1a      	adds	r2, r3, #4
 8000fa0:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000fa2:	edd3 7a00 	vldr	s15, [r3]
 8000fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000faa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fb2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

      i--;
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
    } while (i > 0U);
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1e7      	bne.n	8000f92 <arm_fir_f32+0x5a>

    /* Store result in destination buffer. */
    *pDst++ = acc0;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	1d1a      	adds	r2, r3, #4
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fca:	601a      	str	r2, [r3, #0]

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 8000fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fce:	3304      	adds	r3, #4
 8000fd0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Decrement loop counter */
    blkCnt--;
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1c8      	bne.n	8000f70 <arm_fir_f32+0x38>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the start of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	633b      	str	r3, [r7, #48]	@ 0x30
  tapCnt = (numTaps - 1U) % 0x4U;

#else

  /* Initialize tapCnt with number of taps */
  tapCnt = (numTaps - 1U);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 8000fea:	e00a      	b.n	8001002 <arm_fir_f32+0xca>
  {
    *pStateCurnt++ = *pState++;
 8000fec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000fee:	1d13      	adds	r3, r2, #4
 8000ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ff4:	1d19      	adds	r1, r3, #4
 8000ff6:	6339      	str	r1, [r7, #48]	@ 0x30
 8000ff8:	6812      	ldr	r2, [r2, #0]
 8000ffa:	601a      	str	r2, [r3, #0]

    /* Decrement loop counter */
    tapCnt--;
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	61fb      	str	r3, [r7, #28]
  while (tapCnt > 0U)
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1f1      	bne.n	8000fec <arm_fir_f32+0xb4>
  }

}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	373c      	adds	r7, #60	@ 0x3c
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <arm_fir_init_f32>:
        arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	460b      	mov	r3, r1
 8001024:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	897a      	ldrh	r2, [r7, #10]
 800102a:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	609a      	str	r2, [r3, #8]

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8001032:	897a      	ldrh	r2, [r7, #10]
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	4413      	add	r3, r2
 8001038:	3b01      	subs	r3, #1
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	461a      	mov	r2, r3
 800103e:	2100      	movs	r1, #0
 8001040:	6838      	ldr	r0, [r7, #0]
 8001042:	f006 fcff 	bl	8007a44 <memset>

  /* Assign state pointer */
  S->pState = pState;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	605a      	str	r2, [r3, #4]
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800105c:	1d39      	adds	r1, r7, #4
 800105e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001062:	2201      	movs	r2, #1
 8001064:	4803      	ldr	r0, [pc, #12]	@ (8001074 <__io_putchar+0x20>)
 8001066:	f004 fe84 	bl	8005d72 <HAL_UART_Transmit>
	return ch;
 800106a:	687b      	ldr	r3, [r7, #4]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20001610 	.word	0x20001610

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107e:	f001 fc67 	bl	8002950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001082:	f000 f8d5 	bl	8001230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001086:	f000 fa9d 	bl	80015c4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800108a:	f000 f933 	bl	80012f4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800108e:	f000 f969 	bl	8001364 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001092:	f000 f9a5 	bl	80013e0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001096:	f000 f9c9 	bl	800142c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800109a:	f000 fa05 	bl	80014a8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800109e:	f000 fa33 	bl	8001508 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010a2:	f000 fa61 	bl	8001568 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 80010a6:	f001 fae7 	bl	8002678 <BSP_ACCELERO_Init>
  printf("Initialization done.\n");
 80010aa:	4851      	ldr	r0, [pc, #324]	@ (80011f0 <main+0x178>)
 80010ac:	f006 fbea 	bl	8007884 <puts>
  arm_fir_example();
 80010b0:	f000 fc3a 	bl	8001928 <arm_fir_example>
  // my fir test
//  printf("\nTest my own lowpass filter using a mixture of 1Hz + 8Hz sine signal under sample rate 20Hz.\n\n");
//  my_fir_test();

  // initialize for real data
  inputF32 = &realInput[0];
 80010b4:	4b4f      	ldr	r3, [pc, #316]	@ (80011f4 <main+0x17c>)
 80010b6:	4a50      	ldr	r2, [pc, #320]	@ (80011f8 <main+0x180>)
 80010b8:	601a      	str	r2, [r3, #0]
  outputF32 = &myOutput[0];
 80010ba:	4b50      	ldr	r3, [pc, #320]	@ (80011fc <main+0x184>)
 80010bc:	4a50      	ldr	r2, [pc, #320]	@ (8001200 <main+0x188>)
 80010be:	601a      	str	r2, [r3, #0]
  arm_fir_init_f32(&my_fir, 16, (float32_t *)&myCoeffs[0], &my_fir_state[0], blockSize);
 80010c0:	4b50      	ldr	r3, [pc, #320]	@ (8001204 <main+0x18c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	4b50      	ldr	r3, [pc, #320]	@ (8001208 <main+0x190>)
 80010c8:	4a50      	ldr	r2, [pc, #320]	@ (800120c <main+0x194>)
 80010ca:	2110      	movs	r1, #16
 80010cc:	4850      	ldr	r0, [pc, #320]	@ (8001210 <main+0x198>)
 80010ce:	f7ff ffa2 	bl	8001016 <arm_fir_init_f32>

  printf("\nStart reading accelero data.\n\n");
 80010d2:	4850      	ldr	r0, [pc, #320]	@ (8001214 <main+0x19c>)
 80010d4:	f006 fbd6 	bl	8007884 <puts>
  for(i=0;i<64;i++){
 80010d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001218 <main+0x1a0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	e018      	b.n	8001112 <main+0x9a>
	  BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80010e0:	484e      	ldr	r0, [pc, #312]	@ (800121c <main+0x1a4>)
 80010e2:	f001 fb07 	bl	80026f4 <BSP_ACCELERO_AccGetXYZ>
//	  printf("%d %d %d\n", pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);
	  realInput[i] = (float32_t)pDataXYZ[2];
 80010e6:	4b4d      	ldr	r3, [pc, #308]	@ (800121c <main+0x1a4>)
 80010e8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80010ec:	4b4a      	ldr	r3, [pc, #296]	@ (8001218 <main+0x1a0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	ee07 2a90 	vmov	s15, r2
 80010f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f8:	4a3f      	ldr	r2, [pc, #252]	@ (80011f8 <main+0x180>)
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(1000/20);
 8001102:	2032      	movs	r0, #50	@ 0x32
 8001104:	f001 fc98 	bl	8002a38 <HAL_Delay>
  for(i=0;i<64;i++){
 8001108:	4b43      	ldr	r3, [pc, #268]	@ (8001218 <main+0x1a0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	4a42      	ldr	r2, [pc, #264]	@ (8001218 <main+0x1a0>)
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b41      	ldr	r3, [pc, #260]	@ (8001218 <main+0x1a0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b3f      	cmp	r3, #63	@ 0x3f
 8001118:	d9e2      	bls.n	80010e0 <main+0x68>
  }
  for(i=0; i < 2; i++)
 800111a:	4b3f      	ldr	r3, [pc, #252]	@ (8001218 <main+0x1a0>)
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	e01e      	b.n	8001160 <main+0xe8>
  {
    arm_fir_f32(&my_fir, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
 8001122:	4b34      	ldr	r3, [pc, #208]	@ (80011f4 <main+0x17c>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b3c      	ldr	r3, [pc, #240]	@ (8001218 <main+0x1a0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4936      	ldr	r1, [pc, #216]	@ (8001204 <main+0x18c>)
 800112c:	6809      	ldr	r1, [r1, #0]
 800112e:	fb01 f303 	mul.w	r3, r1, r3
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	18d0      	adds	r0, r2, r3
 8001136:	4b31      	ldr	r3, [pc, #196]	@ (80011fc <main+0x184>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	4b37      	ldr	r3, [pc, #220]	@ (8001218 <main+0x1a0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4931      	ldr	r1, [pc, #196]	@ (8001204 <main+0x18c>)
 8001140:	6809      	ldr	r1, [r1, #0]
 8001142:	fb01 f303 	mul.w	r3, r1, r3
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	441a      	add	r2, r3
 800114a:	4b2e      	ldr	r3, [pc, #184]	@ (8001204 <main+0x18c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4601      	mov	r1, r0
 8001150:	482f      	ldr	r0, [pc, #188]	@ (8001210 <main+0x198>)
 8001152:	f7ff fef1 	bl	8000f38 <arm_fir_f32>
  for(i=0; i < 2; i++)
 8001156:	4b30      	ldr	r3, [pc, #192]	@ (8001218 <main+0x1a0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	4a2e      	ldr	r2, [pc, #184]	@ (8001218 <main+0x1a0>)
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b2d      	ldr	r3, [pc, #180]	@ (8001218 <main+0x1a0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d9dc      	bls.n	8001122 <main+0xaa>
  }
  printf("Original data:\n\n");
 8001168:	482d      	ldr	r0, [pc, #180]	@ (8001220 <main+0x1a8>)
 800116a:	f006 fb8b 	bl	8007884 <puts>
  for(i=0; i<64; i++){
 800116e:	4b2a      	ldr	r3, [pc, #168]	@ (8001218 <main+0x1a0>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e012      	b.n	800119c <main+0x124>
	  printf("%f, ", realInput[i]);
 8001176:	4b28      	ldr	r3, [pc, #160]	@ (8001218 <main+0x1a0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a1f      	ldr	r2, [pc, #124]	@ (80011f8 <main+0x180>)
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f9e0 	bl	8000548 <__aeabi_f2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4825      	ldr	r0, [pc, #148]	@ (8001224 <main+0x1ac>)
 800118e:	f006 fb11 	bl	80077b4 <iprintf>
  for(i=0; i<64; i++){
 8001192:	4b21      	ldr	r3, [pc, #132]	@ (8001218 <main+0x1a0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	4a1f      	ldr	r2, [pc, #124]	@ (8001218 <main+0x1a0>)
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <main+0x1a0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80011a2:	d9e8      	bls.n	8001176 <main+0xfe>
  }

  printf("\n\nProcessed data:\n\n");
 80011a4:	4820      	ldr	r0, [pc, #128]	@ (8001228 <main+0x1b0>)
 80011a6:	f006 fb6d 	bl	8007884 <puts>
  for(i=0; i<64; i++){
 80011aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <main+0x1a0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	e012      	b.n	80011d8 <main+0x160>
  	  printf("%f, ", myOutput[i]);
 80011b2:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <main+0x1a0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a12      	ldr	r2, [pc, #72]	@ (8001200 <main+0x188>)
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f9c2 	bl	8000548 <__aeabi_f2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4816      	ldr	r0, [pc, #88]	@ (8001224 <main+0x1ac>)
 80011ca:	f006 faf3 	bl	80077b4 <iprintf>
  for(i=0; i<64; i++){
 80011ce:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <main+0x1a0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	4a10      	ldr	r2, [pc, #64]	@ (8001218 <main+0x1a0>)
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <main+0x1a0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80011de:	d9e8      	bls.n	80011b2 <main+0x13a>
    }
  printf("\n\nDone.\n");
 80011e0:	4812      	ldr	r0, [pc, #72]	@ (800122c <main+0x1b4>)
 80011e2:	f006 fb4f 	bl	8007884 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  BSP_ACCELERO_AccGetXYZ(pDataXYZ);
//	  printf("%d %d %d\n", pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);
	  HAL_Delay(100);
 80011e6:	2064      	movs	r0, #100	@ 0x64
 80011e8:	f001 fc26 	bl	8002a38 <HAL_Delay>
 80011ec:	e7fb      	b.n	80011e6 <main+0x16e>
 80011ee:	bf00      	nop
 80011f0:	08009c98 	.word	0x08009c98
 80011f4:	20001c24 	.word	0x20001c24
 80011f8:	2000121c 	.word	0x2000121c
 80011fc:	20001c28 	.word	0x20001c28
 8001200:	2000131c 	.word	0x2000131c
 8001204:	20000a00 	.word	0x20000a00
 8001208:	2000141c 	.word	0x2000141c
 800120c:	08009db8 	.word	0x08009db8
 8001210:	20001c14 	.word	0x20001c14
 8001214:	08009cb0 	.word	0x08009cb0
 8001218:	20001c04 	.word	0x20001c04
 800121c:	20001c2c 	.word	0x20001c2c
 8001220:	08009cd0 	.word	0x08009cd0
 8001224:	08009ce0 	.word	0x08009ce0
 8001228:	08009ce8 	.word	0x08009ce8
 800122c:	08009cfc 	.word	0x08009cfc

08001230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b096      	sub	sp, #88	@ 0x58
 8001234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	2244      	movs	r2, #68	@ 0x44
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f006 fc00 	bl	8007a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001244:	463b      	mov	r3, r7
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001252:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001256:	f003 f8ad 	bl	80043b4 <HAL_PWREx_ControlVoltageScaling>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001260:	f000 fbe4 	bl	8001a2c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001264:	f003 f888 	bl	8004378 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001268:	4b21      	ldr	r3, [pc, #132]	@ (80012f0 <SystemClock_Config+0xc0>)
 800126a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800126e:	4a20      	ldr	r2, [pc, #128]	@ (80012f0 <SystemClock_Config+0xc0>)
 8001270:	f023 0318 	bic.w	r3, r3, #24
 8001274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001278:	2314      	movs	r3, #20
 800127a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800127c:	2301      	movs	r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001280:	2301      	movs	r3, #1
 8001282:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001288:	2360      	movs	r3, #96	@ 0x60
 800128a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128c:	2302      	movs	r3, #2
 800128e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001290:	2301      	movs	r3, #1
 8001292:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001294:	2301      	movs	r3, #1
 8001296:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001298:	2328      	movs	r3, #40	@ 0x28
 800129a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800129c:	2307      	movs	r3, #7
 800129e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012a0:	2302      	movs	r3, #2
 80012a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 f9a3 	bl	80045f8 <HAL_RCC_OscConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80012b8:	f000 fbb8 	bl	8001a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012bc:	230f      	movs	r3, #15
 80012be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c0:	2303      	movs	r3, #3
 80012c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	2104      	movs	r1, #4
 80012d4:	4618      	mov	r0, r3
 80012d6:	f003 fd6b 	bl	8004db0 <HAL_RCC_ClockConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012e0:	f000 fba4 	bl	8001a2c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80012e4:	f004 fa72 	bl	80057cc <HAL_RCCEx_EnableMSIPLLMode>
}
 80012e8:	bf00      	nop
 80012ea:	3758      	adds	r7, #88	@ 0x58
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40021000 	.word	0x40021000

080012f4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80012f8:	4b18      	ldr	r3, [pc, #96]	@ (800135c <MX_DFSDM1_Init+0x68>)
 80012fa:	4a19      	ldr	r2, [pc, #100]	@ (8001360 <MX_DFSDM1_Init+0x6c>)
 80012fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80012fe:	4b17      	ldr	r3, [pc, #92]	@ (800135c <MX_DFSDM1_Init+0x68>)
 8001300:	2201      	movs	r2, #1
 8001302:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <MX_DFSDM1_Init+0x68>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <MX_DFSDM1_Init+0x68>)
 800130c:	2202      	movs	r2, #2
 800130e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <MX_DFSDM1_Init+0x68>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001316:	4b11      	ldr	r3, [pc, #68]	@ (800135c <MX_DFSDM1_Init+0x68>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800131c:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <MX_DFSDM1_Init+0x68>)
 800131e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001322:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001324:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <MX_DFSDM1_Init+0x68>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <MX_DFSDM1_Init+0x68>)
 800132c:	2204      	movs	r2, #4
 800132e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001330:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <MX_DFSDM1_Init+0x68>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001336:	4b09      	ldr	r3, [pc, #36]	@ (800135c <MX_DFSDM1_Init+0x68>)
 8001338:	2201      	movs	r2, #1
 800133a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800133c:	4b07      	ldr	r3, [pc, #28]	@ (800135c <MX_DFSDM1_Init+0x68>)
 800133e:	2200      	movs	r2, #0
 8001340:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001342:	4b06      	ldr	r3, [pc, #24]	@ (800135c <MX_DFSDM1_Init+0x68>)
 8001344:	2200      	movs	r2, #0
 8001346:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	@ (800135c <MX_DFSDM1_Init+0x68>)
 800134a:	f001 fcab 	bl	8002ca4 <HAL_DFSDM_ChannelInit>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001354:	f000 fb6a 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200014dc 	.word	0x200014dc
 8001360:	40016020 	.word	0x40016020

08001364 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001368:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <MX_I2C2_Init+0x74>)
 800136a:	4a1c      	ldr	r2, [pc, #112]	@ (80013dc <MX_I2C2_Init+0x78>)
 800136c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800136e:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <MX_I2C2_Init+0x74>)
 8001370:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001374:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001376:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <MX_I2C2_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800137c:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <MX_I2C2_Init+0x74>)
 800137e:	2201      	movs	r2, #1
 8001380:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001382:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <MX_I2C2_Init+0x74>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001388:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <MX_I2C2_Init+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800138e:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <MX_I2C2_Init+0x74>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001394:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <MX_I2C2_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139a:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <MX_I2C2_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013a0:	480d      	ldr	r0, [pc, #52]	@ (80013d8 <MX_I2C2_Init+0x74>)
 80013a2:	f002 f864 	bl	800346e <HAL_I2C_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013ac:	f000 fb3e 	bl	8001a2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013b0:	2100      	movs	r1, #0
 80013b2:	4809      	ldr	r0, [pc, #36]	@ (80013d8 <MX_I2C2_Init+0x74>)
 80013b4:	f002 fe16 	bl	8003fe4 <HAL_I2CEx_ConfigAnalogFilter>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80013be:	f000 fb35 	bl	8001a2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013c2:	2100      	movs	r1, #0
 80013c4:	4804      	ldr	r0, [pc, #16]	@ (80013d8 <MX_I2C2_Init+0x74>)
 80013c6:	f002 fe58 	bl	800407a <HAL_I2CEx_ConfigDigitalFilter>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80013d0:	f000 fb2c 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20001514 	.word	0x20001514
 80013dc:	40005800 	.word	0x40005800

080013e0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <MX_QUADSPI_Init+0x44>)
 80013e6:	4a10      	ldr	r2, [pc, #64]	@ (8001428 <MX_QUADSPI_Init+0x48>)
 80013e8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <MX_QUADSPI_Init+0x44>)
 80013ec:	2202      	movs	r2, #2
 80013ee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <MX_QUADSPI_Init+0x44>)
 80013f2:	2204      	movs	r2, #4
 80013f4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <MX_QUADSPI_Init+0x44>)
 80013f8:	2210      	movs	r2, #16
 80013fa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80013fc:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <MX_QUADSPI_Init+0x44>)
 80013fe:	2217      	movs	r2, #23
 8001400:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001402:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <MX_QUADSPI_Init+0x44>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <MX_QUADSPI_Init+0x44>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	@ (8001424 <MX_QUADSPI_Init+0x44>)
 8001410:	f003 f836 	bl	8004480 <HAL_QSPI_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800141a:	f000 fb07 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20001568 	.word	0x20001568
 8001428:	a0001000 	.word	0xa0001000

0800142c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001430:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <MX_SPI3_Init+0x74>)
 8001432:	4a1c      	ldr	r2, [pc, #112]	@ (80014a4 <MX_SPI3_Init+0x78>)
 8001434:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001436:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <MX_SPI3_Init+0x74>)
 8001438:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800143c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800143e:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <MX_SPI3_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001444:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <MX_SPI3_Init+0x74>)
 8001446:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800144a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800144c:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <MX_SPI3_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001452:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <MX_SPI3_Init+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <MX_SPI3_Init+0x74>)
 800145a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800145e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <MX_SPI3_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001466:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <MX_SPI3_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800146c:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <MX_SPI3_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <MX_SPI3_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001478:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <MX_SPI3_Init+0x74>)
 800147a:	2207      	movs	r2, #7
 800147c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800147e:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <MX_SPI3_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001484:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <MX_SPI3_Init+0x74>)
 8001486:	2208      	movs	r2, #8
 8001488:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	@ (80014a0 <MX_SPI3_Init+0x74>)
 800148c:	f004 fb80 	bl	8005b90 <HAL_SPI_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001496:	f000 fac9 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200015ac 	.word	0x200015ac
 80014a4:	40003c00 	.word	0x40003c00

080014a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <MX_USART1_UART_Init+0x58>)
 80014ae:	4a15      	ldr	r2, [pc, #84]	@ (8001504 <MX_USART1_UART_Init+0x5c>)
 80014b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014b2:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <MX_USART1_UART_Init+0x58>)
 80014b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <MX_USART1_UART_Init+0x58>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <MX_USART1_UART_Init+0x58>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001500 <MX_USART1_UART_Init+0x58>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <MX_USART1_UART_Init+0x58>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001500 <MX_USART1_UART_Init+0x58>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <MX_USART1_UART_Init+0x58>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014de:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <MX_USART1_UART_Init+0x58>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <MX_USART1_UART_Init+0x58>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	@ (8001500 <MX_USART1_UART_Init+0x58>)
 80014ec:	f004 fbf3 	bl	8005cd6 <HAL_UART_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014f6:	f000 fa99 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20001610 	.word	0x20001610
 8001504:	40013800 	.word	0x40013800

08001508 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800150c:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <MX_USART3_UART_Init+0x58>)
 800150e:	4a15      	ldr	r2, [pc, #84]	@ (8001564 <MX_USART3_UART_Init+0x5c>)
 8001510:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001512:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <MX_USART3_UART_Init+0x58>)
 8001514:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001518:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800151a:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <MX_USART3_UART_Init+0x58>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001520:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <MX_USART3_UART_Init+0x58>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <MX_USART3_UART_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <MX_USART3_UART_Init+0x58>)
 800152e:	220c      	movs	r2, #12
 8001530:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001532:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <MX_USART3_UART_Init+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <MX_USART3_UART_Init+0x58>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800153e:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <MX_USART3_UART_Init+0x58>)
 8001540:	2200      	movs	r2, #0
 8001542:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <MX_USART3_UART_Init+0x58>)
 8001546:	2200      	movs	r2, #0
 8001548:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800154a:	4805      	ldr	r0, [pc, #20]	@ (8001560 <MX_USART3_UART_Init+0x58>)
 800154c:	f004 fbc3 	bl	8005cd6 <HAL_UART_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001556:	f000 fa69 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20001698 	.word	0x20001698
 8001564:	40004800 	.word	0x40004800

08001568 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800156c:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800156e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001572:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001574:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001576:	2206      	movs	r2, #6
 8001578:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800157c:	2202      	movs	r2, #2
 800157e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001580:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001582:	2202      	movs	r2, #2
 8001584:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001592:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001598:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800159a:	2200      	movs	r2, #0
 800159c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800159e:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015aa:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ac:	f002 fdb1 	bl	8004112 <HAL_PCD_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015b6:	f000 fa39 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20001720 	.word	0x20001720

080015c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	@ 0x28
 80015c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015da:	4bbd      	ldr	r3, [pc, #756]	@ (80018d0 <MX_GPIO_Init+0x30c>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	4abc      	ldr	r2, [pc, #752]	@ (80018d0 <MX_GPIO_Init+0x30c>)
 80015e0:	f043 0310 	orr.w	r3, r3, #16
 80015e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e6:	4bba      	ldr	r3, [pc, #744]	@ (80018d0 <MX_GPIO_Init+0x30c>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f2:	4bb7      	ldr	r3, [pc, #732]	@ (80018d0 <MX_GPIO_Init+0x30c>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f6:	4ab6      	ldr	r2, [pc, #728]	@ (80018d0 <MX_GPIO_Init+0x30c>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015fe:	4bb4      	ldr	r3, [pc, #720]	@ (80018d0 <MX_GPIO_Init+0x30c>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	4bb1      	ldr	r3, [pc, #708]	@ (80018d0 <MX_GPIO_Init+0x30c>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160e:	4ab0      	ldr	r2, [pc, #704]	@ (80018d0 <MX_GPIO_Init+0x30c>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001616:	4bae      	ldr	r3, [pc, #696]	@ (80018d0 <MX_GPIO_Init+0x30c>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	4bab      	ldr	r3, [pc, #684]	@ (80018d0 <MX_GPIO_Init+0x30c>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001626:	4aaa      	ldr	r2, [pc, #680]	@ (80018d0 <MX_GPIO_Init+0x30c>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800162e:	4ba8      	ldr	r3, [pc, #672]	@ (80018d0 <MX_GPIO_Init+0x30c>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800163a:	4ba5      	ldr	r3, [pc, #660]	@ (80018d0 <MX_GPIO_Init+0x30c>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163e:	4aa4      	ldr	r2, [pc, #656]	@ (80018d0 <MX_GPIO_Init+0x30c>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001646:	4ba2      	ldr	r3, [pc, #648]	@ (80018d0 <MX_GPIO_Init+0x30c>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001658:	489e      	ldr	r0, [pc, #632]	@ (80018d4 <MX_GPIO_Init+0x310>)
 800165a:	f001 fecd 	bl	80033f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	f248 1104 	movw	r1, #33028	@ 0x8104
 8001664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001668:	f001 fec6 	bl	80033f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800166c:	2200      	movs	r2, #0
 800166e:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8001672:	4899      	ldr	r0, [pc, #612]	@ (80018d8 <MX_GPIO_Init+0x314>)
 8001674:	f001 fec0 	bl	80033f8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	f241 0181 	movw	r1, #4225	@ 0x1081
 800167e:	4897      	ldr	r0, [pc, #604]	@ (80018dc <MX_GPIO_Init+0x318>)
 8001680:	f001 feba 	bl	80033f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001684:	2201      	movs	r2, #1
 8001686:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800168a:	4894      	ldr	r0, [pc, #592]	@ (80018dc <MX_GPIO_Init+0x318>)
 800168c:	f001 feb4 	bl	80033f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001696:	4892      	ldr	r0, [pc, #584]	@ (80018e0 <MX_GPIO_Init+0x31c>)
 8001698:	f001 feae 	bl	80033f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800169c:	2201      	movs	r2, #1
 800169e:	2120      	movs	r1, #32
 80016a0:	488d      	ldr	r0, [pc, #564]	@ (80018d8 <MX_GPIO_Init+0x314>)
 80016a2:	f001 fea9 	bl	80033f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80016a6:	2201      	movs	r2, #1
 80016a8:	2101      	movs	r1, #1
 80016aa:	488a      	ldr	r0, [pc, #552]	@ (80018d4 <MX_GPIO_Init+0x310>)
 80016ac:	f001 fea4 	bl	80033f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80016b0:	f240 1315 	movw	r3, #277	@ 0x115
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	4882      	ldr	r0, [pc, #520]	@ (80018d4 <MX_GPIO_Init+0x310>)
 80016ca:	f001 fbf7 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80016ce:	236a      	movs	r3, #106	@ 0x6a
 80016d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	487c      	ldr	r0, [pc, #496]	@ (80018d4 <MX_GPIO_Init+0x310>)
 80016e4:	f001 fbea 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80016e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	4878      	ldr	r0, [pc, #480]	@ (80018e0 <MX_GPIO_Init+0x31c>)
 8001700:	f001 fbdc 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001704:	233f      	movs	r3, #63	@ 0x3f
 8001706:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001708:	230b      	movs	r3, #11
 800170a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4619      	mov	r1, r3
 8001716:	4872      	ldr	r0, [pc, #456]	@ (80018e0 <MX_GPIO_Init+0x31c>)
 8001718:	f001 fbd0 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800171c:	2303      	movs	r3, #3
 800171e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800172c:	2308      	movs	r3, #8
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800173a:	f001 fbbf 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800173e:	f248 1304 	movw	r3, #33028	@ 0x8104
 8001742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800175a:	f001 fbaf 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800175e:	2308      	movs	r3, #8
 8001760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800176e:	2301      	movs	r3, #1
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800177c:	f001 fb9e 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001780:	2310      	movs	r3, #16
 8001782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001784:	230b      	movs	r3, #11
 8001786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4619      	mov	r1, r3
 8001792:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001796:	f001 fb91 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800179a:	23e0      	movs	r3, #224	@ 0xe0
 800179c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a6:	2303      	movs	r3, #3
 80017a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017aa:	2305      	movs	r3, #5
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b8:	f001 fb80 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80017bc:	2301      	movs	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	4841      	ldr	r0, [pc, #260]	@ (80018d8 <MX_GPIO_Init+0x314>)
 80017d2:	f001 fb73 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80017d6:	2302      	movs	r3, #2
 80017d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017da:	230b      	movs	r3, #11
 80017dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4619      	mov	r1, r3
 80017e8:	483b      	ldr	r0, [pc, #236]	@ (80018d8 <MX_GPIO_Init+0x314>)
 80017ea:	f001 fb67 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80017ee:	f24f 0334 	movw	r3, #61492	@ 0xf034
 80017f2:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	4834      	ldr	r0, [pc, #208]	@ (80018d8 <MX_GPIO_Init+0x314>)
 8001808:	f001 fb58 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800180c:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8001810:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001812:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	482e      	ldr	r0, [pc, #184]	@ (80018dc <MX_GPIO_Init+0x318>)
 8001824:	f001 fb4a 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001828:	f243 0381 	movw	r3, #12417	@ 0x3081
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	2301      	movs	r3, #1
 8001830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4826      	ldr	r0, [pc, #152]	@ (80018dc <MX_GPIO_Init+0x318>)
 8001842:	f001 fb3b 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001846:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	4820      	ldr	r0, [pc, #128]	@ (80018e0 <MX_GPIO_Init+0x31c>)
 8001860:	f001 fb2c 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001864:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800186a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800186e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	4819      	ldr	r0, [pc, #100]	@ (80018e0 <MX_GPIO_Init+0x31c>)
 800187c:	f001 fb1e 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001880:	2302      	movs	r3, #2
 8001882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001890:	2305      	movs	r3, #5
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	4810      	ldr	r0, [pc, #64]	@ (80018dc <MX_GPIO_Init+0x318>)
 800189c:	f001 fb0e 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80018a0:	2378      	movs	r3, #120	@ 0x78
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018b0:	2307      	movs	r3, #7
 80018b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4619      	mov	r1, r3
 80018ba:	4808      	ldr	r0, [pc, #32]	@ (80018dc <MX_GPIO_Init+0x318>)
 80018bc:	f001 fafe 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80018c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c6:	2312      	movs	r3, #18
 80018c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e00a      	b.n	80018e4 <MX_GPIO_Init+0x320>
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000
 80018d4:	48001000 	.word	0x48001000
 80018d8:	48000400 	.word	0x48000400
 80018dc:	48000c00 	.word	0x48000c00
 80018e0:	48000800 	.word	0x48000800
 80018e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018ea:	2304      	movs	r3, #4
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	480b      	ldr	r0, [pc, #44]	@ (8001924 <MX_GPIO_Init+0x360>)
 80018f6:	f001 fae1 	bl	8002ebc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	2017      	movs	r0, #23
 8001900:	f001 f999 	bl	8002c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001904:	2017      	movs	r0, #23
 8001906:	f001 f9b2 	bl	8002c6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	2028      	movs	r0, #40	@ 0x28
 8001910:	f001 f991 	bl	8002c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001914:	2028      	movs	r0, #40	@ 0x28
 8001916:	f001 f9aa 	bl	8002c6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800191a:	bf00      	nop
 800191c:	3728      	adds	r7, #40	@ 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	48000400 	.word	0x48000400

08001928 <arm_fir_example>:

/* USER CODE BEGIN 4 */
void arm_fir_example(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af02      	add	r7, sp, #8
  /* Initialize input and output buffer pointers */
  inputF32 = &testInput_f32_1kHz_15kHz[0];
 800192e:	4b30      	ldr	r3, [pc, #192]	@ (80019f0 <arm_fir_example+0xc8>)
 8001930:	4a30      	ldr	r2, [pc, #192]	@ (80019f4 <arm_fir_example+0xcc>)
 8001932:	601a      	str	r2, [r3, #0]
  outputF32 = &testOutput[0];
 8001934:	4b30      	ldr	r3, [pc, #192]	@ (80019f8 <arm_fir_example+0xd0>)
 8001936:	4a31      	ldr	r2, [pc, #196]	@ (80019fc <arm_fir_example+0xd4>)
 8001938:	601a      	str	r2, [r3, #0]

  /* Call FIR init function to initialize the instance structure. */
  arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], blockSize);
 800193a:	4b31      	ldr	r3, [pc, #196]	@ (8001a00 <arm_fir_example+0xd8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	4b30      	ldr	r3, [pc, #192]	@ (8001a04 <arm_fir_example+0xdc>)
 8001942:	4a31      	ldr	r2, [pc, #196]	@ (8001a08 <arm_fir_example+0xe0>)
 8001944:	211d      	movs	r1, #29
 8001946:	4831      	ldr	r0, [pc, #196]	@ (8001a0c <arm_fir_example+0xe4>)
 8001948:	f7ff fb65 	bl	8001016 <arm_fir_init_f32>

  /* ----------------------------------------------------------------------
  ** Call the FIR process function for every blockSize samples
  ** ------------------------------------------------------------------- */

  for(i=0; i < numBlocks; i++)
 800194c:	4b30      	ldr	r3, [pc, #192]	@ (8001a10 <arm_fir_example+0xe8>)
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	e01e      	b.n	8001992 <arm_fir_example+0x6a>
  {
    arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
 8001954:	4b26      	ldr	r3, [pc, #152]	@ (80019f0 <arm_fir_example+0xc8>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b2d      	ldr	r3, [pc, #180]	@ (8001a10 <arm_fir_example+0xe8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4928      	ldr	r1, [pc, #160]	@ (8001a00 <arm_fir_example+0xd8>)
 800195e:	6809      	ldr	r1, [r1, #0]
 8001960:	fb01 f303 	mul.w	r3, r1, r3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	18d0      	adds	r0, r2, r3
 8001968:	4b23      	ldr	r3, [pc, #140]	@ (80019f8 <arm_fir_example+0xd0>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b28      	ldr	r3, [pc, #160]	@ (8001a10 <arm_fir_example+0xe8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4923      	ldr	r1, [pc, #140]	@ (8001a00 <arm_fir_example+0xd8>)
 8001972:	6809      	ldr	r1, [r1, #0]
 8001974:	fb01 f303 	mul.w	r3, r1, r3
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	441a      	add	r2, r3
 800197c:	4b20      	ldr	r3, [pc, #128]	@ (8001a00 <arm_fir_example+0xd8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4601      	mov	r1, r0
 8001982:	4822      	ldr	r0, [pc, #136]	@ (8001a0c <arm_fir_example+0xe4>)
 8001984:	f7ff fad8 	bl	8000f38 <arm_fir_f32>
  for(i=0; i < numBlocks; i++)
 8001988:	4b21      	ldr	r3, [pc, #132]	@ (8001a10 <arm_fir_example+0xe8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	4a20      	ldr	r2, [pc, #128]	@ (8001a10 <arm_fir_example+0xe8>)
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b1f      	ldr	r3, [pc, #124]	@ (8001a10 <arm_fir_example+0xe8>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4b1f      	ldr	r3, [pc, #124]	@ (8001a14 <arm_fir_example+0xec>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d3da      	bcc.n	8001954 <arm_fir_example+0x2c>
  /* ----------------------------------------------------------------------
  ** Compare the generated output against the reference output computed
  ** in MATLAB.
  ** ------------------------------------------------------------------- */

  snr = arm_snr_f32(&refOutput[0], &testOutput[0], TEST_LENGTH_SAMPLES);
 800199e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80019a2:	4916      	ldr	r1, [pc, #88]	@ (80019fc <arm_fir_example+0xd4>)
 80019a4:	481c      	ldr	r0, [pc, #112]	@ (8001a18 <arm_fir_example+0xf0>)
 80019a6:	f000 f847 	bl	8001a38 <arm_snr_f32>
 80019aa:	eef0 7a40 	vmov.f32	s15, s0
 80019ae:	4b1b      	ldr	r3, [pc, #108]	@ (8001a1c <arm_fir_example+0xf4>)
 80019b0:	edc3 7a00 	vstr	s15, [r3]

  if (snr < SNR_THRESHOLD_F32)
 80019b4:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <arm_fir_example+0xf4>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001a20 <arm_fir_example+0xf8>
 80019be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	d503      	bpl.n	80019d0 <arm_fir_example+0xa8>
  {
    status = ARM_MATH_TEST_FAILURE;
 80019c8:	4b16      	ldr	r3, [pc, #88]	@ (8001a24 <arm_fir_example+0xfc>)
 80019ca:	22fa      	movs	r2, #250	@ 0xfa
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	e002      	b.n	80019d6 <arm_fir_example+0xae>
  }
  else
  {
    status = ARM_MATH_SUCCESS;
 80019d0:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <arm_fir_example+0xfc>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]

  /* ----------------------------------------------------------------------
  ** Loop here if the signal does not match the reference output.
  ** ------------------------------------------------------------------- */

  if ( status != ARM_MATH_SUCCESS)
 80019d6:	4b13      	ldr	r3, [pc, #76]	@ (8001a24 <arm_fir_example+0xfc>)
 80019d8:	f993 3000 	ldrsb.w	r3, [r3]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <arm_fir_example+0xbc>
  {
    while (1);
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <arm_fir_example+0xb8>
  }
  printf("FIR example ran successfully.\n");
 80019e4:	4810      	ldr	r0, [pc, #64]	@ (8001a28 <arm_fir_example+0x100>)
 80019e6:	f005 ff4d 	bl	8007884 <puts>
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20001c24 	.word	0x20001c24
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20001c28 	.word	0x20001c28
 80019fc:	20000c2c 	.word	0x20000c2c
 8001a00:	20000a00 	.word	0x20000a00
 8001a04:	2000112c 	.word	0x2000112c
 8001a08:	08009d44 	.word	0x08009d44
 8001a0c:	20001c08 	.word	0x20001c08
 8001a10:	20001c04 	.word	0x20001c04
 8001a14:	20000a04 	.word	0x20000a04
 8001a18:	20000500 	.word	0x20000500
 8001a1c:	200014d8 	.word	0x200014d8
 8001a20:	430c0000 	.word	0x430c0000
 8001a24:	20001c20 	.word	0x20001c20
 8001a28:	08009d04 	.word	0x08009d04

08001a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a30:	b672      	cpsid	i
}
 8001a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <Error_Handler+0x8>

08001a38 <arm_snr_f32>:
 * The function Caluclates signal to noise ratio for the reference output
 * and test output
 */

float arm_snr_f32(float *pRef, float *pTest, uint32_t buffSize)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	@ 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  float EnergySignal = 0.0, EnergyError = 0.0;
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]
  uint32_t i;
  float SNR;
  int temp;
  int *test;

  for (i = 0; i < buffSize; i++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
 8001a54:	e058      	b.n	8001b08 <arm_snr_f32+0xd0>
    {
 	  /* Checking for a NAN value in pRef array */
	  test =   (int *)(&pRef[i]);
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	61fb      	str	r3, [r7, #28]
      temp =  *test;
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	61bb      	str	r3, [r7, #24]

	  if (temp == 0x7FC00000)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	4a43      	ldr	r2, [pc, #268]	@ (8001b78 <arm_snr_f32+0x140>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d102      	bne.n	8001a74 <arm_snr_f32+0x3c>
	  {
	  		return(0);
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	e07a      	b.n	8001b6a <arm_snr_f32+0x132>
	  }

	  /* Checking for a NAN value in pTest array */
	  test =   (int *)(&pTest[i]);
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	61fb      	str	r3, [r7, #28]
      temp =  *test;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	61bb      	str	r3, [r7, #24]

	  if (temp == 0x7FC00000)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	4a3c      	ldr	r2, [pc, #240]	@ (8001b78 <arm_snr_f32+0x140>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d102      	bne.n	8001a92 <arm_snr_f32+0x5a>
	  {
	  		return(0);
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e06b      	b.n	8001b6a <arm_snr_f32+0x132>
	  }
      EnergySignal += pRef[i] * pRef[i];
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4413      	add	r3, r2
 8001a9a:	ed93 7a00 	vldr	s14, [r3]
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
 8001aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aae:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      EnergyError += (pRef[i] - pTest[i]) * (pRef[i] - pTest[i]);
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	ed93 7a00 	vldr	s14, [r3]
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	4413      	add	r3, r2
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	4413      	add	r3, r2
 8001ade:	edd3 6a00 	vldr	s13, [r3]
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	4413      	add	r3, r2
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001af2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001afa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001afe:	edc7 7a04 	vstr	s15, [r7, #16]
  for (i = 0; i < buffSize; i++)
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	3301      	adds	r3, #1
 8001b06:	623b      	str	r3, [r7, #32]
 8001b08:	6a3a      	ldr	r2, [r7, #32]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d3a2      	bcc.n	8001a56 <arm_snr_f32+0x1e>
    }

	/* Checking for a NAN value in EnergyError */
	test =   (int *)(&EnergyError);
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	61fb      	str	r3, [r7, #28]
    temp =  *test;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	61bb      	str	r3, [r7, #24]

    if (temp == 0x7FC00000)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	4a16      	ldr	r2, [pc, #88]	@ (8001b78 <arm_snr_f32+0x140>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d102      	bne.n	8001b2a <arm_snr_f32+0xf2>
    {
  		return(0);
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	e01f      	b.n	8001b6a <arm_snr_f32+0x132>
    }


  SNR = 10 * log10 (EnergySignal / EnergyError);
 8001b2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b2e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b32:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b36:	ee16 0a90 	vmov	r0, s13
 8001b3a:	f7fe fd05 	bl	8000548 <__aeabi_f2d>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	ec43 2b10 	vmov	d0, r2, r3
 8001b46:	f007 fe0f 	bl	8009768 <log10>
 8001b4a:	ec51 0b10 	vmov	r0, r1, d0
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <arm_snr_f32+0x144>)
 8001b54:	f7fe fd50 	bl	80005f8 <__aeabi_dmul>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f7ff f822 	bl	8000ba8 <__aeabi_d2f>
 8001b64:	4603      	mov	r3, r0
 8001b66:	617b      	str	r3, [r7, #20]

  return (SNR);
 8001b68:	697b      	ldr	r3, [r7, #20]

}
 8001b6a:	ee07 3a90 	vmov	s15, r3
 8001b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b72:	3728      	adds	r7, #40	@ 0x28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	7fc00000 	.word	0x7fc00000
 8001b7c:	40240000 	.word	0x40240000

08001b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <HAL_MspInit+0x44>)
 8001b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc4 <HAL_MspInit+0x44>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b92:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <HAL_MspInit+0x44>)
 8001b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <HAL_MspInit+0x44>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba2:	4a08      	ldr	r2, [pc, #32]	@ (8001bc4 <HAL_MspInit+0x44>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <HAL_MspInit+0x44>)
 8001bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000

08001bc8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b0ac      	sub	sp, #176	@ 0xb0
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2288      	movs	r2, #136	@ 0x88
 8001be6:	2100      	movs	r1, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f005 ff2b 	bl	8007a44 <memset>
  if(DFSDM1_Init == 0)
 8001bee:	4b25      	ldr	r3, [pc, #148]	@ (8001c84 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d142      	bne.n	8001c7c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001bf6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bfa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4618      	mov	r0, r3
 8001c08:	f003 faf6 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001c12:	f7ff ff0b 	bl	8001a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001c16:	4b1c      	ldr	r3, [pc, #112]	@ (8001c88 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001c88 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c1c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c22:	4b19      	ldr	r3, [pc, #100]	@ (8001c88 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c2e:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c32:	4a15      	ldr	r2, [pc, #84]	@ (8001c88 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c34:	f043 0310 	orr.w	r3, r3, #16
 8001c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c3a:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001c46:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001c4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001c60:	2306      	movs	r3, #6
 8001c62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c66:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4807      	ldr	r0, [pc, #28]	@ (8001c8c <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001c6e:	f001 f925 	bl	8002ebc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001c72:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	3301      	adds	r3, #1
 8001c78:	4a02      	ldr	r2, [pc, #8]	@ (8001c84 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001c7a:	6013      	str	r3, [r2, #0]
  }

}
 8001c7c:	bf00      	nop
 8001c7e:	37b0      	adds	r7, #176	@ 0xb0
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20001c34 	.word	0x20001c34
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	48001000 	.word	0x48001000

08001c90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b0ac      	sub	sp, #176	@ 0xb0
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2288      	movs	r2, #136	@ 0x88
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f005 fec7 	bl	8007a44 <memset>
  if(hi2c->Instance==I2C2)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a21      	ldr	r2, [pc, #132]	@ (8001d40 <HAL_I2C_MspInit+0xb0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d13b      	bne.n	8001d38 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001cc0:	2380      	movs	r3, #128	@ 0x80
 8001cc2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f003 fa93 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001cd8:	f7ff fea8 	bl	8001a2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cdc:	4b19      	ldr	r3, [pc, #100]	@ (8001d44 <HAL_I2C_MspInit+0xb4>)
 8001cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce0:	4a18      	ldr	r2, [pc, #96]	@ (8001d44 <HAL_I2C_MspInit+0xb4>)
 8001ce2:	f043 0302 	orr.w	r3, r3, #2
 8001ce6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce8:	4b16      	ldr	r3, [pc, #88]	@ (8001d44 <HAL_I2C_MspInit+0xb4>)
 8001cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001cf4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001cf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cfc:	2312      	movs	r3, #18
 8001cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d0e:	2304      	movs	r3, #4
 8001d10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d14:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d18:	4619      	mov	r1, r3
 8001d1a:	480b      	ldr	r0, [pc, #44]	@ (8001d48 <HAL_I2C_MspInit+0xb8>)
 8001d1c:	f001 f8ce 	bl	8002ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <HAL_I2C_MspInit+0xb4>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d24:	4a07      	ldr	r2, [pc, #28]	@ (8001d44 <HAL_I2C_MspInit+0xb4>)
 8001d26:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d2c:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <HAL_I2C_MspInit+0xb4>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001d38:	bf00      	nop
 8001d3a:	37b0      	adds	r7, #176	@ 0xb0
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40005800 	.word	0x40005800
 8001d44:	40021000 	.word	0x40021000
 8001d48:	48000400 	.word	0x48000400

08001d4c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0b      	ldr	r2, [pc, #44]	@ (8001d88 <HAL_I2C_MspDeInit+0x3c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d10f      	bne.n	8001d7e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <HAL_I2C_MspDeInit+0x40>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d62:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <HAL_I2C_MspDeInit+0x40>)
 8001d64:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001d68:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001d6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d6e:	4808      	ldr	r0, [pc, #32]	@ (8001d90 <HAL_I2C_MspDeInit+0x44>)
 8001d70:	f001 fa4e 	bl	8003210 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001d74:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d78:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <HAL_I2C_MspDeInit+0x44>)
 8001d7a:	f001 fa49 	bl	8003210 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40005800 	.word	0x40005800
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	48000400 	.word	0x48000400

08001d94 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	@ 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a17      	ldr	r2, [pc, #92]	@ (8001e10 <HAL_QSPI_MspInit+0x7c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d128      	bne.n	8001e08 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001db6:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <HAL_QSPI_MspInit+0x80>)
 8001db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dba:	4a16      	ldr	r2, [pc, #88]	@ (8001e14 <HAL_QSPI_MspInit+0x80>)
 8001dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc0:	6513      	str	r3, [r2, #80]	@ 0x50
 8001dc2:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <HAL_QSPI_MspInit+0x80>)
 8001dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dce:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <HAL_QSPI_MspInit+0x80>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd2:	4a10      	ldr	r2, [pc, #64]	@ (8001e14 <HAL_QSPI_MspInit+0x80>)
 8001dd4:	f043 0310 	orr.w	r3, r3, #16
 8001dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dda:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <HAL_QSPI_MspInit+0x80>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001de6:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001dea:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df4:	2303      	movs	r3, #3
 8001df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001df8:	230a      	movs	r3, #10
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	4619      	mov	r1, r3
 8001e02:	4805      	ldr	r0, [pc, #20]	@ (8001e18 <HAL_QSPI_MspInit+0x84>)
 8001e04:	f001 f85a 	bl	8002ebc <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001e08:	bf00      	nop
 8001e0a:	3728      	adds	r7, #40	@ 0x28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	a0001000 	.word	0xa0001000
 8001e14:	40021000 	.word	0x40021000
 8001e18:	48001000 	.word	0x48001000

08001e1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	@ 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a17      	ldr	r2, [pc, #92]	@ (8001e98 <HAL_SPI_MspInit+0x7c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d128      	bne.n	8001e90 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e3e:	4b17      	ldr	r3, [pc, #92]	@ (8001e9c <HAL_SPI_MspInit+0x80>)
 8001e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e42:	4a16      	ldr	r2, [pc, #88]	@ (8001e9c <HAL_SPI_MspInit+0x80>)
 8001e44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e48:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e4a:	4b14      	ldr	r3, [pc, #80]	@ (8001e9c <HAL_SPI_MspInit+0x80>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e56:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <HAL_SPI_MspInit+0x80>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5a:	4a10      	ldr	r2, [pc, #64]	@ (8001e9c <HAL_SPI_MspInit+0x80>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e62:	4b0e      	ldr	r3, [pc, #56]	@ (8001e9c <HAL_SPI_MspInit+0x80>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001e6e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e80:	2306      	movs	r3, #6
 8001e82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4805      	ldr	r0, [pc, #20]	@ (8001ea0 <HAL_SPI_MspInit+0x84>)
 8001e8c:	f001 f816 	bl	8002ebc <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001e90:	bf00      	nop
 8001e92:	3728      	adds	r7, #40	@ 0x28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40003c00 	.word	0x40003c00
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	48000800 	.word	0x48000800

08001ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b0ae      	sub	sp, #184	@ 0xb8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ebc:	f107 031c 	add.w	r3, r7, #28
 8001ec0:	2288      	movs	r2, #136	@ 0x88
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f005 fdbd 	bl	8007a44 <memset>
  if(huart->Instance==USART1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a42      	ldr	r2, [pc, #264]	@ (8001fd8 <HAL_UART_MspInit+0x134>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d13b      	bne.n	8001f4c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001edc:	f107 031c 	add.w	r3, r7, #28
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f003 f989 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001eec:	f7ff fd9e 	bl	8001a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8001fdc <HAL_UART_MspInit+0x138>)
 8001ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef4:	4a39      	ldr	r2, [pc, #228]	@ (8001fdc <HAL_UART_MspInit+0x138>)
 8001ef6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001efa:	6613      	str	r3, [r2, #96]	@ 0x60
 8001efc:	4b37      	ldr	r3, [pc, #220]	@ (8001fdc <HAL_UART_MspInit+0x138>)
 8001efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f04:	61bb      	str	r3, [r7, #24]
 8001f06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f08:	4b34      	ldr	r3, [pc, #208]	@ (8001fdc <HAL_UART_MspInit+0x138>)
 8001f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0c:	4a33      	ldr	r2, [pc, #204]	@ (8001fdc <HAL_UART_MspInit+0x138>)
 8001f0e:	f043 0302 	orr.w	r3, r3, #2
 8001f12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f14:	4b31      	ldr	r3, [pc, #196]	@ (8001fdc <HAL_UART_MspInit+0x138>)
 8001f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001f20:	23c0      	movs	r3, #192	@ 0xc0
 8001f22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f38:	2307      	movs	r3, #7
 8001f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f42:	4619      	mov	r1, r3
 8001f44:	4826      	ldr	r0, [pc, #152]	@ (8001fe0 <HAL_UART_MspInit+0x13c>)
 8001f46:	f000 ffb9 	bl	8002ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f4a:	e040      	b.n	8001fce <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a24      	ldr	r2, [pc, #144]	@ (8001fe4 <HAL_UART_MspInit+0x140>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d13b      	bne.n	8001fce <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f56:	2304      	movs	r3, #4
 8001f58:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 f948 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001f6e:	f7ff fd5d 	bl	8001a2c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f72:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <HAL_UART_MspInit+0x138>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f76:	4a19      	ldr	r2, [pc, #100]	@ (8001fdc <HAL_UART_MspInit+0x138>)
 8001f78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f7e:	4b17      	ldr	r3, [pc, #92]	@ (8001fdc <HAL_UART_MspInit+0x138>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f8a:	4b14      	ldr	r3, [pc, #80]	@ (8001fdc <HAL_UART_MspInit+0x138>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8e:	4a13      	ldr	r2, [pc, #76]	@ (8001fdc <HAL_UART_MspInit+0x138>)
 8001f90:	f043 0308 	orr.w	r3, r3, #8
 8001f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <HAL_UART_MspInit+0x138>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001fa2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	2302      	movs	r3, #2
 8001fac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fbc:	2307      	movs	r3, #7
 8001fbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4807      	ldr	r0, [pc, #28]	@ (8001fe8 <HAL_UART_MspInit+0x144>)
 8001fca:	f000 ff77 	bl	8002ebc <HAL_GPIO_Init>
}
 8001fce:	bf00      	nop
 8001fd0:	37b8      	adds	r7, #184	@ 0xb8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40013800 	.word	0x40013800
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	48000400 	.word	0x48000400
 8001fe4:	40004800 	.word	0x40004800
 8001fe8:	48000c00 	.word	0x48000c00

08001fec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b0ac      	sub	sp, #176	@ 0xb0
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	2288      	movs	r2, #136	@ 0x88
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f005 fd19 	bl	8007a44 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800201a:	d17c      	bne.n	8002116 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800201c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002020:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002022:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002026:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800202a:	2301      	movs	r3, #1
 800202c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800202e:	2301      	movs	r3, #1
 8002030:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002032:	2318      	movs	r3, #24
 8002034:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002036:	2307      	movs	r3, #7
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800203a:	2302      	movs	r3, #2
 800203c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800203e:	2302      	movs	r3, #2
 8002040:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002042:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002046:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4618      	mov	r0, r3
 800204e:	f003 f8d3 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002058:	f7ff fce8 	bl	8001a2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205c:	4b30      	ldr	r3, [pc, #192]	@ (8002120 <HAL_PCD_MspInit+0x134>)
 800205e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002060:	4a2f      	ldr	r2, [pc, #188]	@ (8002120 <HAL_PCD_MspInit+0x134>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002068:	4b2d      	ldr	r3, [pc, #180]	@ (8002120 <HAL_PCD_MspInit+0x134>)
 800206a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002074:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002078:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002088:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800208c:	4619      	mov	r1, r3
 800208e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002092:	f000 ff13 	bl	8002ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002096:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800209a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80020b0:	230a      	movs	r3, #10
 80020b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020ba:	4619      	mov	r1, r3
 80020bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020c0:	f000 fefc 	bl	8002ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80020c4:	4b16      	ldr	r3, [pc, #88]	@ (8002120 <HAL_PCD_MspInit+0x134>)
 80020c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c8:	4a15      	ldr	r2, [pc, #84]	@ (8002120 <HAL_PCD_MspInit+0x134>)
 80020ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d0:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <HAL_PCD_MspInit+0x134>)
 80020d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020dc:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <HAL_PCD_MspInit+0x134>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d114      	bne.n	8002112 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002120 <HAL_PCD_MspInit+0x134>)
 80020ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002120 <HAL_PCD_MspInit+0x134>)
 80020ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <HAL_PCD_MspInit+0x134>)
 80020f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002100:	f002 f9ae 	bl	8004460 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_PCD_MspInit+0x134>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002108:	4a05      	ldr	r2, [pc, #20]	@ (8002120 <HAL_PCD_MspInit+0x134>)
 800210a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800210e:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002110:	e001      	b.n	8002116 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8002112:	f002 f9a5 	bl	8004460 <HAL_PWREx_EnableVddUSB>
}
 8002116:	bf00      	nop
 8002118:	37b0      	adds	r7, #176	@ 0xb0
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000

08002124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <NMI_Handler+0x4>

0800212c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <HardFault_Handler+0x4>

08002134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <MemManage_Handler+0x4>

0800213c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <BusFault_Handler+0x4>

08002144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <UsageFault_Handler+0x4>

0800214c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800217a:	f000 fc3d 	bl	80029f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}

08002182 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002186:	2020      	movs	r0, #32
 8002188:	f001 f94e 	bl	8003428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800218c:	2040      	movs	r0, #64	@ 0x40
 800218e:	f001 f94b 	bl	8003428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002192:	2080      	movs	r0, #128	@ 0x80
 8002194:	f001 f948 	bl	8003428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002198:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800219c:	f001 f944 	bl	8003428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80021a8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80021ac:	f001 f93c 	bl	8003428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80021b0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80021b4:	f001 f938 	bl	8003428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80021b8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80021bc:	f001 f934 	bl	8003428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80021c0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80021c4:	f001 f930 	bl	8003428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80021c8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80021cc:	f001 f92c 	bl	8003428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return 1;
 80021d8:	2301      	movs	r3, #1
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <_kill>:

int _kill(int pid, int sig)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021ee:	f005 fc7b 	bl	8007ae8 <__errno>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2216      	movs	r2, #22
 80021f6:	601a      	str	r2, [r3, #0]
  return -1;
 80021f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_exit>:

void _exit (int status)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ffe7 	bl	80021e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002216:	bf00      	nop
 8002218:	e7fd      	b.n	8002216 <_exit+0x12>

0800221a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	e00a      	b.n	8002242 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800222c:	f3af 8000 	nop.w
 8002230:	4601      	mov	r1, r0
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	60ba      	str	r2, [r7, #8]
 8002238:	b2ca      	uxtb	r2, r1
 800223a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	3301      	adds	r3, #1
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	429a      	cmp	r2, r3
 8002248:	dbf0      	blt.n	800222c <_read+0x12>
  }

  return len;
 800224a:	687b      	ldr	r3, [r7, #4]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	e009      	b.n	800227a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	60ba      	str	r2, [r7, #8]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fef0 	bl	8001054 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	3301      	adds	r3, #1
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	429a      	cmp	r2, r3
 8002280:	dbf1      	blt.n	8002266 <_write+0x12>
  }
  return len;
 8002282:	687b      	ldr	r3, [r7, #4]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <_close>:

int _close(int file)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002294:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022b4:	605a      	str	r2, [r3, #4]
  return 0;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <_isatty>:

int _isatty(int file)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022cc:	2301      	movs	r3, #1
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022da:	b480      	push	{r7}
 80022dc:	b085      	sub	sp, #20
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022fc:	4a14      	ldr	r2, [pc, #80]	@ (8002350 <_sbrk+0x5c>)
 80022fe:	4b15      	ldr	r3, [pc, #84]	@ (8002354 <_sbrk+0x60>)
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002308:	4b13      	ldr	r3, [pc, #76]	@ (8002358 <_sbrk+0x64>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002310:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <_sbrk+0x64>)
 8002312:	4a12      	ldr	r2, [pc, #72]	@ (800235c <_sbrk+0x68>)
 8002314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002316:	4b10      	ldr	r3, [pc, #64]	@ (8002358 <_sbrk+0x64>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	429a      	cmp	r2, r3
 8002322:	d207      	bcs.n	8002334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002324:	f005 fbe0 	bl	8007ae8 <__errno>
 8002328:	4603      	mov	r3, r0
 800232a:	220c      	movs	r2, #12
 800232c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800232e:	f04f 33ff 	mov.w	r3, #4294967295
 8002332:	e009      	b.n	8002348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002334:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <_sbrk+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800233a:	4b07      	ldr	r3, [pc, #28]	@ (8002358 <_sbrk+0x64>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	4a05      	ldr	r2, [pc, #20]	@ (8002358 <_sbrk+0x64>)
 8002344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20018000 	.word	0x20018000
 8002354:	00000400 	.word	0x00000400
 8002358:	20001c38 	.word	0x20001c38
 800235c:	20001e08 	.word	0x20001e08

08002360 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <SystemInit+0x20>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236a:	4a05      	ldr	r2, [pc, #20]	@ (8002380 <SystemInit+0x20>)
 800236c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002370:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002384:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002388:	f7ff ffea 	bl	8002360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800238c:	480c      	ldr	r0, [pc, #48]	@ (80023c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800238e:	490d      	ldr	r1, [pc, #52]	@ (80023c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002390:	4a0d      	ldr	r2, [pc, #52]	@ (80023c8 <LoopForever+0xe>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002394:	e002      	b.n	800239c <LoopCopyDataInit>

08002396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800239a:	3304      	adds	r3, #4

0800239c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800239c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a0:	d3f9      	bcc.n	8002396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023a2:	4a0a      	ldr	r2, [pc, #40]	@ (80023cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80023a4:	4c0a      	ldr	r4, [pc, #40]	@ (80023d0 <LoopForever+0x16>)
  movs r3, #0
 80023a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a8:	e001      	b.n	80023ae <LoopFillZerobss>

080023aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023ac:	3204      	adds	r2, #4

080023ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b0:	d3fb      	bcc.n	80023aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023b2:	f005 fb9f 	bl	8007af4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023b6:	f7fe fe5f 	bl	8001078 <main>

080023ba <LoopForever>:

LoopForever:
    b LoopForever
 80023ba:	e7fe      	b.n	80023ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80023c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c4:	20000c10 	.word	0x20000c10
  ldr r2, =_sidata
 80023c8:	0800a1c0 	.word	0x0800a1c0
  ldr r2, =_sbss
 80023cc:	20000c10 	.word	0x20000c10
  ldr r4, =_ebss
 80023d0:	20001e08 	.word	0x20001e08

080023d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023d4:	e7fe      	b.n	80023d4 <ADC1_2_IRQHandler>
	...

080023d8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	@ 0x28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80023e0:	4b27      	ldr	r3, [pc, #156]	@ (8002480 <I2Cx_MspInit+0xa8>)
 80023e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e4:	4a26      	ldr	r2, [pc, #152]	@ (8002480 <I2Cx_MspInit+0xa8>)
 80023e6:	f043 0302 	orr.w	r3, r3, #2
 80023ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ec:	4b24      	ldr	r3, [pc, #144]	@ (8002480 <I2Cx_MspInit+0xa8>)
 80023ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80023f8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80023fc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80023fe:	2312      	movs	r3, #18
 8002400:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002402:	2301      	movs	r3, #1
 8002404:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002406:	2303      	movs	r3, #3
 8002408:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800240a:	2304      	movs	r3, #4
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4619      	mov	r1, r3
 8002414:	481b      	ldr	r0, [pc, #108]	@ (8002484 <I2Cx_MspInit+0xac>)
 8002416:	f000 fd51 	bl	8002ebc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800241a:	f107 0314 	add.w	r3, r7, #20
 800241e:	4619      	mov	r1, r3
 8002420:	4818      	ldr	r0, [pc, #96]	@ (8002484 <I2Cx_MspInit+0xac>)
 8002422:	f000 fd4b 	bl	8002ebc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002426:	4b16      	ldr	r3, [pc, #88]	@ (8002480 <I2Cx_MspInit+0xa8>)
 8002428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800242a:	4a15      	ldr	r2, [pc, #84]	@ (8002480 <I2Cx_MspInit+0xa8>)
 800242c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002430:	6593      	str	r3, [r2, #88]	@ 0x58
 8002432:	4b13      	ldr	r3, [pc, #76]	@ (8002480 <I2Cx_MspInit+0xa8>)
 8002434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800243e:	4b10      	ldr	r3, [pc, #64]	@ (8002480 <I2Cx_MspInit+0xa8>)
 8002440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002442:	4a0f      	ldr	r2, [pc, #60]	@ (8002480 <I2Cx_MspInit+0xa8>)
 8002444:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002448:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800244a:	4b0d      	ldr	r3, [pc, #52]	@ (8002480 <I2Cx_MspInit+0xa8>)
 800244c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800244e:	4a0c      	ldr	r2, [pc, #48]	@ (8002480 <I2Cx_MspInit+0xa8>)
 8002450:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002454:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	210f      	movs	r1, #15
 800245a:	2021      	movs	r0, #33	@ 0x21
 800245c:	f000 fbeb 	bl	8002c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002460:	2021      	movs	r0, #33	@ 0x21
 8002462:	f000 fc04 	bl	8002c6e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	210f      	movs	r1, #15
 800246a:	2022      	movs	r0, #34	@ 0x22
 800246c:	f000 fbe3 	bl	8002c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002470:	2022      	movs	r0, #34	@ 0x22
 8002472:	f000 fbfc 	bl	8002c6e <HAL_NVIC_EnableIRQ>
}
 8002476:	bf00      	nop
 8002478:	3728      	adds	r7, #40	@ 0x28
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
 8002484:	48000400 	.word	0x48000400

08002488 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a12      	ldr	r2, [pc, #72]	@ (80024dc <I2Cx_Init+0x54>)
 8002494:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a11      	ldr	r2, [pc, #68]	@ (80024e0 <I2Cx_Init+0x58>)
 800249a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff89 	bl	80023d8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 ffd1 	bl	800346e <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80024cc:	2100      	movs	r1, #0
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f001 fd88 	bl	8003fe4 <HAL_I2CEx_ConfigAnalogFilter>
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40005800 	.word	0x40005800
 80024e0:	00702681 	.word	0x00702681

080024e4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	@ 0x28
 80024e8:	af04      	add	r7, sp, #16
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	4608      	mov	r0, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	461a      	mov	r2, r3
 80024f2:	4603      	mov	r3, r0
 80024f4:	72fb      	strb	r3, [r7, #11]
 80024f6:	460b      	mov	r3, r1
 80024f8:	813b      	strh	r3, [r7, #8]
 80024fa:	4613      	mov	r3, r2
 80024fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002502:	7afb      	ldrb	r3, [r7, #11]
 8002504:	b299      	uxth	r1, r3
 8002506:	88f8      	ldrh	r0, [r7, #6]
 8002508:	893a      	ldrh	r2, [r7, #8]
 800250a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800250e:	9302      	str	r3, [sp, #8]
 8002510:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	4603      	mov	r3, r0
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f001 f986 	bl	800382c <HAL_I2C_Mem_Read>
 8002520:	4603      	mov	r3, r0
 8002522:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002524:	7dfb      	ldrb	r3, [r7, #23]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d004      	beq.n	8002534 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800252a:	7afb      	ldrb	r3, [r7, #11]
 800252c:	4619      	mov	r1, r3
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f832 	bl	8002598 <I2Cx_Error>
  }
  return status;
 8002534:	7dfb      	ldrb	r3, [r7, #23]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b08a      	sub	sp, #40	@ 0x28
 8002542:	af04      	add	r7, sp, #16
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	4608      	mov	r0, r1
 8002548:	4611      	mov	r1, r2
 800254a:	461a      	mov	r2, r3
 800254c:	4603      	mov	r3, r0
 800254e:	72fb      	strb	r3, [r7, #11]
 8002550:	460b      	mov	r3, r1
 8002552:	813b      	strh	r3, [r7, #8]
 8002554:	4613      	mov	r3, r2
 8002556:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800255c:	7afb      	ldrb	r3, [r7, #11]
 800255e:	b299      	uxth	r1, r3
 8002560:	88f8      	ldrh	r0, [r7, #6]
 8002562:	893a      	ldrh	r2, [r7, #8]
 8002564:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002568:	9302      	str	r3, [sp, #8]
 800256a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800256c:	9301      	str	r3, [sp, #4]
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	4603      	mov	r3, r0
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f001 f845 	bl	8003604 <HAL_I2C_Mem_Write>
 800257a:	4603      	mov	r3, r0
 800257c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800257e:	7dfb      	ldrb	r3, [r7, #23]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d004      	beq.n	800258e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002584:	7afb      	ldrb	r3, [r7, #11]
 8002586:	4619      	mov	r1, r3
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 f805 	bl	8002598 <I2Cx_Error>
  }
  return status;
 800258e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 fffd 	bl	80035a4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ff6c 	bl	8002488 <I2Cx_Init>
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80025bc:	4802      	ldr	r0, [pc, #8]	@ (80025c8 <SENSOR_IO_Init+0x10>)
 80025be:	f7ff ff63 	bl	8002488 <I2Cx_Init>
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20001c3c 	.word	0x20001c3c

080025cc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
 80025d6:	460b      	mov	r3, r1
 80025d8:	71bb      	strb	r3, [r7, #6]
 80025da:	4613      	mov	r3, r2
 80025dc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80025de:	79bb      	ldrb	r3, [r7, #6]
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	79f9      	ldrb	r1, [r7, #7]
 80025e4:	2301      	movs	r3, #1
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	1d7b      	adds	r3, r7, #5
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2301      	movs	r3, #1
 80025ee:	4803      	ldr	r0, [pc, #12]	@ (80025fc <SENSOR_IO_Write+0x30>)
 80025f0:	f7ff ffa5 	bl	800253e <I2Cx_WriteMultiple>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20001c3c 	.word	0x20001c3c

08002600 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af02      	add	r7, sp, #8
 8002606:	4603      	mov	r3, r0
 8002608:	460a      	mov	r2, r1
 800260a:	71fb      	strb	r3, [r7, #7]
 800260c:	4613      	mov	r3, r2
 800260e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002614:	79bb      	ldrb	r3, [r7, #6]
 8002616:	b29a      	uxth	r2, r3
 8002618:	79f9      	ldrb	r1, [r7, #7]
 800261a:	2301      	movs	r3, #1
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	f107 030f 	add.w	r3, r7, #15
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	2301      	movs	r3, #1
 8002626:	4804      	ldr	r0, [pc, #16]	@ (8002638 <SENSOR_IO_Read+0x38>)
 8002628:	f7ff ff5c 	bl	80024e4 <I2Cx_ReadMultiple>

  return read_value;
 800262c:	7bfb      	ldrb	r3, [r7, #15]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20001c3c 	.word	0x20001c3c

0800263c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af02      	add	r7, sp, #8
 8002642:	603a      	str	r2, [r7, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
 800264a:	460b      	mov	r3, r1
 800264c:	71bb      	strb	r3, [r7, #6]
 800264e:	4613      	mov	r3, r2
 8002650:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002652:	79bb      	ldrb	r3, [r7, #6]
 8002654:	b29a      	uxth	r2, r3
 8002656:	79f9      	ldrb	r1, [r7, #7]
 8002658:	88bb      	ldrh	r3, [r7, #4]
 800265a:	9301      	str	r3, [sp, #4]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	2301      	movs	r3, #1
 8002662:	4804      	ldr	r0, [pc, #16]	@ (8002674 <SENSOR_IO_ReadMultiple+0x38>)
 8002664:	f7ff ff3e 	bl	80024e4 <I2Cx_ReadMultiple>
 8002668:	4603      	mov	r3, r0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20001c3c 	.word	0x20001c3c

08002678 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002682:	2300      	movs	r3, #0
 8002684:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002686:	4b19      	ldr	r3, [pc, #100]	@ (80026ec <BSP_ACCELERO_Init+0x74>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	4798      	blx	r3
 800268c:	4603      	mov	r3, r0
 800268e:	2b6a      	cmp	r3, #106	@ 0x6a
 8002690:	d002      	beq.n	8002698 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
 8002696:	e024      	b.n	80026e2 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002698:	4b15      	ldr	r3, [pc, #84]	@ (80026f0 <BSP_ACCELERO_Init+0x78>)
 800269a:	4a14      	ldr	r2, [pc, #80]	@ (80026ec <BSP_ACCELERO_Init+0x74>)
 800269c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800269e:	2330      	movs	r3, #48	@ 0x30
 80026a0:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80026a6:	2300      	movs	r3, #0
 80026a8:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80026aa:	2340      	movs	r3, #64	@ 0x40
 80026ac:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80026b6:	797a      	ldrb	r2, [r7, #5]
 80026b8:	7abb      	ldrb	r3, [r7, #10]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80026c0:	7a3b      	ldrb	r3, [r7, #8]
 80026c2:	f043 0304 	orr.w	r3, r3, #4
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	021b      	lsls	r3, r3, #8
 80026ca:	b21a      	sxth	r2, r3
 80026cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	b21b      	sxth	r3, r3
 80026d4:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80026d6:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <BSP_ACCELERO_Init+0x78>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	89ba      	ldrh	r2, [r7, #12]
 80026de:	4610      	mov	r0, r2
 80026e0:	4798      	blx	r3
  }  

  return ret;
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000a0c 	.word	0x20000a0c
 80026f0:	20001c90 	.word	0x20001c90

080026f4 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80026fc:	4b08      	ldr	r3, [pc, #32]	@ (8002720 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d009      	beq.n	8002718 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002704:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	2b00      	cmp	r3, #0
 800270c:	d004      	beq.n	8002718 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800270e:	4b04      	ldr	r3, [pc, #16]	@ (8002720 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
    }
  }
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20001c90 	.word	0x20001c90

08002724 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002732:	2110      	movs	r1, #16
 8002734:	20d4      	movs	r0, #212	@ 0xd4
 8002736:	f7ff ff63 	bl	8002600 <SENSOR_IO_Read>
 800273a:	4603      	mov	r3, r0
 800273c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002742:	7bbb      	ldrb	r3, [r7, #14]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800274a:	7bba      	ldrb	r2, [r7, #14]
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	4313      	orrs	r3, r2
 8002750:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002752:	7bbb      	ldrb	r3, [r7, #14]
 8002754:	461a      	mov	r2, r3
 8002756:	2110      	movs	r1, #16
 8002758:	20d4      	movs	r0, #212	@ 0xd4
 800275a:	f7ff ff37 	bl	80025cc <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800275e:	2112      	movs	r1, #18
 8002760:	20d4      	movs	r0, #212	@ 0xd4
 8002762:	f7ff ff4d 	bl	8002600 <SENSOR_IO_Read>
 8002766:	4603      	mov	r3, r0
 8002768:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	b29b      	uxth	r3, r3
 8002770:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002772:	7bbb      	ldrb	r3, [r7, #14]
 8002774:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8002778:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800277a:	7bba      	ldrb	r2, [r7, #14]
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	4313      	orrs	r3, r2
 8002780:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002782:	7bbb      	ldrb	r3, [r7, #14]
 8002784:	461a      	mov	r2, r3
 8002786:	2112      	movs	r1, #18
 8002788:	20d4      	movs	r0, #212	@ 0xd4
 800278a:	f7ff ff1f 	bl	80025cc <SENSOR_IO_Write>
}
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800279c:	2300      	movs	r3, #0
 800279e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80027a0:	2110      	movs	r1, #16
 80027a2:	20d4      	movs	r0, #212	@ 0xd4
 80027a4:	f7ff ff2c 	bl	8002600 <SENSOR_IO_Read>
 80027a8:	4603      	mov	r3, r0
 80027aa:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	461a      	mov	r2, r3
 80027b8:	2110      	movs	r1, #16
 80027ba:	20d4      	movs	r0, #212	@ 0xd4
 80027bc:	f7ff ff06 	bl	80025cc <SENSOR_IO_Write>
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80027cc:	f7ff fef4 	bl	80025b8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80027d0:	210f      	movs	r1, #15
 80027d2:	20d4      	movs	r0, #212	@ 0xd4
 80027d4:	f7ff ff14 	bl	8002600 <SENSOR_IO_Read>
 80027d8:	4603      	mov	r3, r0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	bd80      	pop	{r7, pc}

080027de <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b084      	sub	sp, #16
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80027e8:	2300      	movs	r3, #0
 80027ea:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80027ec:	2115      	movs	r1, #21
 80027ee:	20d4      	movs	r0, #212	@ 0xd4
 80027f0:	f7ff ff06 	bl	8002600 <SENSOR_IO_Read>
 80027f4:	4603      	mov	r3, r0
 80027f6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	f023 0310 	bic.w	r3, r3, #16
 80027fe:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	f043 0310 	orr.w	r3, r3, #16
 800280c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	461a      	mov	r2, r3
 8002812:	2115      	movs	r1, #21
 8002814:	20d4      	movs	r0, #212	@ 0xd4
 8002816:	f7ff fed9 	bl	80025cc <SENSOR_IO_Write>
}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800282c:	2300      	movs	r3, #0
 800282e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800283a:	2110      	movs	r1, #16
 800283c:	20d4      	movs	r0, #212	@ 0xd4
 800283e:	f7ff fedf 	bl	8002600 <SENSOR_IO_Read>
 8002842:	4603      	mov	r3, r0
 8002844:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002846:	f107 0208 	add.w	r2, r7, #8
 800284a:	2306      	movs	r3, #6
 800284c:	2128      	movs	r1, #40	@ 0x28
 800284e:	20d4      	movs	r0, #212	@ 0xd4
 8002850:	f7ff fef4 	bl	800263c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002854:	2300      	movs	r3, #0
 8002856:	77fb      	strb	r3, [r7, #31]
 8002858:	e01a      	b.n	8002890 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800285a:	7ffb      	ldrb	r3, [r7, #31]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	3301      	adds	r3, #1
 8002860:	3320      	adds	r3, #32
 8002862:	443b      	add	r3, r7
 8002864:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	b29b      	uxth	r3, r3
 800286c:	7ffa      	ldrb	r2, [r7, #31]
 800286e:	0052      	lsls	r2, r2, #1
 8002870:	3220      	adds	r2, #32
 8002872:	443a      	add	r2, r7
 8002874:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002878:	4413      	add	r3, r2
 800287a:	b29a      	uxth	r2, r3
 800287c:	7ffb      	ldrb	r3, [r7, #31]
 800287e:	b212      	sxth	r2, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	3320      	adds	r3, #32
 8002884:	443b      	add	r3, r7
 8002886:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800288a:	7ffb      	ldrb	r3, [r7, #31]
 800288c:	3301      	adds	r3, #1
 800288e:	77fb      	strb	r3, [r7, #31]
 8002890:	7ffb      	ldrb	r3, [r7, #31]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d9e1      	bls.n	800285a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002896:	7dfb      	ldrb	r3, [r7, #23]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b0c      	cmp	r3, #12
 800289e:	d829      	bhi.n	80028f4 <LSM6DSL_AccReadXYZ+0xd0>
 80028a0:	a201      	add	r2, pc, #4	@ (adr r2, 80028a8 <LSM6DSL_AccReadXYZ+0x84>)
 80028a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a6:	bf00      	nop
 80028a8:	080028dd 	.word	0x080028dd
 80028ac:	080028f5 	.word	0x080028f5
 80028b0:	080028f5 	.word	0x080028f5
 80028b4:	080028f5 	.word	0x080028f5
 80028b8:	080028ef 	.word	0x080028ef
 80028bc:	080028f5 	.word	0x080028f5
 80028c0:	080028f5 	.word	0x080028f5
 80028c4:	080028f5 	.word	0x080028f5
 80028c8:	080028e3 	.word	0x080028e3
 80028cc:	080028f5 	.word	0x080028f5
 80028d0:	080028f5 	.word	0x080028f5
 80028d4:	080028f5 	.word	0x080028f5
 80028d8:	080028e9 	.word	0x080028e9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80028dc:	4b18      	ldr	r3, [pc, #96]	@ (8002940 <LSM6DSL_AccReadXYZ+0x11c>)
 80028de:	61bb      	str	r3, [r7, #24]
    break;
 80028e0:	e008      	b.n	80028f4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80028e2:	4b18      	ldr	r3, [pc, #96]	@ (8002944 <LSM6DSL_AccReadXYZ+0x120>)
 80028e4:	61bb      	str	r3, [r7, #24]
    break;
 80028e6:	e005      	b.n	80028f4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80028e8:	4b17      	ldr	r3, [pc, #92]	@ (8002948 <LSM6DSL_AccReadXYZ+0x124>)
 80028ea:	61bb      	str	r3, [r7, #24]
    break;
 80028ec:	e002      	b.n	80028f4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80028ee:	4b17      	ldr	r3, [pc, #92]	@ (800294c <LSM6DSL_AccReadXYZ+0x128>)
 80028f0:	61bb      	str	r3, [r7, #24]
    break;    
 80028f2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80028f4:	2300      	movs	r3, #0
 80028f6:	77fb      	strb	r3, [r7, #31]
 80028f8:	e01a      	b.n	8002930 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80028fa:	7ffb      	ldrb	r3, [r7, #31]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	3320      	adds	r3, #32
 8002900:	443b      	add	r3, r7
 8002902:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002906:	ee07 3a90 	vmov	s15, r3
 800290a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800290e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002916:	7ffb      	ldrb	r3, [r7, #31]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002922:	ee17 2a90 	vmov	r2, s15
 8002926:	b212      	sxth	r2, r2
 8002928:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800292a:	7ffb      	ldrb	r3, [r7, #31]
 800292c:	3301      	adds	r3, #1
 800292e:	77fb      	strb	r3, [r7, #31]
 8002930:	7ffb      	ldrb	r3, [r7, #31]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d9e1      	bls.n	80028fa <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8002936:	bf00      	nop
 8002938:	bf00      	nop
 800293a:	3720      	adds	r7, #32
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	3d79db23 	.word	0x3d79db23
 8002944:	3df9db23 	.word	0x3df9db23
 8002948:	3e79db23 	.word	0x3e79db23
 800294c:	3ef9db23 	.word	0x3ef9db23

08002950 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800295a:	2003      	movs	r0, #3
 800295c:	f000 f960 	bl	8002c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002960:	2000      	movs	r0, #0
 8002962:	f000 f80d 	bl	8002980 <HAL_InitTick>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	71fb      	strb	r3, [r7, #7]
 8002970:	e001      	b.n	8002976 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002972:	f7ff f905 	bl	8001b80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002976:	79fb      	ldrb	r3, [r7, #7]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800298c:	4b17      	ldr	r3, [pc, #92]	@ (80029ec <HAL_InitTick+0x6c>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d023      	beq.n	80029dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002994:	4b16      	ldr	r3, [pc, #88]	@ (80029f0 <HAL_InitTick+0x70>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b14      	ldr	r3, [pc, #80]	@ (80029ec <HAL_InitTick+0x6c>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4619      	mov	r1, r3
 800299e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f96d 	bl	8002c8a <HAL_SYSTICK_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b0f      	cmp	r3, #15
 80029ba:	d809      	bhi.n	80029d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029bc:	2200      	movs	r2, #0
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	f04f 30ff 	mov.w	r0, #4294967295
 80029c4:	f000 f937 	bl	8002c36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029c8:	4a0a      	ldr	r2, [pc, #40]	@ (80029f4 <HAL_InitTick+0x74>)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e007      	b.n	80029e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
 80029d4:	e004      	b.n	80029e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	e001      	b.n	80029e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000a44 	.word	0x20000a44
 80029f0:	20000a08 	.word	0x20000a08
 80029f4:	20000a40 	.word	0x20000a40

080029f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029fc:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_IncTick+0x20>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b06      	ldr	r3, [pc, #24]	@ (8002a1c <HAL_IncTick+0x24>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	4a04      	ldr	r2, [pc, #16]	@ (8002a1c <HAL_IncTick+0x24>)
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000a44 	.word	0x20000a44
 8002a1c:	20001c94 	.word	0x20001c94

08002a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return uwTick;
 8002a24:	4b03      	ldr	r3, [pc, #12]	@ (8002a34 <HAL_GetTick+0x14>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20001c94 	.word	0x20001c94

08002a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a40:	f7ff ffee 	bl	8002a20 <HAL_GetTick>
 8002a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a50:	d005      	beq.n	8002a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a52:	4b0a      	ldr	r3, [pc, #40]	@ (8002a7c <HAL_Delay+0x44>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a5e:	bf00      	nop
 8002a60:	f7ff ffde 	bl	8002a20 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d8f7      	bhi.n	8002a60 <HAL_Delay+0x28>
  {
  }
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000a44 	.word	0x20000a44

08002a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab2:	4a04      	ldr	r2, [pc, #16]	@ (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	60d3      	str	r3, [r2, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002acc:	4b04      	ldr	r3, [pc, #16]	@ (8002ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	0a1b      	lsrs	r3, r3, #8
 8002ad2:	f003 0307 	and.w	r3, r3, #7
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	db0b      	blt.n	8002b0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	4907      	ldr	r1, [pc, #28]	@ (8002b1c <__NVIC_EnableIRQ+0x38>)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2001      	movs	r0, #1
 8002b06:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000e100 	.word	0xe000e100

08002b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	6039      	str	r1, [r7, #0]
 8002b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	db0a      	blt.n	8002b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	490c      	ldr	r1, [pc, #48]	@ (8002b6c <__NVIC_SetPriority+0x4c>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	0112      	lsls	r2, r2, #4
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	440b      	add	r3, r1
 8002b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b48:	e00a      	b.n	8002b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4908      	ldr	r1, [pc, #32]	@ (8002b70 <__NVIC_SetPriority+0x50>)
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	3b04      	subs	r3, #4
 8002b58:	0112      	lsls	r2, r2, #4
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	761a      	strb	r2, [r3, #24]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000e100 	.word	0xe000e100
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	@ 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f1c3 0307 	rsb	r3, r3, #7
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	bf28      	it	cs
 8002b92:	2304      	movcs	r3, #4
 8002b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d902      	bls.n	8002ba4 <NVIC_EncodePriority+0x30>
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3b03      	subs	r3, #3
 8002ba2:	e000      	b.n	8002ba6 <NVIC_EncodePriority+0x32>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	43d9      	mvns	r1, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	4313      	orrs	r3, r2
         );
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3724      	adds	r7, #36	@ 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bec:	d301      	bcc.n	8002bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00f      	b.n	8002c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8002c1c <SysTick_Config+0x40>)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bfa:	210f      	movs	r1, #15
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f7ff ff8e 	bl	8002b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c04:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <SysTick_Config+0x40>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0a:	4b04      	ldr	r3, [pc, #16]	@ (8002c1c <SysTick_Config+0x40>)
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	e000e010 	.word	0xe000e010

08002c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff ff29 	bl	8002a80 <__NVIC_SetPriorityGrouping>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b086      	sub	sp, #24
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c48:	f7ff ff3e 	bl	8002ac8 <__NVIC_GetPriorityGrouping>
 8002c4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	6978      	ldr	r0, [r7, #20]
 8002c54:	f7ff ff8e 	bl	8002b74 <NVIC_EncodePriority>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff5d 	bl	8002b20 <__NVIC_SetPriority>
}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff31 	bl	8002ae4 <__NVIC_EnableIRQ>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ffa2 	bl	8002bdc <SysTick_Config>
 8002c98:	4603      	mov	r3, r0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e0ac      	b.n	8002e10 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f8b2 	bl	8002e24 <DFSDM_GetChannelFromInstance>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	4a55      	ldr	r2, [pc, #340]	@ (8002e18 <HAL_DFSDM_ChannelInit+0x174>)
 8002cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e09f      	b.n	8002e10 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7fe ff79 	bl	8001bc8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002cd6:	4b51      	ldr	r3, [pc, #324]	@ (8002e1c <HAL_DFSDM_ChannelInit+0x178>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	4a4f      	ldr	r2, [pc, #316]	@ (8002e1c <HAL_DFSDM_ChannelInit+0x178>)
 8002cde:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002ce0:	4b4e      	ldr	r3, [pc, #312]	@ (8002e1c <HAL_DFSDM_ChannelInit+0x178>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d125      	bne.n	8002d34 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002ce8:	4b4d      	ldr	r3, [pc, #308]	@ (8002e20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a4c      	ldr	r2, [pc, #304]	@ (8002e20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002cee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002cf2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002cf4:	4b4a      	ldr	r3, [pc, #296]	@ (8002e20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4948      	ldr	r1, [pc, #288]	@ (8002e20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002d02:	4b47      	ldr	r3, [pc, #284]	@ (8002e20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a46      	ldr	r2, [pc, #280]	@ (8002e20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d08:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8002d0c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	791b      	ldrb	r3, [r3, #4]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d108      	bne.n	8002d28 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002d16:	4b42      	ldr	r3, [pc, #264]	@ (8002e20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	041b      	lsls	r3, r3, #16
 8002d22:	493f      	ldr	r1, [pc, #252]	@ (8002e20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002d28:	4b3d      	ldr	r3, [pc, #244]	@ (8002e20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a3c      	ldr	r2, [pc, #240]	@ (8002e20 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d32:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8002d42:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6819      	ldr	r1, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002d52:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002d58:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 020f 	bic.w	r2, r2, #15
 8002d70:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6819      	ldr	r1, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8002d98:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6899      	ldr	r1, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da8:	3b01      	subs	r3, #1
 8002daa:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f002 0207 	and.w	r2, r2, #7
 8002dc4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002df0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f810 	bl	8002e24 <DFSDM_GetChannelFromInstance>
 8002e04:	4602      	mov	r2, r0
 8002e06:	4904      	ldr	r1, [pc, #16]	@ (8002e18 <HAL_DFSDM_ChannelInit+0x174>)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20001c9c 	.word	0x20001c9c
 8002e1c:	20001c98 	.word	0x20001c98
 8002e20:	40016000 	.word	0x40016000

08002e24 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea0 <DFSDM_GetChannelFromInstance+0x7c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d102      	bne.n	8002e3a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	e02b      	b.n	8002e92 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a19      	ldr	r2, [pc, #100]	@ (8002ea4 <DFSDM_GetChannelFromInstance+0x80>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d102      	bne.n	8002e48 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002e42:	2301      	movs	r3, #1
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	e024      	b.n	8002e92 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a17      	ldr	r2, [pc, #92]	@ (8002ea8 <DFSDM_GetChannelFromInstance+0x84>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d102      	bne.n	8002e56 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002e50:	2302      	movs	r3, #2
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	e01d      	b.n	8002e92 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a14      	ldr	r2, [pc, #80]	@ (8002eac <DFSDM_GetChannelFromInstance+0x88>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d102      	bne.n	8002e64 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002e5e:	2304      	movs	r3, #4
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	e016      	b.n	8002e92 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a12      	ldr	r2, [pc, #72]	@ (8002eb0 <DFSDM_GetChannelFromInstance+0x8c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d102      	bne.n	8002e72 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002e6c:	2305      	movs	r3, #5
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	e00f      	b.n	8002e92 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a0f      	ldr	r2, [pc, #60]	@ (8002eb4 <DFSDM_GetChannelFromInstance+0x90>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d102      	bne.n	8002e80 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002e7a:	2306      	movs	r3, #6
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	e008      	b.n	8002e92 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb8 <DFSDM_GetChannelFromInstance+0x94>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d102      	bne.n	8002e8e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002e88:	2307      	movs	r3, #7
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	e001      	b.n	8002e92 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002e92:	68fb      	ldr	r3, [r7, #12]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40016000 	.word	0x40016000
 8002ea4:	40016020 	.word	0x40016020
 8002ea8:	40016040 	.word	0x40016040
 8002eac:	40016080 	.word	0x40016080
 8002eb0:	400160a0 	.word	0x400160a0
 8002eb4:	400160c0 	.word	0x400160c0
 8002eb8:	400160e0 	.word	0x400160e0

08002ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eca:	e17f      	b.n	80031cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed8:	4013      	ands	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 8171 	beq.w	80031c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d005      	beq.n	8002efc <HAL_GPIO_Init+0x40>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d130      	bne.n	8002f5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	2203      	movs	r2, #3
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4013      	ands	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f32:	2201      	movs	r2, #1
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	f003 0201 	and.w	r2, r3, #1
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d118      	bne.n	8002f9c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f70:	2201      	movs	r2, #1
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	08db      	lsrs	r3, r3, #3
 8002f86:	f003 0201 	and.w	r2, r3, #1
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d017      	beq.n	8002fd8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d123      	bne.n	800302c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	08da      	lsrs	r2, r3, #3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3208      	adds	r2, #8
 8002fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	220f      	movs	r2, #15
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4013      	ands	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	08da      	lsrs	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3208      	adds	r2, #8
 8003026:	6939      	ldr	r1, [r7, #16]
 8003028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	2203      	movs	r2, #3
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0203 	and.w	r2, r3, #3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80ac 	beq.w	80031c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306e:	4b5f      	ldr	r3, [pc, #380]	@ (80031ec <HAL_GPIO_Init+0x330>)
 8003070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003072:	4a5e      	ldr	r2, [pc, #376]	@ (80031ec <HAL_GPIO_Init+0x330>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	6613      	str	r3, [r2, #96]	@ 0x60
 800307a:	4b5c      	ldr	r3, [pc, #368]	@ (80031ec <HAL_GPIO_Init+0x330>)
 800307c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003086:	4a5a      	ldr	r2, [pc, #360]	@ (80031f0 <HAL_GPIO_Init+0x334>)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	089b      	lsrs	r3, r3, #2
 800308c:	3302      	adds	r3, #2
 800308e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003092:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	220f      	movs	r2, #15
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4013      	ands	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030b0:	d025      	beq.n	80030fe <HAL_GPIO_Init+0x242>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a4f      	ldr	r2, [pc, #316]	@ (80031f4 <HAL_GPIO_Init+0x338>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d01f      	beq.n	80030fa <HAL_GPIO_Init+0x23e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a4e      	ldr	r2, [pc, #312]	@ (80031f8 <HAL_GPIO_Init+0x33c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d019      	beq.n	80030f6 <HAL_GPIO_Init+0x23a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a4d      	ldr	r2, [pc, #308]	@ (80031fc <HAL_GPIO_Init+0x340>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d013      	beq.n	80030f2 <HAL_GPIO_Init+0x236>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a4c      	ldr	r2, [pc, #304]	@ (8003200 <HAL_GPIO_Init+0x344>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00d      	beq.n	80030ee <HAL_GPIO_Init+0x232>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003204 <HAL_GPIO_Init+0x348>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d007      	beq.n	80030ea <HAL_GPIO_Init+0x22e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003208 <HAL_GPIO_Init+0x34c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d101      	bne.n	80030e6 <HAL_GPIO_Init+0x22a>
 80030e2:	2306      	movs	r3, #6
 80030e4:	e00c      	b.n	8003100 <HAL_GPIO_Init+0x244>
 80030e6:	2307      	movs	r3, #7
 80030e8:	e00a      	b.n	8003100 <HAL_GPIO_Init+0x244>
 80030ea:	2305      	movs	r3, #5
 80030ec:	e008      	b.n	8003100 <HAL_GPIO_Init+0x244>
 80030ee:	2304      	movs	r3, #4
 80030f0:	e006      	b.n	8003100 <HAL_GPIO_Init+0x244>
 80030f2:	2303      	movs	r3, #3
 80030f4:	e004      	b.n	8003100 <HAL_GPIO_Init+0x244>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e002      	b.n	8003100 <HAL_GPIO_Init+0x244>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_GPIO_Init+0x244>
 80030fe:	2300      	movs	r3, #0
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	f002 0203 	and.w	r2, r2, #3
 8003106:	0092      	lsls	r2, r2, #2
 8003108:	4093      	lsls	r3, r2
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003110:	4937      	ldr	r1, [pc, #220]	@ (80031f0 <HAL_GPIO_Init+0x334>)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	3302      	adds	r3, #2
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800311e:	4b3b      	ldr	r3, [pc, #236]	@ (800320c <HAL_GPIO_Init+0x350>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	43db      	mvns	r3, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4013      	ands	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003142:	4a32      	ldr	r2, [pc, #200]	@ (800320c <HAL_GPIO_Init+0x350>)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003148:	4b30      	ldr	r3, [pc, #192]	@ (800320c <HAL_GPIO_Init+0x350>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	43db      	mvns	r3, r3
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4013      	ands	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800316c:	4a27      	ldr	r2, [pc, #156]	@ (800320c <HAL_GPIO_Init+0x350>)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003172:	4b26      	ldr	r3, [pc, #152]	@ (800320c <HAL_GPIO_Init+0x350>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	43db      	mvns	r3, r3
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003196:	4a1d      	ldr	r2, [pc, #116]	@ (800320c <HAL_GPIO_Init+0x350>)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800319c:	4b1b      	ldr	r3, [pc, #108]	@ (800320c <HAL_GPIO_Init+0x350>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031c0:	4a12      	ldr	r2, [pc, #72]	@ (800320c <HAL_GPIO_Init+0x350>)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	3301      	adds	r3, #1
 80031ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	fa22 f303 	lsr.w	r3, r2, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f47f ae78 	bne.w	8002ecc <HAL_GPIO_Init+0x10>
  }
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40010000 	.word	0x40010000
 80031f4:	48000400 	.word	0x48000400
 80031f8:	48000800 	.word	0x48000800
 80031fc:	48000c00 	.word	0x48000c00
 8003200:	48001000 	.word	0x48001000
 8003204:	48001400 	.word	0x48001400
 8003208:	48001800 	.word	0x48001800
 800320c:	40010400 	.word	0x40010400

08003210 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800321e:	e0cd      	b.n	80033bc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003220:	2201      	movs	r2, #1
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80c0 	beq.w	80033b6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003236:	4a68      	ldr	r2, [pc, #416]	@ (80033d8 <HAL_GPIO_DeInit+0x1c8>)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	3302      	adds	r3, #2
 800323e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003242:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	220f      	movs	r2, #15
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4013      	ands	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800325e:	d025      	beq.n	80032ac <HAL_GPIO_DeInit+0x9c>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a5e      	ldr	r2, [pc, #376]	@ (80033dc <HAL_GPIO_DeInit+0x1cc>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d01f      	beq.n	80032a8 <HAL_GPIO_DeInit+0x98>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a5d      	ldr	r2, [pc, #372]	@ (80033e0 <HAL_GPIO_DeInit+0x1d0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d019      	beq.n	80032a4 <HAL_GPIO_DeInit+0x94>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a5c      	ldr	r2, [pc, #368]	@ (80033e4 <HAL_GPIO_DeInit+0x1d4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d013      	beq.n	80032a0 <HAL_GPIO_DeInit+0x90>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a5b      	ldr	r2, [pc, #364]	@ (80033e8 <HAL_GPIO_DeInit+0x1d8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00d      	beq.n	800329c <HAL_GPIO_DeInit+0x8c>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a5a      	ldr	r2, [pc, #360]	@ (80033ec <HAL_GPIO_DeInit+0x1dc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d007      	beq.n	8003298 <HAL_GPIO_DeInit+0x88>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a59      	ldr	r2, [pc, #356]	@ (80033f0 <HAL_GPIO_DeInit+0x1e0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d101      	bne.n	8003294 <HAL_GPIO_DeInit+0x84>
 8003290:	2306      	movs	r3, #6
 8003292:	e00c      	b.n	80032ae <HAL_GPIO_DeInit+0x9e>
 8003294:	2307      	movs	r3, #7
 8003296:	e00a      	b.n	80032ae <HAL_GPIO_DeInit+0x9e>
 8003298:	2305      	movs	r3, #5
 800329a:	e008      	b.n	80032ae <HAL_GPIO_DeInit+0x9e>
 800329c:	2304      	movs	r3, #4
 800329e:	e006      	b.n	80032ae <HAL_GPIO_DeInit+0x9e>
 80032a0:	2303      	movs	r3, #3
 80032a2:	e004      	b.n	80032ae <HAL_GPIO_DeInit+0x9e>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e002      	b.n	80032ae <HAL_GPIO_DeInit+0x9e>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <HAL_GPIO_DeInit+0x9e>
 80032ac:	2300      	movs	r3, #0
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	f002 0203 	and.w	r2, r2, #3
 80032b4:	0092      	lsls	r2, r2, #2
 80032b6:	4093      	lsls	r3, r2
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d132      	bne.n	8003324 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80032be:	4b4d      	ldr	r3, [pc, #308]	@ (80033f4 <HAL_GPIO_DeInit+0x1e4>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	494b      	ldr	r1, [pc, #300]	@ (80033f4 <HAL_GPIO_DeInit+0x1e4>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80032cc:	4b49      	ldr	r3, [pc, #292]	@ (80033f4 <HAL_GPIO_DeInit+0x1e4>)
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	43db      	mvns	r3, r3
 80032d4:	4947      	ldr	r1, [pc, #284]	@ (80033f4 <HAL_GPIO_DeInit+0x1e4>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80032da:	4b46      	ldr	r3, [pc, #280]	@ (80033f4 <HAL_GPIO_DeInit+0x1e4>)
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	4944      	ldr	r1, [pc, #272]	@ (80033f4 <HAL_GPIO_DeInit+0x1e4>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80032e8:	4b42      	ldr	r3, [pc, #264]	@ (80033f4 <HAL_GPIO_DeInit+0x1e4>)
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	4940      	ldr	r1, [pc, #256]	@ (80033f4 <HAL_GPIO_DeInit+0x1e4>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	220f      	movs	r2, #15
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003306:	4a34      	ldr	r2, [pc, #208]	@ (80033d8 <HAL_GPIO_DeInit+0x1c8>)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	089b      	lsrs	r3, r3, #2
 800330c:	3302      	adds	r3, #2
 800330e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	43da      	mvns	r2, r3
 8003316:	4830      	ldr	r0, [pc, #192]	@ (80033d8 <HAL_GPIO_DeInit+0x1c8>)
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	089b      	lsrs	r3, r3, #2
 800331c:	400a      	ands	r2, r1
 800331e:	3302      	adds	r3, #2
 8003320:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	2103      	movs	r1, #3
 800332e:	fa01 f303 	lsl.w	r3, r1, r3
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	08da      	lsrs	r2, r3, #3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3208      	adds	r2, #8
 8003340:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	220f      	movs	r2, #15
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	08d2      	lsrs	r2, r2, #3
 8003358:	4019      	ands	r1, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3208      	adds	r2, #8
 800335e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	2103      	movs	r1, #3
 800336c:	fa01 f303 	lsl.w	r3, r1, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	401a      	ands	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	2101      	movs	r1, #1
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	fa01 f303 	lsl.w	r3, r1, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	401a      	ands	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	2103      	movs	r1, #3
 8003396:	fa01 f303 	lsl.w	r3, r1, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	401a      	ands	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a6:	2101      	movs	r1, #1
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	fa01 f303 	lsl.w	r3, r1, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	401a      	ands	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	3301      	adds	r3, #1
 80033ba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f47f af2b 	bne.w	8003220 <HAL_GPIO_DeInit+0x10>
  }
}
 80033ca:	bf00      	nop
 80033cc:	bf00      	nop
 80033ce:	371c      	adds	r7, #28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	40010000 	.word	0x40010000
 80033dc:	48000400 	.word	0x48000400
 80033e0:	48000800 	.word	0x48000800
 80033e4:	48000c00 	.word	0x48000c00
 80033e8:	48001000 	.word	0x48001000
 80033ec:	48001400 	.word	0x48001400
 80033f0:	48001800 	.word	0x48001800
 80033f4:	40010400 	.word	0x40010400

080033f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	807b      	strh	r3, [r7, #2]
 8003404:	4613      	mov	r3, r2
 8003406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003408:	787b      	ldrb	r3, [r7, #1]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800340e:	887a      	ldrh	r2, [r7, #2]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003414:	e002      	b.n	800341c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003416:	887a      	ldrh	r2, [r7, #2]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003432:	4b08      	ldr	r3, [pc, #32]	@ (8003454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800343e:	4a05      	ldr	r2, [pc, #20]	@ (8003454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	4618      	mov	r0, r3
 8003448:	f000 f806 	bl	8003458 <HAL_GPIO_EXTI_Callback>
  }
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40010400 	.word	0x40010400

08003458 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e08d      	b.n	800359c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d106      	bne.n	800349a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7fe fbfb 	bl	8001c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2224      	movs	r2, #36	@ 0x24
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d107      	bne.n	80034e8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034e4:	609a      	str	r2, [r3, #8]
 80034e6:	e006      	b.n	80034f6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80034f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d108      	bne.n	8003510 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	e007      	b.n	8003520 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800351e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800352e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003532:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003542:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69d9      	ldr	r1, [r3, #28]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1a      	ldr	r2, [r3, #32]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0201 	orr.w	r2, r2, #1
 800357c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e021      	b.n	80035fa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2224      	movs	r2, #36	@ 0x24
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fe fbbc 	bl	8001d4c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	4608      	mov	r0, r1
 800360e:	4611      	mov	r1, r2
 8003610:	461a      	mov	r2, r3
 8003612:	4603      	mov	r3, r0
 8003614:	817b      	strh	r3, [r7, #10]
 8003616:	460b      	mov	r3, r1
 8003618:	813b      	strh	r3, [r7, #8]
 800361a:	4613      	mov	r3, r2
 800361c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b20      	cmp	r3, #32
 8003628:	f040 80f9 	bne.w	800381e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <HAL_I2C_Mem_Write+0x34>
 8003632:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003634:	2b00      	cmp	r3, #0
 8003636:	d105      	bne.n	8003644 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800363e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0ed      	b.n	8003820 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_I2C_Mem_Write+0x4e>
 800364e:	2302      	movs	r3, #2
 8003650:	e0e6      	b.n	8003820 <HAL_I2C_Mem_Write+0x21c>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800365a:	f7ff f9e1 	bl	8002a20 <HAL_GetTick>
 800365e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	2319      	movs	r3, #25
 8003666:	2201      	movs	r2, #1
 8003668:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 fac3 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0d1      	b.n	8003820 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2221      	movs	r2, #33	@ 0x21
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2240      	movs	r2, #64	@ 0x40
 8003688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a3a      	ldr	r2, [r7, #32]
 8003696:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800369c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036a4:	88f8      	ldrh	r0, [r7, #6]
 80036a6:	893a      	ldrh	r2, [r7, #8]
 80036a8:	8979      	ldrh	r1, [r7, #10]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	4603      	mov	r3, r0
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f9d3 	bl	8003a60 <I2C_RequestMemoryWrite>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d005      	beq.n	80036cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0a9      	b.n	8003820 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2bff      	cmp	r3, #255	@ 0xff
 80036d4:	d90e      	bls.n	80036f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	22ff      	movs	r2, #255	@ 0xff
 80036da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	8979      	ldrh	r1, [r7, #10]
 80036e4:	2300      	movs	r3, #0
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fc47 	bl	8003f80 <I2C_TransferConfig>
 80036f2:	e00f      	b.n	8003714 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003702:	b2da      	uxtb	r2, r3
 8003704:	8979      	ldrh	r1, [r7, #10]
 8003706:	2300      	movs	r3, #0
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 fc36 	bl	8003f80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 fac6 	bl	8003caa <I2C_WaitOnTXISFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e07b      	b.n	8003820 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	781a      	ldrb	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d034      	beq.n	80037cc <HAL_I2C_Mem_Write+0x1c8>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003766:	2b00      	cmp	r3, #0
 8003768:	d130      	bne.n	80037cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003770:	2200      	movs	r2, #0
 8003772:	2180      	movs	r1, #128	@ 0x80
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 fa3f 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e04d      	b.n	8003820 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	2bff      	cmp	r3, #255	@ 0xff
 800378c:	d90e      	bls.n	80037ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	22ff      	movs	r2, #255	@ 0xff
 8003792:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003798:	b2da      	uxtb	r2, r3
 800379a:	8979      	ldrh	r1, [r7, #10]
 800379c:	2300      	movs	r3, #0
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 fbeb 	bl	8003f80 <I2C_TransferConfig>
 80037aa:	e00f      	b.n	80037cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	8979      	ldrh	r1, [r7, #10]
 80037be:	2300      	movs	r3, #0
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 fbda 	bl	8003f80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d19e      	bne.n	8003714 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 faac 	bl	8003d38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e01a      	b.n	8003820 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2220      	movs	r2, #32
 80037f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6859      	ldr	r1, [r3, #4]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003828 <HAL_I2C_Mem_Write+0x224>)
 80037fe:	400b      	ands	r3, r1
 8003800:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	e000      	b.n	8003820 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800381e:	2302      	movs	r3, #2
  }
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	fe00e800 	.word	0xfe00e800

0800382c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af02      	add	r7, sp, #8
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	4608      	mov	r0, r1
 8003836:	4611      	mov	r1, r2
 8003838:	461a      	mov	r2, r3
 800383a:	4603      	mov	r3, r0
 800383c:	817b      	strh	r3, [r7, #10]
 800383e:	460b      	mov	r3, r1
 8003840:	813b      	strh	r3, [r7, #8]
 8003842:	4613      	mov	r3, r2
 8003844:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b20      	cmp	r3, #32
 8003850:	f040 80fd 	bne.w	8003a4e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_I2C_Mem_Read+0x34>
 800385a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800385c:	2b00      	cmp	r3, #0
 800385e:	d105      	bne.n	800386c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003866:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0f1      	b.n	8003a50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_I2C_Mem_Read+0x4e>
 8003876:	2302      	movs	r3, #2
 8003878:	e0ea      	b.n	8003a50 <HAL_I2C_Mem_Read+0x224>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003882:	f7ff f8cd 	bl	8002a20 <HAL_GetTick>
 8003886:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	2319      	movs	r3, #25
 800388e:	2201      	movs	r2, #1
 8003890:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f9af 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0d5      	b.n	8003a50 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2222      	movs	r2, #34	@ 0x22
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2240      	movs	r2, #64	@ 0x40
 80038b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a3a      	ldr	r2, [r7, #32]
 80038be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80038c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038cc:	88f8      	ldrh	r0, [r7, #6]
 80038ce:	893a      	ldrh	r2, [r7, #8]
 80038d0:	8979      	ldrh	r1, [r7, #10]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	9301      	str	r3, [sp, #4]
 80038d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	4603      	mov	r3, r0
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f913 	bl	8003b08 <I2C_RequestMemoryRead>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0ad      	b.n	8003a50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2bff      	cmp	r3, #255	@ 0xff
 80038fc:	d90e      	bls.n	800391c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003908:	b2da      	uxtb	r2, r3
 800390a:	8979      	ldrh	r1, [r7, #10]
 800390c:	4b52      	ldr	r3, [pc, #328]	@ (8003a58 <HAL_I2C_Mem_Read+0x22c>)
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fb33 	bl	8003f80 <I2C_TransferConfig>
 800391a:	e00f      	b.n	800393c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392a:	b2da      	uxtb	r2, r3
 800392c:	8979      	ldrh	r1, [r7, #10]
 800392e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a58 <HAL_I2C_Mem_Read+0x22c>)
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fb22 	bl	8003f80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003942:	2200      	movs	r2, #0
 8003944:	2104      	movs	r1, #4
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 f956 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e07c      	b.n	8003a50 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d034      	beq.n	80039fc <HAL_I2C_Mem_Read+0x1d0>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003996:	2b00      	cmp	r3, #0
 8003998:	d130      	bne.n	80039fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a0:	2200      	movs	r2, #0
 80039a2:	2180      	movs	r1, #128	@ 0x80
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 f927 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e04d      	b.n	8003a50 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2bff      	cmp	r3, #255	@ 0xff
 80039bc:	d90e      	bls.n	80039dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	8979      	ldrh	r1, [r7, #10]
 80039cc:	2300      	movs	r3, #0
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 fad3 	bl	8003f80 <I2C_TransferConfig>
 80039da:	e00f      	b.n	80039fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	8979      	ldrh	r1, [r7, #10]
 80039ee:	2300      	movs	r3, #0
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 fac2 	bl	8003f80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d19a      	bne.n	800393c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f994 	bl	8003d38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e01a      	b.n	8003a50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6859      	ldr	r1, [r3, #4]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a5c <HAL_I2C_Mem_Read+0x230>)
 8003a2e:	400b      	ands	r3, r1
 8003a30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e000      	b.n	8003a50 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003a4e:	2302      	movs	r3, #2
  }
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	80002400 	.word	0x80002400
 8003a5c:	fe00e800 	.word	0xfe00e800

08003a60 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	4608      	mov	r0, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	817b      	strh	r3, [r7, #10]
 8003a72:	460b      	mov	r3, r1
 8003a74:	813b      	strh	r3, [r7, #8]
 8003a76:	4613      	mov	r3, r2
 8003a78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	8979      	ldrh	r1, [r7, #10]
 8003a80:	4b20      	ldr	r3, [pc, #128]	@ (8003b04 <I2C_RequestMemoryWrite+0xa4>)
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fa79 	bl	8003f80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	69b9      	ldr	r1, [r7, #24]
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f909 	bl	8003caa <I2C_WaitOnTXISFlagUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e02c      	b.n	8003afc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003aa2:	88fb      	ldrh	r3, [r7, #6]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d105      	bne.n	8003ab4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa8:	893b      	ldrh	r3, [r7, #8]
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ab2:	e015      	b.n	8003ae0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ab4:	893b      	ldrh	r3, [r7, #8]
 8003ab6:	0a1b      	lsrs	r3, r3, #8
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac2:	69fa      	ldr	r2, [r7, #28]
 8003ac4:	69b9      	ldr	r1, [r7, #24]
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f8ef 	bl	8003caa <I2C_WaitOnTXISFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e012      	b.n	8003afc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ad6:	893b      	ldrh	r3, [r7, #8]
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2180      	movs	r1, #128	@ 0x80
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f884 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	80002000 	.word	0x80002000

08003b08 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	4608      	mov	r0, r1
 8003b12:	4611      	mov	r1, r2
 8003b14:	461a      	mov	r2, r3
 8003b16:	4603      	mov	r3, r0
 8003b18:	817b      	strh	r3, [r7, #10]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	813b      	strh	r3, [r7, #8]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	8979      	ldrh	r1, [r7, #10]
 8003b28:	4b20      	ldr	r3, [pc, #128]	@ (8003bac <I2C_RequestMemoryRead+0xa4>)
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 fa26 	bl	8003f80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b34:	69fa      	ldr	r2, [r7, #28]
 8003b36:	69b9      	ldr	r1, [r7, #24]
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f8b6 	bl	8003caa <I2C_WaitOnTXISFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e02c      	b.n	8003ba2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d105      	bne.n	8003b5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b4e:	893b      	ldrh	r3, [r7, #8]
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b58:	e015      	b.n	8003b86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b5a:	893b      	ldrh	r3, [r7, #8]
 8003b5c:	0a1b      	lsrs	r3, r3, #8
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	69b9      	ldr	r1, [r7, #24]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f89c 	bl	8003caa <I2C_WaitOnTXISFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e012      	b.n	8003ba2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b7c:	893b      	ldrh	r3, [r7, #8]
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2140      	movs	r1, #64	@ 0x40
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f831 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	80002000 	.word	0x80002000

08003bb0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d103      	bne.n	8003bce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d007      	beq.n	8003bec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	619a      	str	r2, [r3, #24]
  }
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	4613      	mov	r3, r2
 8003c06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c08:	e03b      	b.n	8003c82 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	6839      	ldr	r1, [r7, #0]
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 f8d6 	bl	8003dc0 <I2C_IsErrorOccurred>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e041      	b.n	8003ca2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c24:	d02d      	beq.n	8003c82 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c26:	f7fe fefb 	bl	8002a20 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d302      	bcc.n	8003c3c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d122      	bne.n	8003c82 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	4013      	ands	r3, r2
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d113      	bne.n	8003c82 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5e:	f043 0220 	orr.w	r2, r3, #32
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e00f      	b.n	8003ca2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699a      	ldr	r2, [r3, #24]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	bf0c      	ite	eq
 8003c92:	2301      	moveq	r3, #1
 8003c94:	2300      	movne	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d0b4      	beq.n	8003c0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cb6:	e033      	b.n	8003d20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f87f 	bl	8003dc0 <I2C_IsErrorOccurred>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e031      	b.n	8003d30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd2:	d025      	beq.n	8003d20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd4:	f7fe fea4 	bl	8002a20 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d302      	bcc.n	8003cea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d11a      	bne.n	8003d20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d013      	beq.n	8003d20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfc:	f043 0220 	orr.w	r2, r3, #32
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e007      	b.n	8003d30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d1c4      	bne.n	8003cb8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d44:	e02f      	b.n	8003da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 f838 	bl	8003dc0 <I2C_IsErrorOccurred>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e02d      	b.n	8003db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5a:	f7fe fe61 	bl	8002a20 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d302      	bcc.n	8003d70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d11a      	bne.n	8003da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d013      	beq.n	8003da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d82:	f043 0220 	orr.w	r2, r3, #32
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e007      	b.n	8003db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d1c8      	bne.n	8003d46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08a      	sub	sp, #40	@ 0x28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d068      	beq.n	8003ebe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2210      	movs	r2, #16
 8003df2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003df4:	e049      	b.n	8003e8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d045      	beq.n	8003e8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003dfe:	f7fe fe0f 	bl	8002a20 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d302      	bcc.n	8003e14 <I2C_IsErrorOccurred+0x54>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d13a      	bne.n	8003e8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e36:	d121      	bne.n	8003e7c <I2C_IsErrorOccurred+0xbc>
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e3e:	d01d      	beq.n	8003e7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d01a      	beq.n	8003e7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e56:	f7fe fde3 	bl	8002a20 <HAL_GetTick>
 8003e5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e5c:	e00e      	b.n	8003e7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e5e:	f7fe fddf 	bl	8002a20 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b19      	cmp	r3, #25
 8003e6a:	d907      	bls.n	8003e7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	f043 0320 	orr.w	r3, r3, #32
 8003e72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003e7a:	e006      	b.n	8003e8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d1e9      	bne.n	8003e5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d003      	beq.n	8003ea0 <I2C_IsErrorOccurred+0xe0>
 8003e98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0aa      	beq.n	8003df6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d103      	bne.n	8003eb0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2220      	movs	r2, #32
 8003eae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	f043 0304 	orr.w	r3, r3, #4
 8003eb6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00b      	beq.n	8003ee8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ee0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	f043 0308 	orr.w	r3, r3, #8
 8003ef8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	f043 0302 	orr.w	r3, r3, #2
 8003f1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d01c      	beq.n	8003f6e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f7ff fe3b 	bl	8003bb0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6859      	ldr	r1, [r3, #4]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b0d      	ldr	r3, [pc, #52]	@ (8003f7c <I2C_IsErrorOccurred+0x1bc>)
 8003f46:	400b      	ands	r3, r1
 8003f48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3728      	adds	r7, #40	@ 0x28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	fe00e800 	.word	0xfe00e800

08003f80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	607b      	str	r3, [r7, #4]
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	817b      	strh	r3, [r7, #10]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f92:	897b      	ldrh	r3, [r7, #10]
 8003f94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f98:	7a7b      	ldrb	r3, [r7, #9]
 8003f9a:	041b      	lsls	r3, r3, #16
 8003f9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fa0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003fae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	0d5b      	lsrs	r3, r3, #21
 8003fba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003fbe:	4b08      	ldr	r3, [pc, #32]	@ (8003fe0 <I2C_TransferConfig+0x60>)
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	ea02 0103 	and.w	r1, r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003fd2:	bf00      	nop
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	03ff63ff 	.word	0x03ff63ff

08003fe4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d138      	bne.n	800406c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004004:	2302      	movs	r3, #2
 8004006:	e032      	b.n	800406e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2224      	movs	r2, #36	@ 0x24
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004036:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6819      	ldr	r1, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	e000      	b.n	800406e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800407a:	b480      	push	{r7}
 800407c:	b085      	sub	sp, #20
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b20      	cmp	r3, #32
 800408e:	d139      	bne.n	8004104 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800409a:	2302      	movs	r3, #2
 800409c:	e033      	b.n	8004106 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2224      	movs	r2, #36	@ 0x24
 80040aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0201 	bic.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	e000      	b.n	8004106 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004104:	2302      	movs	r3, #2
  }
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b086      	sub	sp, #24
 8004116:	af02      	add	r7, sp, #8
 8004118:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e101      	b.n	8004328 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d106      	bne.n	800413e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7fd ff57 	bl	8001fec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2203      	movs	r2, #3
 8004142:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f002 fb97 	bl	8006884 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	7c1a      	ldrb	r2, [r3, #16]
 800415e:	f88d 2000 	strb.w	r2, [sp]
 8004162:	3304      	adds	r3, #4
 8004164:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004166:	f002 fb60 	bl	800682a <USB_CoreInit>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d005      	beq.n	800417c <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e0d5      	b.n	8004328 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2100      	movs	r1, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f002 fb8f 	bl	80068a6 <USB_SetCurrentMode>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2202      	movs	r2, #2
 8004192:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e0c6      	b.n	8004328 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800419a:	2300      	movs	r3, #0
 800419c:	73fb      	strb	r3, [r7, #15]
 800419e:	e04a      	b.n	8004236 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80041a0:	7bfa      	ldrb	r2, [r7, #15]
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	4613      	mov	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	3315      	adds	r3, #21
 80041b0:	2201      	movs	r2, #1
 80041b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80041b4:	7bfa      	ldrb	r2, [r7, #15]
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	4613      	mov	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	3314      	adds	r3, #20
 80041c4:	7bfa      	ldrb	r2, [r7, #15]
 80041c6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80041c8:	7bfa      	ldrb	r2, [r7, #15]
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	b298      	uxth	r0, r3
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	4613      	mov	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	332e      	adds	r3, #46	@ 0x2e
 80041dc:	4602      	mov	r2, r0
 80041de:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041e0:	7bfa      	ldrb	r2, [r7, #15]
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	4613      	mov	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	4413      	add	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	3318      	adds	r3, #24
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041f4:	7bfa      	ldrb	r2, [r7, #15]
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4413      	add	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	331c      	adds	r3, #28
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004208:	7bfa      	ldrb	r2, [r7, #15]
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	4613      	mov	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	3320      	adds	r3, #32
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800421c:	7bfa      	ldrb	r2, [r7, #15]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	3324      	adds	r3, #36	@ 0x24
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	3301      	adds	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	791b      	ldrb	r3, [r3, #4]
 800423a:	7bfa      	ldrb	r2, [r7, #15]
 800423c:	429a      	cmp	r2, r3
 800423e:	d3af      	bcc.n	80041a0 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004240:	2300      	movs	r3, #0
 8004242:	73fb      	strb	r3, [r7, #15]
 8004244:	e044      	b.n	80042d0 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004246:	7bfa      	ldrb	r2, [r7, #15]
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	4413      	add	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	440b      	add	r3, r1
 8004254:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004258:	2200      	movs	r2, #0
 800425a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800425c:	7bfa      	ldrb	r2, [r7, #15]
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	4613      	mov	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800426e:	7bfa      	ldrb	r2, [r7, #15]
 8004270:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004272:	7bfa      	ldrb	r2, [r7, #15]
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	4413      	add	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004288:	7bfa      	ldrb	r2, [r7, #15]
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800429e:	7bfa      	ldrb	r2, [r7, #15]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80042b4:	7bfa      	ldrb	r2, [r7, #15]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	3301      	adds	r3, #1
 80042ce:	73fb      	strb	r3, [r7, #15]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	791b      	ldrb	r3, [r3, #4]
 80042d4:	7bfa      	ldrb	r2, [r7, #15]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d3b5      	bcc.n	8004246 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	7c1a      	ldrb	r2, [r3, #16]
 80042e2:	f88d 2000 	strb.w	r2, [sp]
 80042e6:	3304      	adds	r3, #4
 80042e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042ea:	f002 fb29 	bl	8006940 <USB_DevInit>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e013      	b.n	8004328 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	7b1b      	ldrb	r3, [r3, #12]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d102      	bne.n	800431c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f80a 	bl	8004330 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f002 fcce 	bl	8006cc2 <USB_DevDisconnect>

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004362:	f043 0303 	orr.w	r3, r3, #3
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800437c:	4b05      	ldr	r3, [pc, #20]	@ (8004394 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a04      	ldr	r2, [pc, #16]	@ (8004394 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004386:	6013      	str	r3, [r2, #0]
}
 8004388:	bf00      	nop
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40007000 	.word	0x40007000

08004398 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800439c:	4b04      	ldr	r3, [pc, #16]	@ (80043b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40007000 	.word	0x40007000

080043b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043c2:	d130      	bne.n	8004426 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043c4:	4b23      	ldr	r3, [pc, #140]	@ (8004454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043d0:	d038      	beq.n	8004444 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043d2:	4b20      	ldr	r3, [pc, #128]	@ (8004454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043da:	4a1e      	ldr	r2, [pc, #120]	@ (8004454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2232      	movs	r2, #50	@ 0x32
 80043e8:	fb02 f303 	mul.w	r3, r2, r3
 80043ec:	4a1b      	ldr	r2, [pc, #108]	@ (800445c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80043ee:	fba2 2303 	umull	r2, r3, r2, r3
 80043f2:	0c9b      	lsrs	r3, r3, #18
 80043f4:	3301      	adds	r3, #1
 80043f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043f8:	e002      	b.n	8004400 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004400:	4b14      	ldr	r3, [pc, #80]	@ (8004454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004408:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800440c:	d102      	bne.n	8004414 <HAL_PWREx_ControlVoltageScaling+0x60>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1f2      	bne.n	80043fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004414:	4b0f      	ldr	r3, [pc, #60]	@ (8004454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800441c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004420:	d110      	bne.n	8004444 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e00f      	b.n	8004446 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004426:	4b0b      	ldr	r3, [pc, #44]	@ (8004454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800442e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004432:	d007      	beq.n	8004444 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004434:	4b07      	ldr	r3, [pc, #28]	@ (8004454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800443c:	4a05      	ldr	r2, [pc, #20]	@ (8004454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800443e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004442:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40007000 	.word	0x40007000
 8004458:	20000a08 	.word	0x20000a08
 800445c:	431bde83 	.word	0x431bde83

08004460 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004464:	4b05      	ldr	r3, [pc, #20]	@ (800447c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	4a04      	ldr	r2, [pc, #16]	@ (800447c <HAL_PWREx_EnableVddUSB+0x1c>)
 800446a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800446e:	6053      	str	r3, [r2, #4]
}
 8004470:	bf00      	nop
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40007000 	.word	0x40007000

08004480 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af02      	add	r7, sp, #8
 8004486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004488:	f7fe faca 	bl	8002a20 <HAL_GetTick>
 800448c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e063      	b.n	8004560 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10b      	bne.n	80044bc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7fd fc71 	bl	8001d94 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80044b2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f858 	bl	800456c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	021a      	lsls	r2, r3, #8
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	2120      	movs	r1, #32
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f850 	bl	8004588 <QSPI_WaitFlagStateUntilTimeout>
 80044e8:	4603      	mov	r3, r0
 80044ea:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80044ec:	7afb      	ldrb	r3, [r7, #11]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d131      	bne.n	8004556 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044fc:	f023 0310 	bic.w	r3, r3, #16
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6852      	ldr	r2, [r2, #4]
 8004504:	0611      	lsls	r1, r2, #24
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	68d2      	ldr	r2, [r2, #12]
 800450a:	4311      	orrs	r1, r2
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	430b      	orrs	r3, r1
 8004512:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	4b13      	ldr	r3, [pc, #76]	@ (8004568 <HAL_QSPI_Init+0xe8>)
 800451c:	4013      	ands	r3, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6912      	ldr	r2, [r2, #16]
 8004522:	0411      	lsls	r1, r2, #16
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6952      	ldr	r2, [r2, #20]
 8004528:	4311      	orrs	r1, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6992      	ldr	r2, [r2, #24]
 800452e:	4311      	orrs	r1, r2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	430b      	orrs	r3, r1
 8004536:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800455e:	7afb      	ldrb	r3, [r7, #11]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	ffe0f8fe 	.word	0xffe0f8fe

0800456c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	4613      	mov	r3, r2
 8004596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004598:	e01a      	b.n	80045d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a0:	d016      	beq.n	80045d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a2:	f7fe fa3d 	bl	8002a20 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d302      	bcc.n	80045b8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10b      	bne.n	80045d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2204      	movs	r2, #4
 80045bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c4:	f043 0201 	orr.w	r2, r3, #1
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e00e      	b.n	80045ee <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4013      	ands	r3, r2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bf14      	ite	ne
 80045de:	2301      	movne	r3, #1
 80045e0:	2300      	moveq	r3, #0
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d1d6      	bne.n	800459a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e3ca      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800460a:	4b97      	ldr	r3, [pc, #604]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004614:	4b94      	ldr	r3, [pc, #592]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 80e4 	beq.w	80047f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d007      	beq.n	8004642 <HAL_RCC_OscConfig+0x4a>
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b0c      	cmp	r3, #12
 8004636:	f040 808b 	bne.w	8004750 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b01      	cmp	r3, #1
 800463e:	f040 8087 	bne.w	8004750 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004642:	4b89      	ldr	r3, [pc, #548]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d005      	beq.n	800465a <HAL_RCC_OscConfig+0x62>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e3a2      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1a      	ldr	r2, [r3, #32]
 800465e:	4b82      	ldr	r3, [pc, #520]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d004      	beq.n	8004674 <HAL_RCC_OscConfig+0x7c>
 800466a:	4b7f      	ldr	r3, [pc, #508]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004672:	e005      	b.n	8004680 <HAL_RCC_OscConfig+0x88>
 8004674:	4b7c      	ldr	r3, [pc, #496]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 8004676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004680:	4293      	cmp	r3, r2
 8004682:	d223      	bcs.n	80046cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fd55 	bl	8005138 <RCC_SetFlashLatencyFromMSIRange>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e383      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004698:	4b73      	ldr	r3, [pc, #460]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a72      	ldr	r2, [pc, #456]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 800469e:	f043 0308 	orr.w	r3, r3, #8
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	4b70      	ldr	r3, [pc, #448]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	496d      	ldr	r1, [pc, #436]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046b6:	4b6c      	ldr	r3, [pc, #432]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	4968      	ldr	r1, [pc, #416]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	604b      	str	r3, [r1, #4]
 80046ca:	e025      	b.n	8004718 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046cc:	4b66      	ldr	r3, [pc, #408]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a65      	ldr	r2, [pc, #404]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 80046d2:	f043 0308 	orr.w	r3, r3, #8
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	4b63      	ldr	r3, [pc, #396]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	4960      	ldr	r1, [pc, #384]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ea:	4b5f      	ldr	r3, [pc, #380]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	021b      	lsls	r3, r3, #8
 80046f8:	495b      	ldr	r1, [pc, #364]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d109      	bne.n	8004718 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fd15 	bl	8005138 <RCC_SetFlashLatencyFromMSIRange>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e343      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004718:	f000 fc4a 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 800471c:	4602      	mov	r2, r0
 800471e:	4b52      	ldr	r3, [pc, #328]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	091b      	lsrs	r3, r3, #4
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	4950      	ldr	r1, [pc, #320]	@ (800486c <HAL_RCC_OscConfig+0x274>)
 800472a:	5ccb      	ldrb	r3, [r1, r3]
 800472c:	f003 031f 	and.w	r3, r3, #31
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
 8004734:	4a4e      	ldr	r2, [pc, #312]	@ (8004870 <HAL_RCC_OscConfig+0x278>)
 8004736:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004738:	4b4e      	ldr	r3, [pc, #312]	@ (8004874 <HAL_RCC_OscConfig+0x27c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f7fe f91f 	bl	8002980 <HAL_InitTick>
 8004742:	4603      	mov	r3, r0
 8004744:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d052      	beq.n	80047f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800474c:	7bfb      	ldrb	r3, [r7, #15]
 800474e:	e327      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d032      	beq.n	80047be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004758:	4b43      	ldr	r3, [pc, #268]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a42      	ldr	r2, [pc, #264]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004764:	f7fe f95c 	bl	8002a20 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800476c:	f7fe f958 	bl	8002a20 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e310      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800477e:	4b3a      	ldr	r3, [pc, #232]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800478a:	4b37      	ldr	r3, [pc, #220]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a36      	ldr	r2, [pc, #216]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 8004790:	f043 0308 	orr.w	r3, r3, #8
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	4b34      	ldr	r3, [pc, #208]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	4931      	ldr	r1, [pc, #196]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047a8:	4b2f      	ldr	r3, [pc, #188]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	492c      	ldr	r1, [pc, #176]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	604b      	str	r3, [r1, #4]
 80047bc:	e01a      	b.n	80047f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047be:	4b2a      	ldr	r3, [pc, #168]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a29      	ldr	r2, [pc, #164]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047ca:	f7fe f929 	bl	8002a20 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047d0:	e008      	b.n	80047e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047d2:	f7fe f925 	bl	8002a20 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e2dd      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047e4:	4b20      	ldr	r3, [pc, #128]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1f0      	bne.n	80047d2 <HAL_RCC_OscConfig+0x1da>
 80047f0:	e000      	b.n	80047f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d074      	beq.n	80048ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b08      	cmp	r3, #8
 8004804:	d005      	beq.n	8004812 <HAL_RCC_OscConfig+0x21a>
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b0c      	cmp	r3, #12
 800480a:	d10e      	bne.n	800482a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2b03      	cmp	r3, #3
 8004810:	d10b      	bne.n	800482a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004812:	4b15      	ldr	r3, [pc, #84]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d064      	beq.n	80048e8 <HAL_RCC_OscConfig+0x2f0>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d160      	bne.n	80048e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e2ba      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004832:	d106      	bne.n	8004842 <HAL_RCC_OscConfig+0x24a>
 8004834:	4b0c      	ldr	r3, [pc, #48]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a0b      	ldr	r2, [pc, #44]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 800483a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	e026      	b.n	8004890 <HAL_RCC_OscConfig+0x298>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800484a:	d115      	bne.n	8004878 <HAL_RCC_OscConfig+0x280>
 800484c:	4b06      	ldr	r3, [pc, #24]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a05      	ldr	r2, [pc, #20]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 8004852:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	4b03      	ldr	r3, [pc, #12]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a02      	ldr	r2, [pc, #8]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 800485e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	e014      	b.n	8004890 <HAL_RCC_OscConfig+0x298>
 8004866:	bf00      	nop
 8004868:	40021000 	.word	0x40021000
 800486c:	08009df8 	.word	0x08009df8
 8004870:	20000a08 	.word	0x20000a08
 8004874:	20000a40 	.word	0x20000a40
 8004878:	4ba0      	ldr	r3, [pc, #640]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a9f      	ldr	r2, [pc, #636]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 800487e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	4b9d      	ldr	r3, [pc, #628]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a9c      	ldr	r2, [pc, #624]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 800488a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800488e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d013      	beq.n	80048c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fe f8c2 	bl	8002a20 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a0:	f7fe f8be 	bl	8002a20 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b64      	cmp	r3, #100	@ 0x64
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e276      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048b2:	4b92      	ldr	r3, [pc, #584]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f0      	beq.n	80048a0 <HAL_RCC_OscConfig+0x2a8>
 80048be:	e014      	b.n	80048ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c0:	f7fe f8ae 	bl	8002a20 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048c8:	f7fe f8aa 	bl	8002a20 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b64      	cmp	r3, #100	@ 0x64
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e262      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048da:	4b88      	ldr	r3, [pc, #544]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x2d0>
 80048e6:	e000      	b.n	80048ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d060      	beq.n	80049b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d005      	beq.n	8004908 <HAL_RCC_OscConfig+0x310>
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b0c      	cmp	r3, #12
 8004900:	d119      	bne.n	8004936 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b02      	cmp	r3, #2
 8004906:	d116      	bne.n	8004936 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004908:	4b7c      	ldr	r3, [pc, #496]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <HAL_RCC_OscConfig+0x328>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e23f      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004920:	4b76      	ldr	r3, [pc, #472]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	061b      	lsls	r3, r3, #24
 800492e:	4973      	ldr	r1, [pc, #460]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004930:	4313      	orrs	r3, r2
 8004932:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004934:	e040      	b.n	80049b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d023      	beq.n	8004986 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800493e:	4b6f      	ldr	r3, [pc, #444]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a6e      	ldr	r2, [pc, #440]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494a:	f7fe f869 	bl	8002a20 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004952:	f7fe f865 	bl	8002a20 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e21d      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004964:	4b65      	ldr	r3, [pc, #404]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004970:	4b62      	ldr	r3, [pc, #392]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	061b      	lsls	r3, r3, #24
 800497e:	495f      	ldr	r1, [pc, #380]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004980:	4313      	orrs	r3, r2
 8004982:	604b      	str	r3, [r1, #4]
 8004984:	e018      	b.n	80049b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004986:	4b5d      	ldr	r3, [pc, #372]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a5c      	ldr	r2, [pc, #368]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 800498c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7fe f845 	bl	8002a20 <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800499a:	f7fe f841 	bl	8002a20 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e1f9      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ac:	4b53      	ldr	r3, [pc, #332]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f0      	bne.n	800499a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d03c      	beq.n	8004a3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01c      	beq.n	8004a06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049cc:	4b4b      	ldr	r3, [pc, #300]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 80049ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049d2:	4a4a      	ldr	r2, [pc, #296]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049dc:	f7fe f820 	bl	8002a20 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049e4:	f7fe f81c 	bl	8002a20 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e1d4      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049f6:	4b41      	ldr	r3, [pc, #260]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 80049f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0ef      	beq.n	80049e4 <HAL_RCC_OscConfig+0x3ec>
 8004a04:	e01b      	b.n	8004a3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a06:	4b3d      	ldr	r3, [pc, #244]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a0c:	4a3b      	ldr	r2, [pc, #236]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a16:	f7fe f803 	bl	8002a20 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a1e:	f7fd ffff 	bl	8002a20 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e1b7      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a30:	4b32      	ldr	r3, [pc, #200]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1ef      	bne.n	8004a1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 80a6 	beq.w	8004b98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a50:	4b2a      	ldr	r3, [pc, #168]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10d      	bne.n	8004a78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a5c:	4b27      	ldr	r3, [pc, #156]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a60:	4a26      	ldr	r2, [pc, #152]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004a62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a66:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a68:	4b24      	ldr	r3, [pc, #144]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a70:	60bb      	str	r3, [r7, #8]
 8004a72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a74:	2301      	movs	r3, #1
 8004a76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a78:	4b21      	ldr	r3, [pc, #132]	@ (8004b00 <HAL_RCC_OscConfig+0x508>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d118      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a84:	4b1e      	ldr	r3, [pc, #120]	@ (8004b00 <HAL_RCC_OscConfig+0x508>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1d      	ldr	r2, [pc, #116]	@ (8004b00 <HAL_RCC_OscConfig+0x508>)
 8004a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a90:	f7fd ffc6 	bl	8002a20 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a98:	f7fd ffc2 	bl	8002a20 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e17a      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aaa:	4b15      	ldr	r3, [pc, #84]	@ (8004b00 <HAL_RCC_OscConfig+0x508>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0f0      	beq.n	8004a98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d108      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x4d8>
 8004abe:	4b0f      	ldr	r3, [pc, #60]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004ac6:	f043 0301 	orr.w	r3, r3, #1
 8004aca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ace:	e029      	b.n	8004b24 <HAL_RCC_OscConfig+0x52c>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2b05      	cmp	r3, #5
 8004ad6:	d115      	bne.n	8004b04 <HAL_RCC_OscConfig+0x50c>
 8004ad8:	4b08      	ldr	r3, [pc, #32]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ade:	4a07      	ldr	r2, [pc, #28]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004ae0:	f043 0304 	orr.w	r3, r3, #4
 8004ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ae8:	4b04      	ldr	r3, [pc, #16]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aee:	4a03      	ldr	r2, [pc, #12]	@ (8004afc <HAL_RCC_OscConfig+0x504>)
 8004af0:	f043 0301 	orr.w	r3, r3, #1
 8004af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004af8:	e014      	b.n	8004b24 <HAL_RCC_OscConfig+0x52c>
 8004afa:	bf00      	nop
 8004afc:	40021000 	.word	0x40021000
 8004b00:	40007000 	.word	0x40007000
 8004b04:	4b9c      	ldr	r3, [pc, #624]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b0a:	4a9b      	ldr	r2, [pc, #620]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b14:	4b98      	ldr	r3, [pc, #608]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b1a:	4a97      	ldr	r2, [pc, #604]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004b1c:	f023 0304 	bic.w	r3, r3, #4
 8004b20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d016      	beq.n	8004b5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2c:	f7fd ff78 	bl	8002a20 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b32:	e00a      	b.n	8004b4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b34:	f7fd ff74 	bl	8002a20 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e12a      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b4a:	4b8b      	ldr	r3, [pc, #556]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0ed      	beq.n	8004b34 <HAL_RCC_OscConfig+0x53c>
 8004b58:	e015      	b.n	8004b86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5a:	f7fd ff61 	bl	8002a20 <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b60:	e00a      	b.n	8004b78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b62:	f7fd ff5d 	bl	8002a20 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e113      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b78:	4b7f      	ldr	r3, [pc, #508]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1ed      	bne.n	8004b62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b86:	7ffb      	ldrb	r3, [r7, #31]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d105      	bne.n	8004b98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b8c:	4b7a      	ldr	r3, [pc, #488]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b90:	4a79      	ldr	r2, [pc, #484]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004b92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b96:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 80fe 	beq.w	8004d9e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	f040 80d0 	bne.w	8004d4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004bac:	4b72      	ldr	r3, [pc, #456]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f003 0203 	and.w	r2, r3, #3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d130      	bne.n	8004c22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d127      	bne.n	8004c22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bdc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d11f      	bne.n	8004c22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004bec:	2a07      	cmp	r2, #7
 8004bee:	bf14      	ite	ne
 8004bf0:	2201      	movne	r2, #1
 8004bf2:	2200      	moveq	r2, #0
 8004bf4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d113      	bne.n	8004c22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c04:	085b      	lsrs	r3, r3, #1
 8004c06:	3b01      	subs	r3, #1
 8004c08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d109      	bne.n	8004c22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c18:	085b      	lsrs	r3, r3, #1
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d06e      	beq.n	8004d00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	2b0c      	cmp	r3, #12
 8004c26:	d069      	beq.n	8004cfc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c28:	4b53      	ldr	r3, [pc, #332]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d105      	bne.n	8004c40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c34:	4b50      	ldr	r3, [pc, #320]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0ad      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c44:	4b4c      	ldr	r3, [pc, #304]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a4b      	ldr	r2, [pc, #300]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c50:	f7fd fee6 	bl	8002a20 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c58:	f7fd fee2 	bl	8002a20 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e09a      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c6a:	4b43      	ldr	r3, [pc, #268]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c76:	4b40      	ldr	r3, [pc, #256]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	4b40      	ldr	r3, [pc, #256]	@ (8004d7c <HAL_RCC_OscConfig+0x784>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004c86:	3a01      	subs	r2, #1
 8004c88:	0112      	lsls	r2, r2, #4
 8004c8a:	4311      	orrs	r1, r2
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c90:	0212      	lsls	r2, r2, #8
 8004c92:	4311      	orrs	r1, r2
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c98:	0852      	lsrs	r2, r2, #1
 8004c9a:	3a01      	subs	r2, #1
 8004c9c:	0552      	lsls	r2, r2, #21
 8004c9e:	4311      	orrs	r1, r2
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004ca4:	0852      	lsrs	r2, r2, #1
 8004ca6:	3a01      	subs	r2, #1
 8004ca8:	0652      	lsls	r2, r2, #25
 8004caa:	4311      	orrs	r1, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004cb0:	0912      	lsrs	r2, r2, #4
 8004cb2:	0452      	lsls	r2, r2, #17
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	4930      	ldr	r1, [pc, #192]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a2d      	ldr	r2, [pc, #180]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004cc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4a2a      	ldr	r2, [pc, #168]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004cce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cd4:	f7fd fea4 	bl	8002a20 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cdc:	f7fd fea0 	bl	8002a20 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e058      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cee:	4b22      	ldr	r3, [pc, #136]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cfa:	e050      	b.n	8004d9e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e04f      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d00:	4b1d      	ldr	r3, [pc, #116]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d148      	bne.n	8004d9e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a19      	ldr	r2, [pc, #100]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d18:	4b17      	ldr	r3, [pc, #92]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4a16      	ldr	r2, [pc, #88]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004d1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d24:	f7fd fe7c 	bl	8002a20 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d2c:	f7fd fe78 	bl	8002a20 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e030      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x734>
 8004d4a:	e028      	b.n	8004d9e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	2b0c      	cmp	r3, #12
 8004d50:	d023      	beq.n	8004d9a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d52:	4b09      	ldr	r3, [pc, #36]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a08      	ldr	r2, [pc, #32]	@ (8004d78 <HAL_RCC_OscConfig+0x780>)
 8004d58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5e:	f7fd fe5f 	bl	8002a20 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d64:	e00c      	b.n	8004d80 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d66:	f7fd fe5b 	bl	8002a20 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d905      	bls.n	8004d80 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e013      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d80:	4b09      	ldr	r3, [pc, #36]	@ (8004da8 <HAL_RCC_OscConfig+0x7b0>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1ec      	bne.n	8004d66 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d8c:	4b06      	ldr	r3, [pc, #24]	@ (8004da8 <HAL_RCC_OscConfig+0x7b0>)
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	4905      	ldr	r1, [pc, #20]	@ (8004da8 <HAL_RCC_OscConfig+0x7b0>)
 8004d92:	4b06      	ldr	r3, [pc, #24]	@ (8004dac <HAL_RCC_OscConfig+0x7b4>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	60cb      	str	r3, [r1, #12]
 8004d98:	e001      	b.n	8004d9e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3720      	adds	r7, #32
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40021000 	.word	0x40021000
 8004dac:	feeefffc 	.word	0xfeeefffc

08004db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0e7      	b.n	8004f94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dc4:	4b75      	ldr	r3, [pc, #468]	@ (8004f9c <HAL_RCC_ClockConfig+0x1ec>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d910      	bls.n	8004df4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd2:	4b72      	ldr	r3, [pc, #456]	@ (8004f9c <HAL_RCC_ClockConfig+0x1ec>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f023 0207 	bic.w	r2, r3, #7
 8004dda:	4970      	ldr	r1, [pc, #448]	@ (8004f9c <HAL_RCC_ClockConfig+0x1ec>)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de2:	4b6e      	ldr	r3, [pc, #440]	@ (8004f9c <HAL_RCC_ClockConfig+0x1ec>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0cf      	b.n	8004f94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d010      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	4b66      	ldr	r3, [pc, #408]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d908      	bls.n	8004e22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e10:	4b63      	ldr	r3, [pc, #396]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	4960      	ldr	r1, [pc, #384]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d04c      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d107      	bne.n	8004e46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e36:	4b5a      	ldr	r3, [pc, #360]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d121      	bne.n	8004e86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e0a6      	b.n	8004f94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d107      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e4e:	4b54      	ldr	r3, [pc, #336]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d115      	bne.n	8004e86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e09a      	b.n	8004f94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d107      	bne.n	8004e76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e66:	4b4e      	ldr	r3, [pc, #312]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d109      	bne.n	8004e86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e08e      	b.n	8004f94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e76:	4b4a      	ldr	r3, [pc, #296]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e086      	b.n	8004f94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e86:	4b46      	ldr	r3, [pc, #280]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f023 0203 	bic.w	r2, r3, #3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	4943      	ldr	r1, [pc, #268]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e98:	f7fd fdc2 	bl	8002a20 <HAL_GetTick>
 8004e9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9e:	e00a      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ea0:	f7fd fdbe 	bl	8002a20 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e06e      	b.n	8004f94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb6:	4b3a      	ldr	r3, [pc, #232]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 020c 	and.w	r2, r3, #12
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d1eb      	bne.n	8004ea0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d010      	beq.n	8004ef6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	4b31      	ldr	r3, [pc, #196]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d208      	bcs.n	8004ef6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	492b      	ldr	r1, [pc, #172]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ef6:	4b29      	ldr	r3, [pc, #164]	@ (8004f9c <HAL_RCC_ClockConfig+0x1ec>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d210      	bcs.n	8004f26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f04:	4b25      	ldr	r3, [pc, #148]	@ (8004f9c <HAL_RCC_ClockConfig+0x1ec>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f023 0207 	bic.w	r2, r3, #7
 8004f0c:	4923      	ldr	r1, [pc, #140]	@ (8004f9c <HAL_RCC_ClockConfig+0x1ec>)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f14:	4b21      	ldr	r3, [pc, #132]	@ (8004f9c <HAL_RCC_ClockConfig+0x1ec>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d001      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e036      	b.n	8004f94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d008      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f32:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	4918      	ldr	r1, [pc, #96]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d009      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f50:	4b13      	ldr	r3, [pc, #76]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4910      	ldr	r1, [pc, #64]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f64:	f000 f824 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	091b      	lsrs	r3, r3, #4
 8004f70:	f003 030f 	and.w	r3, r3, #15
 8004f74:	490b      	ldr	r1, [pc, #44]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1f4>)
 8004f76:	5ccb      	ldrb	r3, [r1, r3]
 8004f78:	f003 031f 	and.w	r3, r3, #31
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f80:	4a09      	ldr	r2, [pc, #36]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8004f82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f84:	4b09      	ldr	r3, [pc, #36]	@ (8004fac <HAL_RCC_ClockConfig+0x1fc>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fd fcf9 	bl	8002980 <HAL_InitTick>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f92:	7afb      	ldrb	r3, [r7, #11]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40022000 	.word	0x40022000
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	08009df8 	.word	0x08009df8
 8004fa8:	20000a08 	.word	0x20000a08
 8004fac:	20000a40 	.word	0x20000a40

08004fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b089      	sub	sp, #36	@ 0x24
 8004fb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fbe:	4b3e      	ldr	r3, [pc, #248]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
 8004fc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0303 	and.w	r3, r3, #3
 8004fd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	2b0c      	cmp	r3, #12
 8004fdc:	d121      	bne.n	8005022 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d11e      	bne.n	8005022 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fe4:	4b34      	ldr	r3, [pc, #208]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d107      	bne.n	8005000 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ff0:	4b31      	ldr	r3, [pc, #196]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ff6:	0a1b      	lsrs	r3, r3, #8
 8004ff8:	f003 030f 	and.w	r3, r3, #15
 8004ffc:	61fb      	str	r3, [r7, #28]
 8004ffe:	e005      	b.n	800500c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005000:	4b2d      	ldr	r3, [pc, #180]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	091b      	lsrs	r3, r3, #4
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800500c:	4a2b      	ldr	r2, [pc, #172]	@ (80050bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005014:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10d      	bne.n	8005038 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005020:	e00a      	b.n	8005038 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	2b04      	cmp	r3, #4
 8005026:	d102      	bne.n	800502e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005028:	4b25      	ldr	r3, [pc, #148]	@ (80050c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800502a:	61bb      	str	r3, [r7, #24]
 800502c:	e004      	b.n	8005038 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	2b08      	cmp	r3, #8
 8005032:	d101      	bne.n	8005038 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005034:	4b23      	ldr	r3, [pc, #140]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005036:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2b0c      	cmp	r3, #12
 800503c:	d134      	bne.n	80050a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800503e:	4b1e      	ldr	r3, [pc, #120]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b02      	cmp	r3, #2
 800504c:	d003      	beq.n	8005056 <HAL_RCC_GetSysClockFreq+0xa6>
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b03      	cmp	r3, #3
 8005052:	d003      	beq.n	800505c <HAL_RCC_GetSysClockFreq+0xac>
 8005054:	e005      	b.n	8005062 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005056:	4b1a      	ldr	r3, [pc, #104]	@ (80050c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005058:	617b      	str	r3, [r7, #20]
      break;
 800505a:	e005      	b.n	8005068 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800505c:	4b19      	ldr	r3, [pc, #100]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800505e:	617b      	str	r3, [r7, #20]
      break;
 8005060:	e002      	b.n	8005068 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	617b      	str	r3, [r7, #20]
      break;
 8005066:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005068:	4b13      	ldr	r3, [pc, #76]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	091b      	lsrs	r3, r3, #4
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	3301      	adds	r3, #1
 8005074:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005076:	4b10      	ldr	r3, [pc, #64]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	0a1b      	lsrs	r3, r3, #8
 800507c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	fb03 f202 	mul.w	r2, r3, r2
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	fbb2 f3f3 	udiv	r3, r2, r3
 800508c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800508e:	4b0a      	ldr	r3, [pc, #40]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	0e5b      	lsrs	r3, r3, #25
 8005094:	f003 0303 	and.w	r3, r3, #3
 8005098:	3301      	adds	r3, #1
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80050a8:	69bb      	ldr	r3, [r7, #24]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3724      	adds	r7, #36	@ 0x24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40021000 	.word	0x40021000
 80050bc:	08009e10 	.word	0x08009e10
 80050c0:	00f42400 	.word	0x00f42400
 80050c4:	007a1200 	.word	0x007a1200

080050c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050cc:	4b03      	ldr	r3, [pc, #12]	@ (80050dc <HAL_RCC_GetHCLKFreq+0x14>)
 80050ce:	681b      	ldr	r3, [r3, #0]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	20000a08 	.word	0x20000a08

080050e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050e4:	f7ff fff0 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 80050e8:	4602      	mov	r2, r0
 80050ea:	4b06      	ldr	r3, [pc, #24]	@ (8005104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	0a1b      	lsrs	r3, r3, #8
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	4904      	ldr	r1, [pc, #16]	@ (8005108 <HAL_RCC_GetPCLK1Freq+0x28>)
 80050f6:	5ccb      	ldrb	r3, [r1, r3]
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005100:	4618      	mov	r0, r3
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40021000 	.word	0x40021000
 8005108:	08009e08 	.word	0x08009e08

0800510c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005110:	f7ff ffda 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 8005114:	4602      	mov	r2, r0
 8005116:	4b06      	ldr	r3, [pc, #24]	@ (8005130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	0adb      	lsrs	r3, r3, #11
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	4904      	ldr	r1, [pc, #16]	@ (8005134 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005122:	5ccb      	ldrb	r3, [r1, r3]
 8005124:	f003 031f 	and.w	r3, r3, #31
 8005128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800512c:	4618      	mov	r0, r3
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40021000 	.word	0x40021000
 8005134:	08009e08 	.word	0x08009e08

08005138 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005140:	2300      	movs	r3, #0
 8005142:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005144:	4b2a      	ldr	r3, [pc, #168]	@ (80051f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005150:	f7ff f922 	bl	8004398 <HAL_PWREx_GetVoltageRange>
 8005154:	6178      	str	r0, [r7, #20]
 8005156:	e014      	b.n	8005182 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005158:	4b25      	ldr	r3, [pc, #148]	@ (80051f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800515a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515c:	4a24      	ldr	r2, [pc, #144]	@ (80051f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800515e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005162:	6593      	str	r3, [r2, #88]	@ 0x58
 8005164:	4b22      	ldr	r3, [pc, #136]	@ (80051f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005170:	f7ff f912 	bl	8004398 <HAL_PWREx_GetVoltageRange>
 8005174:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005176:	4b1e      	ldr	r3, [pc, #120]	@ (80051f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517a:	4a1d      	ldr	r2, [pc, #116]	@ (80051f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800517c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005180:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005188:	d10b      	bne.n	80051a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b80      	cmp	r3, #128	@ 0x80
 800518e:	d919      	bls.n	80051c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2ba0      	cmp	r3, #160	@ 0xa0
 8005194:	d902      	bls.n	800519c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005196:	2302      	movs	r3, #2
 8005198:	613b      	str	r3, [r7, #16]
 800519a:	e013      	b.n	80051c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800519c:	2301      	movs	r3, #1
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	e010      	b.n	80051c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b80      	cmp	r3, #128	@ 0x80
 80051a6:	d902      	bls.n	80051ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80051a8:	2303      	movs	r3, #3
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	e00a      	b.n	80051c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b80      	cmp	r3, #128	@ 0x80
 80051b2:	d102      	bne.n	80051ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051b4:	2302      	movs	r3, #2
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	e004      	b.n	80051c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b70      	cmp	r3, #112	@ 0x70
 80051be:	d101      	bne.n	80051c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051c0:	2301      	movs	r3, #1
 80051c2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80051c4:	4b0b      	ldr	r3, [pc, #44]	@ (80051f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f023 0207 	bic.w	r2, r3, #7
 80051cc:	4909      	ldr	r1, [pc, #36]	@ (80051f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051d4:	4b07      	ldr	r3, [pc, #28]	@ (80051f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d001      	beq.n	80051e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40021000 	.word	0x40021000
 80051f4:	40022000 	.word	0x40022000

080051f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005200:	2300      	movs	r3, #0
 8005202:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005204:	2300      	movs	r3, #0
 8005206:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005210:	2b00      	cmp	r3, #0
 8005212:	d041      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005218:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800521c:	d02a      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800521e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005222:	d824      	bhi.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005224:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005228:	d008      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800522a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800522e:	d81e      	bhi.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005234:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005238:	d010      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800523a:	e018      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800523c:	4b86      	ldr	r3, [pc, #536]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	4a85      	ldr	r2, [pc, #532]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005242:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005246:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005248:	e015      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3304      	adds	r3, #4
 800524e:	2100      	movs	r1, #0
 8005250:	4618      	mov	r0, r3
 8005252:	f000 facb 	bl	80057ec <RCCEx_PLLSAI1_Config>
 8005256:	4603      	mov	r3, r0
 8005258:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800525a:	e00c      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3320      	adds	r3, #32
 8005260:	2100      	movs	r1, #0
 8005262:	4618      	mov	r0, r3
 8005264:	f000 fbb6 	bl	80059d4 <RCCEx_PLLSAI2_Config>
 8005268:	4603      	mov	r3, r0
 800526a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800526c:	e003      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	74fb      	strb	r3, [r7, #19]
      break;
 8005272:	e000      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005276:	7cfb      	ldrb	r3, [r7, #19]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10b      	bne.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800527c:	4b76      	ldr	r3, [pc, #472]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005282:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800528a:	4973      	ldr	r1, [pc, #460]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005292:	e001      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005294:	7cfb      	ldrb	r3, [r7, #19]
 8005296:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d041      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052ac:	d02a      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80052ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052b2:	d824      	bhi.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80052b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052b8:	d008      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052be:	d81e      	bhi.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80052c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052c8:	d010      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80052ca:	e018      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052cc:	4b62      	ldr	r3, [pc, #392]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	4a61      	ldr	r2, [pc, #388]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052d8:	e015      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3304      	adds	r3, #4
 80052de:	2100      	movs	r1, #0
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fa83 	bl	80057ec <RCCEx_PLLSAI1_Config>
 80052e6:	4603      	mov	r3, r0
 80052e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052ea:	e00c      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3320      	adds	r3, #32
 80052f0:	2100      	movs	r1, #0
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fb6e 	bl	80059d4 <RCCEx_PLLSAI2_Config>
 80052f8:	4603      	mov	r3, r0
 80052fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052fc:	e003      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	74fb      	strb	r3, [r7, #19]
      break;
 8005302:	e000      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005306:	7cfb      	ldrb	r3, [r7, #19]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10b      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800530c:	4b52      	ldr	r3, [pc, #328]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005312:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800531a:	494f      	ldr	r1, [pc, #316]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005322:	e001      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005324:	7cfb      	ldrb	r3, [r7, #19]
 8005326:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 80a0 	beq.w	8005476 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005336:	2300      	movs	r3, #0
 8005338:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800533a:	4b47      	ldr	r3, [pc, #284]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800533c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005346:	2301      	movs	r3, #1
 8005348:	e000      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800534a:	2300      	movs	r3, #0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00d      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005350:	4b41      	ldr	r3, [pc, #260]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005354:	4a40      	ldr	r2, [pc, #256]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800535a:	6593      	str	r3, [r2, #88]	@ 0x58
 800535c:	4b3e      	ldr	r3, [pc, #248]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800535e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005364:	60bb      	str	r3, [r7, #8]
 8005366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005368:	2301      	movs	r3, #1
 800536a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800536c:	4b3b      	ldr	r3, [pc, #236]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a3a      	ldr	r2, [pc, #232]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005376:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005378:	f7fd fb52 	bl	8002a20 <HAL_GetTick>
 800537c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800537e:	e009      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005380:	f7fd fb4e 	bl	8002a20 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d902      	bls.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	74fb      	strb	r3, [r7, #19]
        break;
 8005392:	e005      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005394:	4b31      	ldr	r3, [pc, #196]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0ef      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80053a0:	7cfb      	ldrb	r3, [r7, #19]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d15c      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053a6:	4b2c      	ldr	r3, [pc, #176]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01f      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d019      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053c4:	4b24      	ldr	r3, [pc, #144]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053d0:	4b21      	ldr	r3, [pc, #132]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d6:	4a20      	ldr	r2, [pc, #128]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053f0:	4a19      	ldr	r2, [pc, #100]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d016      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005402:	f7fd fb0d 	bl	8002a20 <HAL_GetTick>
 8005406:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005408:	e00b      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540a:	f7fd fb09 	bl	8002a20 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005418:	4293      	cmp	r3, r2
 800541a:	d902      	bls.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	74fb      	strb	r3, [r7, #19]
            break;
 8005420:	e006      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005422:	4b0d      	ldr	r3, [pc, #52]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0ec      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005430:	7cfb      	ldrb	r3, [r7, #19]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10c      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005436:	4b08      	ldr	r3, [pc, #32]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800543c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005446:	4904      	ldr	r1, [pc, #16]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800544e:	e009      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005450:	7cfb      	ldrb	r3, [r7, #19]
 8005452:	74bb      	strb	r3, [r7, #18]
 8005454:	e006      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005456:	bf00      	nop
 8005458:	40021000 	.word	0x40021000
 800545c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005460:	7cfb      	ldrb	r3, [r7, #19]
 8005462:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005464:	7c7b      	ldrb	r3, [r7, #17]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d105      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800546a:	4b9e      	ldr	r3, [pc, #632]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800546c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800546e:	4a9d      	ldr	r2, [pc, #628]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005470:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005474:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005482:	4b98      	ldr	r3, [pc, #608]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005488:	f023 0203 	bic.w	r2, r3, #3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005490:	4994      	ldr	r1, [pc, #592]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054a4:	4b8f      	ldr	r3, [pc, #572]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054aa:	f023 020c 	bic.w	r2, r3, #12
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b2:	498c      	ldr	r1, [pc, #560]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054c6:	4b87      	ldr	r3, [pc, #540]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d4:	4983      	ldr	r1, [pc, #524]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054e8:	4b7e      	ldr	r3, [pc, #504]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f6:	497b      	ldr	r1, [pc, #492]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0310 	and.w	r3, r3, #16
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800550a:	4b76      	ldr	r3, [pc, #472]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005510:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005518:	4972      	ldr	r1, [pc, #456]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00a      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800552c:	4b6d      	ldr	r3, [pc, #436]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005532:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800553a:	496a      	ldr	r1, [pc, #424]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800554e:	4b65      	ldr	r3, [pc, #404]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005554:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800555c:	4961      	ldr	r1, [pc, #388]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800555e:	4313      	orrs	r3, r2
 8005560:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005570:	4b5c      	ldr	r3, [pc, #368]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005576:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800557e:	4959      	ldr	r1, [pc, #356]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005592:	4b54      	ldr	r3, [pc, #336]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005598:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055a0:	4950      	ldr	r1, [pc, #320]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055b4:	4b4b      	ldr	r3, [pc, #300]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c2:	4948      	ldr	r1, [pc, #288]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00a      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055d6:	4b43      	ldr	r3, [pc, #268]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e4:	493f      	ldr	r1, [pc, #252]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d028      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055f8:	4b3a      	ldr	r3, [pc, #232]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005606:	4937      	ldr	r1, [pc, #220]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005612:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005616:	d106      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005618:	4b32      	ldr	r3, [pc, #200]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	4a31      	ldr	r2, [pc, #196]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005622:	60d3      	str	r3, [r2, #12]
 8005624:	e011      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800562a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800562e:	d10c      	bne.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3304      	adds	r3, #4
 8005634:	2101      	movs	r1, #1
 8005636:	4618      	mov	r0, r3
 8005638:	f000 f8d8 	bl	80057ec <RCCEx_PLLSAI1_Config>
 800563c:	4603      	mov	r3, r0
 800563e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005640:	7cfb      	ldrb	r3, [r7, #19]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005646:	7cfb      	ldrb	r3, [r7, #19]
 8005648:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d028      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005656:	4b23      	ldr	r3, [pc, #140]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800565c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005664:	491f      	ldr	r1, [pc, #124]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005670:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005674:	d106      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005676:	4b1b      	ldr	r3, [pc, #108]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	4a1a      	ldr	r2, [pc, #104]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800567c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005680:	60d3      	str	r3, [r2, #12]
 8005682:	e011      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005688:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800568c:	d10c      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3304      	adds	r3, #4
 8005692:	2101      	movs	r1, #1
 8005694:	4618      	mov	r0, r3
 8005696:	f000 f8a9 	bl	80057ec <RCCEx_PLLSAI1_Config>
 800569a:	4603      	mov	r3, r0
 800569c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800569e:	7cfb      	ldrb	r3, [r7, #19]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80056a4:	7cfb      	ldrb	r3, [r7, #19]
 80056a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d02b      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056b4:	4b0b      	ldr	r3, [pc, #44]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056c2:	4908      	ldr	r1, [pc, #32]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056d2:	d109      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d4:	4b03      	ldr	r3, [pc, #12]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	4a02      	ldr	r2, [pc, #8]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056de:	60d3      	str	r3, [r2, #12]
 80056e0:	e014      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80056e2:	bf00      	nop
 80056e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056f0:	d10c      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3304      	adds	r3, #4
 80056f6:	2101      	movs	r1, #1
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 f877 	bl	80057ec <RCCEx_PLLSAI1_Config>
 80056fe:	4603      	mov	r3, r0
 8005700:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005702:	7cfb      	ldrb	r3, [r7, #19]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005708:	7cfb      	ldrb	r3, [r7, #19]
 800570a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d02f      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005718:	4b2b      	ldr	r3, [pc, #172]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800571a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005726:	4928      	ldr	r1, [pc, #160]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005728:	4313      	orrs	r3, r2
 800572a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005732:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005736:	d10d      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3304      	adds	r3, #4
 800573c:	2102      	movs	r1, #2
 800573e:	4618      	mov	r0, r3
 8005740:	f000 f854 	bl	80057ec <RCCEx_PLLSAI1_Config>
 8005744:	4603      	mov	r3, r0
 8005746:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005748:	7cfb      	ldrb	r3, [r7, #19]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d014      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800574e:	7cfb      	ldrb	r3, [r7, #19]
 8005750:	74bb      	strb	r3, [r7, #18]
 8005752:	e011      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005758:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800575c:	d10c      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3320      	adds	r3, #32
 8005762:	2102      	movs	r1, #2
 8005764:	4618      	mov	r0, r3
 8005766:	f000 f935 	bl	80059d4 <RCCEx_PLLSAI2_Config>
 800576a:	4603      	mov	r3, r0
 800576c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800576e:	7cfb      	ldrb	r3, [r7, #19]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005774:	7cfb      	ldrb	r3, [r7, #19]
 8005776:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00a      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005784:	4b10      	ldr	r3, [pc, #64]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005792:	490d      	ldr	r1, [pc, #52]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00b      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057a6:	4b08      	ldr	r3, [pc, #32]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057b6:	4904      	ldr	r1, [pc, #16]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80057be:	7cbb      	ldrb	r3, [r7, #18]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40021000 	.word	0x40021000

080057cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80057d0:	4b05      	ldr	r3, [pc, #20]	@ (80057e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a04      	ldr	r2, [pc, #16]	@ (80057e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80057d6:	f043 0304 	orr.w	r3, r3, #4
 80057da:	6013      	str	r3, [r2, #0]
}
 80057dc:	bf00      	nop
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40021000 	.word	0x40021000

080057ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057fa:	4b75      	ldr	r3, [pc, #468]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d018      	beq.n	8005838 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005806:	4b72      	ldr	r3, [pc, #456]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f003 0203 	and.w	r2, r3, #3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d10d      	bne.n	8005832 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
       ||
 800581a:	2b00      	cmp	r3, #0
 800581c:	d009      	beq.n	8005832 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800581e:	4b6c      	ldr	r3, [pc, #432]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	091b      	lsrs	r3, r3, #4
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
       ||
 800582e:	429a      	cmp	r2, r3
 8005830:	d047      	beq.n	80058c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	73fb      	strb	r3, [r7, #15]
 8005836:	e044      	b.n	80058c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b03      	cmp	r3, #3
 800583e:	d018      	beq.n	8005872 <RCCEx_PLLSAI1_Config+0x86>
 8005840:	2b03      	cmp	r3, #3
 8005842:	d825      	bhi.n	8005890 <RCCEx_PLLSAI1_Config+0xa4>
 8005844:	2b01      	cmp	r3, #1
 8005846:	d002      	beq.n	800584e <RCCEx_PLLSAI1_Config+0x62>
 8005848:	2b02      	cmp	r3, #2
 800584a:	d009      	beq.n	8005860 <RCCEx_PLLSAI1_Config+0x74>
 800584c:	e020      	b.n	8005890 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800584e:	4b60      	ldr	r3, [pc, #384]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d11d      	bne.n	8005896 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800585e:	e01a      	b.n	8005896 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005860:	4b5b      	ldr	r3, [pc, #364]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005868:	2b00      	cmp	r3, #0
 800586a:	d116      	bne.n	800589a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005870:	e013      	b.n	800589a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005872:	4b57      	ldr	r3, [pc, #348]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10f      	bne.n	800589e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800587e:	4b54      	ldr	r3, [pc, #336]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d109      	bne.n	800589e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800588e:	e006      	b.n	800589e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	73fb      	strb	r3, [r7, #15]
      break;
 8005894:	e004      	b.n	80058a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005896:	bf00      	nop
 8005898:	e002      	b.n	80058a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800589a:	bf00      	nop
 800589c:	e000      	b.n	80058a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800589e:	bf00      	nop
    }

    if(status == HAL_OK)
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10d      	bne.n	80058c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058a6:	4b4a      	ldr	r3, [pc, #296]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6819      	ldr	r1, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	011b      	lsls	r3, r3, #4
 80058ba:	430b      	orrs	r3, r1
 80058bc:	4944      	ldr	r1, [pc, #272]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d17d      	bne.n	80059c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80058c8:	4b41      	ldr	r3, [pc, #260]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a40      	ldr	r2, [pc, #256]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80058d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058d4:	f7fd f8a4 	bl	8002a20 <HAL_GetTick>
 80058d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058da:	e009      	b.n	80058f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058dc:	f7fd f8a0 	bl	8002a20 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d902      	bls.n	80058f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	73fb      	strb	r3, [r7, #15]
        break;
 80058ee:	e005      	b.n	80058fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058f0:	4b37      	ldr	r3, [pc, #220]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1ef      	bne.n	80058dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d160      	bne.n	80059c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d111      	bne.n	800592c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005908:	4b31      	ldr	r3, [pc, #196]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005910:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6892      	ldr	r2, [r2, #8]
 8005918:	0211      	lsls	r1, r2, #8
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	68d2      	ldr	r2, [r2, #12]
 800591e:	0912      	lsrs	r2, r2, #4
 8005920:	0452      	lsls	r2, r2, #17
 8005922:	430a      	orrs	r2, r1
 8005924:	492a      	ldr	r1, [pc, #168]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005926:	4313      	orrs	r3, r2
 8005928:	610b      	str	r3, [r1, #16]
 800592a:	e027      	b.n	800597c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d112      	bne.n	8005958 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005932:	4b27      	ldr	r3, [pc, #156]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800593a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	6892      	ldr	r2, [r2, #8]
 8005942:	0211      	lsls	r1, r2, #8
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6912      	ldr	r2, [r2, #16]
 8005948:	0852      	lsrs	r2, r2, #1
 800594a:	3a01      	subs	r2, #1
 800594c:	0552      	lsls	r2, r2, #21
 800594e:	430a      	orrs	r2, r1
 8005950:	491f      	ldr	r1, [pc, #124]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005952:	4313      	orrs	r3, r2
 8005954:	610b      	str	r3, [r1, #16]
 8005956:	e011      	b.n	800597c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005958:	4b1d      	ldr	r3, [pc, #116]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005960:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6892      	ldr	r2, [r2, #8]
 8005968:	0211      	lsls	r1, r2, #8
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6952      	ldr	r2, [r2, #20]
 800596e:	0852      	lsrs	r2, r2, #1
 8005970:	3a01      	subs	r2, #1
 8005972:	0652      	lsls	r2, r2, #25
 8005974:	430a      	orrs	r2, r1
 8005976:	4916      	ldr	r1, [pc, #88]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005978:	4313      	orrs	r3, r2
 800597a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800597c:	4b14      	ldr	r3, [pc, #80]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a13      	ldr	r2, [pc, #76]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005982:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005986:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005988:	f7fd f84a 	bl	8002a20 <HAL_GetTick>
 800598c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800598e:	e009      	b.n	80059a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005990:	f7fd f846 	bl	8002a20 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d902      	bls.n	80059a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	73fb      	strb	r3, [r7, #15]
          break;
 80059a2:	e005      	b.n	80059b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059a4:	4b0a      	ldr	r3, [pc, #40]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0ef      	beq.n	8005990 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80059b6:	4b06      	ldr	r3, [pc, #24]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059b8:	691a      	ldr	r2, [r3, #16]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	4904      	ldr	r1, [pc, #16]	@ (80059d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	40021000 	.word	0x40021000

080059d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059e2:	4b6a      	ldr	r3, [pc, #424]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d018      	beq.n	8005a20 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80059ee:	4b67      	ldr	r3, [pc, #412]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f003 0203 	and.w	r2, r3, #3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d10d      	bne.n	8005a1a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
       ||
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d009      	beq.n	8005a1a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005a06:	4b61      	ldr	r3, [pc, #388]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	091b      	lsrs	r3, r3, #4
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
       ||
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d047      	beq.n	8005aaa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	73fb      	strb	r3, [r7, #15]
 8005a1e:	e044      	b.n	8005aaa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b03      	cmp	r3, #3
 8005a26:	d018      	beq.n	8005a5a <RCCEx_PLLSAI2_Config+0x86>
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d825      	bhi.n	8005a78 <RCCEx_PLLSAI2_Config+0xa4>
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d002      	beq.n	8005a36 <RCCEx_PLLSAI2_Config+0x62>
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d009      	beq.n	8005a48 <RCCEx_PLLSAI2_Config+0x74>
 8005a34:	e020      	b.n	8005a78 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a36:	4b55      	ldr	r3, [pc, #340]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d11d      	bne.n	8005a7e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a46:	e01a      	b.n	8005a7e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a48:	4b50      	ldr	r3, [pc, #320]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d116      	bne.n	8005a82 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a58:	e013      	b.n	8005a82 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a5a:	4b4c      	ldr	r3, [pc, #304]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10f      	bne.n	8005a86 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a66:	4b49      	ldr	r3, [pc, #292]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d109      	bne.n	8005a86 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a76:	e006      	b.n	8005a86 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a7c:	e004      	b.n	8005a88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a7e:	bf00      	nop
 8005a80:	e002      	b.n	8005a88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a82:	bf00      	nop
 8005a84:	e000      	b.n	8005a88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a86:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10d      	bne.n	8005aaa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a8e:	4b3f      	ldr	r3, [pc, #252]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6819      	ldr	r1, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	430b      	orrs	r3, r1
 8005aa4:	4939      	ldr	r1, [pc, #228]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d167      	bne.n	8005b80 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005ab0:	4b36      	ldr	r3, [pc, #216]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a35      	ldr	r2, [pc, #212]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005abc:	f7fc ffb0 	bl	8002a20 <HAL_GetTick>
 8005ac0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ac2:	e009      	b.n	8005ad8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ac4:	f7fc ffac 	bl	8002a20 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d902      	bls.n	8005ad8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	73fb      	strb	r3, [r7, #15]
        break;
 8005ad6:	e005      	b.n	8005ae4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ad8:	4b2c      	ldr	r3, [pc, #176]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1ef      	bne.n	8005ac4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d14a      	bne.n	8005b80 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d111      	bne.n	8005b14 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005af0:	4b26      	ldr	r3, [pc, #152]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005af8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	6892      	ldr	r2, [r2, #8]
 8005b00:	0211      	lsls	r1, r2, #8
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	68d2      	ldr	r2, [r2, #12]
 8005b06:	0912      	lsrs	r2, r2, #4
 8005b08:	0452      	lsls	r2, r2, #17
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	491f      	ldr	r1, [pc, #124]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	614b      	str	r3, [r1, #20]
 8005b12:	e011      	b.n	8005b38 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b14:	4b1d      	ldr	r3, [pc, #116]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005b1c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6892      	ldr	r2, [r2, #8]
 8005b24:	0211      	lsls	r1, r2, #8
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6912      	ldr	r2, [r2, #16]
 8005b2a:	0852      	lsrs	r2, r2, #1
 8005b2c:	3a01      	subs	r2, #1
 8005b2e:	0652      	lsls	r2, r2, #25
 8005b30:	430a      	orrs	r2, r1
 8005b32:	4916      	ldr	r1, [pc, #88]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005b38:	4b14      	ldr	r3, [pc, #80]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a13      	ldr	r2, [pc, #76]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b44:	f7fc ff6c 	bl	8002a20 <HAL_GetTick>
 8005b48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b4a:	e009      	b.n	8005b60 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b4c:	f7fc ff68 	bl	8002a20 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d902      	bls.n	8005b60 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	73fb      	strb	r3, [r7, #15]
          break;
 8005b5e:	e005      	b.n	8005b6c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b60:	4b0a      	ldr	r3, [pc, #40]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0ef      	beq.n	8005b4c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b72:	4b06      	ldr	r3, [pc, #24]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b74:	695a      	ldr	r2, [r3, #20]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	4904      	ldr	r1, [pc, #16]	@ (8005b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40021000 	.word	0x40021000

08005b90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e095      	b.n	8005cce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d108      	bne.n	8005bbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bb2:	d009      	beq.n	8005bc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	61da      	str	r2, [r3, #28]
 8005bba:	e005      	b.n	8005bc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fc f91a 	bl	8001e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bfe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c08:	d902      	bls.n	8005c10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	e002      	b.n	8005c16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005c1e:	d007      	beq.n	8005c30 <HAL_SPI_Init+0xa0>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c28:	d002      	beq.n	8005c30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c40:	431a      	orrs	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c72:	ea42 0103 	orr.w	r1, r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	0c1b      	lsrs	r3, r3, #16
 8005c8c:	f003 0204 	and.w	r2, r3, #4
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c94:	f003 0310 	and.w	r3, r3, #16
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c9e:	f003 0308 	and.w	r3, r3, #8
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005cac:	ea42 0103 	orr.w	r1, r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e040      	b.n	8005d6a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d106      	bne.n	8005cfe <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7fc f8d3 	bl	8001ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2224      	movs	r2, #36	@ 0x24
 8005d02:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0201 	bic.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fb69 	bl	80063f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f8ae 	bl	8005e84 <UART_SetConfig>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d101      	bne.n	8005d32 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e01b      	b.n	8005d6a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f042 0201 	orr.w	r2, r2, #1
 8005d60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fbe8 	bl	8006538 <UART_CheckIdleState>
 8005d68:	4603      	mov	r3, r0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b08a      	sub	sp, #40	@ 0x28
 8005d76:	af02      	add	r7, sp, #8
 8005d78:	60f8      	str	r0, [r7, #12]
 8005d7a:	60b9      	str	r1, [r7, #8]
 8005d7c:	603b      	str	r3, [r7, #0]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d86:	2b20      	cmp	r3, #32
 8005d88:	d177      	bne.n	8005e7a <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <HAL_UART_Transmit+0x24>
 8005d90:	88fb      	ldrh	r3, [r7, #6]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e070      	b.n	8005e7c <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2221      	movs	r2, #33	@ 0x21
 8005da6:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005da8:	f7fc fe3a 	bl	8002a20 <HAL_GetTick>
 8005dac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	88fa      	ldrh	r2, [r7, #6]
 8005db2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	88fa      	ldrh	r2, [r7, #6]
 8005dba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dc6:	d108      	bne.n	8005dda <HAL_UART_Transmit+0x68>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d104      	bne.n	8005dda <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	61bb      	str	r3, [r7, #24]
 8005dd8:	e003      	b.n	8005de2 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dde:	2300      	movs	r3, #0
 8005de0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005de2:	e02f      	b.n	8005e44 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2200      	movs	r2, #0
 8005dec:	2180      	movs	r1, #128	@ 0x80
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 fc4a 	bl	8006688 <UART_WaitOnFlagUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d004      	beq.n	8005e04 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e03b      	b.n	8005e7c <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10b      	bne.n	8005e22 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	881a      	ldrh	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e16:	b292      	uxth	r2, r2
 8005e18:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	3302      	adds	r3, #2
 8005e1e:	61bb      	str	r3, [r7, #24]
 8005e20:	e007      	b.n	8005e32 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	781a      	ldrb	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1c9      	bne.n	8005de4 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2200      	movs	r2, #0
 8005e58:	2140      	movs	r1, #64	@ 0x40
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 fc14 	bl	8006688 <UART_WaitOnFlagUntilTimeout>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d004      	beq.n	8005e70 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e005      	b.n	8005e7c <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2220      	movs	r2, #32
 8005e74:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	e000      	b.n	8005e7c <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005e7a:	2302      	movs	r3, #2
  }
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3720      	adds	r7, #32
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e88:	b08a      	sub	sp, #40	@ 0x28
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4ba4      	ldr	r3, [pc, #656]	@ (8006144 <UART_SetConfig+0x2c0>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	6812      	ldr	r2, [r2, #0]
 8005eba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a99      	ldr	r2, [pc, #612]	@ (8006148 <UART_SetConfig+0x2c4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eec:	4313      	orrs	r3, r2
 8005eee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f00:	430a      	orrs	r2, r1
 8005f02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a90      	ldr	r2, [pc, #576]	@ (800614c <UART_SetConfig+0x2c8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d126      	bne.n	8005f5c <UART_SetConfig+0xd8>
 8005f0e:	4b90      	ldr	r3, [pc, #576]	@ (8006150 <UART_SetConfig+0x2cc>)
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f14:	f003 0303 	and.w	r3, r3, #3
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d81b      	bhi.n	8005f54 <UART_SetConfig+0xd0>
 8005f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f24 <UART_SetConfig+0xa0>)
 8005f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f22:	bf00      	nop
 8005f24:	08005f35 	.word	0x08005f35
 8005f28:	08005f45 	.word	0x08005f45
 8005f2c:	08005f3d 	.word	0x08005f3d
 8005f30:	08005f4d 	.word	0x08005f4d
 8005f34:	2301      	movs	r3, #1
 8005f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f3a:	e116      	b.n	800616a <UART_SetConfig+0x2e6>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f42:	e112      	b.n	800616a <UART_SetConfig+0x2e6>
 8005f44:	2304      	movs	r3, #4
 8005f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f4a:	e10e      	b.n	800616a <UART_SetConfig+0x2e6>
 8005f4c:	2308      	movs	r3, #8
 8005f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f52:	e10a      	b.n	800616a <UART_SetConfig+0x2e6>
 8005f54:	2310      	movs	r3, #16
 8005f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f5a:	e106      	b.n	800616a <UART_SetConfig+0x2e6>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a7c      	ldr	r2, [pc, #496]	@ (8006154 <UART_SetConfig+0x2d0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d138      	bne.n	8005fd8 <UART_SetConfig+0x154>
 8005f66:	4b7a      	ldr	r3, [pc, #488]	@ (8006150 <UART_SetConfig+0x2cc>)
 8005f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f6c:	f003 030c 	and.w	r3, r3, #12
 8005f70:	2b0c      	cmp	r3, #12
 8005f72:	d82d      	bhi.n	8005fd0 <UART_SetConfig+0x14c>
 8005f74:	a201      	add	r2, pc, #4	@ (adr r2, 8005f7c <UART_SetConfig+0xf8>)
 8005f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7a:	bf00      	nop
 8005f7c:	08005fb1 	.word	0x08005fb1
 8005f80:	08005fd1 	.word	0x08005fd1
 8005f84:	08005fd1 	.word	0x08005fd1
 8005f88:	08005fd1 	.word	0x08005fd1
 8005f8c:	08005fc1 	.word	0x08005fc1
 8005f90:	08005fd1 	.word	0x08005fd1
 8005f94:	08005fd1 	.word	0x08005fd1
 8005f98:	08005fd1 	.word	0x08005fd1
 8005f9c:	08005fb9 	.word	0x08005fb9
 8005fa0:	08005fd1 	.word	0x08005fd1
 8005fa4:	08005fd1 	.word	0x08005fd1
 8005fa8:	08005fd1 	.word	0x08005fd1
 8005fac:	08005fc9 	.word	0x08005fc9
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fb6:	e0d8      	b.n	800616a <UART_SetConfig+0x2e6>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fbe:	e0d4      	b.n	800616a <UART_SetConfig+0x2e6>
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fc6:	e0d0      	b.n	800616a <UART_SetConfig+0x2e6>
 8005fc8:	2308      	movs	r3, #8
 8005fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fce:	e0cc      	b.n	800616a <UART_SetConfig+0x2e6>
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fd6:	e0c8      	b.n	800616a <UART_SetConfig+0x2e6>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a5e      	ldr	r2, [pc, #376]	@ (8006158 <UART_SetConfig+0x2d4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d125      	bne.n	800602e <UART_SetConfig+0x1aa>
 8005fe2:	4b5b      	ldr	r3, [pc, #364]	@ (8006150 <UART_SetConfig+0x2cc>)
 8005fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005fec:	2b30      	cmp	r3, #48	@ 0x30
 8005fee:	d016      	beq.n	800601e <UART_SetConfig+0x19a>
 8005ff0:	2b30      	cmp	r3, #48	@ 0x30
 8005ff2:	d818      	bhi.n	8006026 <UART_SetConfig+0x1a2>
 8005ff4:	2b20      	cmp	r3, #32
 8005ff6:	d00a      	beq.n	800600e <UART_SetConfig+0x18a>
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d814      	bhi.n	8006026 <UART_SetConfig+0x1a2>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <UART_SetConfig+0x182>
 8006000:	2b10      	cmp	r3, #16
 8006002:	d008      	beq.n	8006016 <UART_SetConfig+0x192>
 8006004:	e00f      	b.n	8006026 <UART_SetConfig+0x1a2>
 8006006:	2300      	movs	r3, #0
 8006008:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800600c:	e0ad      	b.n	800616a <UART_SetConfig+0x2e6>
 800600e:	2302      	movs	r3, #2
 8006010:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006014:	e0a9      	b.n	800616a <UART_SetConfig+0x2e6>
 8006016:	2304      	movs	r3, #4
 8006018:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800601c:	e0a5      	b.n	800616a <UART_SetConfig+0x2e6>
 800601e:	2308      	movs	r3, #8
 8006020:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006024:	e0a1      	b.n	800616a <UART_SetConfig+0x2e6>
 8006026:	2310      	movs	r3, #16
 8006028:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800602c:	e09d      	b.n	800616a <UART_SetConfig+0x2e6>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a4a      	ldr	r2, [pc, #296]	@ (800615c <UART_SetConfig+0x2d8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d125      	bne.n	8006084 <UART_SetConfig+0x200>
 8006038:	4b45      	ldr	r3, [pc, #276]	@ (8006150 <UART_SetConfig+0x2cc>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800603e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006042:	2bc0      	cmp	r3, #192	@ 0xc0
 8006044:	d016      	beq.n	8006074 <UART_SetConfig+0x1f0>
 8006046:	2bc0      	cmp	r3, #192	@ 0xc0
 8006048:	d818      	bhi.n	800607c <UART_SetConfig+0x1f8>
 800604a:	2b80      	cmp	r3, #128	@ 0x80
 800604c:	d00a      	beq.n	8006064 <UART_SetConfig+0x1e0>
 800604e:	2b80      	cmp	r3, #128	@ 0x80
 8006050:	d814      	bhi.n	800607c <UART_SetConfig+0x1f8>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <UART_SetConfig+0x1d8>
 8006056:	2b40      	cmp	r3, #64	@ 0x40
 8006058:	d008      	beq.n	800606c <UART_SetConfig+0x1e8>
 800605a:	e00f      	b.n	800607c <UART_SetConfig+0x1f8>
 800605c:	2300      	movs	r3, #0
 800605e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006062:	e082      	b.n	800616a <UART_SetConfig+0x2e6>
 8006064:	2302      	movs	r3, #2
 8006066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800606a:	e07e      	b.n	800616a <UART_SetConfig+0x2e6>
 800606c:	2304      	movs	r3, #4
 800606e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006072:	e07a      	b.n	800616a <UART_SetConfig+0x2e6>
 8006074:	2308      	movs	r3, #8
 8006076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800607a:	e076      	b.n	800616a <UART_SetConfig+0x2e6>
 800607c:	2310      	movs	r3, #16
 800607e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006082:	e072      	b.n	800616a <UART_SetConfig+0x2e6>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a35      	ldr	r2, [pc, #212]	@ (8006160 <UART_SetConfig+0x2dc>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d12a      	bne.n	80060e4 <UART_SetConfig+0x260>
 800608e:	4b30      	ldr	r3, [pc, #192]	@ (8006150 <UART_SetConfig+0x2cc>)
 8006090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006094:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006098:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800609c:	d01a      	beq.n	80060d4 <UART_SetConfig+0x250>
 800609e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060a2:	d81b      	bhi.n	80060dc <UART_SetConfig+0x258>
 80060a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060a8:	d00c      	beq.n	80060c4 <UART_SetConfig+0x240>
 80060aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060ae:	d815      	bhi.n	80060dc <UART_SetConfig+0x258>
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <UART_SetConfig+0x238>
 80060b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060b8:	d008      	beq.n	80060cc <UART_SetConfig+0x248>
 80060ba:	e00f      	b.n	80060dc <UART_SetConfig+0x258>
 80060bc:	2300      	movs	r3, #0
 80060be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060c2:	e052      	b.n	800616a <UART_SetConfig+0x2e6>
 80060c4:	2302      	movs	r3, #2
 80060c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ca:	e04e      	b.n	800616a <UART_SetConfig+0x2e6>
 80060cc:	2304      	movs	r3, #4
 80060ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060d2:	e04a      	b.n	800616a <UART_SetConfig+0x2e6>
 80060d4:	2308      	movs	r3, #8
 80060d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060da:	e046      	b.n	800616a <UART_SetConfig+0x2e6>
 80060dc:	2310      	movs	r3, #16
 80060de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060e2:	e042      	b.n	800616a <UART_SetConfig+0x2e6>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a17      	ldr	r2, [pc, #92]	@ (8006148 <UART_SetConfig+0x2c4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d13a      	bne.n	8006164 <UART_SetConfig+0x2e0>
 80060ee:	4b18      	ldr	r3, [pc, #96]	@ (8006150 <UART_SetConfig+0x2cc>)
 80060f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80060f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060fc:	d01a      	beq.n	8006134 <UART_SetConfig+0x2b0>
 80060fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006102:	d81b      	bhi.n	800613c <UART_SetConfig+0x2b8>
 8006104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006108:	d00c      	beq.n	8006124 <UART_SetConfig+0x2a0>
 800610a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800610e:	d815      	bhi.n	800613c <UART_SetConfig+0x2b8>
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <UART_SetConfig+0x298>
 8006114:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006118:	d008      	beq.n	800612c <UART_SetConfig+0x2a8>
 800611a:	e00f      	b.n	800613c <UART_SetConfig+0x2b8>
 800611c:	2300      	movs	r3, #0
 800611e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006122:	e022      	b.n	800616a <UART_SetConfig+0x2e6>
 8006124:	2302      	movs	r3, #2
 8006126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800612a:	e01e      	b.n	800616a <UART_SetConfig+0x2e6>
 800612c:	2304      	movs	r3, #4
 800612e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006132:	e01a      	b.n	800616a <UART_SetConfig+0x2e6>
 8006134:	2308      	movs	r3, #8
 8006136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800613a:	e016      	b.n	800616a <UART_SetConfig+0x2e6>
 800613c:	2310      	movs	r3, #16
 800613e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006142:	e012      	b.n	800616a <UART_SetConfig+0x2e6>
 8006144:	efff69f3 	.word	0xefff69f3
 8006148:	40008000 	.word	0x40008000
 800614c:	40013800 	.word	0x40013800
 8006150:	40021000 	.word	0x40021000
 8006154:	40004400 	.word	0x40004400
 8006158:	40004800 	.word	0x40004800
 800615c:	40004c00 	.word	0x40004c00
 8006160:	40005000 	.word	0x40005000
 8006164:	2310      	movs	r3, #16
 8006166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a9f      	ldr	r2, [pc, #636]	@ (80063ec <UART_SetConfig+0x568>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d17a      	bne.n	800626a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006174:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006178:	2b08      	cmp	r3, #8
 800617a:	d824      	bhi.n	80061c6 <UART_SetConfig+0x342>
 800617c:	a201      	add	r2, pc, #4	@ (adr r2, 8006184 <UART_SetConfig+0x300>)
 800617e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006182:	bf00      	nop
 8006184:	080061a9 	.word	0x080061a9
 8006188:	080061c7 	.word	0x080061c7
 800618c:	080061b1 	.word	0x080061b1
 8006190:	080061c7 	.word	0x080061c7
 8006194:	080061b7 	.word	0x080061b7
 8006198:	080061c7 	.word	0x080061c7
 800619c:	080061c7 	.word	0x080061c7
 80061a0:	080061c7 	.word	0x080061c7
 80061a4:	080061bf 	.word	0x080061bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061a8:	f7fe ff9a 	bl	80050e0 <HAL_RCC_GetPCLK1Freq>
 80061ac:	61f8      	str	r0, [r7, #28]
        break;
 80061ae:	e010      	b.n	80061d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061b0:	4b8f      	ldr	r3, [pc, #572]	@ (80063f0 <UART_SetConfig+0x56c>)
 80061b2:	61fb      	str	r3, [r7, #28]
        break;
 80061b4:	e00d      	b.n	80061d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061b6:	f7fe fefb 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 80061ba:	61f8      	str	r0, [r7, #28]
        break;
 80061bc:	e009      	b.n	80061d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061c2:	61fb      	str	r3, [r7, #28]
        break;
 80061c4:	e005      	b.n	80061d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80061d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 80fb 	beq.w	80063d0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	4613      	mov	r3, r2
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	4413      	add	r3, r2
 80061e4:	69fa      	ldr	r2, [r7, #28]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d305      	bcc.n	80061f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d903      	bls.n	80061fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80061fc:	e0e8      	b.n	80063d0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	2200      	movs	r2, #0
 8006202:	461c      	mov	r4, r3
 8006204:	4615      	mov	r5, r2
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	f04f 0300 	mov.w	r3, #0
 800620e:	022b      	lsls	r3, r5, #8
 8006210:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006214:	0222      	lsls	r2, r4, #8
 8006216:	68f9      	ldr	r1, [r7, #12]
 8006218:	6849      	ldr	r1, [r1, #4]
 800621a:	0849      	lsrs	r1, r1, #1
 800621c:	2000      	movs	r0, #0
 800621e:	4688      	mov	r8, r1
 8006220:	4681      	mov	r9, r0
 8006222:	eb12 0a08 	adds.w	sl, r2, r8
 8006226:	eb43 0b09 	adc.w	fp, r3, r9
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	603b      	str	r3, [r7, #0]
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006238:	4650      	mov	r0, sl
 800623a:	4659      	mov	r1, fp
 800623c:	f7fa fd04 	bl	8000c48 <__aeabi_uldivmod>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4613      	mov	r3, r2
 8006246:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800624e:	d308      	bcc.n	8006262 <UART_SetConfig+0x3de>
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006256:	d204      	bcs.n	8006262 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	60da      	str	r2, [r3, #12]
 8006260:	e0b6      	b.n	80063d0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006268:	e0b2      	b.n	80063d0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006272:	d15e      	bne.n	8006332 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006274:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006278:	2b08      	cmp	r3, #8
 800627a:	d828      	bhi.n	80062ce <UART_SetConfig+0x44a>
 800627c:	a201      	add	r2, pc, #4	@ (adr r2, 8006284 <UART_SetConfig+0x400>)
 800627e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006282:	bf00      	nop
 8006284:	080062a9 	.word	0x080062a9
 8006288:	080062b1 	.word	0x080062b1
 800628c:	080062b9 	.word	0x080062b9
 8006290:	080062cf 	.word	0x080062cf
 8006294:	080062bf 	.word	0x080062bf
 8006298:	080062cf 	.word	0x080062cf
 800629c:	080062cf 	.word	0x080062cf
 80062a0:	080062cf 	.word	0x080062cf
 80062a4:	080062c7 	.word	0x080062c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a8:	f7fe ff1a 	bl	80050e0 <HAL_RCC_GetPCLK1Freq>
 80062ac:	61f8      	str	r0, [r7, #28]
        break;
 80062ae:	e014      	b.n	80062da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062b0:	f7fe ff2c 	bl	800510c <HAL_RCC_GetPCLK2Freq>
 80062b4:	61f8      	str	r0, [r7, #28]
        break;
 80062b6:	e010      	b.n	80062da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b8:	4b4d      	ldr	r3, [pc, #308]	@ (80063f0 <UART_SetConfig+0x56c>)
 80062ba:	61fb      	str	r3, [r7, #28]
        break;
 80062bc:	e00d      	b.n	80062da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062be:	f7fe fe77 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 80062c2:	61f8      	str	r0, [r7, #28]
        break;
 80062c4:	e009      	b.n	80062da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062ca:	61fb      	str	r3, [r7, #28]
        break;
 80062cc:	e005      	b.n	80062da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80062d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d077      	beq.n	80063d0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	005a      	lsls	r2, r3, #1
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	085b      	lsrs	r3, r3, #1
 80062ea:	441a      	add	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2b0f      	cmp	r3, #15
 80062fa:	d916      	bls.n	800632a <UART_SetConfig+0x4a6>
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006302:	d212      	bcs.n	800632a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	b29b      	uxth	r3, r3
 8006308:	f023 030f 	bic.w	r3, r3, #15
 800630c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	085b      	lsrs	r3, r3, #1
 8006312:	b29b      	uxth	r3, r3
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	b29a      	uxth	r2, r3
 800631a:	8afb      	ldrh	r3, [r7, #22]
 800631c:	4313      	orrs	r3, r2
 800631e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	8afa      	ldrh	r2, [r7, #22]
 8006326:	60da      	str	r2, [r3, #12]
 8006328:	e052      	b.n	80063d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006330:	e04e      	b.n	80063d0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006332:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006336:	2b08      	cmp	r3, #8
 8006338:	d827      	bhi.n	800638a <UART_SetConfig+0x506>
 800633a:	a201      	add	r2, pc, #4	@ (adr r2, 8006340 <UART_SetConfig+0x4bc>)
 800633c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006340:	08006365 	.word	0x08006365
 8006344:	0800636d 	.word	0x0800636d
 8006348:	08006375 	.word	0x08006375
 800634c:	0800638b 	.word	0x0800638b
 8006350:	0800637b 	.word	0x0800637b
 8006354:	0800638b 	.word	0x0800638b
 8006358:	0800638b 	.word	0x0800638b
 800635c:	0800638b 	.word	0x0800638b
 8006360:	08006383 	.word	0x08006383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006364:	f7fe febc 	bl	80050e0 <HAL_RCC_GetPCLK1Freq>
 8006368:	61f8      	str	r0, [r7, #28]
        break;
 800636a:	e014      	b.n	8006396 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800636c:	f7fe fece 	bl	800510c <HAL_RCC_GetPCLK2Freq>
 8006370:	61f8      	str	r0, [r7, #28]
        break;
 8006372:	e010      	b.n	8006396 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006374:	4b1e      	ldr	r3, [pc, #120]	@ (80063f0 <UART_SetConfig+0x56c>)
 8006376:	61fb      	str	r3, [r7, #28]
        break;
 8006378:	e00d      	b.n	8006396 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800637a:	f7fe fe19 	bl	8004fb0 <HAL_RCC_GetSysClockFreq>
 800637e:	61f8      	str	r0, [r7, #28]
        break;
 8006380:	e009      	b.n	8006396 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006386:	61fb      	str	r3, [r7, #28]
        break;
 8006388:	e005      	b.n	8006396 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006394:	bf00      	nop
    }

    if (pclk != 0U)
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d019      	beq.n	80063d0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	085a      	lsrs	r2, r3, #1
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	441a      	add	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	2b0f      	cmp	r3, #15
 80063b4:	d909      	bls.n	80063ca <UART_SetConfig+0x546>
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063bc:	d205      	bcs.n	80063ca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	60da      	str	r2, [r3, #12]
 80063c8:	e002      	b.n	80063d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80063dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3728      	adds	r7, #40	@ 0x28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063ea:	bf00      	nop
 80063ec:	40008000 	.word	0x40008000
 80063f0:	00f42400 	.word	0x00f42400

080063f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006466:	f003 0304 	and.w	r3, r3, #4
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01a      	beq.n	800650a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064f2:	d10a      	bne.n	800650a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	605a      	str	r2, [r3, #4]
  }
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b098      	sub	sp, #96	@ 0x60
 800653c:	af02      	add	r7, sp, #8
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006548:	f7fc fa6a 	bl	8002a20 <HAL_GetTick>
 800654c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b08      	cmp	r3, #8
 800655a:	d12e      	bne.n	80065ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800655c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006564:	2200      	movs	r2, #0
 8006566:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f88c 	bl	8006688 <UART_WaitOnFlagUntilTimeout>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d021      	beq.n	80065ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006586:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800658a:	653b      	str	r3, [r7, #80]	@ 0x50
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006594:	647b      	str	r3, [r7, #68]	@ 0x44
 8006596:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800659a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e6      	bne.n	8006576 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e062      	b.n	8006680 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	d149      	bne.n	800665c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065d0:	2200      	movs	r2, #0
 80065d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f856 	bl	8006688 <UART_WaitOnFlagUntilTimeout>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d03c      	beq.n	800665c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ea:	e853 3f00 	ldrex	r3, [r3]
 80065ee:	623b      	str	r3, [r7, #32]
   return(result);
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	461a      	mov	r2, r3
 80065fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006600:	633b      	str	r3, [r7, #48]	@ 0x30
 8006602:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006608:	e841 2300 	strex	r3, r2, [r1]
 800660c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800660e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e6      	bne.n	80065e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3308      	adds	r3, #8
 800661a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	e853 3f00 	ldrex	r3, [r3]
 8006622:	60fb      	str	r3, [r7, #12]
   return(result);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0301 	bic.w	r3, r3, #1
 800662a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3308      	adds	r3, #8
 8006632:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006634:	61fa      	str	r2, [r7, #28]
 8006636:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	69b9      	ldr	r1, [r7, #24]
 800663a:	69fa      	ldr	r2, [r7, #28]
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	617b      	str	r3, [r7, #20]
   return(result);
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e5      	bne.n	8006614 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2220      	movs	r2, #32
 800664c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e011      	b.n	8006680 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2220      	movs	r2, #32
 8006660:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2220      	movs	r2, #32
 8006666:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3758      	adds	r7, #88	@ 0x58
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	4613      	mov	r3, r2
 8006696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006698:	e04f      	b.n	800673a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a0:	d04b      	beq.n	800673a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a2:	f7fc f9bd 	bl	8002a20 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d302      	bcc.n	80066b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e04e      	b.n	800675a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0304 	and.w	r3, r3, #4
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d037      	beq.n	800673a <UART_WaitOnFlagUntilTimeout+0xb2>
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b80      	cmp	r3, #128	@ 0x80
 80066ce:	d034      	beq.n	800673a <UART_WaitOnFlagUntilTimeout+0xb2>
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b40      	cmp	r3, #64	@ 0x40
 80066d4:	d031      	beq.n	800673a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	f003 0308 	and.w	r3, r3, #8
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d110      	bne.n	8006706 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2208      	movs	r2, #8
 80066ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 f838 	bl	8006762 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2208      	movs	r2, #8
 80066f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e029      	b.n	800675a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006710:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006714:	d111      	bne.n	800673a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800671e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 f81e 	bl	8006762 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2220      	movs	r2, #32
 800672a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e00f      	b.n	800675a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69da      	ldr	r2, [r3, #28]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4013      	ands	r3, r2
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	429a      	cmp	r2, r3
 8006748:	bf0c      	ite	eq
 800674a:	2301      	moveq	r3, #1
 800674c:	2300      	movne	r3, #0
 800674e:	b2db      	uxtb	r3, r3
 8006750:	461a      	mov	r2, r3
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	429a      	cmp	r2, r3
 8006756:	d0a0      	beq.n	800669a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006762:	b480      	push	{r7}
 8006764:	b095      	sub	sp, #84	@ 0x54
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006772:	e853 3f00 	ldrex	r3, [r3]
 8006776:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800677e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006788:	643b      	str	r3, [r7, #64]	@ 0x40
 800678a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800678e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006790:	e841 2300 	strex	r3, r2, [r1]
 8006794:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1e6      	bne.n	800676a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3308      	adds	r3, #8
 80067a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	f023 0301 	bic.w	r3, r3, #1
 80067b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3308      	adds	r3, #8
 80067ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e5      	bne.n	800679c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d118      	bne.n	800680a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	f023 0310 	bic.w	r3, r3, #16
 80067ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067f6:	61bb      	str	r3, [r7, #24]
 80067f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	6979      	ldr	r1, [r7, #20]
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	613b      	str	r3, [r7, #16]
   return(result);
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e6      	bne.n	80067d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2220      	movs	r2, #32
 800680e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800681e:	bf00      	nop
 8006820:	3754      	adds	r7, #84	@ 0x54
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800682a:	b084      	sub	sp, #16
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	f107 001c 	add.w	r0, r7, #28
 8006838:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fa69 	bl	8006d20 <USB_CoreReset>
 800684e:	4603      	mov	r3, r0
 8006850:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006852:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	639a      	str	r2, [r3, #56]	@ 0x38
 8006866:	e005      	b.n	8006874 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006874:	7bfb      	ldrb	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006880:	b004      	add	sp, #16
 8006882:	4770      	bx	lr

08006884 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f023 0201 	bic.w	r2, r3, #1
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	460b      	mov	r3, r1
 80068b0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068c2:	78fb      	ldrb	r3, [r7, #3]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d115      	bne.n	80068f4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80068d4:	200a      	movs	r0, #10
 80068d6:	f7fc f8af 	bl	8002a38 <HAL_Delay>
      ms += 10U;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	330a      	adds	r3, #10
 80068de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fa0f 	bl	8006d04 <USB_GetMode>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d01e      	beq.n	800692a <USB_SetCurrentMode+0x84>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2bc7      	cmp	r3, #199	@ 0xc7
 80068f0:	d9f0      	bls.n	80068d4 <USB_SetCurrentMode+0x2e>
 80068f2:	e01a      	b.n	800692a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d115      	bne.n	8006926 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006906:	200a      	movs	r0, #10
 8006908:	f7fc f896 	bl	8002a38 <HAL_Delay>
      ms += 10U;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	330a      	adds	r3, #10
 8006910:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f9f6 	bl	8006d04 <USB_GetMode>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <USB_SetCurrentMode+0x84>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2bc7      	cmp	r3, #199	@ 0xc7
 8006922:	d9f0      	bls.n	8006906 <USB_SetCurrentMode+0x60>
 8006924:	e001      	b.n	800692a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e005      	b.n	8006936 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2bc8      	cmp	r3, #200	@ 0xc8
 800692e:	d101      	bne.n	8006934 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e000      	b.n	8006936 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006940:	b084      	sub	sp, #16
 8006942:	b580      	push	{r7, lr}
 8006944:	b086      	sub	sp, #24
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800694e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800695a:	2300      	movs	r3, #0
 800695c:	613b      	str	r3, [r7, #16]
 800695e:	e009      	b.n	8006974 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	3340      	adds	r3, #64	@ 0x40
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	2200      	movs	r2, #0
 800696c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	3301      	adds	r3, #1
 8006972:	613b      	str	r3, [r7, #16]
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	2b0e      	cmp	r3, #14
 8006978:	d9f2      	bls.n	8006960 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800697a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800697e:	2b00      	cmp	r3, #0
 8006980:	d11c      	bne.n	80069bc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006990:	f043 0302 	orr.w	r3, r3, #2
 8006994:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	e005      	b.n	80069c8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80069ce:	461a      	mov	r2, r3
 80069d0:	2300      	movs	r3, #0
 80069d2:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069d4:	2103      	movs	r1, #3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f95a 	bl	8006c90 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069dc:	2110      	movs	r1, #16
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f8f6 	bl	8006bd0 <USB_FlushTxFifo>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f920 	bl	8006c34 <USB_FlushRxFifo>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a04:	461a      	mov	r2, r3
 8006a06:	2300      	movs	r3, #0
 8006a08:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a10:	461a      	mov	r2, r3
 8006a12:	2300      	movs	r3, #0
 8006a14:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a22:	2300      	movs	r3, #0
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	e043      	b.n	8006ab0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a3e:	d118      	bne.n	8006a72 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10a      	bne.n	8006a5c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a52:	461a      	mov	r2, r3
 8006a54:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006a58:	6013      	str	r3, [r2, #0]
 8006a5a:	e013      	b.n	8006a84 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a68:	461a      	mov	r2, r3
 8006a6a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	e008      	b.n	8006a84 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a7e:	461a      	mov	r2, r3
 8006a80:	2300      	movs	r3, #0
 8006a82:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a90:	461a      	mov	r2, r3
 8006a92:	2300      	movs	r3, #0
 8006a94:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006aa8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	3301      	adds	r3, #1
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d3b5      	bcc.n	8006a28 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006abc:	2300      	movs	r3, #0
 8006abe:	613b      	str	r3, [r7, #16]
 8006ac0:	e043      	b.n	8006b4a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ad8:	d118      	bne.n	8006b0c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10a      	bne.n	8006af6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aec:	461a      	mov	r2, r3
 8006aee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	e013      	b.n	8006b1e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b02:	461a      	mov	r2, r3
 8006b04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	e008      	b.n	8006b1e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b18:	461a      	mov	r2, r3
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006b42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	3301      	adds	r3, #1
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006b4e:	461a      	mov	r2, r3
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d3b5      	bcc.n	8006ac2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b68:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006b76:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	f043 0210 	orr.w	r2, r3, #16
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	699a      	ldr	r2, [r3, #24]
 8006b88:	4b10      	ldr	r3, [pc, #64]	@ (8006bcc <USB_DevInit+0x28c>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b90:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d005      	beq.n	8006ba4 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	f043 0208 	orr.w	r2, r3, #8
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ba4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d107      	bne.n	8006bbc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bb4:	f043 0304 	orr.w	r3, r3, #4
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bc8:	b004      	add	sp, #16
 8006bca:	4770      	bx	lr
 8006bcc:	803c3800 	.word	0x803c3800

08006bd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3301      	adds	r3, #1
 8006be2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bea:	d901      	bls.n	8006bf0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e01b      	b.n	8006c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	daf2      	bge.n	8006bde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	019b      	lsls	r3, r3, #6
 8006c00:	f043 0220 	orr.w	r2, r3, #32
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c14:	d901      	bls.n	8006c1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e006      	b.n	8006c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	f003 0320 	and.w	r3, r3, #32
 8006c22:	2b20      	cmp	r3, #32
 8006c24:	d0f0      	beq.n	8006c08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	3301      	adds	r3, #1
 8006c44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c4c:	d901      	bls.n	8006c52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e018      	b.n	8006c84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	daf2      	bge.n	8006c40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2210      	movs	r2, #16
 8006c62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	3301      	adds	r3, #1
 8006c68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c70:	d901      	bls.n	8006c76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e006      	b.n	8006c84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	f003 0310 	and.w	r3, r3, #16
 8006c7e:	2b10      	cmp	r3, #16
 8006c80:	d0f0      	beq.n	8006c64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	78fb      	ldrb	r3, [r7, #3]
 8006caa:	68f9      	ldr	r1, [r7, #12]
 8006cac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b085      	sub	sp, #20
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006cdc:	f023 0303 	bic.w	r3, r3, #3
 8006ce0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cf0:	f043 0302 	orr.w	r3, r3, #2
 8006cf4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	f003 0301 	and.w	r3, r3, #1
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d38:	d901      	bls.n	8006d3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e01b      	b.n	8006d76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	daf2      	bge.n	8006d2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f043 0201 	orr.w	r2, r3, #1
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d62:	d901      	bls.n	8006d68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e006      	b.n	8006d76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d0f0      	beq.n	8006d56 <USB_CoreReset+0x36>

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <__cvt>:
 8006d82:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d86:	ec57 6b10 	vmov	r6, r7, d0
 8006d8a:	2f00      	cmp	r7, #0
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	4619      	mov	r1, r3
 8006d90:	463b      	mov	r3, r7
 8006d92:	bfbb      	ittet	lt
 8006d94:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006d98:	461f      	movlt	r7, r3
 8006d9a:	2300      	movge	r3, #0
 8006d9c:	232d      	movlt	r3, #45	@ 0x2d
 8006d9e:	700b      	strb	r3, [r1, #0]
 8006da0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006da2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006da6:	4691      	mov	r9, r2
 8006da8:	f023 0820 	bic.w	r8, r3, #32
 8006dac:	bfbc      	itt	lt
 8006dae:	4632      	movlt	r2, r6
 8006db0:	4616      	movlt	r6, r2
 8006db2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006db6:	d005      	beq.n	8006dc4 <__cvt+0x42>
 8006db8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006dbc:	d100      	bne.n	8006dc0 <__cvt+0x3e>
 8006dbe:	3401      	adds	r4, #1
 8006dc0:	2102      	movs	r1, #2
 8006dc2:	e000      	b.n	8006dc6 <__cvt+0x44>
 8006dc4:	2103      	movs	r1, #3
 8006dc6:	ab03      	add	r3, sp, #12
 8006dc8:	9301      	str	r3, [sp, #4]
 8006dca:	ab02      	add	r3, sp, #8
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	ec47 6b10 	vmov	d0, r6, r7
 8006dd2:	4653      	mov	r3, sl
 8006dd4:	4622      	mov	r2, r4
 8006dd6:	f000 ff3f 	bl	8007c58 <_dtoa_r>
 8006dda:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006dde:	4605      	mov	r5, r0
 8006de0:	d119      	bne.n	8006e16 <__cvt+0x94>
 8006de2:	f019 0f01 	tst.w	r9, #1
 8006de6:	d00e      	beq.n	8006e06 <__cvt+0x84>
 8006de8:	eb00 0904 	add.w	r9, r0, r4
 8006dec:	2200      	movs	r2, #0
 8006dee:	2300      	movs	r3, #0
 8006df0:	4630      	mov	r0, r6
 8006df2:	4639      	mov	r1, r7
 8006df4:	f7f9 fe68 	bl	8000ac8 <__aeabi_dcmpeq>
 8006df8:	b108      	cbz	r0, 8006dfe <__cvt+0x7c>
 8006dfa:	f8cd 900c 	str.w	r9, [sp, #12]
 8006dfe:	2230      	movs	r2, #48	@ 0x30
 8006e00:	9b03      	ldr	r3, [sp, #12]
 8006e02:	454b      	cmp	r3, r9
 8006e04:	d31e      	bcc.n	8006e44 <__cvt+0xc2>
 8006e06:	9b03      	ldr	r3, [sp, #12]
 8006e08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e0a:	1b5b      	subs	r3, r3, r5
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	b004      	add	sp, #16
 8006e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e16:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e1a:	eb00 0904 	add.w	r9, r0, r4
 8006e1e:	d1e5      	bne.n	8006dec <__cvt+0x6a>
 8006e20:	7803      	ldrb	r3, [r0, #0]
 8006e22:	2b30      	cmp	r3, #48	@ 0x30
 8006e24:	d10a      	bne.n	8006e3c <__cvt+0xba>
 8006e26:	2200      	movs	r2, #0
 8006e28:	2300      	movs	r3, #0
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	4639      	mov	r1, r7
 8006e2e:	f7f9 fe4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e32:	b918      	cbnz	r0, 8006e3c <__cvt+0xba>
 8006e34:	f1c4 0401 	rsb	r4, r4, #1
 8006e38:	f8ca 4000 	str.w	r4, [sl]
 8006e3c:	f8da 3000 	ldr.w	r3, [sl]
 8006e40:	4499      	add	r9, r3
 8006e42:	e7d3      	b.n	8006dec <__cvt+0x6a>
 8006e44:	1c59      	adds	r1, r3, #1
 8006e46:	9103      	str	r1, [sp, #12]
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	e7d9      	b.n	8006e00 <__cvt+0x7e>

08006e4c <__exponent>:
 8006e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e4e:	2900      	cmp	r1, #0
 8006e50:	bfba      	itte	lt
 8006e52:	4249      	neglt	r1, r1
 8006e54:	232d      	movlt	r3, #45	@ 0x2d
 8006e56:	232b      	movge	r3, #43	@ 0x2b
 8006e58:	2909      	cmp	r1, #9
 8006e5a:	7002      	strb	r2, [r0, #0]
 8006e5c:	7043      	strb	r3, [r0, #1]
 8006e5e:	dd29      	ble.n	8006eb4 <__exponent+0x68>
 8006e60:	f10d 0307 	add.w	r3, sp, #7
 8006e64:	461d      	mov	r5, r3
 8006e66:	270a      	movs	r7, #10
 8006e68:	461a      	mov	r2, r3
 8006e6a:	fbb1 f6f7 	udiv	r6, r1, r7
 8006e6e:	fb07 1416 	mls	r4, r7, r6, r1
 8006e72:	3430      	adds	r4, #48	@ 0x30
 8006e74:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006e78:	460c      	mov	r4, r1
 8006e7a:	2c63      	cmp	r4, #99	@ 0x63
 8006e7c:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e80:	4631      	mov	r1, r6
 8006e82:	dcf1      	bgt.n	8006e68 <__exponent+0x1c>
 8006e84:	3130      	adds	r1, #48	@ 0x30
 8006e86:	1e94      	subs	r4, r2, #2
 8006e88:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e8c:	1c41      	adds	r1, r0, #1
 8006e8e:	4623      	mov	r3, r4
 8006e90:	42ab      	cmp	r3, r5
 8006e92:	d30a      	bcc.n	8006eaa <__exponent+0x5e>
 8006e94:	f10d 0309 	add.w	r3, sp, #9
 8006e98:	1a9b      	subs	r3, r3, r2
 8006e9a:	42ac      	cmp	r4, r5
 8006e9c:	bf88      	it	hi
 8006e9e:	2300      	movhi	r3, #0
 8006ea0:	3302      	adds	r3, #2
 8006ea2:	4403      	add	r3, r0
 8006ea4:	1a18      	subs	r0, r3, r0
 8006ea6:	b003      	add	sp, #12
 8006ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eaa:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006eae:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006eb2:	e7ed      	b.n	8006e90 <__exponent+0x44>
 8006eb4:	2330      	movs	r3, #48	@ 0x30
 8006eb6:	3130      	adds	r1, #48	@ 0x30
 8006eb8:	7083      	strb	r3, [r0, #2]
 8006eba:	70c1      	strb	r1, [r0, #3]
 8006ebc:	1d03      	adds	r3, r0, #4
 8006ebe:	e7f1      	b.n	8006ea4 <__exponent+0x58>

08006ec0 <_printf_float>:
 8006ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	b08d      	sub	sp, #52	@ 0x34
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006ecc:	4616      	mov	r6, r2
 8006ece:	461f      	mov	r7, r3
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	f000 fdbf 	bl	8007a54 <_localeconv_r>
 8006ed6:	6803      	ldr	r3, [r0, #0]
 8006ed8:	9304      	str	r3, [sp, #16]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7f9 f9c8 	bl	8000270 <strlen>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ee8:	9005      	str	r0, [sp, #20]
 8006eea:	3307      	adds	r3, #7
 8006eec:	f023 0307 	bic.w	r3, r3, #7
 8006ef0:	f103 0208 	add.w	r2, r3, #8
 8006ef4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ef8:	f8d4 b000 	ldr.w	fp, [r4]
 8006efc:	f8c8 2000 	str.w	r2, [r8]
 8006f00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f04:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006f08:	9307      	str	r3, [sp, #28]
 8006f0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f0e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006f12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f16:	4b9c      	ldr	r3, [pc, #624]	@ (8007188 <_printf_float+0x2c8>)
 8006f18:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1c:	f7f9 fe06 	bl	8000b2c <__aeabi_dcmpun>
 8006f20:	bb70      	cbnz	r0, 8006f80 <_printf_float+0xc0>
 8006f22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f26:	4b98      	ldr	r3, [pc, #608]	@ (8007188 <_printf_float+0x2c8>)
 8006f28:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2c:	f7f9 fde0 	bl	8000af0 <__aeabi_dcmple>
 8006f30:	bb30      	cbnz	r0, 8006f80 <_printf_float+0xc0>
 8006f32:	2200      	movs	r2, #0
 8006f34:	2300      	movs	r3, #0
 8006f36:	4640      	mov	r0, r8
 8006f38:	4649      	mov	r1, r9
 8006f3a:	f7f9 fdcf 	bl	8000adc <__aeabi_dcmplt>
 8006f3e:	b110      	cbz	r0, 8006f46 <_printf_float+0x86>
 8006f40:	232d      	movs	r3, #45	@ 0x2d
 8006f42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f46:	4a91      	ldr	r2, [pc, #580]	@ (800718c <_printf_float+0x2cc>)
 8006f48:	4b91      	ldr	r3, [pc, #580]	@ (8007190 <_printf_float+0x2d0>)
 8006f4a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006f4e:	bf94      	ite	ls
 8006f50:	4690      	movls	r8, r2
 8006f52:	4698      	movhi	r8, r3
 8006f54:	2303      	movs	r3, #3
 8006f56:	6123      	str	r3, [r4, #16]
 8006f58:	f02b 0304 	bic.w	r3, fp, #4
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	f04f 0900 	mov.w	r9, #0
 8006f62:	9700      	str	r7, [sp, #0]
 8006f64:	4633      	mov	r3, r6
 8006f66:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006f68:	4621      	mov	r1, r4
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f000 f9d2 	bl	8007314 <_printf_common>
 8006f70:	3001      	adds	r0, #1
 8006f72:	f040 808d 	bne.w	8007090 <_printf_float+0x1d0>
 8006f76:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7a:	b00d      	add	sp, #52	@ 0x34
 8006f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f80:	4642      	mov	r2, r8
 8006f82:	464b      	mov	r3, r9
 8006f84:	4640      	mov	r0, r8
 8006f86:	4649      	mov	r1, r9
 8006f88:	f7f9 fdd0 	bl	8000b2c <__aeabi_dcmpun>
 8006f8c:	b140      	cbz	r0, 8006fa0 <_printf_float+0xe0>
 8006f8e:	464b      	mov	r3, r9
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	bfbc      	itt	lt
 8006f94:	232d      	movlt	r3, #45	@ 0x2d
 8006f96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8007194 <_printf_float+0x2d4>)
 8006f9c:	4b7e      	ldr	r3, [pc, #504]	@ (8007198 <_printf_float+0x2d8>)
 8006f9e:	e7d4      	b.n	8006f4a <_printf_float+0x8a>
 8006fa0:	6863      	ldr	r3, [r4, #4]
 8006fa2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006fa6:	9206      	str	r2, [sp, #24]
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	d13b      	bne.n	8007024 <_printf_float+0x164>
 8006fac:	2306      	movs	r3, #6
 8006fae:	6063      	str	r3, [r4, #4]
 8006fb0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	6022      	str	r2, [r4, #0]
 8006fb8:	9303      	str	r3, [sp, #12]
 8006fba:	ab0a      	add	r3, sp, #40	@ 0x28
 8006fbc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006fc0:	ab09      	add	r3, sp, #36	@ 0x24
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	6861      	ldr	r1, [r4, #4]
 8006fc6:	ec49 8b10 	vmov	d0, r8, r9
 8006fca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f7ff fed7 	bl	8006d82 <__cvt>
 8006fd4:	9b06      	ldr	r3, [sp, #24]
 8006fd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006fd8:	2b47      	cmp	r3, #71	@ 0x47
 8006fda:	4680      	mov	r8, r0
 8006fdc:	d129      	bne.n	8007032 <_printf_float+0x172>
 8006fde:	1cc8      	adds	r0, r1, #3
 8006fe0:	db02      	blt.n	8006fe8 <_printf_float+0x128>
 8006fe2:	6863      	ldr	r3, [r4, #4]
 8006fe4:	4299      	cmp	r1, r3
 8006fe6:	dd41      	ble.n	800706c <_printf_float+0x1ac>
 8006fe8:	f1aa 0a02 	sub.w	sl, sl, #2
 8006fec:	fa5f fa8a 	uxtb.w	sl, sl
 8006ff0:	3901      	subs	r1, #1
 8006ff2:	4652      	mov	r2, sl
 8006ff4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006ff8:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ffa:	f7ff ff27 	bl	8006e4c <__exponent>
 8006ffe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007000:	1813      	adds	r3, r2, r0
 8007002:	2a01      	cmp	r2, #1
 8007004:	4681      	mov	r9, r0
 8007006:	6123      	str	r3, [r4, #16]
 8007008:	dc02      	bgt.n	8007010 <_printf_float+0x150>
 800700a:	6822      	ldr	r2, [r4, #0]
 800700c:	07d2      	lsls	r2, r2, #31
 800700e:	d501      	bpl.n	8007014 <_printf_float+0x154>
 8007010:	3301      	adds	r3, #1
 8007012:	6123      	str	r3, [r4, #16]
 8007014:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007018:	2b00      	cmp	r3, #0
 800701a:	d0a2      	beq.n	8006f62 <_printf_float+0xa2>
 800701c:	232d      	movs	r3, #45	@ 0x2d
 800701e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007022:	e79e      	b.n	8006f62 <_printf_float+0xa2>
 8007024:	9a06      	ldr	r2, [sp, #24]
 8007026:	2a47      	cmp	r2, #71	@ 0x47
 8007028:	d1c2      	bne.n	8006fb0 <_printf_float+0xf0>
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1c0      	bne.n	8006fb0 <_printf_float+0xf0>
 800702e:	2301      	movs	r3, #1
 8007030:	e7bd      	b.n	8006fae <_printf_float+0xee>
 8007032:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007036:	d9db      	bls.n	8006ff0 <_printf_float+0x130>
 8007038:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800703c:	d118      	bne.n	8007070 <_printf_float+0x1b0>
 800703e:	2900      	cmp	r1, #0
 8007040:	6863      	ldr	r3, [r4, #4]
 8007042:	dd0b      	ble.n	800705c <_printf_float+0x19c>
 8007044:	6121      	str	r1, [r4, #16]
 8007046:	b913      	cbnz	r3, 800704e <_printf_float+0x18e>
 8007048:	6822      	ldr	r2, [r4, #0]
 800704a:	07d0      	lsls	r0, r2, #31
 800704c:	d502      	bpl.n	8007054 <_printf_float+0x194>
 800704e:	3301      	adds	r3, #1
 8007050:	440b      	add	r3, r1
 8007052:	6123      	str	r3, [r4, #16]
 8007054:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007056:	f04f 0900 	mov.w	r9, #0
 800705a:	e7db      	b.n	8007014 <_printf_float+0x154>
 800705c:	b913      	cbnz	r3, 8007064 <_printf_float+0x1a4>
 800705e:	6822      	ldr	r2, [r4, #0]
 8007060:	07d2      	lsls	r2, r2, #31
 8007062:	d501      	bpl.n	8007068 <_printf_float+0x1a8>
 8007064:	3302      	adds	r3, #2
 8007066:	e7f4      	b.n	8007052 <_printf_float+0x192>
 8007068:	2301      	movs	r3, #1
 800706a:	e7f2      	b.n	8007052 <_printf_float+0x192>
 800706c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007072:	4299      	cmp	r1, r3
 8007074:	db05      	blt.n	8007082 <_printf_float+0x1c2>
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	6121      	str	r1, [r4, #16]
 800707a:	07d8      	lsls	r0, r3, #31
 800707c:	d5ea      	bpl.n	8007054 <_printf_float+0x194>
 800707e:	1c4b      	adds	r3, r1, #1
 8007080:	e7e7      	b.n	8007052 <_printf_float+0x192>
 8007082:	2900      	cmp	r1, #0
 8007084:	bfd4      	ite	le
 8007086:	f1c1 0202 	rsble	r2, r1, #2
 800708a:	2201      	movgt	r2, #1
 800708c:	4413      	add	r3, r2
 800708e:	e7e0      	b.n	8007052 <_printf_float+0x192>
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	055a      	lsls	r2, r3, #21
 8007094:	d407      	bmi.n	80070a6 <_printf_float+0x1e6>
 8007096:	6923      	ldr	r3, [r4, #16]
 8007098:	4642      	mov	r2, r8
 800709a:	4631      	mov	r1, r6
 800709c:	4628      	mov	r0, r5
 800709e:	47b8      	blx	r7
 80070a0:	3001      	adds	r0, #1
 80070a2:	d12b      	bne.n	80070fc <_printf_float+0x23c>
 80070a4:	e767      	b.n	8006f76 <_printf_float+0xb6>
 80070a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80070aa:	f240 80dd 	bls.w	8007268 <_printf_float+0x3a8>
 80070ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80070b2:	2200      	movs	r2, #0
 80070b4:	2300      	movs	r3, #0
 80070b6:	f7f9 fd07 	bl	8000ac8 <__aeabi_dcmpeq>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d033      	beq.n	8007126 <_printf_float+0x266>
 80070be:	4a37      	ldr	r2, [pc, #220]	@ (800719c <_printf_float+0x2dc>)
 80070c0:	2301      	movs	r3, #1
 80070c2:	4631      	mov	r1, r6
 80070c4:	4628      	mov	r0, r5
 80070c6:	47b8      	blx	r7
 80070c8:	3001      	adds	r0, #1
 80070ca:	f43f af54 	beq.w	8006f76 <_printf_float+0xb6>
 80070ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80070d2:	4543      	cmp	r3, r8
 80070d4:	db02      	blt.n	80070dc <_printf_float+0x21c>
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	07d8      	lsls	r0, r3, #31
 80070da:	d50f      	bpl.n	80070fc <_printf_float+0x23c>
 80070dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070e0:	4631      	mov	r1, r6
 80070e2:	4628      	mov	r0, r5
 80070e4:	47b8      	blx	r7
 80070e6:	3001      	adds	r0, #1
 80070e8:	f43f af45 	beq.w	8006f76 <_printf_float+0xb6>
 80070ec:	f04f 0900 	mov.w	r9, #0
 80070f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80070f4:	f104 0a1a 	add.w	sl, r4, #26
 80070f8:	45c8      	cmp	r8, r9
 80070fa:	dc09      	bgt.n	8007110 <_printf_float+0x250>
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	079b      	lsls	r3, r3, #30
 8007100:	f100 8103 	bmi.w	800730a <_printf_float+0x44a>
 8007104:	68e0      	ldr	r0, [r4, #12]
 8007106:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007108:	4298      	cmp	r0, r3
 800710a:	bfb8      	it	lt
 800710c:	4618      	movlt	r0, r3
 800710e:	e734      	b.n	8006f7a <_printf_float+0xba>
 8007110:	2301      	movs	r3, #1
 8007112:	4652      	mov	r2, sl
 8007114:	4631      	mov	r1, r6
 8007116:	4628      	mov	r0, r5
 8007118:	47b8      	blx	r7
 800711a:	3001      	adds	r0, #1
 800711c:	f43f af2b 	beq.w	8006f76 <_printf_float+0xb6>
 8007120:	f109 0901 	add.w	r9, r9, #1
 8007124:	e7e8      	b.n	80070f8 <_printf_float+0x238>
 8007126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007128:	2b00      	cmp	r3, #0
 800712a:	dc39      	bgt.n	80071a0 <_printf_float+0x2e0>
 800712c:	4a1b      	ldr	r2, [pc, #108]	@ (800719c <_printf_float+0x2dc>)
 800712e:	2301      	movs	r3, #1
 8007130:	4631      	mov	r1, r6
 8007132:	4628      	mov	r0, r5
 8007134:	47b8      	blx	r7
 8007136:	3001      	adds	r0, #1
 8007138:	f43f af1d 	beq.w	8006f76 <_printf_float+0xb6>
 800713c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007140:	ea59 0303 	orrs.w	r3, r9, r3
 8007144:	d102      	bne.n	800714c <_printf_float+0x28c>
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	07d9      	lsls	r1, r3, #31
 800714a:	d5d7      	bpl.n	80070fc <_printf_float+0x23c>
 800714c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007150:	4631      	mov	r1, r6
 8007152:	4628      	mov	r0, r5
 8007154:	47b8      	blx	r7
 8007156:	3001      	adds	r0, #1
 8007158:	f43f af0d 	beq.w	8006f76 <_printf_float+0xb6>
 800715c:	f04f 0a00 	mov.w	sl, #0
 8007160:	f104 0b1a 	add.w	fp, r4, #26
 8007164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007166:	425b      	negs	r3, r3
 8007168:	4553      	cmp	r3, sl
 800716a:	dc01      	bgt.n	8007170 <_printf_float+0x2b0>
 800716c:	464b      	mov	r3, r9
 800716e:	e793      	b.n	8007098 <_printf_float+0x1d8>
 8007170:	2301      	movs	r3, #1
 8007172:	465a      	mov	r2, fp
 8007174:	4631      	mov	r1, r6
 8007176:	4628      	mov	r0, r5
 8007178:	47b8      	blx	r7
 800717a:	3001      	adds	r0, #1
 800717c:	f43f aefb 	beq.w	8006f76 <_printf_float+0xb6>
 8007180:	f10a 0a01 	add.w	sl, sl, #1
 8007184:	e7ee      	b.n	8007164 <_printf_float+0x2a4>
 8007186:	bf00      	nop
 8007188:	7fefffff 	.word	0x7fefffff
 800718c:	08009e40 	.word	0x08009e40
 8007190:	08009e44 	.word	0x08009e44
 8007194:	08009e48 	.word	0x08009e48
 8007198:	08009e4c 	.word	0x08009e4c
 800719c:	08009e50 	.word	0x08009e50
 80071a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80071a6:	4553      	cmp	r3, sl
 80071a8:	bfa8      	it	ge
 80071aa:	4653      	movge	r3, sl
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	4699      	mov	r9, r3
 80071b0:	dc36      	bgt.n	8007220 <_printf_float+0x360>
 80071b2:	f04f 0b00 	mov.w	fp, #0
 80071b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071ba:	f104 021a 	add.w	r2, r4, #26
 80071be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071c0:	9306      	str	r3, [sp, #24]
 80071c2:	eba3 0309 	sub.w	r3, r3, r9
 80071c6:	455b      	cmp	r3, fp
 80071c8:	dc31      	bgt.n	800722e <_printf_float+0x36e>
 80071ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071cc:	459a      	cmp	sl, r3
 80071ce:	dc3a      	bgt.n	8007246 <_printf_float+0x386>
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	07da      	lsls	r2, r3, #31
 80071d4:	d437      	bmi.n	8007246 <_printf_float+0x386>
 80071d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d8:	ebaa 0903 	sub.w	r9, sl, r3
 80071dc:	9b06      	ldr	r3, [sp, #24]
 80071de:	ebaa 0303 	sub.w	r3, sl, r3
 80071e2:	4599      	cmp	r9, r3
 80071e4:	bfa8      	it	ge
 80071e6:	4699      	movge	r9, r3
 80071e8:	f1b9 0f00 	cmp.w	r9, #0
 80071ec:	dc33      	bgt.n	8007256 <_printf_float+0x396>
 80071ee:	f04f 0800 	mov.w	r8, #0
 80071f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071f6:	f104 0b1a 	add.w	fp, r4, #26
 80071fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071fc:	ebaa 0303 	sub.w	r3, sl, r3
 8007200:	eba3 0309 	sub.w	r3, r3, r9
 8007204:	4543      	cmp	r3, r8
 8007206:	f77f af79 	ble.w	80070fc <_printf_float+0x23c>
 800720a:	2301      	movs	r3, #1
 800720c:	465a      	mov	r2, fp
 800720e:	4631      	mov	r1, r6
 8007210:	4628      	mov	r0, r5
 8007212:	47b8      	blx	r7
 8007214:	3001      	adds	r0, #1
 8007216:	f43f aeae 	beq.w	8006f76 <_printf_float+0xb6>
 800721a:	f108 0801 	add.w	r8, r8, #1
 800721e:	e7ec      	b.n	80071fa <_printf_float+0x33a>
 8007220:	4642      	mov	r2, r8
 8007222:	4631      	mov	r1, r6
 8007224:	4628      	mov	r0, r5
 8007226:	47b8      	blx	r7
 8007228:	3001      	adds	r0, #1
 800722a:	d1c2      	bne.n	80071b2 <_printf_float+0x2f2>
 800722c:	e6a3      	b.n	8006f76 <_printf_float+0xb6>
 800722e:	2301      	movs	r3, #1
 8007230:	4631      	mov	r1, r6
 8007232:	4628      	mov	r0, r5
 8007234:	9206      	str	r2, [sp, #24]
 8007236:	47b8      	blx	r7
 8007238:	3001      	adds	r0, #1
 800723a:	f43f ae9c 	beq.w	8006f76 <_printf_float+0xb6>
 800723e:	9a06      	ldr	r2, [sp, #24]
 8007240:	f10b 0b01 	add.w	fp, fp, #1
 8007244:	e7bb      	b.n	80071be <_printf_float+0x2fe>
 8007246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800724a:	4631      	mov	r1, r6
 800724c:	4628      	mov	r0, r5
 800724e:	47b8      	blx	r7
 8007250:	3001      	adds	r0, #1
 8007252:	d1c0      	bne.n	80071d6 <_printf_float+0x316>
 8007254:	e68f      	b.n	8006f76 <_printf_float+0xb6>
 8007256:	9a06      	ldr	r2, [sp, #24]
 8007258:	464b      	mov	r3, r9
 800725a:	4442      	add	r2, r8
 800725c:	4631      	mov	r1, r6
 800725e:	4628      	mov	r0, r5
 8007260:	47b8      	blx	r7
 8007262:	3001      	adds	r0, #1
 8007264:	d1c3      	bne.n	80071ee <_printf_float+0x32e>
 8007266:	e686      	b.n	8006f76 <_printf_float+0xb6>
 8007268:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800726c:	f1ba 0f01 	cmp.w	sl, #1
 8007270:	dc01      	bgt.n	8007276 <_printf_float+0x3b6>
 8007272:	07db      	lsls	r3, r3, #31
 8007274:	d536      	bpl.n	80072e4 <_printf_float+0x424>
 8007276:	2301      	movs	r3, #1
 8007278:	4642      	mov	r2, r8
 800727a:	4631      	mov	r1, r6
 800727c:	4628      	mov	r0, r5
 800727e:	47b8      	blx	r7
 8007280:	3001      	adds	r0, #1
 8007282:	f43f ae78 	beq.w	8006f76 <_printf_float+0xb6>
 8007286:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800728a:	4631      	mov	r1, r6
 800728c:	4628      	mov	r0, r5
 800728e:	47b8      	blx	r7
 8007290:	3001      	adds	r0, #1
 8007292:	f43f ae70 	beq.w	8006f76 <_printf_float+0xb6>
 8007296:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800729a:	2200      	movs	r2, #0
 800729c:	2300      	movs	r3, #0
 800729e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072a2:	f7f9 fc11 	bl	8000ac8 <__aeabi_dcmpeq>
 80072a6:	b9c0      	cbnz	r0, 80072da <_printf_float+0x41a>
 80072a8:	4653      	mov	r3, sl
 80072aa:	f108 0201 	add.w	r2, r8, #1
 80072ae:	4631      	mov	r1, r6
 80072b0:	4628      	mov	r0, r5
 80072b2:	47b8      	blx	r7
 80072b4:	3001      	adds	r0, #1
 80072b6:	d10c      	bne.n	80072d2 <_printf_float+0x412>
 80072b8:	e65d      	b.n	8006f76 <_printf_float+0xb6>
 80072ba:	2301      	movs	r3, #1
 80072bc:	465a      	mov	r2, fp
 80072be:	4631      	mov	r1, r6
 80072c0:	4628      	mov	r0, r5
 80072c2:	47b8      	blx	r7
 80072c4:	3001      	adds	r0, #1
 80072c6:	f43f ae56 	beq.w	8006f76 <_printf_float+0xb6>
 80072ca:	f108 0801 	add.w	r8, r8, #1
 80072ce:	45d0      	cmp	r8, sl
 80072d0:	dbf3      	blt.n	80072ba <_printf_float+0x3fa>
 80072d2:	464b      	mov	r3, r9
 80072d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80072d8:	e6df      	b.n	800709a <_printf_float+0x1da>
 80072da:	f04f 0800 	mov.w	r8, #0
 80072de:	f104 0b1a 	add.w	fp, r4, #26
 80072e2:	e7f4      	b.n	80072ce <_printf_float+0x40e>
 80072e4:	2301      	movs	r3, #1
 80072e6:	4642      	mov	r2, r8
 80072e8:	e7e1      	b.n	80072ae <_printf_float+0x3ee>
 80072ea:	2301      	movs	r3, #1
 80072ec:	464a      	mov	r2, r9
 80072ee:	4631      	mov	r1, r6
 80072f0:	4628      	mov	r0, r5
 80072f2:	47b8      	blx	r7
 80072f4:	3001      	adds	r0, #1
 80072f6:	f43f ae3e 	beq.w	8006f76 <_printf_float+0xb6>
 80072fa:	f108 0801 	add.w	r8, r8, #1
 80072fe:	68e3      	ldr	r3, [r4, #12]
 8007300:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007302:	1a5b      	subs	r3, r3, r1
 8007304:	4543      	cmp	r3, r8
 8007306:	dcf0      	bgt.n	80072ea <_printf_float+0x42a>
 8007308:	e6fc      	b.n	8007104 <_printf_float+0x244>
 800730a:	f04f 0800 	mov.w	r8, #0
 800730e:	f104 0919 	add.w	r9, r4, #25
 8007312:	e7f4      	b.n	80072fe <_printf_float+0x43e>

08007314 <_printf_common>:
 8007314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007318:	4616      	mov	r6, r2
 800731a:	4698      	mov	r8, r3
 800731c:	688a      	ldr	r2, [r1, #8]
 800731e:	690b      	ldr	r3, [r1, #16]
 8007320:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007324:	4293      	cmp	r3, r2
 8007326:	bfb8      	it	lt
 8007328:	4613      	movlt	r3, r2
 800732a:	6033      	str	r3, [r6, #0]
 800732c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007330:	4607      	mov	r7, r0
 8007332:	460c      	mov	r4, r1
 8007334:	b10a      	cbz	r2, 800733a <_printf_common+0x26>
 8007336:	3301      	adds	r3, #1
 8007338:	6033      	str	r3, [r6, #0]
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	0699      	lsls	r1, r3, #26
 800733e:	bf42      	ittt	mi
 8007340:	6833      	ldrmi	r3, [r6, #0]
 8007342:	3302      	addmi	r3, #2
 8007344:	6033      	strmi	r3, [r6, #0]
 8007346:	6825      	ldr	r5, [r4, #0]
 8007348:	f015 0506 	ands.w	r5, r5, #6
 800734c:	d106      	bne.n	800735c <_printf_common+0x48>
 800734e:	f104 0a19 	add.w	sl, r4, #25
 8007352:	68e3      	ldr	r3, [r4, #12]
 8007354:	6832      	ldr	r2, [r6, #0]
 8007356:	1a9b      	subs	r3, r3, r2
 8007358:	42ab      	cmp	r3, r5
 800735a:	dc26      	bgt.n	80073aa <_printf_common+0x96>
 800735c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007360:	6822      	ldr	r2, [r4, #0]
 8007362:	3b00      	subs	r3, #0
 8007364:	bf18      	it	ne
 8007366:	2301      	movne	r3, #1
 8007368:	0692      	lsls	r2, r2, #26
 800736a:	d42b      	bmi.n	80073c4 <_printf_common+0xb0>
 800736c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007370:	4641      	mov	r1, r8
 8007372:	4638      	mov	r0, r7
 8007374:	47c8      	blx	r9
 8007376:	3001      	adds	r0, #1
 8007378:	d01e      	beq.n	80073b8 <_printf_common+0xa4>
 800737a:	6823      	ldr	r3, [r4, #0]
 800737c:	6922      	ldr	r2, [r4, #16]
 800737e:	f003 0306 	and.w	r3, r3, #6
 8007382:	2b04      	cmp	r3, #4
 8007384:	bf02      	ittt	eq
 8007386:	68e5      	ldreq	r5, [r4, #12]
 8007388:	6833      	ldreq	r3, [r6, #0]
 800738a:	1aed      	subeq	r5, r5, r3
 800738c:	68a3      	ldr	r3, [r4, #8]
 800738e:	bf0c      	ite	eq
 8007390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007394:	2500      	movne	r5, #0
 8007396:	4293      	cmp	r3, r2
 8007398:	bfc4      	itt	gt
 800739a:	1a9b      	subgt	r3, r3, r2
 800739c:	18ed      	addgt	r5, r5, r3
 800739e:	2600      	movs	r6, #0
 80073a0:	341a      	adds	r4, #26
 80073a2:	42b5      	cmp	r5, r6
 80073a4:	d11a      	bne.n	80073dc <_printf_common+0xc8>
 80073a6:	2000      	movs	r0, #0
 80073a8:	e008      	b.n	80073bc <_printf_common+0xa8>
 80073aa:	2301      	movs	r3, #1
 80073ac:	4652      	mov	r2, sl
 80073ae:	4641      	mov	r1, r8
 80073b0:	4638      	mov	r0, r7
 80073b2:	47c8      	blx	r9
 80073b4:	3001      	adds	r0, #1
 80073b6:	d103      	bne.n	80073c0 <_printf_common+0xac>
 80073b8:	f04f 30ff 	mov.w	r0, #4294967295
 80073bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c0:	3501      	adds	r5, #1
 80073c2:	e7c6      	b.n	8007352 <_printf_common+0x3e>
 80073c4:	18e1      	adds	r1, r4, r3
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	2030      	movs	r0, #48	@ 0x30
 80073ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80073ce:	4422      	add	r2, r4
 80073d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80073d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80073d8:	3302      	adds	r3, #2
 80073da:	e7c7      	b.n	800736c <_printf_common+0x58>
 80073dc:	2301      	movs	r3, #1
 80073de:	4622      	mov	r2, r4
 80073e0:	4641      	mov	r1, r8
 80073e2:	4638      	mov	r0, r7
 80073e4:	47c8      	blx	r9
 80073e6:	3001      	adds	r0, #1
 80073e8:	d0e6      	beq.n	80073b8 <_printf_common+0xa4>
 80073ea:	3601      	adds	r6, #1
 80073ec:	e7d9      	b.n	80073a2 <_printf_common+0x8e>
	...

080073f0 <_printf_i>:
 80073f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073f4:	7e0f      	ldrb	r7, [r1, #24]
 80073f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073f8:	2f78      	cmp	r7, #120	@ 0x78
 80073fa:	4691      	mov	r9, r2
 80073fc:	4680      	mov	r8, r0
 80073fe:	460c      	mov	r4, r1
 8007400:	469a      	mov	sl, r3
 8007402:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007406:	d807      	bhi.n	8007418 <_printf_i+0x28>
 8007408:	2f62      	cmp	r7, #98	@ 0x62
 800740a:	d80a      	bhi.n	8007422 <_printf_i+0x32>
 800740c:	2f00      	cmp	r7, #0
 800740e:	f000 80d2 	beq.w	80075b6 <_printf_i+0x1c6>
 8007412:	2f58      	cmp	r7, #88	@ 0x58
 8007414:	f000 80b9 	beq.w	800758a <_printf_i+0x19a>
 8007418:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800741c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007420:	e03a      	b.n	8007498 <_printf_i+0xa8>
 8007422:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007426:	2b15      	cmp	r3, #21
 8007428:	d8f6      	bhi.n	8007418 <_printf_i+0x28>
 800742a:	a101      	add	r1, pc, #4	@ (adr r1, 8007430 <_printf_i+0x40>)
 800742c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007430:	08007489 	.word	0x08007489
 8007434:	0800749d 	.word	0x0800749d
 8007438:	08007419 	.word	0x08007419
 800743c:	08007419 	.word	0x08007419
 8007440:	08007419 	.word	0x08007419
 8007444:	08007419 	.word	0x08007419
 8007448:	0800749d 	.word	0x0800749d
 800744c:	08007419 	.word	0x08007419
 8007450:	08007419 	.word	0x08007419
 8007454:	08007419 	.word	0x08007419
 8007458:	08007419 	.word	0x08007419
 800745c:	0800759d 	.word	0x0800759d
 8007460:	080074c7 	.word	0x080074c7
 8007464:	08007557 	.word	0x08007557
 8007468:	08007419 	.word	0x08007419
 800746c:	08007419 	.word	0x08007419
 8007470:	080075bf 	.word	0x080075bf
 8007474:	08007419 	.word	0x08007419
 8007478:	080074c7 	.word	0x080074c7
 800747c:	08007419 	.word	0x08007419
 8007480:	08007419 	.word	0x08007419
 8007484:	0800755f 	.word	0x0800755f
 8007488:	6833      	ldr	r3, [r6, #0]
 800748a:	1d1a      	adds	r2, r3, #4
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6032      	str	r2, [r6, #0]
 8007490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007494:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007498:	2301      	movs	r3, #1
 800749a:	e09d      	b.n	80075d8 <_printf_i+0x1e8>
 800749c:	6833      	ldr	r3, [r6, #0]
 800749e:	6820      	ldr	r0, [r4, #0]
 80074a0:	1d19      	adds	r1, r3, #4
 80074a2:	6031      	str	r1, [r6, #0]
 80074a4:	0606      	lsls	r6, r0, #24
 80074a6:	d501      	bpl.n	80074ac <_printf_i+0xbc>
 80074a8:	681d      	ldr	r5, [r3, #0]
 80074aa:	e003      	b.n	80074b4 <_printf_i+0xc4>
 80074ac:	0645      	lsls	r5, r0, #25
 80074ae:	d5fb      	bpl.n	80074a8 <_printf_i+0xb8>
 80074b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80074b4:	2d00      	cmp	r5, #0
 80074b6:	da03      	bge.n	80074c0 <_printf_i+0xd0>
 80074b8:	232d      	movs	r3, #45	@ 0x2d
 80074ba:	426d      	negs	r5, r5
 80074bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074c0:	4859      	ldr	r0, [pc, #356]	@ (8007628 <_printf_i+0x238>)
 80074c2:	230a      	movs	r3, #10
 80074c4:	e011      	b.n	80074ea <_printf_i+0xfa>
 80074c6:	6821      	ldr	r1, [r4, #0]
 80074c8:	6833      	ldr	r3, [r6, #0]
 80074ca:	0608      	lsls	r0, r1, #24
 80074cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80074d0:	d402      	bmi.n	80074d8 <_printf_i+0xe8>
 80074d2:	0649      	lsls	r1, r1, #25
 80074d4:	bf48      	it	mi
 80074d6:	b2ad      	uxthmi	r5, r5
 80074d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80074da:	4853      	ldr	r0, [pc, #332]	@ (8007628 <_printf_i+0x238>)
 80074dc:	6033      	str	r3, [r6, #0]
 80074de:	bf14      	ite	ne
 80074e0:	230a      	movne	r3, #10
 80074e2:	2308      	moveq	r3, #8
 80074e4:	2100      	movs	r1, #0
 80074e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80074ea:	6866      	ldr	r6, [r4, #4]
 80074ec:	60a6      	str	r6, [r4, #8]
 80074ee:	2e00      	cmp	r6, #0
 80074f0:	bfa2      	ittt	ge
 80074f2:	6821      	ldrge	r1, [r4, #0]
 80074f4:	f021 0104 	bicge.w	r1, r1, #4
 80074f8:	6021      	strge	r1, [r4, #0]
 80074fa:	b90d      	cbnz	r5, 8007500 <_printf_i+0x110>
 80074fc:	2e00      	cmp	r6, #0
 80074fe:	d04b      	beq.n	8007598 <_printf_i+0x1a8>
 8007500:	4616      	mov	r6, r2
 8007502:	fbb5 f1f3 	udiv	r1, r5, r3
 8007506:	fb03 5711 	mls	r7, r3, r1, r5
 800750a:	5dc7      	ldrb	r7, [r0, r7]
 800750c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007510:	462f      	mov	r7, r5
 8007512:	42bb      	cmp	r3, r7
 8007514:	460d      	mov	r5, r1
 8007516:	d9f4      	bls.n	8007502 <_printf_i+0x112>
 8007518:	2b08      	cmp	r3, #8
 800751a:	d10b      	bne.n	8007534 <_printf_i+0x144>
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	07df      	lsls	r7, r3, #31
 8007520:	d508      	bpl.n	8007534 <_printf_i+0x144>
 8007522:	6923      	ldr	r3, [r4, #16]
 8007524:	6861      	ldr	r1, [r4, #4]
 8007526:	4299      	cmp	r1, r3
 8007528:	bfde      	ittt	le
 800752a:	2330      	movle	r3, #48	@ 0x30
 800752c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007530:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007534:	1b92      	subs	r2, r2, r6
 8007536:	6122      	str	r2, [r4, #16]
 8007538:	f8cd a000 	str.w	sl, [sp]
 800753c:	464b      	mov	r3, r9
 800753e:	aa03      	add	r2, sp, #12
 8007540:	4621      	mov	r1, r4
 8007542:	4640      	mov	r0, r8
 8007544:	f7ff fee6 	bl	8007314 <_printf_common>
 8007548:	3001      	adds	r0, #1
 800754a:	d14a      	bne.n	80075e2 <_printf_i+0x1f2>
 800754c:	f04f 30ff 	mov.w	r0, #4294967295
 8007550:	b004      	add	sp, #16
 8007552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	f043 0320 	orr.w	r3, r3, #32
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	4833      	ldr	r0, [pc, #204]	@ (800762c <_printf_i+0x23c>)
 8007560:	2778      	movs	r7, #120	@ 0x78
 8007562:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007566:	6823      	ldr	r3, [r4, #0]
 8007568:	6831      	ldr	r1, [r6, #0]
 800756a:	061f      	lsls	r7, r3, #24
 800756c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007570:	d402      	bmi.n	8007578 <_printf_i+0x188>
 8007572:	065f      	lsls	r7, r3, #25
 8007574:	bf48      	it	mi
 8007576:	b2ad      	uxthmi	r5, r5
 8007578:	6031      	str	r1, [r6, #0]
 800757a:	07d9      	lsls	r1, r3, #31
 800757c:	bf44      	itt	mi
 800757e:	f043 0320 	orrmi.w	r3, r3, #32
 8007582:	6023      	strmi	r3, [r4, #0]
 8007584:	b11d      	cbz	r5, 800758e <_printf_i+0x19e>
 8007586:	2310      	movs	r3, #16
 8007588:	e7ac      	b.n	80074e4 <_printf_i+0xf4>
 800758a:	4827      	ldr	r0, [pc, #156]	@ (8007628 <_printf_i+0x238>)
 800758c:	e7e9      	b.n	8007562 <_printf_i+0x172>
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	f023 0320 	bic.w	r3, r3, #32
 8007594:	6023      	str	r3, [r4, #0]
 8007596:	e7f6      	b.n	8007586 <_printf_i+0x196>
 8007598:	4616      	mov	r6, r2
 800759a:	e7bd      	b.n	8007518 <_printf_i+0x128>
 800759c:	6833      	ldr	r3, [r6, #0]
 800759e:	6825      	ldr	r5, [r4, #0]
 80075a0:	6961      	ldr	r1, [r4, #20]
 80075a2:	1d18      	adds	r0, r3, #4
 80075a4:	6030      	str	r0, [r6, #0]
 80075a6:	062e      	lsls	r6, r5, #24
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	d501      	bpl.n	80075b0 <_printf_i+0x1c0>
 80075ac:	6019      	str	r1, [r3, #0]
 80075ae:	e002      	b.n	80075b6 <_printf_i+0x1c6>
 80075b0:	0668      	lsls	r0, r5, #25
 80075b2:	d5fb      	bpl.n	80075ac <_printf_i+0x1bc>
 80075b4:	8019      	strh	r1, [r3, #0]
 80075b6:	2300      	movs	r3, #0
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	4616      	mov	r6, r2
 80075bc:	e7bc      	b.n	8007538 <_printf_i+0x148>
 80075be:	6833      	ldr	r3, [r6, #0]
 80075c0:	1d1a      	adds	r2, r3, #4
 80075c2:	6032      	str	r2, [r6, #0]
 80075c4:	681e      	ldr	r6, [r3, #0]
 80075c6:	6862      	ldr	r2, [r4, #4]
 80075c8:	2100      	movs	r1, #0
 80075ca:	4630      	mov	r0, r6
 80075cc:	f7f8 fe00 	bl	80001d0 <memchr>
 80075d0:	b108      	cbz	r0, 80075d6 <_printf_i+0x1e6>
 80075d2:	1b80      	subs	r0, r0, r6
 80075d4:	6060      	str	r0, [r4, #4]
 80075d6:	6863      	ldr	r3, [r4, #4]
 80075d8:	6123      	str	r3, [r4, #16]
 80075da:	2300      	movs	r3, #0
 80075dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075e0:	e7aa      	b.n	8007538 <_printf_i+0x148>
 80075e2:	6923      	ldr	r3, [r4, #16]
 80075e4:	4632      	mov	r2, r6
 80075e6:	4649      	mov	r1, r9
 80075e8:	4640      	mov	r0, r8
 80075ea:	47d0      	blx	sl
 80075ec:	3001      	adds	r0, #1
 80075ee:	d0ad      	beq.n	800754c <_printf_i+0x15c>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	079b      	lsls	r3, r3, #30
 80075f4:	d413      	bmi.n	800761e <_printf_i+0x22e>
 80075f6:	68e0      	ldr	r0, [r4, #12]
 80075f8:	9b03      	ldr	r3, [sp, #12]
 80075fa:	4298      	cmp	r0, r3
 80075fc:	bfb8      	it	lt
 80075fe:	4618      	movlt	r0, r3
 8007600:	e7a6      	b.n	8007550 <_printf_i+0x160>
 8007602:	2301      	movs	r3, #1
 8007604:	4632      	mov	r2, r6
 8007606:	4649      	mov	r1, r9
 8007608:	4640      	mov	r0, r8
 800760a:	47d0      	blx	sl
 800760c:	3001      	adds	r0, #1
 800760e:	d09d      	beq.n	800754c <_printf_i+0x15c>
 8007610:	3501      	adds	r5, #1
 8007612:	68e3      	ldr	r3, [r4, #12]
 8007614:	9903      	ldr	r1, [sp, #12]
 8007616:	1a5b      	subs	r3, r3, r1
 8007618:	42ab      	cmp	r3, r5
 800761a:	dcf2      	bgt.n	8007602 <_printf_i+0x212>
 800761c:	e7eb      	b.n	80075f6 <_printf_i+0x206>
 800761e:	2500      	movs	r5, #0
 8007620:	f104 0619 	add.w	r6, r4, #25
 8007624:	e7f5      	b.n	8007612 <_printf_i+0x222>
 8007626:	bf00      	nop
 8007628:	08009e52 	.word	0x08009e52
 800762c:	08009e63 	.word	0x08009e63

08007630 <std>:
 8007630:	2300      	movs	r3, #0
 8007632:	b510      	push	{r4, lr}
 8007634:	4604      	mov	r4, r0
 8007636:	e9c0 3300 	strd	r3, r3, [r0]
 800763a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800763e:	6083      	str	r3, [r0, #8]
 8007640:	8181      	strh	r1, [r0, #12]
 8007642:	6643      	str	r3, [r0, #100]	@ 0x64
 8007644:	81c2      	strh	r2, [r0, #14]
 8007646:	6183      	str	r3, [r0, #24]
 8007648:	4619      	mov	r1, r3
 800764a:	2208      	movs	r2, #8
 800764c:	305c      	adds	r0, #92	@ 0x5c
 800764e:	f000 f9f9 	bl	8007a44 <memset>
 8007652:	4b0d      	ldr	r3, [pc, #52]	@ (8007688 <std+0x58>)
 8007654:	6263      	str	r3, [r4, #36]	@ 0x24
 8007656:	4b0d      	ldr	r3, [pc, #52]	@ (800768c <std+0x5c>)
 8007658:	62a3      	str	r3, [r4, #40]	@ 0x28
 800765a:	4b0d      	ldr	r3, [pc, #52]	@ (8007690 <std+0x60>)
 800765c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800765e:	4b0d      	ldr	r3, [pc, #52]	@ (8007694 <std+0x64>)
 8007660:	6323      	str	r3, [r4, #48]	@ 0x30
 8007662:	4b0d      	ldr	r3, [pc, #52]	@ (8007698 <std+0x68>)
 8007664:	6224      	str	r4, [r4, #32]
 8007666:	429c      	cmp	r4, r3
 8007668:	d006      	beq.n	8007678 <std+0x48>
 800766a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800766e:	4294      	cmp	r4, r2
 8007670:	d002      	beq.n	8007678 <std+0x48>
 8007672:	33d0      	adds	r3, #208	@ 0xd0
 8007674:	429c      	cmp	r4, r3
 8007676:	d105      	bne.n	8007684 <std+0x54>
 8007678:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800767c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007680:	f000 ba5c 	b.w	8007b3c <__retarget_lock_init_recursive>
 8007684:	bd10      	pop	{r4, pc}
 8007686:	bf00      	nop
 8007688:	08007895 	.word	0x08007895
 800768c:	080078b7 	.word	0x080078b7
 8007690:	080078ef 	.word	0x080078ef
 8007694:	08007913 	.word	0x08007913
 8007698:	20001cbc 	.word	0x20001cbc

0800769c <stdio_exit_handler>:
 800769c:	4a02      	ldr	r2, [pc, #8]	@ (80076a8 <stdio_exit_handler+0xc>)
 800769e:	4903      	ldr	r1, [pc, #12]	@ (80076ac <stdio_exit_handler+0x10>)
 80076a0:	4803      	ldr	r0, [pc, #12]	@ (80076b0 <stdio_exit_handler+0x14>)
 80076a2:	f000 b869 	b.w	8007778 <_fwalk_sglue>
 80076a6:	bf00      	nop
 80076a8:	20000a48 	.word	0x20000a48
 80076ac:	08009471 	.word	0x08009471
 80076b0:	20000a58 	.word	0x20000a58

080076b4 <cleanup_stdio>:
 80076b4:	6841      	ldr	r1, [r0, #4]
 80076b6:	4b0c      	ldr	r3, [pc, #48]	@ (80076e8 <cleanup_stdio+0x34>)
 80076b8:	4299      	cmp	r1, r3
 80076ba:	b510      	push	{r4, lr}
 80076bc:	4604      	mov	r4, r0
 80076be:	d001      	beq.n	80076c4 <cleanup_stdio+0x10>
 80076c0:	f001 fed6 	bl	8009470 <_fflush_r>
 80076c4:	68a1      	ldr	r1, [r4, #8]
 80076c6:	4b09      	ldr	r3, [pc, #36]	@ (80076ec <cleanup_stdio+0x38>)
 80076c8:	4299      	cmp	r1, r3
 80076ca:	d002      	beq.n	80076d2 <cleanup_stdio+0x1e>
 80076cc:	4620      	mov	r0, r4
 80076ce:	f001 fecf 	bl	8009470 <_fflush_r>
 80076d2:	68e1      	ldr	r1, [r4, #12]
 80076d4:	4b06      	ldr	r3, [pc, #24]	@ (80076f0 <cleanup_stdio+0x3c>)
 80076d6:	4299      	cmp	r1, r3
 80076d8:	d004      	beq.n	80076e4 <cleanup_stdio+0x30>
 80076da:	4620      	mov	r0, r4
 80076dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e0:	f001 bec6 	b.w	8009470 <_fflush_r>
 80076e4:	bd10      	pop	{r4, pc}
 80076e6:	bf00      	nop
 80076e8:	20001cbc 	.word	0x20001cbc
 80076ec:	20001d24 	.word	0x20001d24
 80076f0:	20001d8c 	.word	0x20001d8c

080076f4 <global_stdio_init.part.0>:
 80076f4:	b510      	push	{r4, lr}
 80076f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007724 <global_stdio_init.part.0+0x30>)
 80076f8:	4c0b      	ldr	r4, [pc, #44]	@ (8007728 <global_stdio_init.part.0+0x34>)
 80076fa:	4a0c      	ldr	r2, [pc, #48]	@ (800772c <global_stdio_init.part.0+0x38>)
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	4620      	mov	r0, r4
 8007700:	2200      	movs	r2, #0
 8007702:	2104      	movs	r1, #4
 8007704:	f7ff ff94 	bl	8007630 <std>
 8007708:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800770c:	2201      	movs	r2, #1
 800770e:	2109      	movs	r1, #9
 8007710:	f7ff ff8e 	bl	8007630 <std>
 8007714:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007718:	2202      	movs	r2, #2
 800771a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800771e:	2112      	movs	r1, #18
 8007720:	f7ff bf86 	b.w	8007630 <std>
 8007724:	20001df4 	.word	0x20001df4
 8007728:	20001cbc 	.word	0x20001cbc
 800772c:	0800769d 	.word	0x0800769d

08007730 <__sfp_lock_acquire>:
 8007730:	4801      	ldr	r0, [pc, #4]	@ (8007738 <__sfp_lock_acquire+0x8>)
 8007732:	f000 ba04 	b.w	8007b3e <__retarget_lock_acquire_recursive>
 8007736:	bf00      	nop
 8007738:	20001dfd 	.word	0x20001dfd

0800773c <__sfp_lock_release>:
 800773c:	4801      	ldr	r0, [pc, #4]	@ (8007744 <__sfp_lock_release+0x8>)
 800773e:	f000 b9ff 	b.w	8007b40 <__retarget_lock_release_recursive>
 8007742:	bf00      	nop
 8007744:	20001dfd 	.word	0x20001dfd

08007748 <__sinit>:
 8007748:	b510      	push	{r4, lr}
 800774a:	4604      	mov	r4, r0
 800774c:	f7ff fff0 	bl	8007730 <__sfp_lock_acquire>
 8007750:	6a23      	ldr	r3, [r4, #32]
 8007752:	b11b      	cbz	r3, 800775c <__sinit+0x14>
 8007754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007758:	f7ff bff0 	b.w	800773c <__sfp_lock_release>
 800775c:	4b04      	ldr	r3, [pc, #16]	@ (8007770 <__sinit+0x28>)
 800775e:	6223      	str	r3, [r4, #32]
 8007760:	4b04      	ldr	r3, [pc, #16]	@ (8007774 <__sinit+0x2c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1f5      	bne.n	8007754 <__sinit+0xc>
 8007768:	f7ff ffc4 	bl	80076f4 <global_stdio_init.part.0>
 800776c:	e7f2      	b.n	8007754 <__sinit+0xc>
 800776e:	bf00      	nop
 8007770:	080076b5 	.word	0x080076b5
 8007774:	20001df4 	.word	0x20001df4

08007778 <_fwalk_sglue>:
 8007778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800777c:	4607      	mov	r7, r0
 800777e:	4688      	mov	r8, r1
 8007780:	4614      	mov	r4, r2
 8007782:	2600      	movs	r6, #0
 8007784:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007788:	f1b9 0901 	subs.w	r9, r9, #1
 800778c:	d505      	bpl.n	800779a <_fwalk_sglue+0x22>
 800778e:	6824      	ldr	r4, [r4, #0]
 8007790:	2c00      	cmp	r4, #0
 8007792:	d1f7      	bne.n	8007784 <_fwalk_sglue+0xc>
 8007794:	4630      	mov	r0, r6
 8007796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800779a:	89ab      	ldrh	r3, [r5, #12]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d907      	bls.n	80077b0 <_fwalk_sglue+0x38>
 80077a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077a4:	3301      	adds	r3, #1
 80077a6:	d003      	beq.n	80077b0 <_fwalk_sglue+0x38>
 80077a8:	4629      	mov	r1, r5
 80077aa:	4638      	mov	r0, r7
 80077ac:	47c0      	blx	r8
 80077ae:	4306      	orrs	r6, r0
 80077b0:	3568      	adds	r5, #104	@ 0x68
 80077b2:	e7e9      	b.n	8007788 <_fwalk_sglue+0x10>

080077b4 <iprintf>:
 80077b4:	b40f      	push	{r0, r1, r2, r3}
 80077b6:	b507      	push	{r0, r1, r2, lr}
 80077b8:	4906      	ldr	r1, [pc, #24]	@ (80077d4 <iprintf+0x20>)
 80077ba:	ab04      	add	r3, sp, #16
 80077bc:	6808      	ldr	r0, [r1, #0]
 80077be:	f853 2b04 	ldr.w	r2, [r3], #4
 80077c2:	6881      	ldr	r1, [r0, #8]
 80077c4:	9301      	str	r3, [sp, #4]
 80077c6:	f001 fcb7 	bl	8009138 <_vfiprintf_r>
 80077ca:	b003      	add	sp, #12
 80077cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80077d0:	b004      	add	sp, #16
 80077d2:	4770      	bx	lr
 80077d4:	20000a54 	.word	0x20000a54

080077d8 <_puts_r>:
 80077d8:	6a03      	ldr	r3, [r0, #32]
 80077da:	b570      	push	{r4, r5, r6, lr}
 80077dc:	6884      	ldr	r4, [r0, #8]
 80077de:	4605      	mov	r5, r0
 80077e0:	460e      	mov	r6, r1
 80077e2:	b90b      	cbnz	r3, 80077e8 <_puts_r+0x10>
 80077e4:	f7ff ffb0 	bl	8007748 <__sinit>
 80077e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077ea:	07db      	lsls	r3, r3, #31
 80077ec:	d405      	bmi.n	80077fa <_puts_r+0x22>
 80077ee:	89a3      	ldrh	r3, [r4, #12]
 80077f0:	0598      	lsls	r0, r3, #22
 80077f2:	d402      	bmi.n	80077fa <_puts_r+0x22>
 80077f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077f6:	f000 f9a2 	bl	8007b3e <__retarget_lock_acquire_recursive>
 80077fa:	89a3      	ldrh	r3, [r4, #12]
 80077fc:	0719      	lsls	r1, r3, #28
 80077fe:	d502      	bpl.n	8007806 <_puts_r+0x2e>
 8007800:	6923      	ldr	r3, [r4, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d135      	bne.n	8007872 <_puts_r+0x9a>
 8007806:	4621      	mov	r1, r4
 8007808:	4628      	mov	r0, r5
 800780a:	f000 f8c5 	bl	8007998 <__swsetup_r>
 800780e:	b380      	cbz	r0, 8007872 <_puts_r+0x9a>
 8007810:	f04f 35ff 	mov.w	r5, #4294967295
 8007814:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007816:	07da      	lsls	r2, r3, #31
 8007818:	d405      	bmi.n	8007826 <_puts_r+0x4e>
 800781a:	89a3      	ldrh	r3, [r4, #12]
 800781c:	059b      	lsls	r3, r3, #22
 800781e:	d402      	bmi.n	8007826 <_puts_r+0x4e>
 8007820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007822:	f000 f98d 	bl	8007b40 <__retarget_lock_release_recursive>
 8007826:	4628      	mov	r0, r5
 8007828:	bd70      	pop	{r4, r5, r6, pc}
 800782a:	2b00      	cmp	r3, #0
 800782c:	da04      	bge.n	8007838 <_puts_r+0x60>
 800782e:	69a2      	ldr	r2, [r4, #24]
 8007830:	429a      	cmp	r2, r3
 8007832:	dc17      	bgt.n	8007864 <_puts_r+0x8c>
 8007834:	290a      	cmp	r1, #10
 8007836:	d015      	beq.n	8007864 <_puts_r+0x8c>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	6022      	str	r2, [r4, #0]
 800783e:	7019      	strb	r1, [r3, #0]
 8007840:	68a3      	ldr	r3, [r4, #8]
 8007842:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007846:	3b01      	subs	r3, #1
 8007848:	60a3      	str	r3, [r4, #8]
 800784a:	2900      	cmp	r1, #0
 800784c:	d1ed      	bne.n	800782a <_puts_r+0x52>
 800784e:	2b00      	cmp	r3, #0
 8007850:	da11      	bge.n	8007876 <_puts_r+0x9e>
 8007852:	4622      	mov	r2, r4
 8007854:	210a      	movs	r1, #10
 8007856:	4628      	mov	r0, r5
 8007858:	f000 f85f 	bl	800791a <__swbuf_r>
 800785c:	3001      	adds	r0, #1
 800785e:	d0d7      	beq.n	8007810 <_puts_r+0x38>
 8007860:	250a      	movs	r5, #10
 8007862:	e7d7      	b.n	8007814 <_puts_r+0x3c>
 8007864:	4622      	mov	r2, r4
 8007866:	4628      	mov	r0, r5
 8007868:	f000 f857 	bl	800791a <__swbuf_r>
 800786c:	3001      	adds	r0, #1
 800786e:	d1e7      	bne.n	8007840 <_puts_r+0x68>
 8007870:	e7ce      	b.n	8007810 <_puts_r+0x38>
 8007872:	3e01      	subs	r6, #1
 8007874:	e7e4      	b.n	8007840 <_puts_r+0x68>
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	1c5a      	adds	r2, r3, #1
 800787a:	6022      	str	r2, [r4, #0]
 800787c:	220a      	movs	r2, #10
 800787e:	701a      	strb	r2, [r3, #0]
 8007880:	e7ee      	b.n	8007860 <_puts_r+0x88>
	...

08007884 <puts>:
 8007884:	4b02      	ldr	r3, [pc, #8]	@ (8007890 <puts+0xc>)
 8007886:	4601      	mov	r1, r0
 8007888:	6818      	ldr	r0, [r3, #0]
 800788a:	f7ff bfa5 	b.w	80077d8 <_puts_r>
 800788e:	bf00      	nop
 8007890:	20000a54 	.word	0x20000a54

08007894 <__sread>:
 8007894:	b510      	push	{r4, lr}
 8007896:	460c      	mov	r4, r1
 8007898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800789c:	f000 f900 	bl	8007aa0 <_read_r>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	bfab      	itete	ge
 80078a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80078a6:	89a3      	ldrhlt	r3, [r4, #12]
 80078a8:	181b      	addge	r3, r3, r0
 80078aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078ae:	bfac      	ite	ge
 80078b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078b2:	81a3      	strhlt	r3, [r4, #12]
 80078b4:	bd10      	pop	{r4, pc}

080078b6 <__swrite>:
 80078b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ba:	461f      	mov	r7, r3
 80078bc:	898b      	ldrh	r3, [r1, #12]
 80078be:	05db      	lsls	r3, r3, #23
 80078c0:	4605      	mov	r5, r0
 80078c2:	460c      	mov	r4, r1
 80078c4:	4616      	mov	r6, r2
 80078c6:	d505      	bpl.n	80078d4 <__swrite+0x1e>
 80078c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078cc:	2302      	movs	r3, #2
 80078ce:	2200      	movs	r2, #0
 80078d0:	f000 f8d4 	bl	8007a7c <_lseek_r>
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078de:	81a3      	strh	r3, [r4, #12]
 80078e0:	4632      	mov	r2, r6
 80078e2:	463b      	mov	r3, r7
 80078e4:	4628      	mov	r0, r5
 80078e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ea:	f000 b8eb 	b.w	8007ac4 <_write_r>

080078ee <__sseek>:
 80078ee:	b510      	push	{r4, lr}
 80078f0:	460c      	mov	r4, r1
 80078f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f6:	f000 f8c1 	bl	8007a7c <_lseek_r>
 80078fa:	1c43      	adds	r3, r0, #1
 80078fc:	89a3      	ldrh	r3, [r4, #12]
 80078fe:	bf15      	itete	ne
 8007900:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007902:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007906:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800790a:	81a3      	strheq	r3, [r4, #12]
 800790c:	bf18      	it	ne
 800790e:	81a3      	strhne	r3, [r4, #12]
 8007910:	bd10      	pop	{r4, pc}

08007912 <__sclose>:
 8007912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007916:	f000 b8a1 	b.w	8007a5c <_close_r>

0800791a <__swbuf_r>:
 800791a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791c:	460e      	mov	r6, r1
 800791e:	4614      	mov	r4, r2
 8007920:	4605      	mov	r5, r0
 8007922:	b118      	cbz	r0, 800792c <__swbuf_r+0x12>
 8007924:	6a03      	ldr	r3, [r0, #32]
 8007926:	b90b      	cbnz	r3, 800792c <__swbuf_r+0x12>
 8007928:	f7ff ff0e 	bl	8007748 <__sinit>
 800792c:	69a3      	ldr	r3, [r4, #24]
 800792e:	60a3      	str	r3, [r4, #8]
 8007930:	89a3      	ldrh	r3, [r4, #12]
 8007932:	071a      	lsls	r2, r3, #28
 8007934:	d501      	bpl.n	800793a <__swbuf_r+0x20>
 8007936:	6923      	ldr	r3, [r4, #16]
 8007938:	b943      	cbnz	r3, 800794c <__swbuf_r+0x32>
 800793a:	4621      	mov	r1, r4
 800793c:	4628      	mov	r0, r5
 800793e:	f000 f82b 	bl	8007998 <__swsetup_r>
 8007942:	b118      	cbz	r0, 800794c <__swbuf_r+0x32>
 8007944:	f04f 37ff 	mov.w	r7, #4294967295
 8007948:	4638      	mov	r0, r7
 800794a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	6922      	ldr	r2, [r4, #16]
 8007950:	1a98      	subs	r0, r3, r2
 8007952:	6963      	ldr	r3, [r4, #20]
 8007954:	b2f6      	uxtb	r6, r6
 8007956:	4283      	cmp	r3, r0
 8007958:	4637      	mov	r7, r6
 800795a:	dc05      	bgt.n	8007968 <__swbuf_r+0x4e>
 800795c:	4621      	mov	r1, r4
 800795e:	4628      	mov	r0, r5
 8007960:	f001 fd86 	bl	8009470 <_fflush_r>
 8007964:	2800      	cmp	r0, #0
 8007966:	d1ed      	bne.n	8007944 <__swbuf_r+0x2a>
 8007968:	68a3      	ldr	r3, [r4, #8]
 800796a:	3b01      	subs	r3, #1
 800796c:	60a3      	str	r3, [r4, #8]
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	1c5a      	adds	r2, r3, #1
 8007972:	6022      	str	r2, [r4, #0]
 8007974:	701e      	strb	r6, [r3, #0]
 8007976:	6962      	ldr	r2, [r4, #20]
 8007978:	1c43      	adds	r3, r0, #1
 800797a:	429a      	cmp	r2, r3
 800797c:	d004      	beq.n	8007988 <__swbuf_r+0x6e>
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	07db      	lsls	r3, r3, #31
 8007982:	d5e1      	bpl.n	8007948 <__swbuf_r+0x2e>
 8007984:	2e0a      	cmp	r6, #10
 8007986:	d1df      	bne.n	8007948 <__swbuf_r+0x2e>
 8007988:	4621      	mov	r1, r4
 800798a:	4628      	mov	r0, r5
 800798c:	f001 fd70 	bl	8009470 <_fflush_r>
 8007990:	2800      	cmp	r0, #0
 8007992:	d0d9      	beq.n	8007948 <__swbuf_r+0x2e>
 8007994:	e7d6      	b.n	8007944 <__swbuf_r+0x2a>
	...

08007998 <__swsetup_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4b29      	ldr	r3, [pc, #164]	@ (8007a40 <__swsetup_r+0xa8>)
 800799c:	4605      	mov	r5, r0
 800799e:	6818      	ldr	r0, [r3, #0]
 80079a0:	460c      	mov	r4, r1
 80079a2:	b118      	cbz	r0, 80079ac <__swsetup_r+0x14>
 80079a4:	6a03      	ldr	r3, [r0, #32]
 80079a6:	b90b      	cbnz	r3, 80079ac <__swsetup_r+0x14>
 80079a8:	f7ff fece 	bl	8007748 <__sinit>
 80079ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079b0:	0719      	lsls	r1, r3, #28
 80079b2:	d422      	bmi.n	80079fa <__swsetup_r+0x62>
 80079b4:	06da      	lsls	r2, r3, #27
 80079b6:	d407      	bmi.n	80079c8 <__swsetup_r+0x30>
 80079b8:	2209      	movs	r2, #9
 80079ba:	602a      	str	r2, [r5, #0]
 80079bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079c0:	81a3      	strh	r3, [r4, #12]
 80079c2:	f04f 30ff 	mov.w	r0, #4294967295
 80079c6:	e033      	b.n	8007a30 <__swsetup_r+0x98>
 80079c8:	0758      	lsls	r0, r3, #29
 80079ca:	d512      	bpl.n	80079f2 <__swsetup_r+0x5a>
 80079cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079ce:	b141      	cbz	r1, 80079e2 <__swsetup_r+0x4a>
 80079d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079d4:	4299      	cmp	r1, r3
 80079d6:	d002      	beq.n	80079de <__swsetup_r+0x46>
 80079d8:	4628      	mov	r0, r5
 80079da:	f000 ff01 	bl	80087e0 <_free_r>
 80079de:	2300      	movs	r3, #0
 80079e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80079e8:	81a3      	strh	r3, [r4, #12]
 80079ea:	2300      	movs	r3, #0
 80079ec:	6063      	str	r3, [r4, #4]
 80079ee:	6923      	ldr	r3, [r4, #16]
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	89a3      	ldrh	r3, [r4, #12]
 80079f4:	f043 0308 	orr.w	r3, r3, #8
 80079f8:	81a3      	strh	r3, [r4, #12]
 80079fa:	6923      	ldr	r3, [r4, #16]
 80079fc:	b94b      	cbnz	r3, 8007a12 <__swsetup_r+0x7a>
 80079fe:	89a3      	ldrh	r3, [r4, #12]
 8007a00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a08:	d003      	beq.n	8007a12 <__swsetup_r+0x7a>
 8007a0a:	4621      	mov	r1, r4
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	f001 fd7d 	bl	800950c <__smakebuf_r>
 8007a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a16:	f013 0201 	ands.w	r2, r3, #1
 8007a1a:	d00a      	beq.n	8007a32 <__swsetup_r+0x9a>
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	60a2      	str	r2, [r4, #8]
 8007a20:	6962      	ldr	r2, [r4, #20]
 8007a22:	4252      	negs	r2, r2
 8007a24:	61a2      	str	r2, [r4, #24]
 8007a26:	6922      	ldr	r2, [r4, #16]
 8007a28:	b942      	cbnz	r2, 8007a3c <__swsetup_r+0xa4>
 8007a2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a2e:	d1c5      	bne.n	80079bc <__swsetup_r+0x24>
 8007a30:	bd38      	pop	{r3, r4, r5, pc}
 8007a32:	0799      	lsls	r1, r3, #30
 8007a34:	bf58      	it	pl
 8007a36:	6962      	ldrpl	r2, [r4, #20]
 8007a38:	60a2      	str	r2, [r4, #8]
 8007a3a:	e7f4      	b.n	8007a26 <__swsetup_r+0x8e>
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	e7f7      	b.n	8007a30 <__swsetup_r+0x98>
 8007a40:	20000a54 	.word	0x20000a54

08007a44 <memset>:
 8007a44:	4402      	add	r2, r0
 8007a46:	4603      	mov	r3, r0
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d100      	bne.n	8007a4e <memset+0xa>
 8007a4c:	4770      	bx	lr
 8007a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a52:	e7f9      	b.n	8007a48 <memset+0x4>

08007a54 <_localeconv_r>:
 8007a54:	4800      	ldr	r0, [pc, #0]	@ (8007a58 <_localeconv_r+0x4>)
 8007a56:	4770      	bx	lr
 8007a58:	20000b94 	.word	0x20000b94

08007a5c <_close_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4d06      	ldr	r5, [pc, #24]	@ (8007a78 <_close_r+0x1c>)
 8007a60:	2300      	movs	r3, #0
 8007a62:	4604      	mov	r4, r0
 8007a64:	4608      	mov	r0, r1
 8007a66:	602b      	str	r3, [r5, #0]
 8007a68:	f7fa fc10 	bl	800228c <_close>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d102      	bne.n	8007a76 <_close_r+0x1a>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	b103      	cbz	r3, 8007a76 <_close_r+0x1a>
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	20001df8 	.word	0x20001df8

08007a7c <_lseek_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	4d07      	ldr	r5, [pc, #28]	@ (8007a9c <_lseek_r+0x20>)
 8007a80:	4604      	mov	r4, r0
 8007a82:	4608      	mov	r0, r1
 8007a84:	4611      	mov	r1, r2
 8007a86:	2200      	movs	r2, #0
 8007a88:	602a      	str	r2, [r5, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	f7fa fc25 	bl	80022da <_lseek>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	d102      	bne.n	8007a9a <_lseek_r+0x1e>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	b103      	cbz	r3, 8007a9a <_lseek_r+0x1e>
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}
 8007a9c:	20001df8 	.word	0x20001df8

08007aa0 <_read_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4d07      	ldr	r5, [pc, #28]	@ (8007ac0 <_read_r+0x20>)
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	4608      	mov	r0, r1
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	2200      	movs	r2, #0
 8007aac:	602a      	str	r2, [r5, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f7fa fbb3 	bl	800221a <_read>
 8007ab4:	1c43      	adds	r3, r0, #1
 8007ab6:	d102      	bne.n	8007abe <_read_r+0x1e>
 8007ab8:	682b      	ldr	r3, [r5, #0]
 8007aba:	b103      	cbz	r3, 8007abe <_read_r+0x1e>
 8007abc:	6023      	str	r3, [r4, #0]
 8007abe:	bd38      	pop	{r3, r4, r5, pc}
 8007ac0:	20001df8 	.word	0x20001df8

08007ac4 <_write_r>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	4d07      	ldr	r5, [pc, #28]	@ (8007ae4 <_write_r+0x20>)
 8007ac8:	4604      	mov	r4, r0
 8007aca:	4608      	mov	r0, r1
 8007acc:	4611      	mov	r1, r2
 8007ace:	2200      	movs	r2, #0
 8007ad0:	602a      	str	r2, [r5, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f7fa fbbe 	bl	8002254 <_write>
 8007ad8:	1c43      	adds	r3, r0, #1
 8007ada:	d102      	bne.n	8007ae2 <_write_r+0x1e>
 8007adc:	682b      	ldr	r3, [r5, #0]
 8007ade:	b103      	cbz	r3, 8007ae2 <_write_r+0x1e>
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}
 8007ae4:	20001df8 	.word	0x20001df8

08007ae8 <__errno>:
 8007ae8:	4b01      	ldr	r3, [pc, #4]	@ (8007af0 <__errno+0x8>)
 8007aea:	6818      	ldr	r0, [r3, #0]
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	20000a54 	.word	0x20000a54

08007af4 <__libc_init_array>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	4d0d      	ldr	r5, [pc, #52]	@ (8007b2c <__libc_init_array+0x38>)
 8007af8:	4c0d      	ldr	r4, [pc, #52]	@ (8007b30 <__libc_init_array+0x3c>)
 8007afa:	1b64      	subs	r4, r4, r5
 8007afc:	10a4      	asrs	r4, r4, #2
 8007afe:	2600      	movs	r6, #0
 8007b00:	42a6      	cmp	r6, r4
 8007b02:	d109      	bne.n	8007b18 <__libc_init_array+0x24>
 8007b04:	4d0b      	ldr	r5, [pc, #44]	@ (8007b34 <__libc_init_array+0x40>)
 8007b06:	4c0c      	ldr	r4, [pc, #48]	@ (8007b38 <__libc_init_array+0x44>)
 8007b08:	f002 f8b8 	bl	8009c7c <_init>
 8007b0c:	1b64      	subs	r4, r4, r5
 8007b0e:	10a4      	asrs	r4, r4, #2
 8007b10:	2600      	movs	r6, #0
 8007b12:	42a6      	cmp	r6, r4
 8007b14:	d105      	bne.n	8007b22 <__libc_init_array+0x2e>
 8007b16:	bd70      	pop	{r4, r5, r6, pc}
 8007b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b1c:	4798      	blx	r3
 8007b1e:	3601      	adds	r6, #1
 8007b20:	e7ee      	b.n	8007b00 <__libc_init_array+0xc>
 8007b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b26:	4798      	blx	r3
 8007b28:	3601      	adds	r6, #1
 8007b2a:	e7f2      	b.n	8007b12 <__libc_init_array+0x1e>
 8007b2c:	0800a1b8 	.word	0x0800a1b8
 8007b30:	0800a1b8 	.word	0x0800a1b8
 8007b34:	0800a1b8 	.word	0x0800a1b8
 8007b38:	0800a1bc 	.word	0x0800a1bc

08007b3c <__retarget_lock_init_recursive>:
 8007b3c:	4770      	bx	lr

08007b3e <__retarget_lock_acquire_recursive>:
 8007b3e:	4770      	bx	lr

08007b40 <__retarget_lock_release_recursive>:
 8007b40:	4770      	bx	lr

08007b42 <quorem>:
 8007b42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b46:	6903      	ldr	r3, [r0, #16]
 8007b48:	690c      	ldr	r4, [r1, #16]
 8007b4a:	42a3      	cmp	r3, r4
 8007b4c:	4607      	mov	r7, r0
 8007b4e:	db7e      	blt.n	8007c4e <quorem+0x10c>
 8007b50:	3c01      	subs	r4, #1
 8007b52:	f101 0814 	add.w	r8, r1, #20
 8007b56:	00a3      	lsls	r3, r4, #2
 8007b58:	f100 0514 	add.w	r5, r0, #20
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b62:	9301      	str	r3, [sp, #4]
 8007b64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b74:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b78:	d32e      	bcc.n	8007bd8 <quorem+0x96>
 8007b7a:	f04f 0a00 	mov.w	sl, #0
 8007b7e:	46c4      	mov	ip, r8
 8007b80:	46ae      	mov	lr, r5
 8007b82:	46d3      	mov	fp, sl
 8007b84:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b88:	b298      	uxth	r0, r3
 8007b8a:	fb06 a000 	mla	r0, r6, r0, sl
 8007b8e:	0c02      	lsrs	r2, r0, #16
 8007b90:	0c1b      	lsrs	r3, r3, #16
 8007b92:	fb06 2303 	mla	r3, r6, r3, r2
 8007b96:	f8de 2000 	ldr.w	r2, [lr]
 8007b9a:	b280      	uxth	r0, r0
 8007b9c:	b292      	uxth	r2, r2
 8007b9e:	1a12      	subs	r2, r2, r0
 8007ba0:	445a      	add	r2, fp
 8007ba2:	f8de 0000 	ldr.w	r0, [lr]
 8007ba6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007bb0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007bb4:	b292      	uxth	r2, r2
 8007bb6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007bba:	45e1      	cmp	r9, ip
 8007bbc:	f84e 2b04 	str.w	r2, [lr], #4
 8007bc0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007bc4:	d2de      	bcs.n	8007b84 <quorem+0x42>
 8007bc6:	9b00      	ldr	r3, [sp, #0]
 8007bc8:	58eb      	ldr	r3, [r5, r3]
 8007bca:	b92b      	cbnz	r3, 8007bd8 <quorem+0x96>
 8007bcc:	9b01      	ldr	r3, [sp, #4]
 8007bce:	3b04      	subs	r3, #4
 8007bd0:	429d      	cmp	r5, r3
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	d32f      	bcc.n	8007c36 <quorem+0xf4>
 8007bd6:	613c      	str	r4, [r7, #16]
 8007bd8:	4638      	mov	r0, r7
 8007bda:	f001 f97b 	bl	8008ed4 <__mcmp>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	db25      	blt.n	8007c2e <quorem+0xec>
 8007be2:	4629      	mov	r1, r5
 8007be4:	2000      	movs	r0, #0
 8007be6:	f858 2b04 	ldr.w	r2, [r8], #4
 8007bea:	f8d1 c000 	ldr.w	ip, [r1]
 8007bee:	fa1f fe82 	uxth.w	lr, r2
 8007bf2:	fa1f f38c 	uxth.w	r3, ip
 8007bf6:	eba3 030e 	sub.w	r3, r3, lr
 8007bfa:	4403      	add	r3, r0
 8007bfc:	0c12      	lsrs	r2, r2, #16
 8007bfe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c02:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c0c:	45c1      	cmp	r9, r8
 8007c0e:	f841 3b04 	str.w	r3, [r1], #4
 8007c12:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c16:	d2e6      	bcs.n	8007be6 <quorem+0xa4>
 8007c18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c20:	b922      	cbnz	r2, 8007c2c <quorem+0xea>
 8007c22:	3b04      	subs	r3, #4
 8007c24:	429d      	cmp	r5, r3
 8007c26:	461a      	mov	r2, r3
 8007c28:	d30b      	bcc.n	8007c42 <quorem+0x100>
 8007c2a:	613c      	str	r4, [r7, #16]
 8007c2c:	3601      	adds	r6, #1
 8007c2e:	4630      	mov	r0, r6
 8007c30:	b003      	add	sp, #12
 8007c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c36:	6812      	ldr	r2, [r2, #0]
 8007c38:	3b04      	subs	r3, #4
 8007c3a:	2a00      	cmp	r2, #0
 8007c3c:	d1cb      	bne.n	8007bd6 <quorem+0x94>
 8007c3e:	3c01      	subs	r4, #1
 8007c40:	e7c6      	b.n	8007bd0 <quorem+0x8e>
 8007c42:	6812      	ldr	r2, [r2, #0]
 8007c44:	3b04      	subs	r3, #4
 8007c46:	2a00      	cmp	r2, #0
 8007c48:	d1ef      	bne.n	8007c2a <quorem+0xe8>
 8007c4a:	3c01      	subs	r4, #1
 8007c4c:	e7ea      	b.n	8007c24 <quorem+0xe2>
 8007c4e:	2000      	movs	r0, #0
 8007c50:	e7ee      	b.n	8007c30 <quorem+0xee>
 8007c52:	0000      	movs	r0, r0
 8007c54:	0000      	movs	r0, r0
	...

08007c58 <_dtoa_r>:
 8007c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5c:	69c7      	ldr	r7, [r0, #28]
 8007c5e:	b099      	sub	sp, #100	@ 0x64
 8007c60:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007c64:	ec55 4b10 	vmov	r4, r5, d0
 8007c68:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007c6a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c6c:	4683      	mov	fp, r0
 8007c6e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c72:	b97f      	cbnz	r7, 8007c94 <_dtoa_r+0x3c>
 8007c74:	2010      	movs	r0, #16
 8007c76:	f000 fdfd 	bl	8008874 <malloc>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007c80:	b920      	cbnz	r0, 8007c8c <_dtoa_r+0x34>
 8007c82:	4ba7      	ldr	r3, [pc, #668]	@ (8007f20 <_dtoa_r+0x2c8>)
 8007c84:	21ef      	movs	r1, #239	@ 0xef
 8007c86:	48a7      	ldr	r0, [pc, #668]	@ (8007f24 <_dtoa_r+0x2cc>)
 8007c88:	f001 fcbc 	bl	8009604 <__assert_func>
 8007c8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007c90:	6007      	str	r7, [r0, #0]
 8007c92:	60c7      	str	r7, [r0, #12]
 8007c94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c98:	6819      	ldr	r1, [r3, #0]
 8007c9a:	b159      	cbz	r1, 8007cb4 <_dtoa_r+0x5c>
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	604a      	str	r2, [r1, #4]
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	4093      	lsls	r3, r2
 8007ca4:	608b      	str	r3, [r1, #8]
 8007ca6:	4658      	mov	r0, fp
 8007ca8:	f000 feda 	bl	8008a60 <_Bfree>
 8007cac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	1e2b      	subs	r3, r5, #0
 8007cb6:	bfb9      	ittee	lt
 8007cb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007cbc:	9303      	strlt	r3, [sp, #12]
 8007cbe:	2300      	movge	r3, #0
 8007cc0:	6033      	strge	r3, [r6, #0]
 8007cc2:	9f03      	ldr	r7, [sp, #12]
 8007cc4:	4b98      	ldr	r3, [pc, #608]	@ (8007f28 <_dtoa_r+0x2d0>)
 8007cc6:	bfbc      	itt	lt
 8007cc8:	2201      	movlt	r2, #1
 8007cca:	6032      	strlt	r2, [r6, #0]
 8007ccc:	43bb      	bics	r3, r7
 8007cce:	d112      	bne.n	8007cf6 <_dtoa_r+0x9e>
 8007cd0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007cd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007cdc:	4323      	orrs	r3, r4
 8007cde:	f000 854d 	beq.w	800877c <_dtoa_r+0xb24>
 8007ce2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ce4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007f3c <_dtoa_r+0x2e4>
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 854f 	beq.w	800878c <_dtoa_r+0xb34>
 8007cee:	f10a 0303 	add.w	r3, sl, #3
 8007cf2:	f000 bd49 	b.w	8008788 <_dtoa_r+0xb30>
 8007cf6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	ec51 0b17 	vmov	r0, r1, d7
 8007d00:	2300      	movs	r3, #0
 8007d02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007d06:	f7f8 fedf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d0a:	4680      	mov	r8, r0
 8007d0c:	b158      	cbz	r0, 8007d26 <_dtoa_r+0xce>
 8007d0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d10:	2301      	movs	r3, #1
 8007d12:	6013      	str	r3, [r2, #0]
 8007d14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d16:	b113      	cbz	r3, 8007d1e <_dtoa_r+0xc6>
 8007d18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d1a:	4b84      	ldr	r3, [pc, #528]	@ (8007f2c <_dtoa_r+0x2d4>)
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007f40 <_dtoa_r+0x2e8>
 8007d22:	f000 bd33 	b.w	800878c <_dtoa_r+0xb34>
 8007d26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007d2a:	aa16      	add	r2, sp, #88	@ 0x58
 8007d2c:	a917      	add	r1, sp, #92	@ 0x5c
 8007d2e:	4658      	mov	r0, fp
 8007d30:	f001 f980 	bl	8009034 <__d2b>
 8007d34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007d38:	4681      	mov	r9, r0
 8007d3a:	2e00      	cmp	r6, #0
 8007d3c:	d077      	beq.n	8007e2e <_dtoa_r+0x1d6>
 8007d3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007d50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007d54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007d58:	4619      	mov	r1, r3
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	4b74      	ldr	r3, [pc, #464]	@ (8007f30 <_dtoa_r+0x2d8>)
 8007d5e:	f7f8 fa93 	bl	8000288 <__aeabi_dsub>
 8007d62:	a369      	add	r3, pc, #420	@ (adr r3, 8007f08 <_dtoa_r+0x2b0>)
 8007d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d68:	f7f8 fc46 	bl	80005f8 <__aeabi_dmul>
 8007d6c:	a368      	add	r3, pc, #416	@ (adr r3, 8007f10 <_dtoa_r+0x2b8>)
 8007d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d72:	f7f8 fa8b 	bl	800028c <__adddf3>
 8007d76:	4604      	mov	r4, r0
 8007d78:	4630      	mov	r0, r6
 8007d7a:	460d      	mov	r5, r1
 8007d7c:	f7f8 fbd2 	bl	8000524 <__aeabi_i2d>
 8007d80:	a365      	add	r3, pc, #404	@ (adr r3, 8007f18 <_dtoa_r+0x2c0>)
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	f7f8 fc37 	bl	80005f8 <__aeabi_dmul>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4620      	mov	r0, r4
 8007d90:	4629      	mov	r1, r5
 8007d92:	f7f8 fa7b 	bl	800028c <__adddf3>
 8007d96:	4604      	mov	r4, r0
 8007d98:	460d      	mov	r5, r1
 8007d9a:	f7f8 fedd 	bl	8000b58 <__aeabi_d2iz>
 8007d9e:	2200      	movs	r2, #0
 8007da0:	4607      	mov	r7, r0
 8007da2:	2300      	movs	r3, #0
 8007da4:	4620      	mov	r0, r4
 8007da6:	4629      	mov	r1, r5
 8007da8:	f7f8 fe98 	bl	8000adc <__aeabi_dcmplt>
 8007dac:	b140      	cbz	r0, 8007dc0 <_dtoa_r+0x168>
 8007dae:	4638      	mov	r0, r7
 8007db0:	f7f8 fbb8 	bl	8000524 <__aeabi_i2d>
 8007db4:	4622      	mov	r2, r4
 8007db6:	462b      	mov	r3, r5
 8007db8:	f7f8 fe86 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dbc:	b900      	cbnz	r0, 8007dc0 <_dtoa_r+0x168>
 8007dbe:	3f01      	subs	r7, #1
 8007dc0:	2f16      	cmp	r7, #22
 8007dc2:	d851      	bhi.n	8007e68 <_dtoa_r+0x210>
 8007dc4:	4b5b      	ldr	r3, [pc, #364]	@ (8007f34 <_dtoa_r+0x2dc>)
 8007dc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dd2:	f7f8 fe83 	bl	8000adc <__aeabi_dcmplt>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d048      	beq.n	8007e6c <_dtoa_r+0x214>
 8007dda:	3f01      	subs	r7, #1
 8007ddc:	2300      	movs	r3, #0
 8007dde:	9312      	str	r3, [sp, #72]	@ 0x48
 8007de0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007de2:	1b9b      	subs	r3, r3, r6
 8007de4:	1e5a      	subs	r2, r3, #1
 8007de6:	bf44      	itt	mi
 8007de8:	f1c3 0801 	rsbmi	r8, r3, #1
 8007dec:	2300      	movmi	r3, #0
 8007dee:	9208      	str	r2, [sp, #32]
 8007df0:	bf54      	ite	pl
 8007df2:	f04f 0800 	movpl.w	r8, #0
 8007df6:	9308      	strmi	r3, [sp, #32]
 8007df8:	2f00      	cmp	r7, #0
 8007dfa:	db39      	blt.n	8007e70 <_dtoa_r+0x218>
 8007dfc:	9b08      	ldr	r3, [sp, #32]
 8007dfe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007e00:	443b      	add	r3, r7
 8007e02:	9308      	str	r3, [sp, #32]
 8007e04:	2300      	movs	r3, #0
 8007e06:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e0a:	2b09      	cmp	r3, #9
 8007e0c:	d864      	bhi.n	8007ed8 <_dtoa_r+0x280>
 8007e0e:	2b05      	cmp	r3, #5
 8007e10:	bfc4      	itt	gt
 8007e12:	3b04      	subgt	r3, #4
 8007e14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e18:	f1a3 0302 	sub.w	r3, r3, #2
 8007e1c:	bfcc      	ite	gt
 8007e1e:	2400      	movgt	r4, #0
 8007e20:	2401      	movle	r4, #1
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d863      	bhi.n	8007eee <_dtoa_r+0x296>
 8007e26:	e8df f003 	tbb	[pc, r3]
 8007e2a:	372a      	.short	0x372a
 8007e2c:	5535      	.short	0x5535
 8007e2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007e32:	441e      	add	r6, r3
 8007e34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e38:	2b20      	cmp	r3, #32
 8007e3a:	bfc1      	itttt	gt
 8007e3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e40:	409f      	lslgt	r7, r3
 8007e42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e46:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e4a:	bfd6      	itet	le
 8007e4c:	f1c3 0320 	rsble	r3, r3, #32
 8007e50:	ea47 0003 	orrgt.w	r0, r7, r3
 8007e54:	fa04 f003 	lslle.w	r0, r4, r3
 8007e58:	f7f8 fb54 	bl	8000504 <__aeabi_ui2d>
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007e62:	3e01      	subs	r6, #1
 8007e64:	9214      	str	r2, [sp, #80]	@ 0x50
 8007e66:	e777      	b.n	8007d58 <_dtoa_r+0x100>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e7b8      	b.n	8007dde <_dtoa_r+0x186>
 8007e6c:	9012      	str	r0, [sp, #72]	@ 0x48
 8007e6e:	e7b7      	b.n	8007de0 <_dtoa_r+0x188>
 8007e70:	427b      	negs	r3, r7
 8007e72:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e74:	2300      	movs	r3, #0
 8007e76:	eba8 0807 	sub.w	r8, r8, r7
 8007e7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e7c:	e7c4      	b.n	8007e08 <_dtoa_r+0x1b0>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	dc35      	bgt.n	8007ef4 <_dtoa_r+0x29c>
 8007e88:	2301      	movs	r3, #1
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	9307      	str	r3, [sp, #28]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e92:	e00b      	b.n	8007eac <_dtoa_r+0x254>
 8007e94:	2301      	movs	r3, #1
 8007e96:	e7f3      	b.n	8007e80 <_dtoa_r+0x228>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e9e:	18fb      	adds	r3, r7, r3
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	9307      	str	r3, [sp, #28]
 8007ea8:	bfb8      	it	lt
 8007eaa:	2301      	movlt	r3, #1
 8007eac:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	2204      	movs	r2, #4
 8007eb4:	f102 0514 	add.w	r5, r2, #20
 8007eb8:	429d      	cmp	r5, r3
 8007eba:	d91f      	bls.n	8007efc <_dtoa_r+0x2a4>
 8007ebc:	6041      	str	r1, [r0, #4]
 8007ebe:	4658      	mov	r0, fp
 8007ec0:	f000 fd8e 	bl	80089e0 <_Balloc>
 8007ec4:	4682      	mov	sl, r0
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	d13c      	bne.n	8007f44 <_dtoa_r+0x2ec>
 8007eca:	4b1b      	ldr	r3, [pc, #108]	@ (8007f38 <_dtoa_r+0x2e0>)
 8007ecc:	4602      	mov	r2, r0
 8007ece:	f240 11af 	movw	r1, #431	@ 0x1af
 8007ed2:	e6d8      	b.n	8007c86 <_dtoa_r+0x2e>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e7e0      	b.n	8007e9a <_dtoa_r+0x242>
 8007ed8:	2401      	movs	r4, #1
 8007eda:	2300      	movs	r3, #0
 8007edc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ede:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	9307      	str	r3, [sp, #28]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2312      	movs	r3, #18
 8007eec:	e7d0      	b.n	8007e90 <_dtoa_r+0x238>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ef2:	e7f5      	b.n	8007ee0 <_dtoa_r+0x288>
 8007ef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	9307      	str	r3, [sp, #28]
 8007efa:	e7d7      	b.n	8007eac <_dtoa_r+0x254>
 8007efc:	3101      	adds	r1, #1
 8007efe:	0052      	lsls	r2, r2, #1
 8007f00:	e7d8      	b.n	8007eb4 <_dtoa_r+0x25c>
 8007f02:	bf00      	nop
 8007f04:	f3af 8000 	nop.w
 8007f08:	636f4361 	.word	0x636f4361
 8007f0c:	3fd287a7 	.word	0x3fd287a7
 8007f10:	8b60c8b3 	.word	0x8b60c8b3
 8007f14:	3fc68a28 	.word	0x3fc68a28
 8007f18:	509f79fb 	.word	0x509f79fb
 8007f1c:	3fd34413 	.word	0x3fd34413
 8007f20:	08009e81 	.word	0x08009e81
 8007f24:	08009e98 	.word	0x08009e98
 8007f28:	7ff00000 	.word	0x7ff00000
 8007f2c:	08009e51 	.word	0x08009e51
 8007f30:	3ff80000 	.word	0x3ff80000
 8007f34:	08009f90 	.word	0x08009f90
 8007f38:	08009ef0 	.word	0x08009ef0
 8007f3c:	08009e7d 	.word	0x08009e7d
 8007f40:	08009e50 	.word	0x08009e50
 8007f44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f48:	6018      	str	r0, [r3, #0]
 8007f4a:	9b07      	ldr	r3, [sp, #28]
 8007f4c:	2b0e      	cmp	r3, #14
 8007f4e:	f200 80a4 	bhi.w	800809a <_dtoa_r+0x442>
 8007f52:	2c00      	cmp	r4, #0
 8007f54:	f000 80a1 	beq.w	800809a <_dtoa_r+0x442>
 8007f58:	2f00      	cmp	r7, #0
 8007f5a:	dd33      	ble.n	8007fc4 <_dtoa_r+0x36c>
 8007f5c:	4bad      	ldr	r3, [pc, #692]	@ (8008214 <_dtoa_r+0x5bc>)
 8007f5e:	f007 020f 	and.w	r2, r7, #15
 8007f62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f66:	ed93 7b00 	vldr	d7, [r3]
 8007f6a:	05f8      	lsls	r0, r7, #23
 8007f6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007f70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007f74:	d516      	bpl.n	8007fa4 <_dtoa_r+0x34c>
 8007f76:	4ba8      	ldr	r3, [pc, #672]	@ (8008218 <_dtoa_r+0x5c0>)
 8007f78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f80:	f7f8 fc64 	bl	800084c <__aeabi_ddiv>
 8007f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f88:	f004 040f 	and.w	r4, r4, #15
 8007f8c:	2603      	movs	r6, #3
 8007f8e:	4da2      	ldr	r5, [pc, #648]	@ (8008218 <_dtoa_r+0x5c0>)
 8007f90:	b954      	cbnz	r4, 8007fa8 <_dtoa_r+0x350>
 8007f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f9a:	f7f8 fc57 	bl	800084c <__aeabi_ddiv>
 8007f9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fa2:	e028      	b.n	8007ff6 <_dtoa_r+0x39e>
 8007fa4:	2602      	movs	r6, #2
 8007fa6:	e7f2      	b.n	8007f8e <_dtoa_r+0x336>
 8007fa8:	07e1      	lsls	r1, r4, #31
 8007faa:	d508      	bpl.n	8007fbe <_dtoa_r+0x366>
 8007fac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fb4:	f7f8 fb20 	bl	80005f8 <__aeabi_dmul>
 8007fb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fbc:	3601      	adds	r6, #1
 8007fbe:	1064      	asrs	r4, r4, #1
 8007fc0:	3508      	adds	r5, #8
 8007fc2:	e7e5      	b.n	8007f90 <_dtoa_r+0x338>
 8007fc4:	f000 80d2 	beq.w	800816c <_dtoa_r+0x514>
 8007fc8:	427c      	negs	r4, r7
 8007fca:	4b92      	ldr	r3, [pc, #584]	@ (8008214 <_dtoa_r+0x5bc>)
 8007fcc:	4d92      	ldr	r5, [pc, #584]	@ (8008218 <_dtoa_r+0x5c0>)
 8007fce:	f004 020f 	and.w	r2, r4, #15
 8007fd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fde:	f7f8 fb0b 	bl	80005f8 <__aeabi_dmul>
 8007fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fe6:	1124      	asrs	r4, r4, #4
 8007fe8:	2300      	movs	r3, #0
 8007fea:	2602      	movs	r6, #2
 8007fec:	2c00      	cmp	r4, #0
 8007fee:	f040 80b2 	bne.w	8008156 <_dtoa_r+0x4fe>
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1d3      	bne.n	8007f9e <_dtoa_r+0x346>
 8007ff6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ff8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 80b7 	beq.w	8008170 <_dtoa_r+0x518>
 8008002:	4b86      	ldr	r3, [pc, #536]	@ (800821c <_dtoa_r+0x5c4>)
 8008004:	2200      	movs	r2, #0
 8008006:	4620      	mov	r0, r4
 8008008:	4629      	mov	r1, r5
 800800a:	f7f8 fd67 	bl	8000adc <__aeabi_dcmplt>
 800800e:	2800      	cmp	r0, #0
 8008010:	f000 80ae 	beq.w	8008170 <_dtoa_r+0x518>
 8008014:	9b07      	ldr	r3, [sp, #28]
 8008016:	2b00      	cmp	r3, #0
 8008018:	f000 80aa 	beq.w	8008170 <_dtoa_r+0x518>
 800801c:	9b00      	ldr	r3, [sp, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	dd37      	ble.n	8008092 <_dtoa_r+0x43a>
 8008022:	1e7b      	subs	r3, r7, #1
 8008024:	9304      	str	r3, [sp, #16]
 8008026:	4620      	mov	r0, r4
 8008028:	4b7d      	ldr	r3, [pc, #500]	@ (8008220 <_dtoa_r+0x5c8>)
 800802a:	2200      	movs	r2, #0
 800802c:	4629      	mov	r1, r5
 800802e:	f7f8 fae3 	bl	80005f8 <__aeabi_dmul>
 8008032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008036:	9c00      	ldr	r4, [sp, #0]
 8008038:	3601      	adds	r6, #1
 800803a:	4630      	mov	r0, r6
 800803c:	f7f8 fa72 	bl	8000524 <__aeabi_i2d>
 8008040:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008044:	f7f8 fad8 	bl	80005f8 <__aeabi_dmul>
 8008048:	4b76      	ldr	r3, [pc, #472]	@ (8008224 <_dtoa_r+0x5cc>)
 800804a:	2200      	movs	r2, #0
 800804c:	f7f8 f91e 	bl	800028c <__adddf3>
 8008050:	4605      	mov	r5, r0
 8008052:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008056:	2c00      	cmp	r4, #0
 8008058:	f040 808d 	bne.w	8008176 <_dtoa_r+0x51e>
 800805c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008060:	4b71      	ldr	r3, [pc, #452]	@ (8008228 <_dtoa_r+0x5d0>)
 8008062:	2200      	movs	r2, #0
 8008064:	f7f8 f910 	bl	8000288 <__aeabi_dsub>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008070:	462a      	mov	r2, r5
 8008072:	4633      	mov	r3, r6
 8008074:	f7f8 fd50 	bl	8000b18 <__aeabi_dcmpgt>
 8008078:	2800      	cmp	r0, #0
 800807a:	f040 828b 	bne.w	8008594 <_dtoa_r+0x93c>
 800807e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008082:	462a      	mov	r2, r5
 8008084:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008088:	f7f8 fd28 	bl	8000adc <__aeabi_dcmplt>
 800808c:	2800      	cmp	r0, #0
 800808e:	f040 8128 	bne.w	80082e2 <_dtoa_r+0x68a>
 8008092:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008096:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800809a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800809c:	2b00      	cmp	r3, #0
 800809e:	f2c0 815a 	blt.w	8008356 <_dtoa_r+0x6fe>
 80080a2:	2f0e      	cmp	r7, #14
 80080a4:	f300 8157 	bgt.w	8008356 <_dtoa_r+0x6fe>
 80080a8:	4b5a      	ldr	r3, [pc, #360]	@ (8008214 <_dtoa_r+0x5bc>)
 80080aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080ae:	ed93 7b00 	vldr	d7, [r3]
 80080b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	ed8d 7b00 	vstr	d7, [sp]
 80080ba:	da03      	bge.n	80080c4 <_dtoa_r+0x46c>
 80080bc:	9b07      	ldr	r3, [sp, #28]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f340 8101 	ble.w	80082c6 <_dtoa_r+0x66e>
 80080c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80080c8:	4656      	mov	r6, sl
 80080ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080ce:	4620      	mov	r0, r4
 80080d0:	4629      	mov	r1, r5
 80080d2:	f7f8 fbbb 	bl	800084c <__aeabi_ddiv>
 80080d6:	f7f8 fd3f 	bl	8000b58 <__aeabi_d2iz>
 80080da:	4680      	mov	r8, r0
 80080dc:	f7f8 fa22 	bl	8000524 <__aeabi_i2d>
 80080e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080e4:	f7f8 fa88 	bl	80005f8 <__aeabi_dmul>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	4620      	mov	r0, r4
 80080ee:	4629      	mov	r1, r5
 80080f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80080f4:	f7f8 f8c8 	bl	8000288 <__aeabi_dsub>
 80080f8:	f806 4b01 	strb.w	r4, [r6], #1
 80080fc:	9d07      	ldr	r5, [sp, #28]
 80080fe:	eba6 040a 	sub.w	r4, r6, sl
 8008102:	42a5      	cmp	r5, r4
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	f040 8117 	bne.w	800833a <_dtoa_r+0x6e2>
 800810c:	f7f8 f8be 	bl	800028c <__adddf3>
 8008110:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008114:	4604      	mov	r4, r0
 8008116:	460d      	mov	r5, r1
 8008118:	f7f8 fcfe 	bl	8000b18 <__aeabi_dcmpgt>
 800811c:	2800      	cmp	r0, #0
 800811e:	f040 80f9 	bne.w	8008314 <_dtoa_r+0x6bc>
 8008122:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008126:	4620      	mov	r0, r4
 8008128:	4629      	mov	r1, r5
 800812a:	f7f8 fccd 	bl	8000ac8 <__aeabi_dcmpeq>
 800812e:	b118      	cbz	r0, 8008138 <_dtoa_r+0x4e0>
 8008130:	f018 0f01 	tst.w	r8, #1
 8008134:	f040 80ee 	bne.w	8008314 <_dtoa_r+0x6bc>
 8008138:	4649      	mov	r1, r9
 800813a:	4658      	mov	r0, fp
 800813c:	f000 fc90 	bl	8008a60 <_Bfree>
 8008140:	2300      	movs	r3, #0
 8008142:	7033      	strb	r3, [r6, #0]
 8008144:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008146:	3701      	adds	r7, #1
 8008148:	601f      	str	r7, [r3, #0]
 800814a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 831d 	beq.w	800878c <_dtoa_r+0xb34>
 8008152:	601e      	str	r6, [r3, #0]
 8008154:	e31a      	b.n	800878c <_dtoa_r+0xb34>
 8008156:	07e2      	lsls	r2, r4, #31
 8008158:	d505      	bpl.n	8008166 <_dtoa_r+0x50e>
 800815a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800815e:	f7f8 fa4b 	bl	80005f8 <__aeabi_dmul>
 8008162:	3601      	adds	r6, #1
 8008164:	2301      	movs	r3, #1
 8008166:	1064      	asrs	r4, r4, #1
 8008168:	3508      	adds	r5, #8
 800816a:	e73f      	b.n	8007fec <_dtoa_r+0x394>
 800816c:	2602      	movs	r6, #2
 800816e:	e742      	b.n	8007ff6 <_dtoa_r+0x39e>
 8008170:	9c07      	ldr	r4, [sp, #28]
 8008172:	9704      	str	r7, [sp, #16]
 8008174:	e761      	b.n	800803a <_dtoa_r+0x3e2>
 8008176:	4b27      	ldr	r3, [pc, #156]	@ (8008214 <_dtoa_r+0x5bc>)
 8008178:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800817a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800817e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008182:	4454      	add	r4, sl
 8008184:	2900      	cmp	r1, #0
 8008186:	d053      	beq.n	8008230 <_dtoa_r+0x5d8>
 8008188:	4928      	ldr	r1, [pc, #160]	@ (800822c <_dtoa_r+0x5d4>)
 800818a:	2000      	movs	r0, #0
 800818c:	f7f8 fb5e 	bl	800084c <__aeabi_ddiv>
 8008190:	4633      	mov	r3, r6
 8008192:	462a      	mov	r2, r5
 8008194:	f7f8 f878 	bl	8000288 <__aeabi_dsub>
 8008198:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800819c:	4656      	mov	r6, sl
 800819e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081a2:	f7f8 fcd9 	bl	8000b58 <__aeabi_d2iz>
 80081a6:	4605      	mov	r5, r0
 80081a8:	f7f8 f9bc 	bl	8000524 <__aeabi_i2d>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081b4:	f7f8 f868 	bl	8000288 <__aeabi_dsub>
 80081b8:	3530      	adds	r5, #48	@ 0x30
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081c2:	f806 5b01 	strb.w	r5, [r6], #1
 80081c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081ca:	f7f8 fc87 	bl	8000adc <__aeabi_dcmplt>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d171      	bne.n	80082b6 <_dtoa_r+0x65e>
 80081d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081d6:	4911      	ldr	r1, [pc, #68]	@ (800821c <_dtoa_r+0x5c4>)
 80081d8:	2000      	movs	r0, #0
 80081da:	f7f8 f855 	bl	8000288 <__aeabi_dsub>
 80081de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081e2:	f7f8 fc7b 	bl	8000adc <__aeabi_dcmplt>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	f040 8095 	bne.w	8008316 <_dtoa_r+0x6be>
 80081ec:	42a6      	cmp	r6, r4
 80081ee:	f43f af50 	beq.w	8008092 <_dtoa_r+0x43a>
 80081f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80081f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008220 <_dtoa_r+0x5c8>)
 80081f8:	2200      	movs	r2, #0
 80081fa:	f7f8 f9fd 	bl	80005f8 <__aeabi_dmul>
 80081fe:	4b08      	ldr	r3, [pc, #32]	@ (8008220 <_dtoa_r+0x5c8>)
 8008200:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008204:	2200      	movs	r2, #0
 8008206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800820a:	f7f8 f9f5 	bl	80005f8 <__aeabi_dmul>
 800820e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008212:	e7c4      	b.n	800819e <_dtoa_r+0x546>
 8008214:	08009f90 	.word	0x08009f90
 8008218:	08009f68 	.word	0x08009f68
 800821c:	3ff00000 	.word	0x3ff00000
 8008220:	40240000 	.word	0x40240000
 8008224:	401c0000 	.word	0x401c0000
 8008228:	40140000 	.word	0x40140000
 800822c:	3fe00000 	.word	0x3fe00000
 8008230:	4631      	mov	r1, r6
 8008232:	4628      	mov	r0, r5
 8008234:	f7f8 f9e0 	bl	80005f8 <__aeabi_dmul>
 8008238:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800823c:	9415      	str	r4, [sp, #84]	@ 0x54
 800823e:	4656      	mov	r6, sl
 8008240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008244:	f7f8 fc88 	bl	8000b58 <__aeabi_d2iz>
 8008248:	4605      	mov	r5, r0
 800824a:	f7f8 f96b 	bl	8000524 <__aeabi_i2d>
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008256:	f7f8 f817 	bl	8000288 <__aeabi_dsub>
 800825a:	3530      	adds	r5, #48	@ 0x30
 800825c:	f806 5b01 	strb.w	r5, [r6], #1
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	42a6      	cmp	r6, r4
 8008266:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800826a:	f04f 0200 	mov.w	r2, #0
 800826e:	d124      	bne.n	80082ba <_dtoa_r+0x662>
 8008270:	4bac      	ldr	r3, [pc, #688]	@ (8008524 <_dtoa_r+0x8cc>)
 8008272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008276:	f7f8 f809 	bl	800028c <__adddf3>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008282:	f7f8 fc49 	bl	8000b18 <__aeabi_dcmpgt>
 8008286:	2800      	cmp	r0, #0
 8008288:	d145      	bne.n	8008316 <_dtoa_r+0x6be>
 800828a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800828e:	49a5      	ldr	r1, [pc, #660]	@ (8008524 <_dtoa_r+0x8cc>)
 8008290:	2000      	movs	r0, #0
 8008292:	f7f7 fff9 	bl	8000288 <__aeabi_dsub>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800829e:	f7f8 fc1d 	bl	8000adc <__aeabi_dcmplt>
 80082a2:	2800      	cmp	r0, #0
 80082a4:	f43f aef5 	beq.w	8008092 <_dtoa_r+0x43a>
 80082a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80082aa:	1e73      	subs	r3, r6, #1
 80082ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80082ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80082b2:	2b30      	cmp	r3, #48	@ 0x30
 80082b4:	d0f8      	beq.n	80082a8 <_dtoa_r+0x650>
 80082b6:	9f04      	ldr	r7, [sp, #16]
 80082b8:	e73e      	b.n	8008138 <_dtoa_r+0x4e0>
 80082ba:	4b9b      	ldr	r3, [pc, #620]	@ (8008528 <_dtoa_r+0x8d0>)
 80082bc:	f7f8 f99c 	bl	80005f8 <__aeabi_dmul>
 80082c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082c4:	e7bc      	b.n	8008240 <_dtoa_r+0x5e8>
 80082c6:	d10c      	bne.n	80082e2 <_dtoa_r+0x68a>
 80082c8:	4b98      	ldr	r3, [pc, #608]	@ (800852c <_dtoa_r+0x8d4>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082d0:	f7f8 f992 	bl	80005f8 <__aeabi_dmul>
 80082d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082d8:	f7f8 fc14 	bl	8000b04 <__aeabi_dcmpge>
 80082dc:	2800      	cmp	r0, #0
 80082de:	f000 8157 	beq.w	8008590 <_dtoa_r+0x938>
 80082e2:	2400      	movs	r4, #0
 80082e4:	4625      	mov	r5, r4
 80082e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082e8:	43db      	mvns	r3, r3
 80082ea:	9304      	str	r3, [sp, #16]
 80082ec:	4656      	mov	r6, sl
 80082ee:	2700      	movs	r7, #0
 80082f0:	4621      	mov	r1, r4
 80082f2:	4658      	mov	r0, fp
 80082f4:	f000 fbb4 	bl	8008a60 <_Bfree>
 80082f8:	2d00      	cmp	r5, #0
 80082fa:	d0dc      	beq.n	80082b6 <_dtoa_r+0x65e>
 80082fc:	b12f      	cbz	r7, 800830a <_dtoa_r+0x6b2>
 80082fe:	42af      	cmp	r7, r5
 8008300:	d003      	beq.n	800830a <_dtoa_r+0x6b2>
 8008302:	4639      	mov	r1, r7
 8008304:	4658      	mov	r0, fp
 8008306:	f000 fbab 	bl	8008a60 <_Bfree>
 800830a:	4629      	mov	r1, r5
 800830c:	4658      	mov	r0, fp
 800830e:	f000 fba7 	bl	8008a60 <_Bfree>
 8008312:	e7d0      	b.n	80082b6 <_dtoa_r+0x65e>
 8008314:	9704      	str	r7, [sp, #16]
 8008316:	4633      	mov	r3, r6
 8008318:	461e      	mov	r6, r3
 800831a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800831e:	2a39      	cmp	r2, #57	@ 0x39
 8008320:	d107      	bne.n	8008332 <_dtoa_r+0x6da>
 8008322:	459a      	cmp	sl, r3
 8008324:	d1f8      	bne.n	8008318 <_dtoa_r+0x6c0>
 8008326:	9a04      	ldr	r2, [sp, #16]
 8008328:	3201      	adds	r2, #1
 800832a:	9204      	str	r2, [sp, #16]
 800832c:	2230      	movs	r2, #48	@ 0x30
 800832e:	f88a 2000 	strb.w	r2, [sl]
 8008332:	781a      	ldrb	r2, [r3, #0]
 8008334:	3201      	adds	r2, #1
 8008336:	701a      	strb	r2, [r3, #0]
 8008338:	e7bd      	b.n	80082b6 <_dtoa_r+0x65e>
 800833a:	4b7b      	ldr	r3, [pc, #492]	@ (8008528 <_dtoa_r+0x8d0>)
 800833c:	2200      	movs	r2, #0
 800833e:	f7f8 f95b 	bl	80005f8 <__aeabi_dmul>
 8008342:	2200      	movs	r2, #0
 8008344:	2300      	movs	r3, #0
 8008346:	4604      	mov	r4, r0
 8008348:	460d      	mov	r5, r1
 800834a:	f7f8 fbbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800834e:	2800      	cmp	r0, #0
 8008350:	f43f aebb 	beq.w	80080ca <_dtoa_r+0x472>
 8008354:	e6f0      	b.n	8008138 <_dtoa_r+0x4e0>
 8008356:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008358:	2a00      	cmp	r2, #0
 800835a:	f000 80db 	beq.w	8008514 <_dtoa_r+0x8bc>
 800835e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008360:	2a01      	cmp	r2, #1
 8008362:	f300 80bf 	bgt.w	80084e4 <_dtoa_r+0x88c>
 8008366:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008368:	2a00      	cmp	r2, #0
 800836a:	f000 80b7 	beq.w	80084dc <_dtoa_r+0x884>
 800836e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008372:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008374:	4646      	mov	r6, r8
 8008376:	9a08      	ldr	r2, [sp, #32]
 8008378:	2101      	movs	r1, #1
 800837a:	441a      	add	r2, r3
 800837c:	4658      	mov	r0, fp
 800837e:	4498      	add	r8, r3
 8008380:	9208      	str	r2, [sp, #32]
 8008382:	f000 fc21 	bl	8008bc8 <__i2b>
 8008386:	4605      	mov	r5, r0
 8008388:	b15e      	cbz	r6, 80083a2 <_dtoa_r+0x74a>
 800838a:	9b08      	ldr	r3, [sp, #32]
 800838c:	2b00      	cmp	r3, #0
 800838e:	dd08      	ble.n	80083a2 <_dtoa_r+0x74a>
 8008390:	42b3      	cmp	r3, r6
 8008392:	9a08      	ldr	r2, [sp, #32]
 8008394:	bfa8      	it	ge
 8008396:	4633      	movge	r3, r6
 8008398:	eba8 0803 	sub.w	r8, r8, r3
 800839c:	1af6      	subs	r6, r6, r3
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	9308      	str	r3, [sp, #32]
 80083a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083a4:	b1f3      	cbz	r3, 80083e4 <_dtoa_r+0x78c>
 80083a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 80b7 	beq.w	800851c <_dtoa_r+0x8c4>
 80083ae:	b18c      	cbz	r4, 80083d4 <_dtoa_r+0x77c>
 80083b0:	4629      	mov	r1, r5
 80083b2:	4622      	mov	r2, r4
 80083b4:	4658      	mov	r0, fp
 80083b6:	f000 fcc7 	bl	8008d48 <__pow5mult>
 80083ba:	464a      	mov	r2, r9
 80083bc:	4601      	mov	r1, r0
 80083be:	4605      	mov	r5, r0
 80083c0:	4658      	mov	r0, fp
 80083c2:	f000 fc17 	bl	8008bf4 <__multiply>
 80083c6:	4649      	mov	r1, r9
 80083c8:	9004      	str	r0, [sp, #16]
 80083ca:	4658      	mov	r0, fp
 80083cc:	f000 fb48 	bl	8008a60 <_Bfree>
 80083d0:	9b04      	ldr	r3, [sp, #16]
 80083d2:	4699      	mov	r9, r3
 80083d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083d6:	1b1a      	subs	r2, r3, r4
 80083d8:	d004      	beq.n	80083e4 <_dtoa_r+0x78c>
 80083da:	4649      	mov	r1, r9
 80083dc:	4658      	mov	r0, fp
 80083de:	f000 fcb3 	bl	8008d48 <__pow5mult>
 80083e2:	4681      	mov	r9, r0
 80083e4:	2101      	movs	r1, #1
 80083e6:	4658      	mov	r0, fp
 80083e8:	f000 fbee 	bl	8008bc8 <__i2b>
 80083ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083ee:	4604      	mov	r4, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f000 81cf 	beq.w	8008794 <_dtoa_r+0xb3c>
 80083f6:	461a      	mov	r2, r3
 80083f8:	4601      	mov	r1, r0
 80083fa:	4658      	mov	r0, fp
 80083fc:	f000 fca4 	bl	8008d48 <__pow5mult>
 8008400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008402:	2b01      	cmp	r3, #1
 8008404:	4604      	mov	r4, r0
 8008406:	f300 8095 	bgt.w	8008534 <_dtoa_r+0x8dc>
 800840a:	9b02      	ldr	r3, [sp, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	f040 8087 	bne.w	8008520 <_dtoa_r+0x8c8>
 8008412:	9b03      	ldr	r3, [sp, #12]
 8008414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008418:	2b00      	cmp	r3, #0
 800841a:	f040 8089 	bne.w	8008530 <_dtoa_r+0x8d8>
 800841e:	9b03      	ldr	r3, [sp, #12]
 8008420:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008424:	0d1b      	lsrs	r3, r3, #20
 8008426:	051b      	lsls	r3, r3, #20
 8008428:	b12b      	cbz	r3, 8008436 <_dtoa_r+0x7de>
 800842a:	9b08      	ldr	r3, [sp, #32]
 800842c:	3301      	adds	r3, #1
 800842e:	9308      	str	r3, [sp, #32]
 8008430:	f108 0801 	add.w	r8, r8, #1
 8008434:	2301      	movs	r3, #1
 8008436:	930a      	str	r3, [sp, #40]	@ 0x28
 8008438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 81b0 	beq.w	80087a0 <_dtoa_r+0xb48>
 8008440:	6923      	ldr	r3, [r4, #16]
 8008442:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008446:	6918      	ldr	r0, [r3, #16]
 8008448:	f000 fb72 	bl	8008b30 <__hi0bits>
 800844c:	f1c0 0020 	rsb	r0, r0, #32
 8008450:	9b08      	ldr	r3, [sp, #32]
 8008452:	4418      	add	r0, r3
 8008454:	f010 001f 	ands.w	r0, r0, #31
 8008458:	d077      	beq.n	800854a <_dtoa_r+0x8f2>
 800845a:	f1c0 0320 	rsb	r3, r0, #32
 800845e:	2b04      	cmp	r3, #4
 8008460:	dd6b      	ble.n	800853a <_dtoa_r+0x8e2>
 8008462:	9b08      	ldr	r3, [sp, #32]
 8008464:	f1c0 001c 	rsb	r0, r0, #28
 8008468:	4403      	add	r3, r0
 800846a:	4480      	add	r8, r0
 800846c:	4406      	add	r6, r0
 800846e:	9308      	str	r3, [sp, #32]
 8008470:	f1b8 0f00 	cmp.w	r8, #0
 8008474:	dd05      	ble.n	8008482 <_dtoa_r+0x82a>
 8008476:	4649      	mov	r1, r9
 8008478:	4642      	mov	r2, r8
 800847a:	4658      	mov	r0, fp
 800847c:	f000 fcbe 	bl	8008dfc <__lshift>
 8008480:	4681      	mov	r9, r0
 8008482:	9b08      	ldr	r3, [sp, #32]
 8008484:	2b00      	cmp	r3, #0
 8008486:	dd05      	ble.n	8008494 <_dtoa_r+0x83c>
 8008488:	4621      	mov	r1, r4
 800848a:	461a      	mov	r2, r3
 800848c:	4658      	mov	r0, fp
 800848e:	f000 fcb5 	bl	8008dfc <__lshift>
 8008492:	4604      	mov	r4, r0
 8008494:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008496:	2b00      	cmp	r3, #0
 8008498:	d059      	beq.n	800854e <_dtoa_r+0x8f6>
 800849a:	4621      	mov	r1, r4
 800849c:	4648      	mov	r0, r9
 800849e:	f000 fd19 	bl	8008ed4 <__mcmp>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	da53      	bge.n	800854e <_dtoa_r+0x8f6>
 80084a6:	1e7b      	subs	r3, r7, #1
 80084a8:	9304      	str	r3, [sp, #16]
 80084aa:	4649      	mov	r1, r9
 80084ac:	2300      	movs	r3, #0
 80084ae:	220a      	movs	r2, #10
 80084b0:	4658      	mov	r0, fp
 80084b2:	f000 faf7 	bl	8008aa4 <__multadd>
 80084b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084b8:	4681      	mov	r9, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 8172 	beq.w	80087a4 <_dtoa_r+0xb4c>
 80084c0:	2300      	movs	r3, #0
 80084c2:	4629      	mov	r1, r5
 80084c4:	220a      	movs	r2, #10
 80084c6:	4658      	mov	r0, fp
 80084c8:	f000 faec 	bl	8008aa4 <__multadd>
 80084cc:	9b00      	ldr	r3, [sp, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	4605      	mov	r5, r0
 80084d2:	dc67      	bgt.n	80085a4 <_dtoa_r+0x94c>
 80084d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	dc41      	bgt.n	800855e <_dtoa_r+0x906>
 80084da:	e063      	b.n	80085a4 <_dtoa_r+0x94c>
 80084dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80084de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80084e2:	e746      	b.n	8008372 <_dtoa_r+0x71a>
 80084e4:	9b07      	ldr	r3, [sp, #28]
 80084e6:	1e5c      	subs	r4, r3, #1
 80084e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084ea:	42a3      	cmp	r3, r4
 80084ec:	bfbf      	itttt	lt
 80084ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80084f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80084f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80084f4:	1ae3      	sublt	r3, r4, r3
 80084f6:	bfb4      	ite	lt
 80084f8:	18d2      	addlt	r2, r2, r3
 80084fa:	1b1c      	subge	r4, r3, r4
 80084fc:	9b07      	ldr	r3, [sp, #28]
 80084fe:	bfbc      	itt	lt
 8008500:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008502:	2400      	movlt	r4, #0
 8008504:	2b00      	cmp	r3, #0
 8008506:	bfb5      	itete	lt
 8008508:	eba8 0603 	sublt.w	r6, r8, r3
 800850c:	9b07      	ldrge	r3, [sp, #28]
 800850e:	2300      	movlt	r3, #0
 8008510:	4646      	movge	r6, r8
 8008512:	e730      	b.n	8008376 <_dtoa_r+0x71e>
 8008514:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008516:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008518:	4646      	mov	r6, r8
 800851a:	e735      	b.n	8008388 <_dtoa_r+0x730>
 800851c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800851e:	e75c      	b.n	80083da <_dtoa_r+0x782>
 8008520:	2300      	movs	r3, #0
 8008522:	e788      	b.n	8008436 <_dtoa_r+0x7de>
 8008524:	3fe00000 	.word	0x3fe00000
 8008528:	40240000 	.word	0x40240000
 800852c:	40140000 	.word	0x40140000
 8008530:	9b02      	ldr	r3, [sp, #8]
 8008532:	e780      	b.n	8008436 <_dtoa_r+0x7de>
 8008534:	2300      	movs	r3, #0
 8008536:	930a      	str	r3, [sp, #40]	@ 0x28
 8008538:	e782      	b.n	8008440 <_dtoa_r+0x7e8>
 800853a:	d099      	beq.n	8008470 <_dtoa_r+0x818>
 800853c:	9a08      	ldr	r2, [sp, #32]
 800853e:	331c      	adds	r3, #28
 8008540:	441a      	add	r2, r3
 8008542:	4498      	add	r8, r3
 8008544:	441e      	add	r6, r3
 8008546:	9208      	str	r2, [sp, #32]
 8008548:	e792      	b.n	8008470 <_dtoa_r+0x818>
 800854a:	4603      	mov	r3, r0
 800854c:	e7f6      	b.n	800853c <_dtoa_r+0x8e4>
 800854e:	9b07      	ldr	r3, [sp, #28]
 8008550:	9704      	str	r7, [sp, #16]
 8008552:	2b00      	cmp	r3, #0
 8008554:	dc20      	bgt.n	8008598 <_dtoa_r+0x940>
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800855a:	2b02      	cmp	r3, #2
 800855c:	dd1e      	ble.n	800859c <_dtoa_r+0x944>
 800855e:	9b00      	ldr	r3, [sp, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	f47f aec0 	bne.w	80082e6 <_dtoa_r+0x68e>
 8008566:	4621      	mov	r1, r4
 8008568:	2205      	movs	r2, #5
 800856a:	4658      	mov	r0, fp
 800856c:	f000 fa9a 	bl	8008aa4 <__multadd>
 8008570:	4601      	mov	r1, r0
 8008572:	4604      	mov	r4, r0
 8008574:	4648      	mov	r0, r9
 8008576:	f000 fcad 	bl	8008ed4 <__mcmp>
 800857a:	2800      	cmp	r0, #0
 800857c:	f77f aeb3 	ble.w	80082e6 <_dtoa_r+0x68e>
 8008580:	4656      	mov	r6, sl
 8008582:	2331      	movs	r3, #49	@ 0x31
 8008584:	f806 3b01 	strb.w	r3, [r6], #1
 8008588:	9b04      	ldr	r3, [sp, #16]
 800858a:	3301      	adds	r3, #1
 800858c:	9304      	str	r3, [sp, #16]
 800858e:	e6ae      	b.n	80082ee <_dtoa_r+0x696>
 8008590:	9c07      	ldr	r4, [sp, #28]
 8008592:	9704      	str	r7, [sp, #16]
 8008594:	4625      	mov	r5, r4
 8008596:	e7f3      	b.n	8008580 <_dtoa_r+0x928>
 8008598:	9b07      	ldr	r3, [sp, #28]
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 8104 	beq.w	80087ac <_dtoa_r+0xb54>
 80085a4:	2e00      	cmp	r6, #0
 80085a6:	dd05      	ble.n	80085b4 <_dtoa_r+0x95c>
 80085a8:	4629      	mov	r1, r5
 80085aa:	4632      	mov	r2, r6
 80085ac:	4658      	mov	r0, fp
 80085ae:	f000 fc25 	bl	8008dfc <__lshift>
 80085b2:	4605      	mov	r5, r0
 80085b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d05a      	beq.n	8008670 <_dtoa_r+0xa18>
 80085ba:	6869      	ldr	r1, [r5, #4]
 80085bc:	4658      	mov	r0, fp
 80085be:	f000 fa0f 	bl	80089e0 <_Balloc>
 80085c2:	4606      	mov	r6, r0
 80085c4:	b928      	cbnz	r0, 80085d2 <_dtoa_r+0x97a>
 80085c6:	4b84      	ldr	r3, [pc, #528]	@ (80087d8 <_dtoa_r+0xb80>)
 80085c8:	4602      	mov	r2, r0
 80085ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80085ce:	f7ff bb5a 	b.w	8007c86 <_dtoa_r+0x2e>
 80085d2:	692a      	ldr	r2, [r5, #16]
 80085d4:	3202      	adds	r2, #2
 80085d6:	0092      	lsls	r2, r2, #2
 80085d8:	f105 010c 	add.w	r1, r5, #12
 80085dc:	300c      	adds	r0, #12
 80085de:	f001 f803 	bl	80095e8 <memcpy>
 80085e2:	2201      	movs	r2, #1
 80085e4:	4631      	mov	r1, r6
 80085e6:	4658      	mov	r0, fp
 80085e8:	f000 fc08 	bl	8008dfc <__lshift>
 80085ec:	f10a 0301 	add.w	r3, sl, #1
 80085f0:	9307      	str	r3, [sp, #28]
 80085f2:	9b00      	ldr	r3, [sp, #0]
 80085f4:	4453      	add	r3, sl
 80085f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085f8:	9b02      	ldr	r3, [sp, #8]
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	462f      	mov	r7, r5
 8008600:	930a      	str	r3, [sp, #40]	@ 0x28
 8008602:	4605      	mov	r5, r0
 8008604:	9b07      	ldr	r3, [sp, #28]
 8008606:	4621      	mov	r1, r4
 8008608:	3b01      	subs	r3, #1
 800860a:	4648      	mov	r0, r9
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	f7ff fa98 	bl	8007b42 <quorem>
 8008612:	4639      	mov	r1, r7
 8008614:	9002      	str	r0, [sp, #8]
 8008616:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800861a:	4648      	mov	r0, r9
 800861c:	f000 fc5a 	bl	8008ed4 <__mcmp>
 8008620:	462a      	mov	r2, r5
 8008622:	9008      	str	r0, [sp, #32]
 8008624:	4621      	mov	r1, r4
 8008626:	4658      	mov	r0, fp
 8008628:	f000 fc70 	bl	8008f0c <__mdiff>
 800862c:	68c2      	ldr	r2, [r0, #12]
 800862e:	4606      	mov	r6, r0
 8008630:	bb02      	cbnz	r2, 8008674 <_dtoa_r+0xa1c>
 8008632:	4601      	mov	r1, r0
 8008634:	4648      	mov	r0, r9
 8008636:	f000 fc4d 	bl	8008ed4 <__mcmp>
 800863a:	4602      	mov	r2, r0
 800863c:	4631      	mov	r1, r6
 800863e:	4658      	mov	r0, fp
 8008640:	920e      	str	r2, [sp, #56]	@ 0x38
 8008642:	f000 fa0d 	bl	8008a60 <_Bfree>
 8008646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008648:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800864a:	9e07      	ldr	r6, [sp, #28]
 800864c:	ea43 0102 	orr.w	r1, r3, r2
 8008650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008652:	4319      	orrs	r1, r3
 8008654:	d110      	bne.n	8008678 <_dtoa_r+0xa20>
 8008656:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800865a:	d029      	beq.n	80086b0 <_dtoa_r+0xa58>
 800865c:	9b08      	ldr	r3, [sp, #32]
 800865e:	2b00      	cmp	r3, #0
 8008660:	dd02      	ble.n	8008668 <_dtoa_r+0xa10>
 8008662:	9b02      	ldr	r3, [sp, #8]
 8008664:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008668:	9b00      	ldr	r3, [sp, #0]
 800866a:	f883 8000 	strb.w	r8, [r3]
 800866e:	e63f      	b.n	80082f0 <_dtoa_r+0x698>
 8008670:	4628      	mov	r0, r5
 8008672:	e7bb      	b.n	80085ec <_dtoa_r+0x994>
 8008674:	2201      	movs	r2, #1
 8008676:	e7e1      	b.n	800863c <_dtoa_r+0x9e4>
 8008678:	9b08      	ldr	r3, [sp, #32]
 800867a:	2b00      	cmp	r3, #0
 800867c:	db04      	blt.n	8008688 <_dtoa_r+0xa30>
 800867e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008680:	430b      	orrs	r3, r1
 8008682:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008684:	430b      	orrs	r3, r1
 8008686:	d120      	bne.n	80086ca <_dtoa_r+0xa72>
 8008688:	2a00      	cmp	r2, #0
 800868a:	dded      	ble.n	8008668 <_dtoa_r+0xa10>
 800868c:	4649      	mov	r1, r9
 800868e:	2201      	movs	r2, #1
 8008690:	4658      	mov	r0, fp
 8008692:	f000 fbb3 	bl	8008dfc <__lshift>
 8008696:	4621      	mov	r1, r4
 8008698:	4681      	mov	r9, r0
 800869a:	f000 fc1b 	bl	8008ed4 <__mcmp>
 800869e:	2800      	cmp	r0, #0
 80086a0:	dc03      	bgt.n	80086aa <_dtoa_r+0xa52>
 80086a2:	d1e1      	bne.n	8008668 <_dtoa_r+0xa10>
 80086a4:	f018 0f01 	tst.w	r8, #1
 80086a8:	d0de      	beq.n	8008668 <_dtoa_r+0xa10>
 80086aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086ae:	d1d8      	bne.n	8008662 <_dtoa_r+0xa0a>
 80086b0:	9a00      	ldr	r2, [sp, #0]
 80086b2:	2339      	movs	r3, #57	@ 0x39
 80086b4:	7013      	strb	r3, [r2, #0]
 80086b6:	4633      	mov	r3, r6
 80086b8:	461e      	mov	r6, r3
 80086ba:	3b01      	subs	r3, #1
 80086bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80086c0:	2a39      	cmp	r2, #57	@ 0x39
 80086c2:	d052      	beq.n	800876a <_dtoa_r+0xb12>
 80086c4:	3201      	adds	r2, #1
 80086c6:	701a      	strb	r2, [r3, #0]
 80086c8:	e612      	b.n	80082f0 <_dtoa_r+0x698>
 80086ca:	2a00      	cmp	r2, #0
 80086cc:	dd07      	ble.n	80086de <_dtoa_r+0xa86>
 80086ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086d2:	d0ed      	beq.n	80086b0 <_dtoa_r+0xa58>
 80086d4:	9a00      	ldr	r2, [sp, #0]
 80086d6:	f108 0301 	add.w	r3, r8, #1
 80086da:	7013      	strb	r3, [r2, #0]
 80086dc:	e608      	b.n	80082f0 <_dtoa_r+0x698>
 80086de:	9b07      	ldr	r3, [sp, #28]
 80086e0:	9a07      	ldr	r2, [sp, #28]
 80086e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80086e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d028      	beq.n	800873e <_dtoa_r+0xae6>
 80086ec:	4649      	mov	r1, r9
 80086ee:	2300      	movs	r3, #0
 80086f0:	220a      	movs	r2, #10
 80086f2:	4658      	mov	r0, fp
 80086f4:	f000 f9d6 	bl	8008aa4 <__multadd>
 80086f8:	42af      	cmp	r7, r5
 80086fa:	4681      	mov	r9, r0
 80086fc:	f04f 0300 	mov.w	r3, #0
 8008700:	f04f 020a 	mov.w	r2, #10
 8008704:	4639      	mov	r1, r7
 8008706:	4658      	mov	r0, fp
 8008708:	d107      	bne.n	800871a <_dtoa_r+0xac2>
 800870a:	f000 f9cb 	bl	8008aa4 <__multadd>
 800870e:	4607      	mov	r7, r0
 8008710:	4605      	mov	r5, r0
 8008712:	9b07      	ldr	r3, [sp, #28]
 8008714:	3301      	adds	r3, #1
 8008716:	9307      	str	r3, [sp, #28]
 8008718:	e774      	b.n	8008604 <_dtoa_r+0x9ac>
 800871a:	f000 f9c3 	bl	8008aa4 <__multadd>
 800871e:	4629      	mov	r1, r5
 8008720:	4607      	mov	r7, r0
 8008722:	2300      	movs	r3, #0
 8008724:	220a      	movs	r2, #10
 8008726:	4658      	mov	r0, fp
 8008728:	f000 f9bc 	bl	8008aa4 <__multadd>
 800872c:	4605      	mov	r5, r0
 800872e:	e7f0      	b.n	8008712 <_dtoa_r+0xaba>
 8008730:	9b00      	ldr	r3, [sp, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	bfcc      	ite	gt
 8008736:	461e      	movgt	r6, r3
 8008738:	2601      	movle	r6, #1
 800873a:	4456      	add	r6, sl
 800873c:	2700      	movs	r7, #0
 800873e:	4649      	mov	r1, r9
 8008740:	2201      	movs	r2, #1
 8008742:	4658      	mov	r0, fp
 8008744:	f000 fb5a 	bl	8008dfc <__lshift>
 8008748:	4621      	mov	r1, r4
 800874a:	4681      	mov	r9, r0
 800874c:	f000 fbc2 	bl	8008ed4 <__mcmp>
 8008750:	2800      	cmp	r0, #0
 8008752:	dcb0      	bgt.n	80086b6 <_dtoa_r+0xa5e>
 8008754:	d102      	bne.n	800875c <_dtoa_r+0xb04>
 8008756:	f018 0f01 	tst.w	r8, #1
 800875a:	d1ac      	bne.n	80086b6 <_dtoa_r+0xa5e>
 800875c:	4633      	mov	r3, r6
 800875e:	461e      	mov	r6, r3
 8008760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008764:	2a30      	cmp	r2, #48	@ 0x30
 8008766:	d0fa      	beq.n	800875e <_dtoa_r+0xb06>
 8008768:	e5c2      	b.n	80082f0 <_dtoa_r+0x698>
 800876a:	459a      	cmp	sl, r3
 800876c:	d1a4      	bne.n	80086b8 <_dtoa_r+0xa60>
 800876e:	9b04      	ldr	r3, [sp, #16]
 8008770:	3301      	adds	r3, #1
 8008772:	9304      	str	r3, [sp, #16]
 8008774:	2331      	movs	r3, #49	@ 0x31
 8008776:	f88a 3000 	strb.w	r3, [sl]
 800877a:	e5b9      	b.n	80082f0 <_dtoa_r+0x698>
 800877c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800877e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80087dc <_dtoa_r+0xb84>
 8008782:	b11b      	cbz	r3, 800878c <_dtoa_r+0xb34>
 8008784:	f10a 0308 	add.w	r3, sl, #8
 8008788:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800878a:	6013      	str	r3, [r2, #0]
 800878c:	4650      	mov	r0, sl
 800878e:	b019      	add	sp, #100	@ 0x64
 8008790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008796:	2b01      	cmp	r3, #1
 8008798:	f77f ae37 	ble.w	800840a <_dtoa_r+0x7b2>
 800879c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800879e:	930a      	str	r3, [sp, #40]	@ 0x28
 80087a0:	2001      	movs	r0, #1
 80087a2:	e655      	b.n	8008450 <_dtoa_r+0x7f8>
 80087a4:	9b00      	ldr	r3, [sp, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f77f aed6 	ble.w	8008558 <_dtoa_r+0x900>
 80087ac:	4656      	mov	r6, sl
 80087ae:	4621      	mov	r1, r4
 80087b0:	4648      	mov	r0, r9
 80087b2:	f7ff f9c6 	bl	8007b42 <quorem>
 80087b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80087ba:	f806 8b01 	strb.w	r8, [r6], #1
 80087be:	9b00      	ldr	r3, [sp, #0]
 80087c0:	eba6 020a 	sub.w	r2, r6, sl
 80087c4:	4293      	cmp	r3, r2
 80087c6:	ddb3      	ble.n	8008730 <_dtoa_r+0xad8>
 80087c8:	4649      	mov	r1, r9
 80087ca:	2300      	movs	r3, #0
 80087cc:	220a      	movs	r2, #10
 80087ce:	4658      	mov	r0, fp
 80087d0:	f000 f968 	bl	8008aa4 <__multadd>
 80087d4:	4681      	mov	r9, r0
 80087d6:	e7ea      	b.n	80087ae <_dtoa_r+0xb56>
 80087d8:	08009ef0 	.word	0x08009ef0
 80087dc:	08009e74 	.word	0x08009e74

080087e0 <_free_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4605      	mov	r5, r0
 80087e4:	2900      	cmp	r1, #0
 80087e6:	d041      	beq.n	800886c <_free_r+0x8c>
 80087e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087ec:	1f0c      	subs	r4, r1, #4
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	bfb8      	it	lt
 80087f2:	18e4      	addlt	r4, r4, r3
 80087f4:	f000 f8e8 	bl	80089c8 <__malloc_lock>
 80087f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008870 <_free_r+0x90>)
 80087fa:	6813      	ldr	r3, [r2, #0]
 80087fc:	b933      	cbnz	r3, 800880c <_free_r+0x2c>
 80087fe:	6063      	str	r3, [r4, #4]
 8008800:	6014      	str	r4, [r2, #0]
 8008802:	4628      	mov	r0, r5
 8008804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008808:	f000 b8e4 	b.w	80089d4 <__malloc_unlock>
 800880c:	42a3      	cmp	r3, r4
 800880e:	d908      	bls.n	8008822 <_free_r+0x42>
 8008810:	6820      	ldr	r0, [r4, #0]
 8008812:	1821      	adds	r1, r4, r0
 8008814:	428b      	cmp	r3, r1
 8008816:	bf01      	itttt	eq
 8008818:	6819      	ldreq	r1, [r3, #0]
 800881a:	685b      	ldreq	r3, [r3, #4]
 800881c:	1809      	addeq	r1, r1, r0
 800881e:	6021      	streq	r1, [r4, #0]
 8008820:	e7ed      	b.n	80087fe <_free_r+0x1e>
 8008822:	461a      	mov	r2, r3
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	b10b      	cbz	r3, 800882c <_free_r+0x4c>
 8008828:	42a3      	cmp	r3, r4
 800882a:	d9fa      	bls.n	8008822 <_free_r+0x42>
 800882c:	6811      	ldr	r1, [r2, #0]
 800882e:	1850      	adds	r0, r2, r1
 8008830:	42a0      	cmp	r0, r4
 8008832:	d10b      	bne.n	800884c <_free_r+0x6c>
 8008834:	6820      	ldr	r0, [r4, #0]
 8008836:	4401      	add	r1, r0
 8008838:	1850      	adds	r0, r2, r1
 800883a:	4283      	cmp	r3, r0
 800883c:	6011      	str	r1, [r2, #0]
 800883e:	d1e0      	bne.n	8008802 <_free_r+0x22>
 8008840:	6818      	ldr	r0, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	6053      	str	r3, [r2, #4]
 8008846:	4408      	add	r0, r1
 8008848:	6010      	str	r0, [r2, #0]
 800884a:	e7da      	b.n	8008802 <_free_r+0x22>
 800884c:	d902      	bls.n	8008854 <_free_r+0x74>
 800884e:	230c      	movs	r3, #12
 8008850:	602b      	str	r3, [r5, #0]
 8008852:	e7d6      	b.n	8008802 <_free_r+0x22>
 8008854:	6820      	ldr	r0, [r4, #0]
 8008856:	1821      	adds	r1, r4, r0
 8008858:	428b      	cmp	r3, r1
 800885a:	bf04      	itt	eq
 800885c:	6819      	ldreq	r1, [r3, #0]
 800885e:	685b      	ldreq	r3, [r3, #4]
 8008860:	6063      	str	r3, [r4, #4]
 8008862:	bf04      	itt	eq
 8008864:	1809      	addeq	r1, r1, r0
 8008866:	6021      	streq	r1, [r4, #0]
 8008868:	6054      	str	r4, [r2, #4]
 800886a:	e7ca      	b.n	8008802 <_free_r+0x22>
 800886c:	bd38      	pop	{r3, r4, r5, pc}
 800886e:	bf00      	nop
 8008870:	20001e04 	.word	0x20001e04

08008874 <malloc>:
 8008874:	4b02      	ldr	r3, [pc, #8]	@ (8008880 <malloc+0xc>)
 8008876:	4601      	mov	r1, r0
 8008878:	6818      	ldr	r0, [r3, #0]
 800887a:	f000 b825 	b.w	80088c8 <_malloc_r>
 800887e:	bf00      	nop
 8008880:	20000a54 	.word	0x20000a54

08008884 <sbrk_aligned>:
 8008884:	b570      	push	{r4, r5, r6, lr}
 8008886:	4e0f      	ldr	r6, [pc, #60]	@ (80088c4 <sbrk_aligned+0x40>)
 8008888:	460c      	mov	r4, r1
 800888a:	6831      	ldr	r1, [r6, #0]
 800888c:	4605      	mov	r5, r0
 800888e:	b911      	cbnz	r1, 8008896 <sbrk_aligned+0x12>
 8008890:	f000 fe9a 	bl	80095c8 <_sbrk_r>
 8008894:	6030      	str	r0, [r6, #0]
 8008896:	4621      	mov	r1, r4
 8008898:	4628      	mov	r0, r5
 800889a:	f000 fe95 	bl	80095c8 <_sbrk_r>
 800889e:	1c43      	adds	r3, r0, #1
 80088a0:	d103      	bne.n	80088aa <sbrk_aligned+0x26>
 80088a2:	f04f 34ff 	mov.w	r4, #4294967295
 80088a6:	4620      	mov	r0, r4
 80088a8:	bd70      	pop	{r4, r5, r6, pc}
 80088aa:	1cc4      	adds	r4, r0, #3
 80088ac:	f024 0403 	bic.w	r4, r4, #3
 80088b0:	42a0      	cmp	r0, r4
 80088b2:	d0f8      	beq.n	80088a6 <sbrk_aligned+0x22>
 80088b4:	1a21      	subs	r1, r4, r0
 80088b6:	4628      	mov	r0, r5
 80088b8:	f000 fe86 	bl	80095c8 <_sbrk_r>
 80088bc:	3001      	adds	r0, #1
 80088be:	d1f2      	bne.n	80088a6 <sbrk_aligned+0x22>
 80088c0:	e7ef      	b.n	80088a2 <sbrk_aligned+0x1e>
 80088c2:	bf00      	nop
 80088c4:	20001e00 	.word	0x20001e00

080088c8 <_malloc_r>:
 80088c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088cc:	1ccd      	adds	r5, r1, #3
 80088ce:	f025 0503 	bic.w	r5, r5, #3
 80088d2:	3508      	adds	r5, #8
 80088d4:	2d0c      	cmp	r5, #12
 80088d6:	bf38      	it	cc
 80088d8:	250c      	movcc	r5, #12
 80088da:	2d00      	cmp	r5, #0
 80088dc:	4606      	mov	r6, r0
 80088de:	db01      	blt.n	80088e4 <_malloc_r+0x1c>
 80088e0:	42a9      	cmp	r1, r5
 80088e2:	d904      	bls.n	80088ee <_malloc_r+0x26>
 80088e4:	230c      	movs	r3, #12
 80088e6:	6033      	str	r3, [r6, #0]
 80088e8:	2000      	movs	r0, #0
 80088ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089c4 <_malloc_r+0xfc>
 80088f2:	f000 f869 	bl	80089c8 <__malloc_lock>
 80088f6:	f8d8 3000 	ldr.w	r3, [r8]
 80088fa:	461c      	mov	r4, r3
 80088fc:	bb44      	cbnz	r4, 8008950 <_malloc_r+0x88>
 80088fe:	4629      	mov	r1, r5
 8008900:	4630      	mov	r0, r6
 8008902:	f7ff ffbf 	bl	8008884 <sbrk_aligned>
 8008906:	1c43      	adds	r3, r0, #1
 8008908:	4604      	mov	r4, r0
 800890a:	d158      	bne.n	80089be <_malloc_r+0xf6>
 800890c:	f8d8 4000 	ldr.w	r4, [r8]
 8008910:	4627      	mov	r7, r4
 8008912:	2f00      	cmp	r7, #0
 8008914:	d143      	bne.n	800899e <_malloc_r+0xd6>
 8008916:	2c00      	cmp	r4, #0
 8008918:	d04b      	beq.n	80089b2 <_malloc_r+0xea>
 800891a:	6823      	ldr	r3, [r4, #0]
 800891c:	4639      	mov	r1, r7
 800891e:	4630      	mov	r0, r6
 8008920:	eb04 0903 	add.w	r9, r4, r3
 8008924:	f000 fe50 	bl	80095c8 <_sbrk_r>
 8008928:	4581      	cmp	r9, r0
 800892a:	d142      	bne.n	80089b2 <_malloc_r+0xea>
 800892c:	6821      	ldr	r1, [r4, #0]
 800892e:	1a6d      	subs	r5, r5, r1
 8008930:	4629      	mov	r1, r5
 8008932:	4630      	mov	r0, r6
 8008934:	f7ff ffa6 	bl	8008884 <sbrk_aligned>
 8008938:	3001      	adds	r0, #1
 800893a:	d03a      	beq.n	80089b2 <_malloc_r+0xea>
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	442b      	add	r3, r5
 8008940:	6023      	str	r3, [r4, #0]
 8008942:	f8d8 3000 	ldr.w	r3, [r8]
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	bb62      	cbnz	r2, 80089a4 <_malloc_r+0xdc>
 800894a:	f8c8 7000 	str.w	r7, [r8]
 800894e:	e00f      	b.n	8008970 <_malloc_r+0xa8>
 8008950:	6822      	ldr	r2, [r4, #0]
 8008952:	1b52      	subs	r2, r2, r5
 8008954:	d420      	bmi.n	8008998 <_malloc_r+0xd0>
 8008956:	2a0b      	cmp	r2, #11
 8008958:	d917      	bls.n	800898a <_malloc_r+0xc2>
 800895a:	1961      	adds	r1, r4, r5
 800895c:	42a3      	cmp	r3, r4
 800895e:	6025      	str	r5, [r4, #0]
 8008960:	bf18      	it	ne
 8008962:	6059      	strne	r1, [r3, #4]
 8008964:	6863      	ldr	r3, [r4, #4]
 8008966:	bf08      	it	eq
 8008968:	f8c8 1000 	streq.w	r1, [r8]
 800896c:	5162      	str	r2, [r4, r5]
 800896e:	604b      	str	r3, [r1, #4]
 8008970:	4630      	mov	r0, r6
 8008972:	f000 f82f 	bl	80089d4 <__malloc_unlock>
 8008976:	f104 000b 	add.w	r0, r4, #11
 800897a:	1d23      	adds	r3, r4, #4
 800897c:	f020 0007 	bic.w	r0, r0, #7
 8008980:	1ac2      	subs	r2, r0, r3
 8008982:	bf1c      	itt	ne
 8008984:	1a1b      	subne	r3, r3, r0
 8008986:	50a3      	strne	r3, [r4, r2]
 8008988:	e7af      	b.n	80088ea <_malloc_r+0x22>
 800898a:	6862      	ldr	r2, [r4, #4]
 800898c:	42a3      	cmp	r3, r4
 800898e:	bf0c      	ite	eq
 8008990:	f8c8 2000 	streq.w	r2, [r8]
 8008994:	605a      	strne	r2, [r3, #4]
 8008996:	e7eb      	b.n	8008970 <_malloc_r+0xa8>
 8008998:	4623      	mov	r3, r4
 800899a:	6864      	ldr	r4, [r4, #4]
 800899c:	e7ae      	b.n	80088fc <_malloc_r+0x34>
 800899e:	463c      	mov	r4, r7
 80089a0:	687f      	ldr	r7, [r7, #4]
 80089a2:	e7b6      	b.n	8008912 <_malloc_r+0x4a>
 80089a4:	461a      	mov	r2, r3
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	42a3      	cmp	r3, r4
 80089aa:	d1fb      	bne.n	80089a4 <_malloc_r+0xdc>
 80089ac:	2300      	movs	r3, #0
 80089ae:	6053      	str	r3, [r2, #4]
 80089b0:	e7de      	b.n	8008970 <_malloc_r+0xa8>
 80089b2:	230c      	movs	r3, #12
 80089b4:	6033      	str	r3, [r6, #0]
 80089b6:	4630      	mov	r0, r6
 80089b8:	f000 f80c 	bl	80089d4 <__malloc_unlock>
 80089bc:	e794      	b.n	80088e8 <_malloc_r+0x20>
 80089be:	6005      	str	r5, [r0, #0]
 80089c0:	e7d6      	b.n	8008970 <_malloc_r+0xa8>
 80089c2:	bf00      	nop
 80089c4:	20001e04 	.word	0x20001e04

080089c8 <__malloc_lock>:
 80089c8:	4801      	ldr	r0, [pc, #4]	@ (80089d0 <__malloc_lock+0x8>)
 80089ca:	f7ff b8b8 	b.w	8007b3e <__retarget_lock_acquire_recursive>
 80089ce:	bf00      	nop
 80089d0:	20001dfc 	.word	0x20001dfc

080089d4 <__malloc_unlock>:
 80089d4:	4801      	ldr	r0, [pc, #4]	@ (80089dc <__malloc_unlock+0x8>)
 80089d6:	f7ff b8b3 	b.w	8007b40 <__retarget_lock_release_recursive>
 80089da:	bf00      	nop
 80089dc:	20001dfc 	.word	0x20001dfc

080089e0 <_Balloc>:
 80089e0:	b570      	push	{r4, r5, r6, lr}
 80089e2:	69c6      	ldr	r6, [r0, #28]
 80089e4:	4604      	mov	r4, r0
 80089e6:	460d      	mov	r5, r1
 80089e8:	b976      	cbnz	r6, 8008a08 <_Balloc+0x28>
 80089ea:	2010      	movs	r0, #16
 80089ec:	f7ff ff42 	bl	8008874 <malloc>
 80089f0:	4602      	mov	r2, r0
 80089f2:	61e0      	str	r0, [r4, #28]
 80089f4:	b920      	cbnz	r0, 8008a00 <_Balloc+0x20>
 80089f6:	4b18      	ldr	r3, [pc, #96]	@ (8008a58 <_Balloc+0x78>)
 80089f8:	4818      	ldr	r0, [pc, #96]	@ (8008a5c <_Balloc+0x7c>)
 80089fa:	216b      	movs	r1, #107	@ 0x6b
 80089fc:	f000 fe02 	bl	8009604 <__assert_func>
 8008a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a04:	6006      	str	r6, [r0, #0]
 8008a06:	60c6      	str	r6, [r0, #12]
 8008a08:	69e6      	ldr	r6, [r4, #28]
 8008a0a:	68f3      	ldr	r3, [r6, #12]
 8008a0c:	b183      	cbz	r3, 8008a30 <_Balloc+0x50>
 8008a0e:	69e3      	ldr	r3, [r4, #28]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a16:	b9b8      	cbnz	r0, 8008a48 <_Balloc+0x68>
 8008a18:	2101      	movs	r1, #1
 8008a1a:	fa01 f605 	lsl.w	r6, r1, r5
 8008a1e:	1d72      	adds	r2, r6, #5
 8008a20:	0092      	lsls	r2, r2, #2
 8008a22:	4620      	mov	r0, r4
 8008a24:	f000 fe0c 	bl	8009640 <_calloc_r>
 8008a28:	b160      	cbz	r0, 8008a44 <_Balloc+0x64>
 8008a2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a2e:	e00e      	b.n	8008a4e <_Balloc+0x6e>
 8008a30:	2221      	movs	r2, #33	@ 0x21
 8008a32:	2104      	movs	r1, #4
 8008a34:	4620      	mov	r0, r4
 8008a36:	f000 fe03 	bl	8009640 <_calloc_r>
 8008a3a:	69e3      	ldr	r3, [r4, #28]
 8008a3c:	60f0      	str	r0, [r6, #12]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1e4      	bne.n	8008a0e <_Balloc+0x2e>
 8008a44:	2000      	movs	r0, #0
 8008a46:	bd70      	pop	{r4, r5, r6, pc}
 8008a48:	6802      	ldr	r2, [r0, #0]
 8008a4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a54:	e7f7      	b.n	8008a46 <_Balloc+0x66>
 8008a56:	bf00      	nop
 8008a58:	08009e81 	.word	0x08009e81
 8008a5c:	08009f01 	.word	0x08009f01

08008a60 <_Bfree>:
 8008a60:	b570      	push	{r4, r5, r6, lr}
 8008a62:	69c6      	ldr	r6, [r0, #28]
 8008a64:	4605      	mov	r5, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	b976      	cbnz	r6, 8008a88 <_Bfree+0x28>
 8008a6a:	2010      	movs	r0, #16
 8008a6c:	f7ff ff02 	bl	8008874 <malloc>
 8008a70:	4602      	mov	r2, r0
 8008a72:	61e8      	str	r0, [r5, #28]
 8008a74:	b920      	cbnz	r0, 8008a80 <_Bfree+0x20>
 8008a76:	4b09      	ldr	r3, [pc, #36]	@ (8008a9c <_Bfree+0x3c>)
 8008a78:	4809      	ldr	r0, [pc, #36]	@ (8008aa0 <_Bfree+0x40>)
 8008a7a:	218f      	movs	r1, #143	@ 0x8f
 8008a7c:	f000 fdc2 	bl	8009604 <__assert_func>
 8008a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a84:	6006      	str	r6, [r0, #0]
 8008a86:	60c6      	str	r6, [r0, #12]
 8008a88:	b13c      	cbz	r4, 8008a9a <_Bfree+0x3a>
 8008a8a:	69eb      	ldr	r3, [r5, #28]
 8008a8c:	6862      	ldr	r2, [r4, #4]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a94:	6021      	str	r1, [r4, #0]
 8008a96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a9a:	bd70      	pop	{r4, r5, r6, pc}
 8008a9c:	08009e81 	.word	0x08009e81
 8008aa0:	08009f01 	.word	0x08009f01

08008aa4 <__multadd>:
 8008aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa8:	690d      	ldr	r5, [r1, #16]
 8008aaa:	4607      	mov	r7, r0
 8008aac:	460c      	mov	r4, r1
 8008aae:	461e      	mov	r6, r3
 8008ab0:	f101 0c14 	add.w	ip, r1, #20
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	f8dc 3000 	ldr.w	r3, [ip]
 8008aba:	b299      	uxth	r1, r3
 8008abc:	fb02 6101 	mla	r1, r2, r1, r6
 8008ac0:	0c1e      	lsrs	r6, r3, #16
 8008ac2:	0c0b      	lsrs	r3, r1, #16
 8008ac4:	fb02 3306 	mla	r3, r2, r6, r3
 8008ac8:	b289      	uxth	r1, r1
 8008aca:	3001      	adds	r0, #1
 8008acc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ad0:	4285      	cmp	r5, r0
 8008ad2:	f84c 1b04 	str.w	r1, [ip], #4
 8008ad6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ada:	dcec      	bgt.n	8008ab6 <__multadd+0x12>
 8008adc:	b30e      	cbz	r6, 8008b22 <__multadd+0x7e>
 8008ade:	68a3      	ldr	r3, [r4, #8]
 8008ae0:	42ab      	cmp	r3, r5
 8008ae2:	dc19      	bgt.n	8008b18 <__multadd+0x74>
 8008ae4:	6861      	ldr	r1, [r4, #4]
 8008ae6:	4638      	mov	r0, r7
 8008ae8:	3101      	adds	r1, #1
 8008aea:	f7ff ff79 	bl	80089e0 <_Balloc>
 8008aee:	4680      	mov	r8, r0
 8008af0:	b928      	cbnz	r0, 8008afe <__multadd+0x5a>
 8008af2:	4602      	mov	r2, r0
 8008af4:	4b0c      	ldr	r3, [pc, #48]	@ (8008b28 <__multadd+0x84>)
 8008af6:	480d      	ldr	r0, [pc, #52]	@ (8008b2c <__multadd+0x88>)
 8008af8:	21ba      	movs	r1, #186	@ 0xba
 8008afa:	f000 fd83 	bl	8009604 <__assert_func>
 8008afe:	6922      	ldr	r2, [r4, #16]
 8008b00:	3202      	adds	r2, #2
 8008b02:	f104 010c 	add.w	r1, r4, #12
 8008b06:	0092      	lsls	r2, r2, #2
 8008b08:	300c      	adds	r0, #12
 8008b0a:	f000 fd6d 	bl	80095e8 <memcpy>
 8008b0e:	4621      	mov	r1, r4
 8008b10:	4638      	mov	r0, r7
 8008b12:	f7ff ffa5 	bl	8008a60 <_Bfree>
 8008b16:	4644      	mov	r4, r8
 8008b18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b1c:	3501      	adds	r5, #1
 8008b1e:	615e      	str	r6, [r3, #20]
 8008b20:	6125      	str	r5, [r4, #16]
 8008b22:	4620      	mov	r0, r4
 8008b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b28:	08009ef0 	.word	0x08009ef0
 8008b2c:	08009f01 	.word	0x08009f01

08008b30 <__hi0bits>:
 8008b30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008b34:	4603      	mov	r3, r0
 8008b36:	bf36      	itet	cc
 8008b38:	0403      	lslcc	r3, r0, #16
 8008b3a:	2000      	movcs	r0, #0
 8008b3c:	2010      	movcc	r0, #16
 8008b3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b42:	bf3c      	itt	cc
 8008b44:	021b      	lslcc	r3, r3, #8
 8008b46:	3008      	addcc	r0, #8
 8008b48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b4c:	bf3c      	itt	cc
 8008b4e:	011b      	lslcc	r3, r3, #4
 8008b50:	3004      	addcc	r0, #4
 8008b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b56:	bf3c      	itt	cc
 8008b58:	009b      	lslcc	r3, r3, #2
 8008b5a:	3002      	addcc	r0, #2
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	db05      	blt.n	8008b6c <__hi0bits+0x3c>
 8008b60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008b64:	f100 0001 	add.w	r0, r0, #1
 8008b68:	bf08      	it	eq
 8008b6a:	2020      	moveq	r0, #32
 8008b6c:	4770      	bx	lr

08008b6e <__lo0bits>:
 8008b6e:	6803      	ldr	r3, [r0, #0]
 8008b70:	4602      	mov	r2, r0
 8008b72:	f013 0007 	ands.w	r0, r3, #7
 8008b76:	d00b      	beq.n	8008b90 <__lo0bits+0x22>
 8008b78:	07d9      	lsls	r1, r3, #31
 8008b7a:	d421      	bmi.n	8008bc0 <__lo0bits+0x52>
 8008b7c:	0798      	lsls	r0, r3, #30
 8008b7e:	bf49      	itett	mi
 8008b80:	085b      	lsrmi	r3, r3, #1
 8008b82:	089b      	lsrpl	r3, r3, #2
 8008b84:	2001      	movmi	r0, #1
 8008b86:	6013      	strmi	r3, [r2, #0]
 8008b88:	bf5c      	itt	pl
 8008b8a:	6013      	strpl	r3, [r2, #0]
 8008b8c:	2002      	movpl	r0, #2
 8008b8e:	4770      	bx	lr
 8008b90:	b299      	uxth	r1, r3
 8008b92:	b909      	cbnz	r1, 8008b98 <__lo0bits+0x2a>
 8008b94:	0c1b      	lsrs	r3, r3, #16
 8008b96:	2010      	movs	r0, #16
 8008b98:	b2d9      	uxtb	r1, r3
 8008b9a:	b909      	cbnz	r1, 8008ba0 <__lo0bits+0x32>
 8008b9c:	3008      	adds	r0, #8
 8008b9e:	0a1b      	lsrs	r3, r3, #8
 8008ba0:	0719      	lsls	r1, r3, #28
 8008ba2:	bf04      	itt	eq
 8008ba4:	091b      	lsreq	r3, r3, #4
 8008ba6:	3004      	addeq	r0, #4
 8008ba8:	0799      	lsls	r1, r3, #30
 8008baa:	bf04      	itt	eq
 8008bac:	089b      	lsreq	r3, r3, #2
 8008bae:	3002      	addeq	r0, #2
 8008bb0:	07d9      	lsls	r1, r3, #31
 8008bb2:	d403      	bmi.n	8008bbc <__lo0bits+0x4e>
 8008bb4:	085b      	lsrs	r3, r3, #1
 8008bb6:	f100 0001 	add.w	r0, r0, #1
 8008bba:	d003      	beq.n	8008bc4 <__lo0bits+0x56>
 8008bbc:	6013      	str	r3, [r2, #0]
 8008bbe:	4770      	bx	lr
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	4770      	bx	lr
 8008bc4:	2020      	movs	r0, #32
 8008bc6:	4770      	bx	lr

08008bc8 <__i2b>:
 8008bc8:	b510      	push	{r4, lr}
 8008bca:	460c      	mov	r4, r1
 8008bcc:	2101      	movs	r1, #1
 8008bce:	f7ff ff07 	bl	80089e0 <_Balloc>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	b928      	cbnz	r0, 8008be2 <__i2b+0x1a>
 8008bd6:	4b05      	ldr	r3, [pc, #20]	@ (8008bec <__i2b+0x24>)
 8008bd8:	4805      	ldr	r0, [pc, #20]	@ (8008bf0 <__i2b+0x28>)
 8008bda:	f240 1145 	movw	r1, #325	@ 0x145
 8008bde:	f000 fd11 	bl	8009604 <__assert_func>
 8008be2:	2301      	movs	r3, #1
 8008be4:	6144      	str	r4, [r0, #20]
 8008be6:	6103      	str	r3, [r0, #16]
 8008be8:	bd10      	pop	{r4, pc}
 8008bea:	bf00      	nop
 8008bec:	08009ef0 	.word	0x08009ef0
 8008bf0:	08009f01 	.word	0x08009f01

08008bf4 <__multiply>:
 8008bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf8:	4614      	mov	r4, r2
 8008bfa:	690a      	ldr	r2, [r1, #16]
 8008bfc:	6923      	ldr	r3, [r4, #16]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	bfa8      	it	ge
 8008c02:	4623      	movge	r3, r4
 8008c04:	460f      	mov	r7, r1
 8008c06:	bfa4      	itt	ge
 8008c08:	460c      	movge	r4, r1
 8008c0a:	461f      	movge	r7, r3
 8008c0c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008c10:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008c14:	68a3      	ldr	r3, [r4, #8]
 8008c16:	6861      	ldr	r1, [r4, #4]
 8008c18:	eb0a 0609 	add.w	r6, sl, r9
 8008c1c:	42b3      	cmp	r3, r6
 8008c1e:	b085      	sub	sp, #20
 8008c20:	bfb8      	it	lt
 8008c22:	3101      	addlt	r1, #1
 8008c24:	f7ff fedc 	bl	80089e0 <_Balloc>
 8008c28:	b930      	cbnz	r0, 8008c38 <__multiply+0x44>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	4b44      	ldr	r3, [pc, #272]	@ (8008d40 <__multiply+0x14c>)
 8008c2e:	4845      	ldr	r0, [pc, #276]	@ (8008d44 <__multiply+0x150>)
 8008c30:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008c34:	f000 fce6 	bl	8009604 <__assert_func>
 8008c38:	f100 0514 	add.w	r5, r0, #20
 8008c3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c40:	462b      	mov	r3, r5
 8008c42:	2200      	movs	r2, #0
 8008c44:	4543      	cmp	r3, r8
 8008c46:	d321      	bcc.n	8008c8c <__multiply+0x98>
 8008c48:	f107 0114 	add.w	r1, r7, #20
 8008c4c:	f104 0214 	add.w	r2, r4, #20
 8008c50:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008c54:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008c58:	9302      	str	r3, [sp, #8]
 8008c5a:	1b13      	subs	r3, r2, r4
 8008c5c:	3b15      	subs	r3, #21
 8008c5e:	f023 0303 	bic.w	r3, r3, #3
 8008c62:	3304      	adds	r3, #4
 8008c64:	f104 0715 	add.w	r7, r4, #21
 8008c68:	42ba      	cmp	r2, r7
 8008c6a:	bf38      	it	cc
 8008c6c:	2304      	movcc	r3, #4
 8008c6e:	9301      	str	r3, [sp, #4]
 8008c70:	9b02      	ldr	r3, [sp, #8]
 8008c72:	9103      	str	r1, [sp, #12]
 8008c74:	428b      	cmp	r3, r1
 8008c76:	d80c      	bhi.n	8008c92 <__multiply+0x9e>
 8008c78:	2e00      	cmp	r6, #0
 8008c7a:	dd03      	ble.n	8008c84 <__multiply+0x90>
 8008c7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d05b      	beq.n	8008d3c <__multiply+0x148>
 8008c84:	6106      	str	r6, [r0, #16]
 8008c86:	b005      	add	sp, #20
 8008c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8c:	f843 2b04 	str.w	r2, [r3], #4
 8008c90:	e7d8      	b.n	8008c44 <__multiply+0x50>
 8008c92:	f8b1 a000 	ldrh.w	sl, [r1]
 8008c96:	f1ba 0f00 	cmp.w	sl, #0
 8008c9a:	d024      	beq.n	8008ce6 <__multiply+0xf2>
 8008c9c:	f104 0e14 	add.w	lr, r4, #20
 8008ca0:	46a9      	mov	r9, r5
 8008ca2:	f04f 0c00 	mov.w	ip, #0
 8008ca6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008caa:	f8d9 3000 	ldr.w	r3, [r9]
 8008cae:	fa1f fb87 	uxth.w	fp, r7
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	fb0a 330b 	mla	r3, sl, fp, r3
 8008cb8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008cbc:	f8d9 7000 	ldr.w	r7, [r9]
 8008cc0:	4463      	add	r3, ip
 8008cc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008cc6:	fb0a c70b 	mla	r7, sl, fp, ip
 8008cca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008cd4:	4572      	cmp	r2, lr
 8008cd6:	f849 3b04 	str.w	r3, [r9], #4
 8008cda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008cde:	d8e2      	bhi.n	8008ca6 <__multiply+0xb2>
 8008ce0:	9b01      	ldr	r3, [sp, #4]
 8008ce2:	f845 c003 	str.w	ip, [r5, r3]
 8008ce6:	9b03      	ldr	r3, [sp, #12]
 8008ce8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008cec:	3104      	adds	r1, #4
 8008cee:	f1b9 0f00 	cmp.w	r9, #0
 8008cf2:	d021      	beq.n	8008d38 <__multiply+0x144>
 8008cf4:	682b      	ldr	r3, [r5, #0]
 8008cf6:	f104 0c14 	add.w	ip, r4, #20
 8008cfa:	46ae      	mov	lr, r5
 8008cfc:	f04f 0a00 	mov.w	sl, #0
 8008d00:	f8bc b000 	ldrh.w	fp, [ip]
 8008d04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008d08:	fb09 770b 	mla	r7, r9, fp, r7
 8008d0c:	4457      	add	r7, sl
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d14:	f84e 3b04 	str.w	r3, [lr], #4
 8008d18:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d20:	f8be 3000 	ldrh.w	r3, [lr]
 8008d24:	fb09 330a 	mla	r3, r9, sl, r3
 8008d28:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008d2c:	4562      	cmp	r2, ip
 8008d2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d32:	d8e5      	bhi.n	8008d00 <__multiply+0x10c>
 8008d34:	9f01      	ldr	r7, [sp, #4]
 8008d36:	51eb      	str	r3, [r5, r7]
 8008d38:	3504      	adds	r5, #4
 8008d3a:	e799      	b.n	8008c70 <__multiply+0x7c>
 8008d3c:	3e01      	subs	r6, #1
 8008d3e:	e79b      	b.n	8008c78 <__multiply+0x84>
 8008d40:	08009ef0 	.word	0x08009ef0
 8008d44:	08009f01 	.word	0x08009f01

08008d48 <__pow5mult>:
 8008d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d4c:	4615      	mov	r5, r2
 8008d4e:	f012 0203 	ands.w	r2, r2, #3
 8008d52:	4607      	mov	r7, r0
 8008d54:	460e      	mov	r6, r1
 8008d56:	d007      	beq.n	8008d68 <__pow5mult+0x20>
 8008d58:	4c25      	ldr	r4, [pc, #148]	@ (8008df0 <__pow5mult+0xa8>)
 8008d5a:	3a01      	subs	r2, #1
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d62:	f7ff fe9f 	bl	8008aa4 <__multadd>
 8008d66:	4606      	mov	r6, r0
 8008d68:	10ad      	asrs	r5, r5, #2
 8008d6a:	d03d      	beq.n	8008de8 <__pow5mult+0xa0>
 8008d6c:	69fc      	ldr	r4, [r7, #28]
 8008d6e:	b97c      	cbnz	r4, 8008d90 <__pow5mult+0x48>
 8008d70:	2010      	movs	r0, #16
 8008d72:	f7ff fd7f 	bl	8008874 <malloc>
 8008d76:	4602      	mov	r2, r0
 8008d78:	61f8      	str	r0, [r7, #28]
 8008d7a:	b928      	cbnz	r0, 8008d88 <__pow5mult+0x40>
 8008d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8008df4 <__pow5mult+0xac>)
 8008d7e:	481e      	ldr	r0, [pc, #120]	@ (8008df8 <__pow5mult+0xb0>)
 8008d80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008d84:	f000 fc3e 	bl	8009604 <__assert_func>
 8008d88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d8c:	6004      	str	r4, [r0, #0]
 8008d8e:	60c4      	str	r4, [r0, #12]
 8008d90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008d94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d98:	b94c      	cbnz	r4, 8008dae <__pow5mult+0x66>
 8008d9a:	f240 2171 	movw	r1, #625	@ 0x271
 8008d9e:	4638      	mov	r0, r7
 8008da0:	f7ff ff12 	bl	8008bc8 <__i2b>
 8008da4:	2300      	movs	r3, #0
 8008da6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008daa:	4604      	mov	r4, r0
 8008dac:	6003      	str	r3, [r0, #0]
 8008dae:	f04f 0900 	mov.w	r9, #0
 8008db2:	07eb      	lsls	r3, r5, #31
 8008db4:	d50a      	bpl.n	8008dcc <__pow5mult+0x84>
 8008db6:	4631      	mov	r1, r6
 8008db8:	4622      	mov	r2, r4
 8008dba:	4638      	mov	r0, r7
 8008dbc:	f7ff ff1a 	bl	8008bf4 <__multiply>
 8008dc0:	4631      	mov	r1, r6
 8008dc2:	4680      	mov	r8, r0
 8008dc4:	4638      	mov	r0, r7
 8008dc6:	f7ff fe4b 	bl	8008a60 <_Bfree>
 8008dca:	4646      	mov	r6, r8
 8008dcc:	106d      	asrs	r5, r5, #1
 8008dce:	d00b      	beq.n	8008de8 <__pow5mult+0xa0>
 8008dd0:	6820      	ldr	r0, [r4, #0]
 8008dd2:	b938      	cbnz	r0, 8008de4 <__pow5mult+0x9c>
 8008dd4:	4622      	mov	r2, r4
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	4638      	mov	r0, r7
 8008dda:	f7ff ff0b 	bl	8008bf4 <__multiply>
 8008dde:	6020      	str	r0, [r4, #0]
 8008de0:	f8c0 9000 	str.w	r9, [r0]
 8008de4:	4604      	mov	r4, r0
 8008de6:	e7e4      	b.n	8008db2 <__pow5mult+0x6a>
 8008de8:	4630      	mov	r0, r6
 8008dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dee:	bf00      	nop
 8008df0:	08009f5c 	.word	0x08009f5c
 8008df4:	08009e81 	.word	0x08009e81
 8008df8:	08009f01 	.word	0x08009f01

08008dfc <__lshift>:
 8008dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e00:	460c      	mov	r4, r1
 8008e02:	6849      	ldr	r1, [r1, #4]
 8008e04:	6923      	ldr	r3, [r4, #16]
 8008e06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e0a:	68a3      	ldr	r3, [r4, #8]
 8008e0c:	4607      	mov	r7, r0
 8008e0e:	4691      	mov	r9, r2
 8008e10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e14:	f108 0601 	add.w	r6, r8, #1
 8008e18:	42b3      	cmp	r3, r6
 8008e1a:	db0b      	blt.n	8008e34 <__lshift+0x38>
 8008e1c:	4638      	mov	r0, r7
 8008e1e:	f7ff fddf 	bl	80089e0 <_Balloc>
 8008e22:	4605      	mov	r5, r0
 8008e24:	b948      	cbnz	r0, 8008e3a <__lshift+0x3e>
 8008e26:	4602      	mov	r2, r0
 8008e28:	4b28      	ldr	r3, [pc, #160]	@ (8008ecc <__lshift+0xd0>)
 8008e2a:	4829      	ldr	r0, [pc, #164]	@ (8008ed0 <__lshift+0xd4>)
 8008e2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008e30:	f000 fbe8 	bl	8009604 <__assert_func>
 8008e34:	3101      	adds	r1, #1
 8008e36:	005b      	lsls	r3, r3, #1
 8008e38:	e7ee      	b.n	8008e18 <__lshift+0x1c>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f100 0114 	add.w	r1, r0, #20
 8008e40:	f100 0210 	add.w	r2, r0, #16
 8008e44:	4618      	mov	r0, r3
 8008e46:	4553      	cmp	r3, sl
 8008e48:	db33      	blt.n	8008eb2 <__lshift+0xb6>
 8008e4a:	6920      	ldr	r0, [r4, #16]
 8008e4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e50:	f104 0314 	add.w	r3, r4, #20
 8008e54:	f019 091f 	ands.w	r9, r9, #31
 8008e58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e60:	d02b      	beq.n	8008eba <__lshift+0xbe>
 8008e62:	f1c9 0e20 	rsb	lr, r9, #32
 8008e66:	468a      	mov	sl, r1
 8008e68:	2200      	movs	r2, #0
 8008e6a:	6818      	ldr	r0, [r3, #0]
 8008e6c:	fa00 f009 	lsl.w	r0, r0, r9
 8008e70:	4310      	orrs	r0, r2
 8008e72:	f84a 0b04 	str.w	r0, [sl], #4
 8008e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e7a:	459c      	cmp	ip, r3
 8008e7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e80:	d8f3      	bhi.n	8008e6a <__lshift+0x6e>
 8008e82:	ebac 0304 	sub.w	r3, ip, r4
 8008e86:	3b15      	subs	r3, #21
 8008e88:	f023 0303 	bic.w	r3, r3, #3
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	f104 0015 	add.w	r0, r4, #21
 8008e92:	4584      	cmp	ip, r0
 8008e94:	bf38      	it	cc
 8008e96:	2304      	movcc	r3, #4
 8008e98:	50ca      	str	r2, [r1, r3]
 8008e9a:	b10a      	cbz	r2, 8008ea0 <__lshift+0xa4>
 8008e9c:	f108 0602 	add.w	r6, r8, #2
 8008ea0:	3e01      	subs	r6, #1
 8008ea2:	4638      	mov	r0, r7
 8008ea4:	612e      	str	r6, [r5, #16]
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	f7ff fdda 	bl	8008a60 <_Bfree>
 8008eac:	4628      	mov	r0, r5
 8008eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	e7c5      	b.n	8008e46 <__lshift+0x4a>
 8008eba:	3904      	subs	r1, #4
 8008ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ec0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ec4:	459c      	cmp	ip, r3
 8008ec6:	d8f9      	bhi.n	8008ebc <__lshift+0xc0>
 8008ec8:	e7ea      	b.n	8008ea0 <__lshift+0xa4>
 8008eca:	bf00      	nop
 8008ecc:	08009ef0 	.word	0x08009ef0
 8008ed0:	08009f01 	.word	0x08009f01

08008ed4 <__mcmp>:
 8008ed4:	690a      	ldr	r2, [r1, #16]
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	6900      	ldr	r0, [r0, #16]
 8008eda:	1a80      	subs	r0, r0, r2
 8008edc:	b530      	push	{r4, r5, lr}
 8008ede:	d10e      	bne.n	8008efe <__mcmp+0x2a>
 8008ee0:	3314      	adds	r3, #20
 8008ee2:	3114      	adds	r1, #20
 8008ee4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ee8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008eec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ef0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ef4:	4295      	cmp	r5, r2
 8008ef6:	d003      	beq.n	8008f00 <__mcmp+0x2c>
 8008ef8:	d205      	bcs.n	8008f06 <__mcmp+0x32>
 8008efa:	f04f 30ff 	mov.w	r0, #4294967295
 8008efe:	bd30      	pop	{r4, r5, pc}
 8008f00:	42a3      	cmp	r3, r4
 8008f02:	d3f3      	bcc.n	8008eec <__mcmp+0x18>
 8008f04:	e7fb      	b.n	8008efe <__mcmp+0x2a>
 8008f06:	2001      	movs	r0, #1
 8008f08:	e7f9      	b.n	8008efe <__mcmp+0x2a>
	...

08008f0c <__mdiff>:
 8008f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f10:	4689      	mov	r9, r1
 8008f12:	4606      	mov	r6, r0
 8008f14:	4611      	mov	r1, r2
 8008f16:	4648      	mov	r0, r9
 8008f18:	4614      	mov	r4, r2
 8008f1a:	f7ff ffdb 	bl	8008ed4 <__mcmp>
 8008f1e:	1e05      	subs	r5, r0, #0
 8008f20:	d112      	bne.n	8008f48 <__mdiff+0x3c>
 8008f22:	4629      	mov	r1, r5
 8008f24:	4630      	mov	r0, r6
 8008f26:	f7ff fd5b 	bl	80089e0 <_Balloc>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	b928      	cbnz	r0, 8008f3a <__mdiff+0x2e>
 8008f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800902c <__mdiff+0x120>)
 8008f30:	f240 2137 	movw	r1, #567	@ 0x237
 8008f34:	483e      	ldr	r0, [pc, #248]	@ (8009030 <__mdiff+0x124>)
 8008f36:	f000 fb65 	bl	8009604 <__assert_func>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f40:	4610      	mov	r0, r2
 8008f42:	b003      	add	sp, #12
 8008f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f48:	bfbc      	itt	lt
 8008f4a:	464b      	movlt	r3, r9
 8008f4c:	46a1      	movlt	r9, r4
 8008f4e:	4630      	mov	r0, r6
 8008f50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008f54:	bfba      	itte	lt
 8008f56:	461c      	movlt	r4, r3
 8008f58:	2501      	movlt	r5, #1
 8008f5a:	2500      	movge	r5, #0
 8008f5c:	f7ff fd40 	bl	80089e0 <_Balloc>
 8008f60:	4602      	mov	r2, r0
 8008f62:	b918      	cbnz	r0, 8008f6c <__mdiff+0x60>
 8008f64:	4b31      	ldr	r3, [pc, #196]	@ (800902c <__mdiff+0x120>)
 8008f66:	f240 2145 	movw	r1, #581	@ 0x245
 8008f6a:	e7e3      	b.n	8008f34 <__mdiff+0x28>
 8008f6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008f70:	6926      	ldr	r6, [r4, #16]
 8008f72:	60c5      	str	r5, [r0, #12]
 8008f74:	f109 0310 	add.w	r3, r9, #16
 8008f78:	f109 0514 	add.w	r5, r9, #20
 8008f7c:	f104 0e14 	add.w	lr, r4, #20
 8008f80:	f100 0b14 	add.w	fp, r0, #20
 8008f84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008f88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	46d9      	mov	r9, fp
 8008f90:	f04f 0c00 	mov.w	ip, #0
 8008f94:	9b01      	ldr	r3, [sp, #4]
 8008f96:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008f9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008f9e:	9301      	str	r3, [sp, #4]
 8008fa0:	fa1f f38a 	uxth.w	r3, sl
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	b283      	uxth	r3, r0
 8008fa8:	1acb      	subs	r3, r1, r3
 8008faa:	0c00      	lsrs	r0, r0, #16
 8008fac:	4463      	add	r3, ip
 8008fae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008fb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008fbc:	4576      	cmp	r6, lr
 8008fbe:	f849 3b04 	str.w	r3, [r9], #4
 8008fc2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008fc6:	d8e5      	bhi.n	8008f94 <__mdiff+0x88>
 8008fc8:	1b33      	subs	r3, r6, r4
 8008fca:	3b15      	subs	r3, #21
 8008fcc:	f023 0303 	bic.w	r3, r3, #3
 8008fd0:	3415      	adds	r4, #21
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	42a6      	cmp	r6, r4
 8008fd6:	bf38      	it	cc
 8008fd8:	2304      	movcc	r3, #4
 8008fda:	441d      	add	r5, r3
 8008fdc:	445b      	add	r3, fp
 8008fde:	461e      	mov	r6, r3
 8008fe0:	462c      	mov	r4, r5
 8008fe2:	4544      	cmp	r4, r8
 8008fe4:	d30e      	bcc.n	8009004 <__mdiff+0xf8>
 8008fe6:	f108 0103 	add.w	r1, r8, #3
 8008fea:	1b49      	subs	r1, r1, r5
 8008fec:	f021 0103 	bic.w	r1, r1, #3
 8008ff0:	3d03      	subs	r5, #3
 8008ff2:	45a8      	cmp	r8, r5
 8008ff4:	bf38      	it	cc
 8008ff6:	2100      	movcc	r1, #0
 8008ff8:	440b      	add	r3, r1
 8008ffa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ffe:	b191      	cbz	r1, 8009026 <__mdiff+0x11a>
 8009000:	6117      	str	r7, [r2, #16]
 8009002:	e79d      	b.n	8008f40 <__mdiff+0x34>
 8009004:	f854 1b04 	ldr.w	r1, [r4], #4
 8009008:	46e6      	mov	lr, ip
 800900a:	0c08      	lsrs	r0, r1, #16
 800900c:	fa1c fc81 	uxtah	ip, ip, r1
 8009010:	4471      	add	r1, lr
 8009012:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009016:	b289      	uxth	r1, r1
 8009018:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800901c:	f846 1b04 	str.w	r1, [r6], #4
 8009020:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009024:	e7dd      	b.n	8008fe2 <__mdiff+0xd6>
 8009026:	3f01      	subs	r7, #1
 8009028:	e7e7      	b.n	8008ffa <__mdiff+0xee>
 800902a:	bf00      	nop
 800902c:	08009ef0 	.word	0x08009ef0
 8009030:	08009f01 	.word	0x08009f01

08009034 <__d2b>:
 8009034:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009038:	460f      	mov	r7, r1
 800903a:	2101      	movs	r1, #1
 800903c:	ec59 8b10 	vmov	r8, r9, d0
 8009040:	4616      	mov	r6, r2
 8009042:	f7ff fccd 	bl	80089e0 <_Balloc>
 8009046:	4604      	mov	r4, r0
 8009048:	b930      	cbnz	r0, 8009058 <__d2b+0x24>
 800904a:	4602      	mov	r2, r0
 800904c:	4b23      	ldr	r3, [pc, #140]	@ (80090dc <__d2b+0xa8>)
 800904e:	4824      	ldr	r0, [pc, #144]	@ (80090e0 <__d2b+0xac>)
 8009050:	f240 310f 	movw	r1, #783	@ 0x30f
 8009054:	f000 fad6 	bl	8009604 <__assert_func>
 8009058:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800905c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009060:	b10d      	cbz	r5, 8009066 <__d2b+0x32>
 8009062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	f1b8 0300 	subs.w	r3, r8, #0
 800906c:	d023      	beq.n	80090b6 <__d2b+0x82>
 800906e:	4668      	mov	r0, sp
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	f7ff fd7c 	bl	8008b6e <__lo0bits>
 8009076:	e9dd 1200 	ldrd	r1, r2, [sp]
 800907a:	b1d0      	cbz	r0, 80090b2 <__d2b+0x7e>
 800907c:	f1c0 0320 	rsb	r3, r0, #32
 8009080:	fa02 f303 	lsl.w	r3, r2, r3
 8009084:	430b      	orrs	r3, r1
 8009086:	40c2      	lsrs	r2, r0
 8009088:	6163      	str	r3, [r4, #20]
 800908a:	9201      	str	r2, [sp, #4]
 800908c:	9b01      	ldr	r3, [sp, #4]
 800908e:	61a3      	str	r3, [r4, #24]
 8009090:	2b00      	cmp	r3, #0
 8009092:	bf0c      	ite	eq
 8009094:	2201      	moveq	r2, #1
 8009096:	2202      	movne	r2, #2
 8009098:	6122      	str	r2, [r4, #16]
 800909a:	b1a5      	cbz	r5, 80090c6 <__d2b+0x92>
 800909c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80090a0:	4405      	add	r5, r0
 80090a2:	603d      	str	r5, [r7, #0]
 80090a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80090a8:	6030      	str	r0, [r6, #0]
 80090aa:	4620      	mov	r0, r4
 80090ac:	b003      	add	sp, #12
 80090ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090b2:	6161      	str	r1, [r4, #20]
 80090b4:	e7ea      	b.n	800908c <__d2b+0x58>
 80090b6:	a801      	add	r0, sp, #4
 80090b8:	f7ff fd59 	bl	8008b6e <__lo0bits>
 80090bc:	9b01      	ldr	r3, [sp, #4]
 80090be:	6163      	str	r3, [r4, #20]
 80090c0:	3020      	adds	r0, #32
 80090c2:	2201      	movs	r2, #1
 80090c4:	e7e8      	b.n	8009098 <__d2b+0x64>
 80090c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80090ce:	6038      	str	r0, [r7, #0]
 80090d0:	6918      	ldr	r0, [r3, #16]
 80090d2:	f7ff fd2d 	bl	8008b30 <__hi0bits>
 80090d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80090da:	e7e5      	b.n	80090a8 <__d2b+0x74>
 80090dc:	08009ef0 	.word	0x08009ef0
 80090e0:	08009f01 	.word	0x08009f01

080090e4 <__sfputc_r>:
 80090e4:	6893      	ldr	r3, [r2, #8]
 80090e6:	3b01      	subs	r3, #1
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	b410      	push	{r4}
 80090ec:	6093      	str	r3, [r2, #8]
 80090ee:	da08      	bge.n	8009102 <__sfputc_r+0x1e>
 80090f0:	6994      	ldr	r4, [r2, #24]
 80090f2:	42a3      	cmp	r3, r4
 80090f4:	db01      	blt.n	80090fa <__sfputc_r+0x16>
 80090f6:	290a      	cmp	r1, #10
 80090f8:	d103      	bne.n	8009102 <__sfputc_r+0x1e>
 80090fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090fe:	f7fe bc0c 	b.w	800791a <__swbuf_r>
 8009102:	6813      	ldr	r3, [r2, #0]
 8009104:	1c58      	adds	r0, r3, #1
 8009106:	6010      	str	r0, [r2, #0]
 8009108:	7019      	strb	r1, [r3, #0]
 800910a:	4608      	mov	r0, r1
 800910c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009110:	4770      	bx	lr

08009112 <__sfputs_r>:
 8009112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009114:	4606      	mov	r6, r0
 8009116:	460f      	mov	r7, r1
 8009118:	4614      	mov	r4, r2
 800911a:	18d5      	adds	r5, r2, r3
 800911c:	42ac      	cmp	r4, r5
 800911e:	d101      	bne.n	8009124 <__sfputs_r+0x12>
 8009120:	2000      	movs	r0, #0
 8009122:	e007      	b.n	8009134 <__sfputs_r+0x22>
 8009124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009128:	463a      	mov	r2, r7
 800912a:	4630      	mov	r0, r6
 800912c:	f7ff ffda 	bl	80090e4 <__sfputc_r>
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	d1f3      	bne.n	800911c <__sfputs_r+0xa>
 8009134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009138 <_vfiprintf_r>:
 8009138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913c:	460d      	mov	r5, r1
 800913e:	b09d      	sub	sp, #116	@ 0x74
 8009140:	4614      	mov	r4, r2
 8009142:	4698      	mov	r8, r3
 8009144:	4606      	mov	r6, r0
 8009146:	b118      	cbz	r0, 8009150 <_vfiprintf_r+0x18>
 8009148:	6a03      	ldr	r3, [r0, #32]
 800914a:	b90b      	cbnz	r3, 8009150 <_vfiprintf_r+0x18>
 800914c:	f7fe fafc 	bl	8007748 <__sinit>
 8009150:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009152:	07d9      	lsls	r1, r3, #31
 8009154:	d405      	bmi.n	8009162 <_vfiprintf_r+0x2a>
 8009156:	89ab      	ldrh	r3, [r5, #12]
 8009158:	059a      	lsls	r2, r3, #22
 800915a:	d402      	bmi.n	8009162 <_vfiprintf_r+0x2a>
 800915c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800915e:	f7fe fcee 	bl	8007b3e <__retarget_lock_acquire_recursive>
 8009162:	89ab      	ldrh	r3, [r5, #12]
 8009164:	071b      	lsls	r3, r3, #28
 8009166:	d501      	bpl.n	800916c <_vfiprintf_r+0x34>
 8009168:	692b      	ldr	r3, [r5, #16]
 800916a:	b99b      	cbnz	r3, 8009194 <_vfiprintf_r+0x5c>
 800916c:	4629      	mov	r1, r5
 800916e:	4630      	mov	r0, r6
 8009170:	f7fe fc12 	bl	8007998 <__swsetup_r>
 8009174:	b170      	cbz	r0, 8009194 <_vfiprintf_r+0x5c>
 8009176:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009178:	07dc      	lsls	r4, r3, #31
 800917a:	d504      	bpl.n	8009186 <_vfiprintf_r+0x4e>
 800917c:	f04f 30ff 	mov.w	r0, #4294967295
 8009180:	b01d      	add	sp, #116	@ 0x74
 8009182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009186:	89ab      	ldrh	r3, [r5, #12]
 8009188:	0598      	lsls	r0, r3, #22
 800918a:	d4f7      	bmi.n	800917c <_vfiprintf_r+0x44>
 800918c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800918e:	f7fe fcd7 	bl	8007b40 <__retarget_lock_release_recursive>
 8009192:	e7f3      	b.n	800917c <_vfiprintf_r+0x44>
 8009194:	2300      	movs	r3, #0
 8009196:	9309      	str	r3, [sp, #36]	@ 0x24
 8009198:	2320      	movs	r3, #32
 800919a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800919e:	f8cd 800c 	str.w	r8, [sp, #12]
 80091a2:	2330      	movs	r3, #48	@ 0x30
 80091a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009354 <_vfiprintf_r+0x21c>
 80091a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091ac:	f04f 0901 	mov.w	r9, #1
 80091b0:	4623      	mov	r3, r4
 80091b2:	469a      	mov	sl, r3
 80091b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091b8:	b10a      	cbz	r2, 80091be <_vfiprintf_r+0x86>
 80091ba:	2a25      	cmp	r2, #37	@ 0x25
 80091bc:	d1f9      	bne.n	80091b2 <_vfiprintf_r+0x7a>
 80091be:	ebba 0b04 	subs.w	fp, sl, r4
 80091c2:	d00b      	beq.n	80091dc <_vfiprintf_r+0xa4>
 80091c4:	465b      	mov	r3, fp
 80091c6:	4622      	mov	r2, r4
 80091c8:	4629      	mov	r1, r5
 80091ca:	4630      	mov	r0, r6
 80091cc:	f7ff ffa1 	bl	8009112 <__sfputs_r>
 80091d0:	3001      	adds	r0, #1
 80091d2:	f000 80a7 	beq.w	8009324 <_vfiprintf_r+0x1ec>
 80091d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091d8:	445a      	add	r2, fp
 80091da:	9209      	str	r2, [sp, #36]	@ 0x24
 80091dc:	f89a 3000 	ldrb.w	r3, [sl]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f000 809f 	beq.w	8009324 <_vfiprintf_r+0x1ec>
 80091e6:	2300      	movs	r3, #0
 80091e8:	f04f 32ff 	mov.w	r2, #4294967295
 80091ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091f0:	f10a 0a01 	add.w	sl, sl, #1
 80091f4:	9304      	str	r3, [sp, #16]
 80091f6:	9307      	str	r3, [sp, #28]
 80091f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80091fe:	4654      	mov	r4, sl
 8009200:	2205      	movs	r2, #5
 8009202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009206:	4853      	ldr	r0, [pc, #332]	@ (8009354 <_vfiprintf_r+0x21c>)
 8009208:	f7f6 ffe2 	bl	80001d0 <memchr>
 800920c:	9a04      	ldr	r2, [sp, #16]
 800920e:	b9d8      	cbnz	r0, 8009248 <_vfiprintf_r+0x110>
 8009210:	06d1      	lsls	r1, r2, #27
 8009212:	bf44      	itt	mi
 8009214:	2320      	movmi	r3, #32
 8009216:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800921a:	0713      	lsls	r3, r2, #28
 800921c:	bf44      	itt	mi
 800921e:	232b      	movmi	r3, #43	@ 0x2b
 8009220:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009224:	f89a 3000 	ldrb.w	r3, [sl]
 8009228:	2b2a      	cmp	r3, #42	@ 0x2a
 800922a:	d015      	beq.n	8009258 <_vfiprintf_r+0x120>
 800922c:	9a07      	ldr	r2, [sp, #28]
 800922e:	4654      	mov	r4, sl
 8009230:	2000      	movs	r0, #0
 8009232:	f04f 0c0a 	mov.w	ip, #10
 8009236:	4621      	mov	r1, r4
 8009238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800923c:	3b30      	subs	r3, #48	@ 0x30
 800923e:	2b09      	cmp	r3, #9
 8009240:	d94b      	bls.n	80092da <_vfiprintf_r+0x1a2>
 8009242:	b1b0      	cbz	r0, 8009272 <_vfiprintf_r+0x13a>
 8009244:	9207      	str	r2, [sp, #28]
 8009246:	e014      	b.n	8009272 <_vfiprintf_r+0x13a>
 8009248:	eba0 0308 	sub.w	r3, r0, r8
 800924c:	fa09 f303 	lsl.w	r3, r9, r3
 8009250:	4313      	orrs	r3, r2
 8009252:	9304      	str	r3, [sp, #16]
 8009254:	46a2      	mov	sl, r4
 8009256:	e7d2      	b.n	80091fe <_vfiprintf_r+0xc6>
 8009258:	9b03      	ldr	r3, [sp, #12]
 800925a:	1d19      	adds	r1, r3, #4
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	9103      	str	r1, [sp, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	bfbb      	ittet	lt
 8009264:	425b      	neglt	r3, r3
 8009266:	f042 0202 	orrlt.w	r2, r2, #2
 800926a:	9307      	strge	r3, [sp, #28]
 800926c:	9307      	strlt	r3, [sp, #28]
 800926e:	bfb8      	it	lt
 8009270:	9204      	strlt	r2, [sp, #16]
 8009272:	7823      	ldrb	r3, [r4, #0]
 8009274:	2b2e      	cmp	r3, #46	@ 0x2e
 8009276:	d10a      	bne.n	800928e <_vfiprintf_r+0x156>
 8009278:	7863      	ldrb	r3, [r4, #1]
 800927a:	2b2a      	cmp	r3, #42	@ 0x2a
 800927c:	d132      	bne.n	80092e4 <_vfiprintf_r+0x1ac>
 800927e:	9b03      	ldr	r3, [sp, #12]
 8009280:	1d1a      	adds	r2, r3, #4
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	9203      	str	r2, [sp, #12]
 8009286:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800928a:	3402      	adds	r4, #2
 800928c:	9305      	str	r3, [sp, #20]
 800928e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009364 <_vfiprintf_r+0x22c>
 8009292:	7821      	ldrb	r1, [r4, #0]
 8009294:	2203      	movs	r2, #3
 8009296:	4650      	mov	r0, sl
 8009298:	f7f6 ff9a 	bl	80001d0 <memchr>
 800929c:	b138      	cbz	r0, 80092ae <_vfiprintf_r+0x176>
 800929e:	9b04      	ldr	r3, [sp, #16]
 80092a0:	eba0 000a 	sub.w	r0, r0, sl
 80092a4:	2240      	movs	r2, #64	@ 0x40
 80092a6:	4082      	lsls	r2, r0
 80092a8:	4313      	orrs	r3, r2
 80092aa:	3401      	adds	r4, #1
 80092ac:	9304      	str	r3, [sp, #16]
 80092ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b2:	4829      	ldr	r0, [pc, #164]	@ (8009358 <_vfiprintf_r+0x220>)
 80092b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092b8:	2206      	movs	r2, #6
 80092ba:	f7f6 ff89 	bl	80001d0 <memchr>
 80092be:	2800      	cmp	r0, #0
 80092c0:	d03f      	beq.n	8009342 <_vfiprintf_r+0x20a>
 80092c2:	4b26      	ldr	r3, [pc, #152]	@ (800935c <_vfiprintf_r+0x224>)
 80092c4:	bb1b      	cbnz	r3, 800930e <_vfiprintf_r+0x1d6>
 80092c6:	9b03      	ldr	r3, [sp, #12]
 80092c8:	3307      	adds	r3, #7
 80092ca:	f023 0307 	bic.w	r3, r3, #7
 80092ce:	3308      	adds	r3, #8
 80092d0:	9303      	str	r3, [sp, #12]
 80092d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092d4:	443b      	add	r3, r7
 80092d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80092d8:	e76a      	b.n	80091b0 <_vfiprintf_r+0x78>
 80092da:	fb0c 3202 	mla	r2, ip, r2, r3
 80092de:	460c      	mov	r4, r1
 80092e0:	2001      	movs	r0, #1
 80092e2:	e7a8      	b.n	8009236 <_vfiprintf_r+0xfe>
 80092e4:	2300      	movs	r3, #0
 80092e6:	3401      	adds	r4, #1
 80092e8:	9305      	str	r3, [sp, #20]
 80092ea:	4619      	mov	r1, r3
 80092ec:	f04f 0c0a 	mov.w	ip, #10
 80092f0:	4620      	mov	r0, r4
 80092f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092f6:	3a30      	subs	r2, #48	@ 0x30
 80092f8:	2a09      	cmp	r2, #9
 80092fa:	d903      	bls.n	8009304 <_vfiprintf_r+0x1cc>
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d0c6      	beq.n	800928e <_vfiprintf_r+0x156>
 8009300:	9105      	str	r1, [sp, #20]
 8009302:	e7c4      	b.n	800928e <_vfiprintf_r+0x156>
 8009304:	fb0c 2101 	mla	r1, ip, r1, r2
 8009308:	4604      	mov	r4, r0
 800930a:	2301      	movs	r3, #1
 800930c:	e7f0      	b.n	80092f0 <_vfiprintf_r+0x1b8>
 800930e:	ab03      	add	r3, sp, #12
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	462a      	mov	r2, r5
 8009314:	4b12      	ldr	r3, [pc, #72]	@ (8009360 <_vfiprintf_r+0x228>)
 8009316:	a904      	add	r1, sp, #16
 8009318:	4630      	mov	r0, r6
 800931a:	f7fd fdd1 	bl	8006ec0 <_printf_float>
 800931e:	4607      	mov	r7, r0
 8009320:	1c78      	adds	r0, r7, #1
 8009322:	d1d6      	bne.n	80092d2 <_vfiprintf_r+0x19a>
 8009324:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009326:	07d9      	lsls	r1, r3, #31
 8009328:	d405      	bmi.n	8009336 <_vfiprintf_r+0x1fe>
 800932a:	89ab      	ldrh	r3, [r5, #12]
 800932c:	059a      	lsls	r2, r3, #22
 800932e:	d402      	bmi.n	8009336 <_vfiprintf_r+0x1fe>
 8009330:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009332:	f7fe fc05 	bl	8007b40 <__retarget_lock_release_recursive>
 8009336:	89ab      	ldrh	r3, [r5, #12]
 8009338:	065b      	lsls	r3, r3, #25
 800933a:	f53f af1f 	bmi.w	800917c <_vfiprintf_r+0x44>
 800933e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009340:	e71e      	b.n	8009180 <_vfiprintf_r+0x48>
 8009342:	ab03      	add	r3, sp, #12
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	462a      	mov	r2, r5
 8009348:	4b05      	ldr	r3, [pc, #20]	@ (8009360 <_vfiprintf_r+0x228>)
 800934a:	a904      	add	r1, sp, #16
 800934c:	4630      	mov	r0, r6
 800934e:	f7fe f84f 	bl	80073f0 <_printf_i>
 8009352:	e7e4      	b.n	800931e <_vfiprintf_r+0x1e6>
 8009354:	0800a058 	.word	0x0800a058
 8009358:	0800a062 	.word	0x0800a062
 800935c:	08006ec1 	.word	0x08006ec1
 8009360:	08009113 	.word	0x08009113
 8009364:	0800a05e 	.word	0x0800a05e

08009368 <__sflush_r>:
 8009368:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800936c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009370:	0716      	lsls	r6, r2, #28
 8009372:	4605      	mov	r5, r0
 8009374:	460c      	mov	r4, r1
 8009376:	d454      	bmi.n	8009422 <__sflush_r+0xba>
 8009378:	684b      	ldr	r3, [r1, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	dc02      	bgt.n	8009384 <__sflush_r+0x1c>
 800937e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009380:	2b00      	cmp	r3, #0
 8009382:	dd48      	ble.n	8009416 <__sflush_r+0xae>
 8009384:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009386:	2e00      	cmp	r6, #0
 8009388:	d045      	beq.n	8009416 <__sflush_r+0xae>
 800938a:	2300      	movs	r3, #0
 800938c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009390:	682f      	ldr	r7, [r5, #0]
 8009392:	6a21      	ldr	r1, [r4, #32]
 8009394:	602b      	str	r3, [r5, #0]
 8009396:	d030      	beq.n	80093fa <__sflush_r+0x92>
 8009398:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	0759      	lsls	r1, r3, #29
 800939e:	d505      	bpl.n	80093ac <__sflush_r+0x44>
 80093a0:	6863      	ldr	r3, [r4, #4]
 80093a2:	1ad2      	subs	r2, r2, r3
 80093a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80093a6:	b10b      	cbz	r3, 80093ac <__sflush_r+0x44>
 80093a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80093aa:	1ad2      	subs	r2, r2, r3
 80093ac:	2300      	movs	r3, #0
 80093ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093b0:	6a21      	ldr	r1, [r4, #32]
 80093b2:	4628      	mov	r0, r5
 80093b4:	47b0      	blx	r6
 80093b6:	1c43      	adds	r3, r0, #1
 80093b8:	89a3      	ldrh	r3, [r4, #12]
 80093ba:	d106      	bne.n	80093ca <__sflush_r+0x62>
 80093bc:	6829      	ldr	r1, [r5, #0]
 80093be:	291d      	cmp	r1, #29
 80093c0:	d82b      	bhi.n	800941a <__sflush_r+0xb2>
 80093c2:	4a2a      	ldr	r2, [pc, #168]	@ (800946c <__sflush_r+0x104>)
 80093c4:	410a      	asrs	r2, r1
 80093c6:	07d6      	lsls	r6, r2, #31
 80093c8:	d427      	bmi.n	800941a <__sflush_r+0xb2>
 80093ca:	2200      	movs	r2, #0
 80093cc:	6062      	str	r2, [r4, #4]
 80093ce:	04d9      	lsls	r1, r3, #19
 80093d0:	6922      	ldr	r2, [r4, #16]
 80093d2:	6022      	str	r2, [r4, #0]
 80093d4:	d504      	bpl.n	80093e0 <__sflush_r+0x78>
 80093d6:	1c42      	adds	r2, r0, #1
 80093d8:	d101      	bne.n	80093de <__sflush_r+0x76>
 80093da:	682b      	ldr	r3, [r5, #0]
 80093dc:	b903      	cbnz	r3, 80093e0 <__sflush_r+0x78>
 80093de:	6560      	str	r0, [r4, #84]	@ 0x54
 80093e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093e2:	602f      	str	r7, [r5, #0]
 80093e4:	b1b9      	cbz	r1, 8009416 <__sflush_r+0xae>
 80093e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093ea:	4299      	cmp	r1, r3
 80093ec:	d002      	beq.n	80093f4 <__sflush_r+0x8c>
 80093ee:	4628      	mov	r0, r5
 80093f0:	f7ff f9f6 	bl	80087e0 <_free_r>
 80093f4:	2300      	movs	r3, #0
 80093f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80093f8:	e00d      	b.n	8009416 <__sflush_r+0xae>
 80093fa:	2301      	movs	r3, #1
 80093fc:	4628      	mov	r0, r5
 80093fe:	47b0      	blx	r6
 8009400:	4602      	mov	r2, r0
 8009402:	1c50      	adds	r0, r2, #1
 8009404:	d1c9      	bne.n	800939a <__sflush_r+0x32>
 8009406:	682b      	ldr	r3, [r5, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d0c6      	beq.n	800939a <__sflush_r+0x32>
 800940c:	2b1d      	cmp	r3, #29
 800940e:	d001      	beq.n	8009414 <__sflush_r+0xac>
 8009410:	2b16      	cmp	r3, #22
 8009412:	d11e      	bne.n	8009452 <__sflush_r+0xea>
 8009414:	602f      	str	r7, [r5, #0]
 8009416:	2000      	movs	r0, #0
 8009418:	e022      	b.n	8009460 <__sflush_r+0xf8>
 800941a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800941e:	b21b      	sxth	r3, r3
 8009420:	e01b      	b.n	800945a <__sflush_r+0xf2>
 8009422:	690f      	ldr	r7, [r1, #16]
 8009424:	2f00      	cmp	r7, #0
 8009426:	d0f6      	beq.n	8009416 <__sflush_r+0xae>
 8009428:	0793      	lsls	r3, r2, #30
 800942a:	680e      	ldr	r6, [r1, #0]
 800942c:	bf08      	it	eq
 800942e:	694b      	ldreq	r3, [r1, #20]
 8009430:	600f      	str	r7, [r1, #0]
 8009432:	bf18      	it	ne
 8009434:	2300      	movne	r3, #0
 8009436:	eba6 0807 	sub.w	r8, r6, r7
 800943a:	608b      	str	r3, [r1, #8]
 800943c:	f1b8 0f00 	cmp.w	r8, #0
 8009440:	dde9      	ble.n	8009416 <__sflush_r+0xae>
 8009442:	6a21      	ldr	r1, [r4, #32]
 8009444:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009446:	4643      	mov	r3, r8
 8009448:	463a      	mov	r2, r7
 800944a:	4628      	mov	r0, r5
 800944c:	47b0      	blx	r6
 800944e:	2800      	cmp	r0, #0
 8009450:	dc08      	bgt.n	8009464 <__sflush_r+0xfc>
 8009452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800945a:	81a3      	strh	r3, [r4, #12]
 800945c:	f04f 30ff 	mov.w	r0, #4294967295
 8009460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009464:	4407      	add	r7, r0
 8009466:	eba8 0800 	sub.w	r8, r8, r0
 800946a:	e7e7      	b.n	800943c <__sflush_r+0xd4>
 800946c:	dfbffffe 	.word	0xdfbffffe

08009470 <_fflush_r>:
 8009470:	b538      	push	{r3, r4, r5, lr}
 8009472:	690b      	ldr	r3, [r1, #16]
 8009474:	4605      	mov	r5, r0
 8009476:	460c      	mov	r4, r1
 8009478:	b913      	cbnz	r3, 8009480 <_fflush_r+0x10>
 800947a:	2500      	movs	r5, #0
 800947c:	4628      	mov	r0, r5
 800947e:	bd38      	pop	{r3, r4, r5, pc}
 8009480:	b118      	cbz	r0, 800948a <_fflush_r+0x1a>
 8009482:	6a03      	ldr	r3, [r0, #32]
 8009484:	b90b      	cbnz	r3, 800948a <_fflush_r+0x1a>
 8009486:	f7fe f95f 	bl	8007748 <__sinit>
 800948a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d0f3      	beq.n	800947a <_fflush_r+0xa>
 8009492:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009494:	07d0      	lsls	r0, r2, #31
 8009496:	d404      	bmi.n	80094a2 <_fflush_r+0x32>
 8009498:	0599      	lsls	r1, r3, #22
 800949a:	d402      	bmi.n	80094a2 <_fflush_r+0x32>
 800949c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800949e:	f7fe fb4e 	bl	8007b3e <__retarget_lock_acquire_recursive>
 80094a2:	4628      	mov	r0, r5
 80094a4:	4621      	mov	r1, r4
 80094a6:	f7ff ff5f 	bl	8009368 <__sflush_r>
 80094aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094ac:	07da      	lsls	r2, r3, #31
 80094ae:	4605      	mov	r5, r0
 80094b0:	d4e4      	bmi.n	800947c <_fflush_r+0xc>
 80094b2:	89a3      	ldrh	r3, [r4, #12]
 80094b4:	059b      	lsls	r3, r3, #22
 80094b6:	d4e1      	bmi.n	800947c <_fflush_r+0xc>
 80094b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094ba:	f7fe fb41 	bl	8007b40 <__retarget_lock_release_recursive>
 80094be:	e7dd      	b.n	800947c <_fflush_r+0xc>

080094c0 <__swhatbuf_r>:
 80094c0:	b570      	push	{r4, r5, r6, lr}
 80094c2:	460c      	mov	r4, r1
 80094c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c8:	2900      	cmp	r1, #0
 80094ca:	b096      	sub	sp, #88	@ 0x58
 80094cc:	4615      	mov	r5, r2
 80094ce:	461e      	mov	r6, r3
 80094d0:	da0d      	bge.n	80094ee <__swhatbuf_r+0x2e>
 80094d2:	89a3      	ldrh	r3, [r4, #12]
 80094d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80094d8:	f04f 0100 	mov.w	r1, #0
 80094dc:	bf14      	ite	ne
 80094de:	2340      	movne	r3, #64	@ 0x40
 80094e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80094e4:	2000      	movs	r0, #0
 80094e6:	6031      	str	r1, [r6, #0]
 80094e8:	602b      	str	r3, [r5, #0]
 80094ea:	b016      	add	sp, #88	@ 0x58
 80094ec:	bd70      	pop	{r4, r5, r6, pc}
 80094ee:	466a      	mov	r2, sp
 80094f0:	f000 f848 	bl	8009584 <_fstat_r>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	dbec      	blt.n	80094d2 <__swhatbuf_r+0x12>
 80094f8:	9901      	ldr	r1, [sp, #4]
 80094fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80094fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009502:	4259      	negs	r1, r3
 8009504:	4159      	adcs	r1, r3
 8009506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800950a:	e7eb      	b.n	80094e4 <__swhatbuf_r+0x24>

0800950c <__smakebuf_r>:
 800950c:	898b      	ldrh	r3, [r1, #12]
 800950e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009510:	079d      	lsls	r5, r3, #30
 8009512:	4606      	mov	r6, r0
 8009514:	460c      	mov	r4, r1
 8009516:	d507      	bpl.n	8009528 <__smakebuf_r+0x1c>
 8009518:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	6123      	str	r3, [r4, #16]
 8009520:	2301      	movs	r3, #1
 8009522:	6163      	str	r3, [r4, #20]
 8009524:	b003      	add	sp, #12
 8009526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009528:	ab01      	add	r3, sp, #4
 800952a:	466a      	mov	r2, sp
 800952c:	f7ff ffc8 	bl	80094c0 <__swhatbuf_r>
 8009530:	9f00      	ldr	r7, [sp, #0]
 8009532:	4605      	mov	r5, r0
 8009534:	4639      	mov	r1, r7
 8009536:	4630      	mov	r0, r6
 8009538:	f7ff f9c6 	bl	80088c8 <_malloc_r>
 800953c:	b948      	cbnz	r0, 8009552 <__smakebuf_r+0x46>
 800953e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009542:	059a      	lsls	r2, r3, #22
 8009544:	d4ee      	bmi.n	8009524 <__smakebuf_r+0x18>
 8009546:	f023 0303 	bic.w	r3, r3, #3
 800954a:	f043 0302 	orr.w	r3, r3, #2
 800954e:	81a3      	strh	r3, [r4, #12]
 8009550:	e7e2      	b.n	8009518 <__smakebuf_r+0xc>
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	6020      	str	r0, [r4, #0]
 8009556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800955a:	81a3      	strh	r3, [r4, #12]
 800955c:	9b01      	ldr	r3, [sp, #4]
 800955e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009562:	b15b      	cbz	r3, 800957c <__smakebuf_r+0x70>
 8009564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009568:	4630      	mov	r0, r6
 800956a:	f000 f81d 	bl	80095a8 <_isatty_r>
 800956e:	b128      	cbz	r0, 800957c <__smakebuf_r+0x70>
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	f023 0303 	bic.w	r3, r3, #3
 8009576:	f043 0301 	orr.w	r3, r3, #1
 800957a:	81a3      	strh	r3, [r4, #12]
 800957c:	89a3      	ldrh	r3, [r4, #12]
 800957e:	431d      	orrs	r5, r3
 8009580:	81a5      	strh	r5, [r4, #12]
 8009582:	e7cf      	b.n	8009524 <__smakebuf_r+0x18>

08009584 <_fstat_r>:
 8009584:	b538      	push	{r3, r4, r5, lr}
 8009586:	4d07      	ldr	r5, [pc, #28]	@ (80095a4 <_fstat_r+0x20>)
 8009588:	2300      	movs	r3, #0
 800958a:	4604      	mov	r4, r0
 800958c:	4608      	mov	r0, r1
 800958e:	4611      	mov	r1, r2
 8009590:	602b      	str	r3, [r5, #0]
 8009592:	f7f8 fe87 	bl	80022a4 <_fstat>
 8009596:	1c43      	adds	r3, r0, #1
 8009598:	d102      	bne.n	80095a0 <_fstat_r+0x1c>
 800959a:	682b      	ldr	r3, [r5, #0]
 800959c:	b103      	cbz	r3, 80095a0 <_fstat_r+0x1c>
 800959e:	6023      	str	r3, [r4, #0]
 80095a0:	bd38      	pop	{r3, r4, r5, pc}
 80095a2:	bf00      	nop
 80095a4:	20001df8 	.word	0x20001df8

080095a8 <_isatty_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	4d06      	ldr	r5, [pc, #24]	@ (80095c4 <_isatty_r+0x1c>)
 80095ac:	2300      	movs	r3, #0
 80095ae:	4604      	mov	r4, r0
 80095b0:	4608      	mov	r0, r1
 80095b2:	602b      	str	r3, [r5, #0]
 80095b4:	f7f8 fe86 	bl	80022c4 <_isatty>
 80095b8:	1c43      	adds	r3, r0, #1
 80095ba:	d102      	bne.n	80095c2 <_isatty_r+0x1a>
 80095bc:	682b      	ldr	r3, [r5, #0]
 80095be:	b103      	cbz	r3, 80095c2 <_isatty_r+0x1a>
 80095c0:	6023      	str	r3, [r4, #0]
 80095c2:	bd38      	pop	{r3, r4, r5, pc}
 80095c4:	20001df8 	.word	0x20001df8

080095c8 <_sbrk_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	4d06      	ldr	r5, [pc, #24]	@ (80095e4 <_sbrk_r+0x1c>)
 80095cc:	2300      	movs	r3, #0
 80095ce:	4604      	mov	r4, r0
 80095d0:	4608      	mov	r0, r1
 80095d2:	602b      	str	r3, [r5, #0]
 80095d4:	f7f8 fe8e 	bl	80022f4 <_sbrk>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d102      	bne.n	80095e2 <_sbrk_r+0x1a>
 80095dc:	682b      	ldr	r3, [r5, #0]
 80095de:	b103      	cbz	r3, 80095e2 <_sbrk_r+0x1a>
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	bd38      	pop	{r3, r4, r5, pc}
 80095e4:	20001df8 	.word	0x20001df8

080095e8 <memcpy>:
 80095e8:	440a      	add	r2, r1
 80095ea:	4291      	cmp	r1, r2
 80095ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80095f0:	d100      	bne.n	80095f4 <memcpy+0xc>
 80095f2:	4770      	bx	lr
 80095f4:	b510      	push	{r4, lr}
 80095f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095fe:	4291      	cmp	r1, r2
 8009600:	d1f9      	bne.n	80095f6 <memcpy+0xe>
 8009602:	bd10      	pop	{r4, pc}

08009604 <__assert_func>:
 8009604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009606:	4614      	mov	r4, r2
 8009608:	461a      	mov	r2, r3
 800960a:	4b09      	ldr	r3, [pc, #36]	@ (8009630 <__assert_func+0x2c>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4605      	mov	r5, r0
 8009610:	68d8      	ldr	r0, [r3, #12]
 8009612:	b954      	cbnz	r4, 800962a <__assert_func+0x26>
 8009614:	4b07      	ldr	r3, [pc, #28]	@ (8009634 <__assert_func+0x30>)
 8009616:	461c      	mov	r4, r3
 8009618:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800961c:	9100      	str	r1, [sp, #0]
 800961e:	462b      	mov	r3, r5
 8009620:	4905      	ldr	r1, [pc, #20]	@ (8009638 <__assert_func+0x34>)
 8009622:	f000 f841 	bl	80096a8 <fiprintf>
 8009626:	f000 f851 	bl	80096cc <abort>
 800962a:	4b04      	ldr	r3, [pc, #16]	@ (800963c <__assert_func+0x38>)
 800962c:	e7f4      	b.n	8009618 <__assert_func+0x14>
 800962e:	bf00      	nop
 8009630:	20000a54 	.word	0x20000a54
 8009634:	0800a0ae 	.word	0x0800a0ae
 8009638:	0800a080 	.word	0x0800a080
 800963c:	0800a073 	.word	0x0800a073

08009640 <_calloc_r>:
 8009640:	b570      	push	{r4, r5, r6, lr}
 8009642:	fba1 5402 	umull	r5, r4, r1, r2
 8009646:	b93c      	cbnz	r4, 8009658 <_calloc_r+0x18>
 8009648:	4629      	mov	r1, r5
 800964a:	f7ff f93d 	bl	80088c8 <_malloc_r>
 800964e:	4606      	mov	r6, r0
 8009650:	b928      	cbnz	r0, 800965e <_calloc_r+0x1e>
 8009652:	2600      	movs	r6, #0
 8009654:	4630      	mov	r0, r6
 8009656:	bd70      	pop	{r4, r5, r6, pc}
 8009658:	220c      	movs	r2, #12
 800965a:	6002      	str	r2, [r0, #0]
 800965c:	e7f9      	b.n	8009652 <_calloc_r+0x12>
 800965e:	462a      	mov	r2, r5
 8009660:	4621      	mov	r1, r4
 8009662:	f7fe f9ef 	bl	8007a44 <memset>
 8009666:	e7f5      	b.n	8009654 <_calloc_r+0x14>

08009668 <__ascii_mbtowc>:
 8009668:	b082      	sub	sp, #8
 800966a:	b901      	cbnz	r1, 800966e <__ascii_mbtowc+0x6>
 800966c:	a901      	add	r1, sp, #4
 800966e:	b142      	cbz	r2, 8009682 <__ascii_mbtowc+0x1a>
 8009670:	b14b      	cbz	r3, 8009686 <__ascii_mbtowc+0x1e>
 8009672:	7813      	ldrb	r3, [r2, #0]
 8009674:	600b      	str	r3, [r1, #0]
 8009676:	7812      	ldrb	r2, [r2, #0]
 8009678:	1e10      	subs	r0, r2, #0
 800967a:	bf18      	it	ne
 800967c:	2001      	movne	r0, #1
 800967e:	b002      	add	sp, #8
 8009680:	4770      	bx	lr
 8009682:	4610      	mov	r0, r2
 8009684:	e7fb      	b.n	800967e <__ascii_mbtowc+0x16>
 8009686:	f06f 0001 	mvn.w	r0, #1
 800968a:	e7f8      	b.n	800967e <__ascii_mbtowc+0x16>

0800968c <__ascii_wctomb>:
 800968c:	4603      	mov	r3, r0
 800968e:	4608      	mov	r0, r1
 8009690:	b141      	cbz	r1, 80096a4 <__ascii_wctomb+0x18>
 8009692:	2aff      	cmp	r2, #255	@ 0xff
 8009694:	d904      	bls.n	80096a0 <__ascii_wctomb+0x14>
 8009696:	228a      	movs	r2, #138	@ 0x8a
 8009698:	601a      	str	r2, [r3, #0]
 800969a:	f04f 30ff 	mov.w	r0, #4294967295
 800969e:	4770      	bx	lr
 80096a0:	700a      	strb	r2, [r1, #0]
 80096a2:	2001      	movs	r0, #1
 80096a4:	4770      	bx	lr
	...

080096a8 <fiprintf>:
 80096a8:	b40e      	push	{r1, r2, r3}
 80096aa:	b503      	push	{r0, r1, lr}
 80096ac:	4601      	mov	r1, r0
 80096ae:	ab03      	add	r3, sp, #12
 80096b0:	4805      	ldr	r0, [pc, #20]	@ (80096c8 <fiprintf+0x20>)
 80096b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096b6:	6800      	ldr	r0, [r0, #0]
 80096b8:	9301      	str	r3, [sp, #4]
 80096ba:	f7ff fd3d 	bl	8009138 <_vfiprintf_r>
 80096be:	b002      	add	sp, #8
 80096c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80096c4:	b003      	add	sp, #12
 80096c6:	4770      	bx	lr
 80096c8:	20000a54 	.word	0x20000a54

080096cc <abort>:
 80096cc:	b508      	push	{r3, lr}
 80096ce:	2006      	movs	r0, #6
 80096d0:	f000 f82c 	bl	800972c <raise>
 80096d4:	2001      	movs	r0, #1
 80096d6:	f7f8 fd95 	bl	8002204 <_exit>

080096da <_raise_r>:
 80096da:	291f      	cmp	r1, #31
 80096dc:	b538      	push	{r3, r4, r5, lr}
 80096de:	4605      	mov	r5, r0
 80096e0:	460c      	mov	r4, r1
 80096e2:	d904      	bls.n	80096ee <_raise_r+0x14>
 80096e4:	2316      	movs	r3, #22
 80096e6:	6003      	str	r3, [r0, #0]
 80096e8:	f04f 30ff 	mov.w	r0, #4294967295
 80096ec:	bd38      	pop	{r3, r4, r5, pc}
 80096ee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80096f0:	b112      	cbz	r2, 80096f8 <_raise_r+0x1e>
 80096f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096f6:	b94b      	cbnz	r3, 800970c <_raise_r+0x32>
 80096f8:	4628      	mov	r0, r5
 80096fa:	f000 f831 	bl	8009760 <_getpid_r>
 80096fe:	4622      	mov	r2, r4
 8009700:	4601      	mov	r1, r0
 8009702:	4628      	mov	r0, r5
 8009704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009708:	f000 b818 	b.w	800973c <_kill_r>
 800970c:	2b01      	cmp	r3, #1
 800970e:	d00a      	beq.n	8009726 <_raise_r+0x4c>
 8009710:	1c59      	adds	r1, r3, #1
 8009712:	d103      	bne.n	800971c <_raise_r+0x42>
 8009714:	2316      	movs	r3, #22
 8009716:	6003      	str	r3, [r0, #0]
 8009718:	2001      	movs	r0, #1
 800971a:	e7e7      	b.n	80096ec <_raise_r+0x12>
 800971c:	2100      	movs	r1, #0
 800971e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009722:	4620      	mov	r0, r4
 8009724:	4798      	blx	r3
 8009726:	2000      	movs	r0, #0
 8009728:	e7e0      	b.n	80096ec <_raise_r+0x12>
	...

0800972c <raise>:
 800972c:	4b02      	ldr	r3, [pc, #8]	@ (8009738 <raise+0xc>)
 800972e:	4601      	mov	r1, r0
 8009730:	6818      	ldr	r0, [r3, #0]
 8009732:	f7ff bfd2 	b.w	80096da <_raise_r>
 8009736:	bf00      	nop
 8009738:	20000a54 	.word	0x20000a54

0800973c <_kill_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	4d07      	ldr	r5, [pc, #28]	@ (800975c <_kill_r+0x20>)
 8009740:	2300      	movs	r3, #0
 8009742:	4604      	mov	r4, r0
 8009744:	4608      	mov	r0, r1
 8009746:	4611      	mov	r1, r2
 8009748:	602b      	str	r3, [r5, #0]
 800974a:	f7f8 fd4b 	bl	80021e4 <_kill>
 800974e:	1c43      	adds	r3, r0, #1
 8009750:	d102      	bne.n	8009758 <_kill_r+0x1c>
 8009752:	682b      	ldr	r3, [r5, #0]
 8009754:	b103      	cbz	r3, 8009758 <_kill_r+0x1c>
 8009756:	6023      	str	r3, [r4, #0]
 8009758:	bd38      	pop	{r3, r4, r5, pc}
 800975a:	bf00      	nop
 800975c:	20001df8 	.word	0x20001df8

08009760 <_getpid_r>:
 8009760:	f7f8 bd38 	b.w	80021d4 <_getpid>
 8009764:	0000      	movs	r0, r0
	...

08009768 <log10>:
 8009768:	b538      	push	{r3, r4, r5, lr}
 800976a:	ed2d 8b02 	vpush	{d8}
 800976e:	ec55 4b10 	vmov	r4, r5, d0
 8009772:	f000 f841 	bl	80097f8 <__ieee754_log10>
 8009776:	4622      	mov	r2, r4
 8009778:	462b      	mov	r3, r5
 800977a:	4620      	mov	r0, r4
 800977c:	4629      	mov	r1, r5
 800977e:	eeb0 8a40 	vmov.f32	s16, s0
 8009782:	eef0 8a60 	vmov.f32	s17, s1
 8009786:	f7f7 f9d1 	bl	8000b2c <__aeabi_dcmpun>
 800978a:	b998      	cbnz	r0, 80097b4 <log10+0x4c>
 800978c:	2200      	movs	r2, #0
 800978e:	2300      	movs	r3, #0
 8009790:	4620      	mov	r0, r4
 8009792:	4629      	mov	r1, r5
 8009794:	f7f7 f9ac 	bl	8000af0 <__aeabi_dcmple>
 8009798:	b160      	cbz	r0, 80097b4 <log10+0x4c>
 800979a:	2200      	movs	r2, #0
 800979c:	2300      	movs	r3, #0
 800979e:	4620      	mov	r0, r4
 80097a0:	4629      	mov	r1, r5
 80097a2:	f7f7 f991 	bl	8000ac8 <__aeabi_dcmpeq>
 80097a6:	b160      	cbz	r0, 80097c2 <log10+0x5a>
 80097a8:	f7fe f99e 	bl	8007ae8 <__errno>
 80097ac:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 80097d8 <log10+0x70>
 80097b0:	2322      	movs	r3, #34	@ 0x22
 80097b2:	6003      	str	r3, [r0, #0]
 80097b4:	eeb0 0a48 	vmov.f32	s0, s16
 80097b8:	eef0 0a68 	vmov.f32	s1, s17
 80097bc:	ecbd 8b02 	vpop	{d8}
 80097c0:	bd38      	pop	{r3, r4, r5, pc}
 80097c2:	f7fe f991 	bl	8007ae8 <__errno>
 80097c6:	ecbd 8b02 	vpop	{d8}
 80097ca:	2321      	movs	r3, #33	@ 0x21
 80097cc:	6003      	str	r3, [r0, #0]
 80097ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097d2:	4803      	ldr	r0, [pc, #12]	@ (80097e0 <log10+0x78>)
 80097d4:	f000 b808 	b.w	80097e8 <nan>
 80097d8:	00000000 	.word	0x00000000
 80097dc:	fff00000 	.word	0xfff00000
 80097e0:	0800a0ae 	.word	0x0800a0ae
 80097e4:	00000000 	.word	0x00000000

080097e8 <nan>:
 80097e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80097f0 <nan+0x8>
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	00000000 	.word	0x00000000
 80097f4:	7ff80000 	.word	0x7ff80000

080097f8 <__ieee754_log10>:
 80097f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097fc:	ec55 4b10 	vmov	r4, r5, d0
 8009800:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8009804:	ed2d 8b02 	vpush	{d8}
 8009808:	462b      	mov	r3, r5
 800980a:	da2e      	bge.n	800986a <__ieee754_log10+0x72>
 800980c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009810:	4322      	orrs	r2, r4
 8009812:	d10b      	bne.n	800982c <__ieee754_log10+0x34>
 8009814:	493a      	ldr	r1, [pc, #232]	@ (8009900 <__ieee754_log10+0x108>)
 8009816:	2200      	movs	r2, #0
 8009818:	2300      	movs	r3, #0
 800981a:	2000      	movs	r0, #0
 800981c:	f7f7 f816 	bl	800084c <__aeabi_ddiv>
 8009820:	ecbd 8b02 	vpop	{d8}
 8009824:	ec41 0b10 	vmov	d0, r0, r1
 8009828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800982c:	2d00      	cmp	r5, #0
 800982e:	da07      	bge.n	8009840 <__ieee754_log10+0x48>
 8009830:	4622      	mov	r2, r4
 8009832:	4620      	mov	r0, r4
 8009834:	4629      	mov	r1, r5
 8009836:	f7f6 fd27 	bl	8000288 <__aeabi_dsub>
 800983a:	2200      	movs	r2, #0
 800983c:	2300      	movs	r3, #0
 800983e:	e7ed      	b.n	800981c <__ieee754_log10+0x24>
 8009840:	4b30      	ldr	r3, [pc, #192]	@ (8009904 <__ieee754_log10+0x10c>)
 8009842:	2200      	movs	r2, #0
 8009844:	4620      	mov	r0, r4
 8009846:	4629      	mov	r1, r5
 8009848:	f7f6 fed6 	bl	80005f8 <__aeabi_dmul>
 800984c:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 8009850:	4604      	mov	r4, r0
 8009852:	460d      	mov	r5, r1
 8009854:	460b      	mov	r3, r1
 8009856:	492c      	ldr	r1, [pc, #176]	@ (8009908 <__ieee754_log10+0x110>)
 8009858:	428b      	cmp	r3, r1
 800985a:	dd08      	ble.n	800986e <__ieee754_log10+0x76>
 800985c:	4622      	mov	r2, r4
 800985e:	462b      	mov	r3, r5
 8009860:	4620      	mov	r0, r4
 8009862:	4629      	mov	r1, r5
 8009864:	f7f6 fd12 	bl	800028c <__adddf3>
 8009868:	e7da      	b.n	8009820 <__ieee754_log10+0x28>
 800986a:	2200      	movs	r2, #0
 800986c:	e7f3      	b.n	8009856 <__ieee754_log10+0x5e>
 800986e:	1518      	asrs	r0, r3, #20
 8009870:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8009874:	4410      	add	r0, r2
 8009876:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800987a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800987e:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8009882:	f7f6 fe4f 	bl	8000524 <__aeabi_i2d>
 8009886:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 800988a:	3303      	adds	r3, #3
 800988c:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8009890:	a315      	add	r3, pc, #84	@ (adr r3, 80098e8 <__ieee754_log10+0xf0>)
 8009892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009896:	ec45 4b18 	vmov	d8, r4, r5
 800989a:	4606      	mov	r6, r0
 800989c:	460f      	mov	r7, r1
 800989e:	f7f6 feab 	bl	80005f8 <__aeabi_dmul>
 80098a2:	eeb0 0a48 	vmov.f32	s0, s16
 80098a6:	eef0 0a68 	vmov.f32	s1, s17
 80098aa:	4604      	mov	r4, r0
 80098ac:	460d      	mov	r5, r1
 80098ae:	f000 f82f 	bl	8009910 <__ieee754_log>
 80098b2:	a30f      	add	r3, pc, #60	@ (adr r3, 80098f0 <__ieee754_log10+0xf8>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	ec51 0b10 	vmov	r0, r1, d0
 80098bc:	f7f6 fe9c 	bl	80005f8 <__aeabi_dmul>
 80098c0:	4622      	mov	r2, r4
 80098c2:	462b      	mov	r3, r5
 80098c4:	f7f6 fce2 	bl	800028c <__adddf3>
 80098c8:	a30b      	add	r3, pc, #44	@ (adr r3, 80098f8 <__ieee754_log10+0x100>)
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	4604      	mov	r4, r0
 80098d0:	460d      	mov	r5, r1
 80098d2:	4630      	mov	r0, r6
 80098d4:	4639      	mov	r1, r7
 80098d6:	f7f6 fe8f 	bl	80005f8 <__aeabi_dmul>
 80098da:	4602      	mov	r2, r0
 80098dc:	460b      	mov	r3, r1
 80098de:	4620      	mov	r0, r4
 80098e0:	4629      	mov	r1, r5
 80098e2:	e7bf      	b.n	8009864 <__ieee754_log10+0x6c>
 80098e4:	f3af 8000 	nop.w
 80098e8:	11f12b36 	.word	0x11f12b36
 80098ec:	3d59fef3 	.word	0x3d59fef3
 80098f0:	1526e50e 	.word	0x1526e50e
 80098f4:	3fdbcb7b 	.word	0x3fdbcb7b
 80098f8:	509f6000 	.word	0x509f6000
 80098fc:	3fd34413 	.word	0x3fd34413
 8009900:	c3500000 	.word	0xc3500000
 8009904:	43500000 	.word	0x43500000
 8009908:	7fefffff 	.word	0x7fefffff
 800990c:	00000000 	.word	0x00000000

08009910 <__ieee754_log>:
 8009910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	ec51 0b10 	vmov	r0, r1, d0
 8009918:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800991c:	b087      	sub	sp, #28
 800991e:	460d      	mov	r5, r1
 8009920:	da26      	bge.n	8009970 <__ieee754_log+0x60>
 8009922:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009926:	4303      	orrs	r3, r0
 8009928:	4602      	mov	r2, r0
 800992a:	d10a      	bne.n	8009942 <__ieee754_log+0x32>
 800992c:	49ce      	ldr	r1, [pc, #824]	@ (8009c68 <__ieee754_log+0x358>)
 800992e:	2200      	movs	r2, #0
 8009930:	2300      	movs	r3, #0
 8009932:	2000      	movs	r0, #0
 8009934:	f7f6 ff8a 	bl	800084c <__aeabi_ddiv>
 8009938:	ec41 0b10 	vmov	d0, r0, r1
 800993c:	b007      	add	sp, #28
 800993e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009942:	2900      	cmp	r1, #0
 8009944:	da05      	bge.n	8009952 <__ieee754_log+0x42>
 8009946:	460b      	mov	r3, r1
 8009948:	f7f6 fc9e 	bl	8000288 <__aeabi_dsub>
 800994c:	2200      	movs	r2, #0
 800994e:	2300      	movs	r3, #0
 8009950:	e7f0      	b.n	8009934 <__ieee754_log+0x24>
 8009952:	4bc6      	ldr	r3, [pc, #792]	@ (8009c6c <__ieee754_log+0x35c>)
 8009954:	2200      	movs	r2, #0
 8009956:	f7f6 fe4f 	bl	80005f8 <__aeabi_dmul>
 800995a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800995e:	460d      	mov	r5, r1
 8009960:	4ac3      	ldr	r2, [pc, #780]	@ (8009c70 <__ieee754_log+0x360>)
 8009962:	4295      	cmp	r5, r2
 8009964:	dd06      	ble.n	8009974 <__ieee754_log+0x64>
 8009966:	4602      	mov	r2, r0
 8009968:	460b      	mov	r3, r1
 800996a:	f7f6 fc8f 	bl	800028c <__adddf3>
 800996e:	e7e3      	b.n	8009938 <__ieee754_log+0x28>
 8009970:	2300      	movs	r3, #0
 8009972:	e7f5      	b.n	8009960 <__ieee754_log+0x50>
 8009974:	152c      	asrs	r4, r5, #20
 8009976:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800997a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800997e:	441c      	add	r4, r3
 8009980:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8009984:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8009988:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800998c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8009990:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8009994:	ea42 0105 	orr.w	r1, r2, r5
 8009998:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800999c:	2200      	movs	r2, #0
 800999e:	4bb5      	ldr	r3, [pc, #724]	@ (8009c74 <__ieee754_log+0x364>)
 80099a0:	f7f6 fc72 	bl	8000288 <__aeabi_dsub>
 80099a4:	1cab      	adds	r3, r5, #2
 80099a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	4682      	mov	sl, r0
 80099ae:	468b      	mov	fp, r1
 80099b0:	f04f 0200 	mov.w	r2, #0
 80099b4:	dc53      	bgt.n	8009a5e <__ieee754_log+0x14e>
 80099b6:	2300      	movs	r3, #0
 80099b8:	f7f7 f886 	bl	8000ac8 <__aeabi_dcmpeq>
 80099bc:	b1d0      	cbz	r0, 80099f4 <__ieee754_log+0xe4>
 80099be:	2c00      	cmp	r4, #0
 80099c0:	f000 8120 	beq.w	8009c04 <__ieee754_log+0x2f4>
 80099c4:	4620      	mov	r0, r4
 80099c6:	f7f6 fdad 	bl	8000524 <__aeabi_i2d>
 80099ca:	a391      	add	r3, pc, #580	@ (adr r3, 8009c10 <__ieee754_log+0x300>)
 80099cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d0:	4606      	mov	r6, r0
 80099d2:	460f      	mov	r7, r1
 80099d4:	f7f6 fe10 	bl	80005f8 <__aeabi_dmul>
 80099d8:	a38f      	add	r3, pc, #572	@ (adr r3, 8009c18 <__ieee754_log+0x308>)
 80099da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099de:	4604      	mov	r4, r0
 80099e0:	460d      	mov	r5, r1
 80099e2:	4630      	mov	r0, r6
 80099e4:	4639      	mov	r1, r7
 80099e6:	f7f6 fe07 	bl	80005f8 <__aeabi_dmul>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	4620      	mov	r0, r4
 80099f0:	4629      	mov	r1, r5
 80099f2:	e7ba      	b.n	800996a <__ieee754_log+0x5a>
 80099f4:	a38a      	add	r3, pc, #552	@ (adr r3, 8009c20 <__ieee754_log+0x310>)
 80099f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fa:	4650      	mov	r0, sl
 80099fc:	4659      	mov	r1, fp
 80099fe:	f7f6 fdfb 	bl	80005f8 <__aeabi_dmul>
 8009a02:	4602      	mov	r2, r0
 8009a04:	460b      	mov	r3, r1
 8009a06:	2000      	movs	r0, #0
 8009a08:	499b      	ldr	r1, [pc, #620]	@ (8009c78 <__ieee754_log+0x368>)
 8009a0a:	f7f6 fc3d 	bl	8000288 <__aeabi_dsub>
 8009a0e:	4652      	mov	r2, sl
 8009a10:	4606      	mov	r6, r0
 8009a12:	460f      	mov	r7, r1
 8009a14:	465b      	mov	r3, fp
 8009a16:	4650      	mov	r0, sl
 8009a18:	4659      	mov	r1, fp
 8009a1a:	f7f6 fded 	bl	80005f8 <__aeabi_dmul>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	460b      	mov	r3, r1
 8009a22:	4630      	mov	r0, r6
 8009a24:	4639      	mov	r1, r7
 8009a26:	f7f6 fde7 	bl	80005f8 <__aeabi_dmul>
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	460f      	mov	r7, r1
 8009a2e:	b914      	cbnz	r4, 8009a36 <__ieee754_log+0x126>
 8009a30:	4632      	mov	r2, r6
 8009a32:	463b      	mov	r3, r7
 8009a34:	e0a0      	b.n	8009b78 <__ieee754_log+0x268>
 8009a36:	4620      	mov	r0, r4
 8009a38:	f7f6 fd74 	bl	8000524 <__aeabi_i2d>
 8009a3c:	a374      	add	r3, pc, #464	@ (adr r3, 8009c10 <__ieee754_log+0x300>)
 8009a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a42:	4680      	mov	r8, r0
 8009a44:	4689      	mov	r9, r1
 8009a46:	f7f6 fdd7 	bl	80005f8 <__aeabi_dmul>
 8009a4a:	a373      	add	r3, pc, #460	@ (adr r3, 8009c18 <__ieee754_log+0x308>)
 8009a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a50:	4604      	mov	r4, r0
 8009a52:	460d      	mov	r5, r1
 8009a54:	4640      	mov	r0, r8
 8009a56:	4649      	mov	r1, r9
 8009a58:	f7f6 fdce 	bl	80005f8 <__aeabi_dmul>
 8009a5c:	e0a5      	b.n	8009baa <__ieee754_log+0x29a>
 8009a5e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009a62:	f7f6 fc13 	bl	800028c <__adddf3>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4650      	mov	r0, sl
 8009a6c:	4659      	mov	r1, fp
 8009a6e:	f7f6 feed 	bl	800084c <__aeabi_ddiv>
 8009a72:	e9cd 0100 	strd	r0, r1, [sp]
 8009a76:	4620      	mov	r0, r4
 8009a78:	f7f6 fd54 	bl	8000524 <__aeabi_i2d>
 8009a7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a84:	4610      	mov	r0, r2
 8009a86:	4619      	mov	r1, r3
 8009a88:	f7f6 fdb6 	bl	80005f8 <__aeabi_dmul>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a94:	f7f6 fdb0 	bl	80005f8 <__aeabi_dmul>
 8009a98:	a363      	add	r3, pc, #396	@ (adr r3, 8009c28 <__ieee754_log+0x318>)
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	4680      	mov	r8, r0
 8009aa0:	4689      	mov	r9, r1
 8009aa2:	f7f6 fda9 	bl	80005f8 <__aeabi_dmul>
 8009aa6:	a362      	add	r3, pc, #392	@ (adr r3, 8009c30 <__ieee754_log+0x320>)
 8009aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aac:	f7f6 fbee 	bl	800028c <__adddf3>
 8009ab0:	4642      	mov	r2, r8
 8009ab2:	464b      	mov	r3, r9
 8009ab4:	f7f6 fda0 	bl	80005f8 <__aeabi_dmul>
 8009ab8:	a35f      	add	r3, pc, #380	@ (adr r3, 8009c38 <__ieee754_log+0x328>)
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	f7f6 fbe5 	bl	800028c <__adddf3>
 8009ac2:	4642      	mov	r2, r8
 8009ac4:	464b      	mov	r3, r9
 8009ac6:	f7f6 fd97 	bl	80005f8 <__aeabi_dmul>
 8009aca:	a35d      	add	r3, pc, #372	@ (adr r3, 8009c40 <__ieee754_log+0x330>)
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	f7f6 fbdc 	bl	800028c <__adddf3>
 8009ad4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ad8:	f7f6 fd8e 	bl	80005f8 <__aeabi_dmul>
 8009adc:	a35a      	add	r3, pc, #360	@ (adr r3, 8009c48 <__ieee754_log+0x338>)
 8009ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ae6:	4640      	mov	r0, r8
 8009ae8:	4649      	mov	r1, r9
 8009aea:	f7f6 fd85 	bl	80005f8 <__aeabi_dmul>
 8009aee:	a358      	add	r3, pc, #352	@ (adr r3, 8009c50 <__ieee754_log+0x340>)
 8009af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af4:	f7f6 fbca 	bl	800028c <__adddf3>
 8009af8:	4642      	mov	r2, r8
 8009afa:	464b      	mov	r3, r9
 8009afc:	f7f6 fd7c 	bl	80005f8 <__aeabi_dmul>
 8009b00:	a355      	add	r3, pc, #340	@ (adr r3, 8009c58 <__ieee754_log+0x348>)
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	f7f6 fbc1 	bl	800028c <__adddf3>
 8009b0a:	4642      	mov	r2, r8
 8009b0c:	464b      	mov	r3, r9
 8009b0e:	f7f6 fd73 	bl	80005f8 <__aeabi_dmul>
 8009b12:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
 8009b1a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8009b1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b22:	f7f6 fbb3 	bl	800028c <__adddf3>
 8009b26:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8009b2a:	3551      	adds	r5, #81	@ 0x51
 8009b2c:	4335      	orrs	r5, r6
 8009b2e:	2d00      	cmp	r5, #0
 8009b30:	4680      	mov	r8, r0
 8009b32:	4689      	mov	r9, r1
 8009b34:	dd48      	ble.n	8009bc8 <__ieee754_log+0x2b8>
 8009b36:	4b50      	ldr	r3, [pc, #320]	@ (8009c78 <__ieee754_log+0x368>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	4650      	mov	r0, sl
 8009b3c:	4659      	mov	r1, fp
 8009b3e:	f7f6 fd5b 	bl	80005f8 <__aeabi_dmul>
 8009b42:	4652      	mov	r2, sl
 8009b44:	465b      	mov	r3, fp
 8009b46:	f7f6 fd57 	bl	80005f8 <__aeabi_dmul>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4606      	mov	r6, r0
 8009b50:	460f      	mov	r7, r1
 8009b52:	4640      	mov	r0, r8
 8009b54:	4649      	mov	r1, r9
 8009b56:	f7f6 fb99 	bl	800028c <__adddf3>
 8009b5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b5e:	f7f6 fd4b 	bl	80005f8 <__aeabi_dmul>
 8009b62:	4680      	mov	r8, r0
 8009b64:	4689      	mov	r9, r1
 8009b66:	b964      	cbnz	r4, 8009b82 <__ieee754_log+0x272>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	4639      	mov	r1, r7
 8009b70:	f7f6 fb8a 	bl	8000288 <__aeabi_dsub>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4650      	mov	r0, sl
 8009b7a:	4659      	mov	r1, fp
 8009b7c:	f7f6 fb84 	bl	8000288 <__aeabi_dsub>
 8009b80:	e6da      	b.n	8009938 <__ieee754_log+0x28>
 8009b82:	a323      	add	r3, pc, #140	@ (adr r3, 8009c10 <__ieee754_log+0x300>)
 8009b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b8c:	f7f6 fd34 	bl	80005f8 <__aeabi_dmul>
 8009b90:	a321      	add	r3, pc, #132	@ (adr r3, 8009c18 <__ieee754_log+0x308>)
 8009b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b96:	4604      	mov	r4, r0
 8009b98:	460d      	mov	r5, r1
 8009b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b9e:	f7f6 fd2b 	bl	80005f8 <__aeabi_dmul>
 8009ba2:	4642      	mov	r2, r8
 8009ba4:	464b      	mov	r3, r9
 8009ba6:	f7f6 fb71 	bl	800028c <__adddf3>
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	4630      	mov	r0, r6
 8009bb0:	4639      	mov	r1, r7
 8009bb2:	f7f6 fb69 	bl	8000288 <__aeabi_dsub>
 8009bb6:	4652      	mov	r2, sl
 8009bb8:	465b      	mov	r3, fp
 8009bba:	f7f6 fb65 	bl	8000288 <__aeabi_dsub>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	e7d9      	b.n	8009b7c <__ieee754_log+0x26c>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	4650      	mov	r0, sl
 8009bce:	4659      	mov	r1, fp
 8009bd0:	f7f6 fb5a 	bl	8000288 <__aeabi_dsub>
 8009bd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bd8:	f7f6 fd0e 	bl	80005f8 <__aeabi_dmul>
 8009bdc:	4606      	mov	r6, r0
 8009bde:	460f      	mov	r7, r1
 8009be0:	2c00      	cmp	r4, #0
 8009be2:	f43f af25 	beq.w	8009a30 <__ieee754_log+0x120>
 8009be6:	a30a      	add	r3, pc, #40	@ (adr r3, 8009c10 <__ieee754_log+0x300>)
 8009be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bf0:	f7f6 fd02 	bl	80005f8 <__aeabi_dmul>
 8009bf4:	a308      	add	r3, pc, #32	@ (adr r3, 8009c18 <__ieee754_log+0x308>)
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	460d      	mov	r5, r1
 8009bfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c02:	e729      	b.n	8009a58 <__ieee754_log+0x148>
 8009c04:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8009c60 <__ieee754_log+0x350>
 8009c08:	e698      	b.n	800993c <__ieee754_log+0x2c>
 8009c0a:	bf00      	nop
 8009c0c:	f3af 8000 	nop.w
 8009c10:	fee00000 	.word	0xfee00000
 8009c14:	3fe62e42 	.word	0x3fe62e42
 8009c18:	35793c76 	.word	0x35793c76
 8009c1c:	3dea39ef 	.word	0x3dea39ef
 8009c20:	55555555 	.word	0x55555555
 8009c24:	3fd55555 	.word	0x3fd55555
 8009c28:	df3e5244 	.word	0xdf3e5244
 8009c2c:	3fc2f112 	.word	0x3fc2f112
 8009c30:	96cb03de 	.word	0x96cb03de
 8009c34:	3fc74664 	.word	0x3fc74664
 8009c38:	94229359 	.word	0x94229359
 8009c3c:	3fd24924 	.word	0x3fd24924
 8009c40:	55555593 	.word	0x55555593
 8009c44:	3fe55555 	.word	0x3fe55555
 8009c48:	d078c69f 	.word	0xd078c69f
 8009c4c:	3fc39a09 	.word	0x3fc39a09
 8009c50:	1d8e78af 	.word	0x1d8e78af
 8009c54:	3fcc71c5 	.word	0x3fcc71c5
 8009c58:	9997fa04 	.word	0x9997fa04
 8009c5c:	3fd99999 	.word	0x3fd99999
	...
 8009c68:	c3500000 	.word	0xc3500000
 8009c6c:	43500000 	.word	0x43500000
 8009c70:	7fefffff 	.word	0x7fefffff
 8009c74:	3ff00000 	.word	0x3ff00000
 8009c78:	3fe00000 	.word	0x3fe00000

08009c7c <_init>:
 8009c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7e:	bf00      	nop
 8009c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c82:	bc08      	pop	{r3}
 8009c84:	469e      	mov	lr, r3
 8009c86:	4770      	bx	lr

08009c88 <_fini>:
 8009c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8a:	bf00      	nop
 8009c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c8e:	bc08      	pop	{r3}
 8009c90:	469e      	mov	lr, r3
 8009c92:	4770      	bx	lr
