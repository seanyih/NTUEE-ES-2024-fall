
hw6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800785c  0800785c  0000885c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007900  08007900  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007900  08007900  00008900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007908  08007908  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007908  08007908  00008908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800790c  0800790c  0000890c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007910  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000068  08007978  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08007978  000094f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d42d  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000345b  00000000  00000000  000264c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c58  00000000  00000000  00029920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000163d  00000000  00000000  0002b578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b54e  00000000  00000000  0002cbb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020675  00000000  00000000  00058103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111247  00000000  00000000  00078778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001899bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008370  00000000  00000000  00189a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00191d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007844 	.word	0x08007844

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08007844 	.word	0x08007844

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f001 f8c3 	bl	80016ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f832 	bl	80005d0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800056c:	f000 f892 	bl	8000694 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f000 fac6 	bl	8000b00 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000574:	f000 f932 	bl	80007dc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000578:	f000 f968 	bl	800084c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800057c:	f000 f9a6 	bl	80008cc <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000580:	f000 f9ca 	bl	8000918 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000584:	f000 fa54 	bl	8000a30 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000588:	f000 fa82 	bl	8000a90 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800058c:	f000 f8b0 	bl	80006f0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000590:	f000 fa00 	bl	8000994 <MX_TIM2_Init>
  MX_USB_OTG_FS_USB_Init();
 8000594:	f000 faac 	bl	8000af0 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  printf("kasljdlk");
 8000598:	4809      	ldr	r0, [pc, #36]	@ (80005c0 <main+0x60>)
 800059a:	f006 fa87 	bl	8006aac <iprintf>
  HAL_TIM_Base_Start_IT(&htim2);
 800059e:	4809      	ldr	r0, [pc, #36]	@ (80005c4 <main+0x64>)
 80005a0:	f004 ffbe 	bl	8005520 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("loop\r\n");
 80005a4:	4808      	ldr	r0, [pc, #32]	@ (80005c8 <main+0x68>)
 80005a6:	f006 fae9 	bl	8006b7c <puts>
	  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 80005aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ae:	4807      	ldr	r0, [pc, #28]	@ (80005cc <main+0x6c>)
 80005b0:	f003 f950 	bl	8003854 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80005b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005b8:	f001 f90e 	bl	80017d8 <HAL_Delay>
	  printf("loop\r\n");
 80005bc:	bf00      	nop
 80005be:	e7f1      	b.n	80005a4 <main+0x44>
 80005c0:	0800785c 	.word	0x0800785c
 80005c4:	2000021c 	.word	0x2000021c
 80005c8:	08007868 	.word	0x08007868
 80005cc:	48000400 	.word	0x48000400

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b096      	sub	sp, #88	@ 0x58
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2244      	movs	r2, #68	@ 0x44
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f006 fbac 	bl	8006d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	463b      	mov	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005f6:	f003 fabb 	bl	8003b70 <HAL_PWREx_ControlVoltageScaling>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000600:	f000 fc36 	bl	8000e70 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000604:	f003 fa96 	bl	8003b34 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000608:	4b21      	ldr	r3, [pc, #132]	@ (8000690 <SystemClock_Config+0xc0>)
 800060a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800060e:	4a20      	ldr	r2, [pc, #128]	@ (8000690 <SystemClock_Config+0xc0>)
 8000610:	f023 0318 	bic.w	r3, r3, #24
 8000614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000618:	2314      	movs	r3, #20
 800061a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000628:	2360      	movs	r3, #96	@ 0x60
 800062a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000630:	2301      	movs	r3, #1
 8000632:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000634:	2301      	movs	r3, #1
 8000636:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000638:	2328      	movs	r3, #40	@ 0x28
 800063a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800063c:	2307      	movs	r3, #7
 800063e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4618      	mov	r0, r3
 800064e:	f003 fba1 	bl	8003d94 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000658:	f000 fc0a 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2303      	movs	r3, #3
 8000662:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	2104      	movs	r1, #4
 8000674:	4618      	mov	r0, r3
 8000676:	f003 ff69 	bl	800454c <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000680:	f000 fbf6 	bl	8000e70 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000684:	f004 fc70 	bl	8004f68 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000688:	bf00      	nop
 800068a:	3758      	adds	r7, #88	@ 0x58
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000

08000694 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b0a2      	sub	sp, #136	@ 0x88
 8000698:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069a:	463b      	mov	r3, r7
 800069c:	2288      	movs	r2, #136	@ 0x88
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f006 fb4b 	bl	8006d3c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80006a6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006aa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006ac:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80006b0:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80006b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006b8:	2301      	movs	r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006bc:	2301      	movs	r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80006c0:	2318      	movs	r3, #24
 80006c2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006c4:	2307      	movs	r3, #7
 80006c6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80006d0:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 80006d4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	4618      	mov	r0, r3
 80006da:	f004 f95b 	bl	8004994 <HAL_RCCEx_PeriphCLKConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80006e4:	f000 fbc4 	bl	8000e70 <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3788      	adds	r7, #136	@ 0x88
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	@ 0x28
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
 8000710:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000712:	4b2f      	ldr	r3, [pc, #188]	@ (80007d0 <MX_ADC1_Init+0xe0>)
 8000714:	4a2f      	ldr	r2, [pc, #188]	@ (80007d4 <MX_ADC1_Init+0xe4>)
 8000716:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000718:	4b2d      	ldr	r3, [pc, #180]	@ (80007d0 <MX_ADC1_Init+0xe0>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800071e:	4b2c      	ldr	r3, [pc, #176]	@ (80007d0 <MX_ADC1_Init+0xe0>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000724:	4b2a      	ldr	r3, [pc, #168]	@ (80007d0 <MX_ADC1_Init+0xe0>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800072a:	4b29      	ldr	r3, [pc, #164]	@ (80007d0 <MX_ADC1_Init+0xe0>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000730:	4b27      	ldr	r3, [pc, #156]	@ (80007d0 <MX_ADC1_Init+0xe0>)
 8000732:	2204      	movs	r2, #4
 8000734:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000736:	4b26      	ldr	r3, [pc, #152]	@ (80007d0 <MX_ADC1_Init+0xe0>)
 8000738:	2200      	movs	r2, #0
 800073a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800073c:	4b24      	ldr	r3, [pc, #144]	@ (80007d0 <MX_ADC1_Init+0xe0>)
 800073e:	2200      	movs	r2, #0
 8000740:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000742:	4b23      	ldr	r3, [pc, #140]	@ (80007d0 <MX_ADC1_Init+0xe0>)
 8000744:	2201      	movs	r2, #1
 8000746:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000748:	4b21      	ldr	r3, [pc, #132]	@ (80007d0 <MX_ADC1_Init+0xe0>)
 800074a:	2200      	movs	r2, #0
 800074c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000750:	4b1f      	ldr	r3, [pc, #124]	@ (80007d0 <MX_ADC1_Init+0xe0>)
 8000752:	2200      	movs	r2, #0
 8000754:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000756:	4b1e      	ldr	r3, [pc, #120]	@ (80007d0 <MX_ADC1_Init+0xe0>)
 8000758:	2200      	movs	r2, #0
 800075a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800075c:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <MX_ADC1_Init+0xe0>)
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000764:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <MX_ADC1_Init+0xe0>)
 8000766:	2200      	movs	r2, #0
 8000768:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800076a:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <MX_ADC1_Init+0xe0>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000772:	4817      	ldr	r0, [pc, #92]	@ (80007d0 <MX_ADC1_Init+0xe0>)
 8000774:	f001 fa4a 	bl	8001c0c <HAL_ADC_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800077e:	f000 fb77 	bl	8000e70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	4810      	ldr	r0, [pc, #64]	@ (80007d0 <MX_ADC1_Init+0xe0>)
 800078e:	f002 fbd1 	bl	8002f34 <HAL_ADCEx_MultiModeConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000798:	f000 fb6a 	bl	8000e70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800079c:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_ADC1_Init+0xe8>)
 800079e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a0:	2306      	movs	r3, #6
 80007a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80007a4:	2307      	movs	r3, #7
 80007a6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007a8:	237f      	movs	r3, #127	@ 0x7f
 80007aa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ac:	2304      	movs	r3, #4
 80007ae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_ADC1_Init+0xe0>)
 80007ba:	f001 feeb 	bl	8002594 <HAL_ADC_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007c4:	f000 fb54 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	@ 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000084 	.word	0x20000084
 80007d4:	50040000 	.word	0x50040000
 80007d8:	c7520000 	.word	0xc7520000

080007dc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80007e0:	4b18      	ldr	r3, [pc, #96]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 80007e2:	4a19      	ldr	r2, [pc, #100]	@ (8000848 <MX_DFSDM1_Init+0x6c>)
 80007e4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80007e6:	4b17      	ldr	r3, [pc, #92]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80007ec:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80007f2:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 8000806:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800080a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800080c:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 8000814:	2204      	movs	r2, #4
 8000816:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000818:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 8000820:	2201      	movs	r2, #1
 8000822:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000824:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 8000826:	2200      	movs	r2, #0
 8000828:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 800082c:	2200      	movs	r2, #0
 800082e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 8000832:	f002 fd41 	bl	80032b8 <HAL_DFSDM_ChannelInit>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800083c:	f000 fb18 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000e8 	.word	0x200000e8
 8000848:	40016020 	.word	0x40016020

0800084c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000850:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	@ (80008c4 <MX_I2C2_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	@ (80008c8 <MX_I2C2_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800085c:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <MX_I2C2_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <MX_I2C2_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_I2C2_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000886:	480e      	ldr	r0, [pc, #56]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000888:	f003 f821 	bl	80038ce <HAL_I2C_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 faed 	bl	8000e70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4809      	ldr	r0, [pc, #36]	@ (80008c0 <MX_I2C2_Init+0x74>)
 800089a:	f003 f8b3 	bl	8003a04 <HAL_I2CEx_ConfigAnalogFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 fae4 	bl	8000e70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_I2C2_Init+0x74>)
 80008ac:	f003 f8f5 	bl	8003a9a <HAL_I2CEx_ConfigDigitalFilter>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 fadb 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000120 	.word	0x20000120
 80008c4:	40005800 	.word	0x40005800
 80008c8:	10d19ce4 	.word	0x10d19ce4

080008cc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <MX_QUADSPI_Init+0x44>)
 80008d2:	4a10      	ldr	r2, [pc, #64]	@ (8000914 <MX_QUADSPI_Init+0x48>)
 80008d4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <MX_QUADSPI_Init+0x44>)
 80008d8:	2202      	movs	r2, #2
 80008da:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <MX_QUADSPI_Init+0x44>)
 80008de:	2204      	movs	r2, #4
 80008e0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <MX_QUADSPI_Init+0x44>)
 80008e4:	2210      	movs	r2, #16
 80008e6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80008e8:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <MX_QUADSPI_Init+0x44>)
 80008ea:	2217      	movs	r2, #23
 80008ec:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <MX_QUADSPI_Init+0x44>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <MX_QUADSPI_Init+0x44>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	@ (8000910 <MX_QUADSPI_Init+0x44>)
 80008fc:	f003 f98e 	bl	8003c1c <HAL_QSPI_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000906:	f000 fab3 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000174 	.word	0x20000174
 8000914:	a0001000 	.word	0xa0001000

08000918 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800091c:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <MX_SPI3_Init+0x74>)
 800091e:	4a1c      	ldr	r2, [pc, #112]	@ (8000990 <MX_SPI3_Init+0x78>)
 8000920:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000922:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <MX_SPI3_Init+0x74>)
 8000924:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000928:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800092a:	4b18      	ldr	r3, [pc, #96]	@ (800098c <MX_SPI3_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000930:	4b16      	ldr	r3, [pc, #88]	@ (800098c <MX_SPI3_Init+0x74>)
 8000932:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000936:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000938:	4b14      	ldr	r3, [pc, #80]	@ (800098c <MX_SPI3_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800093e:	4b13      	ldr	r3, [pc, #76]	@ (800098c <MX_SPI3_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000944:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_SPI3_Init+0x74>)
 8000946:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800094a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800094c:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <MX_SPI3_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <MX_SPI3_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000958:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <MX_SPI3_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <MX_SPI3_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000964:	4b09      	ldr	r3, [pc, #36]	@ (800098c <MX_SPI3_Init+0x74>)
 8000966:	2207      	movs	r2, #7
 8000968:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800096a:	4b08      	ldr	r3, [pc, #32]	@ (800098c <MX_SPI3_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <MX_SPI3_Init+0x74>)
 8000972:	2208      	movs	r2, #8
 8000974:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	@ (800098c <MX_SPI3_Init+0x74>)
 8000978:	f004 fcd8 	bl	800532c <HAL_SPI_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000982:	f000 fa75 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200001b8 	.word	0x200001b8
 8000990:	40003c00 	.word	0x40003c00

08000994 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099a:	f107 0310 	add.w	r3, r7, #16
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <MX_TIM2_Init+0x94>)
 80009b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80009ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <MX_TIM2_Init+0x94>)
 80009bc:	224f      	movs	r2, #79	@ 0x4f
 80009be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <MX_TIM2_Init+0x94>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 80009c6:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <MX_TIM2_Init+0x94>)
 80009c8:	4a18      	ldr	r2, [pc, #96]	@ (8000a2c <MX_TIM2_Init+0x98>)
 80009ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <MX_TIM2_Init+0x94>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <MX_TIM2_Init+0x94>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009d8:	4813      	ldr	r0, [pc, #76]	@ (8000a28 <MX_TIM2_Init+0x94>)
 80009da:	f004 fd4a 	bl	8005472 <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009e4:	f000 fa44 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ee:	f107 0310 	add.w	r3, r7, #16
 80009f2:	4619      	mov	r1, r3
 80009f4:	480c      	ldr	r0, [pc, #48]	@ (8000a28 <MX_TIM2_Init+0x94>)
 80009f6:	f004 ff0a 	bl	800580e <HAL_TIM_ConfigClockSource>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a00:	f000 fa36 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <MX_TIM2_Init+0x94>)
 8000a12:	f005 f937 	bl	8005c84 <HAL_TIMEx_MasterConfigSynchronization>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a1c:	f000 fa28 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000021c 	.word	0x2000021c
 8000a2c:	000f423f 	.word	0x000f423f

08000a30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a34:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a36:	4a15      	ldr	r2, [pc, #84]	@ (8000a8c <MX_USART1_UART_Init+0x5c>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a74:	f005 f9ac 	bl	8005dd0 <HAL_UART_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a7e:	f000 f9f7 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000268 	.word	0x20000268
 8000a8c:	40013800 	.word	0x40013800

08000a90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a94:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000a96:	4a15      	ldr	r2, [pc, #84]	@ (8000aec <MX_USART3_UART_Init+0x5c>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000ad4:	f005 f97c 	bl	8005dd0 <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ade:	f000 f9c7 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200002f0 	.word	0x200002f0
 8000aec:	40004800 	.word	0x40004800

08000af0 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08c      	sub	sp, #48	@ 0x30
 8000b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b16:	4bbb      	ldr	r3, [pc, #748]	@ (8000e04 <MX_GPIO_Init+0x304>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	4aba      	ldr	r2, [pc, #744]	@ (8000e04 <MX_GPIO_Init+0x304>)
 8000b1c:	f043 0310 	orr.w	r3, r3, #16
 8000b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b22:	4bb8      	ldr	r3, [pc, #736]	@ (8000e04 <MX_GPIO_Init+0x304>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	f003 0310 	and.w	r3, r3, #16
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	4bb5      	ldr	r3, [pc, #724]	@ (8000e04 <MX_GPIO_Init+0x304>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	4ab4      	ldr	r2, [pc, #720]	@ (8000e04 <MX_GPIO_Init+0x304>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3a:	4bb2      	ldr	r3, [pc, #712]	@ (8000e04 <MX_GPIO_Init+0x304>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b46:	4baf      	ldr	r3, [pc, #700]	@ (8000e04 <MX_GPIO_Init+0x304>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4a:	4aae      	ldr	r2, [pc, #696]	@ (8000e04 <MX_GPIO_Init+0x304>)
 8000b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b52:	4bac      	ldr	r3, [pc, #688]	@ (8000e04 <MX_GPIO_Init+0x304>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	4ba9      	ldr	r3, [pc, #676]	@ (8000e04 <MX_GPIO_Init+0x304>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b62:	4aa8      	ldr	r2, [pc, #672]	@ (8000e04 <MX_GPIO_Init+0x304>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b6a:	4ba6      	ldr	r3, [pc, #664]	@ (8000e04 <MX_GPIO_Init+0x304>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	4ba3      	ldr	r3, [pc, #652]	@ (8000e04 <MX_GPIO_Init+0x304>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	4aa2      	ldr	r2, [pc, #648]	@ (8000e04 <MX_GPIO_Init+0x304>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b82:	4ba0      	ldr	r3, [pc, #640]	@ (8000e04 <MX_GPIO_Init+0x304>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8e:	4b9d      	ldr	r3, [pc, #628]	@ (8000e04 <MX_GPIO_Init+0x304>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	4a9c      	ldr	r2, [pc, #624]	@ (8000e04 <MX_GPIO_Init+0x304>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9a:	4b9a      	ldr	r3, [pc, #616]	@ (8000e04 <MX_GPIO_Init+0x304>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000bac:	4896      	ldr	r0, [pc, #600]	@ (8000e08 <MX_GPIO_Init+0x308>)
 8000bae:	f002 fe39 	bl	8003824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bbc:	f002 fe32 	bl	8003824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000bc6:	4891      	ldr	r0, [pc, #580]	@ (8000e0c <MX_GPIO_Init+0x30c>)
 8000bc8:	f002 fe2c 	bl	8003824 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000bd2:	488f      	ldr	r0, [pc, #572]	@ (8000e10 <MX_GPIO_Init+0x310>)
 8000bd4:	f002 fe26 	bl	8003824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bde:	488c      	ldr	r0, [pc, #560]	@ (8000e10 <MX_GPIO_Init+0x310>)
 8000be0:	f002 fe20 	bl	8003824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000bea:	488a      	ldr	r0, [pc, #552]	@ (8000e14 <MX_GPIO_Init+0x314>)
 8000bec:	f002 fe1a 	bl	8003824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2120      	movs	r1, #32
 8000bf4:	4885      	ldr	r0, [pc, #532]	@ (8000e0c <MX_GPIO_Init+0x30c>)
 8000bf6:	f002 fe15 	bl	8003824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	4882      	ldr	r0, [pc, #520]	@ (8000e08 <MX_GPIO_Init+0x308>)
 8000c00:	f002 fe10 	bl	8003824 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000c04:	f240 1315 	movw	r3, #277	@ 0x115
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	487a      	ldr	r0, [pc, #488]	@ (8000e08 <MX_GPIO_Init+0x308>)
 8000c1e:	f002 fc57 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000c22:	236a      	movs	r3, #106	@ 0x6a
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c26:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	4619      	mov	r1, r3
 8000c36:	4874      	ldr	r0, [pc, #464]	@ (8000e08 <MX_GPIO_Init+0x308>)
 8000c38:	f002 fc4a 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000c3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c42:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4870      	ldr	r0, [pc, #448]	@ (8000e14 <MX_GPIO_Init+0x314>)
 8000c54:	f002 fc3c 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c68:	2308      	movs	r3, #8
 8000c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	4619      	mov	r1, r3
 8000c72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c76:	f002 fc2b 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000c7a:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c96:	f002 fc1b 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000c9a:	23e0      	movs	r3, #224	@ 0xe0
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000caa:	2305      	movs	r3, #5
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb8:	f002 fc0a 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	484e      	ldr	r0, [pc, #312]	@ (8000e0c <MX_GPIO_Init+0x30c>)
 8000cd2:	f002 fbfd 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000cd6:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000cda:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	4847      	ldr	r0, [pc, #284]	@ (8000e0c <MX_GPIO_Init+0x30c>)
 8000cf0:	f002 fbee 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000cf4:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000cf8:	61fb      	str	r3, [r7, #28]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4841      	ldr	r0, [pc, #260]	@ (8000e10 <MX_GPIO_Init+0x310>)
 8000d0c:	f002 fbe0 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000d10:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	4839      	ldr	r0, [pc, #228]	@ (8000e10 <MX_GPIO_Init+0x310>)
 8000d2a:	f002 fbd1 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000d2e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4833      	ldr	r0, [pc, #204]	@ (8000e14 <MX_GPIO_Init+0x314>)
 8000d48:	f002 fbc2 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d4c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d52:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	482c      	ldr	r0, [pc, #176]	@ (8000e14 <MX_GPIO_Init+0x314>)
 8000d64:	f002 fbb4 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000d68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d80:	f002 fba6 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|GPIO_PIN_11|GPIO_PIN_12;
 8000d84:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d96:	230a      	movs	r3, #10
 8000d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da4:	f002 fb94 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000db8:	2305      	movs	r3, #5
 8000dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4813      	ldr	r0, [pc, #76]	@ (8000e10 <MX_GPIO_Init+0x310>)
 8000dc4:	f002 fb84 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000dc8:	2378      	movs	r3, #120	@ 0x78
 8000dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd8:	2307      	movs	r3, #7
 8000dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	4619      	mov	r1, r3
 8000de2:	480b      	ldr	r0, [pc, #44]	@ (8000e10 <MX_GPIO_Init+0x310>)
 8000de4:	f002 fb74 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000de8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dee:	2312      	movs	r3, #18
 8000df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	e009      	b.n	8000e18 <MX_GPIO_Init+0x318>
 8000e04:	40021000 	.word	0x40021000
 8000e08:	48001000 	.word	0x48001000
 8000e0c:	48000400 	.word	0x48000400
 8000e10:	48000c00 	.word	0x48000c00
 8000e14:	48000800 	.word	0x48000800
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480b      	ldr	r0, [pc, #44]	@ (8000e48 <MX_GPIO_Init+0x348>)
 8000e1c:	f002 fb58 	bl	80034d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	2017      	movs	r0, #23
 8000e26:	f002 fa10 	bl	800324a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e2a:	2017      	movs	r0, #23
 8000e2c:	f002 fa29 	bl	8003282 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	2028      	movs	r0, #40	@ 0x28
 8000e36:	f002 fa08 	bl	800324a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e3a:	2028      	movs	r0, #40	@ 0x28
 8000e3c:	f002 fa21 	bl	8003282 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e40:	bf00      	nop
 8000e42:	3730      	adds	r7, #48	@ 0x30
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	48000400 	.word	0x48000400

08000e4c <__io_putchar>:
	if(htim == &htim2)printf("interrupt called\r\n");

}*/

int __io_putchar(int ch)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	//ITM_SendChar(ch);
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000e54:	1d39      	adds	r1, r7, #4
 8000e56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4803      	ldr	r0, [pc, #12]	@ (8000e6c <__io_putchar+0x20>)
 8000e5e:	f005 f805 	bl	8005e6c <HAL_UART_Transmit>
    return (ch);
 8000e62:	687b      	ldr	r3, [r7, #4]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000268 	.word	0x20000268

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Error_Handler+0x8>

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec0 <HAL_MspInit+0x44>)
 8000e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e86:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec0 <HAL_MspInit+0x44>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <HAL_MspInit+0x44>)
 8000e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <HAL_MspInit+0x44>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9e:	4a08      	ldr	r2, [pc, #32]	@ (8000ec0 <HAL_MspInit+0x44>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_MspInit+0x44>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	@ 0x30
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a31      	ldr	r2, [pc, #196]	@ (8000fa8 <HAL_ADC_MspInit+0xe4>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d15c      	bne.n	8000fa0 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ee6:	4b31      	ldr	r3, [pc, #196]	@ (8000fac <HAL_ADC_MspInit+0xe8>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	4a30      	ldr	r2, [pc, #192]	@ (8000fac <HAL_ADC_MspInit+0xe8>)
 8000eec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ef0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	@ (8000fac <HAL_ADC_MspInit+0xe8>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	4b2b      	ldr	r3, [pc, #172]	@ (8000fac <HAL_ADC_MspInit+0xe8>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f02:	4a2a      	ldr	r2, [pc, #168]	@ (8000fac <HAL_ADC_MspInit+0xe8>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0a:	4b28      	ldr	r3, [pc, #160]	@ (8000fac <HAL_ADC_MspInit+0xe8>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b25      	ldr	r3, [pc, #148]	@ (8000fac <HAL_ADC_MspInit+0xe8>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1a:	4a24      	ldr	r2, [pc, #144]	@ (8000fac <HAL_ADC_MspInit+0xe8>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f22:	4b22      	ldr	r3, [pc, #136]	@ (8000fac <HAL_ADC_MspInit+0xe8>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <HAL_ADC_MspInit+0xe8>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f32:	4a1e      	ldr	r2, [pc, #120]	@ (8000fac <HAL_ADC_MspInit+0xe8>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <HAL_ADC_MspInit+0xe8>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000f46:	233f      	movs	r3, #63	@ 0x3f
 8000f48:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f4a:	230b      	movs	r3, #11
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4815      	ldr	r0, [pc, #84]	@ (8000fb0 <HAL_ADC_MspInit+0xec>)
 8000f5a:	f002 fab9 	bl	80034d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000f5e:	2310      	movs	r3, #16
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f62:	230b      	movs	r3, #11
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f74:	f002 faac 	bl	80034d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f7c:	230b      	movs	r3, #11
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480a      	ldr	r0, [pc, #40]	@ (8000fb4 <HAL_ADC_MspInit+0xf0>)
 8000f8c:	f002 faa0 	bl	80034d0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	2012      	movs	r0, #18
 8000f96:	f002 f958 	bl	800324a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f9a:	2012      	movs	r0, #18
 8000f9c:	f002 f971 	bl	8003282 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fa0:	bf00      	nop
 8000fa2:	3730      	adds	r7, #48	@ 0x30
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	50040000 	.word	0x50040000
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	48000800 	.word	0x48000800
 8000fb4:	48000400 	.word	0x48000400

08000fb8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b0ac      	sub	sp, #176	@ 0xb0
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2288      	movs	r2, #136	@ 0x88
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f005 feaf 	bl	8006d3c <memset>
  if(DFSDM1_Init == 0)
 8000fde:	4b25      	ldr	r3, [pc, #148]	@ (8001074 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d142      	bne.n	800106c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000fe6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 fccc 	bl	8004994 <HAL_RCCEx_PeriphCLKConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001002:	f7ff ff35 	bl	8000e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001006:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800100a:	4a1b      	ldr	r2, [pc, #108]	@ (8001078 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800100c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001010:	6613      	str	r3, [r2, #96]	@ 0x60
 8001012:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001016:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800101e:	4b16      	ldr	r3, [pc, #88]	@ (8001078 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	4a15      	ldr	r2, [pc, #84]	@ (8001078 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001024:	f043 0310 	orr.w	r3, r3, #16
 8001028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102a:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	f003 0310 	and.w	r3, r3, #16
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001036:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800103a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001050:	2306      	movs	r3, #6
 8001052:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001056:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800105a:	4619      	mov	r1, r3
 800105c:	4807      	ldr	r0, [pc, #28]	@ (800107c <HAL_DFSDM_ChannelMspInit+0xc4>)
 800105e:	f002 fa37 	bl	80034d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001062:	4b04      	ldr	r3, [pc, #16]	@ (8001074 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	4a02      	ldr	r2, [pc, #8]	@ (8001074 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800106a:	6013      	str	r3, [r2, #0]
  }

}
 800106c:	bf00      	nop
 800106e:	37b0      	adds	r7, #176	@ 0xb0
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000378 	.word	0x20000378
 8001078:	40021000 	.word	0x40021000
 800107c:	48001000 	.word	0x48001000

08001080 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b0ac      	sub	sp, #176	@ 0xb0
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2288      	movs	r2, #136	@ 0x88
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f005 fe4b 	bl	8006d3c <memset>
  if(hi2c->Instance==I2C2)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a21      	ldr	r2, [pc, #132]	@ (8001130 <HAL_I2C_MspInit+0xb0>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d13b      	bne.n	8001128 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010b0:	2380      	movs	r3, #128	@ 0x80
 80010b2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4618      	mov	r0, r3
 80010be:	f003 fc69 	bl	8004994 <HAL_RCCEx_PeriphCLKConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010c8:	f7ff fed2 	bl	8000e70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <HAL_I2C_MspInit+0xb4>)
 80010ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d0:	4a18      	ldr	r2, [pc, #96]	@ (8001134 <HAL_I2C_MspInit+0xb4>)
 80010d2:	f043 0302 	orr.w	r3, r3, #2
 80010d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d8:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <HAL_I2C_MspInit+0xb4>)
 80010da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80010e4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ec:	2312      	movs	r3, #18
 80010ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010fe:	2304      	movs	r3, #4
 8001100:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001108:	4619      	mov	r1, r3
 800110a:	480b      	ldr	r0, [pc, #44]	@ (8001138 <HAL_I2C_MspInit+0xb8>)
 800110c:	f002 f9e0 	bl	80034d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HAL_I2C_MspInit+0xb4>)
 8001112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001114:	4a07      	ldr	r2, [pc, #28]	@ (8001134 <HAL_I2C_MspInit+0xb4>)
 8001116:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800111a:	6593      	str	r3, [r2, #88]	@ 0x58
 800111c:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <HAL_I2C_MspInit+0xb4>)
 800111e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001120:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001128:	bf00      	nop
 800112a:	37b0      	adds	r7, #176	@ 0xb0
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40005800 	.word	0x40005800
 8001134:	40021000 	.word	0x40021000
 8001138:	48000400 	.word	0x48000400

0800113c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	@ 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a17      	ldr	r2, [pc, #92]	@ (80011b8 <HAL_QSPI_MspInit+0x7c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d128      	bne.n	80011b0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800115e:	4b17      	ldr	r3, [pc, #92]	@ (80011bc <HAL_QSPI_MspInit+0x80>)
 8001160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001162:	4a16      	ldr	r2, [pc, #88]	@ (80011bc <HAL_QSPI_MspInit+0x80>)
 8001164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001168:	6513      	str	r3, [r2, #80]	@ 0x50
 800116a:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <HAL_QSPI_MspInit+0x80>)
 800116c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800116e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <HAL_QSPI_MspInit+0x80>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117a:	4a10      	ldr	r2, [pc, #64]	@ (80011bc <HAL_QSPI_MspInit+0x80>)
 800117c:	f043 0310 	orr.w	r3, r3, #16
 8001180:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001182:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <HAL_QSPI_MspInit+0x80>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800118e:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001192:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011a0:	230a      	movs	r3, #10
 80011a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	4805      	ldr	r0, [pc, #20]	@ (80011c0 <HAL_QSPI_MspInit+0x84>)
 80011ac:	f002 f990 	bl	80034d0 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	@ 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	a0001000 	.word	0xa0001000
 80011bc:	40021000 	.word	0x40021000
 80011c0:	48001000 	.word	0x48001000

080011c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	@ 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a17      	ldr	r2, [pc, #92]	@ (8001240 <HAL_SPI_MspInit+0x7c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d128      	bne.n	8001238 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <HAL_SPI_MspInit+0x80>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ea:	4a16      	ldr	r2, [pc, #88]	@ (8001244 <HAL_SPI_MspInit+0x80>)
 80011ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <HAL_SPI_MspInit+0x80>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <HAL_SPI_MspInit+0x80>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001202:	4a10      	ldr	r2, [pc, #64]	@ (8001244 <HAL_SPI_MspInit+0x80>)
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120a:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <HAL_SPI_MspInit+0x80>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001216:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001228:	2306      	movs	r3, #6
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4805      	ldr	r0, [pc, #20]	@ (8001248 <HAL_SPI_MspInit+0x84>)
 8001234:	f002 f94c 	bl	80034d0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	@ 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40003c00 	.word	0x40003c00
 8001244:	40021000 	.word	0x40021000
 8001248:	48000800 	.word	0x48000800

0800124c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	@ 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800126c:	d130      	bne.n	80012d0 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800126e:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <HAL_TIM_Base_MspInit+0x8c>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	4a19      	ldr	r2, [pc, #100]	@ (80012d8 <HAL_TIM_Base_MspInit+0x8c>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6593      	str	r3, [r2, #88]	@ 0x58
 800127a:	4b17      	ldr	r3, [pc, #92]	@ (80012d8 <HAL_TIM_Base_MspInit+0x8c>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <HAL_TIM_Base_MspInit+0x8c>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	4a13      	ldr	r2, [pc, #76]	@ (80012d8 <HAL_TIM_Base_MspInit+0x8c>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <HAL_TIM_Base_MspInit+0x8c>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 800129e:	2308      	movs	r3, #8
 80012a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012ae:	2301      	movs	r3, #1
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012bc:	f002 f908 	bl	80034d0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	201c      	movs	r0, #28
 80012c6:	f001 ffc0 	bl	800324a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012ca:	201c      	movs	r0, #28
 80012cc:	f001 ffd9 	bl	8003282 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80012d0:	bf00      	nop
 80012d2:	3728      	adds	r7, #40	@ 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40021000 	.word	0x40021000

080012dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b0ae      	sub	sp, #184	@ 0xb8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	2288      	movs	r2, #136	@ 0x88
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f005 fd1d 	bl	8006d3c <memset>
  if(huart->Instance==USART1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a42      	ldr	r2, [pc, #264]	@ (8001410 <HAL_UART_MspInit+0x134>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d13b      	bne.n	8001384 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800130c:	2301      	movs	r3, #1
 800130e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001310:	2300      	movs	r3, #0
 8001312:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fb3b 	bl	8004994 <HAL_RCCEx_PeriphCLKConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001324:	f7ff fda4 	bl	8000e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001328:	4b3a      	ldr	r3, [pc, #232]	@ (8001414 <HAL_UART_MspInit+0x138>)
 800132a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800132c:	4a39      	ldr	r2, [pc, #228]	@ (8001414 <HAL_UART_MspInit+0x138>)
 800132e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001332:	6613      	str	r3, [r2, #96]	@ 0x60
 8001334:	4b37      	ldr	r3, [pc, #220]	@ (8001414 <HAL_UART_MspInit+0x138>)
 8001336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001338:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133c:	61bb      	str	r3, [r7, #24]
 800133e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b34      	ldr	r3, [pc, #208]	@ (8001414 <HAL_UART_MspInit+0x138>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001344:	4a33      	ldr	r2, [pc, #204]	@ (8001414 <HAL_UART_MspInit+0x138>)
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134c:	4b31      	ldr	r3, [pc, #196]	@ (8001414 <HAL_UART_MspInit+0x138>)
 800134e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|GPIO_PIN_7;
 8001358:	23c0      	movs	r3, #192	@ 0xc0
 800135a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001370:	2307      	movs	r3, #7
 8001372:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800137a:	4619      	mov	r1, r3
 800137c:	4826      	ldr	r0, [pc, #152]	@ (8001418 <HAL_UART_MspInit+0x13c>)
 800137e:	f002 f8a7 	bl	80034d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001382:	e040      	b.n	8001406 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a24      	ldr	r2, [pc, #144]	@ (800141c <HAL_UART_MspInit+0x140>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d13b      	bne.n	8001406 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800138e:	2304      	movs	r3, #4
 8001390:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001392:	2300      	movs	r3, #0
 8001394:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4618      	mov	r0, r3
 800139c:	f003 fafa 	bl	8004994 <HAL_RCCEx_PeriphCLKConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_UART_MspInit+0xce>
      Error_Handler();
 80013a6:	f7ff fd63 	bl	8000e70 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <HAL_UART_MspInit+0x138>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ae:	4a19      	ldr	r2, [pc, #100]	@ (8001414 <HAL_UART_MspInit+0x138>)
 80013b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80013b6:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <HAL_UART_MspInit+0x138>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c2:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <HAL_UART_MspInit+0x138>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	4a13      	ldr	r2, [pc, #76]	@ (8001414 <HAL_UART_MspInit+0x138>)
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ce:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <HAL_UART_MspInit+0x138>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80013da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013f4:	2307      	movs	r3, #7
 80013f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013fe:	4619      	mov	r1, r3
 8001400:	4807      	ldr	r0, [pc, #28]	@ (8001420 <HAL_UART_MspInit+0x144>)
 8001402:	f002 f865 	bl	80034d0 <HAL_GPIO_Init>
}
 8001406:	bf00      	nop
 8001408:	37b8      	adds	r7, #184	@ 0xb8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40013800 	.word	0x40013800
 8001414:	40021000 	.word	0x40021000
 8001418:	48000400 	.word	0x48000400
 800141c:	40004800 	.word	0x40004800
 8001420:	48000c00 	.word	0x48000c00

08001424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <NMI_Handler+0x4>

0800142c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <HardFault_Handler+0x4>

08001434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <MemManage_Handler+0x4>

0800143c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <BusFault_Handler+0x4>

08001444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <UsageFault_Handler+0x4>

0800144c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800147a:	f000 f98d 	bl	8001798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
  uint16_t temp;
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800148a:	480a      	ldr	r0, [pc, #40]	@ (80014b4 <ADC1_2_IRQHandler+0x30>)
 800148c:	f000 fe4a 	bl	8002124 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
  temp = HAL_ADC_GetValue(&hadc1);
 8001490:	4808      	ldr	r0, [pc, #32]	@ (80014b4 <ADC1_2_IRQHandler+0x30>)
 8001492:	f000 fe39 	bl	8002108 <HAL_ADC_GetValue>
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
  printf("temperature %d", temp);
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	@ (80014b8 <ADC1_2_IRQHandler+0x34>)
 80014a0:	f005 fb04 	bl	8006aac <iprintf>
  printf("\r\n");
 80014a4:	4805      	ldr	r0, [pc, #20]	@ (80014bc <ADC1_2_IRQHandler+0x38>)
 80014a6:	f005 fb69 	bl	8006b7c <puts>
  /* USER CODE END ADC1_2_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000084 	.word	0x20000084
 80014b8:	08007870 	.word	0x08007870
 80014bc:	08007880 	.word	0x08007880

080014c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80014c4:	2020      	movs	r0, #32
 80014c6:	f002 f9df 	bl	8003888 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80014ca:	2040      	movs	r0, #64	@ 0x40
 80014cc:	f002 f9dc 	bl	8003888 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80014d0:	2080      	movs	r0, #128	@ 0x80
 80014d2:	f002 f9d9 	bl	8003888 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80014d6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80014da:	f002 f9d5 	bl	8003888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014e8:	4803      	ldr	r0, [pc, #12]	@ (80014f8 <TIM2_IRQHandler+0x14>)
 80014ea:	f004 f889 	bl	8005600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_ADC_Start_IT(&hadc1);
 80014ee:	4803      	ldr	r0, [pc, #12]	@ (80014fc <TIM2_IRQHandler+0x18>)
 80014f0:	f000 fcdc 	bl	8001eac <HAL_ADC_Start_IT>
  /* USER CODE END TIM2_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000021c 	.word	0x2000021c
 80014fc:	20000084 	.word	0x20000084

08001500 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001504:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001508:	f002 f9be 	bl	8003888 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800150c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001510:	f002 f9ba 	bl	8003888 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001514:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001518:	f002 f9b6 	bl	8003888 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800151c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001520:	f002 f9b2 	bl	8003888 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001524:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001528:	f002 f9ae 	bl	8003888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	e00a      	b.n	8001558 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001542:	f3af 8000 	nop.w
 8001546:	4601      	mov	r1, r0
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	60ba      	str	r2, [r7, #8]
 800154e:	b2ca      	uxtb	r2, r1
 8001550:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3301      	adds	r3, #1
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	429a      	cmp	r2, r3
 800155e:	dbf0      	blt.n	8001542 <_read+0x12>
  }

  return len;
 8001560:	687b      	ldr	r3, [r7, #4]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	e009      	b.n	8001590 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	60ba      	str	r2, [r7, #8]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fc61 	bl	8000e4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	429a      	cmp	r2, r3
 8001596:	dbf1      	blt.n	800157c <_write+0x12>
  }
  return len;
 8001598:	687b      	ldr	r3, [r7, #4]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <_close>:

int _close(int file)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ca:	605a      	str	r2, [r3, #4]
  return 0;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <_isatty>:

int _isatty(int file)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001614:	4a14      	ldr	r2, [pc, #80]	@ (8001668 <_sbrk+0x5c>)
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <_sbrk+0x60>)
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001620:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <_sbrk+0x64>)
 800162a:	4a12      	ldr	r2, [pc, #72]	@ (8001674 <_sbrk+0x68>)
 800162c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	429a      	cmp	r2, r3
 800163a:	d207      	bcs.n	800164c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800163c:	f005 fbcc 	bl	8006dd8 <__errno>
 8001640:	4603      	mov	r3, r0
 8001642:	220c      	movs	r2, #12
 8001644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	e009      	b.n	8001660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800164c:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001652:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	4a05      	ldr	r2, [pc, #20]	@ (8001670 <_sbrk+0x64>)
 800165c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165e:	68fb      	ldr	r3, [r7, #12]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20018000 	.word	0x20018000
 800166c:	00000400 	.word	0x00000400
 8001670:	2000037c 	.word	0x2000037c
 8001674:	200004f8 	.word	0x200004f8

08001678 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <SystemInit+0x20>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001682:	4a05      	ldr	r2, [pc, #20]	@ (8001698 <SystemInit+0x20>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800169c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016a0:	f7ff ffea 	bl	8001678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a4:	480c      	ldr	r0, [pc, #48]	@ (80016d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016a6:	490d      	ldr	r1, [pc, #52]	@ (80016dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80016a8:	4a0d      	ldr	r2, [pc, #52]	@ (80016e0 <LoopForever+0xe>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ac:	e002      	b.n	80016b4 <LoopCopyDataInit>

080016ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b2:	3304      	adds	r3, #4

080016b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b8:	d3f9      	bcc.n	80016ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ba:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016bc:	4c0a      	ldr	r4, [pc, #40]	@ (80016e8 <LoopForever+0x16>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c0:	e001      	b.n	80016c6 <LoopFillZerobss>

080016c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c4:	3204      	adds	r2, #4

080016c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c8:	d3fb      	bcc.n	80016c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ca:	f005 fb8b 	bl	8006de4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ce:	f7fe ff47 	bl	8000560 <main>

080016d2 <LoopForever>:

LoopForever:
    b LoopForever
 80016d2:	e7fe      	b.n	80016d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016dc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016e0:	08007910 	.word	0x08007910
  ldr r2, =_sbss
 80016e4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016e8:	200004f4 	.word	0x200004f4

080016ec <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC3_IRQHandler>

080016ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f001 fd9b 	bl	8003234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016fe:	2000      	movs	r0, #0
 8001700:	f000 f80e 	bl	8001720 <HAL_InitTick>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	71fb      	strb	r3, [r7, #7]
 800170e:	e001      	b.n	8001714 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001710:	f7ff fbb4 	bl	8000e7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001714:	79fb      	ldrb	r3, [r7, #7]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800172c:	4b17      	ldr	r3, [pc, #92]	@ (800178c <HAL_InitTick+0x6c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d023      	beq.n	800177c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001734:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <HAL_InitTick+0x70>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b14      	ldr	r3, [pc, #80]	@ (800178c <HAL_InitTick+0x6c>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001742:	fbb3 f3f1 	udiv	r3, r3, r1
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f001 fda7 	bl	800329e <HAL_SYSTICK_Config>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10f      	bne.n	8001776 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d809      	bhi.n	8001770 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f001 fd71 	bl	800324a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001768:	4a0a      	ldr	r2, [pc, #40]	@ (8001794 <HAL_InitTick+0x74>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e007      	b.n	8001780 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	e004      	b.n	8001780 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	e001      	b.n	8001780 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001780:	7bfb      	ldrb	r3, [r7, #15]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000008 	.word	0x20000008
 8001790:	20000000 	.word	0x20000000
 8001794:	20000004 	.word	0x20000004

08001798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <HAL_IncTick+0x20>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_IncTick+0x24>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	4a04      	ldr	r2, [pc, #16]	@ (80017bc <HAL_IncTick+0x24>)
 80017aa:	6013      	str	r3, [r2, #0]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20000008 	.word	0x20000008
 80017bc:	20000380 	.word	0x20000380

080017c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return uwTick;
 80017c4:	4b03      	ldr	r3, [pc, #12]	@ (80017d4 <HAL_GetTick+0x14>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000380 	.word	0x20000380

080017d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e0:	f7ff ffee 	bl	80017c0 <HAL_GetTick>
 80017e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f0:	d005      	beq.n	80017fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017f2:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <HAL_Delay+0x44>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017fe:	bf00      	nop
 8001800:	f7ff ffde 	bl	80017c0 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	429a      	cmp	r2, r3
 800180e:	d8f7      	bhi.n	8001800 <HAL_Delay+0x28>
  {
  }
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000008 	.word	0x20000008

08001820 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	609a      	str	r2, [r3, #8]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	609a      	str	r2, [r3, #8]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3360      	adds	r3, #96	@ 0x60
 800189a:	461a      	mov	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <LL_ADC_SetOffset+0x44>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	4313      	orrs	r3, r2
 80018b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018c0:	bf00      	nop
 80018c2:	371c      	adds	r7, #28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	03fff000 	.word	0x03fff000

080018d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3360      	adds	r3, #96	@ 0x60
 80018de:	461a      	mov	r2, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3360      	adds	r3, #96	@ 0x60
 800190c:	461a      	mov	r2, r3
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	431a      	orrs	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001926:	bf00      	nop
 8001928:	371c      	adds	r7, #28
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3330      	adds	r3, #48	@ 0x30
 8001968:	461a      	mov	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	4413      	add	r3, r2
 8001976:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	f003 031f 	and.w	r3, r3, #31
 8001982:	211f      	movs	r1, #31
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	401a      	ands	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	0e9b      	lsrs	r3, r3, #26
 8001990:	f003 011f 	and.w	r1, r3, #31
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	f003 031f 	and.w	r3, r3, #31
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	431a      	orrs	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019a4:	bf00      	nop
 80019a6:	371c      	adds	r7, #28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019bc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b087      	sub	sp, #28
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3314      	adds	r3, #20
 80019e6:	461a      	mov	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	0e5b      	lsrs	r3, r3, #25
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	4413      	add	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	0d1b      	lsrs	r3, r3, #20
 80019fe:	f003 031f 	and.w	r3, r3, #31
 8001a02:	2107      	movs	r1, #7
 8001a04:	fa01 f303 	lsl.w	r3, r1, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	0d1b      	lsrs	r3, r3, #20
 8001a10:	f003 031f 	and.w	r3, r3, #31
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a20:	bf00      	nop
 8001a22:	371c      	adds	r7, #28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a44:	43db      	mvns	r3, r3
 8001a46:	401a      	ands	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 0318 	and.w	r3, r3, #24
 8001a4e:	4908      	ldr	r1, [pc, #32]	@ (8001a70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a50:	40d9      	lsrs	r1, r3
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	400b      	ands	r3, r1
 8001a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	0007ffff 	.word	0x0007ffff

08001a74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 031f 	and.w	r3, r3, #31
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001abc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6093      	str	r3, [r2, #8]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ae0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ae4:	d101      	bne.n	8001aea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b0c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b34:	d101      	bne.n	8001b3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b5c:	f043 0201 	orr.w	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <LL_ADC_IsEnabled+0x18>
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <LL_ADC_IsEnabled+0x1a>
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ba6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001baa:	f043 0204 	orr.w	r2, r3, #4
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d101      	bne.n	8001bd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d101      	bne.n	8001bfc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b089      	sub	sp, #36	@ 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e130      	b.n	8001e88 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d109      	bne.n	8001c48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff f945 	bl	8000ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff3f 	bl	8001ad0 <LL_ADC_IsDeepPowerDownEnabled>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d004      	beq.n	8001c62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff25 	bl	8001aac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ff5a 	bl	8001b20 <LL_ADC_IsInternalRegulatorEnabled>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d115      	bne.n	8001c9e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff3e 	bl	8001af8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c7c:	4b84      	ldr	r3, [pc, #528]	@ (8001e90 <HAL_ADC_Init+0x284>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	099b      	lsrs	r3, r3, #6
 8001c82:	4a84      	ldr	r2, [pc, #528]	@ (8001e94 <HAL_ADC_Init+0x288>)
 8001c84:	fba2 2303 	umull	r2, r3, r2, r3
 8001c88:	099b      	lsrs	r3, r3, #6
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c90:	e002      	b.n	8001c98 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f9      	bne.n	8001c92 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff ff3c 	bl	8001b20 <LL_ADC_IsInternalRegulatorEnabled>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10d      	bne.n	8001cca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb2:	f043 0210 	orr.w	r2, r3, #16
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cbe:	f043 0201 	orr.w	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff ff75 	bl	8001bbe <LL_ADC_REG_IsConversionOngoing>
 8001cd4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f040 80c9 	bne.w	8001e76 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f040 80c5 	bne.w	8001e76 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001cf4:	f043 0202 	orr.w	r2, r3, #2
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff35 	bl	8001b70 <LL_ADC_IsEnabled>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d115      	bne.n	8001d38 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d0c:	4862      	ldr	r0, [pc, #392]	@ (8001e98 <HAL_ADC_Init+0x28c>)
 8001d0e:	f7ff ff2f 	bl	8001b70 <LL_ADC_IsEnabled>
 8001d12:	4604      	mov	r4, r0
 8001d14:	4861      	ldr	r0, [pc, #388]	@ (8001e9c <HAL_ADC_Init+0x290>)
 8001d16:	f7ff ff2b 	bl	8001b70 <LL_ADC_IsEnabled>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	431c      	orrs	r4, r3
 8001d1e:	4860      	ldr	r0, [pc, #384]	@ (8001ea0 <HAL_ADC_Init+0x294>)
 8001d20:	f7ff ff26 	bl	8001b70 <LL_ADC_IsEnabled>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4323      	orrs	r3, r4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4619      	mov	r1, r3
 8001d32:	485c      	ldr	r0, [pc, #368]	@ (8001ea4 <HAL_ADC_Init+0x298>)
 8001d34:	f7ff fd74 	bl	8001820 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	7e5b      	ldrb	r3, [r3, #25]
 8001d3c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d42:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d48:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d4e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d56:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d106      	bne.n	8001d74 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	045b      	lsls	r3, r3, #17
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d009      	beq.n	8001d90 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d80:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d88:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	4b44      	ldr	r3, [pc, #272]	@ (8001ea8 <HAL_ADC_Init+0x29c>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	69b9      	ldr	r1, [r7, #24]
 8001da0:	430b      	orrs	r3, r1
 8001da2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff1b 	bl	8001be4 <LL_ADC_INJ_IsConversionOngoing>
 8001dae:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d13d      	bne.n	8001e32 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d13a      	bne.n	8001e32 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dc0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dc8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001dd8:	f023 0302 	bic.w	r3, r3, #2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	69b9      	ldr	r1, [r7, #24]
 8001de2:	430b      	orrs	r3, r1
 8001de4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d118      	bne.n	8001e22 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001dfa:	f023 0304 	bic.w	r3, r3, #4
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e06:	4311      	orrs	r1, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e0c:	4311      	orrs	r1, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e12:	430a      	orrs	r2, r1
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	611a      	str	r2, [r3, #16]
 8001e20:	e007      	b.n	8001e32 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0201 	bic.w	r2, r2, #1
 8001e30:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d10c      	bne.n	8001e54 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e40:	f023 010f 	bic.w	r1, r3, #15
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	1e5a      	subs	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e52:	e007      	b.n	8001e64 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 020f 	bic.w	r2, r2, #15
 8001e62:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e68:	f023 0303 	bic.w	r3, r3, #3
 8001e6c:	f043 0201 	orr.w	r2, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e74:	e007      	b.n	8001e86 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7a:	f043 0210 	orr.w	r2, r3, #16
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e86:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3724      	adds	r7, #36	@ 0x24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd90      	pop	{r4, r7, pc}
 8001e90:	20000000 	.word	0x20000000
 8001e94:	053e2d63 	.word	0x053e2d63
 8001e98:	50040000 	.word	0x50040000
 8001e9c:	50040100 	.word	0x50040100
 8001ea0:	50040200 	.word	0x50040200
 8001ea4:	50040300 	.word	0x50040300
 8001ea8:	fff0c007 	.word	0xfff0c007

08001eac <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001eb4:	4891      	ldr	r0, [pc, #580]	@ (80020fc <HAL_ADC_Start_IT+0x250>)
 8001eb6:	f7ff fddd 	bl	8001a74 <LL_ADC_GetMultimode>
 8001eba:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fe7c 	bl	8001bbe <LL_ADC_REG_IsConversionOngoing>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f040 8110 	bne.w	80020ee <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_Start_IT+0x30>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e10b      	b.n	80020f4 <HAL_ADC_Start_IT+0x248>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 ff47 	bl	8002d78 <ADC_Enable>
 8001eea:	4603      	mov	r3, r0
 8001eec:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001eee:	7dfb      	ldrb	r3, [r7, #23]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f040 80f7 	bne.w	80020e4 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001efa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a7c      	ldr	r2, [pc, #496]	@ (8002100 <HAL_ADC_Start_IT+0x254>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d002      	beq.n	8001f1a <HAL_ADC_Start_IT+0x6e>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	e000      	b.n	8001f1c <HAL_ADC_Start_IT+0x70>
 8001f1a:	4b7a      	ldr	r3, [pc, #488]	@ (8002104 <HAL_ADC_Start_IT+0x258>)
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d002      	beq.n	8001f2a <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d105      	bne.n	8001f36 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f2e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f46:	f023 0206 	bic.w	r2, r3, #6
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f4e:	e002      	b.n	8001f56 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	221c      	movs	r2, #28
 8001f5c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 021c 	bic.w	r2, r2, #28
 8001f74:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d108      	bne.n	8001f90 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 0208 	orr.w	r2, r2, #8
 8001f8c:	605a      	str	r2, [r3, #4]
          break;
 8001f8e:	e008      	b.n	8001fa2 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0204 	orr.w	r2, r2, #4
 8001f9e:	605a      	str	r2, [r3, #4]
          break;
 8001fa0:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d107      	bne.n	8001fba <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0210 	orr.w	r2, r2, #16
 8001fb8:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a50      	ldr	r2, [pc, #320]	@ (8002100 <HAL_ADC_Start_IT+0x254>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d002      	beq.n	8001fca <HAL_ADC_Start_IT+0x11e>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	e000      	b.n	8001fcc <HAL_ADC_Start_IT+0x120>
 8001fca:	4b4e      	ldr	r3, [pc, #312]	@ (8002104 <HAL_ADC_Start_IT+0x258>)
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d008      	beq.n	8001fe6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b05      	cmp	r3, #5
 8001fde:	d002      	beq.n	8001fe6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b09      	cmp	r3, #9
 8001fe4:	d13a      	bne.n	800205c <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d02d      	beq.n	8002050 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ffc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	2b08      	cmp	r3, #8
 800200a:	d110      	bne.n	800202e <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0220 	bic.w	r2, r2, #32
 800201a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800202a:	605a      	str	r2, [r3, #4]
              break;
 800202c:	e010      	b.n	8002050 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800203c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0220 	orr.w	r2, r2, #32
 800204c:	605a      	str	r2, [r3, #4]
              break;
 800204e:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fd9e 	bl	8001b96 <LL_ADC_REG_StartConversion>
 800205a:	e04a      	b.n	80020f2 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002060:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a24      	ldr	r2, [pc, #144]	@ (8002100 <HAL_ADC_Start_IT+0x254>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d002      	beq.n	8002078 <HAL_ADC_Start_IT+0x1cc>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	e000      	b.n	800207a <HAL_ADC_Start_IT+0x1ce>
 8002078:	4b22      	ldr	r3, [pc, #136]	@ (8002104 <HAL_ADC_Start_IT+0x258>)
 800207a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d034      	beq.n	80020f2 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002090:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	2b08      	cmp	r3, #8
 800209e:	d110      	bne.n	80020c2 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0220 	bic.w	r2, r2, #32
 80020ae:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020be:	605a      	str	r2, [r3, #4]
              break;
 80020c0:	e017      	b.n	80020f2 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020d0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0220 	orr.w	r2, r2, #32
 80020e0:	605a      	str	r2, [r3, #4]
              break;
 80020e2:	e006      	b.n	80020f2 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80020ec:	e001      	b.n	80020f2 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
 80020f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	50040300 	.word	0x50040300
 8002100:	50040100 	.word	0x50040100
 8002104:	50040000 	.word	0x50040000

08002108 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	@ 0x28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800212c:	2300      	movs	r3, #0
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002140:	4882      	ldr	r0, [pc, #520]	@ (800234c <HAL_ADC_IRQHandler+0x228>)
 8002142:	f7ff fc97 	bl	8001a74 <LL_ADC_GetMultimode>
 8002146:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d017      	beq.n	8002182 <HAL_ADC_IRQHandler+0x5e>
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d012      	beq.n	8002182 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 fed3 	bl	8002f20 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2202      	movs	r2, #2
 8002180:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d004      	beq.n	8002196 <HAL_ADC_IRQHandler+0x72>
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10a      	bne.n	80021ac <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 8083 	beq.w	80022a8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d07d      	beq.n	80022a8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fbb2 	bl	8001932 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d062      	beq.n	800229a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a5d      	ldr	r2, [pc, #372]	@ (8002350 <HAL_ADC_IRQHandler+0x22c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d002      	beq.n	80021e4 <HAL_ADC_IRQHandler+0xc0>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	e000      	b.n	80021e6 <HAL_ADC_IRQHandler+0xc2>
 80021e4:	4b5b      	ldr	r3, [pc, #364]	@ (8002354 <HAL_ADC_IRQHandler+0x230>)
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d008      	beq.n	8002200 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	d002      	beq.n	8002200 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b09      	cmp	r3, #9
 80021fe:	d104      	bne.n	800220a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	623b      	str	r3, [r7, #32]
 8002208:	e00c      	b.n	8002224 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a50      	ldr	r2, [pc, #320]	@ (8002350 <HAL_ADC_IRQHandler+0x22c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d002      	beq.n	800221a <HAL_ADC_IRQHandler+0xf6>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	e000      	b.n	800221c <HAL_ADC_IRQHandler+0xf8>
 800221a:	4b4e      	ldr	r3, [pc, #312]	@ (8002354 <HAL_ADC_IRQHandler+0x230>)
 800221c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d135      	bne.n	800229a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b08      	cmp	r3, #8
 800223a:	d12e      	bne.n	800229a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fcbc 	bl	8001bbe <LL_ADC_REG_IsConversionOngoing>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d11a      	bne.n	8002282 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 020c 	bic.w	r2, r2, #12
 800225a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002260:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d112      	bne.n	800229a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002278:	f043 0201 	orr.w	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002280:	e00b      	b.n	800229a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002286:	f043 0210 	orr.w	r2, r3, #16
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002292:	f043 0201 	orr.w	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f95c 	bl	8002558 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	220c      	movs	r2, #12
 80022a6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f003 0320 	and.w	r3, r3, #32
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <HAL_ADC_IRQHandler+0x198>
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10b      	bne.n	80022d4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 809f 	beq.w	8002406 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8099 	beq.w	8002406 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fb5d 	bl	80019b0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80022f6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fb18 	bl	8001932 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002302:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a11      	ldr	r2, [pc, #68]	@ (8002350 <HAL_ADC_IRQHandler+0x22c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d002      	beq.n	8002314 <HAL_ADC_IRQHandler+0x1f0>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	e000      	b.n	8002316 <HAL_ADC_IRQHandler+0x1f2>
 8002314:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <HAL_ADC_IRQHandler+0x230>)
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	4293      	cmp	r3, r2
 800231c:	d008      	beq.n	8002330 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2b06      	cmp	r3, #6
 8002328:	d002      	beq.n	8002330 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b07      	cmp	r3, #7
 800232e:	d104      	bne.n	800233a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	623b      	str	r3, [r7, #32]
 8002338:	e013      	b.n	8002362 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a04      	ldr	r2, [pc, #16]	@ (8002350 <HAL_ADC_IRQHandler+0x22c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d009      	beq.n	8002358 <HAL_ADC_IRQHandler+0x234>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	e007      	b.n	800235a <HAL_ADC_IRQHandler+0x236>
 800234a:	bf00      	nop
 800234c:	50040300 	.word	0x50040300
 8002350:	50040100 	.word	0x50040100
 8002354:	50040000 	.word	0x50040000
 8002358:	4b7d      	ldr	r3, [pc, #500]	@ (8002550 <HAL_ADC_IRQHandler+0x42c>)
 800235a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d047      	beq.n	80023f8 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d007      	beq.n	8002382 <HAL_ADC_IRQHandler+0x25e>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d03f      	beq.n	80023f8 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800237e:	2b00      	cmp	r3, #0
 8002380:	d13a      	bne.n	80023f8 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800238c:	2b40      	cmp	r3, #64	@ 0x40
 800238e:	d133      	bne.n	80023f8 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d12e      	bne.n	80023f8 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fc20 	bl	8001be4 <LL_ADC_INJ_IsConversionOngoing>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d11a      	bne.n	80023e0 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80023b8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d112      	bne.n	80023f8 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d6:	f043 0201 	orr.w	r2, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	655a      	str	r2, [r3, #84]	@ 0x54
 80023de:	e00b      	b.n	80023f8 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e4:	f043 0210 	orr.w	r2, r3, #16
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fd69 	bl	8002ed0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2260      	movs	r2, #96	@ 0x60
 8002404:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800240c:	2b00      	cmp	r3, #0
 800240e:	d011      	beq.n	8002434 <HAL_ADC_IRQHandler+0x310>
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00c      	beq.n	8002434 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f8a0 	bl	800256c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2280      	movs	r2, #128	@ 0x80
 8002432:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243a:	2b00      	cmp	r3, #0
 800243c:	d012      	beq.n	8002464 <HAL_ADC_IRQHandler+0x340>
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00d      	beq.n	8002464 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 fd4f 	bl	8002ef8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002462:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800246a:	2b00      	cmp	r3, #0
 800246c:	d012      	beq.n	8002494 <HAL_ADC_IRQHandler+0x370>
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00d      	beq.n	8002494 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 fd41 	bl	8002f0c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002492:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	2b00      	cmp	r3, #0
 800249c:	d036      	beq.n	800250c <HAL_ADC_IRQHandler+0x3e8>
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d031      	beq.n	800250c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80024b0:	2301      	movs	r3, #1
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b4:	e014      	b.n	80024e0 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80024bc:	4825      	ldr	r0, [pc, #148]	@ (8002554 <HAL_ADC_IRQHandler+0x430>)
 80024be:	f7ff fae7 	bl	8001a90 <LL_ADC_GetMultiDMATransfer>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00b      	beq.n	80024e0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80024c8:	2301      	movs	r3, #1
 80024ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80024cc:	e008      	b.n	80024e0 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80024dc:	2301      	movs	r3, #1
 80024de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80024e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d10e      	bne.n	8002504 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ea:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f6:	f043 0202 	orr.w	r2, r3, #2
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f83e 	bl	8002580 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2210      	movs	r2, #16
 800250a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002512:	2b00      	cmp	r3, #0
 8002514:	d018      	beq.n	8002548 <HAL_ADC_IRQHandler+0x424>
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	d013      	beq.n	8002548 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002524:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002530:	f043 0208 	orr.w	r2, r3, #8
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002540:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fcce 	bl	8002ee4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002548:	bf00      	nop
 800254a:	3728      	adds	r7, #40	@ 0x28
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	50040000 	.word	0x50040000
 8002554:	50040300 	.word	0x50040300

08002558 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b0b6      	sub	sp, #216	@ 0xd8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x22>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e3c9      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x7b6>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fafb 	bl	8001bbe <LL_ADC_REG_IsConversionOngoing>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 83aa 	bne.w	8002d24 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d824      	bhi.n	800262a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	3b02      	subs	r3, #2
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d81b      	bhi.n	8002622 <HAL_ADC_ConfigChannel+0x8e>
 80025ea:	a201      	add	r2, pc, #4	@ (adr r2, 80025f0 <HAL_ADC_ConfigChannel+0x5c>)
 80025ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f0:	08002601 	.word	0x08002601
 80025f4:	08002609 	.word	0x08002609
 80025f8:	08002611 	.word	0x08002611
 80025fc:	08002619 	.word	0x08002619
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002600:	230c      	movs	r3, #12
 8002602:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002606:	e010      	b.n	800262a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002608:	2312      	movs	r3, #18
 800260a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800260e:	e00c      	b.n	800262a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002610:	2318      	movs	r3, #24
 8002612:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002616:	e008      	b.n	800262a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002618:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800261c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002620:	e003      	b.n	800262a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002622:	2306      	movs	r3, #6
 8002624:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002628:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002638:	f7ff f98e 	bl	8001958 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fabc 	bl	8001bbe <LL_ADC_REG_IsConversionOngoing>
 8002646:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fac8 	bl	8001be4 <LL_ADC_INJ_IsConversionOngoing>
 8002654:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002658:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800265c:	2b00      	cmp	r3, #0
 800265e:	f040 81a4 	bne.w	80029aa <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002662:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002666:	2b00      	cmp	r3, #0
 8002668:	f040 819f 	bne.w	80029aa <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6819      	ldr	r1, [r3, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	461a      	mov	r2, r3
 800267a:	f7ff f9ac 	bl	80019d6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	08db      	lsrs	r3, r3, #3
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	2b04      	cmp	r3, #4
 800269e:	d00a      	beq.n	80026b6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	6919      	ldr	r1, [r3, #16]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026b0:	f7ff f8ea 	bl	8001888 <LL_ADC_SetOffset>
 80026b4:	e179      	b.n	80029aa <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff f907 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10a      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x14e>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff f8fc 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 80026d8:	4603      	mov	r3, r0
 80026da:	0e9b      	lsrs	r3, r3, #26
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	e01e      	b.n	8002720 <HAL_ADC_ConfigChannel+0x18c>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff f8f1 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002700:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002704:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002708:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002710:	2320      	movs	r3, #32
 8002712:	e004      	b.n	800271e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002714:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	b2db      	uxtb	r3, r3
 800271e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002728:	2b00      	cmp	r3, #0
 800272a:	d105      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x1a4>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	0e9b      	lsrs	r3, r3, #26
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	e018      	b.n	800276a <HAL_ADC_ConfigChannel+0x1d6>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800274c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002750:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002754:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800275c:	2320      	movs	r3, #32
 800275e:	e004      	b.n	800276a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002760:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800276a:	429a      	cmp	r2, r3
 800276c:	d106      	bne.n	800277c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff f8c0 	bl	80018fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2101      	movs	r1, #1
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff f8a4 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 8002788:	4603      	mov	r3, r0
 800278a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10a      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x214>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2101      	movs	r1, #1
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff f899 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 800279e:	4603      	mov	r3, r0
 80027a0:	0e9b      	lsrs	r3, r3, #26
 80027a2:	f003 021f 	and.w	r2, r3, #31
 80027a6:	e01e      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x252>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2101      	movs	r1, #1
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff f88e 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80027c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80027ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80027d6:	2320      	movs	r3, #32
 80027d8:	e004      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80027da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d105      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x26a>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	0e9b      	lsrs	r3, r3, #26
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	e018      	b.n	8002830 <HAL_ADC_ConfigChannel+0x29c>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002812:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002816:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800281a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002822:	2320      	movs	r3, #32
 8002824:	e004      	b.n	8002830 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002826:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002830:	429a      	cmp	r2, r3
 8002832:	d106      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2200      	movs	r2, #0
 800283a:	2101      	movs	r1, #1
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff f85d 	bl	80018fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2102      	movs	r1, #2
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff f841 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10a      	bne.n	800286e <HAL_ADC_ConfigChannel+0x2da>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2102      	movs	r1, #2
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff f836 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 8002864:	4603      	mov	r3, r0
 8002866:	0e9b      	lsrs	r3, r3, #26
 8002868:	f003 021f 	and.w	r2, r3, #31
 800286c:	e01e      	b.n	80028ac <HAL_ADC_ConfigChannel+0x318>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2102      	movs	r1, #2
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff f82b 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 800287a:	4603      	mov	r3, r0
 800287c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800288c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002890:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002894:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800289c:	2320      	movs	r3, #32
 800289e:	e004      	b.n	80028aa <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80028a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x330>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	e014      	b.n	80028ee <HAL_ADC_ConfigChannel+0x35a>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80028d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80028d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80028e0:	2320      	movs	r3, #32
 80028e2:	e004      	b.n	80028ee <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80028e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028e8:	fab3 f383 	clz	r3, r3
 80028ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d106      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2200      	movs	r2, #0
 80028f8:	2102      	movs	r1, #2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fffe 	bl	80018fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2103      	movs	r1, #3
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe ffe2 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 800290c:	4603      	mov	r3, r0
 800290e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10a      	bne.n	800292c <HAL_ADC_ConfigChannel+0x398>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2103      	movs	r1, #3
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe ffd7 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 8002922:	4603      	mov	r3, r0
 8002924:	0e9b      	lsrs	r3, r3, #26
 8002926:	f003 021f 	and.w	r2, r3, #31
 800292a:	e017      	b.n	800295c <HAL_ADC_ConfigChannel+0x3c8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2103      	movs	r1, #3
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe ffcc 	bl	80018d0 <LL_ADC_GetOffsetChannel>
 8002938:	4603      	mov	r3, r0
 800293a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002944:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002946:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002948:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800294e:	2320      	movs	r3, #32
 8002950:	e003      	b.n	800295a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002952:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002954:	fab3 f383 	clz	r3, r3
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x3e0>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	0e9b      	lsrs	r3, r3, #26
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	e011      	b.n	8002998 <HAL_ADC_ConfigChannel+0x404>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002982:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002984:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002986:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800298c:	2320      	movs	r3, #32
 800298e:	e003      	b.n	8002998 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002990:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002998:	429a      	cmp	r2, r3
 800299a:	d106      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2200      	movs	r2, #0
 80029a2:	2103      	movs	r1, #3
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe ffa9 	bl	80018fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff f8de 	bl	8001b70 <LL_ADC_IsEnabled>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 8140 	bne.w	8002c3c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6819      	ldr	r1, [r3, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	461a      	mov	r2, r3
 80029ca:	f7ff f82f 	bl	8001a2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	4a8f      	ldr	r2, [pc, #572]	@ (8002c10 <HAL_ADC_ConfigChannel+0x67c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	f040 8131 	bne.w	8002c3c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10b      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x46e>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	0e9b      	lsrs	r3, r3, #26
 80029f0:	3301      	adds	r3, #1
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	2b09      	cmp	r3, #9
 80029f8:	bf94      	ite	ls
 80029fa:	2301      	movls	r3, #1
 80029fc:	2300      	movhi	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	e019      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x4a2>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002a10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a12:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002a14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	e003      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002a1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	3301      	adds	r3, #1
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	2b09      	cmp	r3, #9
 8002a2e:	bf94      	ite	ls
 8002a30:	2301      	movls	r3, #1
 8002a32:	2300      	movhi	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d079      	beq.n	8002b2e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d107      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x4c2>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	0e9b      	lsrs	r3, r3, #26
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	069b      	lsls	r3, r3, #26
 8002a50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a54:	e015      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x4ee>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002a64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a66:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002a68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002a6e:	2320      	movs	r3, #32
 8002a70:	e003      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002a72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a74:	fab3 f383 	clz	r3, r3
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	069b      	lsls	r3, r3, #26
 8002a7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x50e>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	0e9b      	lsrs	r3, r3, #26
 8002a94:	3301      	adds	r3, #1
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa0:	e017      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x53e>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ab2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002aba:	2320      	movs	r3, #32
 8002abc:	e003      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002abe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ac0:	fab3 f383 	clz	r3, r3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	2101      	movs	r1, #1
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	ea42 0103 	orr.w	r1, r2, r3
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10a      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x564>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	0e9b      	lsrs	r3, r3, #26
 8002ae8:	3301      	adds	r3, #1
 8002aea:	f003 021f 	and.w	r2, r3, #31
 8002aee:	4613      	mov	r3, r2
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	4413      	add	r3, r2
 8002af4:	051b      	lsls	r3, r3, #20
 8002af6:	e018      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x596>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b00:	fa93 f3a3 	rbit	r3, r3
 8002b04:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b08:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002b10:	2320      	movs	r3, #32
 8002b12:	e003      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	f003 021f 	and.w	r2, r3, #31
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	e081      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d107      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x5b6>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	0e9b      	lsrs	r3, r3, #26
 8002b40:	3301      	adds	r3, #1
 8002b42:	069b      	lsls	r3, r3, #26
 8002b44:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b48:	e015      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x5e2>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002b62:	2320      	movs	r3, #32
 8002b64:	e003      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b68:	fab3 f383 	clz	r3, r3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	069b      	lsls	r3, r3, #26
 8002b72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x602>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	0e9b      	lsrs	r3, r3, #26
 8002b88:	3301      	adds	r3, #1
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	2101      	movs	r1, #1
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	e017      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x632>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	61bb      	str	r3, [r7, #24]
  return result;
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002bae:	2320      	movs	r3, #32
 8002bb0:	e003      	b.n	8002bba <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	ea42 0103 	orr.w	r1, r2, r3
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10d      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x65e>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	0e9b      	lsrs	r3, r3, #26
 8002bdc:	3301      	adds	r3, #1
 8002bde:	f003 021f 	and.w	r2, r3, #31
 8002be2:	4613      	mov	r3, r2
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	4413      	add	r3, r2
 8002be8:	3b1e      	subs	r3, #30
 8002bea:	051b      	lsls	r3, r3, #20
 8002bec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bf0:	e01e      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x69c>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	60fb      	str	r3, [r7, #12]
  return result;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d104      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002c0a:	2320      	movs	r3, #32
 8002c0c:	e006      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x688>
 8002c0e:	bf00      	nop
 8002c10:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	f003 021f 	and.w	r2, r3, #31
 8002c22:	4613      	mov	r3, r2
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	4413      	add	r3, r2
 8002c28:	3b1e      	subs	r3, #30
 8002c2a:	051b      	lsls	r3, r3, #20
 8002c2c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c30:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c36:	4619      	mov	r1, r3
 8002c38:	f7fe fecd 	bl	80019d6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b44      	ldr	r3, [pc, #272]	@ (8002d54 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d07a      	beq.n	8002d3e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c48:	4843      	ldr	r0, [pc, #268]	@ (8002d58 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c4a:	f7fe fe0f 	bl	800186c <LL_ADC_GetCommonPathInternalCh>
 8002c4e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a41      	ldr	r2, [pc, #260]	@ (8002d5c <HAL_ADC_ConfigChannel+0x7c8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d12c      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d126      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a3c      	ldr	r2, [pc, #240]	@ (8002d60 <HAL_ADC_ConfigChannel+0x7cc>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d004      	beq.n	8002c7c <HAL_ADC_ConfigChannel+0x6e8>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a3b      	ldr	r2, [pc, #236]	@ (8002d64 <HAL_ADC_ConfigChannel+0x7d0>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d15d      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c84:	4619      	mov	r1, r3
 8002c86:	4834      	ldr	r0, [pc, #208]	@ (8002d58 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c88:	f7fe fddd 	bl	8001846 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c8c:	4b36      	ldr	r3, [pc, #216]	@ (8002d68 <HAL_ADC_ConfigChannel+0x7d4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	099b      	lsrs	r3, r3, #6
 8002c92:	4a36      	ldr	r2, [pc, #216]	@ (8002d6c <HAL_ADC_ConfigChannel+0x7d8>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	099b      	lsrs	r3, r3, #6
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ca6:	e002      	b.n	8002cae <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f9      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cb4:	e040      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a2d      	ldr	r2, [pc, #180]	@ (8002d70 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d118      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d112      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a23      	ldr	r2, [pc, #140]	@ (8002d60 <HAL_ADC_ConfigChannel+0x7cc>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d004      	beq.n	8002ce0 <HAL_ADC_ConfigChannel+0x74c>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a22      	ldr	r2, [pc, #136]	@ (8002d64 <HAL_ADC_ConfigChannel+0x7d0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d12d      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ce0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ce4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ce8:	4619      	mov	r1, r3
 8002cea:	481b      	ldr	r0, [pc, #108]	@ (8002d58 <HAL_ADC_ConfigChannel+0x7c4>)
 8002cec:	f7fe fdab 	bl	8001846 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cf0:	e024      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d74 <HAL_ADC_ConfigChannel+0x7e0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d120      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d11a      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a14      	ldr	r2, [pc, #80]	@ (8002d60 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d115      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	480e      	ldr	r0, [pc, #56]	@ (8002d58 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d1e:	f7fe fd92 	bl	8001846 <LL_ADC_SetCommonPathInternalCh>
 8002d22:	e00c      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d28:	f043 0220 	orr.w	r2, r3, #32
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002d36:	e002      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d38:	bf00      	nop
 8002d3a:	e000      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d46:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	37d8      	adds	r7, #216	@ 0xd8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	80080000 	.word	0x80080000
 8002d58:	50040300 	.word	0x50040300
 8002d5c:	c7520000 	.word	0xc7520000
 8002d60:	50040000 	.word	0x50040000
 8002d64:	50040200 	.word	0x50040200
 8002d68:	20000000 	.word	0x20000000
 8002d6c:	053e2d63 	.word	0x053e2d63
 8002d70:	cb840000 	.word	0xcb840000
 8002d74:	80000001 	.word	0x80000001

08002d78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fe fef1 	bl	8001b70 <LL_ADC_IsEnabled>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d169      	bne.n	8002e68 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	4b36      	ldr	r3, [pc, #216]	@ (8002e74 <ADC_Enable+0xfc>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00d      	beq.n	8002dbe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da6:	f043 0210 	orr.w	r2, r3, #16
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db2:	f043 0201 	orr.w	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e055      	b.n	8002e6a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe fec0 	bl	8001b48 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002dc8:	482b      	ldr	r0, [pc, #172]	@ (8002e78 <ADC_Enable+0x100>)
 8002dca:	f7fe fd4f 	bl	800186c <LL_ADC_GetCommonPathInternalCh>
 8002dce:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002dd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d013      	beq.n	8002e00 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dd8:	4b28      	ldr	r3, [pc, #160]	@ (8002e7c <ADC_Enable+0x104>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	099b      	lsrs	r3, r3, #6
 8002dde:	4a28      	ldr	r2, [pc, #160]	@ (8002e80 <ADC_Enable+0x108>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	4613      	mov	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002df2:	e002      	b.n	8002dfa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f9      	bne.n	8002df4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e00:	f7fe fcde 	bl	80017c0 <HAL_GetTick>
 8002e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e06:	e028      	b.n	8002e5a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe feaf 	bl	8001b70 <LL_ADC_IsEnabled>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d104      	bne.n	8002e22 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fe fe93 	bl	8001b48 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e22:	f7fe fccd 	bl	80017c0 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d914      	bls.n	8002e5a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d00d      	beq.n	8002e5a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e42:	f043 0210 	orr.w	r2, r3, #16
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4e:	f043 0201 	orr.w	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e007      	b.n	8002e6a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d1cf      	bne.n	8002e08 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	8000003f 	.word	0x8000003f
 8002e78:	50040300 	.word	0x50040300
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	053e2d63 	.word	0x053e2d63

08002e84 <LL_ADC_IsEnabled>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <LL_ADC_IsEnabled+0x18>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <LL_ADC_IsEnabled+0x1a>
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <LL_ADC_REG_IsConversionOngoing>:
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d101      	bne.n	8002ec2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002f34:	b590      	push	{r4, r7, lr}
 8002f36:	b09f      	sub	sp, #124	@ 0x7c
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e093      	b.n	800307a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a47      	ldr	r2, [pc, #284]	@ (8003084 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d102      	bne.n	8002f72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f6c:	4b46      	ldr	r3, [pc, #280]	@ (8003088 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	e001      	b.n	8002f76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10b      	bne.n	8002f94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f80:	f043 0220 	orr.w	r2, r3, #32
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e072      	b.n	800307a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff ff87 	bl	8002eaa <LL_ADC_REG_IsConversionOngoing>
 8002f9c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff ff81 	bl	8002eaa <LL_ADC_REG_IsConversionOngoing>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d154      	bne.n	8003058 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002fae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d151      	bne.n	8003058 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fb4:	4b35      	ldr	r3, [pc, #212]	@ (800308c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002fb6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d02c      	beq.n	800301a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002fc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	6859      	ldr	r1, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002fd2:	035b      	lsls	r3, r3, #13
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fda:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fdc:	4829      	ldr	r0, [pc, #164]	@ (8003084 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fde:	f7ff ff51 	bl	8002e84 <LL_ADC_IsEnabled>
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	4828      	ldr	r0, [pc, #160]	@ (8003088 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fe6:	f7ff ff4d 	bl	8002e84 <LL_ADC_IsEnabled>
 8002fea:	4603      	mov	r3, r0
 8002fec:	431c      	orrs	r4, r3
 8002fee:	4828      	ldr	r0, [pc, #160]	@ (8003090 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002ff0:	f7ff ff48 	bl	8002e84 <LL_ADC_IsEnabled>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4323      	orrs	r3, r4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d137      	bne.n	800306c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ffc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003004:	f023 030f 	bic.w	r3, r3, #15
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	6811      	ldr	r1, [r2, #0]
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	6892      	ldr	r2, [r2, #8]
 8003010:	430a      	orrs	r2, r1
 8003012:	431a      	orrs	r2, r3
 8003014:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003016:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003018:	e028      	b.n	800306c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800301a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003022:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003024:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003026:	4817      	ldr	r0, [pc, #92]	@ (8003084 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003028:	f7ff ff2c 	bl	8002e84 <LL_ADC_IsEnabled>
 800302c:	4604      	mov	r4, r0
 800302e:	4816      	ldr	r0, [pc, #88]	@ (8003088 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003030:	f7ff ff28 	bl	8002e84 <LL_ADC_IsEnabled>
 8003034:	4603      	mov	r3, r0
 8003036:	431c      	orrs	r4, r3
 8003038:	4815      	ldr	r0, [pc, #84]	@ (8003090 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800303a:	f7ff ff23 	bl	8002e84 <LL_ADC_IsEnabled>
 800303e:	4603      	mov	r3, r0
 8003040:	4323      	orrs	r3, r4
 8003042:	2b00      	cmp	r3, #0
 8003044:	d112      	bne.n	800306c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003046:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800304e:	f023 030f 	bic.w	r3, r3, #15
 8003052:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003054:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003056:	e009      	b.n	800306c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800306a:	e000      	b.n	800306e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800306c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003076:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800307a:	4618      	mov	r0, r3
 800307c:	377c      	adds	r7, #124	@ 0x7c
 800307e:	46bd      	mov	sp, r7
 8003080:	bd90      	pop	{r4, r7, pc}
 8003082:	bf00      	nop
 8003084:	50040000 	.word	0x50040000
 8003088:	50040100 	.word	0x50040100
 800308c:	50040300 	.word	0x50040300
 8003090:	50040200 	.word	0x50040200

08003094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a4:	4b0c      	ldr	r3, [pc, #48]	@ (80030d8 <__NVIC_SetPriorityGrouping+0x44>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030b0:	4013      	ands	r3, r2
 80030b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030c6:	4a04      	ldr	r2, [pc, #16]	@ (80030d8 <__NVIC_SetPriorityGrouping+0x44>)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	60d3      	str	r3, [r2, #12]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e0:	4b04      	ldr	r3, [pc, #16]	@ (80030f4 <__NVIC_GetPriorityGrouping+0x18>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	0a1b      	lsrs	r3, r3, #8
 80030e6:	f003 0307 	and.w	r3, r3, #7
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	2b00      	cmp	r3, #0
 8003108:	db0b      	blt.n	8003122 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	f003 021f 	and.w	r2, r3, #31
 8003110:	4907      	ldr	r1, [pc, #28]	@ (8003130 <__NVIC_EnableIRQ+0x38>)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	2001      	movs	r0, #1
 800311a:	fa00 f202 	lsl.w	r2, r0, r2
 800311e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	e000e100 	.word	0xe000e100

08003134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	6039      	str	r1, [r7, #0]
 800313e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003144:	2b00      	cmp	r3, #0
 8003146:	db0a      	blt.n	800315e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	490c      	ldr	r1, [pc, #48]	@ (8003180 <__NVIC_SetPriority+0x4c>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	0112      	lsls	r2, r2, #4
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	440b      	add	r3, r1
 8003158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800315c:	e00a      	b.n	8003174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	4908      	ldr	r1, [pc, #32]	@ (8003184 <__NVIC_SetPriority+0x50>)
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	3b04      	subs	r3, #4
 800316c:	0112      	lsls	r2, r2, #4
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	440b      	add	r3, r1
 8003172:	761a      	strb	r2, [r3, #24]
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	e000e100 	.word	0xe000e100
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003188:	b480      	push	{r7}
 800318a:	b089      	sub	sp, #36	@ 0x24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f1c3 0307 	rsb	r3, r3, #7
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	bf28      	it	cs
 80031a6:	2304      	movcs	r3, #4
 80031a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2b06      	cmp	r3, #6
 80031b0:	d902      	bls.n	80031b8 <NVIC_EncodePriority+0x30>
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3b03      	subs	r3, #3
 80031b6:	e000      	b.n	80031ba <NVIC_EncodePriority+0x32>
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	f04f 32ff 	mov.w	r2, #4294967295
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43da      	mvns	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	401a      	ands	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d0:	f04f 31ff 	mov.w	r1, #4294967295
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	fa01 f303 	lsl.w	r3, r1, r3
 80031da:	43d9      	mvns	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e0:	4313      	orrs	r3, r2
         );
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3724      	adds	r7, #36	@ 0x24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003200:	d301      	bcc.n	8003206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003202:	2301      	movs	r3, #1
 8003204:	e00f      	b.n	8003226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003206:	4a0a      	ldr	r2, [pc, #40]	@ (8003230 <SysTick_Config+0x40>)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3b01      	subs	r3, #1
 800320c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800320e:	210f      	movs	r1, #15
 8003210:	f04f 30ff 	mov.w	r0, #4294967295
 8003214:	f7ff ff8e 	bl	8003134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003218:	4b05      	ldr	r3, [pc, #20]	@ (8003230 <SysTick_Config+0x40>)
 800321a:	2200      	movs	r2, #0
 800321c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800321e:	4b04      	ldr	r3, [pc, #16]	@ (8003230 <SysTick_Config+0x40>)
 8003220:	2207      	movs	r2, #7
 8003222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	e000e010 	.word	0xe000e010

08003234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff ff29 	bl	8003094 <__NVIC_SetPriorityGrouping>
}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b086      	sub	sp, #24
 800324e:	af00      	add	r7, sp, #0
 8003250:	4603      	mov	r3, r0
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
 8003256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800325c:	f7ff ff3e 	bl	80030dc <__NVIC_GetPriorityGrouping>
 8003260:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	6978      	ldr	r0, [r7, #20]
 8003268:	f7ff ff8e 	bl	8003188 <NVIC_EncodePriority>
 800326c:	4602      	mov	r2, r0
 800326e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003272:	4611      	mov	r1, r2
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff5d 	bl	8003134 <__NVIC_SetPriority>
}
 800327a:	bf00      	nop
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	4603      	mov	r3, r0
 800328a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800328c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff ff31 	bl	80030f8 <__NVIC_EnableIRQ>
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff ffa2 	bl	80031f0 <SysTick_Config>
 80032ac:	4603      	mov	r3, r0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0ac      	b.n	8003424 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f8b2 	bl	8003438 <DFSDM_GetChannelFromInstance>
 80032d4:	4603      	mov	r3, r0
 80032d6:	4a55      	ldr	r2, [pc, #340]	@ (800342c <HAL_DFSDM_ChannelInit+0x174>)
 80032d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e09f      	b.n	8003424 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7fd fe67 	bl	8000fb8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80032ea:	4b51      	ldr	r3, [pc, #324]	@ (8003430 <HAL_DFSDM_ChannelInit+0x178>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3301      	adds	r3, #1
 80032f0:	4a4f      	ldr	r2, [pc, #316]	@ (8003430 <HAL_DFSDM_ChannelInit+0x178>)
 80032f2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80032f4:	4b4e      	ldr	r3, [pc, #312]	@ (8003430 <HAL_DFSDM_ChannelInit+0x178>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d125      	bne.n	8003348 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80032fc:	4b4d      	ldr	r3, [pc, #308]	@ (8003434 <HAL_DFSDM_ChannelInit+0x17c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a4c      	ldr	r2, [pc, #304]	@ (8003434 <HAL_DFSDM_ChannelInit+0x17c>)
 8003302:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003306:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003308:	4b4a      	ldr	r3, [pc, #296]	@ (8003434 <HAL_DFSDM_ChannelInit+0x17c>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4948      	ldr	r1, [pc, #288]	@ (8003434 <HAL_DFSDM_ChannelInit+0x17c>)
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003316:	4b47      	ldr	r3, [pc, #284]	@ (8003434 <HAL_DFSDM_ChannelInit+0x17c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a46      	ldr	r2, [pc, #280]	@ (8003434 <HAL_DFSDM_ChannelInit+0x17c>)
 800331c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003320:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	791b      	ldrb	r3, [r3, #4]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d108      	bne.n	800333c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800332a:	4b42      	ldr	r3, [pc, #264]	@ (8003434 <HAL_DFSDM_ChannelInit+0x17c>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	3b01      	subs	r3, #1
 8003334:	041b      	lsls	r3, r3, #16
 8003336:	493f      	ldr	r1, [pc, #252]	@ (8003434 <HAL_DFSDM_ChannelInit+0x17c>)
 8003338:	4313      	orrs	r3, r2
 800333a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800333c:	4b3d      	ldr	r3, [pc, #244]	@ (8003434 <HAL_DFSDM_ChannelInit+0x17c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a3c      	ldr	r2, [pc, #240]	@ (8003434 <HAL_DFSDM_ChannelInit+0x17c>)
 8003342:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003346:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003356:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6819      	ldr	r1, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003366:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800336c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 020f 	bic.w	r2, r2, #15
 8003384:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6819      	ldr	r1, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80033ac:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6899      	ldr	r1, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033bc:	3b01      	subs	r3, #1
 80033be:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f002 0207 	and.w	r2, r2, #7
 80033d8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6859      	ldr	r1, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003404:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f810 	bl	8003438 <DFSDM_GetChannelFromInstance>
 8003418:	4602      	mov	r2, r0
 800341a:	4904      	ldr	r1, [pc, #16]	@ (800342c <HAL_DFSDM_ChannelInit+0x174>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000388 	.word	0x20000388
 8003430:	20000384 	.word	0x20000384
 8003434:	40016000 	.word	0x40016000

08003438 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a1c      	ldr	r2, [pc, #112]	@ (80034b4 <DFSDM_GetChannelFromInstance+0x7c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d102      	bne.n	800344e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	e02b      	b.n	80034a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a19      	ldr	r2, [pc, #100]	@ (80034b8 <DFSDM_GetChannelFromInstance+0x80>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d102      	bne.n	800345c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003456:	2301      	movs	r3, #1
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	e024      	b.n	80034a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a17      	ldr	r2, [pc, #92]	@ (80034bc <DFSDM_GetChannelFromInstance+0x84>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d102      	bne.n	800346a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003464:	2302      	movs	r3, #2
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	e01d      	b.n	80034a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a14      	ldr	r2, [pc, #80]	@ (80034c0 <DFSDM_GetChannelFromInstance+0x88>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d102      	bne.n	8003478 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003472:	2304      	movs	r3, #4
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	e016      	b.n	80034a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a12      	ldr	r2, [pc, #72]	@ (80034c4 <DFSDM_GetChannelFromInstance+0x8c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d102      	bne.n	8003486 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003480:	2305      	movs	r3, #5
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	e00f      	b.n	80034a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a0f      	ldr	r2, [pc, #60]	@ (80034c8 <DFSDM_GetChannelFromInstance+0x90>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d102      	bne.n	8003494 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800348e:	2306      	movs	r3, #6
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	e008      	b.n	80034a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a0d      	ldr	r2, [pc, #52]	@ (80034cc <DFSDM_GetChannelFromInstance+0x94>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d102      	bne.n	80034a2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800349c:	2307      	movs	r3, #7
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	e001      	b.n	80034a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80034a2:	2303      	movs	r3, #3
 80034a4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80034a6:	68fb      	ldr	r3, [r7, #12]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	40016000 	.word	0x40016000
 80034b8:	40016020 	.word	0x40016020
 80034bc:	40016040 	.word	0x40016040
 80034c0:	40016080 	.word	0x40016080
 80034c4:	400160a0 	.word	0x400160a0
 80034c8:	400160c0 	.word	0x400160c0
 80034cc:	400160e0 	.word	0x400160e0

080034d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034de:	e17f      	b.n	80037e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	2101      	movs	r1, #1
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ec:	4013      	ands	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8171 	beq.w	80037da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d005      	beq.n	8003510 <HAL_GPIO_Init+0x40>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d130      	bne.n	8003572 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	2203      	movs	r2, #3
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003546:	2201      	movs	r2, #1
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4013      	ands	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	091b      	lsrs	r3, r3, #4
 800355c:	f003 0201 	and.w	r2, r3, #1
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	2b03      	cmp	r3, #3
 800357c:	d118      	bne.n	80035b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003582:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003584:	2201      	movs	r2, #1
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4013      	ands	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	08db      	lsrs	r3, r3, #3
 800359a:	f003 0201 	and.w	r2, r3, #1
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d017      	beq.n	80035ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	2203      	movs	r2, #3
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4013      	ands	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d123      	bne.n	8003640 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	08da      	lsrs	r2, r3, #3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3208      	adds	r2, #8
 8003600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003604:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	220f      	movs	r2, #15
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	08da      	lsrs	r2, r3, #3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3208      	adds	r2, #8
 800363a:	6939      	ldr	r1, [r7, #16]
 800363c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	2203      	movs	r2, #3
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4013      	ands	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 0203 	and.w	r2, r3, #3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80ac 	beq.w	80037da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003682:	4b5f      	ldr	r3, [pc, #380]	@ (8003800 <HAL_GPIO_Init+0x330>)
 8003684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003686:	4a5e      	ldr	r2, [pc, #376]	@ (8003800 <HAL_GPIO_Init+0x330>)
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	6613      	str	r3, [r2, #96]	@ 0x60
 800368e:	4b5c      	ldr	r3, [pc, #368]	@ (8003800 <HAL_GPIO_Init+0x330>)
 8003690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800369a:	4a5a      	ldr	r2, [pc, #360]	@ (8003804 <HAL_GPIO_Init+0x334>)
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	089b      	lsrs	r3, r3, #2
 80036a0:	3302      	adds	r3, #2
 80036a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	220f      	movs	r2, #15
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80036c4:	d025      	beq.n	8003712 <HAL_GPIO_Init+0x242>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a4f      	ldr	r2, [pc, #316]	@ (8003808 <HAL_GPIO_Init+0x338>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d01f      	beq.n	800370e <HAL_GPIO_Init+0x23e>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a4e      	ldr	r2, [pc, #312]	@ (800380c <HAL_GPIO_Init+0x33c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d019      	beq.n	800370a <HAL_GPIO_Init+0x23a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003810 <HAL_GPIO_Init+0x340>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d013      	beq.n	8003706 <HAL_GPIO_Init+0x236>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a4c      	ldr	r2, [pc, #304]	@ (8003814 <HAL_GPIO_Init+0x344>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00d      	beq.n	8003702 <HAL_GPIO_Init+0x232>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003818 <HAL_GPIO_Init+0x348>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d007      	beq.n	80036fe <HAL_GPIO_Init+0x22e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a4a      	ldr	r2, [pc, #296]	@ (800381c <HAL_GPIO_Init+0x34c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d101      	bne.n	80036fa <HAL_GPIO_Init+0x22a>
 80036f6:	2306      	movs	r3, #6
 80036f8:	e00c      	b.n	8003714 <HAL_GPIO_Init+0x244>
 80036fa:	2307      	movs	r3, #7
 80036fc:	e00a      	b.n	8003714 <HAL_GPIO_Init+0x244>
 80036fe:	2305      	movs	r3, #5
 8003700:	e008      	b.n	8003714 <HAL_GPIO_Init+0x244>
 8003702:	2304      	movs	r3, #4
 8003704:	e006      	b.n	8003714 <HAL_GPIO_Init+0x244>
 8003706:	2303      	movs	r3, #3
 8003708:	e004      	b.n	8003714 <HAL_GPIO_Init+0x244>
 800370a:	2302      	movs	r3, #2
 800370c:	e002      	b.n	8003714 <HAL_GPIO_Init+0x244>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_GPIO_Init+0x244>
 8003712:	2300      	movs	r3, #0
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	f002 0203 	and.w	r2, r2, #3
 800371a:	0092      	lsls	r2, r2, #2
 800371c:	4093      	lsls	r3, r2
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003724:	4937      	ldr	r1, [pc, #220]	@ (8003804 <HAL_GPIO_Init+0x334>)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	089b      	lsrs	r3, r3, #2
 800372a:	3302      	adds	r3, #2
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003732:	4b3b      	ldr	r3, [pc, #236]	@ (8003820 <HAL_GPIO_Init+0x350>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	43db      	mvns	r3, r3
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4013      	ands	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003756:	4a32      	ldr	r2, [pc, #200]	@ (8003820 <HAL_GPIO_Init+0x350>)
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800375c:	4b30      	ldr	r3, [pc, #192]	@ (8003820 <HAL_GPIO_Init+0x350>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	43db      	mvns	r3, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003780:	4a27      	ldr	r2, [pc, #156]	@ (8003820 <HAL_GPIO_Init+0x350>)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003786:	4b26      	ldr	r3, [pc, #152]	@ (8003820 <HAL_GPIO_Init+0x350>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	43db      	mvns	r3, r3
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4013      	ands	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003820 <HAL_GPIO_Init+0x350>)
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003820 <HAL_GPIO_Init+0x350>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4013      	ands	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037d4:	4a12      	ldr	r2, [pc, #72]	@ (8003820 <HAL_GPIO_Init+0x350>)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	3301      	adds	r3, #1
 80037de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f47f ae78 	bne.w	80034e0 <HAL_GPIO_Init+0x10>
  }
}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
 8003804:	40010000 	.word	0x40010000
 8003808:	48000400 	.word	0x48000400
 800380c:	48000800 	.word	0x48000800
 8003810:	48000c00 	.word	0x48000c00
 8003814:	48001000 	.word	0x48001000
 8003818:	48001400 	.word	0x48001400
 800381c:	48001800 	.word	0x48001800
 8003820:	40010400 	.word	0x40010400

08003824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	807b      	strh	r3, [r7, #2]
 8003830:	4613      	mov	r3, r2
 8003832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003834:	787b      	ldrb	r3, [r7, #1]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800383a:	887a      	ldrh	r2, [r7, #2]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003840:	e002      	b.n	8003848 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003842:	887a      	ldrh	r2, [r7, #2]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003866:	887a      	ldrh	r2, [r7, #2]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4013      	ands	r3, r2
 800386c:	041a      	lsls	r2, r3, #16
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	43d9      	mvns	r1, r3
 8003872:	887b      	ldrh	r3, [r7, #2]
 8003874:	400b      	ands	r3, r1
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	619a      	str	r2, [r3, #24]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003892:	4b08      	ldr	r3, [pc, #32]	@ (80038b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	88fb      	ldrh	r3, [r7, #6]
 8003898:	4013      	ands	r3, r2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d006      	beq.n	80038ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800389e:	4a05      	ldr	r2, [pc, #20]	@ (80038b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f806 	bl	80038b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80038ac:	bf00      	nop
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40010400 	.word	0x40010400

080038b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b082      	sub	sp, #8
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e08d      	b.n	80039fc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7fd fbc3 	bl	8001080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2224      	movs	r2, #36	@ 0x24
 80038fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0201 	bic.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800391e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800392e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d107      	bne.n	8003948 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	e006      	b.n	8003956 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003954:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d108      	bne.n	8003970 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800396c:	605a      	str	r2, [r3, #4]
 800396e:	e007      	b.n	8003980 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800397e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800398e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003992:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039a2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69d9      	ldr	r1, [r3, #28]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1a      	ldr	r2, [r3, #32]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0201 	orr.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	d138      	bne.n	8003a8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e032      	b.n	8003a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2224      	movs	r2, #36	@ 0x24
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6819      	ldr	r1, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
  }
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b085      	sub	sp, #20
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	d139      	bne.n	8003b24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e033      	b.n	8003b26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2224      	movs	r2, #36	@ 0x24
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0201 	bic.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003aec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e000      	b.n	8003b26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
  }
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b38:	4b05      	ldr	r3, [pc, #20]	@ (8003b50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a04      	ldr	r2, [pc, #16]	@ (8003b50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b42:	6013      	str	r3, [r2, #0]
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40007000 	.word	0x40007000

08003b54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b58:	4b04      	ldr	r3, [pc, #16]	@ (8003b6c <HAL_PWREx_GetVoltageRange+0x18>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40007000 	.word	0x40007000

08003b70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b7e:	d130      	bne.n	8003be2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b80:	4b23      	ldr	r3, [pc, #140]	@ (8003c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b8c:	d038      	beq.n	8003c00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b8e:	4b20      	ldr	r3, [pc, #128]	@ (8003c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b96:	4a1e      	ldr	r2, [pc, #120]	@ (8003c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2232      	movs	r2, #50	@ 0x32
 8003ba4:	fb02 f303 	mul.w	r3, r2, r3
 8003ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	0c9b      	lsrs	r3, r3, #18
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bb4:	e002      	b.n	8003bbc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bbc:	4b14      	ldr	r3, [pc, #80]	@ (8003c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bc8:	d102      	bne.n	8003bd0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f2      	bne.n	8003bb6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bdc:	d110      	bne.n	8003c00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e00f      	b.n	8003c02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003be2:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bee:	d007      	beq.n	8003c00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bf0:	4b07      	ldr	r3, [pc, #28]	@ (8003c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bf8:	4a05      	ldr	r2, [pc, #20]	@ (8003c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bfe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40007000 	.word	0x40007000
 8003c14:	20000000 	.word	0x20000000
 8003c18:	431bde83 	.word	0x431bde83

08003c1c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003c24:	f7fd fdcc 	bl	80017c0 <HAL_GetTick>
 8003c28:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e063      	b.n	8003cfc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10b      	bne.n	8003c58 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7fd fa77 	bl	800113c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003c4e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f858 	bl	8003d08 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	021a      	lsls	r2, r3, #8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2120      	movs	r1, #32
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f850 	bl	8003d24 <QSPI_WaitFlagStateUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003c88:	7afb      	ldrb	r3, [r7, #11]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d131      	bne.n	8003cf2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c98:	f023 0310 	bic.w	r3, r3, #16
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6852      	ldr	r2, [r2, #4]
 8003ca0:	0611      	lsls	r1, r2, #24
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68d2      	ldr	r2, [r2, #12]
 8003ca6:	4311      	orrs	r1, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	430b      	orrs	r3, r1
 8003cae:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	4b13      	ldr	r3, [pc, #76]	@ (8003d04 <HAL_QSPI_Init+0xe8>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6912      	ldr	r2, [r2, #16]
 8003cbe:	0411      	lsls	r1, r2, #16
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6952      	ldr	r2, [r2, #20]
 8003cc4:	4311      	orrs	r1, r2
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6992      	ldr	r2, [r2, #24]
 8003cca:	4311      	orrs	r1, r2
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8003cfa:	7afb      	ldrb	r3, [r7, #11]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	ffe0f8fe 	.word	0xffe0f8fe

08003d08 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	603b      	str	r3, [r7, #0]
 8003d30:	4613      	mov	r3, r2
 8003d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003d34:	e01a      	b.n	8003d6c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d016      	beq.n	8003d6c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3e:	f7fd fd3f 	bl	80017c0 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d302      	bcc.n	8003d54 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10b      	bne.n	8003d6c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2204      	movs	r2, #4
 8003d58:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d60:	f043 0201 	orr.w	r2, r3, #1
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e00e      	b.n	8003d8a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	bf14      	ite	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	2300      	moveq	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	461a      	mov	r2, r3
 8003d82:	79fb      	ldrb	r3, [r7, #7]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d1d6      	bne.n	8003d36 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e3ca      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003da6:	4b97      	ldr	r3, [pc, #604]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003db0:	4b94      	ldr	r3, [pc, #592]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0310 	and.w	r3, r3, #16
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 80e4 	beq.w	8003f90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <HAL_RCC_OscConfig+0x4a>
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2b0c      	cmp	r3, #12
 8003dd2:	f040 808b 	bne.w	8003eec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	f040 8087 	bne.w	8003eec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dde:	4b89      	ldr	r3, [pc, #548]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_RCC_OscConfig+0x62>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e3a2      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1a      	ldr	r2, [r3, #32]
 8003dfa:	4b82      	ldr	r3, [pc, #520]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d004      	beq.n	8003e10 <HAL_RCC_OscConfig+0x7c>
 8003e06:	4b7f      	ldr	r3, [pc, #508]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e0e:	e005      	b.n	8003e1c <HAL_RCC_OscConfig+0x88>
 8003e10:	4b7c      	ldr	r3, [pc, #496]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e16:	091b      	lsrs	r3, r3, #4
 8003e18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d223      	bcs.n	8003e68 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 fd55 	bl	80048d4 <RCC_SetFlashLatencyFromMSIRange>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e383      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e34:	4b73      	ldr	r3, [pc, #460]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a72      	ldr	r2, [pc, #456]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e3a:	f043 0308 	orr.w	r3, r3, #8
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b70      	ldr	r3, [pc, #448]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	496d      	ldr	r1, [pc, #436]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e52:	4b6c      	ldr	r3, [pc, #432]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	4968      	ldr	r1, [pc, #416]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	604b      	str	r3, [r1, #4]
 8003e66:	e025      	b.n	8003eb4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e68:	4b66      	ldr	r3, [pc, #408]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a65      	ldr	r2, [pc, #404]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e6e:	f043 0308 	orr.w	r3, r3, #8
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4b63      	ldr	r3, [pc, #396]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	4960      	ldr	r1, [pc, #384]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e86:	4b5f      	ldr	r3, [pc, #380]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	495b      	ldr	r1, [pc, #364]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d109      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fd15 	bl	80048d4 <RCC_SetFlashLatencyFromMSIRange>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e343      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eb4:	f000 fc4a 	bl	800474c <HAL_RCC_GetSysClockFreq>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4b52      	ldr	r3, [pc, #328]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	091b      	lsrs	r3, r3, #4
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	4950      	ldr	r1, [pc, #320]	@ (8004008 <HAL_RCC_OscConfig+0x274>)
 8003ec6:	5ccb      	ldrb	r3, [r1, r3]
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed0:	4a4e      	ldr	r2, [pc, #312]	@ (800400c <HAL_RCC_OscConfig+0x278>)
 8003ed2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ed4:	4b4e      	ldr	r3, [pc, #312]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fd fc21 	bl	8001720 <HAL_InitTick>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d052      	beq.n	8003f8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
 8003eea:	e327      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d032      	beq.n	8003f5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ef4:	4b43      	ldr	r3, [pc, #268]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a42      	ldr	r2, [pc, #264]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f00:	f7fd fc5e 	bl	80017c0 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f08:	f7fd fc5a 	bl	80017c0 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e310      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f1a:	4b3a      	ldr	r3, [pc, #232]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f26:	4b37      	ldr	r3, [pc, #220]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a36      	ldr	r2, [pc, #216]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f2c:	f043 0308 	orr.w	r3, r3, #8
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	4b34      	ldr	r3, [pc, #208]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	4931      	ldr	r1, [pc, #196]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f44:	4b2f      	ldr	r3, [pc, #188]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	021b      	lsls	r3, r3, #8
 8003f52:	492c      	ldr	r1, [pc, #176]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]
 8003f58:	e01a      	b.n	8003f90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a29      	ldr	r2, [pc, #164]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f66:	f7fd fc2b 	bl	80017c0 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f6e:	f7fd fc27 	bl	80017c0 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e2dd      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f80:	4b20      	ldr	r3, [pc, #128]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1f0      	bne.n	8003f6e <HAL_RCC_OscConfig+0x1da>
 8003f8c:	e000      	b.n	8003f90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d074      	beq.n	8004086 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d005      	beq.n	8003fae <HAL_RCC_OscConfig+0x21a>
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b0c      	cmp	r3, #12
 8003fa6:	d10e      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d10b      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fae:	4b15      	ldr	r3, [pc, #84]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d064      	beq.n	8004084 <HAL_RCC_OscConfig+0x2f0>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d160      	bne.n	8004084 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e2ba      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fce:	d106      	bne.n	8003fde <HAL_RCC_OscConfig+0x24a>
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003fd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	e026      	b.n	800402c <HAL_RCC_OscConfig+0x298>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fe6:	d115      	bne.n	8004014 <HAL_RCC_OscConfig+0x280>
 8003fe8:	4b06      	ldr	r3, [pc, #24]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a05      	ldr	r2, [pc, #20]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003fee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	4b03      	ldr	r3, [pc, #12]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a02      	ldr	r2, [pc, #8]	@ (8004004 <HAL_RCC_OscConfig+0x270>)
 8003ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	e014      	b.n	800402c <HAL_RCC_OscConfig+0x298>
 8004002:	bf00      	nop
 8004004:	40021000 	.word	0x40021000
 8004008:	08007884 	.word	0x08007884
 800400c:	20000000 	.word	0x20000000
 8004010:	20000004 	.word	0x20000004
 8004014:	4ba0      	ldr	r3, [pc, #640]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a9f      	ldr	r2, [pc, #636]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 800401a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	4b9d      	ldr	r3, [pc, #628]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a9c      	ldr	r2, [pc, #624]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 8004026:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800402a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d013      	beq.n	800405c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fd fbc4 	bl	80017c0 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800403c:	f7fd fbc0 	bl	80017c0 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b64      	cmp	r3, #100	@ 0x64
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e276      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800404e:	4b92      	ldr	r3, [pc, #584]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f0      	beq.n	800403c <HAL_RCC_OscConfig+0x2a8>
 800405a:	e014      	b.n	8004086 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fd fbb0 	bl	80017c0 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004064:	f7fd fbac 	bl	80017c0 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	@ 0x64
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e262      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004076:	4b88      	ldr	r3, [pc, #544]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x2d0>
 8004082:	e000      	b.n	8004086 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d060      	beq.n	8004154 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	2b04      	cmp	r3, #4
 8004096:	d005      	beq.n	80040a4 <HAL_RCC_OscConfig+0x310>
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	2b0c      	cmp	r3, #12
 800409c:	d119      	bne.n	80040d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d116      	bne.n	80040d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040a4:	4b7c      	ldr	r3, [pc, #496]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_OscConfig+0x328>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e23f      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040bc:	4b76      	ldr	r3, [pc, #472]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	061b      	lsls	r3, r3, #24
 80040ca:	4973      	ldr	r1, [pc, #460]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d0:	e040      	b.n	8004154 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d023      	beq.n	8004122 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040da:	4b6f      	ldr	r3, [pc, #444]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a6e      	ldr	r2, [pc, #440]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 80040e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e6:	f7fd fb6b 	bl	80017c0 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ee:	f7fd fb67 	bl	80017c0 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e21d      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004100:	4b65      	ldr	r3, [pc, #404]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0f0      	beq.n	80040ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410c:	4b62      	ldr	r3, [pc, #392]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	061b      	lsls	r3, r3, #24
 800411a:	495f      	ldr	r1, [pc, #380]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 800411c:	4313      	orrs	r3, r2
 800411e:	604b      	str	r3, [r1, #4]
 8004120:	e018      	b.n	8004154 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004122:	4b5d      	ldr	r3, [pc, #372]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a5c      	ldr	r2, [pc, #368]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 8004128:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800412c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412e:	f7fd fb47 	bl	80017c0 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004136:	f7fd fb43 	bl	80017c0 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e1f9      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004148:	4b53      	ldr	r3, [pc, #332]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f0      	bne.n	8004136 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d03c      	beq.n	80041da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01c      	beq.n	80041a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004168:	4b4b      	ldr	r3, [pc, #300]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 800416a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800416e:	4a4a      	ldr	r2, [pc, #296]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fd fb22 	bl	80017c0 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004180:	f7fd fb1e 	bl	80017c0 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e1d4      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004192:	4b41      	ldr	r3, [pc, #260]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 8004194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0ef      	beq.n	8004180 <HAL_RCC_OscConfig+0x3ec>
 80041a0:	e01b      	b.n	80041da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 80041a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041a8:	4a3b      	ldr	r2, [pc, #236]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 80041aa:	f023 0301 	bic.w	r3, r3, #1
 80041ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b2:	f7fd fb05 	bl	80017c0 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ba:	f7fd fb01 	bl	80017c0 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e1b7      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041cc:	4b32      	ldr	r3, [pc, #200]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 80041ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1ef      	bne.n	80041ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 80a6 	beq.w	8004334 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e8:	2300      	movs	r3, #0
 80041ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 80041ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10d      	bne.n	8004214 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f8:	4b27      	ldr	r3, [pc, #156]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fc:	4a26      	ldr	r2, [pc, #152]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 80041fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004202:	6593      	str	r3, [r2, #88]	@ 0x58
 8004204:	4b24      	ldr	r3, [pc, #144]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 8004206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004210:	2301      	movs	r3, #1
 8004212:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004214:	4b21      	ldr	r3, [pc, #132]	@ (800429c <HAL_RCC_OscConfig+0x508>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421c:	2b00      	cmp	r3, #0
 800421e:	d118      	bne.n	8004252 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004220:	4b1e      	ldr	r3, [pc, #120]	@ (800429c <HAL_RCC_OscConfig+0x508>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1d      	ldr	r2, [pc, #116]	@ (800429c <HAL_RCC_OscConfig+0x508>)
 8004226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800422a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800422c:	f7fd fac8 	bl	80017c0 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004234:	f7fd fac4 	bl	80017c0 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e17a      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004246:	4b15      	ldr	r3, [pc, #84]	@ (800429c <HAL_RCC_OscConfig+0x508>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d108      	bne.n	800426c <HAL_RCC_OscConfig+0x4d8>
 800425a:	4b0f      	ldr	r3, [pc, #60]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004260:	4a0d      	ldr	r2, [pc, #52]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800426a:	e029      	b.n	80042c0 <HAL_RCC_OscConfig+0x52c>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b05      	cmp	r3, #5
 8004272:	d115      	bne.n	80042a0 <HAL_RCC_OscConfig+0x50c>
 8004274:	4b08      	ldr	r3, [pc, #32]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427a:	4a07      	ldr	r2, [pc, #28]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 800427c:	f043 0304 	orr.w	r3, r3, #4
 8004280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004284:	4b04      	ldr	r3, [pc, #16]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428a:	4a03      	ldr	r2, [pc, #12]	@ (8004298 <HAL_RCC_OscConfig+0x504>)
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004294:	e014      	b.n	80042c0 <HAL_RCC_OscConfig+0x52c>
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000
 800429c:	40007000 	.word	0x40007000
 80042a0:	4b9c      	ldr	r3, [pc, #624]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a6:	4a9b      	ldr	r2, [pc, #620]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042b0:	4b98      	ldr	r3, [pc, #608]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b6:	4a97      	ldr	r2, [pc, #604]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 80042b8:	f023 0304 	bic.w	r3, r3, #4
 80042bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d016      	beq.n	80042f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c8:	f7fd fa7a 	bl	80017c0 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ce:	e00a      	b.n	80042e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d0:	f7fd fa76 	bl	80017c0 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042de:	4293      	cmp	r3, r2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e12a      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e6:	4b8b      	ldr	r3, [pc, #556]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 80042e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0ed      	beq.n	80042d0 <HAL_RCC_OscConfig+0x53c>
 80042f4:	e015      	b.n	8004322 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f6:	f7fd fa63 	bl	80017c0 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042fc:	e00a      	b.n	8004314 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fe:	f7fd fa5f 	bl	80017c0 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430c:	4293      	cmp	r3, r2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e113      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004314:	4b7f      	ldr	r3, [pc, #508]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1ed      	bne.n	80042fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004322:	7ffb      	ldrb	r3, [r7, #31]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d105      	bne.n	8004334 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004328:	4b7a      	ldr	r3, [pc, #488]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 800432a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432c:	4a79      	ldr	r2, [pc, #484]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 800432e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004332:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80fe 	beq.w	800453a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004342:	2b02      	cmp	r3, #2
 8004344:	f040 80d0 	bne.w	80044e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004348:	4b72      	ldr	r3, [pc, #456]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f003 0203 	and.w	r2, r3, #3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004358:	429a      	cmp	r2, r3
 800435a:	d130      	bne.n	80043be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004366:	3b01      	subs	r3, #1
 8004368:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800436a:	429a      	cmp	r2, r3
 800436c:	d127      	bne.n	80043be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004378:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800437a:	429a      	cmp	r2, r3
 800437c:	d11f      	bne.n	80043be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004388:	2a07      	cmp	r2, #7
 800438a:	bf14      	ite	ne
 800438c:	2201      	movne	r2, #1
 800438e:	2200      	moveq	r2, #0
 8004390:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004392:	4293      	cmp	r3, r2
 8004394:	d113      	bne.n	80043be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a0:	085b      	lsrs	r3, r3, #1
 80043a2:	3b01      	subs	r3, #1
 80043a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d109      	bne.n	80043be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b4:	085b      	lsrs	r3, r3, #1
 80043b6:	3b01      	subs	r3, #1
 80043b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d06e      	beq.n	800449c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	2b0c      	cmp	r3, #12
 80043c2:	d069      	beq.n	8004498 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043c4:	4b53      	ldr	r3, [pc, #332]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d105      	bne.n	80043dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80043d0:	4b50      	ldr	r3, [pc, #320]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e0ad      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043e0:	4b4c      	ldr	r3, [pc, #304]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 80043e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043ec:	f7fd f9e8 	bl	80017c0 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f4:	f7fd f9e4 	bl	80017c0 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e09a      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004406:	4b43      	ldr	r3, [pc, #268]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004412:	4b40      	ldr	r3, [pc, #256]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	4b40      	ldr	r3, [pc, #256]	@ (8004518 <HAL_RCC_OscConfig+0x784>)
 8004418:	4013      	ands	r3, r2
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004422:	3a01      	subs	r2, #1
 8004424:	0112      	lsls	r2, r2, #4
 8004426:	4311      	orrs	r1, r2
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800442c:	0212      	lsls	r2, r2, #8
 800442e:	4311      	orrs	r1, r2
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004434:	0852      	lsrs	r2, r2, #1
 8004436:	3a01      	subs	r2, #1
 8004438:	0552      	lsls	r2, r2, #21
 800443a:	4311      	orrs	r1, r2
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004440:	0852      	lsrs	r2, r2, #1
 8004442:	3a01      	subs	r2, #1
 8004444:	0652      	lsls	r2, r2, #25
 8004446:	4311      	orrs	r1, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800444c:	0912      	lsrs	r2, r2, #4
 800444e:	0452      	lsls	r2, r2, #17
 8004450:	430a      	orrs	r2, r1
 8004452:	4930      	ldr	r1, [pc, #192]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 8004454:	4313      	orrs	r3, r2
 8004456:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004458:	4b2e      	ldr	r3, [pc, #184]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a2d      	ldr	r2, [pc, #180]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 800445e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004462:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004464:	4b2b      	ldr	r3, [pc, #172]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	4a2a      	ldr	r2, [pc, #168]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 800446a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800446e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004470:	f7fd f9a6 	bl	80017c0 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004478:	f7fd f9a2 	bl	80017c0 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e058      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800448a:	4b22      	ldr	r3, [pc, #136]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0f0      	beq.n	8004478 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004496:	e050      	b.n	800453a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e04f      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449c:	4b1d      	ldr	r3, [pc, #116]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d148      	bne.n	800453a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a19      	ldr	r2, [pc, #100]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 80044ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044b4:	4b17      	ldr	r3, [pc, #92]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	4a16      	ldr	r2, [pc, #88]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 80044ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044c0:	f7fd f97e 	bl	80017c0 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c8:	f7fd f97a 	bl	80017c0 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e030      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044da:	4b0e      	ldr	r3, [pc, #56]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f0      	beq.n	80044c8 <HAL_RCC_OscConfig+0x734>
 80044e6:	e028      	b.n	800453a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	2b0c      	cmp	r3, #12
 80044ec:	d023      	beq.n	8004536 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ee:	4b09      	ldr	r3, [pc, #36]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a08      	ldr	r2, [pc, #32]	@ (8004514 <HAL_RCC_OscConfig+0x780>)
 80044f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fa:	f7fd f961 	bl	80017c0 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004500:	e00c      	b.n	800451c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004502:	f7fd f95d 	bl	80017c0 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d905      	bls.n	800451c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e013      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
 8004514:	40021000 	.word	0x40021000
 8004518:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800451c:	4b09      	ldr	r3, [pc, #36]	@ (8004544 <HAL_RCC_OscConfig+0x7b0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1ec      	bne.n	8004502 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004528:	4b06      	ldr	r3, [pc, #24]	@ (8004544 <HAL_RCC_OscConfig+0x7b0>)
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	4905      	ldr	r1, [pc, #20]	@ (8004544 <HAL_RCC_OscConfig+0x7b0>)
 800452e:	4b06      	ldr	r3, [pc, #24]	@ (8004548 <HAL_RCC_OscConfig+0x7b4>)
 8004530:	4013      	ands	r3, r2
 8004532:	60cb      	str	r3, [r1, #12]
 8004534:	e001      	b.n	800453a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3720      	adds	r7, #32
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40021000 	.word	0x40021000
 8004548:	feeefffc 	.word	0xfeeefffc

0800454c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0e7      	b.n	8004730 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004560:	4b75      	ldr	r3, [pc, #468]	@ (8004738 <HAL_RCC_ClockConfig+0x1ec>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d910      	bls.n	8004590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456e:	4b72      	ldr	r3, [pc, #456]	@ (8004738 <HAL_RCC_ClockConfig+0x1ec>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f023 0207 	bic.w	r2, r3, #7
 8004576:	4970      	ldr	r1, [pc, #448]	@ (8004738 <HAL_RCC_ClockConfig+0x1ec>)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	4313      	orrs	r3, r2
 800457c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800457e:	4b6e      	ldr	r3, [pc, #440]	@ (8004738 <HAL_RCC_ClockConfig+0x1ec>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d001      	beq.n	8004590 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0cf      	b.n	8004730 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d010      	beq.n	80045be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	4b66      	ldr	r3, [pc, #408]	@ (800473c <HAL_RCC_ClockConfig+0x1f0>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d908      	bls.n	80045be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ac:	4b63      	ldr	r3, [pc, #396]	@ (800473c <HAL_RCC_ClockConfig+0x1f0>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4960      	ldr	r1, [pc, #384]	@ (800473c <HAL_RCC_ClockConfig+0x1f0>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d04c      	beq.n	8004664 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d107      	bne.n	80045e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045d2:	4b5a      	ldr	r3, [pc, #360]	@ (800473c <HAL_RCC_ClockConfig+0x1f0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d121      	bne.n	8004622 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e0a6      	b.n	8004730 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d107      	bne.n	80045fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ea:	4b54      	ldr	r3, [pc, #336]	@ (800473c <HAL_RCC_ClockConfig+0x1f0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d115      	bne.n	8004622 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e09a      	b.n	8004730 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d107      	bne.n	8004612 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004602:	4b4e      	ldr	r3, [pc, #312]	@ (800473c <HAL_RCC_ClockConfig+0x1f0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d109      	bne.n	8004622 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e08e      	b.n	8004730 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004612:	4b4a      	ldr	r3, [pc, #296]	@ (800473c <HAL_RCC_ClockConfig+0x1f0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e086      	b.n	8004730 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004622:	4b46      	ldr	r3, [pc, #280]	@ (800473c <HAL_RCC_ClockConfig+0x1f0>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f023 0203 	bic.w	r2, r3, #3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	4943      	ldr	r1, [pc, #268]	@ (800473c <HAL_RCC_ClockConfig+0x1f0>)
 8004630:	4313      	orrs	r3, r2
 8004632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004634:	f7fd f8c4 	bl	80017c0 <HAL_GetTick>
 8004638:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463a:	e00a      	b.n	8004652 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800463c:	f7fd f8c0 	bl	80017c0 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e06e      	b.n	8004730 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004652:	4b3a      	ldr	r3, [pc, #232]	@ (800473c <HAL_RCC_ClockConfig+0x1f0>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 020c 	and.w	r2, r3, #12
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	429a      	cmp	r2, r3
 8004662:	d1eb      	bne.n	800463c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d010      	beq.n	8004692 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	4b31      	ldr	r3, [pc, #196]	@ (800473c <HAL_RCC_ClockConfig+0x1f0>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800467c:	429a      	cmp	r2, r3
 800467e:	d208      	bcs.n	8004692 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004680:	4b2e      	ldr	r3, [pc, #184]	@ (800473c <HAL_RCC_ClockConfig+0x1f0>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	492b      	ldr	r1, [pc, #172]	@ (800473c <HAL_RCC_ClockConfig+0x1f0>)
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004692:	4b29      	ldr	r3, [pc, #164]	@ (8004738 <HAL_RCC_ClockConfig+0x1ec>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d210      	bcs.n	80046c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a0:	4b25      	ldr	r3, [pc, #148]	@ (8004738 <HAL_RCC_ClockConfig+0x1ec>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f023 0207 	bic.w	r2, r3, #7
 80046a8:	4923      	ldr	r1, [pc, #140]	@ (8004738 <HAL_RCC_ClockConfig+0x1ec>)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b0:	4b21      	ldr	r3, [pc, #132]	@ (8004738 <HAL_RCC_ClockConfig+0x1ec>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d001      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e036      	b.n	8004730 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d008      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046ce:	4b1b      	ldr	r3, [pc, #108]	@ (800473c <HAL_RCC_ClockConfig+0x1f0>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	4918      	ldr	r1, [pc, #96]	@ (800473c <HAL_RCC_ClockConfig+0x1f0>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d009      	beq.n	8004700 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ec:	4b13      	ldr	r3, [pc, #76]	@ (800473c <HAL_RCC_ClockConfig+0x1f0>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	4910      	ldr	r1, [pc, #64]	@ (800473c <HAL_RCC_ClockConfig+0x1f0>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004700:	f000 f824 	bl	800474c <HAL_RCC_GetSysClockFreq>
 8004704:	4602      	mov	r2, r0
 8004706:	4b0d      	ldr	r3, [pc, #52]	@ (800473c <HAL_RCC_ClockConfig+0x1f0>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	091b      	lsrs	r3, r3, #4
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	490b      	ldr	r1, [pc, #44]	@ (8004740 <HAL_RCC_ClockConfig+0x1f4>)
 8004712:	5ccb      	ldrb	r3, [r1, r3]
 8004714:	f003 031f 	and.w	r3, r3, #31
 8004718:	fa22 f303 	lsr.w	r3, r2, r3
 800471c:	4a09      	ldr	r2, [pc, #36]	@ (8004744 <HAL_RCC_ClockConfig+0x1f8>)
 800471e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004720:	4b09      	ldr	r3, [pc, #36]	@ (8004748 <HAL_RCC_ClockConfig+0x1fc>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f7fc fffb 	bl	8001720 <HAL_InitTick>
 800472a:	4603      	mov	r3, r0
 800472c:	72fb      	strb	r3, [r7, #11]

  return status;
 800472e:	7afb      	ldrb	r3, [r7, #11]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40022000 	.word	0x40022000
 800473c:	40021000 	.word	0x40021000
 8004740:	08007884 	.word	0x08007884
 8004744:	20000000 	.word	0x20000000
 8004748:	20000004 	.word	0x20000004

0800474c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800474c:	b480      	push	{r7}
 800474e:	b089      	sub	sp, #36	@ 0x24
 8004750:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	61fb      	str	r3, [r7, #28]
 8004756:	2300      	movs	r3, #0
 8004758:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800475a:	4b3e      	ldr	r3, [pc, #248]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x108>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 030c 	and.w	r3, r3, #12
 8004762:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004764:	4b3b      	ldr	r3, [pc, #236]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x108>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_GetSysClockFreq+0x34>
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2b0c      	cmp	r3, #12
 8004778:	d121      	bne.n	80047be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d11e      	bne.n	80047be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004780:	4b34      	ldr	r3, [pc, #208]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x108>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d107      	bne.n	800479c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800478c:	4b31      	ldr	r3, [pc, #196]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x108>)
 800478e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	e005      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800479c:	4b2d      	ldr	r3, [pc, #180]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x108>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	091b      	lsrs	r3, r3, #4
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004858 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10d      	bne.n	80047d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047bc:	e00a      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d102      	bne.n	80047ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047c4:	4b25      	ldr	r3, [pc, #148]	@ (800485c <HAL_RCC_GetSysClockFreq+0x110>)
 80047c6:	61bb      	str	r3, [r7, #24]
 80047c8:	e004      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d101      	bne.n	80047d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047d0:	4b23      	ldr	r3, [pc, #140]	@ (8004860 <HAL_RCC_GetSysClockFreq+0x114>)
 80047d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	2b0c      	cmp	r3, #12
 80047d8:	d134      	bne.n	8004844 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047da:	4b1e      	ldr	r3, [pc, #120]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x108>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d003      	beq.n	80047f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d003      	beq.n	80047f8 <HAL_RCC_GetSysClockFreq+0xac>
 80047f0:	e005      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047f2:	4b1a      	ldr	r3, [pc, #104]	@ (800485c <HAL_RCC_GetSysClockFreq+0x110>)
 80047f4:	617b      	str	r3, [r7, #20]
      break;
 80047f6:	e005      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047f8:	4b19      	ldr	r3, [pc, #100]	@ (8004860 <HAL_RCC_GetSysClockFreq+0x114>)
 80047fa:	617b      	str	r3, [r7, #20]
      break;
 80047fc:	e002      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	617b      	str	r3, [r7, #20]
      break;
 8004802:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004804:	4b13      	ldr	r3, [pc, #76]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x108>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	091b      	lsrs	r3, r3, #4
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	3301      	adds	r3, #1
 8004810:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004812:	4b10      	ldr	r3, [pc, #64]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x108>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	0a1b      	lsrs	r3, r3, #8
 8004818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	fb03 f202 	mul.w	r2, r3, r2
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	fbb2 f3f3 	udiv	r3, r2, r3
 8004828:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800482a:	4b0a      	ldr	r3, [pc, #40]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x108>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	0e5b      	lsrs	r3, r3, #25
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	3301      	adds	r3, #1
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004842:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004844:	69bb      	ldr	r3, [r7, #24]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3724      	adds	r7, #36	@ 0x24
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40021000 	.word	0x40021000
 8004858:	0800789c 	.word	0x0800789c
 800485c:	00f42400 	.word	0x00f42400
 8004860:	007a1200 	.word	0x007a1200

08004864 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004868:	4b03      	ldr	r3, [pc, #12]	@ (8004878 <HAL_RCC_GetHCLKFreq+0x14>)
 800486a:	681b      	ldr	r3, [r3, #0]
}
 800486c:	4618      	mov	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	20000000 	.word	0x20000000

0800487c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004880:	f7ff fff0 	bl	8004864 <HAL_RCC_GetHCLKFreq>
 8004884:	4602      	mov	r2, r0
 8004886:	4b06      	ldr	r3, [pc, #24]	@ (80048a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	0a1b      	lsrs	r3, r3, #8
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	4904      	ldr	r1, [pc, #16]	@ (80048a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004892:	5ccb      	ldrb	r3, [r1, r3]
 8004894:	f003 031f 	and.w	r3, r3, #31
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800489c:	4618      	mov	r0, r3
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40021000 	.word	0x40021000
 80048a4:	08007894 	.word	0x08007894

080048a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048ac:	f7ff ffda 	bl	8004864 <HAL_RCC_GetHCLKFreq>
 80048b0:	4602      	mov	r2, r0
 80048b2:	4b06      	ldr	r3, [pc, #24]	@ (80048cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	0adb      	lsrs	r3, r3, #11
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	4904      	ldr	r1, [pc, #16]	@ (80048d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048be:	5ccb      	ldrb	r3, [r1, r3]
 80048c0:	f003 031f 	and.w	r3, r3, #31
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40021000 	.word	0x40021000
 80048d0:	08007894 	.word	0x08007894

080048d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048dc:	2300      	movs	r3, #0
 80048de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048e0:	4b2a      	ldr	r3, [pc, #168]	@ (800498c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048ec:	f7ff f932 	bl	8003b54 <HAL_PWREx_GetVoltageRange>
 80048f0:	6178      	str	r0, [r7, #20]
 80048f2:	e014      	b.n	800491e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048f4:	4b25      	ldr	r3, [pc, #148]	@ (800498c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f8:	4a24      	ldr	r2, [pc, #144]	@ (800498c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004900:	4b22      	ldr	r3, [pc, #136]	@ (800498c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800490c:	f7ff f922 	bl	8003b54 <HAL_PWREx_GetVoltageRange>
 8004910:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004912:	4b1e      	ldr	r3, [pc, #120]	@ (800498c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004916:	4a1d      	ldr	r2, [pc, #116]	@ (800498c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004918:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800491c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004924:	d10b      	bne.n	800493e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b80      	cmp	r3, #128	@ 0x80
 800492a:	d919      	bls.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004930:	d902      	bls.n	8004938 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004932:	2302      	movs	r3, #2
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	e013      	b.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004938:	2301      	movs	r3, #1
 800493a:	613b      	str	r3, [r7, #16]
 800493c:	e010      	b.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b80      	cmp	r3, #128	@ 0x80
 8004942:	d902      	bls.n	800494a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004944:	2303      	movs	r3, #3
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	e00a      	b.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b80      	cmp	r3, #128	@ 0x80
 800494e:	d102      	bne.n	8004956 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004950:	2302      	movs	r3, #2
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	e004      	b.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b70      	cmp	r3, #112	@ 0x70
 800495a:	d101      	bne.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800495c:	2301      	movs	r3, #1
 800495e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004960:	4b0b      	ldr	r3, [pc, #44]	@ (8004990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f023 0207 	bic.w	r2, r3, #7
 8004968:	4909      	ldr	r1, [pc, #36]	@ (8004990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004970:	4b07      	ldr	r3, [pc, #28]	@ (8004990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	429a      	cmp	r2, r3
 800497c:	d001      	beq.n	8004982 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40021000 	.word	0x40021000
 8004990:	40022000 	.word	0x40022000

08004994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800499c:	2300      	movs	r3, #0
 800499e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049a0:	2300      	movs	r3, #0
 80049a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d041      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049b8:	d02a      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80049ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049be:	d824      	bhi.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049c4:	d008      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049ca:	d81e      	bhi.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049d4:	d010      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049d6:	e018      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049d8:	4b86      	ldr	r3, [pc, #536]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	4a85      	ldr	r2, [pc, #532]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049e4:	e015      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3304      	adds	r3, #4
 80049ea:	2100      	movs	r1, #0
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 facb 	bl	8004f88 <RCCEx_PLLSAI1_Config>
 80049f2:	4603      	mov	r3, r0
 80049f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049f6:	e00c      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3320      	adds	r3, #32
 80049fc:	2100      	movs	r1, #0
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fbb6 	bl	8005170 <RCCEx_PLLSAI2_Config>
 8004a04:	4603      	mov	r3, r0
 8004a06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a08:	e003      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	74fb      	strb	r3, [r7, #19]
      break;
 8004a0e:	e000      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a12:	7cfb      	ldrb	r3, [r7, #19]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10b      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a18:	4b76      	ldr	r3, [pc, #472]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a26:	4973      	ldr	r1, [pc, #460]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004a2e:	e001      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a30:	7cfb      	ldrb	r3, [r7, #19]
 8004a32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d041      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a48:	d02a      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a4a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a4e:	d824      	bhi.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a54:	d008      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a5a:	d81e      	bhi.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a64:	d010      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a66:	e018      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a68:	4b62      	ldr	r3, [pc, #392]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	4a61      	ldr	r2, [pc, #388]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a72:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a74:	e015      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fa83 	bl	8004f88 <RCCEx_PLLSAI1_Config>
 8004a82:	4603      	mov	r3, r0
 8004a84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a86:	e00c      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3320      	adds	r3, #32
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fb6e 	bl	8005170 <RCCEx_PLLSAI2_Config>
 8004a94:	4603      	mov	r3, r0
 8004a96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a98:	e003      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	74fb      	strb	r3, [r7, #19]
      break;
 8004a9e:	e000      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aa2:	7cfb      	ldrb	r3, [r7, #19]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10b      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004aa8:	4b52      	ldr	r3, [pc, #328]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ab6:	494f      	ldr	r1, [pc, #316]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004abe:	e001      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac0:	7cfb      	ldrb	r3, [r7, #19]
 8004ac2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 80a0 	beq.w	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ad6:	4b47      	ldr	r3, [pc, #284]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00d      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aec:	4b41      	ldr	r3, [pc, #260]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af0:	4a40      	ldr	r2, [pc, #256]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004af6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004af8:	4b3e      	ldr	r3, [pc, #248]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b04:	2301      	movs	r3, #1
 8004b06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b08:	4b3b      	ldr	r3, [pc, #236]	@ (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a3a      	ldr	r2, [pc, #232]	@ (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b14:	f7fc fe54 	bl	80017c0 <HAL_GetTick>
 8004b18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b1a:	e009      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b1c:	f7fc fe50 	bl	80017c0 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d902      	bls.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	74fb      	strb	r3, [r7, #19]
        break;
 8004b2e:	e005      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b30:	4b31      	ldr	r3, [pc, #196]	@ (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0ef      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b3c:	7cfb      	ldrb	r3, [r7, #19]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d15c      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b42:	4b2c      	ldr	r3, [pc, #176]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01f      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d019      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b60:	4b24      	ldr	r3, [pc, #144]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b6c:	4b21      	ldr	r3, [pc, #132]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b72:	4a20      	ldr	r2, [pc, #128]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b82:	4a1c      	ldr	r2, [pc, #112]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b8c:	4a19      	ldr	r2, [pc, #100]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d016      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9e:	f7fc fe0f 	bl	80017c0 <HAL_GetTick>
 8004ba2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba4:	e00b      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba6:	f7fc fe0b 	bl	80017c0 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d902      	bls.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	74fb      	strb	r3, [r7, #19]
            break;
 8004bbc:	e006      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0ec      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004bcc:	7cfb      	ldrb	r3, [r7, #19]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10c      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bd2:	4b08      	ldr	r3, [pc, #32]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004be2:	4904      	ldr	r1, [pc, #16]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004bea:	e009      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bec:	7cfb      	ldrb	r3, [r7, #19]
 8004bee:	74bb      	strb	r3, [r7, #18]
 8004bf0:	e006      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004bf2:	bf00      	nop
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfc:	7cfb      	ldrb	r3, [r7, #19]
 8004bfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c00:	7c7b      	ldrb	r3, [r7, #17]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d105      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c06:	4b9e      	ldr	r3, [pc, #632]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0a:	4a9d      	ldr	r2, [pc, #628]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c1e:	4b98      	ldr	r3, [pc, #608]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c24:	f023 0203 	bic.w	r2, r3, #3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2c:	4994      	ldr	r1, [pc, #592]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c40:	4b8f      	ldr	r3, [pc, #572]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c46:	f023 020c 	bic.w	r2, r3, #12
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4e:	498c      	ldr	r1, [pc, #560]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c62:	4b87      	ldr	r3, [pc, #540]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c70:	4983      	ldr	r1, [pc, #524]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c84:	4b7e      	ldr	r3, [pc, #504]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c92:	497b      	ldr	r1, [pc, #492]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ca6:	4b76      	ldr	r3, [pc, #472]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cb4:	4972      	ldr	r1, [pc, #456]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0320 	and.w	r3, r3, #32
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cc8:	4b6d      	ldr	r3, [pc, #436]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd6:	496a      	ldr	r1, [pc, #424]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cea:	4b65      	ldr	r3, [pc, #404]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cf8:	4961      	ldr	r1, [pc, #388]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d0c:	4b5c      	ldr	r3, [pc, #368]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d1a:	4959      	ldr	r1, [pc, #356]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d2e:	4b54      	ldr	r3, [pc, #336]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d34:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d3c:	4950      	ldr	r1, [pc, #320]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d50:	4b4b      	ldr	r3, [pc, #300]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d56:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d5e:	4948      	ldr	r1, [pc, #288]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d72:	4b43      	ldr	r3, [pc, #268]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d80:	493f      	ldr	r1, [pc, #252]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d028      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d94:	4b3a      	ldr	r3, [pc, #232]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004da2:	4937      	ldr	r1, [pc, #220]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004db2:	d106      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004db4:	4b32      	ldr	r3, [pc, #200]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	4a31      	ldr	r2, [pc, #196]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dbe:	60d3      	str	r3, [r2, #12]
 8004dc0:	e011      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dc6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004dca:	d10c      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 f8d8 	bl	8004f88 <RCCEx_PLLSAI1_Config>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ddc:	7cfb      	ldrb	r3, [r7, #19]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004de2:	7cfb      	ldrb	r3, [r7, #19]
 8004de4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d028      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004df2:	4b23      	ldr	r3, [pc, #140]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e00:	491f      	ldr	r1, [pc, #124]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e10:	d106      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e12:	4b1b      	ldr	r3, [pc, #108]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	4a1a      	ldr	r2, [pc, #104]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e1c:	60d3      	str	r3, [r2, #12]
 8004e1e:	e011      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e28:	d10c      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	2101      	movs	r1, #1
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 f8a9 	bl	8004f88 <RCCEx_PLLSAI1_Config>
 8004e36:	4603      	mov	r3, r0
 8004e38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e3a:	7cfb      	ldrb	r3, [r7, #19]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e40:	7cfb      	ldrb	r3, [r7, #19]
 8004e42:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d02b      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e50:	4b0b      	ldr	r3, [pc, #44]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e5e:	4908      	ldr	r1, [pc, #32]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e6e:	d109      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e70:	4b03      	ldr	r3, [pc, #12]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	4a02      	ldr	r2, [pc, #8]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e7a:	60d3      	str	r3, [r2, #12]
 8004e7c:	e014      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e7e:	bf00      	nop
 8004e80:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3304      	adds	r3, #4
 8004e92:	2101      	movs	r1, #1
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 f877 	bl	8004f88 <RCCEx_PLLSAI1_Config>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ea4:	7cfb      	ldrb	r3, [r7, #19]
 8004ea6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d02f      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ec2:	4928      	ldr	r1, [pc, #160]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ece:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ed2:	d10d      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	2102      	movs	r1, #2
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 f854 	bl	8004f88 <RCCEx_PLLSAI1_Config>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ee4:	7cfb      	ldrb	r3, [r7, #19]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d014      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004eea:	7cfb      	ldrb	r3, [r7, #19]
 8004eec:	74bb      	strb	r3, [r7, #18]
 8004eee:	e011      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3320      	adds	r3, #32
 8004efe:	2102      	movs	r1, #2
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 f935 	bl	8005170 <RCCEx_PLLSAI2_Config>
 8004f06:	4603      	mov	r3, r0
 8004f08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f0a:	7cfb      	ldrb	r3, [r7, #19]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f10:	7cfb      	ldrb	r3, [r7, #19]
 8004f12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f20:	4b10      	ldr	r3, [pc, #64]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f26:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f2e:	490d      	ldr	r1, [pc, #52]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f42:	4b08      	ldr	r3, [pc, #32]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f52:	4904      	ldr	r1, [pc, #16]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40021000 	.word	0x40021000

08004f68 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004f6c:	4b05      	ldr	r3, [pc, #20]	@ (8004f84 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a04      	ldr	r2, [pc, #16]	@ (8004f84 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004f72:	f043 0304 	orr.w	r3, r3, #4
 8004f76:	6013      	str	r3, [r2, #0]
}
 8004f78:	bf00      	nop
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000

08004f88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f96:	4b75      	ldr	r3, [pc, #468]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d018      	beq.n	8004fd4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004fa2:	4b72      	ldr	r3, [pc, #456]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f003 0203 	and.w	r2, r3, #3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d10d      	bne.n	8004fce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
       ||
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d009      	beq.n	8004fce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004fba:	4b6c      	ldr	r3, [pc, #432]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	091b      	lsrs	r3, r3, #4
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
       ||
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d047      	beq.n	800505e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
 8004fd2:	e044      	b.n	800505e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d018      	beq.n	800500e <RCCEx_PLLSAI1_Config+0x86>
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d825      	bhi.n	800502c <RCCEx_PLLSAI1_Config+0xa4>
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d002      	beq.n	8004fea <RCCEx_PLLSAI1_Config+0x62>
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d009      	beq.n	8004ffc <RCCEx_PLLSAI1_Config+0x74>
 8004fe8:	e020      	b.n	800502c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fea:	4b60      	ldr	r3, [pc, #384]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d11d      	bne.n	8005032 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ffa:	e01a      	b.n	8005032 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ffc:	4b5b      	ldr	r3, [pc, #364]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005004:	2b00      	cmp	r3, #0
 8005006:	d116      	bne.n	8005036 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800500c:	e013      	b.n	8005036 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800500e:	4b57      	ldr	r3, [pc, #348]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10f      	bne.n	800503a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800501a:	4b54      	ldr	r3, [pc, #336]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800502a:	e006      	b.n	800503a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	73fb      	strb	r3, [r7, #15]
      break;
 8005030:	e004      	b.n	800503c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005032:	bf00      	nop
 8005034:	e002      	b.n	800503c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005036:	bf00      	nop
 8005038:	e000      	b.n	800503c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800503a:	bf00      	nop
    }

    if(status == HAL_OK)
 800503c:	7bfb      	ldrb	r3, [r7, #15]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10d      	bne.n	800505e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005042:	4b4a      	ldr	r3, [pc, #296]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6819      	ldr	r1, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	3b01      	subs	r3, #1
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	430b      	orrs	r3, r1
 8005058:	4944      	ldr	r1, [pc, #272]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 800505a:	4313      	orrs	r3, r2
 800505c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800505e:	7bfb      	ldrb	r3, [r7, #15]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d17d      	bne.n	8005160 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005064:	4b41      	ldr	r3, [pc, #260]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a40      	ldr	r2, [pc, #256]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 800506a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800506e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005070:	f7fc fba6 	bl	80017c0 <HAL_GetTick>
 8005074:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005076:	e009      	b.n	800508c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005078:	f7fc fba2 	bl	80017c0 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d902      	bls.n	800508c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	73fb      	strb	r3, [r7, #15]
        break;
 800508a:	e005      	b.n	8005098 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800508c:	4b37      	ldr	r3, [pc, #220]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1ef      	bne.n	8005078 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005098:	7bfb      	ldrb	r3, [r7, #15]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d160      	bne.n	8005160 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d111      	bne.n	80050c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050a4:	4b31      	ldr	r3, [pc, #196]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80050ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6892      	ldr	r2, [r2, #8]
 80050b4:	0211      	lsls	r1, r2, #8
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	68d2      	ldr	r2, [r2, #12]
 80050ba:	0912      	lsrs	r2, r2, #4
 80050bc:	0452      	lsls	r2, r2, #17
 80050be:	430a      	orrs	r2, r1
 80050c0:	492a      	ldr	r1, [pc, #168]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	610b      	str	r3, [r1, #16]
 80050c6:	e027      	b.n	8005118 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d112      	bne.n	80050f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050ce:	4b27      	ldr	r3, [pc, #156]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80050d6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6892      	ldr	r2, [r2, #8]
 80050de:	0211      	lsls	r1, r2, #8
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6912      	ldr	r2, [r2, #16]
 80050e4:	0852      	lsrs	r2, r2, #1
 80050e6:	3a01      	subs	r2, #1
 80050e8:	0552      	lsls	r2, r2, #21
 80050ea:	430a      	orrs	r2, r1
 80050ec:	491f      	ldr	r1, [pc, #124]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	610b      	str	r3, [r1, #16]
 80050f2:	e011      	b.n	8005118 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050f4:	4b1d      	ldr	r3, [pc, #116]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80050fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6892      	ldr	r2, [r2, #8]
 8005104:	0211      	lsls	r1, r2, #8
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6952      	ldr	r2, [r2, #20]
 800510a:	0852      	lsrs	r2, r2, #1
 800510c:	3a01      	subs	r2, #1
 800510e:	0652      	lsls	r2, r2, #25
 8005110:	430a      	orrs	r2, r1
 8005112:	4916      	ldr	r1, [pc, #88]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005114:	4313      	orrs	r3, r2
 8005116:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005118:	4b14      	ldr	r3, [pc, #80]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a13      	ldr	r2, [pc, #76]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 800511e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005122:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005124:	f7fc fb4c 	bl	80017c0 <HAL_GetTick>
 8005128:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800512a:	e009      	b.n	8005140 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800512c:	f7fc fb48 	bl	80017c0 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d902      	bls.n	8005140 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	73fb      	strb	r3, [r7, #15]
          break;
 800513e:	e005      	b.n	800514c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005140:	4b0a      	ldr	r3, [pc, #40]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0ef      	beq.n	800512c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005152:	4b06      	ldr	r3, [pc, #24]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	4904      	ldr	r1, [pc, #16]	@ (800516c <RCCEx_PLLSAI1_Config+0x1e4>)
 800515c:	4313      	orrs	r3, r2
 800515e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005160:	7bfb      	ldrb	r3, [r7, #15]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40021000 	.word	0x40021000

08005170 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800517a:	2300      	movs	r3, #0
 800517c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800517e:	4b6a      	ldr	r3, [pc, #424]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d018      	beq.n	80051bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800518a:	4b67      	ldr	r3, [pc, #412]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f003 0203 	and.w	r2, r3, #3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d10d      	bne.n	80051b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
       ||
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d009      	beq.n	80051b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80051a2:	4b61      	ldr	r3, [pc, #388]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	091b      	lsrs	r3, r3, #4
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
       ||
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d047      	beq.n	8005246 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	73fb      	strb	r3, [r7, #15]
 80051ba:	e044      	b.n	8005246 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	d018      	beq.n	80051f6 <RCCEx_PLLSAI2_Config+0x86>
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d825      	bhi.n	8005214 <RCCEx_PLLSAI2_Config+0xa4>
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d002      	beq.n	80051d2 <RCCEx_PLLSAI2_Config+0x62>
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d009      	beq.n	80051e4 <RCCEx_PLLSAI2_Config+0x74>
 80051d0:	e020      	b.n	8005214 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051d2:	4b55      	ldr	r3, [pc, #340]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d11d      	bne.n	800521a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051e2:	e01a      	b.n	800521a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051e4:	4b50      	ldr	r3, [pc, #320]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d116      	bne.n	800521e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051f4:	e013      	b.n	800521e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051f6:	4b4c      	ldr	r3, [pc, #304]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10f      	bne.n	8005222 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005202:	4b49      	ldr	r3, [pc, #292]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d109      	bne.n	8005222 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005212:	e006      	b.n	8005222 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	73fb      	strb	r3, [r7, #15]
      break;
 8005218:	e004      	b.n	8005224 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800521a:	bf00      	nop
 800521c:	e002      	b.n	8005224 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800521e:	bf00      	nop
 8005220:	e000      	b.n	8005224 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005222:	bf00      	nop
    }

    if(status == HAL_OK)
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10d      	bne.n	8005246 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800522a:	4b3f      	ldr	r3, [pc, #252]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6819      	ldr	r1, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	3b01      	subs	r3, #1
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	430b      	orrs	r3, r1
 8005240:	4939      	ldr	r1, [pc, #228]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005242:	4313      	orrs	r3, r2
 8005244:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d167      	bne.n	800531c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800524c:	4b36      	ldr	r3, [pc, #216]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a35      	ldr	r2, [pc, #212]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005252:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005256:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005258:	f7fc fab2 	bl	80017c0 <HAL_GetTick>
 800525c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800525e:	e009      	b.n	8005274 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005260:	f7fc faae 	bl	80017c0 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d902      	bls.n	8005274 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	73fb      	strb	r3, [r7, #15]
        break;
 8005272:	e005      	b.n	8005280 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005274:	4b2c      	ldr	r3, [pc, #176]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1ef      	bne.n	8005260 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d14a      	bne.n	800531c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d111      	bne.n	80052b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800528c:	4b26      	ldr	r3, [pc, #152]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6892      	ldr	r2, [r2, #8]
 800529c:	0211      	lsls	r1, r2, #8
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	68d2      	ldr	r2, [r2, #12]
 80052a2:	0912      	lsrs	r2, r2, #4
 80052a4:	0452      	lsls	r2, r2, #17
 80052a6:	430a      	orrs	r2, r1
 80052a8:	491f      	ldr	r1, [pc, #124]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	614b      	str	r3, [r1, #20]
 80052ae:	e011      	b.n	80052d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80052b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	6892      	ldr	r2, [r2, #8]
 80052c0:	0211      	lsls	r1, r2, #8
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6912      	ldr	r2, [r2, #16]
 80052c6:	0852      	lsrs	r2, r2, #1
 80052c8:	3a01      	subs	r2, #1
 80052ca:	0652      	lsls	r2, r2, #25
 80052cc:	430a      	orrs	r2, r1
 80052ce:	4916      	ldr	r1, [pc, #88]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80052d4:	4b14      	ldr	r3, [pc, #80]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a13      	ldr	r2, [pc, #76]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e0:	f7fc fa6e 	bl	80017c0 <HAL_GetTick>
 80052e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052e6:	e009      	b.n	80052fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052e8:	f7fc fa6a 	bl	80017c0 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d902      	bls.n	80052fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	73fb      	strb	r3, [r7, #15]
          break;
 80052fa:	e005      	b.n	8005308 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0ef      	beq.n	80052e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800530e:	4b06      	ldr	r3, [pc, #24]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005310:	695a      	ldr	r2, [r3, #20]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	4904      	ldr	r1, [pc, #16]	@ (8005328 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005318:	4313      	orrs	r3, r2
 800531a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800531c:	7bfb      	ldrb	r3, [r7, #15]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40021000 	.word	0x40021000

0800532c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e095      	b.n	800546a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005342:	2b00      	cmp	r3, #0
 8005344:	d108      	bne.n	8005358 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800534e:	d009      	beq.n	8005364 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	61da      	str	r2, [r3, #28]
 8005356:	e005      	b.n	8005364 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d106      	bne.n	8005384 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fb ff20 	bl	80011c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800539a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053a4:	d902      	bls.n	80053ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e002      	b.n	80053b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80053ba:	d007      	beq.n	80053cc <HAL_SPI_Init+0xa0>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053c4:	d002      	beq.n	80053cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800540e:	ea42 0103 	orr.w	r1, r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005416:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	0c1b      	lsrs	r3, r3, #16
 8005428:	f003 0204 	and.w	r2, r3, #4
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005430:	f003 0310 	and.w	r3, r3, #16
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005448:	ea42 0103 	orr.w	r1, r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e049      	b.n	8005518 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d106      	bne.n	800549e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7fb fed7 	bl	800124c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2202      	movs	r2, #2
 80054a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3304      	adds	r3, #4
 80054ae:	4619      	mov	r1, r3
 80054b0:	4610      	mov	r0, r2
 80054b2:	f000 faa7 	bl	8005a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	d001      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e04f      	b.n	80055d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0201 	orr.w	r2, r2, #1
 800554e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a23      	ldr	r2, [pc, #140]	@ (80055e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d01d      	beq.n	8005596 <HAL_TIM_Base_Start_IT+0x76>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005562:	d018      	beq.n	8005596 <HAL_TIM_Base_Start_IT+0x76>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a1f      	ldr	r2, [pc, #124]	@ (80055e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d013      	beq.n	8005596 <HAL_TIM_Base_Start_IT+0x76>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1e      	ldr	r2, [pc, #120]	@ (80055ec <HAL_TIM_Base_Start_IT+0xcc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00e      	beq.n	8005596 <HAL_TIM_Base_Start_IT+0x76>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1c      	ldr	r2, [pc, #112]	@ (80055f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d009      	beq.n	8005596 <HAL_TIM_Base_Start_IT+0x76>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1b      	ldr	r2, [pc, #108]	@ (80055f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d004      	beq.n	8005596 <HAL_TIM_Base_Start_IT+0x76>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a19      	ldr	r2, [pc, #100]	@ (80055f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d115      	bne.n	80055c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	4b17      	ldr	r3, [pc, #92]	@ (80055fc <HAL_TIM_Base_Start_IT+0xdc>)
 800559e:	4013      	ands	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b06      	cmp	r3, #6
 80055a6:	d015      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0xb4>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ae:	d011      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0201 	orr.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c0:	e008      	b.n	80055d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f042 0201 	orr.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	e000      	b.n	80055d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	40012c00 	.word	0x40012c00
 80055e8:	40000400 	.word	0x40000400
 80055ec:	40000800 	.word	0x40000800
 80055f0:	40000c00 	.word	0x40000c00
 80055f4:	40013400 	.word	0x40013400
 80055f8:	40014000 	.word	0x40014000
 80055fc:	00010007 	.word	0x00010007

08005600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d020      	beq.n	8005664 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d01b      	beq.n	8005664 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0202 	mvn.w	r2, #2
 8005634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f9bc 	bl	80059c8 <HAL_TIM_IC_CaptureCallback>
 8005650:	e005      	b.n	800565e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f9ae 	bl	80059b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f9bf 	bl	80059dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b00      	cmp	r3, #0
 800566c:	d020      	beq.n	80056b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01b      	beq.n	80056b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0204 	mvn.w	r2, #4
 8005680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2202      	movs	r2, #2
 8005686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f996 	bl	80059c8 <HAL_TIM_IC_CaptureCallback>
 800569c:	e005      	b.n	80056aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f988 	bl	80059b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f999 	bl	80059dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d020      	beq.n	80056fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d01b      	beq.n	80056fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0208 	mvn.w	r2, #8
 80056cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2204      	movs	r2, #4
 80056d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f970 	bl	80059c8 <HAL_TIM_IC_CaptureCallback>
 80056e8:	e005      	b.n	80056f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f962 	bl	80059b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f973 	bl	80059dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f003 0310 	and.w	r3, r3, #16
 8005702:	2b00      	cmp	r3, #0
 8005704:	d020      	beq.n	8005748 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01b      	beq.n	8005748 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0210 	mvn.w	r2, #16
 8005718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2208      	movs	r2, #8
 800571e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f94a 	bl	80059c8 <HAL_TIM_IC_CaptureCallback>
 8005734:	e005      	b.n	8005742 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f93c 	bl	80059b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f94d 	bl	80059dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00c      	beq.n	800576c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d007      	beq.n	800576c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f06f 0201 	mvn.w	r2, #1
 8005764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f91a 	bl	80059a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005772:	2b00      	cmp	r3, #0
 8005774:	d104      	bne.n	8005780 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00c      	beq.n	800579a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005786:	2b00      	cmp	r3, #0
 8005788:	d007      	beq.n	800579a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fb07 	bl	8005da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00c      	beq.n	80057be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d007      	beq.n	80057be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80057b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 faff 	bl	8005dbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00c      	beq.n	80057e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d007      	beq.n	80057e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f907 	bl	80059f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00c      	beq.n	8005806 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d007      	beq.n	8005806 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f06f 0220 	mvn.w	r2, #32
 80057fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fac7 	bl	8005d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005806:	bf00      	nop
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005822:	2b01      	cmp	r3, #1
 8005824:	d101      	bne.n	800582a <HAL_TIM_ConfigClockSource+0x1c>
 8005826:	2302      	movs	r3, #2
 8005828:	e0b6      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x18a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2202      	movs	r2, #2
 8005836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005848:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800584c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005854:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005866:	d03e      	beq.n	80058e6 <HAL_TIM_ConfigClockSource+0xd8>
 8005868:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800586c:	f200 8087 	bhi.w	800597e <HAL_TIM_ConfigClockSource+0x170>
 8005870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005874:	f000 8086 	beq.w	8005984 <HAL_TIM_ConfigClockSource+0x176>
 8005878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800587c:	d87f      	bhi.n	800597e <HAL_TIM_ConfigClockSource+0x170>
 800587e:	2b70      	cmp	r3, #112	@ 0x70
 8005880:	d01a      	beq.n	80058b8 <HAL_TIM_ConfigClockSource+0xaa>
 8005882:	2b70      	cmp	r3, #112	@ 0x70
 8005884:	d87b      	bhi.n	800597e <HAL_TIM_ConfigClockSource+0x170>
 8005886:	2b60      	cmp	r3, #96	@ 0x60
 8005888:	d050      	beq.n	800592c <HAL_TIM_ConfigClockSource+0x11e>
 800588a:	2b60      	cmp	r3, #96	@ 0x60
 800588c:	d877      	bhi.n	800597e <HAL_TIM_ConfigClockSource+0x170>
 800588e:	2b50      	cmp	r3, #80	@ 0x50
 8005890:	d03c      	beq.n	800590c <HAL_TIM_ConfigClockSource+0xfe>
 8005892:	2b50      	cmp	r3, #80	@ 0x50
 8005894:	d873      	bhi.n	800597e <HAL_TIM_ConfigClockSource+0x170>
 8005896:	2b40      	cmp	r3, #64	@ 0x40
 8005898:	d058      	beq.n	800594c <HAL_TIM_ConfigClockSource+0x13e>
 800589a:	2b40      	cmp	r3, #64	@ 0x40
 800589c:	d86f      	bhi.n	800597e <HAL_TIM_ConfigClockSource+0x170>
 800589e:	2b30      	cmp	r3, #48	@ 0x30
 80058a0:	d064      	beq.n	800596c <HAL_TIM_ConfigClockSource+0x15e>
 80058a2:	2b30      	cmp	r3, #48	@ 0x30
 80058a4:	d86b      	bhi.n	800597e <HAL_TIM_ConfigClockSource+0x170>
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	d060      	beq.n	800596c <HAL_TIM_ConfigClockSource+0x15e>
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	d867      	bhi.n	800597e <HAL_TIM_ConfigClockSource+0x170>
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d05c      	beq.n	800596c <HAL_TIM_ConfigClockSource+0x15e>
 80058b2:	2b10      	cmp	r3, #16
 80058b4:	d05a      	beq.n	800596c <HAL_TIM_ConfigClockSource+0x15e>
 80058b6:	e062      	b.n	800597e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058c8:	f000 f9bc 	bl	8005c44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	609a      	str	r2, [r3, #8]
      break;
 80058e4:	e04f      	b.n	8005986 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058f6:	f000 f9a5 	bl	8005c44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005908:	609a      	str	r2, [r3, #8]
      break;
 800590a:	e03c      	b.n	8005986 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005918:	461a      	mov	r2, r3
 800591a:	f000 f919 	bl	8005b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2150      	movs	r1, #80	@ 0x50
 8005924:	4618      	mov	r0, r3
 8005926:	f000 f972 	bl	8005c0e <TIM_ITRx_SetConfig>
      break;
 800592a:	e02c      	b.n	8005986 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005938:	461a      	mov	r2, r3
 800593a:	f000 f938 	bl	8005bae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2160      	movs	r1, #96	@ 0x60
 8005944:	4618      	mov	r0, r3
 8005946:	f000 f962 	bl	8005c0e <TIM_ITRx_SetConfig>
      break;
 800594a:	e01c      	b.n	8005986 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005958:	461a      	mov	r2, r3
 800595a:	f000 f8f9 	bl	8005b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2140      	movs	r1, #64	@ 0x40
 8005964:	4618      	mov	r0, r3
 8005966:	f000 f952 	bl	8005c0e <TIM_ITRx_SetConfig>
      break;
 800596a:	e00c      	b.n	8005986 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	f000 f949 	bl	8005c0e <TIM_ITRx_SetConfig>
      break;
 800597c:	e003      	b.n	8005986 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	73fb      	strb	r3, [r7, #15]
      break;
 8005982:	e000      	b.n	8005986 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005984:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005996:	7bfb      	ldrb	r3, [r7, #15]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a46      	ldr	r2, [pc, #280]	@ (8005b30 <TIM_Base_SetConfig+0x12c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d013      	beq.n	8005a44 <TIM_Base_SetConfig+0x40>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a22:	d00f      	beq.n	8005a44 <TIM_Base_SetConfig+0x40>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a43      	ldr	r2, [pc, #268]	@ (8005b34 <TIM_Base_SetConfig+0x130>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00b      	beq.n	8005a44 <TIM_Base_SetConfig+0x40>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a42      	ldr	r2, [pc, #264]	@ (8005b38 <TIM_Base_SetConfig+0x134>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d007      	beq.n	8005a44 <TIM_Base_SetConfig+0x40>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a41      	ldr	r2, [pc, #260]	@ (8005b3c <TIM_Base_SetConfig+0x138>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <TIM_Base_SetConfig+0x40>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a40      	ldr	r2, [pc, #256]	@ (8005b40 <TIM_Base_SetConfig+0x13c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d108      	bne.n	8005a56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a35      	ldr	r2, [pc, #212]	@ (8005b30 <TIM_Base_SetConfig+0x12c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d01f      	beq.n	8005a9e <TIM_Base_SetConfig+0x9a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a64:	d01b      	beq.n	8005a9e <TIM_Base_SetConfig+0x9a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a32      	ldr	r2, [pc, #200]	@ (8005b34 <TIM_Base_SetConfig+0x130>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d017      	beq.n	8005a9e <TIM_Base_SetConfig+0x9a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a31      	ldr	r2, [pc, #196]	@ (8005b38 <TIM_Base_SetConfig+0x134>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d013      	beq.n	8005a9e <TIM_Base_SetConfig+0x9a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a30      	ldr	r2, [pc, #192]	@ (8005b3c <TIM_Base_SetConfig+0x138>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00f      	beq.n	8005a9e <TIM_Base_SetConfig+0x9a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a2f      	ldr	r2, [pc, #188]	@ (8005b40 <TIM_Base_SetConfig+0x13c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00b      	beq.n	8005a9e <TIM_Base_SetConfig+0x9a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a2e      	ldr	r2, [pc, #184]	@ (8005b44 <TIM_Base_SetConfig+0x140>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d007      	beq.n	8005a9e <TIM_Base_SetConfig+0x9a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a2d      	ldr	r2, [pc, #180]	@ (8005b48 <TIM_Base_SetConfig+0x144>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <TIM_Base_SetConfig+0x9a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a2c      	ldr	r2, [pc, #176]	@ (8005b4c <TIM_Base_SetConfig+0x148>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d108      	bne.n	8005ab0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a16      	ldr	r2, [pc, #88]	@ (8005b30 <TIM_Base_SetConfig+0x12c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d00f      	beq.n	8005afc <TIM_Base_SetConfig+0xf8>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a18      	ldr	r2, [pc, #96]	@ (8005b40 <TIM_Base_SetConfig+0x13c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00b      	beq.n	8005afc <TIM_Base_SetConfig+0xf8>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a17      	ldr	r2, [pc, #92]	@ (8005b44 <TIM_Base_SetConfig+0x140>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d007      	beq.n	8005afc <TIM_Base_SetConfig+0xf8>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a16      	ldr	r2, [pc, #88]	@ (8005b48 <TIM_Base_SetConfig+0x144>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d003      	beq.n	8005afc <TIM_Base_SetConfig+0xf8>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a15      	ldr	r2, [pc, #84]	@ (8005b4c <TIM_Base_SetConfig+0x148>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d103      	bne.n	8005b04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d105      	bne.n	8005b22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f023 0201 	bic.w	r2, r3, #1
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	611a      	str	r2, [r3, #16]
  }
}
 8005b22:	bf00      	nop
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40012c00 	.word	0x40012c00
 8005b34:	40000400 	.word	0x40000400
 8005b38:	40000800 	.word	0x40000800
 8005b3c:	40000c00 	.word	0x40000c00
 8005b40:	40013400 	.word	0x40013400
 8005b44:	40014000 	.word	0x40014000
 8005b48:	40014400 	.word	0x40014400
 8005b4c:	40014800 	.word	0x40014800

08005b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	f023 0201 	bic.w	r2, r3, #1
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	011b      	lsls	r3, r3, #4
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f023 030a 	bic.w	r3, r3, #10
 8005b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	621a      	str	r2, [r3, #32]
}
 8005ba2:	bf00      	nop
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b087      	sub	sp, #28
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	f023 0210 	bic.w	r2, r3, #16
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	031b      	lsls	r3, r3, #12
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	621a      	str	r2, [r3, #32]
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b085      	sub	sp, #20
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f043 0307 	orr.w	r3, r3, #7
 8005c30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	609a      	str	r2, [r3, #8]
}
 8005c38:	bf00      	nop
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	021a      	lsls	r2, r3, #8
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	431a      	orrs	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	609a      	str	r2, [r3, #8]
}
 8005c78:	bf00      	nop
 8005c7a:	371c      	adds	r7, #28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e068      	b.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a2e      	ldr	r2, [pc, #184]	@ (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d004      	beq.n	8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a2d      	ldr	r2, [pc, #180]	@ (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d108      	bne.n	8005ce2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005cd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ce8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1e      	ldr	r2, [pc, #120]	@ (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d01d      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d0e:	d018      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1b      	ldr	r2, [pc, #108]	@ (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d013      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d00e      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a18      	ldr	r2, [pc, #96]	@ (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d009      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a13      	ldr	r2, [pc, #76]	@ (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d004      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a14      	ldr	r2, [pc, #80]	@ (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d10c      	bne.n	8005d5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	40012c00 	.word	0x40012c00
 8005d80:	40013400 	.word	0x40013400
 8005d84:	40000400 	.word	0x40000400
 8005d88:	40000800 	.word	0x40000800
 8005d8c:	40000c00 	.word	0x40000c00
 8005d90:	40014000 	.word	0x40014000

08005d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e040      	b.n	8005e64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d106      	bne.n	8005df8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7fb fa72 	bl	80012dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2224      	movs	r2, #36	@ 0x24
 8005dfc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0201 	bic.w	r2, r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fb6a 	bl	80064f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f8af 	bl	8005f80 <UART_SetConfig>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e01b      	b.n	8005e64 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fbe9 	bl	8006634 <UART_CheckIdleState>
 8005e62:	4603      	mov	r3, r0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08a      	sub	sp, #40	@ 0x28
 8005e70:	af02      	add	r7, sp, #8
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	d177      	bne.n	8005f74 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_UART_Transmit+0x24>
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e070      	b.n	8005f76 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2221      	movs	r2, #33	@ 0x21
 8005ea0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ea2:	f7fb fc8d 	bl	80017c0 <HAL_GetTick>
 8005ea6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	88fa      	ldrh	r2, [r7, #6]
 8005eac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	88fa      	ldrh	r2, [r7, #6]
 8005eb4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ec0:	d108      	bne.n	8005ed4 <HAL_UART_Transmit+0x68>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d104      	bne.n	8005ed4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	61bb      	str	r3, [r7, #24]
 8005ed2:	e003      	b.n	8005edc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005edc:	e02f      	b.n	8005f3e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	2180      	movs	r1, #128	@ 0x80
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 fc4b 	bl	8006784 <UART_WaitOnFlagUntilTimeout>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d004      	beq.n	8005efe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e03b      	b.n	8005f76 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10b      	bne.n	8005f1c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	881a      	ldrh	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f10:	b292      	uxth	r2, r2
 8005f12:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	3302      	adds	r3, #2
 8005f18:	61bb      	str	r3, [r7, #24]
 8005f1a:	e007      	b.n	8005f2c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	781a      	ldrb	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	3b01      	subs	r3, #1
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1c9      	bne.n	8005ede <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2200      	movs	r2, #0
 8005f52:	2140      	movs	r1, #64	@ 0x40
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 fc15 	bl	8006784 <UART_WaitOnFlagUntilTimeout>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d004      	beq.n	8005f6a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e005      	b.n	8005f76 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	e000      	b.n	8005f76 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005f74:	2302      	movs	r3, #2
  }
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3720      	adds	r7, #32
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f84:	b08a      	sub	sp, #40	@ 0x28
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	4ba4      	ldr	r3, [pc, #656]	@ (8006240 <UART_SetConfig+0x2c0>)
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	6812      	ldr	r2, [r2, #0]
 8005fb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a99      	ldr	r2, [pc, #612]	@ (8006244 <UART_SetConfig+0x2c4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d004      	beq.n	8005fec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a90      	ldr	r2, [pc, #576]	@ (8006248 <UART_SetConfig+0x2c8>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d126      	bne.n	8006058 <UART_SetConfig+0xd8>
 800600a:	4b90      	ldr	r3, [pc, #576]	@ (800624c <UART_SetConfig+0x2cc>)
 800600c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006010:	f003 0303 	and.w	r3, r3, #3
 8006014:	2b03      	cmp	r3, #3
 8006016:	d81b      	bhi.n	8006050 <UART_SetConfig+0xd0>
 8006018:	a201      	add	r2, pc, #4	@ (adr r2, 8006020 <UART_SetConfig+0xa0>)
 800601a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601e:	bf00      	nop
 8006020:	08006031 	.word	0x08006031
 8006024:	08006041 	.word	0x08006041
 8006028:	08006039 	.word	0x08006039
 800602c:	08006049 	.word	0x08006049
 8006030:	2301      	movs	r3, #1
 8006032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006036:	e116      	b.n	8006266 <UART_SetConfig+0x2e6>
 8006038:	2302      	movs	r3, #2
 800603a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800603e:	e112      	b.n	8006266 <UART_SetConfig+0x2e6>
 8006040:	2304      	movs	r3, #4
 8006042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006046:	e10e      	b.n	8006266 <UART_SetConfig+0x2e6>
 8006048:	2308      	movs	r3, #8
 800604a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800604e:	e10a      	b.n	8006266 <UART_SetConfig+0x2e6>
 8006050:	2310      	movs	r3, #16
 8006052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006056:	e106      	b.n	8006266 <UART_SetConfig+0x2e6>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a7c      	ldr	r2, [pc, #496]	@ (8006250 <UART_SetConfig+0x2d0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d138      	bne.n	80060d4 <UART_SetConfig+0x154>
 8006062:	4b7a      	ldr	r3, [pc, #488]	@ (800624c <UART_SetConfig+0x2cc>)
 8006064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006068:	f003 030c 	and.w	r3, r3, #12
 800606c:	2b0c      	cmp	r3, #12
 800606e:	d82d      	bhi.n	80060cc <UART_SetConfig+0x14c>
 8006070:	a201      	add	r2, pc, #4	@ (adr r2, 8006078 <UART_SetConfig+0xf8>)
 8006072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006076:	bf00      	nop
 8006078:	080060ad 	.word	0x080060ad
 800607c:	080060cd 	.word	0x080060cd
 8006080:	080060cd 	.word	0x080060cd
 8006084:	080060cd 	.word	0x080060cd
 8006088:	080060bd 	.word	0x080060bd
 800608c:	080060cd 	.word	0x080060cd
 8006090:	080060cd 	.word	0x080060cd
 8006094:	080060cd 	.word	0x080060cd
 8006098:	080060b5 	.word	0x080060b5
 800609c:	080060cd 	.word	0x080060cd
 80060a0:	080060cd 	.word	0x080060cd
 80060a4:	080060cd 	.word	0x080060cd
 80060a8:	080060c5 	.word	0x080060c5
 80060ac:	2300      	movs	r3, #0
 80060ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060b2:	e0d8      	b.n	8006266 <UART_SetConfig+0x2e6>
 80060b4:	2302      	movs	r3, #2
 80060b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ba:	e0d4      	b.n	8006266 <UART_SetConfig+0x2e6>
 80060bc:	2304      	movs	r3, #4
 80060be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060c2:	e0d0      	b.n	8006266 <UART_SetConfig+0x2e6>
 80060c4:	2308      	movs	r3, #8
 80060c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ca:	e0cc      	b.n	8006266 <UART_SetConfig+0x2e6>
 80060cc:	2310      	movs	r3, #16
 80060ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060d2:	e0c8      	b.n	8006266 <UART_SetConfig+0x2e6>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a5e      	ldr	r2, [pc, #376]	@ (8006254 <UART_SetConfig+0x2d4>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d125      	bne.n	800612a <UART_SetConfig+0x1aa>
 80060de:	4b5b      	ldr	r3, [pc, #364]	@ (800624c <UART_SetConfig+0x2cc>)
 80060e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80060e8:	2b30      	cmp	r3, #48	@ 0x30
 80060ea:	d016      	beq.n	800611a <UART_SetConfig+0x19a>
 80060ec:	2b30      	cmp	r3, #48	@ 0x30
 80060ee:	d818      	bhi.n	8006122 <UART_SetConfig+0x1a2>
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	d00a      	beq.n	800610a <UART_SetConfig+0x18a>
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	d814      	bhi.n	8006122 <UART_SetConfig+0x1a2>
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <UART_SetConfig+0x182>
 80060fc:	2b10      	cmp	r3, #16
 80060fe:	d008      	beq.n	8006112 <UART_SetConfig+0x192>
 8006100:	e00f      	b.n	8006122 <UART_SetConfig+0x1a2>
 8006102:	2300      	movs	r3, #0
 8006104:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006108:	e0ad      	b.n	8006266 <UART_SetConfig+0x2e6>
 800610a:	2302      	movs	r3, #2
 800610c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006110:	e0a9      	b.n	8006266 <UART_SetConfig+0x2e6>
 8006112:	2304      	movs	r3, #4
 8006114:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006118:	e0a5      	b.n	8006266 <UART_SetConfig+0x2e6>
 800611a:	2308      	movs	r3, #8
 800611c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006120:	e0a1      	b.n	8006266 <UART_SetConfig+0x2e6>
 8006122:	2310      	movs	r3, #16
 8006124:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006128:	e09d      	b.n	8006266 <UART_SetConfig+0x2e6>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a4a      	ldr	r2, [pc, #296]	@ (8006258 <UART_SetConfig+0x2d8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d125      	bne.n	8006180 <UART_SetConfig+0x200>
 8006134:	4b45      	ldr	r3, [pc, #276]	@ (800624c <UART_SetConfig+0x2cc>)
 8006136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800613a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800613e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006140:	d016      	beq.n	8006170 <UART_SetConfig+0x1f0>
 8006142:	2bc0      	cmp	r3, #192	@ 0xc0
 8006144:	d818      	bhi.n	8006178 <UART_SetConfig+0x1f8>
 8006146:	2b80      	cmp	r3, #128	@ 0x80
 8006148:	d00a      	beq.n	8006160 <UART_SetConfig+0x1e0>
 800614a:	2b80      	cmp	r3, #128	@ 0x80
 800614c:	d814      	bhi.n	8006178 <UART_SetConfig+0x1f8>
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <UART_SetConfig+0x1d8>
 8006152:	2b40      	cmp	r3, #64	@ 0x40
 8006154:	d008      	beq.n	8006168 <UART_SetConfig+0x1e8>
 8006156:	e00f      	b.n	8006178 <UART_SetConfig+0x1f8>
 8006158:	2300      	movs	r3, #0
 800615a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800615e:	e082      	b.n	8006266 <UART_SetConfig+0x2e6>
 8006160:	2302      	movs	r3, #2
 8006162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006166:	e07e      	b.n	8006266 <UART_SetConfig+0x2e6>
 8006168:	2304      	movs	r3, #4
 800616a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800616e:	e07a      	b.n	8006266 <UART_SetConfig+0x2e6>
 8006170:	2308      	movs	r3, #8
 8006172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006176:	e076      	b.n	8006266 <UART_SetConfig+0x2e6>
 8006178:	2310      	movs	r3, #16
 800617a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800617e:	e072      	b.n	8006266 <UART_SetConfig+0x2e6>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a35      	ldr	r2, [pc, #212]	@ (800625c <UART_SetConfig+0x2dc>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d12a      	bne.n	80061e0 <UART_SetConfig+0x260>
 800618a:	4b30      	ldr	r3, [pc, #192]	@ (800624c <UART_SetConfig+0x2cc>)
 800618c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006190:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006194:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006198:	d01a      	beq.n	80061d0 <UART_SetConfig+0x250>
 800619a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800619e:	d81b      	bhi.n	80061d8 <UART_SetConfig+0x258>
 80061a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061a4:	d00c      	beq.n	80061c0 <UART_SetConfig+0x240>
 80061a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061aa:	d815      	bhi.n	80061d8 <UART_SetConfig+0x258>
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d003      	beq.n	80061b8 <UART_SetConfig+0x238>
 80061b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061b4:	d008      	beq.n	80061c8 <UART_SetConfig+0x248>
 80061b6:	e00f      	b.n	80061d8 <UART_SetConfig+0x258>
 80061b8:	2300      	movs	r3, #0
 80061ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061be:	e052      	b.n	8006266 <UART_SetConfig+0x2e6>
 80061c0:	2302      	movs	r3, #2
 80061c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061c6:	e04e      	b.n	8006266 <UART_SetConfig+0x2e6>
 80061c8:	2304      	movs	r3, #4
 80061ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ce:	e04a      	b.n	8006266 <UART_SetConfig+0x2e6>
 80061d0:	2308      	movs	r3, #8
 80061d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061d6:	e046      	b.n	8006266 <UART_SetConfig+0x2e6>
 80061d8:	2310      	movs	r3, #16
 80061da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061de:	e042      	b.n	8006266 <UART_SetConfig+0x2e6>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a17      	ldr	r2, [pc, #92]	@ (8006244 <UART_SetConfig+0x2c4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d13a      	bne.n	8006260 <UART_SetConfig+0x2e0>
 80061ea:	4b18      	ldr	r3, [pc, #96]	@ (800624c <UART_SetConfig+0x2cc>)
 80061ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80061f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061f8:	d01a      	beq.n	8006230 <UART_SetConfig+0x2b0>
 80061fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061fe:	d81b      	bhi.n	8006238 <UART_SetConfig+0x2b8>
 8006200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006204:	d00c      	beq.n	8006220 <UART_SetConfig+0x2a0>
 8006206:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800620a:	d815      	bhi.n	8006238 <UART_SetConfig+0x2b8>
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <UART_SetConfig+0x298>
 8006210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006214:	d008      	beq.n	8006228 <UART_SetConfig+0x2a8>
 8006216:	e00f      	b.n	8006238 <UART_SetConfig+0x2b8>
 8006218:	2300      	movs	r3, #0
 800621a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800621e:	e022      	b.n	8006266 <UART_SetConfig+0x2e6>
 8006220:	2302      	movs	r3, #2
 8006222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006226:	e01e      	b.n	8006266 <UART_SetConfig+0x2e6>
 8006228:	2304      	movs	r3, #4
 800622a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800622e:	e01a      	b.n	8006266 <UART_SetConfig+0x2e6>
 8006230:	2308      	movs	r3, #8
 8006232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006236:	e016      	b.n	8006266 <UART_SetConfig+0x2e6>
 8006238:	2310      	movs	r3, #16
 800623a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800623e:	e012      	b.n	8006266 <UART_SetConfig+0x2e6>
 8006240:	efff69f3 	.word	0xefff69f3
 8006244:	40008000 	.word	0x40008000
 8006248:	40013800 	.word	0x40013800
 800624c:	40021000 	.word	0x40021000
 8006250:	40004400 	.word	0x40004400
 8006254:	40004800 	.word	0x40004800
 8006258:	40004c00 	.word	0x40004c00
 800625c:	40005000 	.word	0x40005000
 8006260:	2310      	movs	r3, #16
 8006262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a9f      	ldr	r2, [pc, #636]	@ (80064e8 <UART_SetConfig+0x568>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d17a      	bne.n	8006366 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006270:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006274:	2b08      	cmp	r3, #8
 8006276:	d824      	bhi.n	80062c2 <UART_SetConfig+0x342>
 8006278:	a201      	add	r2, pc, #4	@ (adr r2, 8006280 <UART_SetConfig+0x300>)
 800627a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627e:	bf00      	nop
 8006280:	080062a5 	.word	0x080062a5
 8006284:	080062c3 	.word	0x080062c3
 8006288:	080062ad 	.word	0x080062ad
 800628c:	080062c3 	.word	0x080062c3
 8006290:	080062b3 	.word	0x080062b3
 8006294:	080062c3 	.word	0x080062c3
 8006298:	080062c3 	.word	0x080062c3
 800629c:	080062c3 	.word	0x080062c3
 80062a0:	080062bb 	.word	0x080062bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a4:	f7fe faea 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 80062a8:	61f8      	str	r0, [r7, #28]
        break;
 80062aa:	e010      	b.n	80062ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062ac:	4b8f      	ldr	r3, [pc, #572]	@ (80064ec <UART_SetConfig+0x56c>)
 80062ae:	61fb      	str	r3, [r7, #28]
        break;
 80062b0:	e00d      	b.n	80062ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062b2:	f7fe fa4b 	bl	800474c <HAL_RCC_GetSysClockFreq>
 80062b6:	61f8      	str	r0, [r7, #28]
        break;
 80062b8:	e009      	b.n	80062ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062be:	61fb      	str	r3, [r7, #28]
        break;
 80062c0:	e005      	b.n	80062ce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80062cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 80fb 	beq.w	80064cc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	4613      	mov	r3, r2
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	4413      	add	r3, r2
 80062e0:	69fa      	ldr	r2, [r7, #28]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d305      	bcc.n	80062f2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062ec:	69fa      	ldr	r2, [r7, #28]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d903      	bls.n	80062fa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80062f8:	e0e8      	b.n	80064cc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	2200      	movs	r2, #0
 80062fe:	461c      	mov	r4, r3
 8006300:	4615      	mov	r5, r2
 8006302:	f04f 0200 	mov.w	r2, #0
 8006306:	f04f 0300 	mov.w	r3, #0
 800630a:	022b      	lsls	r3, r5, #8
 800630c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006310:	0222      	lsls	r2, r4, #8
 8006312:	68f9      	ldr	r1, [r7, #12]
 8006314:	6849      	ldr	r1, [r1, #4]
 8006316:	0849      	lsrs	r1, r1, #1
 8006318:	2000      	movs	r0, #0
 800631a:	4688      	mov	r8, r1
 800631c:	4681      	mov	r9, r0
 800631e:	eb12 0a08 	adds.w	sl, r2, r8
 8006322:	eb43 0b09 	adc.w	fp, r3, r9
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	603b      	str	r3, [r7, #0]
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006334:	4650      	mov	r0, sl
 8006336:	4659      	mov	r1, fp
 8006338:	f7f9 ff9a 	bl	8000270 <__aeabi_uldivmod>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4613      	mov	r3, r2
 8006342:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800634a:	d308      	bcc.n	800635e <UART_SetConfig+0x3de>
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006352:	d204      	bcs.n	800635e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	60da      	str	r2, [r3, #12]
 800635c:	e0b6      	b.n	80064cc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006364:	e0b2      	b.n	80064cc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800636e:	d15e      	bne.n	800642e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006370:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006374:	2b08      	cmp	r3, #8
 8006376:	d828      	bhi.n	80063ca <UART_SetConfig+0x44a>
 8006378:	a201      	add	r2, pc, #4	@ (adr r2, 8006380 <UART_SetConfig+0x400>)
 800637a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637e:	bf00      	nop
 8006380:	080063a5 	.word	0x080063a5
 8006384:	080063ad 	.word	0x080063ad
 8006388:	080063b5 	.word	0x080063b5
 800638c:	080063cb 	.word	0x080063cb
 8006390:	080063bb 	.word	0x080063bb
 8006394:	080063cb 	.word	0x080063cb
 8006398:	080063cb 	.word	0x080063cb
 800639c:	080063cb 	.word	0x080063cb
 80063a0:	080063c3 	.word	0x080063c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063a4:	f7fe fa6a 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 80063a8:	61f8      	str	r0, [r7, #28]
        break;
 80063aa:	e014      	b.n	80063d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063ac:	f7fe fa7c 	bl	80048a8 <HAL_RCC_GetPCLK2Freq>
 80063b0:	61f8      	str	r0, [r7, #28]
        break;
 80063b2:	e010      	b.n	80063d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063b4:	4b4d      	ldr	r3, [pc, #308]	@ (80064ec <UART_SetConfig+0x56c>)
 80063b6:	61fb      	str	r3, [r7, #28]
        break;
 80063b8:	e00d      	b.n	80063d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ba:	f7fe f9c7 	bl	800474c <HAL_RCC_GetSysClockFreq>
 80063be:	61f8      	str	r0, [r7, #28]
        break;
 80063c0:	e009      	b.n	80063d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063c6:	61fb      	str	r3, [r7, #28]
        break;
 80063c8:	e005      	b.n	80063d6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80063d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d077      	beq.n	80064cc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	005a      	lsls	r2, r3, #1
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	085b      	lsrs	r3, r3, #1
 80063e6:	441a      	add	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	2b0f      	cmp	r3, #15
 80063f6:	d916      	bls.n	8006426 <UART_SetConfig+0x4a6>
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063fe:	d212      	bcs.n	8006426 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	b29b      	uxth	r3, r3
 8006404:	f023 030f 	bic.w	r3, r3, #15
 8006408:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	085b      	lsrs	r3, r3, #1
 800640e:	b29b      	uxth	r3, r3
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	b29a      	uxth	r2, r3
 8006416:	8afb      	ldrh	r3, [r7, #22]
 8006418:	4313      	orrs	r3, r2
 800641a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	8afa      	ldrh	r2, [r7, #22]
 8006422:	60da      	str	r2, [r3, #12]
 8006424:	e052      	b.n	80064cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800642c:	e04e      	b.n	80064cc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800642e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006432:	2b08      	cmp	r3, #8
 8006434:	d827      	bhi.n	8006486 <UART_SetConfig+0x506>
 8006436:	a201      	add	r2, pc, #4	@ (adr r2, 800643c <UART_SetConfig+0x4bc>)
 8006438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643c:	08006461 	.word	0x08006461
 8006440:	08006469 	.word	0x08006469
 8006444:	08006471 	.word	0x08006471
 8006448:	08006487 	.word	0x08006487
 800644c:	08006477 	.word	0x08006477
 8006450:	08006487 	.word	0x08006487
 8006454:	08006487 	.word	0x08006487
 8006458:	08006487 	.word	0x08006487
 800645c:	0800647f 	.word	0x0800647f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006460:	f7fe fa0c 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 8006464:	61f8      	str	r0, [r7, #28]
        break;
 8006466:	e014      	b.n	8006492 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006468:	f7fe fa1e 	bl	80048a8 <HAL_RCC_GetPCLK2Freq>
 800646c:	61f8      	str	r0, [r7, #28]
        break;
 800646e:	e010      	b.n	8006492 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006470:	4b1e      	ldr	r3, [pc, #120]	@ (80064ec <UART_SetConfig+0x56c>)
 8006472:	61fb      	str	r3, [r7, #28]
        break;
 8006474:	e00d      	b.n	8006492 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006476:	f7fe f969 	bl	800474c <HAL_RCC_GetSysClockFreq>
 800647a:	61f8      	str	r0, [r7, #28]
        break;
 800647c:	e009      	b.n	8006492 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800647e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006482:	61fb      	str	r3, [r7, #28]
        break;
 8006484:	e005      	b.n	8006492 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006490:	bf00      	nop
    }

    if (pclk != 0U)
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d019      	beq.n	80064cc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	085a      	lsrs	r2, r3, #1
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	441a      	add	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	2b0f      	cmp	r3, #15
 80064b0:	d909      	bls.n	80064c6 <UART_SetConfig+0x546>
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064b8:	d205      	bcs.n	80064c6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	b29a      	uxth	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60da      	str	r2, [r3, #12]
 80064c4:	e002      	b.n	80064cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80064d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3728      	adds	r7, #40	@ 0x28
 80064e0:	46bd      	mov	sp, r7
 80064e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064e6:	bf00      	nop
 80064e8:	40008000 	.word	0x40008000
 80064ec:	00f42400 	.word	0x00f42400

080064f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fc:	f003 0308 	and.w	r3, r3, #8
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006584:	f003 0310 	and.w	r3, r3, #16
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01a      	beq.n	8006606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065ee:	d10a      	bne.n	8006606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00a      	beq.n	8006628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	605a      	str	r2, [r3, #4]
  }
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b098      	sub	sp, #96	@ 0x60
 8006638:	af02      	add	r7, sp, #8
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006644:	f7fb f8bc 	bl	80017c0 <HAL_GetTick>
 8006648:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0308 	and.w	r3, r3, #8
 8006654:	2b08      	cmp	r3, #8
 8006656:	d12e      	bne.n	80066b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006658:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006660:	2200      	movs	r2, #0
 8006662:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f88c 	bl	8006784 <UART_WaitOnFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d021      	beq.n	80066b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006686:	653b      	str	r3, [r7, #80]	@ 0x50
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006690:	647b      	str	r3, [r7, #68]	@ 0x44
 8006692:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800669e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e6      	bne.n	8006672 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2220      	movs	r2, #32
 80066a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e062      	b.n	800677c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d149      	bne.n	8006758 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066cc:	2200      	movs	r2, #0
 80066ce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f856 	bl	8006784 <UART_WaitOnFlagUntilTimeout>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d03c      	beq.n	8006758 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e6:	e853 3f00 	ldrex	r3, [r3]
 80066ea:	623b      	str	r3, [r7, #32]
   return(result);
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	461a      	mov	r2, r3
 80066fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80066fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006704:	e841 2300 	strex	r3, r2, [r1]
 8006708:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800670a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e6      	bne.n	80066de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3308      	adds	r3, #8
 8006716:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 0301 	bic.w	r3, r3, #1
 8006726:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3308      	adds	r3, #8
 800672e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006730:	61fa      	str	r2, [r7, #28]
 8006732:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006734:	69b9      	ldr	r1, [r7, #24]
 8006736:	69fa      	ldr	r2, [r7, #28]
 8006738:	e841 2300 	strex	r3, r2, [r1]
 800673c:	617b      	str	r3, [r7, #20]
   return(result);
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1e5      	bne.n	8006710 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2220      	movs	r2, #32
 8006748:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e011      	b.n	800677c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2220      	movs	r2, #32
 800675c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3758      	adds	r7, #88	@ 0x58
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	603b      	str	r3, [r7, #0]
 8006790:	4613      	mov	r3, r2
 8006792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006794:	e04f      	b.n	8006836 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679c:	d04b      	beq.n	8006836 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800679e:	f7fb f80f 	bl	80017c0 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d302      	bcc.n	80067b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e04e      	b.n	8006856 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0304 	and.w	r3, r3, #4
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d037      	beq.n	8006836 <UART_WaitOnFlagUntilTimeout+0xb2>
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2b80      	cmp	r3, #128	@ 0x80
 80067ca:	d034      	beq.n	8006836 <UART_WaitOnFlagUntilTimeout+0xb2>
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b40      	cmp	r3, #64	@ 0x40
 80067d0:	d031      	beq.n	8006836 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	f003 0308 	and.w	r3, r3, #8
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d110      	bne.n	8006802 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2208      	movs	r2, #8
 80067e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 f838 	bl	800685e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2208      	movs	r2, #8
 80067f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e029      	b.n	8006856 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800680c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006810:	d111      	bne.n	8006836 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800681a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 f81e 	bl	800685e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2220      	movs	r2, #32
 8006826:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e00f      	b.n	8006856 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	69da      	ldr	r2, [r3, #28]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4013      	ands	r3, r2
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	429a      	cmp	r2, r3
 8006844:	bf0c      	ite	eq
 8006846:	2301      	moveq	r3, #1
 8006848:	2300      	movne	r3, #0
 800684a:	b2db      	uxtb	r3, r3
 800684c:	461a      	mov	r2, r3
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	429a      	cmp	r2, r3
 8006852:	d0a0      	beq.n	8006796 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800685e:	b480      	push	{r7}
 8006860:	b095      	sub	sp, #84	@ 0x54
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006876:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800687a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	461a      	mov	r2, r3
 8006882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006884:	643b      	str	r3, [r7, #64]	@ 0x40
 8006886:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800688a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e6      	bne.n	8006866 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3308      	adds	r3, #8
 800689e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	e853 3f00 	ldrex	r3, [r3]
 80068a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	f023 0301 	bic.w	r3, r3, #1
 80068ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3308      	adds	r3, #8
 80068b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068c0:	e841 2300 	strex	r3, r2, [r1]
 80068c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e5      	bne.n	8006898 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d118      	bne.n	8006906 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	f023 0310 	bic.w	r3, r3, #16
 80068e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068f2:	61bb      	str	r3, [r7, #24]
 80068f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	6979      	ldr	r1, [r7, #20]
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e6      	bne.n	80068d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2220      	movs	r2, #32
 800690a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800691a:	bf00      	nop
 800691c:	3754      	adds	r7, #84	@ 0x54
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <std>:
 8006928:	2300      	movs	r3, #0
 800692a:	b510      	push	{r4, lr}
 800692c:	4604      	mov	r4, r0
 800692e:	e9c0 3300 	strd	r3, r3, [r0]
 8006932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006936:	6083      	str	r3, [r0, #8]
 8006938:	8181      	strh	r1, [r0, #12]
 800693a:	6643      	str	r3, [r0, #100]	@ 0x64
 800693c:	81c2      	strh	r2, [r0, #14]
 800693e:	6183      	str	r3, [r0, #24]
 8006940:	4619      	mov	r1, r3
 8006942:	2208      	movs	r2, #8
 8006944:	305c      	adds	r0, #92	@ 0x5c
 8006946:	f000 f9f9 	bl	8006d3c <memset>
 800694a:	4b0d      	ldr	r3, [pc, #52]	@ (8006980 <std+0x58>)
 800694c:	6263      	str	r3, [r4, #36]	@ 0x24
 800694e:	4b0d      	ldr	r3, [pc, #52]	@ (8006984 <std+0x5c>)
 8006950:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006952:	4b0d      	ldr	r3, [pc, #52]	@ (8006988 <std+0x60>)
 8006954:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006956:	4b0d      	ldr	r3, [pc, #52]	@ (800698c <std+0x64>)
 8006958:	6323      	str	r3, [r4, #48]	@ 0x30
 800695a:	4b0d      	ldr	r3, [pc, #52]	@ (8006990 <std+0x68>)
 800695c:	6224      	str	r4, [r4, #32]
 800695e:	429c      	cmp	r4, r3
 8006960:	d006      	beq.n	8006970 <std+0x48>
 8006962:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006966:	4294      	cmp	r4, r2
 8006968:	d002      	beq.n	8006970 <std+0x48>
 800696a:	33d0      	adds	r3, #208	@ 0xd0
 800696c:	429c      	cmp	r4, r3
 800696e:	d105      	bne.n	800697c <std+0x54>
 8006970:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006978:	f000 ba58 	b.w	8006e2c <__retarget_lock_init_recursive>
 800697c:	bd10      	pop	{r4, pc}
 800697e:	bf00      	nop
 8006980:	08006b8d 	.word	0x08006b8d
 8006984:	08006baf 	.word	0x08006baf
 8006988:	08006be7 	.word	0x08006be7
 800698c:	08006c0b 	.word	0x08006c0b
 8006990:	200003a8 	.word	0x200003a8

08006994 <stdio_exit_handler>:
 8006994:	4a02      	ldr	r2, [pc, #8]	@ (80069a0 <stdio_exit_handler+0xc>)
 8006996:	4903      	ldr	r1, [pc, #12]	@ (80069a4 <stdio_exit_handler+0x10>)
 8006998:	4803      	ldr	r0, [pc, #12]	@ (80069a8 <stdio_exit_handler+0x14>)
 800699a:	f000 b869 	b.w	8006a70 <_fwalk_sglue>
 800699e:	bf00      	nop
 80069a0:	2000000c 	.word	0x2000000c
 80069a4:	080076cd 	.word	0x080076cd
 80069a8:	2000001c 	.word	0x2000001c

080069ac <cleanup_stdio>:
 80069ac:	6841      	ldr	r1, [r0, #4]
 80069ae:	4b0c      	ldr	r3, [pc, #48]	@ (80069e0 <cleanup_stdio+0x34>)
 80069b0:	4299      	cmp	r1, r3
 80069b2:	b510      	push	{r4, lr}
 80069b4:	4604      	mov	r4, r0
 80069b6:	d001      	beq.n	80069bc <cleanup_stdio+0x10>
 80069b8:	f000 fe88 	bl	80076cc <_fflush_r>
 80069bc:	68a1      	ldr	r1, [r4, #8]
 80069be:	4b09      	ldr	r3, [pc, #36]	@ (80069e4 <cleanup_stdio+0x38>)
 80069c0:	4299      	cmp	r1, r3
 80069c2:	d002      	beq.n	80069ca <cleanup_stdio+0x1e>
 80069c4:	4620      	mov	r0, r4
 80069c6:	f000 fe81 	bl	80076cc <_fflush_r>
 80069ca:	68e1      	ldr	r1, [r4, #12]
 80069cc:	4b06      	ldr	r3, [pc, #24]	@ (80069e8 <cleanup_stdio+0x3c>)
 80069ce:	4299      	cmp	r1, r3
 80069d0:	d004      	beq.n	80069dc <cleanup_stdio+0x30>
 80069d2:	4620      	mov	r0, r4
 80069d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069d8:	f000 be78 	b.w	80076cc <_fflush_r>
 80069dc:	bd10      	pop	{r4, pc}
 80069de:	bf00      	nop
 80069e0:	200003a8 	.word	0x200003a8
 80069e4:	20000410 	.word	0x20000410
 80069e8:	20000478 	.word	0x20000478

080069ec <global_stdio_init.part.0>:
 80069ec:	b510      	push	{r4, lr}
 80069ee:	4b0b      	ldr	r3, [pc, #44]	@ (8006a1c <global_stdio_init.part.0+0x30>)
 80069f0:	4c0b      	ldr	r4, [pc, #44]	@ (8006a20 <global_stdio_init.part.0+0x34>)
 80069f2:	4a0c      	ldr	r2, [pc, #48]	@ (8006a24 <global_stdio_init.part.0+0x38>)
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	4620      	mov	r0, r4
 80069f8:	2200      	movs	r2, #0
 80069fa:	2104      	movs	r1, #4
 80069fc:	f7ff ff94 	bl	8006928 <std>
 8006a00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a04:	2201      	movs	r2, #1
 8006a06:	2109      	movs	r1, #9
 8006a08:	f7ff ff8e 	bl	8006928 <std>
 8006a0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a10:	2202      	movs	r2, #2
 8006a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a16:	2112      	movs	r1, #18
 8006a18:	f7ff bf86 	b.w	8006928 <std>
 8006a1c:	200004e0 	.word	0x200004e0
 8006a20:	200003a8 	.word	0x200003a8
 8006a24:	08006995 	.word	0x08006995

08006a28 <__sfp_lock_acquire>:
 8006a28:	4801      	ldr	r0, [pc, #4]	@ (8006a30 <__sfp_lock_acquire+0x8>)
 8006a2a:	f000 ba00 	b.w	8006e2e <__retarget_lock_acquire_recursive>
 8006a2e:	bf00      	nop
 8006a30:	200004e9 	.word	0x200004e9

08006a34 <__sfp_lock_release>:
 8006a34:	4801      	ldr	r0, [pc, #4]	@ (8006a3c <__sfp_lock_release+0x8>)
 8006a36:	f000 b9fb 	b.w	8006e30 <__retarget_lock_release_recursive>
 8006a3a:	bf00      	nop
 8006a3c:	200004e9 	.word	0x200004e9

08006a40 <__sinit>:
 8006a40:	b510      	push	{r4, lr}
 8006a42:	4604      	mov	r4, r0
 8006a44:	f7ff fff0 	bl	8006a28 <__sfp_lock_acquire>
 8006a48:	6a23      	ldr	r3, [r4, #32]
 8006a4a:	b11b      	cbz	r3, 8006a54 <__sinit+0x14>
 8006a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a50:	f7ff bff0 	b.w	8006a34 <__sfp_lock_release>
 8006a54:	4b04      	ldr	r3, [pc, #16]	@ (8006a68 <__sinit+0x28>)
 8006a56:	6223      	str	r3, [r4, #32]
 8006a58:	4b04      	ldr	r3, [pc, #16]	@ (8006a6c <__sinit+0x2c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1f5      	bne.n	8006a4c <__sinit+0xc>
 8006a60:	f7ff ffc4 	bl	80069ec <global_stdio_init.part.0>
 8006a64:	e7f2      	b.n	8006a4c <__sinit+0xc>
 8006a66:	bf00      	nop
 8006a68:	080069ad 	.word	0x080069ad
 8006a6c:	200004e0 	.word	0x200004e0

08006a70 <_fwalk_sglue>:
 8006a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a74:	4607      	mov	r7, r0
 8006a76:	4688      	mov	r8, r1
 8006a78:	4614      	mov	r4, r2
 8006a7a:	2600      	movs	r6, #0
 8006a7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a80:	f1b9 0901 	subs.w	r9, r9, #1
 8006a84:	d505      	bpl.n	8006a92 <_fwalk_sglue+0x22>
 8006a86:	6824      	ldr	r4, [r4, #0]
 8006a88:	2c00      	cmp	r4, #0
 8006a8a:	d1f7      	bne.n	8006a7c <_fwalk_sglue+0xc>
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a92:	89ab      	ldrh	r3, [r5, #12]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d907      	bls.n	8006aa8 <_fwalk_sglue+0x38>
 8006a98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	d003      	beq.n	8006aa8 <_fwalk_sglue+0x38>
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	47c0      	blx	r8
 8006aa6:	4306      	orrs	r6, r0
 8006aa8:	3568      	adds	r5, #104	@ 0x68
 8006aaa:	e7e9      	b.n	8006a80 <_fwalk_sglue+0x10>

08006aac <iprintf>:
 8006aac:	b40f      	push	{r0, r1, r2, r3}
 8006aae:	b507      	push	{r0, r1, r2, lr}
 8006ab0:	4906      	ldr	r1, [pc, #24]	@ (8006acc <iprintf+0x20>)
 8006ab2:	ab04      	add	r3, sp, #16
 8006ab4:	6808      	ldr	r0, [r1, #0]
 8006ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aba:	6881      	ldr	r1, [r0, #8]
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	f000 fadb 	bl	8007078 <_vfiprintf_r>
 8006ac2:	b003      	add	sp, #12
 8006ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ac8:	b004      	add	sp, #16
 8006aca:	4770      	bx	lr
 8006acc:	20000018 	.word	0x20000018

08006ad0 <_puts_r>:
 8006ad0:	6a03      	ldr	r3, [r0, #32]
 8006ad2:	b570      	push	{r4, r5, r6, lr}
 8006ad4:	6884      	ldr	r4, [r0, #8]
 8006ad6:	4605      	mov	r5, r0
 8006ad8:	460e      	mov	r6, r1
 8006ada:	b90b      	cbnz	r3, 8006ae0 <_puts_r+0x10>
 8006adc:	f7ff ffb0 	bl	8006a40 <__sinit>
 8006ae0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ae2:	07db      	lsls	r3, r3, #31
 8006ae4:	d405      	bmi.n	8006af2 <_puts_r+0x22>
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	0598      	lsls	r0, r3, #22
 8006aea:	d402      	bmi.n	8006af2 <_puts_r+0x22>
 8006aec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006aee:	f000 f99e 	bl	8006e2e <__retarget_lock_acquire_recursive>
 8006af2:	89a3      	ldrh	r3, [r4, #12]
 8006af4:	0719      	lsls	r1, r3, #28
 8006af6:	d502      	bpl.n	8006afe <_puts_r+0x2e>
 8006af8:	6923      	ldr	r3, [r4, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d135      	bne.n	8006b6a <_puts_r+0x9a>
 8006afe:	4621      	mov	r1, r4
 8006b00:	4628      	mov	r0, r5
 8006b02:	f000 f8c5 	bl	8006c90 <__swsetup_r>
 8006b06:	b380      	cbz	r0, 8006b6a <_puts_r+0x9a>
 8006b08:	f04f 35ff 	mov.w	r5, #4294967295
 8006b0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b0e:	07da      	lsls	r2, r3, #31
 8006b10:	d405      	bmi.n	8006b1e <_puts_r+0x4e>
 8006b12:	89a3      	ldrh	r3, [r4, #12]
 8006b14:	059b      	lsls	r3, r3, #22
 8006b16:	d402      	bmi.n	8006b1e <_puts_r+0x4e>
 8006b18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b1a:	f000 f989 	bl	8006e30 <__retarget_lock_release_recursive>
 8006b1e:	4628      	mov	r0, r5
 8006b20:	bd70      	pop	{r4, r5, r6, pc}
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	da04      	bge.n	8006b30 <_puts_r+0x60>
 8006b26:	69a2      	ldr	r2, [r4, #24]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	dc17      	bgt.n	8006b5c <_puts_r+0x8c>
 8006b2c:	290a      	cmp	r1, #10
 8006b2e:	d015      	beq.n	8006b5c <_puts_r+0x8c>
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	6022      	str	r2, [r4, #0]
 8006b36:	7019      	strb	r1, [r3, #0]
 8006b38:	68a3      	ldr	r3, [r4, #8]
 8006b3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	60a3      	str	r3, [r4, #8]
 8006b42:	2900      	cmp	r1, #0
 8006b44:	d1ed      	bne.n	8006b22 <_puts_r+0x52>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	da11      	bge.n	8006b6e <_puts_r+0x9e>
 8006b4a:	4622      	mov	r2, r4
 8006b4c:	210a      	movs	r1, #10
 8006b4e:	4628      	mov	r0, r5
 8006b50:	f000 f85f 	bl	8006c12 <__swbuf_r>
 8006b54:	3001      	adds	r0, #1
 8006b56:	d0d7      	beq.n	8006b08 <_puts_r+0x38>
 8006b58:	250a      	movs	r5, #10
 8006b5a:	e7d7      	b.n	8006b0c <_puts_r+0x3c>
 8006b5c:	4622      	mov	r2, r4
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f000 f857 	bl	8006c12 <__swbuf_r>
 8006b64:	3001      	adds	r0, #1
 8006b66:	d1e7      	bne.n	8006b38 <_puts_r+0x68>
 8006b68:	e7ce      	b.n	8006b08 <_puts_r+0x38>
 8006b6a:	3e01      	subs	r6, #1
 8006b6c:	e7e4      	b.n	8006b38 <_puts_r+0x68>
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	6022      	str	r2, [r4, #0]
 8006b74:	220a      	movs	r2, #10
 8006b76:	701a      	strb	r2, [r3, #0]
 8006b78:	e7ee      	b.n	8006b58 <_puts_r+0x88>
	...

08006b7c <puts>:
 8006b7c:	4b02      	ldr	r3, [pc, #8]	@ (8006b88 <puts+0xc>)
 8006b7e:	4601      	mov	r1, r0
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	f7ff bfa5 	b.w	8006ad0 <_puts_r>
 8006b86:	bf00      	nop
 8006b88:	20000018 	.word	0x20000018

08006b8c <__sread>:
 8006b8c:	b510      	push	{r4, lr}
 8006b8e:	460c      	mov	r4, r1
 8006b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b94:	f000 f8fc 	bl	8006d90 <_read_r>
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	bfab      	itete	ge
 8006b9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b9e:	89a3      	ldrhlt	r3, [r4, #12]
 8006ba0:	181b      	addge	r3, r3, r0
 8006ba2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ba6:	bfac      	ite	ge
 8006ba8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006baa:	81a3      	strhlt	r3, [r4, #12]
 8006bac:	bd10      	pop	{r4, pc}

08006bae <__swrite>:
 8006bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb2:	461f      	mov	r7, r3
 8006bb4:	898b      	ldrh	r3, [r1, #12]
 8006bb6:	05db      	lsls	r3, r3, #23
 8006bb8:	4605      	mov	r5, r0
 8006bba:	460c      	mov	r4, r1
 8006bbc:	4616      	mov	r6, r2
 8006bbe:	d505      	bpl.n	8006bcc <__swrite+0x1e>
 8006bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f000 f8d0 	bl	8006d6c <_lseek_r>
 8006bcc:	89a3      	ldrh	r3, [r4, #12]
 8006bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bd6:	81a3      	strh	r3, [r4, #12]
 8006bd8:	4632      	mov	r2, r6
 8006bda:	463b      	mov	r3, r7
 8006bdc:	4628      	mov	r0, r5
 8006bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006be2:	f000 b8e7 	b.w	8006db4 <_write_r>

08006be6 <__sseek>:
 8006be6:	b510      	push	{r4, lr}
 8006be8:	460c      	mov	r4, r1
 8006bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bee:	f000 f8bd 	bl	8006d6c <_lseek_r>
 8006bf2:	1c43      	adds	r3, r0, #1
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	bf15      	itete	ne
 8006bf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006bfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006bfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c02:	81a3      	strheq	r3, [r4, #12]
 8006c04:	bf18      	it	ne
 8006c06:	81a3      	strhne	r3, [r4, #12]
 8006c08:	bd10      	pop	{r4, pc}

08006c0a <__sclose>:
 8006c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c0e:	f000 b89d 	b.w	8006d4c <_close_r>

08006c12 <__swbuf_r>:
 8006c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c14:	460e      	mov	r6, r1
 8006c16:	4614      	mov	r4, r2
 8006c18:	4605      	mov	r5, r0
 8006c1a:	b118      	cbz	r0, 8006c24 <__swbuf_r+0x12>
 8006c1c:	6a03      	ldr	r3, [r0, #32]
 8006c1e:	b90b      	cbnz	r3, 8006c24 <__swbuf_r+0x12>
 8006c20:	f7ff ff0e 	bl	8006a40 <__sinit>
 8006c24:	69a3      	ldr	r3, [r4, #24]
 8006c26:	60a3      	str	r3, [r4, #8]
 8006c28:	89a3      	ldrh	r3, [r4, #12]
 8006c2a:	071a      	lsls	r2, r3, #28
 8006c2c:	d501      	bpl.n	8006c32 <__swbuf_r+0x20>
 8006c2e:	6923      	ldr	r3, [r4, #16]
 8006c30:	b943      	cbnz	r3, 8006c44 <__swbuf_r+0x32>
 8006c32:	4621      	mov	r1, r4
 8006c34:	4628      	mov	r0, r5
 8006c36:	f000 f82b 	bl	8006c90 <__swsetup_r>
 8006c3a:	b118      	cbz	r0, 8006c44 <__swbuf_r+0x32>
 8006c3c:	f04f 37ff 	mov.w	r7, #4294967295
 8006c40:	4638      	mov	r0, r7
 8006c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	6922      	ldr	r2, [r4, #16]
 8006c48:	1a98      	subs	r0, r3, r2
 8006c4a:	6963      	ldr	r3, [r4, #20]
 8006c4c:	b2f6      	uxtb	r6, r6
 8006c4e:	4283      	cmp	r3, r0
 8006c50:	4637      	mov	r7, r6
 8006c52:	dc05      	bgt.n	8006c60 <__swbuf_r+0x4e>
 8006c54:	4621      	mov	r1, r4
 8006c56:	4628      	mov	r0, r5
 8006c58:	f000 fd38 	bl	80076cc <_fflush_r>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	d1ed      	bne.n	8006c3c <__swbuf_r+0x2a>
 8006c60:	68a3      	ldr	r3, [r4, #8]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	60a3      	str	r3, [r4, #8]
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	1c5a      	adds	r2, r3, #1
 8006c6a:	6022      	str	r2, [r4, #0]
 8006c6c:	701e      	strb	r6, [r3, #0]
 8006c6e:	6962      	ldr	r2, [r4, #20]
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d004      	beq.n	8006c80 <__swbuf_r+0x6e>
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	07db      	lsls	r3, r3, #31
 8006c7a:	d5e1      	bpl.n	8006c40 <__swbuf_r+0x2e>
 8006c7c:	2e0a      	cmp	r6, #10
 8006c7e:	d1df      	bne.n	8006c40 <__swbuf_r+0x2e>
 8006c80:	4621      	mov	r1, r4
 8006c82:	4628      	mov	r0, r5
 8006c84:	f000 fd22 	bl	80076cc <_fflush_r>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d0d9      	beq.n	8006c40 <__swbuf_r+0x2e>
 8006c8c:	e7d6      	b.n	8006c3c <__swbuf_r+0x2a>
	...

08006c90 <__swsetup_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	4b29      	ldr	r3, [pc, #164]	@ (8006d38 <__swsetup_r+0xa8>)
 8006c94:	4605      	mov	r5, r0
 8006c96:	6818      	ldr	r0, [r3, #0]
 8006c98:	460c      	mov	r4, r1
 8006c9a:	b118      	cbz	r0, 8006ca4 <__swsetup_r+0x14>
 8006c9c:	6a03      	ldr	r3, [r0, #32]
 8006c9e:	b90b      	cbnz	r3, 8006ca4 <__swsetup_r+0x14>
 8006ca0:	f7ff fece 	bl	8006a40 <__sinit>
 8006ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ca8:	0719      	lsls	r1, r3, #28
 8006caa:	d422      	bmi.n	8006cf2 <__swsetup_r+0x62>
 8006cac:	06da      	lsls	r2, r3, #27
 8006cae:	d407      	bmi.n	8006cc0 <__swsetup_r+0x30>
 8006cb0:	2209      	movs	r2, #9
 8006cb2:	602a      	str	r2, [r5, #0]
 8006cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cb8:	81a3      	strh	r3, [r4, #12]
 8006cba:	f04f 30ff 	mov.w	r0, #4294967295
 8006cbe:	e033      	b.n	8006d28 <__swsetup_r+0x98>
 8006cc0:	0758      	lsls	r0, r3, #29
 8006cc2:	d512      	bpl.n	8006cea <__swsetup_r+0x5a>
 8006cc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cc6:	b141      	cbz	r1, 8006cda <__swsetup_r+0x4a>
 8006cc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ccc:	4299      	cmp	r1, r3
 8006cce:	d002      	beq.n	8006cd6 <__swsetup_r+0x46>
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	f000 f8af 	bl	8006e34 <_free_r>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cda:	89a3      	ldrh	r3, [r4, #12]
 8006cdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ce0:	81a3      	strh	r3, [r4, #12]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	6063      	str	r3, [r4, #4]
 8006ce6:	6923      	ldr	r3, [r4, #16]
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	89a3      	ldrh	r3, [r4, #12]
 8006cec:	f043 0308 	orr.w	r3, r3, #8
 8006cf0:	81a3      	strh	r3, [r4, #12]
 8006cf2:	6923      	ldr	r3, [r4, #16]
 8006cf4:	b94b      	cbnz	r3, 8006d0a <__swsetup_r+0x7a>
 8006cf6:	89a3      	ldrh	r3, [r4, #12]
 8006cf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d00:	d003      	beq.n	8006d0a <__swsetup_r+0x7a>
 8006d02:	4621      	mov	r1, r4
 8006d04:	4628      	mov	r0, r5
 8006d06:	f000 fd2f 	bl	8007768 <__smakebuf_r>
 8006d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d0e:	f013 0201 	ands.w	r2, r3, #1
 8006d12:	d00a      	beq.n	8006d2a <__swsetup_r+0x9a>
 8006d14:	2200      	movs	r2, #0
 8006d16:	60a2      	str	r2, [r4, #8]
 8006d18:	6962      	ldr	r2, [r4, #20]
 8006d1a:	4252      	negs	r2, r2
 8006d1c:	61a2      	str	r2, [r4, #24]
 8006d1e:	6922      	ldr	r2, [r4, #16]
 8006d20:	b942      	cbnz	r2, 8006d34 <__swsetup_r+0xa4>
 8006d22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006d26:	d1c5      	bne.n	8006cb4 <__swsetup_r+0x24>
 8006d28:	bd38      	pop	{r3, r4, r5, pc}
 8006d2a:	0799      	lsls	r1, r3, #30
 8006d2c:	bf58      	it	pl
 8006d2e:	6962      	ldrpl	r2, [r4, #20]
 8006d30:	60a2      	str	r2, [r4, #8]
 8006d32:	e7f4      	b.n	8006d1e <__swsetup_r+0x8e>
 8006d34:	2000      	movs	r0, #0
 8006d36:	e7f7      	b.n	8006d28 <__swsetup_r+0x98>
 8006d38:	20000018 	.word	0x20000018

08006d3c <memset>:
 8006d3c:	4402      	add	r2, r0
 8006d3e:	4603      	mov	r3, r0
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d100      	bne.n	8006d46 <memset+0xa>
 8006d44:	4770      	bx	lr
 8006d46:	f803 1b01 	strb.w	r1, [r3], #1
 8006d4a:	e7f9      	b.n	8006d40 <memset+0x4>

08006d4c <_close_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	4d06      	ldr	r5, [pc, #24]	@ (8006d68 <_close_r+0x1c>)
 8006d50:	2300      	movs	r3, #0
 8006d52:	4604      	mov	r4, r0
 8006d54:	4608      	mov	r0, r1
 8006d56:	602b      	str	r3, [r5, #0]
 8006d58:	f7fa fc23 	bl	80015a2 <_close>
 8006d5c:	1c43      	adds	r3, r0, #1
 8006d5e:	d102      	bne.n	8006d66 <_close_r+0x1a>
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	b103      	cbz	r3, 8006d66 <_close_r+0x1a>
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	bd38      	pop	{r3, r4, r5, pc}
 8006d68:	200004e4 	.word	0x200004e4

08006d6c <_lseek_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	4d07      	ldr	r5, [pc, #28]	@ (8006d8c <_lseek_r+0x20>)
 8006d70:	4604      	mov	r4, r0
 8006d72:	4608      	mov	r0, r1
 8006d74:	4611      	mov	r1, r2
 8006d76:	2200      	movs	r2, #0
 8006d78:	602a      	str	r2, [r5, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	f7fa fc38 	bl	80015f0 <_lseek>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	d102      	bne.n	8006d8a <_lseek_r+0x1e>
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	b103      	cbz	r3, 8006d8a <_lseek_r+0x1e>
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	bd38      	pop	{r3, r4, r5, pc}
 8006d8c:	200004e4 	.word	0x200004e4

08006d90 <_read_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	4d07      	ldr	r5, [pc, #28]	@ (8006db0 <_read_r+0x20>)
 8006d94:	4604      	mov	r4, r0
 8006d96:	4608      	mov	r0, r1
 8006d98:	4611      	mov	r1, r2
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	602a      	str	r2, [r5, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f7fa fbc6 	bl	8001530 <_read>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d102      	bne.n	8006dae <_read_r+0x1e>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	b103      	cbz	r3, 8006dae <_read_r+0x1e>
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	200004e4 	.word	0x200004e4

08006db4 <_write_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	4d07      	ldr	r5, [pc, #28]	@ (8006dd4 <_write_r+0x20>)
 8006db8:	4604      	mov	r4, r0
 8006dba:	4608      	mov	r0, r1
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	602a      	str	r2, [r5, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f7fa fbd1 	bl	800156a <_write>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d102      	bne.n	8006dd2 <_write_r+0x1e>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	b103      	cbz	r3, 8006dd2 <_write_r+0x1e>
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	200004e4 	.word	0x200004e4

08006dd8 <__errno>:
 8006dd8:	4b01      	ldr	r3, [pc, #4]	@ (8006de0 <__errno+0x8>)
 8006dda:	6818      	ldr	r0, [r3, #0]
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	20000018 	.word	0x20000018

08006de4 <__libc_init_array>:
 8006de4:	b570      	push	{r4, r5, r6, lr}
 8006de6:	4d0d      	ldr	r5, [pc, #52]	@ (8006e1c <__libc_init_array+0x38>)
 8006de8:	4c0d      	ldr	r4, [pc, #52]	@ (8006e20 <__libc_init_array+0x3c>)
 8006dea:	1b64      	subs	r4, r4, r5
 8006dec:	10a4      	asrs	r4, r4, #2
 8006dee:	2600      	movs	r6, #0
 8006df0:	42a6      	cmp	r6, r4
 8006df2:	d109      	bne.n	8006e08 <__libc_init_array+0x24>
 8006df4:	4d0b      	ldr	r5, [pc, #44]	@ (8006e24 <__libc_init_array+0x40>)
 8006df6:	4c0c      	ldr	r4, [pc, #48]	@ (8006e28 <__libc_init_array+0x44>)
 8006df8:	f000 fd24 	bl	8007844 <_init>
 8006dfc:	1b64      	subs	r4, r4, r5
 8006dfe:	10a4      	asrs	r4, r4, #2
 8006e00:	2600      	movs	r6, #0
 8006e02:	42a6      	cmp	r6, r4
 8006e04:	d105      	bne.n	8006e12 <__libc_init_array+0x2e>
 8006e06:	bd70      	pop	{r4, r5, r6, pc}
 8006e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e0c:	4798      	blx	r3
 8006e0e:	3601      	adds	r6, #1
 8006e10:	e7ee      	b.n	8006df0 <__libc_init_array+0xc>
 8006e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e16:	4798      	blx	r3
 8006e18:	3601      	adds	r6, #1
 8006e1a:	e7f2      	b.n	8006e02 <__libc_init_array+0x1e>
 8006e1c:	08007908 	.word	0x08007908
 8006e20:	08007908 	.word	0x08007908
 8006e24:	08007908 	.word	0x08007908
 8006e28:	0800790c 	.word	0x0800790c

08006e2c <__retarget_lock_init_recursive>:
 8006e2c:	4770      	bx	lr

08006e2e <__retarget_lock_acquire_recursive>:
 8006e2e:	4770      	bx	lr

08006e30 <__retarget_lock_release_recursive>:
 8006e30:	4770      	bx	lr
	...

08006e34 <_free_r>:
 8006e34:	b538      	push	{r3, r4, r5, lr}
 8006e36:	4605      	mov	r5, r0
 8006e38:	2900      	cmp	r1, #0
 8006e3a:	d041      	beq.n	8006ec0 <_free_r+0x8c>
 8006e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e40:	1f0c      	subs	r4, r1, #4
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	bfb8      	it	lt
 8006e46:	18e4      	addlt	r4, r4, r3
 8006e48:	f000 f8e0 	bl	800700c <__malloc_lock>
 8006e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ec4 <_free_r+0x90>)
 8006e4e:	6813      	ldr	r3, [r2, #0]
 8006e50:	b933      	cbnz	r3, 8006e60 <_free_r+0x2c>
 8006e52:	6063      	str	r3, [r4, #4]
 8006e54:	6014      	str	r4, [r2, #0]
 8006e56:	4628      	mov	r0, r5
 8006e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e5c:	f000 b8dc 	b.w	8007018 <__malloc_unlock>
 8006e60:	42a3      	cmp	r3, r4
 8006e62:	d908      	bls.n	8006e76 <_free_r+0x42>
 8006e64:	6820      	ldr	r0, [r4, #0]
 8006e66:	1821      	adds	r1, r4, r0
 8006e68:	428b      	cmp	r3, r1
 8006e6a:	bf01      	itttt	eq
 8006e6c:	6819      	ldreq	r1, [r3, #0]
 8006e6e:	685b      	ldreq	r3, [r3, #4]
 8006e70:	1809      	addeq	r1, r1, r0
 8006e72:	6021      	streq	r1, [r4, #0]
 8006e74:	e7ed      	b.n	8006e52 <_free_r+0x1e>
 8006e76:	461a      	mov	r2, r3
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	b10b      	cbz	r3, 8006e80 <_free_r+0x4c>
 8006e7c:	42a3      	cmp	r3, r4
 8006e7e:	d9fa      	bls.n	8006e76 <_free_r+0x42>
 8006e80:	6811      	ldr	r1, [r2, #0]
 8006e82:	1850      	adds	r0, r2, r1
 8006e84:	42a0      	cmp	r0, r4
 8006e86:	d10b      	bne.n	8006ea0 <_free_r+0x6c>
 8006e88:	6820      	ldr	r0, [r4, #0]
 8006e8a:	4401      	add	r1, r0
 8006e8c:	1850      	adds	r0, r2, r1
 8006e8e:	4283      	cmp	r3, r0
 8006e90:	6011      	str	r1, [r2, #0]
 8006e92:	d1e0      	bne.n	8006e56 <_free_r+0x22>
 8006e94:	6818      	ldr	r0, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	6053      	str	r3, [r2, #4]
 8006e9a:	4408      	add	r0, r1
 8006e9c:	6010      	str	r0, [r2, #0]
 8006e9e:	e7da      	b.n	8006e56 <_free_r+0x22>
 8006ea0:	d902      	bls.n	8006ea8 <_free_r+0x74>
 8006ea2:	230c      	movs	r3, #12
 8006ea4:	602b      	str	r3, [r5, #0]
 8006ea6:	e7d6      	b.n	8006e56 <_free_r+0x22>
 8006ea8:	6820      	ldr	r0, [r4, #0]
 8006eaa:	1821      	adds	r1, r4, r0
 8006eac:	428b      	cmp	r3, r1
 8006eae:	bf04      	itt	eq
 8006eb0:	6819      	ldreq	r1, [r3, #0]
 8006eb2:	685b      	ldreq	r3, [r3, #4]
 8006eb4:	6063      	str	r3, [r4, #4]
 8006eb6:	bf04      	itt	eq
 8006eb8:	1809      	addeq	r1, r1, r0
 8006eba:	6021      	streq	r1, [r4, #0]
 8006ebc:	6054      	str	r4, [r2, #4]
 8006ebe:	e7ca      	b.n	8006e56 <_free_r+0x22>
 8006ec0:	bd38      	pop	{r3, r4, r5, pc}
 8006ec2:	bf00      	nop
 8006ec4:	200004f0 	.word	0x200004f0

08006ec8 <sbrk_aligned>:
 8006ec8:	b570      	push	{r4, r5, r6, lr}
 8006eca:	4e0f      	ldr	r6, [pc, #60]	@ (8006f08 <sbrk_aligned+0x40>)
 8006ecc:	460c      	mov	r4, r1
 8006ece:	6831      	ldr	r1, [r6, #0]
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	b911      	cbnz	r1, 8006eda <sbrk_aligned+0x12>
 8006ed4:	f000 fca6 	bl	8007824 <_sbrk_r>
 8006ed8:	6030      	str	r0, [r6, #0]
 8006eda:	4621      	mov	r1, r4
 8006edc:	4628      	mov	r0, r5
 8006ede:	f000 fca1 	bl	8007824 <_sbrk_r>
 8006ee2:	1c43      	adds	r3, r0, #1
 8006ee4:	d103      	bne.n	8006eee <sbrk_aligned+0x26>
 8006ee6:	f04f 34ff 	mov.w	r4, #4294967295
 8006eea:	4620      	mov	r0, r4
 8006eec:	bd70      	pop	{r4, r5, r6, pc}
 8006eee:	1cc4      	adds	r4, r0, #3
 8006ef0:	f024 0403 	bic.w	r4, r4, #3
 8006ef4:	42a0      	cmp	r0, r4
 8006ef6:	d0f8      	beq.n	8006eea <sbrk_aligned+0x22>
 8006ef8:	1a21      	subs	r1, r4, r0
 8006efa:	4628      	mov	r0, r5
 8006efc:	f000 fc92 	bl	8007824 <_sbrk_r>
 8006f00:	3001      	adds	r0, #1
 8006f02:	d1f2      	bne.n	8006eea <sbrk_aligned+0x22>
 8006f04:	e7ef      	b.n	8006ee6 <sbrk_aligned+0x1e>
 8006f06:	bf00      	nop
 8006f08:	200004ec 	.word	0x200004ec

08006f0c <_malloc_r>:
 8006f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f10:	1ccd      	adds	r5, r1, #3
 8006f12:	f025 0503 	bic.w	r5, r5, #3
 8006f16:	3508      	adds	r5, #8
 8006f18:	2d0c      	cmp	r5, #12
 8006f1a:	bf38      	it	cc
 8006f1c:	250c      	movcc	r5, #12
 8006f1e:	2d00      	cmp	r5, #0
 8006f20:	4606      	mov	r6, r0
 8006f22:	db01      	blt.n	8006f28 <_malloc_r+0x1c>
 8006f24:	42a9      	cmp	r1, r5
 8006f26:	d904      	bls.n	8006f32 <_malloc_r+0x26>
 8006f28:	230c      	movs	r3, #12
 8006f2a:	6033      	str	r3, [r6, #0]
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007008 <_malloc_r+0xfc>
 8006f36:	f000 f869 	bl	800700c <__malloc_lock>
 8006f3a:	f8d8 3000 	ldr.w	r3, [r8]
 8006f3e:	461c      	mov	r4, r3
 8006f40:	bb44      	cbnz	r4, 8006f94 <_malloc_r+0x88>
 8006f42:	4629      	mov	r1, r5
 8006f44:	4630      	mov	r0, r6
 8006f46:	f7ff ffbf 	bl	8006ec8 <sbrk_aligned>
 8006f4a:	1c43      	adds	r3, r0, #1
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	d158      	bne.n	8007002 <_malloc_r+0xf6>
 8006f50:	f8d8 4000 	ldr.w	r4, [r8]
 8006f54:	4627      	mov	r7, r4
 8006f56:	2f00      	cmp	r7, #0
 8006f58:	d143      	bne.n	8006fe2 <_malloc_r+0xd6>
 8006f5a:	2c00      	cmp	r4, #0
 8006f5c:	d04b      	beq.n	8006ff6 <_malloc_r+0xea>
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	4639      	mov	r1, r7
 8006f62:	4630      	mov	r0, r6
 8006f64:	eb04 0903 	add.w	r9, r4, r3
 8006f68:	f000 fc5c 	bl	8007824 <_sbrk_r>
 8006f6c:	4581      	cmp	r9, r0
 8006f6e:	d142      	bne.n	8006ff6 <_malloc_r+0xea>
 8006f70:	6821      	ldr	r1, [r4, #0]
 8006f72:	1a6d      	subs	r5, r5, r1
 8006f74:	4629      	mov	r1, r5
 8006f76:	4630      	mov	r0, r6
 8006f78:	f7ff ffa6 	bl	8006ec8 <sbrk_aligned>
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d03a      	beq.n	8006ff6 <_malloc_r+0xea>
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	442b      	add	r3, r5
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	f8d8 3000 	ldr.w	r3, [r8]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	bb62      	cbnz	r2, 8006fe8 <_malloc_r+0xdc>
 8006f8e:	f8c8 7000 	str.w	r7, [r8]
 8006f92:	e00f      	b.n	8006fb4 <_malloc_r+0xa8>
 8006f94:	6822      	ldr	r2, [r4, #0]
 8006f96:	1b52      	subs	r2, r2, r5
 8006f98:	d420      	bmi.n	8006fdc <_malloc_r+0xd0>
 8006f9a:	2a0b      	cmp	r2, #11
 8006f9c:	d917      	bls.n	8006fce <_malloc_r+0xc2>
 8006f9e:	1961      	adds	r1, r4, r5
 8006fa0:	42a3      	cmp	r3, r4
 8006fa2:	6025      	str	r5, [r4, #0]
 8006fa4:	bf18      	it	ne
 8006fa6:	6059      	strne	r1, [r3, #4]
 8006fa8:	6863      	ldr	r3, [r4, #4]
 8006faa:	bf08      	it	eq
 8006fac:	f8c8 1000 	streq.w	r1, [r8]
 8006fb0:	5162      	str	r2, [r4, r5]
 8006fb2:	604b      	str	r3, [r1, #4]
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f000 f82f 	bl	8007018 <__malloc_unlock>
 8006fba:	f104 000b 	add.w	r0, r4, #11
 8006fbe:	1d23      	adds	r3, r4, #4
 8006fc0:	f020 0007 	bic.w	r0, r0, #7
 8006fc4:	1ac2      	subs	r2, r0, r3
 8006fc6:	bf1c      	itt	ne
 8006fc8:	1a1b      	subne	r3, r3, r0
 8006fca:	50a3      	strne	r3, [r4, r2]
 8006fcc:	e7af      	b.n	8006f2e <_malloc_r+0x22>
 8006fce:	6862      	ldr	r2, [r4, #4]
 8006fd0:	42a3      	cmp	r3, r4
 8006fd2:	bf0c      	ite	eq
 8006fd4:	f8c8 2000 	streq.w	r2, [r8]
 8006fd8:	605a      	strne	r2, [r3, #4]
 8006fda:	e7eb      	b.n	8006fb4 <_malloc_r+0xa8>
 8006fdc:	4623      	mov	r3, r4
 8006fde:	6864      	ldr	r4, [r4, #4]
 8006fe0:	e7ae      	b.n	8006f40 <_malloc_r+0x34>
 8006fe2:	463c      	mov	r4, r7
 8006fe4:	687f      	ldr	r7, [r7, #4]
 8006fe6:	e7b6      	b.n	8006f56 <_malloc_r+0x4a>
 8006fe8:	461a      	mov	r2, r3
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	42a3      	cmp	r3, r4
 8006fee:	d1fb      	bne.n	8006fe8 <_malloc_r+0xdc>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	6053      	str	r3, [r2, #4]
 8006ff4:	e7de      	b.n	8006fb4 <_malloc_r+0xa8>
 8006ff6:	230c      	movs	r3, #12
 8006ff8:	6033      	str	r3, [r6, #0]
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f000 f80c 	bl	8007018 <__malloc_unlock>
 8007000:	e794      	b.n	8006f2c <_malloc_r+0x20>
 8007002:	6005      	str	r5, [r0, #0]
 8007004:	e7d6      	b.n	8006fb4 <_malloc_r+0xa8>
 8007006:	bf00      	nop
 8007008:	200004f0 	.word	0x200004f0

0800700c <__malloc_lock>:
 800700c:	4801      	ldr	r0, [pc, #4]	@ (8007014 <__malloc_lock+0x8>)
 800700e:	f7ff bf0e 	b.w	8006e2e <__retarget_lock_acquire_recursive>
 8007012:	bf00      	nop
 8007014:	200004e8 	.word	0x200004e8

08007018 <__malloc_unlock>:
 8007018:	4801      	ldr	r0, [pc, #4]	@ (8007020 <__malloc_unlock+0x8>)
 800701a:	f7ff bf09 	b.w	8006e30 <__retarget_lock_release_recursive>
 800701e:	bf00      	nop
 8007020:	200004e8 	.word	0x200004e8

08007024 <__sfputc_r>:
 8007024:	6893      	ldr	r3, [r2, #8]
 8007026:	3b01      	subs	r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	b410      	push	{r4}
 800702c:	6093      	str	r3, [r2, #8]
 800702e:	da08      	bge.n	8007042 <__sfputc_r+0x1e>
 8007030:	6994      	ldr	r4, [r2, #24]
 8007032:	42a3      	cmp	r3, r4
 8007034:	db01      	blt.n	800703a <__sfputc_r+0x16>
 8007036:	290a      	cmp	r1, #10
 8007038:	d103      	bne.n	8007042 <__sfputc_r+0x1e>
 800703a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800703e:	f7ff bde8 	b.w	8006c12 <__swbuf_r>
 8007042:	6813      	ldr	r3, [r2, #0]
 8007044:	1c58      	adds	r0, r3, #1
 8007046:	6010      	str	r0, [r2, #0]
 8007048:	7019      	strb	r1, [r3, #0]
 800704a:	4608      	mov	r0, r1
 800704c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007050:	4770      	bx	lr

08007052 <__sfputs_r>:
 8007052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007054:	4606      	mov	r6, r0
 8007056:	460f      	mov	r7, r1
 8007058:	4614      	mov	r4, r2
 800705a:	18d5      	adds	r5, r2, r3
 800705c:	42ac      	cmp	r4, r5
 800705e:	d101      	bne.n	8007064 <__sfputs_r+0x12>
 8007060:	2000      	movs	r0, #0
 8007062:	e007      	b.n	8007074 <__sfputs_r+0x22>
 8007064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007068:	463a      	mov	r2, r7
 800706a:	4630      	mov	r0, r6
 800706c:	f7ff ffda 	bl	8007024 <__sfputc_r>
 8007070:	1c43      	adds	r3, r0, #1
 8007072:	d1f3      	bne.n	800705c <__sfputs_r+0xa>
 8007074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007078 <_vfiprintf_r>:
 8007078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707c:	460d      	mov	r5, r1
 800707e:	b09d      	sub	sp, #116	@ 0x74
 8007080:	4614      	mov	r4, r2
 8007082:	4698      	mov	r8, r3
 8007084:	4606      	mov	r6, r0
 8007086:	b118      	cbz	r0, 8007090 <_vfiprintf_r+0x18>
 8007088:	6a03      	ldr	r3, [r0, #32]
 800708a:	b90b      	cbnz	r3, 8007090 <_vfiprintf_r+0x18>
 800708c:	f7ff fcd8 	bl	8006a40 <__sinit>
 8007090:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007092:	07d9      	lsls	r1, r3, #31
 8007094:	d405      	bmi.n	80070a2 <_vfiprintf_r+0x2a>
 8007096:	89ab      	ldrh	r3, [r5, #12]
 8007098:	059a      	lsls	r2, r3, #22
 800709a:	d402      	bmi.n	80070a2 <_vfiprintf_r+0x2a>
 800709c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800709e:	f7ff fec6 	bl	8006e2e <__retarget_lock_acquire_recursive>
 80070a2:	89ab      	ldrh	r3, [r5, #12]
 80070a4:	071b      	lsls	r3, r3, #28
 80070a6:	d501      	bpl.n	80070ac <_vfiprintf_r+0x34>
 80070a8:	692b      	ldr	r3, [r5, #16]
 80070aa:	b99b      	cbnz	r3, 80070d4 <_vfiprintf_r+0x5c>
 80070ac:	4629      	mov	r1, r5
 80070ae:	4630      	mov	r0, r6
 80070b0:	f7ff fdee 	bl	8006c90 <__swsetup_r>
 80070b4:	b170      	cbz	r0, 80070d4 <_vfiprintf_r+0x5c>
 80070b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070b8:	07dc      	lsls	r4, r3, #31
 80070ba:	d504      	bpl.n	80070c6 <_vfiprintf_r+0x4e>
 80070bc:	f04f 30ff 	mov.w	r0, #4294967295
 80070c0:	b01d      	add	sp, #116	@ 0x74
 80070c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c6:	89ab      	ldrh	r3, [r5, #12]
 80070c8:	0598      	lsls	r0, r3, #22
 80070ca:	d4f7      	bmi.n	80070bc <_vfiprintf_r+0x44>
 80070cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070ce:	f7ff feaf 	bl	8006e30 <__retarget_lock_release_recursive>
 80070d2:	e7f3      	b.n	80070bc <_vfiprintf_r+0x44>
 80070d4:	2300      	movs	r3, #0
 80070d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80070d8:	2320      	movs	r3, #32
 80070da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80070de:	f8cd 800c 	str.w	r8, [sp, #12]
 80070e2:	2330      	movs	r3, #48	@ 0x30
 80070e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007294 <_vfiprintf_r+0x21c>
 80070e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80070ec:	f04f 0901 	mov.w	r9, #1
 80070f0:	4623      	mov	r3, r4
 80070f2:	469a      	mov	sl, r3
 80070f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070f8:	b10a      	cbz	r2, 80070fe <_vfiprintf_r+0x86>
 80070fa:	2a25      	cmp	r2, #37	@ 0x25
 80070fc:	d1f9      	bne.n	80070f2 <_vfiprintf_r+0x7a>
 80070fe:	ebba 0b04 	subs.w	fp, sl, r4
 8007102:	d00b      	beq.n	800711c <_vfiprintf_r+0xa4>
 8007104:	465b      	mov	r3, fp
 8007106:	4622      	mov	r2, r4
 8007108:	4629      	mov	r1, r5
 800710a:	4630      	mov	r0, r6
 800710c:	f7ff ffa1 	bl	8007052 <__sfputs_r>
 8007110:	3001      	adds	r0, #1
 8007112:	f000 80a7 	beq.w	8007264 <_vfiprintf_r+0x1ec>
 8007116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007118:	445a      	add	r2, fp
 800711a:	9209      	str	r2, [sp, #36]	@ 0x24
 800711c:	f89a 3000 	ldrb.w	r3, [sl]
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 809f 	beq.w	8007264 <_vfiprintf_r+0x1ec>
 8007126:	2300      	movs	r3, #0
 8007128:	f04f 32ff 	mov.w	r2, #4294967295
 800712c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007130:	f10a 0a01 	add.w	sl, sl, #1
 8007134:	9304      	str	r3, [sp, #16]
 8007136:	9307      	str	r3, [sp, #28]
 8007138:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800713c:	931a      	str	r3, [sp, #104]	@ 0x68
 800713e:	4654      	mov	r4, sl
 8007140:	2205      	movs	r2, #5
 8007142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007146:	4853      	ldr	r0, [pc, #332]	@ (8007294 <_vfiprintf_r+0x21c>)
 8007148:	f7f9 f842 	bl	80001d0 <memchr>
 800714c:	9a04      	ldr	r2, [sp, #16]
 800714e:	b9d8      	cbnz	r0, 8007188 <_vfiprintf_r+0x110>
 8007150:	06d1      	lsls	r1, r2, #27
 8007152:	bf44      	itt	mi
 8007154:	2320      	movmi	r3, #32
 8007156:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800715a:	0713      	lsls	r3, r2, #28
 800715c:	bf44      	itt	mi
 800715e:	232b      	movmi	r3, #43	@ 0x2b
 8007160:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007164:	f89a 3000 	ldrb.w	r3, [sl]
 8007168:	2b2a      	cmp	r3, #42	@ 0x2a
 800716a:	d015      	beq.n	8007198 <_vfiprintf_r+0x120>
 800716c:	9a07      	ldr	r2, [sp, #28]
 800716e:	4654      	mov	r4, sl
 8007170:	2000      	movs	r0, #0
 8007172:	f04f 0c0a 	mov.w	ip, #10
 8007176:	4621      	mov	r1, r4
 8007178:	f811 3b01 	ldrb.w	r3, [r1], #1
 800717c:	3b30      	subs	r3, #48	@ 0x30
 800717e:	2b09      	cmp	r3, #9
 8007180:	d94b      	bls.n	800721a <_vfiprintf_r+0x1a2>
 8007182:	b1b0      	cbz	r0, 80071b2 <_vfiprintf_r+0x13a>
 8007184:	9207      	str	r2, [sp, #28]
 8007186:	e014      	b.n	80071b2 <_vfiprintf_r+0x13a>
 8007188:	eba0 0308 	sub.w	r3, r0, r8
 800718c:	fa09 f303 	lsl.w	r3, r9, r3
 8007190:	4313      	orrs	r3, r2
 8007192:	9304      	str	r3, [sp, #16]
 8007194:	46a2      	mov	sl, r4
 8007196:	e7d2      	b.n	800713e <_vfiprintf_r+0xc6>
 8007198:	9b03      	ldr	r3, [sp, #12]
 800719a:	1d19      	adds	r1, r3, #4
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	9103      	str	r1, [sp, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	bfbb      	ittet	lt
 80071a4:	425b      	neglt	r3, r3
 80071a6:	f042 0202 	orrlt.w	r2, r2, #2
 80071aa:	9307      	strge	r3, [sp, #28]
 80071ac:	9307      	strlt	r3, [sp, #28]
 80071ae:	bfb8      	it	lt
 80071b0:	9204      	strlt	r2, [sp, #16]
 80071b2:	7823      	ldrb	r3, [r4, #0]
 80071b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80071b6:	d10a      	bne.n	80071ce <_vfiprintf_r+0x156>
 80071b8:	7863      	ldrb	r3, [r4, #1]
 80071ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80071bc:	d132      	bne.n	8007224 <_vfiprintf_r+0x1ac>
 80071be:	9b03      	ldr	r3, [sp, #12]
 80071c0:	1d1a      	adds	r2, r3, #4
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	9203      	str	r2, [sp, #12]
 80071c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80071ca:	3402      	adds	r4, #2
 80071cc:	9305      	str	r3, [sp, #20]
 80071ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80072a4 <_vfiprintf_r+0x22c>
 80071d2:	7821      	ldrb	r1, [r4, #0]
 80071d4:	2203      	movs	r2, #3
 80071d6:	4650      	mov	r0, sl
 80071d8:	f7f8 fffa 	bl	80001d0 <memchr>
 80071dc:	b138      	cbz	r0, 80071ee <_vfiprintf_r+0x176>
 80071de:	9b04      	ldr	r3, [sp, #16]
 80071e0:	eba0 000a 	sub.w	r0, r0, sl
 80071e4:	2240      	movs	r2, #64	@ 0x40
 80071e6:	4082      	lsls	r2, r0
 80071e8:	4313      	orrs	r3, r2
 80071ea:	3401      	adds	r4, #1
 80071ec:	9304      	str	r3, [sp, #16]
 80071ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f2:	4829      	ldr	r0, [pc, #164]	@ (8007298 <_vfiprintf_r+0x220>)
 80071f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80071f8:	2206      	movs	r2, #6
 80071fa:	f7f8 ffe9 	bl	80001d0 <memchr>
 80071fe:	2800      	cmp	r0, #0
 8007200:	d03f      	beq.n	8007282 <_vfiprintf_r+0x20a>
 8007202:	4b26      	ldr	r3, [pc, #152]	@ (800729c <_vfiprintf_r+0x224>)
 8007204:	bb1b      	cbnz	r3, 800724e <_vfiprintf_r+0x1d6>
 8007206:	9b03      	ldr	r3, [sp, #12]
 8007208:	3307      	adds	r3, #7
 800720a:	f023 0307 	bic.w	r3, r3, #7
 800720e:	3308      	adds	r3, #8
 8007210:	9303      	str	r3, [sp, #12]
 8007212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007214:	443b      	add	r3, r7
 8007216:	9309      	str	r3, [sp, #36]	@ 0x24
 8007218:	e76a      	b.n	80070f0 <_vfiprintf_r+0x78>
 800721a:	fb0c 3202 	mla	r2, ip, r2, r3
 800721e:	460c      	mov	r4, r1
 8007220:	2001      	movs	r0, #1
 8007222:	e7a8      	b.n	8007176 <_vfiprintf_r+0xfe>
 8007224:	2300      	movs	r3, #0
 8007226:	3401      	adds	r4, #1
 8007228:	9305      	str	r3, [sp, #20]
 800722a:	4619      	mov	r1, r3
 800722c:	f04f 0c0a 	mov.w	ip, #10
 8007230:	4620      	mov	r0, r4
 8007232:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007236:	3a30      	subs	r2, #48	@ 0x30
 8007238:	2a09      	cmp	r2, #9
 800723a:	d903      	bls.n	8007244 <_vfiprintf_r+0x1cc>
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0c6      	beq.n	80071ce <_vfiprintf_r+0x156>
 8007240:	9105      	str	r1, [sp, #20]
 8007242:	e7c4      	b.n	80071ce <_vfiprintf_r+0x156>
 8007244:	fb0c 2101 	mla	r1, ip, r1, r2
 8007248:	4604      	mov	r4, r0
 800724a:	2301      	movs	r3, #1
 800724c:	e7f0      	b.n	8007230 <_vfiprintf_r+0x1b8>
 800724e:	ab03      	add	r3, sp, #12
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	462a      	mov	r2, r5
 8007254:	4b12      	ldr	r3, [pc, #72]	@ (80072a0 <_vfiprintf_r+0x228>)
 8007256:	a904      	add	r1, sp, #16
 8007258:	4630      	mov	r0, r6
 800725a:	f3af 8000 	nop.w
 800725e:	4607      	mov	r7, r0
 8007260:	1c78      	adds	r0, r7, #1
 8007262:	d1d6      	bne.n	8007212 <_vfiprintf_r+0x19a>
 8007264:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007266:	07d9      	lsls	r1, r3, #31
 8007268:	d405      	bmi.n	8007276 <_vfiprintf_r+0x1fe>
 800726a:	89ab      	ldrh	r3, [r5, #12]
 800726c:	059a      	lsls	r2, r3, #22
 800726e:	d402      	bmi.n	8007276 <_vfiprintf_r+0x1fe>
 8007270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007272:	f7ff fddd 	bl	8006e30 <__retarget_lock_release_recursive>
 8007276:	89ab      	ldrh	r3, [r5, #12]
 8007278:	065b      	lsls	r3, r3, #25
 800727a:	f53f af1f 	bmi.w	80070bc <_vfiprintf_r+0x44>
 800727e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007280:	e71e      	b.n	80070c0 <_vfiprintf_r+0x48>
 8007282:	ab03      	add	r3, sp, #12
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	462a      	mov	r2, r5
 8007288:	4b05      	ldr	r3, [pc, #20]	@ (80072a0 <_vfiprintf_r+0x228>)
 800728a:	a904      	add	r1, sp, #16
 800728c:	4630      	mov	r0, r6
 800728e:	f000 f879 	bl	8007384 <_printf_i>
 8007292:	e7e4      	b.n	800725e <_vfiprintf_r+0x1e6>
 8007294:	080078cc 	.word	0x080078cc
 8007298:	080078d6 	.word	0x080078d6
 800729c:	00000000 	.word	0x00000000
 80072a0:	08007053 	.word	0x08007053
 80072a4:	080078d2 	.word	0x080078d2

080072a8 <_printf_common>:
 80072a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ac:	4616      	mov	r6, r2
 80072ae:	4698      	mov	r8, r3
 80072b0:	688a      	ldr	r2, [r1, #8]
 80072b2:	690b      	ldr	r3, [r1, #16]
 80072b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80072b8:	4293      	cmp	r3, r2
 80072ba:	bfb8      	it	lt
 80072bc:	4613      	movlt	r3, r2
 80072be:	6033      	str	r3, [r6, #0]
 80072c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80072c4:	4607      	mov	r7, r0
 80072c6:	460c      	mov	r4, r1
 80072c8:	b10a      	cbz	r2, 80072ce <_printf_common+0x26>
 80072ca:	3301      	adds	r3, #1
 80072cc:	6033      	str	r3, [r6, #0]
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	0699      	lsls	r1, r3, #26
 80072d2:	bf42      	ittt	mi
 80072d4:	6833      	ldrmi	r3, [r6, #0]
 80072d6:	3302      	addmi	r3, #2
 80072d8:	6033      	strmi	r3, [r6, #0]
 80072da:	6825      	ldr	r5, [r4, #0]
 80072dc:	f015 0506 	ands.w	r5, r5, #6
 80072e0:	d106      	bne.n	80072f0 <_printf_common+0x48>
 80072e2:	f104 0a19 	add.w	sl, r4, #25
 80072e6:	68e3      	ldr	r3, [r4, #12]
 80072e8:	6832      	ldr	r2, [r6, #0]
 80072ea:	1a9b      	subs	r3, r3, r2
 80072ec:	42ab      	cmp	r3, r5
 80072ee:	dc26      	bgt.n	800733e <_printf_common+0x96>
 80072f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80072f4:	6822      	ldr	r2, [r4, #0]
 80072f6:	3b00      	subs	r3, #0
 80072f8:	bf18      	it	ne
 80072fa:	2301      	movne	r3, #1
 80072fc:	0692      	lsls	r2, r2, #26
 80072fe:	d42b      	bmi.n	8007358 <_printf_common+0xb0>
 8007300:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007304:	4641      	mov	r1, r8
 8007306:	4638      	mov	r0, r7
 8007308:	47c8      	blx	r9
 800730a:	3001      	adds	r0, #1
 800730c:	d01e      	beq.n	800734c <_printf_common+0xa4>
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	6922      	ldr	r2, [r4, #16]
 8007312:	f003 0306 	and.w	r3, r3, #6
 8007316:	2b04      	cmp	r3, #4
 8007318:	bf02      	ittt	eq
 800731a:	68e5      	ldreq	r5, [r4, #12]
 800731c:	6833      	ldreq	r3, [r6, #0]
 800731e:	1aed      	subeq	r5, r5, r3
 8007320:	68a3      	ldr	r3, [r4, #8]
 8007322:	bf0c      	ite	eq
 8007324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007328:	2500      	movne	r5, #0
 800732a:	4293      	cmp	r3, r2
 800732c:	bfc4      	itt	gt
 800732e:	1a9b      	subgt	r3, r3, r2
 8007330:	18ed      	addgt	r5, r5, r3
 8007332:	2600      	movs	r6, #0
 8007334:	341a      	adds	r4, #26
 8007336:	42b5      	cmp	r5, r6
 8007338:	d11a      	bne.n	8007370 <_printf_common+0xc8>
 800733a:	2000      	movs	r0, #0
 800733c:	e008      	b.n	8007350 <_printf_common+0xa8>
 800733e:	2301      	movs	r3, #1
 8007340:	4652      	mov	r2, sl
 8007342:	4641      	mov	r1, r8
 8007344:	4638      	mov	r0, r7
 8007346:	47c8      	blx	r9
 8007348:	3001      	adds	r0, #1
 800734a:	d103      	bne.n	8007354 <_printf_common+0xac>
 800734c:	f04f 30ff 	mov.w	r0, #4294967295
 8007350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007354:	3501      	adds	r5, #1
 8007356:	e7c6      	b.n	80072e6 <_printf_common+0x3e>
 8007358:	18e1      	adds	r1, r4, r3
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	2030      	movs	r0, #48	@ 0x30
 800735e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007362:	4422      	add	r2, r4
 8007364:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007368:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800736c:	3302      	adds	r3, #2
 800736e:	e7c7      	b.n	8007300 <_printf_common+0x58>
 8007370:	2301      	movs	r3, #1
 8007372:	4622      	mov	r2, r4
 8007374:	4641      	mov	r1, r8
 8007376:	4638      	mov	r0, r7
 8007378:	47c8      	blx	r9
 800737a:	3001      	adds	r0, #1
 800737c:	d0e6      	beq.n	800734c <_printf_common+0xa4>
 800737e:	3601      	adds	r6, #1
 8007380:	e7d9      	b.n	8007336 <_printf_common+0x8e>
	...

08007384 <_printf_i>:
 8007384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007388:	7e0f      	ldrb	r7, [r1, #24]
 800738a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800738c:	2f78      	cmp	r7, #120	@ 0x78
 800738e:	4691      	mov	r9, r2
 8007390:	4680      	mov	r8, r0
 8007392:	460c      	mov	r4, r1
 8007394:	469a      	mov	sl, r3
 8007396:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800739a:	d807      	bhi.n	80073ac <_printf_i+0x28>
 800739c:	2f62      	cmp	r7, #98	@ 0x62
 800739e:	d80a      	bhi.n	80073b6 <_printf_i+0x32>
 80073a0:	2f00      	cmp	r7, #0
 80073a2:	f000 80d2 	beq.w	800754a <_printf_i+0x1c6>
 80073a6:	2f58      	cmp	r7, #88	@ 0x58
 80073a8:	f000 80b9 	beq.w	800751e <_printf_i+0x19a>
 80073ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80073b4:	e03a      	b.n	800742c <_printf_i+0xa8>
 80073b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80073ba:	2b15      	cmp	r3, #21
 80073bc:	d8f6      	bhi.n	80073ac <_printf_i+0x28>
 80073be:	a101      	add	r1, pc, #4	@ (adr r1, 80073c4 <_printf_i+0x40>)
 80073c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073c4:	0800741d 	.word	0x0800741d
 80073c8:	08007431 	.word	0x08007431
 80073cc:	080073ad 	.word	0x080073ad
 80073d0:	080073ad 	.word	0x080073ad
 80073d4:	080073ad 	.word	0x080073ad
 80073d8:	080073ad 	.word	0x080073ad
 80073dc:	08007431 	.word	0x08007431
 80073e0:	080073ad 	.word	0x080073ad
 80073e4:	080073ad 	.word	0x080073ad
 80073e8:	080073ad 	.word	0x080073ad
 80073ec:	080073ad 	.word	0x080073ad
 80073f0:	08007531 	.word	0x08007531
 80073f4:	0800745b 	.word	0x0800745b
 80073f8:	080074eb 	.word	0x080074eb
 80073fc:	080073ad 	.word	0x080073ad
 8007400:	080073ad 	.word	0x080073ad
 8007404:	08007553 	.word	0x08007553
 8007408:	080073ad 	.word	0x080073ad
 800740c:	0800745b 	.word	0x0800745b
 8007410:	080073ad 	.word	0x080073ad
 8007414:	080073ad 	.word	0x080073ad
 8007418:	080074f3 	.word	0x080074f3
 800741c:	6833      	ldr	r3, [r6, #0]
 800741e:	1d1a      	adds	r2, r3, #4
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6032      	str	r2, [r6, #0]
 8007424:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007428:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800742c:	2301      	movs	r3, #1
 800742e:	e09d      	b.n	800756c <_printf_i+0x1e8>
 8007430:	6833      	ldr	r3, [r6, #0]
 8007432:	6820      	ldr	r0, [r4, #0]
 8007434:	1d19      	adds	r1, r3, #4
 8007436:	6031      	str	r1, [r6, #0]
 8007438:	0606      	lsls	r6, r0, #24
 800743a:	d501      	bpl.n	8007440 <_printf_i+0xbc>
 800743c:	681d      	ldr	r5, [r3, #0]
 800743e:	e003      	b.n	8007448 <_printf_i+0xc4>
 8007440:	0645      	lsls	r5, r0, #25
 8007442:	d5fb      	bpl.n	800743c <_printf_i+0xb8>
 8007444:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007448:	2d00      	cmp	r5, #0
 800744a:	da03      	bge.n	8007454 <_printf_i+0xd0>
 800744c:	232d      	movs	r3, #45	@ 0x2d
 800744e:	426d      	negs	r5, r5
 8007450:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007454:	4859      	ldr	r0, [pc, #356]	@ (80075bc <_printf_i+0x238>)
 8007456:	230a      	movs	r3, #10
 8007458:	e011      	b.n	800747e <_printf_i+0xfa>
 800745a:	6821      	ldr	r1, [r4, #0]
 800745c:	6833      	ldr	r3, [r6, #0]
 800745e:	0608      	lsls	r0, r1, #24
 8007460:	f853 5b04 	ldr.w	r5, [r3], #4
 8007464:	d402      	bmi.n	800746c <_printf_i+0xe8>
 8007466:	0649      	lsls	r1, r1, #25
 8007468:	bf48      	it	mi
 800746a:	b2ad      	uxthmi	r5, r5
 800746c:	2f6f      	cmp	r7, #111	@ 0x6f
 800746e:	4853      	ldr	r0, [pc, #332]	@ (80075bc <_printf_i+0x238>)
 8007470:	6033      	str	r3, [r6, #0]
 8007472:	bf14      	ite	ne
 8007474:	230a      	movne	r3, #10
 8007476:	2308      	moveq	r3, #8
 8007478:	2100      	movs	r1, #0
 800747a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800747e:	6866      	ldr	r6, [r4, #4]
 8007480:	60a6      	str	r6, [r4, #8]
 8007482:	2e00      	cmp	r6, #0
 8007484:	bfa2      	ittt	ge
 8007486:	6821      	ldrge	r1, [r4, #0]
 8007488:	f021 0104 	bicge.w	r1, r1, #4
 800748c:	6021      	strge	r1, [r4, #0]
 800748e:	b90d      	cbnz	r5, 8007494 <_printf_i+0x110>
 8007490:	2e00      	cmp	r6, #0
 8007492:	d04b      	beq.n	800752c <_printf_i+0x1a8>
 8007494:	4616      	mov	r6, r2
 8007496:	fbb5 f1f3 	udiv	r1, r5, r3
 800749a:	fb03 5711 	mls	r7, r3, r1, r5
 800749e:	5dc7      	ldrb	r7, [r0, r7]
 80074a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074a4:	462f      	mov	r7, r5
 80074a6:	42bb      	cmp	r3, r7
 80074a8:	460d      	mov	r5, r1
 80074aa:	d9f4      	bls.n	8007496 <_printf_i+0x112>
 80074ac:	2b08      	cmp	r3, #8
 80074ae:	d10b      	bne.n	80074c8 <_printf_i+0x144>
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	07df      	lsls	r7, r3, #31
 80074b4:	d508      	bpl.n	80074c8 <_printf_i+0x144>
 80074b6:	6923      	ldr	r3, [r4, #16]
 80074b8:	6861      	ldr	r1, [r4, #4]
 80074ba:	4299      	cmp	r1, r3
 80074bc:	bfde      	ittt	le
 80074be:	2330      	movle	r3, #48	@ 0x30
 80074c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80074c8:	1b92      	subs	r2, r2, r6
 80074ca:	6122      	str	r2, [r4, #16]
 80074cc:	f8cd a000 	str.w	sl, [sp]
 80074d0:	464b      	mov	r3, r9
 80074d2:	aa03      	add	r2, sp, #12
 80074d4:	4621      	mov	r1, r4
 80074d6:	4640      	mov	r0, r8
 80074d8:	f7ff fee6 	bl	80072a8 <_printf_common>
 80074dc:	3001      	adds	r0, #1
 80074de:	d14a      	bne.n	8007576 <_printf_i+0x1f2>
 80074e0:	f04f 30ff 	mov.w	r0, #4294967295
 80074e4:	b004      	add	sp, #16
 80074e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	f043 0320 	orr.w	r3, r3, #32
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	4833      	ldr	r0, [pc, #204]	@ (80075c0 <_printf_i+0x23c>)
 80074f4:	2778      	movs	r7, #120	@ 0x78
 80074f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80074fa:	6823      	ldr	r3, [r4, #0]
 80074fc:	6831      	ldr	r1, [r6, #0]
 80074fe:	061f      	lsls	r7, r3, #24
 8007500:	f851 5b04 	ldr.w	r5, [r1], #4
 8007504:	d402      	bmi.n	800750c <_printf_i+0x188>
 8007506:	065f      	lsls	r7, r3, #25
 8007508:	bf48      	it	mi
 800750a:	b2ad      	uxthmi	r5, r5
 800750c:	6031      	str	r1, [r6, #0]
 800750e:	07d9      	lsls	r1, r3, #31
 8007510:	bf44      	itt	mi
 8007512:	f043 0320 	orrmi.w	r3, r3, #32
 8007516:	6023      	strmi	r3, [r4, #0]
 8007518:	b11d      	cbz	r5, 8007522 <_printf_i+0x19e>
 800751a:	2310      	movs	r3, #16
 800751c:	e7ac      	b.n	8007478 <_printf_i+0xf4>
 800751e:	4827      	ldr	r0, [pc, #156]	@ (80075bc <_printf_i+0x238>)
 8007520:	e7e9      	b.n	80074f6 <_printf_i+0x172>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	f023 0320 	bic.w	r3, r3, #32
 8007528:	6023      	str	r3, [r4, #0]
 800752a:	e7f6      	b.n	800751a <_printf_i+0x196>
 800752c:	4616      	mov	r6, r2
 800752e:	e7bd      	b.n	80074ac <_printf_i+0x128>
 8007530:	6833      	ldr	r3, [r6, #0]
 8007532:	6825      	ldr	r5, [r4, #0]
 8007534:	6961      	ldr	r1, [r4, #20]
 8007536:	1d18      	adds	r0, r3, #4
 8007538:	6030      	str	r0, [r6, #0]
 800753a:	062e      	lsls	r6, r5, #24
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	d501      	bpl.n	8007544 <_printf_i+0x1c0>
 8007540:	6019      	str	r1, [r3, #0]
 8007542:	e002      	b.n	800754a <_printf_i+0x1c6>
 8007544:	0668      	lsls	r0, r5, #25
 8007546:	d5fb      	bpl.n	8007540 <_printf_i+0x1bc>
 8007548:	8019      	strh	r1, [r3, #0]
 800754a:	2300      	movs	r3, #0
 800754c:	6123      	str	r3, [r4, #16]
 800754e:	4616      	mov	r6, r2
 8007550:	e7bc      	b.n	80074cc <_printf_i+0x148>
 8007552:	6833      	ldr	r3, [r6, #0]
 8007554:	1d1a      	adds	r2, r3, #4
 8007556:	6032      	str	r2, [r6, #0]
 8007558:	681e      	ldr	r6, [r3, #0]
 800755a:	6862      	ldr	r2, [r4, #4]
 800755c:	2100      	movs	r1, #0
 800755e:	4630      	mov	r0, r6
 8007560:	f7f8 fe36 	bl	80001d0 <memchr>
 8007564:	b108      	cbz	r0, 800756a <_printf_i+0x1e6>
 8007566:	1b80      	subs	r0, r0, r6
 8007568:	6060      	str	r0, [r4, #4]
 800756a:	6863      	ldr	r3, [r4, #4]
 800756c:	6123      	str	r3, [r4, #16]
 800756e:	2300      	movs	r3, #0
 8007570:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007574:	e7aa      	b.n	80074cc <_printf_i+0x148>
 8007576:	6923      	ldr	r3, [r4, #16]
 8007578:	4632      	mov	r2, r6
 800757a:	4649      	mov	r1, r9
 800757c:	4640      	mov	r0, r8
 800757e:	47d0      	blx	sl
 8007580:	3001      	adds	r0, #1
 8007582:	d0ad      	beq.n	80074e0 <_printf_i+0x15c>
 8007584:	6823      	ldr	r3, [r4, #0]
 8007586:	079b      	lsls	r3, r3, #30
 8007588:	d413      	bmi.n	80075b2 <_printf_i+0x22e>
 800758a:	68e0      	ldr	r0, [r4, #12]
 800758c:	9b03      	ldr	r3, [sp, #12]
 800758e:	4298      	cmp	r0, r3
 8007590:	bfb8      	it	lt
 8007592:	4618      	movlt	r0, r3
 8007594:	e7a6      	b.n	80074e4 <_printf_i+0x160>
 8007596:	2301      	movs	r3, #1
 8007598:	4632      	mov	r2, r6
 800759a:	4649      	mov	r1, r9
 800759c:	4640      	mov	r0, r8
 800759e:	47d0      	blx	sl
 80075a0:	3001      	adds	r0, #1
 80075a2:	d09d      	beq.n	80074e0 <_printf_i+0x15c>
 80075a4:	3501      	adds	r5, #1
 80075a6:	68e3      	ldr	r3, [r4, #12]
 80075a8:	9903      	ldr	r1, [sp, #12]
 80075aa:	1a5b      	subs	r3, r3, r1
 80075ac:	42ab      	cmp	r3, r5
 80075ae:	dcf2      	bgt.n	8007596 <_printf_i+0x212>
 80075b0:	e7eb      	b.n	800758a <_printf_i+0x206>
 80075b2:	2500      	movs	r5, #0
 80075b4:	f104 0619 	add.w	r6, r4, #25
 80075b8:	e7f5      	b.n	80075a6 <_printf_i+0x222>
 80075ba:	bf00      	nop
 80075bc:	080078dd 	.word	0x080078dd
 80075c0:	080078ee 	.word	0x080078ee

080075c4 <__sflush_r>:
 80075c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075cc:	0716      	lsls	r6, r2, #28
 80075ce:	4605      	mov	r5, r0
 80075d0:	460c      	mov	r4, r1
 80075d2:	d454      	bmi.n	800767e <__sflush_r+0xba>
 80075d4:	684b      	ldr	r3, [r1, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	dc02      	bgt.n	80075e0 <__sflush_r+0x1c>
 80075da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80075dc:	2b00      	cmp	r3, #0
 80075de:	dd48      	ble.n	8007672 <__sflush_r+0xae>
 80075e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075e2:	2e00      	cmp	r6, #0
 80075e4:	d045      	beq.n	8007672 <__sflush_r+0xae>
 80075e6:	2300      	movs	r3, #0
 80075e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80075ec:	682f      	ldr	r7, [r5, #0]
 80075ee:	6a21      	ldr	r1, [r4, #32]
 80075f0:	602b      	str	r3, [r5, #0]
 80075f2:	d030      	beq.n	8007656 <__sflush_r+0x92>
 80075f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	0759      	lsls	r1, r3, #29
 80075fa:	d505      	bpl.n	8007608 <__sflush_r+0x44>
 80075fc:	6863      	ldr	r3, [r4, #4]
 80075fe:	1ad2      	subs	r2, r2, r3
 8007600:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007602:	b10b      	cbz	r3, 8007608 <__sflush_r+0x44>
 8007604:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007606:	1ad2      	subs	r2, r2, r3
 8007608:	2300      	movs	r3, #0
 800760a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800760c:	6a21      	ldr	r1, [r4, #32]
 800760e:	4628      	mov	r0, r5
 8007610:	47b0      	blx	r6
 8007612:	1c43      	adds	r3, r0, #1
 8007614:	89a3      	ldrh	r3, [r4, #12]
 8007616:	d106      	bne.n	8007626 <__sflush_r+0x62>
 8007618:	6829      	ldr	r1, [r5, #0]
 800761a:	291d      	cmp	r1, #29
 800761c:	d82b      	bhi.n	8007676 <__sflush_r+0xb2>
 800761e:	4a2a      	ldr	r2, [pc, #168]	@ (80076c8 <__sflush_r+0x104>)
 8007620:	410a      	asrs	r2, r1
 8007622:	07d6      	lsls	r6, r2, #31
 8007624:	d427      	bmi.n	8007676 <__sflush_r+0xb2>
 8007626:	2200      	movs	r2, #0
 8007628:	6062      	str	r2, [r4, #4]
 800762a:	04d9      	lsls	r1, r3, #19
 800762c:	6922      	ldr	r2, [r4, #16]
 800762e:	6022      	str	r2, [r4, #0]
 8007630:	d504      	bpl.n	800763c <__sflush_r+0x78>
 8007632:	1c42      	adds	r2, r0, #1
 8007634:	d101      	bne.n	800763a <__sflush_r+0x76>
 8007636:	682b      	ldr	r3, [r5, #0]
 8007638:	b903      	cbnz	r3, 800763c <__sflush_r+0x78>
 800763a:	6560      	str	r0, [r4, #84]	@ 0x54
 800763c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800763e:	602f      	str	r7, [r5, #0]
 8007640:	b1b9      	cbz	r1, 8007672 <__sflush_r+0xae>
 8007642:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007646:	4299      	cmp	r1, r3
 8007648:	d002      	beq.n	8007650 <__sflush_r+0x8c>
 800764a:	4628      	mov	r0, r5
 800764c:	f7ff fbf2 	bl	8006e34 <_free_r>
 8007650:	2300      	movs	r3, #0
 8007652:	6363      	str	r3, [r4, #52]	@ 0x34
 8007654:	e00d      	b.n	8007672 <__sflush_r+0xae>
 8007656:	2301      	movs	r3, #1
 8007658:	4628      	mov	r0, r5
 800765a:	47b0      	blx	r6
 800765c:	4602      	mov	r2, r0
 800765e:	1c50      	adds	r0, r2, #1
 8007660:	d1c9      	bne.n	80075f6 <__sflush_r+0x32>
 8007662:	682b      	ldr	r3, [r5, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d0c6      	beq.n	80075f6 <__sflush_r+0x32>
 8007668:	2b1d      	cmp	r3, #29
 800766a:	d001      	beq.n	8007670 <__sflush_r+0xac>
 800766c:	2b16      	cmp	r3, #22
 800766e:	d11e      	bne.n	80076ae <__sflush_r+0xea>
 8007670:	602f      	str	r7, [r5, #0]
 8007672:	2000      	movs	r0, #0
 8007674:	e022      	b.n	80076bc <__sflush_r+0xf8>
 8007676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800767a:	b21b      	sxth	r3, r3
 800767c:	e01b      	b.n	80076b6 <__sflush_r+0xf2>
 800767e:	690f      	ldr	r7, [r1, #16]
 8007680:	2f00      	cmp	r7, #0
 8007682:	d0f6      	beq.n	8007672 <__sflush_r+0xae>
 8007684:	0793      	lsls	r3, r2, #30
 8007686:	680e      	ldr	r6, [r1, #0]
 8007688:	bf08      	it	eq
 800768a:	694b      	ldreq	r3, [r1, #20]
 800768c:	600f      	str	r7, [r1, #0]
 800768e:	bf18      	it	ne
 8007690:	2300      	movne	r3, #0
 8007692:	eba6 0807 	sub.w	r8, r6, r7
 8007696:	608b      	str	r3, [r1, #8]
 8007698:	f1b8 0f00 	cmp.w	r8, #0
 800769c:	dde9      	ble.n	8007672 <__sflush_r+0xae>
 800769e:	6a21      	ldr	r1, [r4, #32]
 80076a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80076a2:	4643      	mov	r3, r8
 80076a4:	463a      	mov	r2, r7
 80076a6:	4628      	mov	r0, r5
 80076a8:	47b0      	blx	r6
 80076aa:	2800      	cmp	r0, #0
 80076ac:	dc08      	bgt.n	80076c0 <__sflush_r+0xfc>
 80076ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076b6:	81a3      	strh	r3, [r4, #12]
 80076b8:	f04f 30ff 	mov.w	r0, #4294967295
 80076bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c0:	4407      	add	r7, r0
 80076c2:	eba8 0800 	sub.w	r8, r8, r0
 80076c6:	e7e7      	b.n	8007698 <__sflush_r+0xd4>
 80076c8:	dfbffffe 	.word	0xdfbffffe

080076cc <_fflush_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	690b      	ldr	r3, [r1, #16]
 80076d0:	4605      	mov	r5, r0
 80076d2:	460c      	mov	r4, r1
 80076d4:	b913      	cbnz	r3, 80076dc <_fflush_r+0x10>
 80076d6:	2500      	movs	r5, #0
 80076d8:	4628      	mov	r0, r5
 80076da:	bd38      	pop	{r3, r4, r5, pc}
 80076dc:	b118      	cbz	r0, 80076e6 <_fflush_r+0x1a>
 80076de:	6a03      	ldr	r3, [r0, #32]
 80076e0:	b90b      	cbnz	r3, 80076e6 <_fflush_r+0x1a>
 80076e2:	f7ff f9ad 	bl	8006a40 <__sinit>
 80076e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d0f3      	beq.n	80076d6 <_fflush_r+0xa>
 80076ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80076f0:	07d0      	lsls	r0, r2, #31
 80076f2:	d404      	bmi.n	80076fe <_fflush_r+0x32>
 80076f4:	0599      	lsls	r1, r3, #22
 80076f6:	d402      	bmi.n	80076fe <_fflush_r+0x32>
 80076f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076fa:	f7ff fb98 	bl	8006e2e <__retarget_lock_acquire_recursive>
 80076fe:	4628      	mov	r0, r5
 8007700:	4621      	mov	r1, r4
 8007702:	f7ff ff5f 	bl	80075c4 <__sflush_r>
 8007706:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007708:	07da      	lsls	r2, r3, #31
 800770a:	4605      	mov	r5, r0
 800770c:	d4e4      	bmi.n	80076d8 <_fflush_r+0xc>
 800770e:	89a3      	ldrh	r3, [r4, #12]
 8007710:	059b      	lsls	r3, r3, #22
 8007712:	d4e1      	bmi.n	80076d8 <_fflush_r+0xc>
 8007714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007716:	f7ff fb8b 	bl	8006e30 <__retarget_lock_release_recursive>
 800771a:	e7dd      	b.n	80076d8 <_fflush_r+0xc>

0800771c <__swhatbuf_r>:
 800771c:	b570      	push	{r4, r5, r6, lr}
 800771e:	460c      	mov	r4, r1
 8007720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007724:	2900      	cmp	r1, #0
 8007726:	b096      	sub	sp, #88	@ 0x58
 8007728:	4615      	mov	r5, r2
 800772a:	461e      	mov	r6, r3
 800772c:	da0d      	bge.n	800774a <__swhatbuf_r+0x2e>
 800772e:	89a3      	ldrh	r3, [r4, #12]
 8007730:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007734:	f04f 0100 	mov.w	r1, #0
 8007738:	bf14      	ite	ne
 800773a:	2340      	movne	r3, #64	@ 0x40
 800773c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007740:	2000      	movs	r0, #0
 8007742:	6031      	str	r1, [r6, #0]
 8007744:	602b      	str	r3, [r5, #0]
 8007746:	b016      	add	sp, #88	@ 0x58
 8007748:	bd70      	pop	{r4, r5, r6, pc}
 800774a:	466a      	mov	r2, sp
 800774c:	f000 f848 	bl	80077e0 <_fstat_r>
 8007750:	2800      	cmp	r0, #0
 8007752:	dbec      	blt.n	800772e <__swhatbuf_r+0x12>
 8007754:	9901      	ldr	r1, [sp, #4]
 8007756:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800775a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800775e:	4259      	negs	r1, r3
 8007760:	4159      	adcs	r1, r3
 8007762:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007766:	e7eb      	b.n	8007740 <__swhatbuf_r+0x24>

08007768 <__smakebuf_r>:
 8007768:	898b      	ldrh	r3, [r1, #12]
 800776a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800776c:	079d      	lsls	r5, r3, #30
 800776e:	4606      	mov	r6, r0
 8007770:	460c      	mov	r4, r1
 8007772:	d507      	bpl.n	8007784 <__smakebuf_r+0x1c>
 8007774:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	6123      	str	r3, [r4, #16]
 800777c:	2301      	movs	r3, #1
 800777e:	6163      	str	r3, [r4, #20]
 8007780:	b003      	add	sp, #12
 8007782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007784:	ab01      	add	r3, sp, #4
 8007786:	466a      	mov	r2, sp
 8007788:	f7ff ffc8 	bl	800771c <__swhatbuf_r>
 800778c:	9f00      	ldr	r7, [sp, #0]
 800778e:	4605      	mov	r5, r0
 8007790:	4639      	mov	r1, r7
 8007792:	4630      	mov	r0, r6
 8007794:	f7ff fbba 	bl	8006f0c <_malloc_r>
 8007798:	b948      	cbnz	r0, 80077ae <__smakebuf_r+0x46>
 800779a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800779e:	059a      	lsls	r2, r3, #22
 80077a0:	d4ee      	bmi.n	8007780 <__smakebuf_r+0x18>
 80077a2:	f023 0303 	bic.w	r3, r3, #3
 80077a6:	f043 0302 	orr.w	r3, r3, #2
 80077aa:	81a3      	strh	r3, [r4, #12]
 80077ac:	e7e2      	b.n	8007774 <__smakebuf_r+0xc>
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	6020      	str	r0, [r4, #0]
 80077b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077b6:	81a3      	strh	r3, [r4, #12]
 80077b8:	9b01      	ldr	r3, [sp, #4]
 80077ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80077be:	b15b      	cbz	r3, 80077d8 <__smakebuf_r+0x70>
 80077c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077c4:	4630      	mov	r0, r6
 80077c6:	f000 f81d 	bl	8007804 <_isatty_r>
 80077ca:	b128      	cbz	r0, 80077d8 <__smakebuf_r+0x70>
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	f023 0303 	bic.w	r3, r3, #3
 80077d2:	f043 0301 	orr.w	r3, r3, #1
 80077d6:	81a3      	strh	r3, [r4, #12]
 80077d8:	89a3      	ldrh	r3, [r4, #12]
 80077da:	431d      	orrs	r5, r3
 80077dc:	81a5      	strh	r5, [r4, #12]
 80077de:	e7cf      	b.n	8007780 <__smakebuf_r+0x18>

080077e0 <_fstat_r>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	4d07      	ldr	r5, [pc, #28]	@ (8007800 <_fstat_r+0x20>)
 80077e4:	2300      	movs	r3, #0
 80077e6:	4604      	mov	r4, r0
 80077e8:	4608      	mov	r0, r1
 80077ea:	4611      	mov	r1, r2
 80077ec:	602b      	str	r3, [r5, #0]
 80077ee:	f7f9 fee4 	bl	80015ba <_fstat>
 80077f2:	1c43      	adds	r3, r0, #1
 80077f4:	d102      	bne.n	80077fc <_fstat_r+0x1c>
 80077f6:	682b      	ldr	r3, [r5, #0]
 80077f8:	b103      	cbz	r3, 80077fc <_fstat_r+0x1c>
 80077fa:	6023      	str	r3, [r4, #0]
 80077fc:	bd38      	pop	{r3, r4, r5, pc}
 80077fe:	bf00      	nop
 8007800:	200004e4 	.word	0x200004e4

08007804 <_isatty_r>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	4d06      	ldr	r5, [pc, #24]	@ (8007820 <_isatty_r+0x1c>)
 8007808:	2300      	movs	r3, #0
 800780a:	4604      	mov	r4, r0
 800780c:	4608      	mov	r0, r1
 800780e:	602b      	str	r3, [r5, #0]
 8007810:	f7f9 fee3 	bl	80015da <_isatty>
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d102      	bne.n	800781e <_isatty_r+0x1a>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	b103      	cbz	r3, 800781e <_isatty_r+0x1a>
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	bd38      	pop	{r3, r4, r5, pc}
 8007820:	200004e4 	.word	0x200004e4

08007824 <_sbrk_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	4d06      	ldr	r5, [pc, #24]	@ (8007840 <_sbrk_r+0x1c>)
 8007828:	2300      	movs	r3, #0
 800782a:	4604      	mov	r4, r0
 800782c:	4608      	mov	r0, r1
 800782e:	602b      	str	r3, [r5, #0]
 8007830:	f7f9 feec 	bl	800160c <_sbrk>
 8007834:	1c43      	adds	r3, r0, #1
 8007836:	d102      	bne.n	800783e <_sbrk_r+0x1a>
 8007838:	682b      	ldr	r3, [r5, #0]
 800783a:	b103      	cbz	r3, 800783e <_sbrk_r+0x1a>
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	bd38      	pop	{r3, r4, r5, pc}
 8007840:	200004e4 	.word	0x200004e4

08007844 <_init>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	bf00      	nop
 8007848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784a:	bc08      	pop	{r3}
 800784c:	469e      	mov	lr, r3
 800784e:	4770      	bx	lr

08007850 <_fini>:
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	bf00      	nop
 8007854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007856:	bc08      	pop	{r3}
 8007858:	469e      	mov	lr, r3
 800785a:	4770      	bx	lr
