
hw6_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08009278  08009278  0000a278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800937c  0800937c  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800937c  0800937c  0000a37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009384  08009384  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009384  08009384  0000a384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009388  08009388  0000a388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800938c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000265c  2000006c  080093f8  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200026c8  080093f8  0000b6c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb04  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dd8  00000000  00000000  00029ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  0002d978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a9  00000000  00000000  0002f548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005867  00000000  00000000  00030af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f444  00000000  00000000  00036358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a663  00000000  00000000  0005579c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016fdff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f2c  00000000  00000000  0016fe44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00177d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009260 	.word	0x08009260

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08009260 	.word	0x08009260

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__NVIC_SetVector>:
           VTOR must been relocated to SRAM before.
  \param [in]   IRQn      Interrupt number
  \param [in]   vector    Address of interrupt handler function
 */
__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	71fb      	strb	r3, [r7, #7]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800056c:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <__NVIC_SetVector+0x34>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	60fb      	str	r3, [r7, #12]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8000572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000576:	3310      	adds	r3, #16
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	461a      	mov	r2, r3
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4413      	add	r3, r2
 8000580:	461a      	mov	r2, r3
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	6013      	str	r3, [r2, #0]
  /* ARM Application Note 321 states that the M4 does not require the architectural barrier */
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <StartDefaultTask>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void StartDefaultTask(void *argument)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  osStatus_t status;
  uint8_t mode;
  uint8_t start;
  uint8_t end;
  int i = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
  printf("kjghfajkdgfh\n");
 80005a4:	481d      	ldr	r0, [pc, #116]	@ (800061c <StartDefaultTask+0x84>)
 80005a6:	f007 ffe9 	bl	800857c <puts>
  for(;;)
  {


	  if(a == 1){//print first half
 80005aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000620 <StartDefaultTask+0x88>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d116      	bne.n	80005e0 <StartDefaultTask+0x48>
		  start = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	72fb      	strb	r3, [r7, #11]
		  end = 127;
 80005b6:	237f      	movs	r3, #127	@ 0x7f
 80005b8:	72bb      	strb	r3, [r7, #10]
		  for(i = start; i<=end; i++){
 80005ba:	7afb      	ldrb	r3, [r7, #11]
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	e00a      	b.n	80005d6 <StartDefaultTask+0x3e>
			  printf("%d\r\n", sample_buffer[i]);
 80005c0:	4a18      	ldr	r2, [pc, #96]	@ (8000624 <StartDefaultTask+0x8c>)
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005c8:	4619      	mov	r1, r3
 80005ca:	4817      	ldr	r0, [pc, #92]	@ (8000628 <StartDefaultTask+0x90>)
 80005cc:	f007 ff6e 	bl	80084ac <iprintf>
		  for(i = start; i<=end; i++){
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	3301      	adds	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	7abb      	ldrb	r3, [r7, #10]
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	429a      	cmp	r2, r3
 80005dc:	ddf0      	ble.n	80005c0 <StartDefaultTask+0x28>
 80005de:	e019      	b.n	8000614 <StartDefaultTask+0x7c>
		  }
	  }else if(a==2){
 80005e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <StartDefaultTask+0x88>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	d115      	bne.n	8000614 <StartDefaultTask+0x7c>
		  start = 128;
 80005e8:	2380      	movs	r3, #128	@ 0x80
 80005ea:	72fb      	strb	r3, [r7, #11]
		  end = 255;
 80005ec:	23ff      	movs	r3, #255	@ 0xff
 80005ee:	72bb      	strb	r3, [r7, #10]
		  for(i = start; i<=end; i++)printf("%d\r\n", sample_buffer[i]);
 80005f0:	7afb      	ldrb	r3, [r7, #11]
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	e00a      	b.n	800060c <StartDefaultTask+0x74>
 80005f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000624 <StartDefaultTask+0x8c>)
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005fe:	4619      	mov	r1, r3
 8000600:	4809      	ldr	r0, [pc, #36]	@ (8000628 <StartDefaultTask+0x90>)
 8000602:	f007 ff53 	bl	80084ac <iprintf>
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	3301      	adds	r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	7abb      	ldrb	r3, [r7, #10]
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	429a      	cmp	r2, r3
 8000612:	ddf0      	ble.n	80005f6 <StartDefaultTask+0x5e>
	  }


    osDelay(10);
 8000614:	200a      	movs	r0, #10
 8000616:	f005 f9df 	bl	80059d8 <osDelay>
	  if(a == 1){//print first half
 800061a:	e7c6      	b.n	80005aa <StartDefaultTask+0x12>
 800061c:	08009284 	.word	0x08009284
 8000620:	20000208 	.word	0x20000208
 8000624:	20000a6c 	.word	0x20000a6c
 8000628:	08009294 	.word	0x08009294

0800062c <__io_putchar>:
  }
  /* USER CODE END 5 */
}
int __io_putchar(int ch)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000634:	1d39      	adds	r1, r7, #4
 8000636:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800063a:	2201      	movs	r2, #1
 800063c:	4803      	ldr	r0, [pc, #12]	@ (800064c <__io_putchar+0x20>)
 800063e:	f004 fb5d 	bl	8004cfc <HAL_UART_Transmit>
	return ch;
 8000642:	687b      	ldr	r3, [r7, #4]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000180 	.word	0x20000180

08000650 <Error_Handler>:

void Error_Handler()
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
}
 8000656:	bf00      	nop
    __disable_irq();
    while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <Error_Handler+0x8>

0800065c <MX_USART1_UART_Init>:
    }
}


static void MX_USART1_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000660:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <MX_USART1_UART_Init+0x58>)
 8000662:	4a15      	ldr	r2, [pc, #84]	@ (80006b8 <MX_USART1_UART_Init+0x5c>)
 8000664:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000666:	4b13      	ldr	r3, [pc, #76]	@ (80006b4 <MX_USART1_UART_Init+0x58>)
 8000668:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800066c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <MX_USART1_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <MX_USART1_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <MX_USART1_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <MX_USART1_UART_Init+0x58>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <MX_USART1_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <MX_USART1_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000692:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <MX_USART1_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <MX_USART1_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <MX_USART1_UART_Init+0x58>)
 80006a0:	f004 fade 	bl	8004c60 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006aa:	f7ff ffd1 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000180 	.word	0x20000180
 80006b8:	40013800 	.word	0x40013800

080006bc <HAL_ADC_MspInit>:
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a0a      	ldr	r2, [pc, #40]	@ (80006f4 <HAL_ADC_MspInit+0x38>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d10b      	bne.n	80006e6 <HAL_ADC_MspInit+0x2a>
    {
        /* Peripheral clock enable */
        __HAL_RCC_ADC_CLK_ENABLE();
 80006ce:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <HAL_ADC_MspInit+0x3c>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d2:	4a09      	ldr	r2, [pc, #36]	@ (80006f8 <HAL_ADC_MspInit+0x3c>)
 80006d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <HAL_ADC_MspInit+0x3c>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
    }

}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	50040000 	.word	0x50040000
 80006f8:	40021000 	.word	0x40021000

080006fc <ADC1_Init>:
    }

}

void ADC1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	@ 0x28
 8000700:	af00      	add	r7, sp, #0
    ADC_MultiModeTypeDef multimode = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
 800071c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
    hadc1.Instance = ADC1;
 800071e:	4b35      	ldr	r3, [pc, #212]	@ (80007f4 <ADC1_Init+0xf8>)
 8000720:	4a35      	ldr	r2, [pc, #212]	@ (80007f8 <ADC1_Init+0xfc>)
 8000722:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;//ADC_CLOCK_ASYNC_DIV1;
 8000724:	4b33      	ldr	r3, [pc, #204]	@ (80007f4 <ADC1_Init+0xf8>)
 8000726:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800072a:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800072c:	4b31      	ldr	r3, [pc, #196]	@ (80007f4 <ADC1_Init+0xf8>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000732:	4b30      	ldr	r3, [pc, #192]	@ (80007f4 <ADC1_Init+0xf8>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000738:	4b2e      	ldr	r3, [pc, #184]	@ (80007f4 <ADC1_Init+0xf8>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073e:	4b2d      	ldr	r3, [pc, #180]	@ (80007f4 <ADC1_Init+0xf8>)
 8000740:	2204      	movs	r2, #4
 8000742:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8000744:	4b2b      	ldr	r3, [pc, #172]	@ (80007f4 <ADC1_Init+0xf8>)
 8000746:	2200      	movs	r2, #0
 8000748:	761a      	strb	r2, [r3, #24]
    hadc1.Init.ContinuousConvMode = DISABLE;
 800074a:	4b2a      	ldr	r3, [pc, #168]	@ (80007f4 <ADC1_Init+0xf8>)
 800074c:	2200      	movs	r2, #0
 800074e:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;
 8000750:	4b28      	ldr	r3, [pc, #160]	@ (80007f4 <ADC1_Init+0xf8>)
 8000752:	2201      	movs	r2, #1
 8000754:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000756:	4b27      	ldr	r3, [pc, #156]	@ (80007f4 <ADC1_Init+0xf8>)
 8000758:	2200      	movs	r2, #0
 800075a:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800075e:	4b25      	ldr	r3, [pc, #148]	@ (80007f4 <ADC1_Init+0xf8>)
 8000760:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000764:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000766:	4b23      	ldr	r3, [pc, #140]	@ (80007f4 <ADC1_Init+0xf8>)
 8000768:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800076c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.DMAContinuousRequests = DISABLE;
 800076e:	4b21      	ldr	r3, [pc, #132]	@ (80007f4 <ADC1_Init+0xf8>)
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <ADC1_Init+0xf8>)
 8000778:	2200      	movs	r2, #0
 800077a:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc1.Init.OversamplingMode = DISABLE;
 800077c:	4b1d      	ldr	r3, [pc, #116]	@ (80007f4 <ADC1_Init+0xf8>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000784:	481b      	ldr	r0, [pc, #108]	@ (80007f4 <ADC1_Init+0xf8>)
 8000786:	f000 fe35 	bl	80013f4 <HAL_ADC_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <ADC1_Init+0x98>
    {
        Error_Handler();
 8000790:	f7ff ff5e 	bl	8000650 <Error_Handler>
    }

    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8000794:	217f      	movs	r1, #127	@ 0x7f
 8000796:	4817      	ldr	r0, [pc, #92]	@ (80007f4 <ADC1_Init+0xf8>)
 8000798:	f001 fe00 	bl	800239c <HAL_ADCEx_Calibration_Start>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <ADC1_Init+0xaa>
    {
        Error_Handler();
 80007a2:	f7ff ff55 	bl	8000650 <Error_Handler>
    }

  /** Configure the ADC multi-mode
  */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	4810      	ldr	r0, [pc, #64]	@ (80007f4 <ADC1_Init+0xf8>)
 80007b2:	f001 fe53 	bl	800245c <HAL_ADCEx_MultiModeConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <ADC1_Init+0xc4>
    {
        Error_Handler();
 80007bc:	f7ff ff48 	bl	8000650 <Error_Handler>
    }

  /** Configure Regular Channel
  */
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <ADC1_Init+0x100>)
 80007c2:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c4:	2306      	movs	r3, #6
 80007c6:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;//ADC_SAMPLETIME_247CYCLES_5;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007cc:	237f      	movs	r3, #127	@ 0x7f
 80007ce:	613b      	str	r3, [r7, #16]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007d0:	2304      	movs	r3, #4
 80007d2:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4619      	mov	r1, r3
 80007dc:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <ADC1_Init+0xf8>)
 80007de:	f001 f81f 	bl	8001820 <HAL_ADC_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <ADC1_Init+0xf0>
    {
        Error_Handler();
 80007e8:	f7ff ff32 	bl	8000650 <Error_Handler>
    }

}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	@ 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000d4 	.word	0x200000d4
 80007f8:	50040000 	.word	0x50040000
 80007fc:	c7520000 	.word	0xc7520000

08000800 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

	printf("1\r\n");
 8000808:	4804      	ldr	r0, [pc, #16]	@ (800081c <HAL_ADC_ConvCpltCallback+0x1c>)
 800080a:	f007 feb7 	bl	800857c <puts>
	a=1;
 800080e:	4b04      	ldr	r3, [pc, #16]	@ (8000820 <HAL_ADC_ConvCpltCallback+0x20>)
 8000810:	2201      	movs	r2, #1
 8000812:	601a      	str	r2, [r3, #0]

}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	0800929c 	.word	0x0800929c
 8000820:	20000208 	.word	0x20000208

08000824 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

	printf("2\r\n");
 800082c:	4804      	ldr	r0, [pc, #16]	@ (8000840 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800082e:	f007 fea5 	bl	800857c <puts>
	//for (int i=0;i<128;i++)printf("%d, ", sample_buffer[i]);
    //to do: inform RTOS task to print out sensor data
    a = 2;
 8000832:	4b04      	ldr	r3, [pc, #16]	@ (8000844 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 8000834:	2202      	movs	r2, #2
 8000836:	601a      	str	r2, [r3, #0]
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	080092a0 	.word	0x080092a0
 8000844:	20000208 	.word	0x20000208

08000848 <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
    SET_BIT(hadc1.Instance->CFGR, ADC_CFGR_DMACFG);
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <DMA1_Channel1_IRQHandler+0x20>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	68da      	ldr	r2, [r3, #12]
 8000852:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <DMA1_Channel1_IRQHandler+0x20>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f042 0202 	orr.w	r2, r2, #2
 800085a:	60da      	str	r2, [r3, #12]
    HAL_DMA_IRQHandler(&hdma1);
 800085c:	4803      	ldr	r0, [pc, #12]	@ (800086c <DMA1_Channel1_IRQHandler+0x24>)
 800085e:	f002 f8d7 	bl	8002a10 <HAL_DMA_IRQHandler>
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000d4 	.word	0x200000d4
 800086c:	20000138 	.word	0x20000138

08000870 <ADC1_DMA1CH1_init>:

void ADC1_DMA1CH1_init()
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000876:	4b24      	ldr	r3, [pc, #144]	@ (8000908 <ADC1_DMA1CH1_init+0x98>)
 8000878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800087a:	4a23      	ldr	r2, [pc, #140]	@ (8000908 <ADC1_DMA1CH1_init+0x98>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6493      	str	r3, [r2, #72]	@ 0x48
 8000882:	4b21      	ldr	r3, [pc, #132]	@ (8000908 <ADC1_DMA1CH1_init+0x98>)
 8000884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

    hdma1.Instance = DMA1_Channel1;
 800088e:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <ADC1_DMA1CH1_init+0x9c>)
 8000890:	4a1f      	ldr	r2, [pc, #124]	@ (8000910 <ADC1_DMA1CH1_init+0xa0>)
 8000892:	601a      	str	r2, [r3, #0]
    hdma1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000894:	4b1d      	ldr	r3, [pc, #116]	@ (800090c <ADC1_DMA1CH1_init+0x9c>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
    hdma1.Init.PeriphInc = DMA_PINC_DISABLE;
 800089a:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <ADC1_DMA1CH1_init+0x9c>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
    hdma1.Init.MemInc = DMA_MINC_ENABLE;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <ADC1_DMA1CH1_init+0x9c>)
 80008a2:	2280      	movs	r2, #128	@ 0x80
 80008a4:	611a      	str	r2, [r3, #16]
    hdma1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008a6:	4b19      	ldr	r3, [pc, #100]	@ (800090c <ADC1_DMA1CH1_init+0x9c>)
 80008a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008ac:	615a      	str	r2, [r3, #20]
    hdma1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008ae:	4b17      	ldr	r3, [pc, #92]	@ (800090c <ADC1_DMA1CH1_init+0x9c>)
 80008b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008b4:	619a      	str	r2, [r3, #24]
    hdma1.Init.Mode = DMA_CIRCULAR;
 80008b6:	4b15      	ldr	r3, [pc, #84]	@ (800090c <ADC1_DMA1CH1_init+0x9c>)
 80008b8:	2220      	movs	r2, #32
 80008ba:	61da      	str	r2, [r3, #28]
    hdma1.Init.Priority = DMA_PRIORITY_HIGH;
 80008bc:	4b13      	ldr	r3, [pc, #76]	@ (800090c <ADC1_DMA1CH1_init+0x9c>)
 80008be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008c2:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma1) != HAL_OK)
 80008c4:	4811      	ldr	r0, [pc, #68]	@ (800090c <ADC1_DMA1CH1_init+0x9c>)
 80008c6:	f001 ff8b 	bl	80027e0 <HAL_DMA_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <ADC1_DMA1CH1_init+0x64>
    {
        Error_Handler();
 80008d0:	f7ff febe 	bl	8000650 <Error_Handler>
    }

    __HAL_LINKDMA(&hadc1, DMA_Handle, hdma1);
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <ADC1_DMA1CH1_init+0xa4>)
 80008d6:	4a0d      	ldr	r2, [pc, #52]	@ (800090c <ADC1_DMA1CH1_init+0x9c>)
 80008d8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008da:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <ADC1_DMA1CH1_init+0x9c>)
 80008dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000914 <ADC1_DMA1CH1_init+0xa4>)
 80008de:	629a      	str	r2, [r3, #40]	@ 0x28

    ADC1_Init();
 80008e0:	f7ff ff0c 	bl	80006fc <ADC1_Init>

    NVIC_SetVector(DMA1_Channel1_IRQn, (uint32_t)&DMA1_Channel1_IRQHandler);
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <ADC1_DMA1CH1_init+0xa8>)
 80008e6:	4619      	mov	r1, r3
 80008e8:	200b      	movs	r0, #11
 80008ea:	f7ff fe39 	bl	8000560 <__NVIC_SetVector>
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2105      	movs	r1, #5
 80008f2:	200b      	movs	r0, #11
 80008f4:	f001 ff3d 	bl	8002772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008f8:	200b      	movs	r0, #11
 80008fa:	f001 ff56 	bl	80027aa <HAL_NVIC_EnableIRQ>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000
 800090c:	20000138 	.word	0x20000138
 8000910:	40020008 	.word	0x40020008
 8000914:	200000d4 	.word	0x200000d4
 8000918:	08000849 	.word	0x08000849

0800091c <HAL_TIM_Base_MspInit>:



void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
    if(htim_base->Instance == TIM1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0a      	ldr	r2, [pc, #40]	@ (8000954 <HAL_TIM_Base_MspInit+0x38>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d10b      	bne.n	8000946 <HAL_TIM_Base_MspInit+0x2a>
    {
        __HAL_RCC_TIM1_CLK_ENABLE();
 800092e:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <HAL_TIM_Base_MspInit+0x3c>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000932:	4a09      	ldr	r2, [pc, #36]	@ (8000958 <HAL_TIM_Base_MspInit+0x3c>)
 8000934:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000938:	6613      	str	r3, [r2, #96]	@ 0x60
 800093a:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <HAL_TIM_Base_MspInit+0x3c>)
 800093c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800093e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    }
}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40012c00 	.word	0x40012c00
 8000958:	40021000 	.word	0x40021000

0800095c <TIM1_Init>:
    }
}


static void TIM1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]

    htim1.Instance = TIM1;
 800097a:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <TIM1_Init+0x94>)
 800097c:	4a1d      	ldr	r2, [pc, #116]	@ (80009f4 <TIM1_Init+0x98>)
 800097e:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 40 - 1;
 8000980:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <TIM1_Init+0x94>)
 8000982:	2227      	movs	r2, #39	@ 0x27
 8000984:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <TIM1_Init+0x94>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 1000 - 1;
 800098c:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <TIM1_Init+0x94>)
 800098e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000992:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000994:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <TIM1_Init+0x94>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <TIM1_Init+0x94>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009a0:	4813      	ldr	r0, [pc, #76]	@ (80009f0 <TIM1_Init+0x94>)
 80009a2:	f003 fe03 	bl	80045ac <HAL_TIM_Base_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <TIM1_Init+0x54>
    {
        Error_Handler();
 80009ac:	f7ff fe50 	bl	8000650 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b4:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	4619      	mov	r1, r3
 80009bc:	480c      	ldr	r0, [pc, #48]	@ (80009f0 <TIM1_Init+0x94>)
 80009be:	f003 febd 	bl	800473c <HAL_TIM_ConfigClockSource>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <TIM1_Init+0x70>
    {
        Error_Handler();
 80009c8:	f7ff fe42 	bl	8000650 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009cc:	2320      	movs	r3, #32
 80009ce:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <TIM1_Init+0x94>)
 80009da:	f004 f8b9 	bl	8004b50 <HAL_TIMEx_MasterConfigSynchronization>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <TIM1_Init+0x8c>
    {
        Error_Handler();
 80009e4:	f7ff fe34 	bl	8000650 <Error_Handler>
    }
}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000088 	.word	0x20000088
 80009f4:	40012c00 	.word	0x40012c00

080009f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fc:	f000 fa89 	bl	8000f12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a00:	f000 f846 	bl	8000a90 <SystemClock_Config>

  MX_USART1_UART_Init();
 8000a04:	f7ff fe2a 	bl	800065c <MX_USART1_UART_Init>



  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
   printf("sajkhfkjdhk\r\n");
 8000a08:	4817      	ldr	r0, [pc, #92]	@ (8000a68 <main+0x70>)
 8000a0a:	f007 fdb7 	bl	800857c <puts>
   osKernelInitialize();
 8000a0e:	f004 ff07 	bl	8005820 <osKernelInitialize>
   PrintTaskHandle = osThreadNew(StartDefaultTask, NULL, &PrintTask_attributes);
 8000a12:	4a16      	ldr	r2, [pc, #88]	@ (8000a6c <main+0x74>)
 8000a14:	2100      	movs	r1, #0
 8000a16:	4816      	ldr	r0, [pc, #88]	@ (8000a70 <main+0x78>)
 8000a18:	f004 ff4c 	bl	80058b4 <osThreadNew>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4a15      	ldr	r2, [pc, #84]	@ (8000a74 <main+0x7c>)
 8000a20:	6013      	str	r3, [r2, #0]
   if(PrintTaskHandle == NULL)printf("error\n");
 8000a22:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <main+0x7c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d103      	bne.n	8000a32 <main+0x3a>
 8000a2a:	4813      	ldr	r0, [pc, #76]	@ (8000a78 <main+0x80>)
 8000a2c:	f007 fda6 	bl	800857c <puts>
 8000a30:	e005      	b.n	8000a3e <main+0x46>
   else printf("%d", PrintTaskHandle);
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <main+0x7c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4619      	mov	r1, r3
 8000a38:	4810      	ldr	r0, [pc, #64]	@ (8000a7c <main+0x84>)
 8000a3a:	f007 fd37 	bl	80084ac <iprintf>
   TIM1_Init();
 8000a3e:	f7ff ff8d 	bl	800095c <TIM1_Init>
   ADC1_DMA1CH1_init();
 8000a42:	f7ff ff15 	bl	8000870 <ADC1_DMA1CH1_init>
  /* USER CODE END 2 */
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&sample_buffer[0], SAMPLE_BUFFER_SIZE);
 8000a46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a4a:	490d      	ldr	r1, [pc, #52]	@ (8000a80 <main+0x88>)
 8000a4c:	480d      	ldr	r0, [pc, #52]	@ (8000a84 <main+0x8c>)
 8000a4e:	f000 fe21 	bl	8001694 <HAL_ADC_Start_DMA>
    HAL_TIM_Base_Start_IT(&htim1);
 8000a52:	480d      	ldr	r0, [pc, #52]	@ (8000a88 <main+0x90>)
 8000a54:	f003 fe02 	bl	800465c <HAL_TIM_Base_Start_IT>
      printf("123\n");
 8000a58:	480c      	ldr	r0, [pc, #48]	@ (8000a8c <main+0x94>)
 8000a5a:	f007 fd8f 	bl	800857c <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

      osKernelStart();
 8000a5e:	f004 ff03 	bl	8005868 <osKernelStart>
  while (1)
 8000a62:	bf00      	nop
 8000a64:	e7fd      	b.n	8000a62 <main+0x6a>
 8000a66:	bf00      	nop
 8000a68:	080092a4 	.word	0x080092a4
 8000a6c:	080092dc 	.word	0x080092dc
 8000a70:	08000599 	.word	0x08000599
 8000a74:	2000020c 	.word	0x2000020c
 8000a78:	080092b4 	.word	0x080092b4
 8000a7c:	080092bc 	.word	0x080092bc
 8000a80:	20000a6c 	.word	0x20000a6c
 8000a84:	200000d4 	.word	0x200000d4
 8000a88:	20000088 	.word	0x20000088
 8000a8c:	080092c0 	.word	0x080092c0

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b096      	sub	sp, #88	@ 0x58
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	2244      	movs	r2, #68	@ 0x44
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f007 fe4c 	bl	800873c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ab2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ab6:	f002 fa67 	bl	8002f88 <HAL_PWREx_ControlVoltageScaling>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ac0:	f7ff fdc6 	bl	8000650 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ad0:	2360      	movs	r3, #96	@ 0x60
 8000ad2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4618      	mov	r0, r3
 8000ade:	f002 faa9 	bl	8003034 <HAL_RCC_OscConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000ae8:	f7ff fdb2 	bl	8000650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aec:	230f      	movs	r3, #15
 8000aee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000af0:	2300      	movs	r3, #0
 8000af2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f002 fe71 	bl	80037ec <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b10:	f7ff fd9e 	bl	8000650 <Error_Handler>
  }
}
 8000b14:	bf00      	nop
 8000b16:	3758      	adds	r7, #88	@ 0x58
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b26:	4a10      	ldr	r2, [pc, #64]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b46:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	210f      	movs	r1, #15
 8000b56:	f06f 0001 	mvn.w	r0, #1
 8000b5a:	f001 fe0a 	bl	8002772 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b0ae      	sub	sp, #184	@ 0xb8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	2288      	movs	r2, #136	@ 0x88
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f007 fdd5 	bl	800873c <memset>
  if(huart->Instance==USART1)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a42      	ldr	r2, [pc, #264]	@ (8000ca0 <HAL_UART_MspInit+0x134>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d13b      	bne.n	8000c14 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f003 f843 	bl	8003c34 <HAL_RCCEx_PeriphCLKConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bb4:	f7ff fd4c 	bl	8000650 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ca4 <HAL_UART_MspInit+0x138>)
 8000bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bbc:	4a39      	ldr	r2, [pc, #228]	@ (8000ca4 <HAL_UART_MspInit+0x138>)
 8000bbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bc4:	4b37      	ldr	r3, [pc, #220]	@ (8000ca4 <HAL_UART_MspInit+0x138>)
 8000bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bcc:	61bb      	str	r3, [r7, #24]
 8000bce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd0:	4b34      	ldr	r3, [pc, #208]	@ (8000ca4 <HAL_UART_MspInit+0x138>)
 8000bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd4:	4a33      	ldr	r2, [pc, #204]	@ (8000ca4 <HAL_UART_MspInit+0x138>)
 8000bd6:	f043 0302 	orr.w	r3, r3, #2
 8000bda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bdc:	4b31      	ldr	r3, [pc, #196]	@ (8000ca4 <HAL_UART_MspInit+0x138>)
 8000bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000be8:	23c0      	movs	r3, #192	@ 0xc0
 8000bea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c00:	2307      	movs	r3, #7
 8000c02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4826      	ldr	r0, [pc, #152]	@ (8000ca8 <HAL_UART_MspInit+0x13c>)
 8000c0e:	f001 ffdf 	bl	8002bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c12:	e040      	b.n	8000c96 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a24      	ldr	r2, [pc, #144]	@ (8000cac <HAL_UART_MspInit+0x140>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d13b      	bne.n	8000c96 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f003 f802 	bl	8003c34 <HAL_RCCEx_PeriphCLKConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000c36:	f7ff fd0b 	bl	8000650 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <HAL_UART_MspInit+0x138>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3e:	4a19      	ldr	r2, [pc, #100]	@ (8000ca4 <HAL_UART_MspInit+0x138>)
 8000c40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c46:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <HAL_UART_MspInit+0x138>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c52:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <HAL_UART_MspInit+0x138>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c56:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <HAL_UART_MspInit+0x138>)
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <HAL_UART_MspInit+0x138>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c62:	f003 0308 	and.w	r3, r3, #8
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000c6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c84:	2307      	movs	r3, #7
 8000c86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4807      	ldr	r0, [pc, #28]	@ (8000cb0 <HAL_UART_MspInit+0x144>)
 8000c92:	f001 ff9d 	bl	8002bd0 <HAL_GPIO_Init>
}
 8000c96:	bf00      	nop
 8000c98:	37b8      	adds	r7, #184	@ 0xb8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40013800 	.word	0x40013800
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	48000400 	.word	0x48000400
 8000cac:	40004800 	.word	0x40004800
 8000cb0:	48000c00 	.word	0x48000c00

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <NMI_Handler+0x4>

08000cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <MemManage_Handler+0x4>

08000ccc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cee:	f000 f965 	bl	8000fbc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cf2:	f006 fa99 	bl	8007228 <xTaskGetSchedulerState>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d001      	beq.n	8000d00 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000cfc:	f007 f894 	bl	8007e28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8000d08:	2020      	movs	r0, #32
 8000d0a:	f002 f90b 	bl	8002f24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8000d0e:	2040      	movs	r0, #64	@ 0x40
 8000d10:	f002 f908 	bl	8002f24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8000d14:	2080      	movs	r0, #128	@ 0x80
 8000d16:	f002 f905 	bl	8002f24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8000d1a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000d1e:	f002 f901 	bl	8002f24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8000d2a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000d2e:	f002 f8f9 	bl	8002f24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8000d32:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000d36:	f002 f8f5 	bl	8002f24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8000d3a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d3e:	f002 f8f1 	bl	8002f24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8000d42:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d46:	f002 f8ed 	bl	8002f24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8000d4a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000d4e:	f002 f8e9 	bl	8002f24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	60f8      	str	r0, [r7, #12]
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
 8000d66:	e00a      	b.n	8000d7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d68:	f3af 8000 	nop.w
 8000d6c:	4601      	mov	r1, r0
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	1c5a      	adds	r2, r3, #1
 8000d72:	60ba      	str	r2, [r7, #8]
 8000d74:	b2ca      	uxtb	r2, r1
 8000d76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	dbf0      	blt.n	8000d68 <_read+0x12>
  }

  return len;
 8000d86:	687b      	ldr	r3, [r7, #4]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	e009      	b.n	8000db6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	60ba      	str	r2, [r7, #8]
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fc3e 	bl	800062c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	3301      	adds	r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	dbf1      	blt.n	8000da2 <_write+0x12>
  }
  return len;
 8000dbe:	687b      	ldr	r3, [r7, #4]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <_close>:

int _close(int file)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000df0:	605a      	str	r2, [r3, #4]
  return 0;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <_isatty>:

int _isatty(int file)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e08:	2301      	movs	r3, #1
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b085      	sub	sp, #20
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	60f8      	str	r0, [r7, #12]
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e38:	4a14      	ldr	r2, [pc, #80]	@ (8000e8c <_sbrk+0x5c>)
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <_sbrk+0x60>)
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e44:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <_sbrk+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d102      	bne.n	8000e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <_sbrk+0x64>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	@ (8000e98 <_sbrk+0x68>)
 8000e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e52:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d207      	bcs.n	8000e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e60:	f007 fcba 	bl	80087d8 <__errno>
 8000e64:	4603      	mov	r3, r0
 8000e66:	220c      	movs	r2, #12
 8000e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6e:	e009      	b.n	8000e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e70:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e76:	4b07      	ldr	r3, [pc, #28]	@ (8000e94 <_sbrk+0x64>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4a05      	ldr	r2, [pc, #20]	@ (8000e94 <_sbrk+0x64>)
 8000e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e82:	68fb      	ldr	r3, [r7, #12]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20018000 	.word	0x20018000
 8000e90:	00000400 	.word	0x00000400
 8000e94:	20000c6c 	.word	0x20000c6c
 8000e98:	200026c8 	.word	0x200026c8

08000e9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <SystemInit+0x20>)
 8000ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ea6:	4a05      	ldr	r2, [pc, #20]	@ (8000ebc <SystemInit+0x20>)
 8000ea8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ef8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec4:	f7ff ffea 	bl	8000e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480c      	ldr	r0, [pc, #48]	@ (8000efc <LoopForever+0x6>)
  ldr r1, =_edata
 8000eca:	490d      	ldr	r1, [pc, #52]	@ (8000f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f04 <LoopForever+0xe>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee0:	4c0a      	ldr	r4, [pc, #40]	@ (8000f0c <LoopForever+0x16>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eee:	f007 fc79 	bl	80087e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ef2:	f7ff fd81 	bl	80009f8 <main>

08000ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef6:	e7fe      	b.n	8000ef6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ef8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f04:	0800938c 	.word	0x0800938c
  ldr r2, =_sbss
 8000f08:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f0c:	200026c8 	.word	0x200026c8

08000f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC1_2_IRQHandler>

08000f12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f001 fc1d 	bl	800275c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f22:	200f      	movs	r0, #15
 8000f24:	f000 f80e 	bl	8000f44 <HAL_InitTick>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d002      	beq.n	8000f34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	71fb      	strb	r3, [r7, #7]
 8000f32:	e001      	b.n	8000f38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f34:	f7ff fdf2 	bl	8000b1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f38:	79fb      	ldrb	r3, [r7, #7]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f50:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <HAL_InitTick+0x6c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d023      	beq.n	8000fa0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f58:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <HAL_InitTick+0x70>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <HAL_InitTick+0x6c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 fc29 	bl	80027c6 <HAL_SYSTICK_Config>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10f      	bne.n	8000f9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b0f      	cmp	r3, #15
 8000f7e:	d809      	bhi.n	8000f94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f001 fbf3 	bl	8002772 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <HAL_InitTick+0x74>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e007      	b.n	8000fa4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	e004      	b.n	8000fa4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	e001      	b.n	8000fa4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000004 	.word	0x20000004

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000c70 	.word	0x20000c70

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	@ (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000c70 	.word	0x20000c70

08000ffc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	431a      	orrs	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	609a      	str	r2, [r3, #8]
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	431a      	orrs	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	609a      	str	r2, [r3, #8]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3360      	adds	r3, #96	@ 0x60
 8001076:	461a      	mov	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <LL_ADC_SetOffset+0x44>)
 8001086:	4013      	ands	r3, r2
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	430a      	orrs	r2, r1
 8001092:	4313      	orrs	r3, r2
 8001094:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800109c:	bf00      	nop
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	03fff000 	.word	0x03fff000

080010ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3360      	adds	r3, #96	@ 0x60
 80010ba:	461a      	mov	r2, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010d8:	b480      	push	{r7}
 80010da:	b087      	sub	sp, #28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3360      	adds	r3, #96	@ 0x60
 80010e8:	461a      	mov	r2, r3
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001102:	bf00      	nop
 8001104:	371c      	adds	r7, #28
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001134:	b480      	push	{r7}
 8001136:	b087      	sub	sp, #28
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	3330      	adds	r3, #48	@ 0x30
 8001144:	461a      	mov	r2, r3
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	f003 030c 	and.w	r3, r3, #12
 8001150:	4413      	add	r3, r2
 8001152:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	f003 031f 	and.w	r3, r3, #31
 800115e:	211f      	movs	r1, #31
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	401a      	ands	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	0e9b      	lsrs	r3, r3, #26
 800116c:	f003 011f 	and.w	r1, r3, #31
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	f003 031f 	and.w	r3, r3, #31
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	431a      	orrs	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001180:	bf00      	nop
 8001182:	371c      	adds	r7, #28
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800118c:	b480      	push	{r7}
 800118e:	b087      	sub	sp, #28
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	3314      	adds	r3, #20
 800119c:	461a      	mov	r2, r3
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	0e5b      	lsrs	r3, r3, #25
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	4413      	add	r3, r2
 80011aa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	0d1b      	lsrs	r3, r3, #20
 80011b4:	f003 031f 	and.w	r3, r3, #31
 80011b8:	2107      	movs	r1, #7
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	401a      	ands	r2, r3
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	0d1b      	lsrs	r3, r3, #20
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	431a      	orrs	r2, r3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011d6:	bf00      	nop
 80011d8:	371c      	adds	r7, #28
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011fc:	43db      	mvns	r3, r3
 80011fe:	401a      	ands	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0318 	and.w	r3, r3, #24
 8001206:	4908      	ldr	r1, [pc, #32]	@ (8001228 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001208:	40d9      	lsrs	r1, r3
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	400b      	ands	r3, r1
 800120e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001212:	431a      	orrs	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	0007ffff 	.word	0x0007ffff

0800122c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 031f 	and.w	r3, r3, #31
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001258:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6093      	str	r3, [r2, #8]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800127c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001280:	d101      	bne.n	8001286 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80012a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80012d0:	d101      	bne.n	80012d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012f8:	f043 0201 	orr.w	r2, r3, #1
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800131c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001320:	f043 0202 	orr.w	r2, r3, #2
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <LL_ADC_IsEnabled+0x18>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <LL_ADC_IsEnabled+0x1a>
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b02      	cmp	r3, #2
 800136c:	d101      	bne.n	8001372 <LL_ADC_IsDisableOngoing+0x18>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <LL_ADC_IsDisableOngoing+0x1a>
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001390:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001394:	f043 0204 	orr.w	r2, r3, #4
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	d101      	bne.n	80013c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d101      	bne.n	80013e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b089      	sub	sp, #36	@ 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e130      	b.n	8001670 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001418:	2b00      	cmp	r3, #0
 800141a:	d109      	bne.n	8001430 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff f94d 	bl	80006bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff19 	bl	800126c <LL_ADC_IsDeepPowerDownEnabled>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d004      	beq.n	800144a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff feff 	bl	8001248 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ff34 	bl	80012bc <LL_ADC_IsInternalRegulatorEnabled>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d115      	bne.n	8001486 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff18 	bl	8001294 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001464:	4b84      	ldr	r3, [pc, #528]	@ (8001678 <HAL_ADC_Init+0x284>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	099b      	lsrs	r3, r3, #6
 800146a:	4a84      	ldr	r2, [pc, #528]	@ (800167c <HAL_ADC_Init+0x288>)
 800146c:	fba2 2303 	umull	r2, r3, r2, r3
 8001470:	099b      	lsrs	r3, r3, #6
 8001472:	3301      	adds	r3, #1
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001478:	e002      	b.n	8001480 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3b01      	subs	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f9      	bne.n	800147a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff16 	bl	80012bc <LL_ADC_IsInternalRegulatorEnabled>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10d      	bne.n	80014b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149a:	f043 0210 	orr.w	r2, r3, #16
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a6:	f043 0201 	orr.w	r2, r3, #1
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff76 	bl	80013a8 <LL_ADC_REG_IsConversionOngoing>
 80014bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f040 80c9 	bne.w	800165e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f040 80c5 	bne.w	800165e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80014dc:	f043 0202 	orr.w	r2, r3, #2
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff23 	bl	8001334 <LL_ADC_IsEnabled>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d115      	bne.n	8001520 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014f4:	4862      	ldr	r0, [pc, #392]	@ (8001680 <HAL_ADC_Init+0x28c>)
 80014f6:	f7ff ff1d 	bl	8001334 <LL_ADC_IsEnabled>
 80014fa:	4604      	mov	r4, r0
 80014fc:	4861      	ldr	r0, [pc, #388]	@ (8001684 <HAL_ADC_Init+0x290>)
 80014fe:	f7ff ff19 	bl	8001334 <LL_ADC_IsEnabled>
 8001502:	4603      	mov	r3, r0
 8001504:	431c      	orrs	r4, r3
 8001506:	4860      	ldr	r0, [pc, #384]	@ (8001688 <HAL_ADC_Init+0x294>)
 8001508:	f7ff ff14 	bl	8001334 <LL_ADC_IsEnabled>
 800150c:	4603      	mov	r3, r0
 800150e:	4323      	orrs	r3, r4
 8001510:	2b00      	cmp	r3, #0
 8001512:	d105      	bne.n	8001520 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	4619      	mov	r1, r3
 800151a:	485c      	ldr	r0, [pc, #368]	@ (800168c <HAL_ADC_Init+0x298>)
 800151c:	f7ff fd6e 	bl	8000ffc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7e5b      	ldrb	r3, [r3, #25]
 8001524:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800152a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001530:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001536:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800153e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d106      	bne.n	800155c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001552:	3b01      	subs	r3, #1
 8001554:	045b      	lsls	r3, r3, #17
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001560:	2b00      	cmp	r3, #0
 8001562:	d009      	beq.n	8001578 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001568:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001570:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	4b44      	ldr	r3, [pc, #272]	@ (8001690 <HAL_ADC_Init+0x29c>)
 8001580:	4013      	ands	r3, r2
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	69b9      	ldr	r1, [r7, #24]
 8001588:	430b      	orrs	r3, r1
 800158a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff1c 	bl	80013ce <LL_ADC_INJ_IsConversionOngoing>
 8001596:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d13d      	bne.n	800161a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d13a      	bne.n	800161a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015a8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015b0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80015c0:	f023 0302 	bic.w	r3, r3, #2
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	69b9      	ldr	r1, [r7, #24]
 80015ca:	430b      	orrs	r3, r1
 80015cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d118      	bne.n	800160a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80015e2:	f023 0304 	bic.w	r3, r3, #4
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015ee:	4311      	orrs	r1, r2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80015f4:	4311      	orrs	r1, r2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80015fa:	430a      	orrs	r2, r1
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0201 	orr.w	r2, r2, #1
 8001606:	611a      	str	r2, [r3, #16]
 8001608:	e007      	b.n	800161a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0201 	bic.w	r2, r2, #1
 8001618:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d10c      	bne.n	800163c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001628:	f023 010f 	bic.w	r1, r3, #15
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	1e5a      	subs	r2, r3, #1
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	631a      	str	r2, [r3, #48]	@ 0x30
 800163a:	e007      	b.n	800164c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 020f 	bic.w	r2, r2, #15
 800164a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001650:	f023 0303 	bic.w	r3, r3, #3
 8001654:	f043 0201 	orr.w	r2, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	655a      	str	r2, [r3, #84]	@ 0x54
 800165c:	e007      	b.n	800166e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001662:	f043 0210 	orr.w	r2, r3, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800166e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3724      	adds	r7, #36	@ 0x24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd90      	pop	{r4, r7, pc}
 8001678:	20000000 	.word	0x20000000
 800167c:	053e2d63 	.word	0x053e2d63
 8001680:	50040000 	.word	0x50040000
 8001684:	50040100 	.word	0x50040100
 8001688:	50040200 	.word	0x50040200
 800168c:	50040300 	.word	0x50040300
 8001690:	fff0c007 	.word	0xfff0c007

08001694 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016a0:	4853      	ldr	r0, [pc, #332]	@ (80017f0 <HAL_ADC_Start_DMA+0x15c>)
 80016a2:	f7ff fdc3 	bl	800122c <LL_ADC_GetMultimode>
 80016a6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fe7b 	bl	80013a8 <LL_ADC_REG_IsConversionOngoing>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f040 8093 	bne.w	80017e0 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_ADC_Start_DMA+0x34>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e08e      	b.n	80017e6 <HAL_ADC_Start_DMA+0x152>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a47      	ldr	r2, [pc, #284]	@ (80017f4 <HAL_ADC_Start_DMA+0x160>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d008      	beq.n	80016ec <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	2b05      	cmp	r3, #5
 80016e4:	d002      	beq.n	80016ec <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	2b09      	cmp	r3, #9
 80016ea:	d172      	bne.n	80017d2 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 fc89 	bl	8002004 <ADC_Enable>
 80016f2:	4603      	mov	r3, r0
 80016f4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d165      	bne.n	80017c8 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001700:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a38      	ldr	r2, [pc, #224]	@ (80017f8 <HAL_ADC_Start_DMA+0x164>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d002      	beq.n	8001720 <HAL_ADC_Start_DMA+0x8c>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	e000      	b.n	8001722 <HAL_ADC_Start_DMA+0x8e>
 8001720:	4b36      	ldr	r3, [pc, #216]	@ (80017fc <HAL_ADC_Start_DMA+0x168>)
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	4293      	cmp	r3, r2
 8001728:	d002      	beq.n	8001730 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d105      	bne.n	800173c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001734:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001740:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d006      	beq.n	8001756 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174c:	f023 0206 	bic.w	r2, r3, #6
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	659a      	str	r2, [r3, #88]	@ 0x58
 8001754:	e002      	b.n	800175c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001760:	4a27      	ldr	r2, [pc, #156]	@ (8001800 <HAL_ADC_Start_DMA+0x16c>)
 8001762:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001768:	4a26      	ldr	r2, [pc, #152]	@ (8001804 <HAL_ADC_Start_DMA+0x170>)
 800176a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001770:	4a25      	ldr	r2, [pc, #148]	@ (8001808 <HAL_ADC_Start_DMA+0x174>)
 8001772:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	221c      	movs	r2, #28
 800177a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0210 	orr.w	r2, r2, #16
 8001792:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3340      	adds	r3, #64	@ 0x40
 80017ae:	4619      	mov	r1, r3
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f001 f8cc 	bl	8002950 <HAL_DMA_Start_IT>
 80017b8:	4603      	mov	r3, r0
 80017ba:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fddd 	bl	8001380 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80017c6:	e00d      	b.n	80017e4 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80017d0:	e008      	b.n	80017e4 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80017de:	e001      	b.n	80017e4 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017e0:	2302      	movs	r3, #2
 80017e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	50040300 	.word	0x50040300
 80017f4:	50040200 	.word	0x50040200
 80017f8:	50040100 	.word	0x50040100
 80017fc:	50040000 	.word	0x50040000
 8001800:	080021cf 	.word	0x080021cf
 8001804:	080022a7 	.word	0x080022a7
 8001808:	080022c3 	.word	0x080022c3

0800180c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b0b6      	sub	sp, #216	@ 0xd8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_ADC_ConfigChannel+0x22>
 800183e:	2302      	movs	r3, #2
 8001840:	e3c9      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x7b6>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fdaa 	bl	80013a8 <LL_ADC_REG_IsConversionOngoing>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	f040 83aa 	bne.w	8001fb0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b05      	cmp	r3, #5
 800186a:	d824      	bhi.n	80018b6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	3b02      	subs	r3, #2
 8001872:	2b03      	cmp	r3, #3
 8001874:	d81b      	bhi.n	80018ae <HAL_ADC_ConfigChannel+0x8e>
 8001876:	a201      	add	r2, pc, #4	@ (adr r2, 800187c <HAL_ADC_ConfigChannel+0x5c>)
 8001878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187c:	0800188d 	.word	0x0800188d
 8001880:	08001895 	.word	0x08001895
 8001884:	0800189d 	.word	0x0800189d
 8001888:	080018a5 	.word	0x080018a5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800188c:	230c      	movs	r3, #12
 800188e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001892:	e010      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001894:	2312      	movs	r3, #18
 8001896:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800189a:	e00c      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800189c:	2318      	movs	r3, #24
 800189e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80018a2:	e008      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80018a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80018ac:	e003      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80018ae:	2306      	movs	r3, #6
 80018b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80018b4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80018c4:	f7ff fc36 	bl	8001134 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fd6b 	bl	80013a8 <LL_ADC_REG_IsConversionOngoing>
 80018d2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fd77 	bl	80013ce <LL_ADC_INJ_IsConversionOngoing>
 80018e0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f040 81a4 	bne.w	8001c36 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 819f 	bne.w	8001c36 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6819      	ldr	r1, [r3, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	461a      	mov	r2, r3
 8001906:	f7ff fc41 	bl	800118c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	08db      	lsrs	r3, r3, #3
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	2b04      	cmp	r3, #4
 800192a:	d00a      	beq.n	8001942 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	6919      	ldr	r1, [r3, #16]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800193c:	f7ff fb92 	bl	8001064 <LL_ADC_SetOffset>
 8001940:	e179      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fbaf 	bl	80010ac <LL_ADC_GetOffsetChannel>
 800194e:	4603      	mov	r3, r0
 8001950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10a      	bne.n	800196e <HAL_ADC_ConfigChannel+0x14e>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fba4 	bl	80010ac <LL_ADC_GetOffsetChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	0e9b      	lsrs	r3, r3, #26
 8001968:	f003 021f 	and.w	r2, r3, #31
 800196c:	e01e      	b.n	80019ac <HAL_ADC_ConfigChannel+0x18c>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fb99 	bl	80010ac <LL_ADC_GetOffsetChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001984:	fa93 f3a3 	rbit	r3, r3
 8001988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800198c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001990:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001994:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800199c:	2320      	movs	r3, #32
 800199e:	e004      	b.n	80019aa <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80019a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80019a4:	fab3 f383 	clz	r3, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d105      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x1a4>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	0e9b      	lsrs	r3, r3, #26
 80019be:	f003 031f 	and.w	r3, r3, #31
 80019c2:	e018      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1d6>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80019d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80019e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80019e8:	2320      	movs	r3, #32
 80019ea:	e004      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80019ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80019f0:	fab3 f383 	clz	r3, r3
 80019f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d106      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fb68 	bl	80010d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fb4c 	bl	80010ac <LL_ADC_GetOffsetChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10a      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x214>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2101      	movs	r1, #1
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fb41 	bl	80010ac <LL_ADC_GetOffsetChannel>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	0e9b      	lsrs	r3, r3, #26
 8001a2e:	f003 021f 	and.w	r2, r3, #31
 8001a32:	e01e      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x252>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2101      	movs	r1, #1
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fb36 	bl	80010ac <LL_ADC_GetOffsetChannel>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001a52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001a5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001a62:	2320      	movs	r3, #32
 8001a64:	e004      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001a66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a6a:	fab3 f383 	clz	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d105      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x26a>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	0e9b      	lsrs	r3, r3, #26
 8001a84:	f003 031f 	and.w	r3, r3, #31
 8001a88:	e018      	b.n	8001abc <HAL_ADC_ConfigChannel+0x29c>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a96:	fa93 f3a3 	rbit	r3, r3
 8001a9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001a9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001aa2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001aa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001aae:	2320      	movs	r3, #32
 8001ab0:	e004      	b.n	8001abc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001ab2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d106      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fb05 	bl	80010d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fae9 	bl	80010ac <LL_ADC_GetOffsetChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10a      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x2da>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2102      	movs	r1, #2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fade 	bl	80010ac <LL_ADC_GetOffsetChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	0e9b      	lsrs	r3, r3, #26
 8001af4:	f003 021f 	and.w	r2, r3, #31
 8001af8:	e01e      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x318>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2102      	movs	r1, #2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fad3 	bl	80010ac <LL_ADC_GetOffsetChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001b18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001b28:	2320      	movs	r3, #32
 8001b2a:	e004      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b30:	fab3 f383 	clz	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d105      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x330>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	0e9b      	lsrs	r3, r3, #26
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	e014      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x35a>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001b5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001b64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	e004      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001b70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b74:	fab3 f383 	clz	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d106      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2200      	movs	r2, #0
 8001b84:	2102      	movs	r1, #2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff faa6 	bl	80010d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2103      	movs	r1, #3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fa8a 	bl	80010ac <LL_ADC_GetOffsetChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10a      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x398>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2103      	movs	r1, #3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fa7f 	bl	80010ac <LL_ADC_GetOffsetChannel>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	0e9b      	lsrs	r3, r3, #26
 8001bb2:	f003 021f 	and.w	r2, r3, #31
 8001bb6:	e017      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x3c8>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2103      	movs	r1, #3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fa74 	bl	80010ac <LL_ADC_GetOffsetChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001bd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bd2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001bd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001bda:	2320      	movs	r3, #32
 8001bdc:	e003      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001bde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001be0:	fab3 f383 	clz	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d105      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x3e0>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	0e9b      	lsrs	r3, r3, #26
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	e011      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x404>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c08:	fa93 f3a3 	rbit	r3, r3
 8001c0c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001c0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c10:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001c12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001c18:	2320      	movs	r3, #32
 8001c1a:	e003      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001c1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d106      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2103      	movs	r1, #3
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fa51 	bl	80010d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fb7a 	bl	8001334 <LL_ADC_IsEnabled>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f040 8140 	bne.w	8001ec8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6819      	ldr	r1, [r3, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	461a      	mov	r2, r3
 8001c56:	f7ff fac5 	bl	80011e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	4a8f      	ldr	r2, [pc, #572]	@ (8001e9c <HAL_ADC_ConfigChannel+0x67c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	f040 8131 	bne.w	8001ec8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10b      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x46e>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	0e9b      	lsrs	r3, r3, #26
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	f003 031f 	and.w	r3, r3, #31
 8001c82:	2b09      	cmp	r3, #9
 8001c84:	bf94      	ite	ls
 8001c86:	2301      	movls	r3, #1
 8001c88:	2300      	movhi	r3, #0
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	e019      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x4a2>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001ca0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	e003      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001caa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	2b09      	cmp	r3, #9
 8001cba:	bf94      	ite	ls
 8001cbc:	2301      	movls	r3, #1
 8001cbe:	2300      	movhi	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d079      	beq.n	8001dba <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d107      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x4c2>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	0e9b      	lsrs	r3, r3, #26
 8001cd8:	3301      	adds	r3, #1
 8001cda:	069b      	lsls	r3, r3, #26
 8001cdc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ce0:	e015      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x4ee>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001cf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cf2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	e003      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d00:	fab3 f383 	clz	r3, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	3301      	adds	r3, #1
 8001d08:	069b      	lsls	r3, r3, #26
 8001d0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d109      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x50e>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	0e9b      	lsrs	r3, r3, #26
 8001d20:	3301      	adds	r3, #1
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	2101      	movs	r1, #1
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	e017      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x53e>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d3e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001d46:	2320      	movs	r3, #32
 8001d48:	e003      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001d4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d4c:	fab3 f383 	clz	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	3301      	adds	r3, #1
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	2101      	movs	r1, #1
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	ea42 0103 	orr.w	r1, r2, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10a      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x564>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	0e9b      	lsrs	r3, r3, #26
 8001d74:	3301      	adds	r3, #1
 8001d76:	f003 021f 	and.w	r2, r3, #31
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	051b      	lsls	r3, r3, #20
 8001d82:	e018      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x596>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d94:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001d9c:	2320      	movs	r3, #32
 8001d9e:	e003      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	3301      	adds	r3, #1
 8001daa:	f003 021f 	and.w	r2, r3, #31
 8001dae:	4613      	mov	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001db6:	430b      	orrs	r3, r1
 8001db8:	e081      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d107      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x5b6>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	0e9b      	lsrs	r3, r3, #26
 8001dcc:	3301      	adds	r3, #1
 8001dce:	069b      	lsls	r3, r3, #26
 8001dd0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dd4:	e015      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x5e2>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001dee:	2320      	movs	r3, #32
 8001df0:	e003      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df4:	fab3 f383 	clz	r3, r3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	069b      	lsls	r3, r3, #26
 8001dfe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x602>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	0e9b      	lsrs	r3, r3, #26
 8001e14:	3301      	adds	r3, #1
 8001e16:	f003 031f 	and.w	r3, r3, #31
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	e017      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x632>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	61bb      	str	r3, [r7, #24]
  return result;
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001e3a:	2320      	movs	r3, #32
 8001e3c:	e003      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	fab3 f383 	clz	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	ea42 0103 	orr.w	r1, r2, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10d      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x65e>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	0e9b      	lsrs	r3, r3, #26
 8001e68:	3301      	adds	r3, #1
 8001e6a:	f003 021f 	and.w	r2, r3, #31
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	3b1e      	subs	r3, #30
 8001e76:	051b      	lsls	r3, r3, #20
 8001e78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e7c:	e01e      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x69c>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	60fb      	str	r3, [r7, #12]
  return result;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d104      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001e96:	2320      	movs	r3, #32
 8001e98:	e006      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x688>
 8001e9a:	bf00      	nop
 8001e9c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	f003 021f 	and.w	r2, r3, #31
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3b1e      	subs	r3, #30
 8001eb6:	051b      	lsls	r3, r3, #20
 8001eb8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ebc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f7ff f962 	bl	800118c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b44      	ldr	r3, [pc, #272]	@ (8001fe0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d07a      	beq.n	8001fca <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ed4:	4843      	ldr	r0, [pc, #268]	@ (8001fe4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ed6:	f7ff f8b7 	bl	8001048 <LL_ADC_GetCommonPathInternalCh>
 8001eda:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a41      	ldr	r2, [pc, #260]	@ (8001fe8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d12c      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ee8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001eec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d126      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a3c      	ldr	r2, [pc, #240]	@ (8001fec <HAL_ADC_ConfigChannel+0x7cc>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d004      	beq.n	8001f08 <HAL_ADC_ConfigChannel+0x6e8>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a3b      	ldr	r2, [pc, #236]	@ (8001ff0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d15d      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f10:	4619      	mov	r1, r3
 8001f12:	4834      	ldr	r0, [pc, #208]	@ (8001fe4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f14:	f7ff f885 	bl	8001022 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f18:	4b36      	ldr	r3, [pc, #216]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x7d4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	099b      	lsrs	r3, r3, #6
 8001f1e:	4a36      	ldr	r2, [pc, #216]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	099b      	lsrs	r3, r3, #6
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	4613      	mov	r3, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f32:	e002      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f9      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f40:	e040      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a2d      	ldr	r2, [pc, #180]	@ (8001ffc <HAL_ADC_ConfigChannel+0x7dc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d118      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d112      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a23      	ldr	r2, [pc, #140]	@ (8001fec <HAL_ADC_ConfigChannel+0x7cc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d004      	beq.n	8001f6c <HAL_ADC_ConfigChannel+0x74c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a22      	ldr	r2, [pc, #136]	@ (8001ff0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d12d      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f74:	4619      	mov	r1, r3
 8001f76:	481b      	ldr	r0, [pc, #108]	@ (8001fe4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f78:	f7ff f853 	bl	8001022 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f7c:	e024      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a1f      	ldr	r2, [pc, #124]	@ (8002000 <HAL_ADC_ConfigChannel+0x7e0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d120      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d11a      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a14      	ldr	r2, [pc, #80]	@ (8001fec <HAL_ADC_ConfigChannel+0x7cc>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d115      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fa2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480e      	ldr	r0, [pc, #56]	@ (8001fe4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001faa:	f7ff f83a 	bl	8001022 <LL_ADC_SetCommonPathInternalCh>
 8001fae:	e00c      	b.n	8001fca <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb4:	f043 0220 	orr.w	r2, r3, #32
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001fc2:	e002      	b.n	8001fca <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fc4:	bf00      	nop
 8001fc6:	e000      	b.n	8001fca <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fc8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fd2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	37d8      	adds	r7, #216	@ 0xd8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	80080000 	.word	0x80080000
 8001fe4:	50040300 	.word	0x50040300
 8001fe8:	c7520000 	.word	0xc7520000
 8001fec:	50040000 	.word	0x50040000
 8001ff0:	50040200 	.word	0x50040200
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	053e2d63 	.word	0x053e2d63
 8001ffc:	cb840000 	.word	0xcb840000
 8002000:	80000001 	.word	0x80000001

08002004 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800200c:	2300      	movs	r3, #0
 800200e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff f98d 	bl	8001334 <LL_ADC_IsEnabled>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d169      	bne.n	80020f4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	4b36      	ldr	r3, [pc, #216]	@ (8002100 <ADC_Enable+0xfc>)
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00d      	beq.n	800204a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002032:	f043 0210 	orr.w	r2, r3, #16
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203e:	f043 0201 	orr.w	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e055      	b.n	80020f6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff f948 	bl	80012e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002054:	482b      	ldr	r0, [pc, #172]	@ (8002104 <ADC_Enable+0x100>)
 8002056:	f7fe fff7 	bl	8001048 <LL_ADC_GetCommonPathInternalCh>
 800205a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800205c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002060:	2b00      	cmp	r3, #0
 8002062:	d013      	beq.n	800208c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002064:	4b28      	ldr	r3, [pc, #160]	@ (8002108 <ADC_Enable+0x104>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	099b      	lsrs	r3, r3, #6
 800206a:	4a28      	ldr	r2, [pc, #160]	@ (800210c <ADC_Enable+0x108>)
 800206c:	fba2 2303 	umull	r2, r3, r2, r3
 8002070:	099b      	lsrs	r3, r3, #6
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800207e:	e002      	b.n	8002086 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	3b01      	subs	r3, #1
 8002084:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f9      	bne.n	8002080 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800208c:	f7fe ffaa 	bl	8000fe4 <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]
    //-----------here
    //return HAL_OK;
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002092:	e028      	b.n	80020e6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff f94b 	bl	8001334 <LL_ADC_IsEnabled>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d104      	bne.n	80020ae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff f91b 	bl	80012e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020ae:	f7fe ff99 	bl	8000fe4 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d914      	bls.n	80020e6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d00d      	beq.n	80020e6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ce:	f043 0210 	orr.w	r2, r3, #16
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020da:	f043 0201 	orr.w	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e007      	b.n	80020f6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d1cf      	bne.n	8002094 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	8000003f 	.word	0x8000003f
 8002104:	50040300 	.word	0x50040300
 8002108:	20000000 	.word	0x20000000
 800210c:	053e2d63 	.word	0x053e2d63

08002110 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff f91c 	bl	800135a <LL_ADC_IsDisableOngoing>
 8002122:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff f903 	bl	8001334 <LL_ADC_IsEnabled>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d047      	beq.n	80021c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d144      	bne.n	80021c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 030d 	and.w	r3, r3, #13
 8002144:	2b01      	cmp	r3, #1
 8002146:	d10c      	bne.n	8002162 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff f8dd 	bl	800130c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2203      	movs	r2, #3
 8002158:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800215a:	f7fe ff43 	bl	8000fe4 <HAL_GetTick>
 800215e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002160:	e029      	b.n	80021b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002166:	f043 0210 	orr.w	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002172:	f043 0201 	orr.w	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e023      	b.n	80021c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800217e:	f7fe ff31 	bl	8000fe4 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d914      	bls.n	80021b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00d      	beq.n	80021b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219e:	f043 0210 	orr.w	r2, r3, #16
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021aa:	f043 0201 	orr.w	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e007      	b.n	80021c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1dc      	bne.n	800217e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021da:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d14b      	bne.n	8002280 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d021      	beq.n	8002246 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe ff81 	bl	800110e <LL_ADC_REG_IsTriggerSourceSWStart>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d032      	beq.n	8002278 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d12b      	bne.n	8002278 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002224:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002230:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d11f      	bne.n	8002278 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223c:	f043 0201 	orr.w	r2, r3, #1
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	655a      	str	r2, [r3, #84]	@ 0x54
 8002244:	e018      	b.n	8002278 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d111      	bne.n	8002278 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002258:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002264:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d105      	bne.n	8002278 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002270:	f043 0201 	orr.w	r2, r3, #1
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f7fe fac1 	bl	8000800 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800227e:	e00e      	b.n	800229e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f7ff fabd 	bl	800180c <HAL_ADC_ErrorCallback>
}
 8002292:	e004      	b.n	800229e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	4798      	blx	r3
}
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b084      	sub	sp, #16
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f7fe fab5 	bl	8000824 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b084      	sub	sp, #16
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e0:	f043 0204 	orr.w	r2, r3, #4
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f7ff fa8f 	bl	800180c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <LL_ADC_IsEnabled>:
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <LL_ADC_IsEnabled+0x18>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <LL_ADC_IsEnabled+0x1a>
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_StartCalibration>:
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800232e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002338:	4313      	orrs	r3, r2
 800233a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	609a      	str	r2, [r3, #8]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <LL_ADC_IsCalibrationOnGoing>:
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800235e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002362:	d101      	bne.n	8002368 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <LL_ADC_REG_IsConversionOngoing>:
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b04      	cmp	r3, #4
 8002388:	d101      	bne.n	800238e <LL_ADC_REG_IsConversionOngoing+0x18>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <HAL_ADCEx_Calibration_Start+0x1c>
 80023b4:	2302      	movs	r3, #2
 80023b6:	e04d      	b.n	8002454 <HAL_ADCEx_Calibration_Start+0xb8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff fea5 	bl	8002110 <ADC_Disable>
 80023c6:	4603      	mov	r3, r0
 80023c8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d136      	bne.n	800243e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023d8:	f023 0302 	bic.w	r3, r3, #2
 80023dc:	f043 0202 	orr.w	r2, r3, #2
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6839      	ldr	r1, [r7, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ff96 	bl	800231c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80023f0:	e014      	b.n	800241c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	3301      	adds	r3, #1
 80023f6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80023fe:	d30d      	bcc.n	800241c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002404:	f023 0312 	bic.w	r3, r3, #18
 8002408:	f043 0210 	orr.w	r2, r3, #16
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e01b      	b.n	8002454 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff94 	bl	800234e <LL_ADC_IsCalibrationOnGoing>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1e2      	bne.n	80023f2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002430:	f023 0303 	bic.w	r3, r3, #3
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	655a      	str	r2, [r3, #84]	@ 0x54
 800243c:	e005      	b.n	800244a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002442:	f043 0210 	orr.w	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002452:	7bfb      	ldrb	r3, [r7, #15]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b09f      	sub	sp, #124	@ 0x7c
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002476:	2302      	movs	r3, #2
 8002478:	e093      	b.n	80025a2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002482:	2300      	movs	r3, #0
 8002484:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002486:	2300      	movs	r3, #0
 8002488:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a47      	ldr	r2, [pc, #284]	@ (80025ac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d102      	bne.n	800249a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002494:	4b46      	ldr	r3, [pc, #280]	@ (80025b0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	e001      	b.n	800249e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10b      	bne.n	80024bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a8:	f043 0220 	orr.w	r2, r3, #32
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e072      	b.n	80025a2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff59 	bl	8002376 <LL_ADC_REG_IsConversionOngoing>
 80024c4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff ff53 	bl	8002376 <LL_ADC_REG_IsConversionOngoing>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d154      	bne.n	8002580 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80024d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d151      	bne.n	8002580 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80024dc:	4b35      	ldr	r3, [pc, #212]	@ (80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80024de:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d02c      	beq.n	8002542 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80024e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024fa:	035b      	lsls	r3, r3, #13
 80024fc:	430b      	orrs	r3, r1
 80024fe:	431a      	orrs	r2, r3
 8002500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002502:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002504:	4829      	ldr	r0, [pc, #164]	@ (80025ac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002506:	f7ff fef6 	bl	80022f6 <LL_ADC_IsEnabled>
 800250a:	4604      	mov	r4, r0
 800250c:	4828      	ldr	r0, [pc, #160]	@ (80025b0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800250e:	f7ff fef2 	bl	80022f6 <LL_ADC_IsEnabled>
 8002512:	4603      	mov	r3, r0
 8002514:	431c      	orrs	r4, r3
 8002516:	4828      	ldr	r0, [pc, #160]	@ (80025b8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002518:	f7ff feed 	bl	80022f6 <LL_ADC_IsEnabled>
 800251c:	4603      	mov	r3, r0
 800251e:	4323      	orrs	r3, r4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d137      	bne.n	8002594 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002524:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800252c:	f023 030f 	bic.w	r3, r3, #15
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	6811      	ldr	r1, [r2, #0]
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	6892      	ldr	r2, [r2, #8]
 8002538:	430a      	orrs	r2, r1
 800253a:	431a      	orrs	r2, r3
 800253c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800253e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002540:	e028      	b.n	8002594 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800254a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800254c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800254e:	4817      	ldr	r0, [pc, #92]	@ (80025ac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002550:	f7ff fed1 	bl	80022f6 <LL_ADC_IsEnabled>
 8002554:	4604      	mov	r4, r0
 8002556:	4816      	ldr	r0, [pc, #88]	@ (80025b0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002558:	f7ff fecd 	bl	80022f6 <LL_ADC_IsEnabled>
 800255c:	4603      	mov	r3, r0
 800255e:	431c      	orrs	r4, r3
 8002560:	4815      	ldr	r0, [pc, #84]	@ (80025b8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002562:	f7ff fec8 	bl	80022f6 <LL_ADC_IsEnabled>
 8002566:	4603      	mov	r3, r0
 8002568:	4323      	orrs	r3, r4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d112      	bne.n	8002594 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800256e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002576:	f023 030f 	bic.w	r3, r3, #15
 800257a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800257c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800257e:	e009      	b.n	8002594 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002584:	f043 0220 	orr.w	r2, r3, #32
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002592:	e000      	b.n	8002596 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002594:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800259e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	377c      	adds	r7, #124	@ 0x7c
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd90      	pop	{r4, r7, pc}
 80025aa:	bf00      	nop
 80025ac:	50040000 	.word	0x50040000
 80025b0:	50040100 	.word	0x50040100
 80025b4:	50040300 	.word	0x50040300
 80025b8:	50040200 	.word	0x50040200

080025bc <__NVIC_SetPriorityGrouping>:
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025d8:	4013      	ands	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ee:	4a04      	ldr	r2, [pc, #16]	@ (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	60d3      	str	r3, [r2, #12]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_GetPriorityGrouping>:
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002608:	4b04      	ldr	r3, [pc, #16]	@ (800261c <__NVIC_GetPriorityGrouping+0x18>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	f003 0307 	and.w	r3, r3, #7
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_EnableIRQ>:
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	2b00      	cmp	r3, #0
 8002630:	db0b      	blt.n	800264a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	4907      	ldr	r1, [pc, #28]	@ (8002658 <__NVIC_EnableIRQ+0x38>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	2001      	movs	r0, #1
 8002642:	fa00 f202 	lsl.w	r2, r0, r2
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000e100 	.word	0xe000e100

0800265c <__NVIC_SetPriority>:
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	6039      	str	r1, [r7, #0]
 8002666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266c:	2b00      	cmp	r3, #0
 800266e:	db0a      	blt.n	8002686 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	b2da      	uxtb	r2, r3
 8002674:	490c      	ldr	r1, [pc, #48]	@ (80026a8 <__NVIC_SetPriority+0x4c>)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	0112      	lsls	r2, r2, #4
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	440b      	add	r3, r1
 8002680:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002684:	e00a      	b.n	800269c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	b2da      	uxtb	r2, r3
 800268a:	4908      	ldr	r1, [pc, #32]	@ (80026ac <__NVIC_SetPriority+0x50>)
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	3b04      	subs	r3, #4
 8002694:	0112      	lsls	r2, r2, #4
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	440b      	add	r3, r1
 800269a:	761a      	strb	r2, [r3, #24]
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000e100 	.word	0xe000e100
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <NVIC_EncodePriority>:
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	@ 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f1c3 0307 	rsb	r3, r3, #7
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	bf28      	it	cs
 80026ce:	2304      	movcs	r3, #4
 80026d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3304      	adds	r3, #4
 80026d6:	2b06      	cmp	r3, #6
 80026d8:	d902      	bls.n	80026e0 <NVIC_EncodePriority+0x30>
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3b03      	subs	r3, #3
 80026de:	e000      	b.n	80026e2 <NVIC_EncodePriority+0x32>
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	f04f 32ff 	mov.w	r2, #4294967295
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	401a      	ands	r2, r3
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f8:	f04f 31ff 	mov.w	r1, #4294967295
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002702:	43d9      	mvns	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	4313      	orrs	r3, r2
}
 800270a:	4618      	mov	r0, r3
 800270c:	3724      	adds	r7, #36	@ 0x24
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002728:	d301      	bcc.n	800272e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800272a:	2301      	movs	r3, #1
 800272c:	e00f      	b.n	800274e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800272e:	4a0a      	ldr	r2, [pc, #40]	@ (8002758 <SysTick_Config+0x40>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002736:	210f      	movs	r1, #15
 8002738:	f04f 30ff 	mov.w	r0, #4294967295
 800273c:	f7ff ff8e 	bl	800265c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002740:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <SysTick_Config+0x40>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002746:	4b04      	ldr	r3, [pc, #16]	@ (8002758 <SysTick_Config+0x40>)
 8002748:	2207      	movs	r2, #7
 800274a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	e000e010 	.word	0xe000e010

0800275c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff ff29 	bl	80025bc <__NVIC_SetPriorityGrouping>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b086      	sub	sp, #24
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002784:	f7ff ff3e 	bl	8002604 <__NVIC_GetPriorityGrouping>
 8002788:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	6978      	ldr	r0, [r7, #20]
 8002790:	f7ff ff8e 	bl	80026b0 <NVIC_EncodePriority>
 8002794:	4602      	mov	r2, r0
 8002796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff5d 	bl	800265c <__NVIC_SetPriority>
}
 80027a2:	bf00      	nop
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff31 	bl	8002620 <__NVIC_EnableIRQ>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ffa2 	bl	8002718 <SysTick_Config>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e098      	b.n	8002924 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002930 <HAL_DMA_Init+0x150>)
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d80f      	bhi.n	800281e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	4b4b      	ldr	r3, [pc, #300]	@ (8002934 <HAL_DMA_Init+0x154>)
 8002806:	4413      	add	r3, r2
 8002808:	4a4b      	ldr	r2, [pc, #300]	@ (8002938 <HAL_DMA_Init+0x158>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	009a      	lsls	r2, r3, #2
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a48      	ldr	r2, [pc, #288]	@ (800293c <HAL_DMA_Init+0x15c>)
 800281a:	641a      	str	r2, [r3, #64]	@ 0x40
 800281c:	e00e      	b.n	800283c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	4b46      	ldr	r3, [pc, #280]	@ (8002940 <HAL_DMA_Init+0x160>)
 8002826:	4413      	add	r3, r2
 8002828:	4a43      	ldr	r2, [pc, #268]	@ (8002938 <HAL_DMA_Init+0x158>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	009a      	lsls	r2, r3, #2
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a42      	ldr	r2, [pc, #264]	@ (8002944 <HAL_DMA_Init+0x164>)
 800283a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002856:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002860:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002878:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002896:	d039      	beq.n	800290c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	4a27      	ldr	r2, [pc, #156]	@ (800293c <HAL_DMA_Init+0x15c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d11a      	bne.n	80028d8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028a2:	4b29      	ldr	r3, [pc, #164]	@ (8002948 <HAL_DMA_Init+0x168>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028aa:	f003 031c 	and.w	r3, r3, #28
 80028ae:	210f      	movs	r1, #15
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	4924      	ldr	r1, [pc, #144]	@ (8002948 <HAL_DMA_Init+0x168>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028bc:	4b22      	ldr	r3, [pc, #136]	@ (8002948 <HAL_DMA_Init+0x168>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c8:	f003 031c 	and.w	r3, r3, #28
 80028cc:	fa01 f303 	lsl.w	r3, r1, r3
 80028d0:	491d      	ldr	r1, [pc, #116]	@ (8002948 <HAL_DMA_Init+0x168>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
 80028d6:	e019      	b.n	800290c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028d8:	4b1c      	ldr	r3, [pc, #112]	@ (800294c <HAL_DMA_Init+0x16c>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e0:	f003 031c 	and.w	r3, r3, #28
 80028e4:	210f      	movs	r1, #15
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	4917      	ldr	r1, [pc, #92]	@ (800294c <HAL_DMA_Init+0x16c>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028f2:	4b16      	ldr	r3, [pc, #88]	@ (800294c <HAL_DMA_Init+0x16c>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6859      	ldr	r1, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fe:	f003 031c 	and.w	r3, r3, #28
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	4911      	ldr	r1, [pc, #68]	@ (800294c <HAL_DMA_Init+0x16c>)
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	40020407 	.word	0x40020407
 8002934:	bffdfff8 	.word	0xbffdfff8
 8002938:	cccccccd 	.word	0xcccccccd
 800293c:	40020000 	.word	0x40020000
 8002940:	bffdfbf8 	.word	0xbffdfbf8
 8002944:	40020400 	.word	0x40020400
 8002948:	400200a8 	.word	0x400200a8
 800294c:	400204a8 	.word	0x400204a8

08002950 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_DMA_Start_IT+0x20>
 800296c:	2302      	movs	r3, #2
 800296e:	e04b      	b.n	8002a08 <HAL_DMA_Start_IT+0xb8>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d13a      	bne.n	80029fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68b9      	ldr	r1, [r7, #8]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f8e0 	bl	8002b6e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 020e 	orr.w	r2, r2, #14
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	e00f      	b.n	80029e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0204 	bic.w	r2, r2, #4
 80029d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 020a 	orr.w	r2, r2, #10
 80029e6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e005      	b.n	8002a06 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
 8002a04:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2c:	f003 031c 	and.w	r3, r3, #28
 8002a30:	2204      	movs	r2, #4
 8002a32:	409a      	lsls	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d026      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x7a>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d021      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d107      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0204 	bic.w	r2, r2, #4
 8002a62:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a68:	f003 021c 	and.w	r2, r3, #28
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a70:	2104      	movs	r1, #4
 8002a72:	fa01 f202 	lsl.w	r2, r1, r2
 8002a76:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d071      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a88:	e06c      	b.n	8002b64 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	f003 031c 	and.w	r3, r3, #28
 8002a92:	2202      	movs	r2, #2
 8002a94:	409a      	lsls	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d02e      	beq.n	8002afc <HAL_DMA_IRQHandler+0xec>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d029      	beq.n	8002afc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10b      	bne.n	8002ace <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 020a 	bic.w	r2, r2, #10
 8002ac4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	f003 021c 	and.w	r2, r3, #28
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	2102      	movs	r1, #2
 8002adc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d038      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002afa:	e033      	b.n	8002b64 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b00:	f003 031c 	and.w	r3, r3, #28
 8002b04:	2208      	movs	r2, #8
 8002b06:	409a      	lsls	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d02a      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x156>
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d025      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 020e 	bic.w	r2, r2, #14
 8002b28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2e:	f003 021c 	and.w	r2, r3, #28
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	2101      	movs	r1, #1
 8002b38:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d004      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop
}
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b80:	f003 021c 	and.w	r2, r3, #28
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	2101      	movs	r1, #1
 8002b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b10      	cmp	r3, #16
 8002b9e:	d108      	bne.n	8002bb2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bb0:	e007      	b.n	8002bc2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	60da      	str	r2, [r3, #12]
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bde:	e17f      	b.n	8002ee0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	2101      	movs	r1, #1
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bec:	4013      	ands	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 8171 	beq.w	8002eda <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d005      	beq.n	8002c10 <HAL_GPIO_Init+0x40>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d130      	bne.n	8002c72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c46:	2201      	movs	r2, #1
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4013      	ands	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	f003 0201 	and.w	r2, r3, #1
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d118      	bne.n	8002cb0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c84:	2201      	movs	r2, #1
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	08db      	lsrs	r3, r3, #3
 8002c9a:	f003 0201 	and.w	r2, r3, #1
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d017      	beq.n	8002cec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d123      	bne.n	8002d40 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	08da      	lsrs	r2, r3, #3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3208      	adds	r2, #8
 8002d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	220f      	movs	r2, #15
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	08da      	lsrs	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3208      	adds	r2, #8
 8002d3a:	6939      	ldr	r1, [r7, #16]
 8002d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0203 	and.w	r2, r3, #3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80ac 	beq.w	8002eda <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d82:	4b5f      	ldr	r3, [pc, #380]	@ (8002f00 <HAL_GPIO_Init+0x330>)
 8002d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d86:	4a5e      	ldr	r2, [pc, #376]	@ (8002f00 <HAL_GPIO_Init+0x330>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d8e:	4b5c      	ldr	r3, [pc, #368]	@ (8002f00 <HAL_GPIO_Init+0x330>)
 8002d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d9a:	4a5a      	ldr	r2, [pc, #360]	@ (8002f04 <HAL_GPIO_Init+0x334>)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	089b      	lsrs	r3, r3, #2
 8002da0:	3302      	adds	r3, #2
 8002da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	220f      	movs	r2, #15
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002dc4:	d025      	beq.n	8002e12 <HAL_GPIO_Init+0x242>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4f      	ldr	r2, [pc, #316]	@ (8002f08 <HAL_GPIO_Init+0x338>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01f      	beq.n	8002e0e <HAL_GPIO_Init+0x23e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4e      	ldr	r2, [pc, #312]	@ (8002f0c <HAL_GPIO_Init+0x33c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d019      	beq.n	8002e0a <HAL_GPIO_Init+0x23a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a4d      	ldr	r2, [pc, #308]	@ (8002f10 <HAL_GPIO_Init+0x340>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d013      	beq.n	8002e06 <HAL_GPIO_Init+0x236>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a4c      	ldr	r2, [pc, #304]	@ (8002f14 <HAL_GPIO_Init+0x344>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00d      	beq.n	8002e02 <HAL_GPIO_Init+0x232>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a4b      	ldr	r2, [pc, #300]	@ (8002f18 <HAL_GPIO_Init+0x348>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d007      	beq.n	8002dfe <HAL_GPIO_Init+0x22e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a4a      	ldr	r2, [pc, #296]	@ (8002f1c <HAL_GPIO_Init+0x34c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d101      	bne.n	8002dfa <HAL_GPIO_Init+0x22a>
 8002df6:	2306      	movs	r3, #6
 8002df8:	e00c      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002dfa:	2307      	movs	r3, #7
 8002dfc:	e00a      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002dfe:	2305      	movs	r3, #5
 8002e00:	e008      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002e02:	2304      	movs	r3, #4
 8002e04:	e006      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002e06:	2303      	movs	r3, #3
 8002e08:	e004      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e002      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_GPIO_Init+0x244>
 8002e12:	2300      	movs	r3, #0
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	f002 0203 	and.w	r2, r2, #3
 8002e1a:	0092      	lsls	r2, r2, #2
 8002e1c:	4093      	lsls	r3, r2
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e24:	4937      	ldr	r1, [pc, #220]	@ (8002f04 <HAL_GPIO_Init+0x334>)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	089b      	lsrs	r3, r3, #2
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e32:	4b3b      	ldr	r3, [pc, #236]	@ (8002f20 <HAL_GPIO_Init+0x350>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e56:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <HAL_GPIO_Init+0x350>)
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e5c:	4b30      	ldr	r3, [pc, #192]	@ (8002f20 <HAL_GPIO_Init+0x350>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	43db      	mvns	r3, r3
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e80:	4a27      	ldr	r2, [pc, #156]	@ (8002f20 <HAL_GPIO_Init+0x350>)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e86:	4b26      	ldr	r3, [pc, #152]	@ (8002f20 <HAL_GPIO_Init+0x350>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4013      	ands	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002eaa:	4a1d      	ldr	r2, [pc, #116]	@ (8002f20 <HAL_GPIO_Init+0x350>)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f20 <HAL_GPIO_Init+0x350>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ed4:	4a12      	ldr	r2, [pc, #72]	@ (8002f20 <HAL_GPIO_Init+0x350>)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	3301      	adds	r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f47f ae78 	bne.w	8002be0 <HAL_GPIO_Init+0x10>
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	bf00      	nop
 8002ef4:	371c      	adds	r7, #28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40010000 	.word	0x40010000
 8002f08:	48000400 	.word	0x48000400
 8002f0c:	48000800 	.word	0x48000800
 8002f10:	48000c00 	.word	0x48000c00
 8002f14:	48001000 	.word	0x48001000
 8002f18:	48001400 	.word	0x48001400
 8002f1c:	48001800 	.word	0x48001800
 8002f20:	40010400 	.word	0x40010400

08002f24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f2e:	4b08      	ldr	r3, [pc, #32]	@ (8002f50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d006      	beq.n	8002f48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f3a:	4a05      	ldr	r2, [pc, #20]	@ (8002f50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f3c:	88fb      	ldrh	r3, [r7, #6]
 8002f3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f40:	88fb      	ldrh	r3, [r7, #6]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f806 	bl	8002f54 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40010400 	.word	0x40010400

08002f54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f70:	4b04      	ldr	r3, [pc, #16]	@ (8002f84 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40007000 	.word	0x40007000

08002f88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f96:	d130      	bne.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f98:	4b23      	ldr	r3, [pc, #140]	@ (8003028 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fa4:	d038      	beq.n	8003018 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fa6:	4b20      	ldr	r3, [pc, #128]	@ (8003028 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fae:	4a1e      	ldr	r2, [pc, #120]	@ (8003028 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fb4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800302c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2232      	movs	r2, #50	@ 0x32
 8002fbc:	fb02 f303 	mul.w	r3, r2, r3
 8002fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8003030 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	0c9b      	lsrs	r3, r3, #18
 8002fc8:	3301      	adds	r3, #1
 8002fca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fcc:	e002      	b.n	8002fd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fd4:	4b14      	ldr	r3, [pc, #80]	@ (8003028 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe0:	d102      	bne.n	8002fe8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f2      	bne.n	8002fce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8003028 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff4:	d110      	bne.n	8003018 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e00f      	b.n	800301a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8003028 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003006:	d007      	beq.n	8003018 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003008:	4b07      	ldr	r3, [pc, #28]	@ (8003028 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003010:	4a05      	ldr	r2, [pc, #20]	@ (8003028 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003012:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003016:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40007000 	.word	0x40007000
 800302c:	20000000 	.word	0x20000000
 8003030:	431bde83 	.word	0x431bde83

08003034 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e3ca      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003046:	4b97      	ldr	r3, [pc, #604]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003050:	4b94      	ldr	r3, [pc, #592]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0310 	and.w	r3, r3, #16
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 80e4 	beq.w	8003230 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d007      	beq.n	800307e <HAL_RCC_OscConfig+0x4a>
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	2b0c      	cmp	r3, #12
 8003072:	f040 808b 	bne.w	800318c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2b01      	cmp	r3, #1
 800307a:	f040 8087 	bne.w	800318c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800307e:	4b89      	ldr	r3, [pc, #548]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_RCC_OscConfig+0x62>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e3a2      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1a      	ldr	r2, [r3, #32]
 800309a:	4b82      	ldr	r3, [pc, #520]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d004      	beq.n	80030b0 <HAL_RCC_OscConfig+0x7c>
 80030a6:	4b7f      	ldr	r3, [pc, #508]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030ae:	e005      	b.n	80030bc <HAL_RCC_OscConfig+0x88>
 80030b0:	4b7c      	ldr	r3, [pc, #496]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80030b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030b6:	091b      	lsrs	r3, r3, #4
 80030b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030bc:	4293      	cmp	r3, r2
 80030be:	d223      	bcs.n	8003108 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 fd55 	bl	8003b74 <RCC_SetFlashLatencyFromMSIRange>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e383      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d4:	4b73      	ldr	r3, [pc, #460]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a72      	ldr	r2, [pc, #456]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80030da:	f043 0308 	orr.w	r3, r3, #8
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	4b70      	ldr	r3, [pc, #448]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	496d      	ldr	r1, [pc, #436]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f2:	4b6c      	ldr	r3, [pc, #432]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	021b      	lsls	r3, r3, #8
 8003100:	4968      	ldr	r1, [pc, #416]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003102:	4313      	orrs	r3, r2
 8003104:	604b      	str	r3, [r1, #4]
 8003106:	e025      	b.n	8003154 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003108:	4b66      	ldr	r3, [pc, #408]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a65      	ldr	r2, [pc, #404]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 800310e:	f043 0308 	orr.w	r3, r3, #8
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	4b63      	ldr	r3, [pc, #396]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4960      	ldr	r1, [pc, #384]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003126:	4b5f      	ldr	r3, [pc, #380]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	495b      	ldr	r1, [pc, #364]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d109      	bne.n	8003154 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fd15 	bl	8003b74 <RCC_SetFlashLatencyFromMSIRange>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e343      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003154:	f000 fc4a 	bl	80039ec <HAL_RCC_GetSysClockFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b52      	ldr	r3, [pc, #328]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	091b      	lsrs	r3, r3, #4
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	4950      	ldr	r1, [pc, #320]	@ (80032a8 <HAL_RCC_OscConfig+0x274>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
 8003170:	4a4e      	ldr	r2, [pc, #312]	@ (80032ac <HAL_RCC_OscConfig+0x278>)
 8003172:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003174:	4b4e      	ldr	r3, [pc, #312]	@ (80032b0 <HAL_RCC_OscConfig+0x27c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd fee3 	bl	8000f44 <HAL_InitTick>
 800317e:	4603      	mov	r3, r0
 8003180:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d052      	beq.n	800322e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	e327      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d032      	beq.n	80031fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003194:	4b43      	ldr	r3, [pc, #268]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a42      	ldr	r2, [pc, #264]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031a0:	f7fd ff20 	bl	8000fe4 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031a8:	f7fd ff1c 	bl	8000fe4 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e310      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ba:	4b3a      	ldr	r3, [pc, #232]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031c6:	4b37      	ldr	r3, [pc, #220]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a36      	ldr	r2, [pc, #216]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80031cc:	f043 0308 	orr.w	r3, r3, #8
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	4b34      	ldr	r3, [pc, #208]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	4931      	ldr	r1, [pc, #196]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031e4:	4b2f      	ldr	r3, [pc, #188]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	492c      	ldr	r1, [pc, #176]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]
 80031f8:	e01a      	b.n	8003230 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031fa:	4b2a      	ldr	r3, [pc, #168]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a29      	ldr	r2, [pc, #164]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003206:	f7fd feed 	bl	8000fe4 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800320e:	f7fd fee9 	bl	8000fe4 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e2dd      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003220:	4b20      	ldr	r3, [pc, #128]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f0      	bne.n	800320e <HAL_RCC_OscConfig+0x1da>
 800322c:	e000      	b.n	8003230 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800322e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d074      	beq.n	8003326 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	2b08      	cmp	r3, #8
 8003240:	d005      	beq.n	800324e <HAL_RCC_OscConfig+0x21a>
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	2b0c      	cmp	r3, #12
 8003246:	d10e      	bne.n	8003266 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d10b      	bne.n	8003266 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324e:	4b15      	ldr	r3, [pc, #84]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d064      	beq.n	8003324 <HAL_RCC_OscConfig+0x2f0>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d160      	bne.n	8003324 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e2ba      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800326e:	d106      	bne.n	800327e <HAL_RCC_OscConfig+0x24a>
 8003270:	4b0c      	ldr	r3, [pc, #48]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0b      	ldr	r2, [pc, #44]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003276:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	e026      	b.n	80032cc <HAL_RCC_OscConfig+0x298>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003286:	d115      	bne.n	80032b4 <HAL_RCC_OscConfig+0x280>
 8003288:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a05      	ldr	r2, [pc, #20]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 800328e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b03      	ldr	r3, [pc, #12]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a02      	ldr	r2, [pc, #8]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 800329a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	e014      	b.n	80032cc <HAL_RCC_OscConfig+0x298>
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	08009300 	.word	0x08009300
 80032ac:	20000000 	.word	0x20000000
 80032b0:	20000004 	.word	0x20000004
 80032b4:	4ba0      	ldr	r3, [pc, #640]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a9f      	ldr	r2, [pc, #636]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80032ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	4b9d      	ldr	r3, [pc, #628]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a9c      	ldr	r2, [pc, #624]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80032c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d013      	beq.n	80032fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fd fe86 	bl	8000fe4 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032dc:	f7fd fe82 	bl	8000fe4 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b64      	cmp	r3, #100	@ 0x64
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e276      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ee:	4b92      	ldr	r3, [pc, #584]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x2a8>
 80032fa:	e014      	b.n	8003326 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fd fe72 	bl	8000fe4 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003304:	f7fd fe6e 	bl	8000fe4 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	@ 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e262      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003316:	4b88      	ldr	r3, [pc, #544]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x2d0>
 8003322:	e000      	b.n	8003326 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d060      	beq.n	80033f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	2b04      	cmp	r3, #4
 8003336:	d005      	beq.n	8003344 <HAL_RCC_OscConfig+0x310>
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b0c      	cmp	r3, #12
 800333c:	d119      	bne.n	8003372 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b02      	cmp	r3, #2
 8003342:	d116      	bne.n	8003372 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003344:	4b7c      	ldr	r3, [pc, #496]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_RCC_OscConfig+0x328>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e23f      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335c:	4b76      	ldr	r3, [pc, #472]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	061b      	lsls	r3, r3, #24
 800336a:	4973      	ldr	r1, [pc, #460]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800336c:	4313      	orrs	r3, r2
 800336e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003370:	e040      	b.n	80033f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d023      	beq.n	80033c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800337a:	4b6f      	ldr	r3, [pc, #444]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a6e      	ldr	r2, [pc, #440]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 8003380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003386:	f7fd fe2d 	bl	8000fe4 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338e:	f7fd fe29 	bl	8000fe4 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e21d      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033a0:	4b65      	ldr	r3, [pc, #404]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ac:	4b62      	ldr	r3, [pc, #392]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	061b      	lsls	r3, r3, #24
 80033ba:	495f      	ldr	r1, [pc, #380]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	604b      	str	r3, [r1, #4]
 80033c0:	e018      	b.n	80033f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a5c      	ldr	r2, [pc, #368]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80033c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ce:	f7fd fe09 	bl	8000fe4 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d6:	f7fd fe05 	bl	8000fe4 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e1f9      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033e8:	4b53      	ldr	r3, [pc, #332]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f0      	bne.n	80033d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d03c      	beq.n	800347a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01c      	beq.n	8003442 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003408:	4b4b      	ldr	r3, [pc, #300]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800340a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800340e:	4a4a      	ldr	r2, [pc, #296]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003418:	f7fd fde4 	bl	8000fe4 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003420:	f7fd fde0 	bl	8000fe4 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e1d4      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003432:	4b41      	ldr	r3, [pc, #260]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 8003434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0ef      	beq.n	8003420 <HAL_RCC_OscConfig+0x3ec>
 8003440:	e01b      	b.n	800347a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003442:	4b3d      	ldr	r3, [pc, #244]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 8003444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003448:	4a3b      	ldr	r2, [pc, #236]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800344a:	f023 0301 	bic.w	r3, r3, #1
 800344e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003452:	f7fd fdc7 	bl	8000fe4 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800345a:	f7fd fdc3 	bl	8000fe4 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e1b7      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800346c:	4b32      	ldr	r3, [pc, #200]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800346e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1ef      	bne.n	800345a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80a6 	beq.w	80035d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003488:	2300      	movs	r3, #0
 800348a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800348c:	4b2a      	ldr	r3, [pc, #168]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10d      	bne.n	80034b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003498:	4b27      	ldr	r3, [pc, #156]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800349a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349c:	4a26      	ldr	r2, [pc, #152]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800349e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80034a4:	4b24      	ldr	r3, [pc, #144]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80034a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034b0:	2301      	movs	r3, #1
 80034b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b4:	4b21      	ldr	r3, [pc, #132]	@ (800353c <HAL_RCC_OscConfig+0x508>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d118      	bne.n	80034f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034c0:	4b1e      	ldr	r3, [pc, #120]	@ (800353c <HAL_RCC_OscConfig+0x508>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1d      	ldr	r2, [pc, #116]	@ (800353c <HAL_RCC_OscConfig+0x508>)
 80034c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034cc:	f7fd fd8a 	bl	8000fe4 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d4:	f7fd fd86 	bl	8000fe4 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e17a      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034e6:	4b15      	ldr	r3, [pc, #84]	@ (800353c <HAL_RCC_OscConfig+0x508>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d108      	bne.n	800350c <HAL_RCC_OscConfig+0x4d8>
 80034fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80034fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003500:	4a0d      	ldr	r2, [pc, #52]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800350a:	e029      	b.n	8003560 <HAL_RCC_OscConfig+0x52c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2b05      	cmp	r3, #5
 8003512:	d115      	bne.n	8003540 <HAL_RCC_OscConfig+0x50c>
 8003514:	4b08      	ldr	r3, [pc, #32]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351a:	4a07      	ldr	r2, [pc, #28]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800351c:	f043 0304 	orr.w	r3, r3, #4
 8003520:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003524:	4b04      	ldr	r3, [pc, #16]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352a:	4a03      	ldr	r2, [pc, #12]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003534:	e014      	b.n	8003560 <HAL_RCC_OscConfig+0x52c>
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000
 800353c:	40007000 	.word	0x40007000
 8003540:	4b9c      	ldr	r3, [pc, #624]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003546:	4a9b      	ldr	r2, [pc, #620]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003550:	4b98      	ldr	r3, [pc, #608]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003556:	4a97      	ldr	r2, [pc, #604]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 8003558:	f023 0304 	bic.w	r3, r3, #4
 800355c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d016      	beq.n	8003596 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003568:	f7fd fd3c 	bl	8000fe4 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800356e:	e00a      	b.n	8003586 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003570:	f7fd fd38 	bl	8000fe4 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357e:	4293      	cmp	r3, r2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e12a      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003586:	4b8b      	ldr	r3, [pc, #556]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0ed      	beq.n	8003570 <HAL_RCC_OscConfig+0x53c>
 8003594:	e015      	b.n	80035c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003596:	f7fd fd25 	bl	8000fe4 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800359c:	e00a      	b.n	80035b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7fd fd21 	bl	8000fe4 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e113      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035b4:	4b7f      	ldr	r3, [pc, #508]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1ed      	bne.n	800359e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035c2:	7ffb      	ldrb	r3, [r7, #31]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d105      	bne.n	80035d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c8:	4b7a      	ldr	r3, [pc, #488]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 80035ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035cc:	4a79      	ldr	r2, [pc, #484]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 80035ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035d2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 80fe 	beq.w	80037da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	f040 80d0 	bne.w	8003788 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035e8:	4b72      	ldr	r3, [pc, #456]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f003 0203 	and.w	r2, r3, #3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d130      	bne.n	800365e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003606:	3b01      	subs	r3, #1
 8003608:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d127      	bne.n	800365e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003618:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800361a:	429a      	cmp	r2, r3
 800361c:	d11f      	bne.n	800365e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003628:	2a07      	cmp	r2, #7
 800362a:	bf14      	ite	ne
 800362c:	2201      	movne	r2, #1
 800362e:	2200      	moveq	r2, #0
 8003630:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003632:	4293      	cmp	r3, r2
 8003634:	d113      	bne.n	800365e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	3b01      	subs	r3, #1
 8003644:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d109      	bne.n	800365e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	085b      	lsrs	r3, r3, #1
 8003656:	3b01      	subs	r3, #1
 8003658:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d06e      	beq.n	800373c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	2b0c      	cmp	r3, #12
 8003662:	d069      	beq.n	8003738 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003664:	4b53      	ldr	r3, [pc, #332]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d105      	bne.n	800367c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003670:	4b50      	ldr	r3, [pc, #320]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0ad      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003680:	4b4c      	ldr	r3, [pc, #304]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a4b      	ldr	r2, [pc, #300]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 8003686:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800368a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800368c:	f7fd fcaa 	bl	8000fe4 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003694:	f7fd fca6 	bl	8000fe4 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e09a      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a6:	4b43      	ldr	r3, [pc, #268]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b2:	4b40      	ldr	r3, [pc, #256]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	4b40      	ldr	r3, [pc, #256]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036c2:	3a01      	subs	r2, #1
 80036c4:	0112      	lsls	r2, r2, #4
 80036c6:	4311      	orrs	r1, r2
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036cc:	0212      	lsls	r2, r2, #8
 80036ce:	4311      	orrs	r1, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036d4:	0852      	lsrs	r2, r2, #1
 80036d6:	3a01      	subs	r2, #1
 80036d8:	0552      	lsls	r2, r2, #21
 80036da:	4311      	orrs	r1, r2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80036e0:	0852      	lsrs	r2, r2, #1
 80036e2:	3a01      	subs	r2, #1
 80036e4:	0652      	lsls	r2, r2, #25
 80036e6:	4311      	orrs	r1, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036ec:	0912      	lsrs	r2, r2, #4
 80036ee:	0452      	lsls	r2, r2, #17
 80036f0:	430a      	orrs	r2, r1
 80036f2:	4930      	ldr	r1, [pc, #192]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036f8:	4b2e      	ldr	r3, [pc, #184]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a2d      	ldr	r2, [pc, #180]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 80036fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003702:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003704:	4b2b      	ldr	r3, [pc, #172]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a2a      	ldr	r2, [pc, #168]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 800370a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800370e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003710:	f7fd fc68 	bl	8000fe4 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003718:	f7fd fc64 	bl	8000fe4 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e058      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372a:	4b22      	ldr	r3, [pc, #136]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003736:	e050      	b.n	80037da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e04f      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373c:	4b1d      	ldr	r3, [pc, #116]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d148      	bne.n	80037da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003748:	4b1a      	ldr	r3, [pc, #104]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a19      	ldr	r2, [pc, #100]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 800374e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003752:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003754:	4b17      	ldr	r3, [pc, #92]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4a16      	ldr	r2, [pc, #88]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 800375a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800375e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003760:	f7fd fc40 	bl	8000fe4 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003768:	f7fd fc3c 	bl	8000fe4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e030      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377a:	4b0e      	ldr	r3, [pc, #56]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0x734>
 8003786:	e028      	b.n	80037da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2b0c      	cmp	r3, #12
 800378c:	d023      	beq.n	80037d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378e:	4b09      	ldr	r3, [pc, #36]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a08      	ldr	r2, [pc, #32]	@ (80037b4 <HAL_RCC_OscConfig+0x780>)
 8003794:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379a:	f7fd fc23 	bl	8000fe4 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037a0:	e00c      	b.n	80037bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a2:	f7fd fc1f 	bl	8000fe4 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d905      	bls.n	80037bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e013      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
 80037b4:	40021000 	.word	0x40021000
 80037b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037bc:	4b09      	ldr	r3, [pc, #36]	@ (80037e4 <HAL_RCC_OscConfig+0x7b0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1ec      	bne.n	80037a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037c8:	4b06      	ldr	r3, [pc, #24]	@ (80037e4 <HAL_RCC_OscConfig+0x7b0>)
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	4905      	ldr	r1, [pc, #20]	@ (80037e4 <HAL_RCC_OscConfig+0x7b0>)
 80037ce:	4b06      	ldr	r3, [pc, #24]	@ (80037e8 <HAL_RCC_OscConfig+0x7b4>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	60cb      	str	r3, [r1, #12]
 80037d4:	e001      	b.n	80037da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40021000 	.word	0x40021000
 80037e8:	feeefffc 	.word	0xfeeefffc

080037ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0e7      	b.n	80039d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003800:	4b75      	ldr	r3, [pc, #468]	@ (80039d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d910      	bls.n	8003830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	4b72      	ldr	r3, [pc, #456]	@ (80039d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f023 0207 	bic.w	r2, r3, #7
 8003816:	4970      	ldr	r1, [pc, #448]	@ (80039d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381e:	4b6e      	ldr	r3, [pc, #440]	@ (80039d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0cf      	b.n	80039d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d010      	beq.n	800385e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	4b66      	ldr	r3, [pc, #408]	@ (80039dc <HAL_RCC_ClockConfig+0x1f0>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003848:	429a      	cmp	r2, r3
 800384a:	d908      	bls.n	800385e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800384c:	4b63      	ldr	r3, [pc, #396]	@ (80039dc <HAL_RCC_ClockConfig+0x1f0>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	4960      	ldr	r1, [pc, #384]	@ (80039dc <HAL_RCC_ClockConfig+0x1f0>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d04c      	beq.n	8003904 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b03      	cmp	r3, #3
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003872:	4b5a      	ldr	r3, [pc, #360]	@ (80039dc <HAL_RCC_ClockConfig+0x1f0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d121      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e0a6      	b.n	80039d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d107      	bne.n	800389a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800388a:	4b54      	ldr	r3, [pc, #336]	@ (80039dc <HAL_RCC_ClockConfig+0x1f0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d115      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e09a      	b.n	80039d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d107      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038a2:	4b4e      	ldr	r3, [pc, #312]	@ (80039dc <HAL_RCC_ClockConfig+0x1f0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e08e      	b.n	80039d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b2:	4b4a      	ldr	r3, [pc, #296]	@ (80039dc <HAL_RCC_ClockConfig+0x1f0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e086      	b.n	80039d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038c2:	4b46      	ldr	r3, [pc, #280]	@ (80039dc <HAL_RCC_ClockConfig+0x1f0>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f023 0203 	bic.w	r2, r3, #3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4943      	ldr	r1, [pc, #268]	@ (80039dc <HAL_RCC_ClockConfig+0x1f0>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d4:	f7fd fb86 	bl	8000fe4 <HAL_GetTick>
 80038d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038dc:	f7fd fb82 	bl	8000fe4 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e06e      	b.n	80039d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f2:	4b3a      	ldr	r3, [pc, #232]	@ (80039dc <HAL_RCC_ClockConfig+0x1f0>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 020c 	and.w	r2, r3, #12
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	429a      	cmp	r2, r3
 8003902:	d1eb      	bne.n	80038dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d010      	beq.n	8003932 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	4b31      	ldr	r3, [pc, #196]	@ (80039dc <HAL_RCC_ClockConfig+0x1f0>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800391c:	429a      	cmp	r2, r3
 800391e:	d208      	bcs.n	8003932 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003920:	4b2e      	ldr	r3, [pc, #184]	@ (80039dc <HAL_RCC_ClockConfig+0x1f0>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	492b      	ldr	r1, [pc, #172]	@ (80039dc <HAL_RCC_ClockConfig+0x1f0>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003932:	4b29      	ldr	r3, [pc, #164]	@ (80039d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d210      	bcs.n	8003962 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003940:	4b25      	ldr	r3, [pc, #148]	@ (80039d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f023 0207 	bic.w	r2, r3, #7
 8003948:	4923      	ldr	r1, [pc, #140]	@ (80039d8 <HAL_RCC_ClockConfig+0x1ec>)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	4313      	orrs	r3, r2
 800394e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003950:	4b21      	ldr	r3, [pc, #132]	@ (80039d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d001      	beq.n	8003962 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e036      	b.n	80039d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b00      	cmp	r3, #0
 800396c:	d008      	beq.n	8003980 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800396e:	4b1b      	ldr	r3, [pc, #108]	@ (80039dc <HAL_RCC_ClockConfig+0x1f0>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	4918      	ldr	r1, [pc, #96]	@ (80039dc <HAL_RCC_ClockConfig+0x1f0>)
 800397c:	4313      	orrs	r3, r2
 800397e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d009      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800398c:	4b13      	ldr	r3, [pc, #76]	@ (80039dc <HAL_RCC_ClockConfig+0x1f0>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4910      	ldr	r1, [pc, #64]	@ (80039dc <HAL_RCC_ClockConfig+0x1f0>)
 800399c:	4313      	orrs	r3, r2
 800399e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039a0:	f000 f824 	bl	80039ec <HAL_RCC_GetSysClockFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b0d      	ldr	r3, [pc, #52]	@ (80039dc <HAL_RCC_ClockConfig+0x1f0>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	490b      	ldr	r1, [pc, #44]	@ (80039e0 <HAL_RCC_ClockConfig+0x1f4>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
 80039bc:	4a09      	ldr	r2, [pc, #36]	@ (80039e4 <HAL_RCC_ClockConfig+0x1f8>)
 80039be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039c0:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <HAL_RCC_ClockConfig+0x1fc>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fd fabd 	bl	8000f44 <HAL_InitTick>
 80039ca:	4603      	mov	r3, r0
 80039cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80039ce:	7afb      	ldrb	r3, [r7, #11]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40022000 	.word	0x40022000
 80039dc:	40021000 	.word	0x40021000
 80039e0:	08009300 	.word	0x08009300
 80039e4:	20000000 	.word	0x20000000
 80039e8:	20000004 	.word	0x20000004

080039ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b089      	sub	sp, #36	@ 0x24
 80039f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039fa:	4b3e      	ldr	r3, [pc, #248]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 030c 	and.w	r3, r3, #12
 8003a02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a04:	4b3b      	ldr	r3, [pc, #236]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x34>
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	2b0c      	cmp	r3, #12
 8003a18:	d121      	bne.n	8003a5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d11e      	bne.n	8003a5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a20:	4b34      	ldr	r3, [pc, #208]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d107      	bne.n	8003a3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a2c:	4b31      	ldr	r3, [pc, #196]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a32:	0a1b      	lsrs	r3, r3, #8
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	e005      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a48:	4a2b      	ldr	r2, [pc, #172]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10d      	bne.n	8003a74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a5c:	e00a      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d102      	bne.n	8003a6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a64:	4b25      	ldr	r3, [pc, #148]	@ (8003afc <HAL_RCC_GetSysClockFreq+0x110>)
 8003a66:	61bb      	str	r3, [r7, #24]
 8003a68:	e004      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d101      	bne.n	8003a74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a70:	4b23      	ldr	r3, [pc, #140]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	2b0c      	cmp	r3, #12
 8003a78:	d134      	bne.n	8003ae4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d003      	beq.n	8003a92 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d003      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0xac>
 8003a90:	e005      	b.n	8003a9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a92:	4b1a      	ldr	r3, [pc, #104]	@ (8003afc <HAL_RCC_GetSysClockFreq+0x110>)
 8003a94:	617b      	str	r3, [r7, #20]
      break;
 8003a96:	e005      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a98:	4b19      	ldr	r3, [pc, #100]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a9a:	617b      	str	r3, [r7, #20]
      break;
 8003a9c:	e002      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	617b      	str	r3, [r7, #20]
      break;
 8003aa2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aa4:	4b13      	ldr	r3, [pc, #76]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	3301      	adds	r3, #1
 8003ab0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ab2:	4b10      	ldr	r3, [pc, #64]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	0a1b      	lsrs	r3, r3, #8
 8003ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	fb03 f202 	mul.w	r2, r3, r2
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aca:	4b0a      	ldr	r3, [pc, #40]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	0e5b      	lsrs	r3, r3, #25
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ae4:	69bb      	ldr	r3, [r7, #24]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3724      	adds	r7, #36	@ 0x24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000
 8003af8:	08009318 	.word	0x08009318
 8003afc:	00f42400 	.word	0x00f42400
 8003b00:	007a1200 	.word	0x007a1200

08003b04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b08:	4b03      	ldr	r3, [pc, #12]	@ (8003b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000000 	.word	0x20000000

08003b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b20:	f7ff fff0 	bl	8003b04 <HAL_RCC_GetHCLKFreq>
 8003b24:	4602      	mov	r2, r0
 8003b26:	4b06      	ldr	r3, [pc, #24]	@ (8003b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	0a1b      	lsrs	r3, r3, #8
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	4904      	ldr	r1, [pc, #16]	@ (8003b44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b32:	5ccb      	ldrb	r3, [r1, r3]
 8003b34:	f003 031f 	and.w	r3, r3, #31
 8003b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	08009310 	.word	0x08009310

08003b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b4c:	f7ff ffda 	bl	8003b04 <HAL_RCC_GetHCLKFreq>
 8003b50:	4602      	mov	r2, r0
 8003b52:	4b06      	ldr	r3, [pc, #24]	@ (8003b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	0adb      	lsrs	r3, r3, #11
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	4904      	ldr	r1, [pc, #16]	@ (8003b70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b5e:	5ccb      	ldrb	r3, [r1, r3]
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	08009310 	.word	0x08009310

08003b74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b80:	4b2a      	ldr	r3, [pc, #168]	@ (8003c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b8c:	f7ff f9ee 	bl	8002f6c <HAL_PWREx_GetVoltageRange>
 8003b90:	6178      	str	r0, [r7, #20]
 8003b92:	e014      	b.n	8003bbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b94:	4b25      	ldr	r3, [pc, #148]	@ (8003c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b98:	4a24      	ldr	r2, [pc, #144]	@ (8003c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ba0:	4b22      	ldr	r3, [pc, #136]	@ (8003c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bac:	f7ff f9de 	bl	8002f6c <HAL_PWREx_GetVoltageRange>
 8003bb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8003c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc4:	d10b      	bne.n	8003bde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b80      	cmp	r3, #128	@ 0x80
 8003bca:	d919      	bls.n	8003c00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2ba0      	cmp	r3, #160	@ 0xa0
 8003bd0:	d902      	bls.n	8003bd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	e013      	b.n	8003c00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bd8:	2301      	movs	r3, #1
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	e010      	b.n	8003c00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b80      	cmp	r3, #128	@ 0x80
 8003be2:	d902      	bls.n	8003bea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003be4:	2303      	movs	r3, #3
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	e00a      	b.n	8003c00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b80      	cmp	r3, #128	@ 0x80
 8003bee:	d102      	bne.n	8003bf6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	e004      	b.n	8003c00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b70      	cmp	r3, #112	@ 0x70
 8003bfa:	d101      	bne.n	8003c00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c00:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f023 0207 	bic.w	r2, r3, #7
 8003c08:	4909      	ldr	r1, [pc, #36]	@ (8003c30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c10:	4b07      	ldr	r3, [pc, #28]	@ (8003c30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d001      	beq.n	8003c22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40022000 	.word	0x40022000

08003c34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c40:	2300      	movs	r3, #0
 8003c42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d041      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c54:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c58:	d02a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c5a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c5e:	d824      	bhi.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c64:	d008      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c6a:	d81e      	bhi.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c74:	d010      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c76:	e018      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c78:	4b86      	ldr	r3, [pc, #536]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4a85      	ldr	r2, [pc, #532]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c84:	e015      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fabb 	bl	8004208 <RCCEx_PLLSAI1_Config>
 8003c92:	4603      	mov	r3, r0
 8003c94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c96:	e00c      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3320      	adds	r3, #32
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fba6 	bl	80043f0 <RCCEx_PLLSAI2_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ca8:	e003      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	74fb      	strb	r3, [r7, #19]
      break;
 8003cae:	e000      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003cb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cb2:	7cfb      	ldrb	r3, [r7, #19]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10b      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cb8:	4b76      	ldr	r3, [pc, #472]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cc6:	4973      	ldr	r1, [pc, #460]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003cce:	e001      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd0:	7cfb      	ldrb	r3, [r7, #19]
 8003cd2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d041      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ce4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ce8:	d02a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003cea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003cee:	d824      	bhi.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cf4:	d008      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cfa:	d81e      	bhi.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d04:	d010      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d06:	e018      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d08:	4b62      	ldr	r3, [pc, #392]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4a61      	ldr	r2, [pc, #388]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d14:	e015      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fa73 	bl	8004208 <RCCEx_PLLSAI1_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d26:	e00c      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3320      	adds	r3, #32
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fb5e 	bl	80043f0 <RCCEx_PLLSAI2_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d38:	e003      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	74fb      	strb	r3, [r7, #19]
      break;
 8003d3e:	e000      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d42:	7cfb      	ldrb	r3, [r7, #19]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10b      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d48:	4b52      	ldr	r3, [pc, #328]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d56:	494f      	ldr	r1, [pc, #316]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d5e:	e001      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d60:	7cfb      	ldrb	r3, [r7, #19]
 8003d62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80a0 	beq.w	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d72:	2300      	movs	r3, #0
 8003d74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d76:	4b47      	ldr	r3, [pc, #284]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d86:	2300      	movs	r3, #0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00d      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d8c:	4b41      	ldr	r3, [pc, #260]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d90:	4a40      	ldr	r2, [pc, #256]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d96:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d98:	4b3e      	ldr	r3, [pc, #248]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da4:	2301      	movs	r3, #1
 8003da6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003da8:	4b3b      	ldr	r3, [pc, #236]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a3a      	ldr	r2, [pc, #232]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003db4:	f7fd f916 	bl	8000fe4 <HAL_GetTick>
 8003db8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dba:	e009      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dbc:	f7fd f912 	bl	8000fe4 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d902      	bls.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	74fb      	strb	r3, [r7, #19]
        break;
 8003dce:	e005      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dd0:	4b31      	ldr	r3, [pc, #196]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0ef      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d15c      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003de2:	4b2c      	ldr	r3, [pc, #176]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01f      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d019      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e00:	4b24      	ldr	r3, [pc, #144]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e0c:	4b21      	ldr	r3, [pc, #132]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e12:	4a20      	ldr	r2, [pc, #128]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e22:	4a1c      	ldr	r2, [pc, #112]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e2c:	4a19      	ldr	r2, [pc, #100]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d016      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3e:	f7fd f8d1 	bl	8000fe4 <HAL_GetTick>
 8003e42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e44:	e00b      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e46:	f7fd f8cd 	bl	8000fe4 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d902      	bls.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	74fb      	strb	r3, [r7, #19]
            break;
 8003e5c:	e006      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0ec      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e6c:	7cfb      	ldrb	r3, [r7, #19]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10c      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e72:	4b08      	ldr	r3, [pc, #32]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e82:	4904      	ldr	r1, [pc, #16]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e8a:	e009      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e8c:	7cfb      	ldrb	r3, [r7, #19]
 8003e8e:	74bb      	strb	r3, [r7, #18]
 8003e90:	e006      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e92:	bf00      	nop
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9c:	7cfb      	ldrb	r3, [r7, #19]
 8003e9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ea0:	7c7b      	ldrb	r3, [r7, #17]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d105      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea6:	4b9e      	ldr	r3, [pc, #632]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eaa:	4a9d      	ldr	r2, [pc, #628]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eb0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ebe:	4b98      	ldr	r3, [pc, #608]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec4:	f023 0203 	bic.w	r2, r3, #3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ecc:	4994      	ldr	r1, [pc, #592]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ee0:	4b8f      	ldr	r3, [pc, #572]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee6:	f023 020c 	bic.w	r2, r3, #12
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eee:	498c      	ldr	r1, [pc, #560]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f02:	4b87      	ldr	r3, [pc, #540]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f10:	4983      	ldr	r1, [pc, #524]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f24:	4b7e      	ldr	r3, [pc, #504]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f32:	497b      	ldr	r1, [pc, #492]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0310 	and.w	r3, r3, #16
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f46:	4b76      	ldr	r3, [pc, #472]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f54:	4972      	ldr	r1, [pc, #456]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f68:	4b6d      	ldr	r3, [pc, #436]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f76:	496a      	ldr	r1, [pc, #424]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f8a:	4b65      	ldr	r3, [pc, #404]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f98:	4961      	ldr	r1, [pc, #388]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fac:	4b5c      	ldr	r3, [pc, #368]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fba:	4959      	ldr	r1, [pc, #356]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fce:	4b54      	ldr	r3, [pc, #336]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fdc:	4950      	ldr	r1, [pc, #320]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ff0:	4b4b      	ldr	r3, [pc, #300]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffe:	4948      	ldr	r1, [pc, #288]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004012:	4b43      	ldr	r3, [pc, #268]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004018:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004020:	493f      	ldr	r1, [pc, #252]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d028      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004034:	4b3a      	ldr	r3, [pc, #232]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004042:	4937      	ldr	r1, [pc, #220]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800404e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004052:	d106      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004054:	4b32      	ldr	r3, [pc, #200]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4a31      	ldr	r2, [pc, #196]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800405e:	60d3      	str	r3, [r2, #12]
 8004060:	e011      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004066:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800406a:	d10c      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3304      	adds	r3, #4
 8004070:	2101      	movs	r1, #1
 8004072:	4618      	mov	r0, r3
 8004074:	f000 f8c8 	bl	8004208 <RCCEx_PLLSAI1_Config>
 8004078:	4603      	mov	r3, r0
 800407a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800407c:	7cfb      	ldrb	r3, [r7, #19]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004082:	7cfb      	ldrb	r3, [r7, #19]
 8004084:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d028      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004092:	4b23      	ldr	r3, [pc, #140]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004098:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a0:	491f      	ldr	r1, [pc, #124]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040b0:	d106      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040bc:	60d3      	str	r3, [r2, #12]
 80040be:	e011      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3304      	adds	r3, #4
 80040ce:	2101      	movs	r1, #1
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 f899 	bl	8004208 <RCCEx_PLLSAI1_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040da:	7cfb      	ldrb	r3, [r7, #19]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d02b      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040fe:	4908      	ldr	r1, [pc, #32]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800410a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800410e:	d109      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004110:	4b03      	ldr	r3, [pc, #12]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4a02      	ldr	r2, [pc, #8]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800411a:	60d3      	str	r3, [r2, #12]
 800411c:	e014      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004128:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800412c:	d10c      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3304      	adds	r3, #4
 8004132:	2101      	movs	r1, #1
 8004134:	4618      	mov	r0, r3
 8004136:	f000 f867 	bl	8004208 <RCCEx_PLLSAI1_Config>
 800413a:	4603      	mov	r3, r0
 800413c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800413e:	7cfb      	ldrb	r3, [r7, #19]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004144:	7cfb      	ldrb	r3, [r7, #19]
 8004146:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d02f      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004154:	4b2b      	ldr	r3, [pc, #172]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004162:	4928      	ldr	r1, [pc, #160]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800416e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004172:	d10d      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3304      	adds	r3, #4
 8004178:	2102      	movs	r1, #2
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f844 	bl	8004208 <RCCEx_PLLSAI1_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004184:	7cfb      	ldrb	r3, [r7, #19]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d014      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800418a:	7cfb      	ldrb	r3, [r7, #19]
 800418c:	74bb      	strb	r3, [r7, #18]
 800418e:	e011      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004194:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004198:	d10c      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3320      	adds	r3, #32
 800419e:	2102      	movs	r1, #2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 f925 	bl	80043f0 <RCCEx_PLLSAI2_Config>
 80041a6:	4603      	mov	r3, r0
 80041a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041aa:	7cfb      	ldrb	r3, [r7, #19]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041b0:	7cfb      	ldrb	r3, [r7, #19]
 80041b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041c0:	4b10      	ldr	r3, [pc, #64]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041ce:	490d      	ldr	r1, [pc, #52]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00b      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041e2:	4b08      	ldr	r3, [pc, #32]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041f2:	4904      	ldr	r1, [pc, #16]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40021000 	.word	0x40021000

08004208 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004216:	4b75      	ldr	r3, [pc, #468]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d018      	beq.n	8004254 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004222:	4b72      	ldr	r3, [pc, #456]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0203 	and.w	r2, r3, #3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d10d      	bne.n	800424e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
       ||
 8004236:	2b00      	cmp	r3, #0
 8004238:	d009      	beq.n	800424e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800423a:	4b6c      	ldr	r3, [pc, #432]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	091b      	lsrs	r3, r3, #4
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
       ||
 800424a:	429a      	cmp	r2, r3
 800424c:	d047      	beq.n	80042de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
 8004252:	e044      	b.n	80042de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b03      	cmp	r3, #3
 800425a:	d018      	beq.n	800428e <RCCEx_PLLSAI1_Config+0x86>
 800425c:	2b03      	cmp	r3, #3
 800425e:	d825      	bhi.n	80042ac <RCCEx_PLLSAI1_Config+0xa4>
 8004260:	2b01      	cmp	r3, #1
 8004262:	d002      	beq.n	800426a <RCCEx_PLLSAI1_Config+0x62>
 8004264:	2b02      	cmp	r3, #2
 8004266:	d009      	beq.n	800427c <RCCEx_PLLSAI1_Config+0x74>
 8004268:	e020      	b.n	80042ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800426a:	4b60      	ldr	r3, [pc, #384]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d11d      	bne.n	80042b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800427a:	e01a      	b.n	80042b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800427c:	4b5b      	ldr	r3, [pc, #364]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004284:	2b00      	cmp	r3, #0
 8004286:	d116      	bne.n	80042b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800428c:	e013      	b.n	80042b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800428e:	4b57      	ldr	r3, [pc, #348]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10f      	bne.n	80042ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800429a:	4b54      	ldr	r3, [pc, #336]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042aa:	e006      	b.n	80042ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]
      break;
 80042b0:	e004      	b.n	80042bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042b2:	bf00      	nop
 80042b4:	e002      	b.n	80042bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042b6:	bf00      	nop
 80042b8:	e000      	b.n	80042bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10d      	bne.n	80042de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042c2:	4b4a      	ldr	r3, [pc, #296]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6819      	ldr	r1, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	430b      	orrs	r3, r1
 80042d8:	4944      	ldr	r1, [pc, #272]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d17d      	bne.n	80043e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042e4:	4b41      	ldr	r3, [pc, #260]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a40      	ldr	r2, [pc, #256]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f0:	f7fc fe78 	bl	8000fe4 <HAL_GetTick>
 80042f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042f6:	e009      	b.n	800430c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042f8:	f7fc fe74 	bl	8000fe4 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d902      	bls.n	800430c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	73fb      	strb	r3, [r7, #15]
        break;
 800430a:	e005      	b.n	8004318 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800430c:	4b37      	ldr	r3, [pc, #220]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1ef      	bne.n	80042f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d160      	bne.n	80043e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d111      	bne.n	8004348 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004324:	4b31      	ldr	r3, [pc, #196]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800432c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6892      	ldr	r2, [r2, #8]
 8004334:	0211      	lsls	r1, r2, #8
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	68d2      	ldr	r2, [r2, #12]
 800433a:	0912      	lsrs	r2, r2, #4
 800433c:	0452      	lsls	r2, r2, #17
 800433e:	430a      	orrs	r2, r1
 8004340:	492a      	ldr	r1, [pc, #168]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004342:	4313      	orrs	r3, r2
 8004344:	610b      	str	r3, [r1, #16]
 8004346:	e027      	b.n	8004398 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d112      	bne.n	8004374 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800434e:	4b27      	ldr	r3, [pc, #156]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004356:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6892      	ldr	r2, [r2, #8]
 800435e:	0211      	lsls	r1, r2, #8
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6912      	ldr	r2, [r2, #16]
 8004364:	0852      	lsrs	r2, r2, #1
 8004366:	3a01      	subs	r2, #1
 8004368:	0552      	lsls	r2, r2, #21
 800436a:	430a      	orrs	r2, r1
 800436c:	491f      	ldr	r1, [pc, #124]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800436e:	4313      	orrs	r3, r2
 8004370:	610b      	str	r3, [r1, #16]
 8004372:	e011      	b.n	8004398 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004374:	4b1d      	ldr	r3, [pc, #116]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800437c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6892      	ldr	r2, [r2, #8]
 8004384:	0211      	lsls	r1, r2, #8
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6952      	ldr	r2, [r2, #20]
 800438a:	0852      	lsrs	r2, r2, #1
 800438c:	3a01      	subs	r2, #1
 800438e:	0652      	lsls	r2, r2, #25
 8004390:	430a      	orrs	r2, r1
 8004392:	4916      	ldr	r1, [pc, #88]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004394:	4313      	orrs	r3, r2
 8004396:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004398:	4b14      	ldr	r3, [pc, #80]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a13      	ldr	r2, [pc, #76]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800439e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a4:	f7fc fe1e 	bl	8000fe4 <HAL_GetTick>
 80043a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043aa:	e009      	b.n	80043c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043ac:	f7fc fe1a 	bl	8000fe4 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d902      	bls.n	80043c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	73fb      	strb	r3, [r7, #15]
          break;
 80043be:	e005      	b.n	80043cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043c0:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0ef      	beq.n	80043ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d106      	bne.n	80043e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043d2:	4b06      	ldr	r3, [pc, #24]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	4904      	ldr	r1, [pc, #16]	@ (80043ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40021000 	.word	0x40021000

080043f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043fe:	4b6a      	ldr	r3, [pc, #424]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d018      	beq.n	800443c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800440a:	4b67      	ldr	r3, [pc, #412]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 0203 	and.w	r2, r3, #3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d10d      	bne.n	8004436 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
       ||
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004422:	4b61      	ldr	r3, [pc, #388]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	091b      	lsrs	r3, r3, #4
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
       ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d047      	beq.n	80044c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	73fb      	strb	r3, [r7, #15]
 800443a:	e044      	b.n	80044c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b03      	cmp	r3, #3
 8004442:	d018      	beq.n	8004476 <RCCEx_PLLSAI2_Config+0x86>
 8004444:	2b03      	cmp	r3, #3
 8004446:	d825      	bhi.n	8004494 <RCCEx_PLLSAI2_Config+0xa4>
 8004448:	2b01      	cmp	r3, #1
 800444a:	d002      	beq.n	8004452 <RCCEx_PLLSAI2_Config+0x62>
 800444c:	2b02      	cmp	r3, #2
 800444e:	d009      	beq.n	8004464 <RCCEx_PLLSAI2_Config+0x74>
 8004450:	e020      	b.n	8004494 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004452:	4b55      	ldr	r3, [pc, #340]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d11d      	bne.n	800449a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004462:	e01a      	b.n	800449a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004464:	4b50      	ldr	r3, [pc, #320]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800446c:	2b00      	cmp	r3, #0
 800446e:	d116      	bne.n	800449e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004474:	e013      	b.n	800449e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004476:	4b4c      	ldr	r3, [pc, #304]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10f      	bne.n	80044a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004482:	4b49      	ldr	r3, [pc, #292]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004492:	e006      	b.n	80044a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
      break;
 8004498:	e004      	b.n	80044a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800449a:	bf00      	nop
 800449c:	e002      	b.n	80044a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10d      	bne.n	80044c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044aa:	4b3f      	ldr	r3, [pc, #252]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6819      	ldr	r1, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	430b      	orrs	r3, r1
 80044c0:	4939      	ldr	r1, [pc, #228]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d167      	bne.n	800459c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044cc:	4b36      	ldr	r3, [pc, #216]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a35      	ldr	r2, [pc, #212]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d8:	f7fc fd84 	bl	8000fe4 <HAL_GetTick>
 80044dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044de:	e009      	b.n	80044f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044e0:	f7fc fd80 	bl	8000fe4 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d902      	bls.n	80044f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	73fb      	strb	r3, [r7, #15]
        break;
 80044f2:	e005      	b.n	8004500 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044f4:	4b2c      	ldr	r3, [pc, #176]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1ef      	bne.n	80044e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d14a      	bne.n	800459c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d111      	bne.n	8004530 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800450c:	4b26      	ldr	r3, [pc, #152]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6892      	ldr	r2, [r2, #8]
 800451c:	0211      	lsls	r1, r2, #8
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	68d2      	ldr	r2, [r2, #12]
 8004522:	0912      	lsrs	r2, r2, #4
 8004524:	0452      	lsls	r2, r2, #17
 8004526:	430a      	orrs	r2, r1
 8004528:	491f      	ldr	r1, [pc, #124]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800452a:	4313      	orrs	r3, r2
 800452c:	614b      	str	r3, [r1, #20]
 800452e:	e011      	b.n	8004554 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004530:	4b1d      	ldr	r3, [pc, #116]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004538:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6892      	ldr	r2, [r2, #8]
 8004540:	0211      	lsls	r1, r2, #8
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6912      	ldr	r2, [r2, #16]
 8004546:	0852      	lsrs	r2, r2, #1
 8004548:	3a01      	subs	r2, #1
 800454a:	0652      	lsls	r2, r2, #25
 800454c:	430a      	orrs	r2, r1
 800454e:	4916      	ldr	r1, [pc, #88]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004550:	4313      	orrs	r3, r2
 8004552:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004554:	4b14      	ldr	r3, [pc, #80]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a13      	ldr	r2, [pc, #76]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800455a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800455e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004560:	f7fc fd40 	bl	8000fe4 <HAL_GetTick>
 8004564:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004566:	e009      	b.n	800457c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004568:	f7fc fd3c 	bl	8000fe4 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d902      	bls.n	800457c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	73fb      	strb	r3, [r7, #15]
          break;
 800457a:	e005      	b.n	8004588 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800457c:	4b0a      	ldr	r3, [pc, #40]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0ef      	beq.n	8004568 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800458e:	4b06      	ldr	r3, [pc, #24]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	4904      	ldr	r1, [pc, #16]	@ (80045a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004598:	4313      	orrs	r3, r2
 800459a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800459c:	7bfb      	ldrb	r3, [r7, #15]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000

080045ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e049      	b.n	8004652 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fc f9a2 	bl	800091c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3304      	adds	r3, #4
 80045e8:	4619      	mov	r1, r3
 80045ea:	4610      	mov	r0, r2
 80045ec:	f000 f970 	bl	80048d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b01      	cmp	r3, #1
 800466e:	d001      	beq.n	8004674 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e04f      	b.n	8004714 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0201 	orr.w	r2, r2, #1
 800468a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a23      	ldr	r2, [pc, #140]	@ (8004720 <HAL_TIM_Base_Start_IT+0xc4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d01d      	beq.n	80046d2 <HAL_TIM_Base_Start_IT+0x76>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800469e:	d018      	beq.n	80046d2 <HAL_TIM_Base_Start_IT+0x76>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004724 <HAL_TIM_Base_Start_IT+0xc8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d013      	beq.n	80046d2 <HAL_TIM_Base_Start_IT+0x76>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004728 <HAL_TIM_Base_Start_IT+0xcc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00e      	beq.n	80046d2 <HAL_TIM_Base_Start_IT+0x76>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1c      	ldr	r2, [pc, #112]	@ (800472c <HAL_TIM_Base_Start_IT+0xd0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d009      	beq.n	80046d2 <HAL_TIM_Base_Start_IT+0x76>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004730 <HAL_TIM_Base_Start_IT+0xd4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <HAL_TIM_Base_Start_IT+0x76>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a19      	ldr	r2, [pc, #100]	@ (8004734 <HAL_TIM_Base_Start_IT+0xd8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d115      	bne.n	80046fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	4b17      	ldr	r3, [pc, #92]	@ (8004738 <HAL_TIM_Base_Start_IT+0xdc>)
 80046da:	4013      	ands	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b06      	cmp	r3, #6
 80046e2:	d015      	beq.n	8004710 <HAL_TIM_Base_Start_IT+0xb4>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ea:	d011      	beq.n	8004710 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0201 	orr.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fc:	e008      	b.n	8004710 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0201 	orr.w	r2, r2, #1
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	e000      	b.n	8004712 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004710:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	40012c00 	.word	0x40012c00
 8004724:	40000400 	.word	0x40000400
 8004728:	40000800 	.word	0x40000800
 800472c:	40000c00 	.word	0x40000c00
 8004730:	40013400 	.word	0x40013400
 8004734:	40014000 	.word	0x40014000
 8004738:	00010007 	.word	0x00010007

0800473c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_TIM_ConfigClockSource+0x1c>
 8004754:	2302      	movs	r3, #2
 8004756:	e0b6      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x18a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004776:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800477a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004782:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004794:	d03e      	beq.n	8004814 <HAL_TIM_ConfigClockSource+0xd8>
 8004796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800479a:	f200 8087 	bhi.w	80048ac <HAL_TIM_ConfigClockSource+0x170>
 800479e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a2:	f000 8086 	beq.w	80048b2 <HAL_TIM_ConfigClockSource+0x176>
 80047a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047aa:	d87f      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x170>
 80047ac:	2b70      	cmp	r3, #112	@ 0x70
 80047ae:	d01a      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0xaa>
 80047b0:	2b70      	cmp	r3, #112	@ 0x70
 80047b2:	d87b      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x170>
 80047b4:	2b60      	cmp	r3, #96	@ 0x60
 80047b6:	d050      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x11e>
 80047b8:	2b60      	cmp	r3, #96	@ 0x60
 80047ba:	d877      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x170>
 80047bc:	2b50      	cmp	r3, #80	@ 0x50
 80047be:	d03c      	beq.n	800483a <HAL_TIM_ConfigClockSource+0xfe>
 80047c0:	2b50      	cmp	r3, #80	@ 0x50
 80047c2:	d873      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x170>
 80047c4:	2b40      	cmp	r3, #64	@ 0x40
 80047c6:	d058      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x13e>
 80047c8:	2b40      	cmp	r3, #64	@ 0x40
 80047ca:	d86f      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x170>
 80047cc:	2b30      	cmp	r3, #48	@ 0x30
 80047ce:	d064      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15e>
 80047d0:	2b30      	cmp	r3, #48	@ 0x30
 80047d2:	d86b      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x170>
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	d060      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15e>
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d867      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x170>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d05c      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15e>
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d05a      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15e>
 80047e4:	e062      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047f6:	f000 f98b 	bl	8004b10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004808:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	609a      	str	r2, [r3, #8]
      break;
 8004812:	e04f      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004824:	f000 f974 	bl	8004b10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004836:	609a      	str	r2, [r3, #8]
      break;
 8004838:	e03c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004846:	461a      	mov	r2, r3
 8004848:	f000 f8e8 	bl	8004a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2150      	movs	r1, #80	@ 0x50
 8004852:	4618      	mov	r0, r3
 8004854:	f000 f941 	bl	8004ada <TIM_ITRx_SetConfig>
      break;
 8004858:	e02c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004866:	461a      	mov	r2, r3
 8004868:	f000 f907 	bl	8004a7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2160      	movs	r1, #96	@ 0x60
 8004872:	4618      	mov	r0, r3
 8004874:	f000 f931 	bl	8004ada <TIM_ITRx_SetConfig>
      break;
 8004878:	e01c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004886:	461a      	mov	r2, r3
 8004888:	f000 f8c8 	bl	8004a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2140      	movs	r1, #64	@ 0x40
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f921 	bl	8004ada <TIM_ITRx_SetConfig>
      break;
 8004898:	e00c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4619      	mov	r1, r3
 80048a4:	4610      	mov	r0, r2
 80048a6:	f000 f918 	bl	8004ada <TIM_ITRx_SetConfig>
      break;
 80048aa:	e003      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
      break;
 80048b0:	e000      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80048b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a46      	ldr	r2, [pc, #280]	@ (80049fc <TIM_Base_SetConfig+0x12c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d013      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ee:	d00f      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a43      	ldr	r2, [pc, #268]	@ (8004a00 <TIM_Base_SetConfig+0x130>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00b      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a42      	ldr	r2, [pc, #264]	@ (8004a04 <TIM_Base_SetConfig+0x134>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d007      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a41      	ldr	r2, [pc, #260]	@ (8004a08 <TIM_Base_SetConfig+0x138>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d003      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a40      	ldr	r2, [pc, #256]	@ (8004a0c <TIM_Base_SetConfig+0x13c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d108      	bne.n	8004922 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a35      	ldr	r2, [pc, #212]	@ (80049fc <TIM_Base_SetConfig+0x12c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d01f      	beq.n	800496a <TIM_Base_SetConfig+0x9a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004930:	d01b      	beq.n	800496a <TIM_Base_SetConfig+0x9a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a32      	ldr	r2, [pc, #200]	@ (8004a00 <TIM_Base_SetConfig+0x130>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d017      	beq.n	800496a <TIM_Base_SetConfig+0x9a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a31      	ldr	r2, [pc, #196]	@ (8004a04 <TIM_Base_SetConfig+0x134>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d013      	beq.n	800496a <TIM_Base_SetConfig+0x9a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a30      	ldr	r2, [pc, #192]	@ (8004a08 <TIM_Base_SetConfig+0x138>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00f      	beq.n	800496a <TIM_Base_SetConfig+0x9a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a2f      	ldr	r2, [pc, #188]	@ (8004a0c <TIM_Base_SetConfig+0x13c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00b      	beq.n	800496a <TIM_Base_SetConfig+0x9a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a2e      	ldr	r2, [pc, #184]	@ (8004a10 <TIM_Base_SetConfig+0x140>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d007      	beq.n	800496a <TIM_Base_SetConfig+0x9a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a2d      	ldr	r2, [pc, #180]	@ (8004a14 <TIM_Base_SetConfig+0x144>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d003      	beq.n	800496a <TIM_Base_SetConfig+0x9a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a2c      	ldr	r2, [pc, #176]	@ (8004a18 <TIM_Base_SetConfig+0x148>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d108      	bne.n	800497c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a16      	ldr	r2, [pc, #88]	@ (80049fc <TIM_Base_SetConfig+0x12c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00f      	beq.n	80049c8 <TIM_Base_SetConfig+0xf8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a18      	ldr	r2, [pc, #96]	@ (8004a0c <TIM_Base_SetConfig+0x13c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00b      	beq.n	80049c8 <TIM_Base_SetConfig+0xf8>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a17      	ldr	r2, [pc, #92]	@ (8004a10 <TIM_Base_SetConfig+0x140>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d007      	beq.n	80049c8 <TIM_Base_SetConfig+0xf8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a16      	ldr	r2, [pc, #88]	@ (8004a14 <TIM_Base_SetConfig+0x144>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_Base_SetConfig+0xf8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a15      	ldr	r2, [pc, #84]	@ (8004a18 <TIM_Base_SetConfig+0x148>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d103      	bne.n	80049d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d105      	bne.n	80049ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f023 0201 	bic.w	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	611a      	str	r2, [r3, #16]
  }
}
 80049ee:	bf00      	nop
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40012c00 	.word	0x40012c00
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800
 8004a08:	40000c00 	.word	0x40000c00
 8004a0c:	40013400 	.word	0x40013400
 8004a10:	40014000 	.word	0x40014000
 8004a14:	40014400 	.word	0x40014400
 8004a18:	40014800 	.word	0x40014800

08004a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	f023 0201 	bic.w	r2, r3, #1
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f023 030a 	bic.w	r3, r3, #10
 8004a58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	621a      	str	r2, [r3, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b087      	sub	sp, #28
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	f023 0210 	bic.w	r2, r3, #16
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004aa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	031b      	lsls	r3, r3, #12
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ab6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	621a      	str	r2, [r3, #32]
}
 8004ace:	bf00      	nop
 8004ad0:	371c      	adds	r7, #28
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004af0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f043 0307 	orr.w	r3, r3, #7
 8004afc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	609a      	str	r2, [r3, #8]
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	021a      	lsls	r2, r3, #8
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	431a      	orrs	r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	609a      	str	r2, [r3, #8]
}
 8004b44:	bf00      	nop
 8004b46:	371c      	adds	r7, #28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e068      	b.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a2e      	ldr	r2, [pc, #184]	@ (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d004      	beq.n	8004b9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a2d      	ldr	r2, [pc, #180]	@ (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d108      	bne.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004ba2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1e      	ldr	r2, [pc, #120]	@ (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d01d      	beq.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bda:	d018      	beq.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1b      	ldr	r2, [pc, #108]	@ (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d013      	beq.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a1a      	ldr	r2, [pc, #104]	@ (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00e      	beq.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a18      	ldr	r2, [pc, #96]	@ (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d009      	beq.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a13      	ldr	r2, [pc, #76]	@ (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d004      	beq.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a14      	ldr	r2, [pc, #80]	@ (8004c5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d10c      	bne.n	8004c28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40012c00 	.word	0x40012c00
 8004c4c:	40013400 	.word	0x40013400
 8004c50:	40000400 	.word	0x40000400
 8004c54:	40000800 	.word	0x40000800
 8004c58:	40000c00 	.word	0x40000c00
 8004c5c:	40014000 	.word	0x40014000

08004c60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e040      	b.n	8004cf4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fb ff72 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2224      	movs	r2, #36	@ 0x24
 8004c8c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0201 	bic.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fb6a 	bl	8005380 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f8af 	bl	8004e10 <UART_SetConfig>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e01b      	b.n	8004cf4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fbe9 	bl	80054c4 <UART_CheckIdleState>
 8004cf2:	4603      	mov	r3, r0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	@ 0x28
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d177      	bne.n	8004e04 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <HAL_UART_Transmit+0x24>
 8004d1a:	88fb      	ldrh	r3, [r7, #6]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e070      	b.n	8004e06 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2221      	movs	r2, #33	@ 0x21
 8004d30:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d32:	f7fc f957 	bl	8000fe4 <HAL_GetTick>
 8004d36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	88fa      	ldrh	r2, [r7, #6]
 8004d3c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	88fa      	ldrh	r2, [r7, #6]
 8004d44:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d50:	d108      	bne.n	8004d64 <HAL_UART_Transmit+0x68>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d104      	bne.n	8004d64 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	e003      	b.n	8004d6c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d6c:	e02f      	b.n	8004dce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2200      	movs	r2, #0
 8004d76:	2180      	movs	r1, #128	@ 0x80
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 fc4b 	bl	8005614 <UART_WaitOnFlagUntilTimeout>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d004      	beq.n	8004d8e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2220      	movs	r2, #32
 8004d88:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e03b      	b.n	8004e06 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10b      	bne.n	8004dac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	881a      	ldrh	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004da0:	b292      	uxth	r2, r2
 8004da2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	3302      	adds	r3, #2
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	e007      	b.n	8004dbc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	781a      	ldrb	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	3301      	adds	r3, #1
 8004dba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1c9      	bne.n	8004d6e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2200      	movs	r2, #0
 8004de2:	2140      	movs	r1, #64	@ 0x40
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 fc15 	bl	8005614 <UART_WaitOnFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d004      	beq.n	8004dfa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e005      	b.n	8004e06 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	e000      	b.n	8004e06 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004e04:	2302      	movs	r3, #2
  }
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3720      	adds	r7, #32
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e14:	b08a      	sub	sp, #40	@ 0x28
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4ba4      	ldr	r3, [pc, #656]	@ (80050d0 <UART_SetConfig+0x2c0>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	6812      	ldr	r2, [r2, #0]
 8004e46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a99      	ldr	r2, [pc, #612]	@ (80050d4 <UART_SetConfig+0x2c4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a90      	ldr	r2, [pc, #576]	@ (80050d8 <UART_SetConfig+0x2c8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d126      	bne.n	8004ee8 <UART_SetConfig+0xd8>
 8004e9a:	4b90      	ldr	r3, [pc, #576]	@ (80050dc <UART_SetConfig+0x2cc>)
 8004e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d81b      	bhi.n	8004ee0 <UART_SetConfig+0xd0>
 8004ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb0 <UART_SetConfig+0xa0>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004ec1 	.word	0x08004ec1
 8004eb4:	08004ed1 	.word	0x08004ed1
 8004eb8:	08004ec9 	.word	0x08004ec9
 8004ebc:	08004ed9 	.word	0x08004ed9
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ec6:	e116      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ece:	e112      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004ed0:	2304      	movs	r3, #4
 8004ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ed6:	e10e      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004ed8:	2308      	movs	r3, #8
 8004eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ede:	e10a      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee6:	e106      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a7c      	ldr	r2, [pc, #496]	@ (80050e0 <UART_SetConfig+0x2d0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d138      	bne.n	8004f64 <UART_SetConfig+0x154>
 8004ef2:	4b7a      	ldr	r3, [pc, #488]	@ (80050dc <UART_SetConfig+0x2cc>)
 8004ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef8:	f003 030c 	and.w	r3, r3, #12
 8004efc:	2b0c      	cmp	r3, #12
 8004efe:	d82d      	bhi.n	8004f5c <UART_SetConfig+0x14c>
 8004f00:	a201      	add	r2, pc, #4	@ (adr r2, 8004f08 <UART_SetConfig+0xf8>)
 8004f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f06:	bf00      	nop
 8004f08:	08004f3d 	.word	0x08004f3d
 8004f0c:	08004f5d 	.word	0x08004f5d
 8004f10:	08004f5d 	.word	0x08004f5d
 8004f14:	08004f5d 	.word	0x08004f5d
 8004f18:	08004f4d 	.word	0x08004f4d
 8004f1c:	08004f5d 	.word	0x08004f5d
 8004f20:	08004f5d 	.word	0x08004f5d
 8004f24:	08004f5d 	.word	0x08004f5d
 8004f28:	08004f45 	.word	0x08004f45
 8004f2c:	08004f5d 	.word	0x08004f5d
 8004f30:	08004f5d 	.word	0x08004f5d
 8004f34:	08004f5d 	.word	0x08004f5d
 8004f38:	08004f55 	.word	0x08004f55
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f42:	e0d8      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004f44:	2302      	movs	r3, #2
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f4a:	e0d4      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f52:	e0d0      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004f54:	2308      	movs	r3, #8
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f5a:	e0cc      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f62:	e0c8      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a5e      	ldr	r2, [pc, #376]	@ (80050e4 <UART_SetConfig+0x2d4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d125      	bne.n	8004fba <UART_SetConfig+0x1aa>
 8004f6e:	4b5b      	ldr	r3, [pc, #364]	@ (80050dc <UART_SetConfig+0x2cc>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f74:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f78:	2b30      	cmp	r3, #48	@ 0x30
 8004f7a:	d016      	beq.n	8004faa <UART_SetConfig+0x19a>
 8004f7c:	2b30      	cmp	r3, #48	@ 0x30
 8004f7e:	d818      	bhi.n	8004fb2 <UART_SetConfig+0x1a2>
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d00a      	beq.n	8004f9a <UART_SetConfig+0x18a>
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	d814      	bhi.n	8004fb2 <UART_SetConfig+0x1a2>
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <UART_SetConfig+0x182>
 8004f8c:	2b10      	cmp	r3, #16
 8004f8e:	d008      	beq.n	8004fa2 <UART_SetConfig+0x192>
 8004f90:	e00f      	b.n	8004fb2 <UART_SetConfig+0x1a2>
 8004f92:	2300      	movs	r3, #0
 8004f94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f98:	e0ad      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa0:	e0a9      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004fa2:	2304      	movs	r3, #4
 8004fa4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa8:	e0a5      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004faa:	2308      	movs	r3, #8
 8004fac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fb0:	e0a1      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004fb2:	2310      	movs	r3, #16
 8004fb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fb8:	e09d      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a4a      	ldr	r2, [pc, #296]	@ (80050e8 <UART_SetConfig+0x2d8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d125      	bne.n	8005010 <UART_SetConfig+0x200>
 8004fc4:	4b45      	ldr	r3, [pc, #276]	@ (80050dc <UART_SetConfig+0x2cc>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004fce:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fd0:	d016      	beq.n	8005000 <UART_SetConfig+0x1f0>
 8004fd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fd4:	d818      	bhi.n	8005008 <UART_SetConfig+0x1f8>
 8004fd6:	2b80      	cmp	r3, #128	@ 0x80
 8004fd8:	d00a      	beq.n	8004ff0 <UART_SetConfig+0x1e0>
 8004fda:	2b80      	cmp	r3, #128	@ 0x80
 8004fdc:	d814      	bhi.n	8005008 <UART_SetConfig+0x1f8>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <UART_SetConfig+0x1d8>
 8004fe2:	2b40      	cmp	r3, #64	@ 0x40
 8004fe4:	d008      	beq.n	8004ff8 <UART_SetConfig+0x1e8>
 8004fe6:	e00f      	b.n	8005008 <UART_SetConfig+0x1f8>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fee:	e082      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff6:	e07e      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ffe:	e07a      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8005000:	2308      	movs	r3, #8
 8005002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005006:	e076      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8005008:	2310      	movs	r3, #16
 800500a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800500e:	e072      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a35      	ldr	r2, [pc, #212]	@ (80050ec <UART_SetConfig+0x2dc>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d12a      	bne.n	8005070 <UART_SetConfig+0x260>
 800501a:	4b30      	ldr	r3, [pc, #192]	@ (80050dc <UART_SetConfig+0x2cc>)
 800501c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005020:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005024:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005028:	d01a      	beq.n	8005060 <UART_SetConfig+0x250>
 800502a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800502e:	d81b      	bhi.n	8005068 <UART_SetConfig+0x258>
 8005030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005034:	d00c      	beq.n	8005050 <UART_SetConfig+0x240>
 8005036:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800503a:	d815      	bhi.n	8005068 <UART_SetConfig+0x258>
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <UART_SetConfig+0x238>
 8005040:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005044:	d008      	beq.n	8005058 <UART_SetConfig+0x248>
 8005046:	e00f      	b.n	8005068 <UART_SetConfig+0x258>
 8005048:	2300      	movs	r3, #0
 800504a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800504e:	e052      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8005050:	2302      	movs	r3, #2
 8005052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005056:	e04e      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8005058:	2304      	movs	r3, #4
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800505e:	e04a      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8005060:	2308      	movs	r3, #8
 8005062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005066:	e046      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8005068:	2310      	movs	r3, #16
 800506a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800506e:	e042      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a17      	ldr	r2, [pc, #92]	@ (80050d4 <UART_SetConfig+0x2c4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d13a      	bne.n	80050f0 <UART_SetConfig+0x2e0>
 800507a:	4b18      	ldr	r3, [pc, #96]	@ (80050dc <UART_SetConfig+0x2cc>)
 800507c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005080:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005084:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005088:	d01a      	beq.n	80050c0 <UART_SetConfig+0x2b0>
 800508a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800508e:	d81b      	bhi.n	80050c8 <UART_SetConfig+0x2b8>
 8005090:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005094:	d00c      	beq.n	80050b0 <UART_SetConfig+0x2a0>
 8005096:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800509a:	d815      	bhi.n	80050c8 <UART_SetConfig+0x2b8>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <UART_SetConfig+0x298>
 80050a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050a4:	d008      	beq.n	80050b8 <UART_SetConfig+0x2a8>
 80050a6:	e00f      	b.n	80050c8 <UART_SetConfig+0x2b8>
 80050a8:	2300      	movs	r3, #0
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ae:	e022      	b.n	80050f6 <UART_SetConfig+0x2e6>
 80050b0:	2302      	movs	r3, #2
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050b6:	e01e      	b.n	80050f6 <UART_SetConfig+0x2e6>
 80050b8:	2304      	movs	r3, #4
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050be:	e01a      	b.n	80050f6 <UART_SetConfig+0x2e6>
 80050c0:	2308      	movs	r3, #8
 80050c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050c6:	e016      	b.n	80050f6 <UART_SetConfig+0x2e6>
 80050c8:	2310      	movs	r3, #16
 80050ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ce:	e012      	b.n	80050f6 <UART_SetConfig+0x2e6>
 80050d0:	efff69f3 	.word	0xefff69f3
 80050d4:	40008000 	.word	0x40008000
 80050d8:	40013800 	.word	0x40013800
 80050dc:	40021000 	.word	0x40021000
 80050e0:	40004400 	.word	0x40004400
 80050e4:	40004800 	.word	0x40004800
 80050e8:	40004c00 	.word	0x40004c00
 80050ec:	40005000 	.word	0x40005000
 80050f0:	2310      	movs	r3, #16
 80050f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a9f      	ldr	r2, [pc, #636]	@ (8005378 <UART_SetConfig+0x568>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d17a      	bne.n	80051f6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005100:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005104:	2b08      	cmp	r3, #8
 8005106:	d824      	bhi.n	8005152 <UART_SetConfig+0x342>
 8005108:	a201      	add	r2, pc, #4	@ (adr r2, 8005110 <UART_SetConfig+0x300>)
 800510a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510e:	bf00      	nop
 8005110:	08005135 	.word	0x08005135
 8005114:	08005153 	.word	0x08005153
 8005118:	0800513d 	.word	0x0800513d
 800511c:	08005153 	.word	0x08005153
 8005120:	08005143 	.word	0x08005143
 8005124:	08005153 	.word	0x08005153
 8005128:	08005153 	.word	0x08005153
 800512c:	08005153 	.word	0x08005153
 8005130:	0800514b 	.word	0x0800514b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005134:	f7fe fcf2 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 8005138:	61f8      	str	r0, [r7, #28]
        break;
 800513a:	e010      	b.n	800515e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800513c:	4b8f      	ldr	r3, [pc, #572]	@ (800537c <UART_SetConfig+0x56c>)
 800513e:	61fb      	str	r3, [r7, #28]
        break;
 8005140:	e00d      	b.n	800515e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005142:	f7fe fc53 	bl	80039ec <HAL_RCC_GetSysClockFreq>
 8005146:	61f8      	str	r0, [r7, #28]
        break;
 8005148:	e009      	b.n	800515e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800514e:	61fb      	str	r3, [r7, #28]
        break;
 8005150:	e005      	b.n	800515e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800515c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 80fb 	beq.w	800535c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	4413      	add	r3, r2
 8005170:	69fa      	ldr	r2, [r7, #28]
 8005172:	429a      	cmp	r2, r3
 8005174:	d305      	bcc.n	8005182 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	429a      	cmp	r2, r3
 8005180:	d903      	bls.n	800518a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005188:	e0e8      	b.n	800535c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	2200      	movs	r2, #0
 800518e:	461c      	mov	r4, r3
 8005190:	4615      	mov	r5, r2
 8005192:	f04f 0200 	mov.w	r2, #0
 8005196:	f04f 0300 	mov.w	r3, #0
 800519a:	022b      	lsls	r3, r5, #8
 800519c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80051a0:	0222      	lsls	r2, r4, #8
 80051a2:	68f9      	ldr	r1, [r7, #12]
 80051a4:	6849      	ldr	r1, [r1, #4]
 80051a6:	0849      	lsrs	r1, r1, #1
 80051a8:	2000      	movs	r0, #0
 80051aa:	4688      	mov	r8, r1
 80051ac:	4681      	mov	r9, r0
 80051ae:	eb12 0a08 	adds.w	sl, r2, r8
 80051b2:	eb43 0b09 	adc.w	fp, r3, r9
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	603b      	str	r3, [r7, #0]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051c4:	4650      	mov	r0, sl
 80051c6:	4659      	mov	r1, fp
 80051c8:	f7fb f852 	bl	8000270 <__aeabi_uldivmod>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4613      	mov	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051da:	d308      	bcc.n	80051ee <UART_SetConfig+0x3de>
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051e2:	d204      	bcs.n	80051ee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	60da      	str	r2, [r3, #12]
 80051ec:	e0b6      	b.n	800535c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051f4:	e0b2      	b.n	800535c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051fe:	d15e      	bne.n	80052be <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005200:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005204:	2b08      	cmp	r3, #8
 8005206:	d828      	bhi.n	800525a <UART_SetConfig+0x44a>
 8005208:	a201      	add	r2, pc, #4	@ (adr r2, 8005210 <UART_SetConfig+0x400>)
 800520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520e:	bf00      	nop
 8005210:	08005235 	.word	0x08005235
 8005214:	0800523d 	.word	0x0800523d
 8005218:	08005245 	.word	0x08005245
 800521c:	0800525b 	.word	0x0800525b
 8005220:	0800524b 	.word	0x0800524b
 8005224:	0800525b 	.word	0x0800525b
 8005228:	0800525b 	.word	0x0800525b
 800522c:	0800525b 	.word	0x0800525b
 8005230:	08005253 	.word	0x08005253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005234:	f7fe fc72 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 8005238:	61f8      	str	r0, [r7, #28]
        break;
 800523a:	e014      	b.n	8005266 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800523c:	f7fe fc84 	bl	8003b48 <HAL_RCC_GetPCLK2Freq>
 8005240:	61f8      	str	r0, [r7, #28]
        break;
 8005242:	e010      	b.n	8005266 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005244:	4b4d      	ldr	r3, [pc, #308]	@ (800537c <UART_SetConfig+0x56c>)
 8005246:	61fb      	str	r3, [r7, #28]
        break;
 8005248:	e00d      	b.n	8005266 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800524a:	f7fe fbcf 	bl	80039ec <HAL_RCC_GetSysClockFreq>
 800524e:	61f8      	str	r0, [r7, #28]
        break;
 8005250:	e009      	b.n	8005266 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005256:	61fb      	str	r3, [r7, #28]
        break;
 8005258:	e005      	b.n	8005266 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005264:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d077      	beq.n	800535c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	005a      	lsls	r2, r3, #1
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	085b      	lsrs	r3, r3, #1
 8005276:	441a      	add	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005280:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2b0f      	cmp	r3, #15
 8005286:	d916      	bls.n	80052b6 <UART_SetConfig+0x4a6>
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800528e:	d212      	bcs.n	80052b6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	b29b      	uxth	r3, r3
 8005294:	f023 030f 	bic.w	r3, r3, #15
 8005298:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	085b      	lsrs	r3, r3, #1
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	8afb      	ldrh	r3, [r7, #22]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	8afa      	ldrh	r2, [r7, #22]
 80052b2:	60da      	str	r2, [r3, #12]
 80052b4:	e052      	b.n	800535c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80052bc:	e04e      	b.n	800535c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d827      	bhi.n	8005316 <UART_SetConfig+0x506>
 80052c6:	a201      	add	r2, pc, #4	@ (adr r2, 80052cc <UART_SetConfig+0x4bc>)
 80052c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052cc:	080052f1 	.word	0x080052f1
 80052d0:	080052f9 	.word	0x080052f9
 80052d4:	08005301 	.word	0x08005301
 80052d8:	08005317 	.word	0x08005317
 80052dc:	08005307 	.word	0x08005307
 80052e0:	08005317 	.word	0x08005317
 80052e4:	08005317 	.word	0x08005317
 80052e8:	08005317 	.word	0x08005317
 80052ec:	0800530f 	.word	0x0800530f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f0:	f7fe fc14 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 80052f4:	61f8      	str	r0, [r7, #28]
        break;
 80052f6:	e014      	b.n	8005322 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052f8:	f7fe fc26 	bl	8003b48 <HAL_RCC_GetPCLK2Freq>
 80052fc:	61f8      	str	r0, [r7, #28]
        break;
 80052fe:	e010      	b.n	8005322 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005300:	4b1e      	ldr	r3, [pc, #120]	@ (800537c <UART_SetConfig+0x56c>)
 8005302:	61fb      	str	r3, [r7, #28]
        break;
 8005304:	e00d      	b.n	8005322 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005306:	f7fe fb71 	bl	80039ec <HAL_RCC_GetSysClockFreq>
 800530a:	61f8      	str	r0, [r7, #28]
        break;
 800530c:	e009      	b.n	8005322 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800530e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005312:	61fb      	str	r3, [r7, #28]
        break;
 8005314:	e005      	b.n	8005322 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005320:	bf00      	nop
    }

    if (pclk != 0U)
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d019      	beq.n	800535c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	085a      	lsrs	r2, r3, #1
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	441a      	add	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	fbb2 f3f3 	udiv	r3, r2, r3
 800533a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	2b0f      	cmp	r3, #15
 8005340:	d909      	bls.n	8005356 <UART_SetConfig+0x546>
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005348:	d205      	bcs.n	8005356 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60da      	str	r2, [r3, #12]
 8005354:	e002      	b.n	800535c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005368:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800536c:	4618      	mov	r0, r3
 800536e:	3728      	adds	r7, #40	@ 0x28
 8005370:	46bd      	mov	sp, r7
 8005372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005376:	bf00      	nop
 8005378:	40008000 	.word	0x40008000
 800537c:	00f42400 	.word	0x00f42400

08005380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005414:	f003 0310 	and.w	r3, r3, #16
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01a      	beq.n	8005496 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800547e:	d10a      	bne.n	8005496 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	605a      	str	r2, [r3, #4]
  }
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b098      	sub	sp, #96	@ 0x60
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054d4:	f7fb fd86 	bl	8000fe4 <HAL_GetTick>
 80054d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d12e      	bne.n	8005546 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054f0:	2200      	movs	r2, #0
 80054f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f88c 	bl	8005614 <UART_WaitOnFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d021      	beq.n	8005546 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550a:	e853 3f00 	ldrex	r3, [r3]
 800550e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005512:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005516:	653b      	str	r3, [r7, #80]	@ 0x50
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005520:	647b      	str	r3, [r7, #68]	@ 0x44
 8005522:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005524:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005526:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005528:	e841 2300 	strex	r3, r2, [r1]
 800552c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800552e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e6      	bne.n	8005502 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2220      	movs	r2, #32
 8005538:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e062      	b.n	800560c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b04      	cmp	r3, #4
 8005552:	d149      	bne.n	80055e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005554:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800555c:	2200      	movs	r2, #0
 800555e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f856 	bl	8005614 <UART_WaitOnFlagUntilTimeout>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d03c      	beq.n	80055e8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	623b      	str	r3, [r7, #32]
   return(result);
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800558c:	633b      	str	r3, [r7, #48]	@ 0x30
 800558e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800559a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e6      	bne.n	800556e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3308      	adds	r3, #8
 80055a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	e853 3f00 	ldrex	r3, [r3]
 80055ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0301 	bic.w	r3, r3, #1
 80055b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3308      	adds	r3, #8
 80055be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055c0:	61fa      	str	r2, [r7, #28]
 80055c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c4:	69b9      	ldr	r1, [r7, #24]
 80055c6:	69fa      	ldr	r2, [r7, #28]
 80055c8:	e841 2300 	strex	r3, r2, [r1]
 80055cc:	617b      	str	r3, [r7, #20]
   return(result);
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e5      	bne.n	80055a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e011      	b.n	800560c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2220      	movs	r2, #32
 80055ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3758      	adds	r7, #88	@ 0x58
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	4613      	mov	r3, r2
 8005622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005624:	e04f      	b.n	80056c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562c:	d04b      	beq.n	80056c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562e:	f7fb fcd9 	bl	8000fe4 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	429a      	cmp	r2, r3
 800563c:	d302      	bcc.n	8005644 <UART_WaitOnFlagUntilTimeout+0x30>
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e04e      	b.n	80056e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	d037      	beq.n	80056c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b80      	cmp	r3, #128	@ 0x80
 800565a:	d034      	beq.n	80056c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b40      	cmp	r3, #64	@ 0x40
 8005660:	d031      	beq.n	80056c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	2b08      	cmp	r3, #8
 800566e:	d110      	bne.n	8005692 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2208      	movs	r2, #8
 8005676:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f838 	bl	80056ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2208      	movs	r2, #8
 8005682:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e029      	b.n	80056e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800569c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056a0:	d111      	bne.n	80056c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 f81e 	bl	80056ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e00f      	b.n	80056e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4013      	ands	r3, r2
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	bf0c      	ite	eq
 80056d6:	2301      	moveq	r3, #1
 80056d8:	2300      	movne	r3, #0
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	79fb      	ldrb	r3, [r7, #7]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d0a0      	beq.n	8005626 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b095      	sub	sp, #84	@ 0x54
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056fe:	e853 3f00 	ldrex	r3, [r3]
 8005702:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005706:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800570a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005714:	643b      	str	r3, [r7, #64]	@ 0x40
 8005716:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800571a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800571c:	e841 2300 	strex	r3, r2, [r1]
 8005720:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e6      	bne.n	80056f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3308      	adds	r3, #8
 800572e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	e853 3f00 	ldrex	r3, [r3]
 8005736:	61fb      	str	r3, [r7, #28]
   return(result);
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f023 0301 	bic.w	r3, r3, #1
 800573e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3308      	adds	r3, #8
 8005746:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005748:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800574a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800574e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005750:	e841 2300 	strex	r3, r2, [r1]
 8005754:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e5      	bne.n	8005728 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005760:	2b01      	cmp	r3, #1
 8005762:	d118      	bne.n	8005796 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	60bb      	str	r3, [r7, #8]
   return(result);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f023 0310 	bic.w	r3, r3, #16
 8005778:	647b      	str	r3, [r7, #68]	@ 0x44
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005782:	61bb      	str	r3, [r7, #24]
 8005784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	6979      	ldr	r1, [r7, #20]
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	613b      	str	r3, [r7, #16]
   return(result);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e6      	bne.n	8005764 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80057aa:	bf00      	nop
 80057ac:	3754      	adds	r7, #84	@ 0x54
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
	...

080057b8 <__NVIC_SetPriority>:
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4603      	mov	r3, r0
 80057c0:	6039      	str	r1, [r7, #0]
 80057c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	db0a      	blt.n	80057e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	490c      	ldr	r1, [pc, #48]	@ (8005804 <__NVIC_SetPriority+0x4c>)
 80057d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d6:	0112      	lsls	r2, r2, #4
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	440b      	add	r3, r1
 80057dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80057e0:	e00a      	b.n	80057f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	4908      	ldr	r1, [pc, #32]	@ (8005808 <__NVIC_SetPriority+0x50>)
 80057e8:	79fb      	ldrb	r3, [r7, #7]
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	3b04      	subs	r3, #4
 80057f0:	0112      	lsls	r2, r2, #4
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	440b      	add	r3, r1
 80057f6:	761a      	strb	r2, [r3, #24]
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	e000e100 	.word	0xe000e100
 8005808:	e000ed00 	.word	0xe000ed00

0800580c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005810:	2100      	movs	r1, #0
 8005812:	f06f 0004 	mvn.w	r0, #4
 8005816:	f7ff ffcf 	bl	80057b8 <__NVIC_SetPriority>
#endif
}
 800581a:	bf00      	nop
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005826:	f3ef 8305 	mrs	r3, IPSR
 800582a:	603b      	str	r3, [r7, #0]
  return(result);
 800582c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005832:	f06f 0305 	mvn.w	r3, #5
 8005836:	607b      	str	r3, [r7, #4]
 8005838:	e00c      	b.n	8005854 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800583a:	4b0a      	ldr	r3, [pc, #40]	@ (8005864 <osKernelInitialize+0x44>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d105      	bne.n	800584e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005842:	4b08      	ldr	r3, [pc, #32]	@ (8005864 <osKernelInitialize+0x44>)
 8005844:	2201      	movs	r2, #1
 8005846:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005848:	2300      	movs	r3, #0
 800584a:	607b      	str	r3, [r7, #4]
 800584c:	e002      	b.n	8005854 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800584e:	f04f 33ff 	mov.w	r3, #4294967295
 8005852:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005854:	687b      	ldr	r3, [r7, #4]
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000c74 	.word	0x20000c74

08005868 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800586e:	f3ef 8305 	mrs	r3, IPSR
 8005872:	603b      	str	r3, [r7, #0]
  return(result);
 8005874:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <osKernelStart+0x1a>
    stat = osErrorISR;
 800587a:	f06f 0305 	mvn.w	r3, #5
 800587e:	607b      	str	r3, [r7, #4]
 8005880:	e010      	b.n	80058a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005882:	4b0b      	ldr	r3, [pc, #44]	@ (80058b0 <osKernelStart+0x48>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d109      	bne.n	800589e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800588a:	f7ff ffbf 	bl	800580c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800588e:	4b08      	ldr	r3, [pc, #32]	@ (80058b0 <osKernelStart+0x48>)
 8005890:	2202      	movs	r2, #2
 8005892:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005894:	f001 f87a 	bl	800698c <vTaskStartScheduler>
      stat = osOK;
 8005898:	2300      	movs	r3, #0
 800589a:	607b      	str	r3, [r7, #4]
 800589c:	e002      	b.n	80058a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800589e:	f04f 33ff 	mov.w	r3, #4294967295
 80058a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058a4:	687b      	ldr	r3, [r7, #4]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20000c74 	.word	0x20000c74

080058b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08e      	sub	sp, #56	@ 0x38
 80058b8:	af04      	add	r7, sp, #16
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058c4:	f3ef 8305 	mrs	r3, IPSR
 80058c8:	617b      	str	r3, [r7, #20]
  return(result);
 80058ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d17e      	bne.n	80059ce <osThreadNew+0x11a>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d07b      	beq.n	80059ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80058d6:	2380      	movs	r3, #128	@ 0x80
 80058d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80058da:	2318      	movs	r3, #24
 80058dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80058e2:	f04f 33ff 	mov.w	r3, #4294967295
 80058e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d045      	beq.n	800597a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <osThreadNew+0x48>
        name = attr->name;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d008      	beq.n	8005922 <osThreadNew+0x6e>
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	2b38      	cmp	r3, #56	@ 0x38
 8005914:	d805      	bhi.n	8005922 <osThreadNew+0x6e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <osThreadNew+0x72>
        return (NULL);
 8005922:	2300      	movs	r3, #0
 8005924:	e054      	b.n	80059d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	089b      	lsrs	r3, r3, #2
 8005934:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00e      	beq.n	800595c <osThreadNew+0xa8>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	2b5b      	cmp	r3, #91	@ 0x5b
 8005944:	d90a      	bls.n	800595c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800594a:	2b00      	cmp	r3, #0
 800594c:	d006      	beq.n	800595c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <osThreadNew+0xa8>
        mem = 1;
 8005956:	2301      	movs	r3, #1
 8005958:	61bb      	str	r3, [r7, #24]
 800595a:	e010      	b.n	800597e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10c      	bne.n	800597e <osThreadNew+0xca>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d108      	bne.n	800597e <osThreadNew+0xca>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <osThreadNew+0xca>
          mem = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	61bb      	str	r3, [r7, #24]
 8005978:	e001      	b.n	800597e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800597a:	2300      	movs	r3, #0
 800597c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d110      	bne.n	80059a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800598c:	9202      	str	r2, [sp, #8]
 800598e:	9301      	str	r3, [sp, #4]
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	6a3a      	ldr	r2, [r7, #32]
 8005998:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 fe1a 	bl	80065d4 <xTaskCreateStatic>
 80059a0:	4603      	mov	r3, r0
 80059a2:	613b      	str	r3, [r7, #16]
 80059a4:	e013      	b.n	80059ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d110      	bne.n	80059ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	f107 0310 	add.w	r3, r7, #16
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 fe68 	bl	8006694 <xTaskCreate>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d001      	beq.n	80059ce <osThreadNew+0x11a>
            hTask = NULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80059ce:	693b      	ldr	r3, [r7, #16]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3728      	adds	r7, #40	@ 0x28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059e0:	f3ef 8305 	mrs	r3, IPSR
 80059e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80059e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <osDelay+0x1c>
    stat = osErrorISR;
 80059ec:	f06f 0305 	mvn.w	r3, #5
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	e007      	b.n	8005a04 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <osDelay+0x2c>
      vTaskDelay(ticks);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 ff8e 	bl	8006920 <vTaskDelay>
    }
  }

  return (stat);
 8005a04:	68fb      	ldr	r3, [r7, #12]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4a07      	ldr	r2, [pc, #28]	@ (8005a3c <vApplicationGetIdleTaskMemory+0x2c>)
 8005a20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	4a06      	ldr	r2, [pc, #24]	@ (8005a40 <vApplicationGetIdleTaskMemory+0x30>)
 8005a26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2280      	movs	r2, #128	@ 0x80
 8005a2c:	601a      	str	r2, [r3, #0]
}
 8005a2e:	bf00      	nop
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	20000c78 	.word	0x20000c78
 8005a40:	20000cd4 	.word	0x20000cd4

08005a44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4a07      	ldr	r2, [pc, #28]	@ (8005a70 <vApplicationGetTimerTaskMemory+0x2c>)
 8005a54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	4a06      	ldr	r2, [pc, #24]	@ (8005a74 <vApplicationGetTimerTaskMemory+0x30>)
 8005a5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a62:	601a      	str	r2, [r3, #0]
}
 8005a64:	bf00      	nop
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	20000ed4 	.word	0x20000ed4
 8005a74:	20000f30 	.word	0x20000f30

08005a78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f103 0208 	add.w	r2, r3, #8
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f103 0208 	add.w	r2, r3, #8
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f103 0208 	add.w	r2, r3, #8
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	601a      	str	r2, [r3, #0]
}
 8005b0e:	bf00      	nop
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b085      	sub	sp, #20
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b30:	d103      	bne.n	8005b3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	e00c      	b.n	8005b54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	e002      	b.n	8005b48 <vListInsert+0x2e>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d2f6      	bcs.n	8005b42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	601a      	str	r2, [r3, #0]
}
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6892      	ldr	r2, [r2, #8]
 8005ba2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6852      	ldr	r2, [r2, #4]
 8005bac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d103      	bne.n	8005bc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	1e5a      	subs	r2, r3, #1
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10b      	bne.n	8005c0c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c06:	bf00      	nop
 8005c08:	bf00      	nop
 8005c0a:	e7fd      	b.n	8005c08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c0c:	f002 f87c 	bl	8007d08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c18:	68f9      	ldr	r1, [r7, #12]
 8005c1a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005c1c:	fb01 f303 	mul.w	r3, r1, r3
 8005c20:	441a      	add	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	68f9      	ldr	r1, [r7, #12]
 8005c40:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005c42:	fb01 f303 	mul.w	r3, r1, r3
 8005c46:	441a      	add	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	22ff      	movs	r2, #255	@ 0xff
 8005c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	22ff      	movs	r2, #255	@ 0xff
 8005c58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d114      	bne.n	8005c8c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d01a      	beq.n	8005ca0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3310      	adds	r3, #16
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f001 f91a 	bl	8006ea8 <xTaskRemoveFromEventList>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d012      	beq.n	8005ca0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005cb0 <xQueueGenericReset+0xd0>)
 8005c7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	e009      	b.n	8005ca0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3310      	adds	r3, #16
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff fef1 	bl	8005a78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3324      	adds	r3, #36	@ 0x24
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff feec 	bl	8005a78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ca0:	f002 f864 	bl	8007d6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ca4:	2301      	movs	r3, #1
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	e000ed04 	.word	0xe000ed04

08005cb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b08e      	sub	sp, #56	@ 0x38
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
 8005cc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10b      	bne.n	8005ce0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	e7fd      	b.n	8005cdc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005cf8:	bf00      	nop
 8005cfa:	bf00      	nop
 8005cfc:	e7fd      	b.n	8005cfa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <xQueueGenericCreateStatic+0x56>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <xQueueGenericCreateStatic+0x5a>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <xQueueGenericCreateStatic+0x5c>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10b      	bne.n	8005d2c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	623b      	str	r3, [r7, #32]
}
 8005d26:	bf00      	nop
 8005d28:	bf00      	nop
 8005d2a:	e7fd      	b.n	8005d28 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d102      	bne.n	8005d38 <xQueueGenericCreateStatic+0x84>
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <xQueueGenericCreateStatic+0x88>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <xQueueGenericCreateStatic+0x8a>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10b      	bne.n	8005d5a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	61fb      	str	r3, [r7, #28]
}
 8005d54:	bf00      	nop
 8005d56:	bf00      	nop
 8005d58:	e7fd      	b.n	8005d56 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d5a:	2350      	movs	r3, #80	@ 0x50
 8005d5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b50      	cmp	r3, #80	@ 0x50
 8005d62:	d00b      	beq.n	8005d7c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	61bb      	str	r3, [r7, #24]
}
 8005d76:	bf00      	nop
 8005d78:	bf00      	nop
 8005d7a:	e7fd      	b.n	8005d78 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d7c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00d      	beq.n	8005da4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d90:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	68b9      	ldr	r1, [r7, #8]
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 f805 	bl	8005dae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3730      	adds	r7, #48	@ 0x30
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b084      	sub	sp, #16
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	607a      	str	r2, [r7, #4]
 8005dba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d103      	bne.n	8005dca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	e002      	b.n	8005dd0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ddc:	2101      	movs	r1, #1
 8005dde:	69b8      	ldr	r0, [r7, #24]
 8005de0:	f7ff fefe 	bl	8005be0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	78fa      	ldrb	r2, [r7, #3]
 8005de8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005dec:	bf00      	nop
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08e      	sub	sp, #56	@ 0x38
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e02:	2300      	movs	r3, #0
 8005e04:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10b      	bne.n	8005e28 <xQueueGenericSend+0x34>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	e7fd      	b.n	8005e24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d103      	bne.n	8005e36 <xQueueGenericSend+0x42>
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <xQueueGenericSend+0x46>
 8005e36:	2301      	movs	r3, #1
 8005e38:	e000      	b.n	8005e3c <xQueueGenericSend+0x48>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10b      	bne.n	8005e58 <xQueueGenericSend+0x64>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e52:	bf00      	nop
 8005e54:	bf00      	nop
 8005e56:	e7fd      	b.n	8005e54 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d103      	bne.n	8005e66 <xQueueGenericSend+0x72>
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d101      	bne.n	8005e6a <xQueueGenericSend+0x76>
 8005e66:	2301      	movs	r3, #1
 8005e68:	e000      	b.n	8005e6c <xQueueGenericSend+0x78>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10b      	bne.n	8005e88 <xQueueGenericSend+0x94>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	623b      	str	r3, [r7, #32]
}
 8005e82:	bf00      	nop
 8005e84:	bf00      	nop
 8005e86:	e7fd      	b.n	8005e84 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e88:	f001 f9ce 	bl	8007228 <xTaskGetSchedulerState>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d102      	bne.n	8005e98 <xQueueGenericSend+0xa4>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <xQueueGenericSend+0xa8>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e000      	b.n	8005e9e <xQueueGenericSend+0xaa>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10b      	bne.n	8005eba <xQueueGenericSend+0xc6>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	61fb      	str	r3, [r7, #28]
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop
 8005eb8:	e7fd      	b.n	8005eb6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005eba:	f001 ff25 	bl	8007d08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d302      	bcc.n	8005ed0 <xQueueGenericSend+0xdc>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d129      	bne.n	8005f24 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ed6:	f000 fa0f 	bl	80062f8 <prvCopyDataToQueue>
 8005eda:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d010      	beq.n	8005f06 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee6:	3324      	adds	r3, #36	@ 0x24
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 ffdd 	bl	8006ea8 <xTaskRemoveFromEventList>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d013      	beq.n	8005f1c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ef4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ff4 <xQueueGenericSend+0x200>)
 8005ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	e00a      	b.n	8005f1c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d007      	beq.n	8005f1c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f0c:	4b39      	ldr	r3, [pc, #228]	@ (8005ff4 <xQueueGenericSend+0x200>)
 8005f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f1c:	f001 ff26 	bl	8007d6c <vPortExitCritical>
				return pdPASS;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e063      	b.n	8005fec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d103      	bne.n	8005f32 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f2a:	f001 ff1f 	bl	8007d6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e05c      	b.n	8005fec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d106      	bne.n	8005f46 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f38:	f107 0314 	add.w	r3, r7, #20
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f001 f817 	bl	8006f70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f42:	2301      	movs	r3, #1
 8005f44:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f46:	f001 ff11 	bl	8007d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f4a:	f000 fd87 	bl	8006a5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f4e:	f001 fedb 	bl	8007d08 <vPortEnterCritical>
 8005f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f58:	b25b      	sxtb	r3, r3
 8005f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5e:	d103      	bne.n	8005f68 <xQueueGenericSend+0x174>
 8005f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f6e:	b25b      	sxtb	r3, r3
 8005f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f74:	d103      	bne.n	8005f7e <xQueueGenericSend+0x18a>
 8005f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f7e:	f001 fef5 	bl	8007d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f82:	1d3a      	adds	r2, r7, #4
 8005f84:	f107 0314 	add.w	r3, r7, #20
 8005f88:	4611      	mov	r1, r2
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f001 f806 	bl	8006f9c <xTaskCheckForTimeOut>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d124      	bne.n	8005fe0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f98:	f000 faa6 	bl	80064e8 <prvIsQueueFull>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d018      	beq.n	8005fd4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa4:	3310      	adds	r3, #16
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	4611      	mov	r1, r2
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 ff2a 	bl	8006e04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005fb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fb2:	f000 fa31 	bl	8006418 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005fb6:	f000 fd5f 	bl	8006a78 <xTaskResumeAll>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f47f af7c 	bne.w	8005eba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff4 <xQueueGenericSend+0x200>)
 8005fc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	e772      	b.n	8005eba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005fd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fd6:	f000 fa1f 	bl	8006418 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fda:	f000 fd4d 	bl	8006a78 <xTaskResumeAll>
 8005fde:	e76c      	b.n	8005eba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005fe0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fe2:	f000 fa19 	bl	8006418 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fe6:	f000 fd47 	bl	8006a78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005fea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3738      	adds	r7, #56	@ 0x38
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	e000ed04 	.word	0xe000ed04

08005ff8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b090      	sub	sp, #64	@ 0x40
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800600a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10b      	bne.n	8006028 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	e7fd      	b.n	8006024 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d103      	bne.n	8006036 <xQueueGenericSendFromISR+0x3e>
 800602e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <xQueueGenericSendFromISR+0x42>
 8006036:	2301      	movs	r3, #1
 8006038:	e000      	b.n	800603c <xQueueGenericSendFromISR+0x44>
 800603a:	2300      	movs	r3, #0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10b      	bne.n	8006058 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006052:	bf00      	nop
 8006054:	bf00      	nop
 8006056:	e7fd      	b.n	8006054 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2b02      	cmp	r3, #2
 800605c:	d103      	bne.n	8006066 <xQueueGenericSendFromISR+0x6e>
 800605e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <xQueueGenericSendFromISR+0x72>
 8006066:	2301      	movs	r3, #1
 8006068:	e000      	b.n	800606c <xQueueGenericSendFromISR+0x74>
 800606a:	2300      	movs	r3, #0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10b      	bne.n	8006088 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	623b      	str	r3, [r7, #32]
}
 8006082:	bf00      	nop
 8006084:	bf00      	nop
 8006086:	e7fd      	b.n	8006084 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006088:	f001 ff1e 	bl	8007ec8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800608c:	f3ef 8211 	mrs	r2, BASEPRI
 8006090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	61fa      	str	r2, [r7, #28]
 80060a2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80060a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d302      	bcc.n	80060ba <xQueueGenericSendFromISR+0xc2>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d12f      	bne.n	800611a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	68b9      	ldr	r1, [r7, #8]
 80060ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80060d0:	f000 f912 	bl	80062f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060dc:	d112      	bne.n	8006104 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d016      	beq.n	8006114 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e8:	3324      	adds	r3, #36	@ 0x24
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fedc 	bl	8006ea8 <xTaskRemoveFromEventList>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00e      	beq.n	8006114 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00b      	beq.n	8006114 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	e007      	b.n	8006114 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006104:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006108:	3301      	adds	r3, #1
 800610a:	b2db      	uxtb	r3, r3
 800610c:	b25a      	sxtb	r2, r3
 800610e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006114:	2301      	movs	r3, #1
 8006116:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006118:	e001      	b.n	800611e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800611a:	2300      	movs	r3, #0
 800611c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800611e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006120:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006128:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800612a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800612c:	4618      	mov	r0, r3
 800612e:	3740      	adds	r7, #64	@ 0x40
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08c      	sub	sp, #48	@ 0x30
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006140:	2300      	movs	r3, #0
 8006142:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10b      	bne.n	8006166 <xQueueReceive+0x32>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	623b      	str	r3, [r7, #32]
}
 8006160:	bf00      	nop
 8006162:	bf00      	nop
 8006164:	e7fd      	b.n	8006162 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d103      	bne.n	8006174 <xQueueReceive+0x40>
 800616c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <xQueueReceive+0x44>
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <xQueueReceive+0x46>
 8006178:	2300      	movs	r3, #0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10b      	bne.n	8006196 <xQueueReceive+0x62>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	61fb      	str	r3, [r7, #28]
}
 8006190:	bf00      	nop
 8006192:	bf00      	nop
 8006194:	e7fd      	b.n	8006192 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006196:	f001 f847 	bl	8007228 <xTaskGetSchedulerState>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d102      	bne.n	80061a6 <xQueueReceive+0x72>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <xQueueReceive+0x76>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e000      	b.n	80061ac <xQueueReceive+0x78>
 80061aa:	2300      	movs	r3, #0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10b      	bne.n	80061c8 <xQueueReceive+0x94>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	61bb      	str	r3, [r7, #24]
}
 80061c2:	bf00      	nop
 80061c4:	bf00      	nop
 80061c6:	e7fd      	b.n	80061c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061c8:	f001 fd9e 	bl	8007d08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d01f      	beq.n	8006218 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061dc:	f000 f8f6 	bl	80063cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e2:	1e5a      	subs	r2, r3, #1
 80061e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00f      	beq.n	8006210 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f2:	3310      	adds	r3, #16
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 fe57 	bl	8006ea8 <xTaskRemoveFromEventList>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d007      	beq.n	8006210 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006200:	4b3c      	ldr	r3, [pc, #240]	@ (80062f4 <xQueueReceive+0x1c0>)
 8006202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006210:	f001 fdac 	bl	8007d6c <vPortExitCritical>
				return pdPASS;
 8006214:	2301      	movs	r3, #1
 8006216:	e069      	b.n	80062ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d103      	bne.n	8006226 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800621e:	f001 fda5 	bl	8007d6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006222:	2300      	movs	r3, #0
 8006224:	e062      	b.n	80062ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006228:	2b00      	cmp	r3, #0
 800622a:	d106      	bne.n	800623a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800622c:	f107 0310 	add.w	r3, r7, #16
 8006230:	4618      	mov	r0, r3
 8006232:	f000 fe9d 	bl	8006f70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006236:	2301      	movs	r3, #1
 8006238:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800623a:	f001 fd97 	bl	8007d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800623e:	f000 fc0d 	bl	8006a5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006242:	f001 fd61 	bl	8007d08 <vPortEnterCritical>
 8006246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006248:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800624c:	b25b      	sxtb	r3, r3
 800624e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006252:	d103      	bne.n	800625c <xQueueReceive+0x128>
 8006254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800625c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006262:	b25b      	sxtb	r3, r3
 8006264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006268:	d103      	bne.n	8006272 <xQueueReceive+0x13e>
 800626a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006272:	f001 fd7b 	bl	8007d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006276:	1d3a      	adds	r2, r7, #4
 8006278:	f107 0310 	add.w	r3, r7, #16
 800627c:	4611      	mov	r1, r2
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fe8c 	bl	8006f9c <xTaskCheckForTimeOut>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d123      	bne.n	80062d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800628a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800628c:	f000 f916 	bl	80064bc <prvIsQueueEmpty>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d017      	beq.n	80062c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006298:	3324      	adds	r3, #36	@ 0x24
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	4611      	mov	r1, r2
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fdb0 	bl	8006e04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062a6:	f000 f8b7 	bl	8006418 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062aa:	f000 fbe5 	bl	8006a78 <xTaskResumeAll>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d189      	bne.n	80061c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80062b4:	4b0f      	ldr	r3, [pc, #60]	@ (80062f4 <xQueueReceive+0x1c0>)
 80062b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	e780      	b.n	80061c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80062c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062c8:	f000 f8a6 	bl	8006418 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062cc:	f000 fbd4 	bl	8006a78 <xTaskResumeAll>
 80062d0:	e77a      	b.n	80061c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80062d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062d4:	f000 f8a0 	bl	8006418 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062d8:	f000 fbce 	bl	8006a78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062de:	f000 f8ed 	bl	80064bc <prvIsQueueEmpty>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f43f af6f 	beq.w	80061c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3730      	adds	r7, #48	@ 0x30
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	e000ed04 	.word	0xe000ed04

080062f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006304:	2300      	movs	r3, #0
 8006306:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10d      	bne.n	8006332 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d14d      	bne.n	80063ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	4618      	mov	r0, r3
 8006324:	f000 ff9e 	bl	8007264 <xTaskPriorityDisinherit>
 8006328:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	609a      	str	r2, [r3, #8]
 8006330:	e043      	b.n	80063ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d119      	bne.n	800636c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6858      	ldr	r0, [r3, #4]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006340:	461a      	mov	r2, r3
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	f002 fa75 	bl	8008832 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006350:	441a      	add	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	429a      	cmp	r2, r3
 8006360:	d32b      	bcc.n	80063ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	605a      	str	r2, [r3, #4]
 800636a:	e026      	b.n	80063ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	68d8      	ldr	r0, [r3, #12]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006374:	461a      	mov	r2, r3
 8006376:	68b9      	ldr	r1, [r7, #8]
 8006378:	f002 fa5b 	bl	8008832 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006384:	425b      	negs	r3, r3
 8006386:	441a      	add	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	68da      	ldr	r2, [r3, #12]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d207      	bcs.n	80063a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a0:	425b      	negs	r3, r3
 80063a2:	441a      	add	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d105      	bne.n	80063ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1c5a      	adds	r2, r3, #1
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80063c2:	697b      	ldr	r3, [r7, #20]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d018      	beq.n	8006410 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e6:	441a      	add	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68da      	ldr	r2, [r3, #12]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d303      	bcc.n	8006400 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68d9      	ldr	r1, [r3, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006408:	461a      	mov	r2, r3
 800640a:	6838      	ldr	r0, [r7, #0]
 800640c:	f002 fa11 	bl	8008832 <memcpy>
	}
}
 8006410:	bf00      	nop
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006420:	f001 fc72 	bl	8007d08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800642a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800642c:	e011      	b.n	8006452 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006432:	2b00      	cmp	r3, #0
 8006434:	d012      	beq.n	800645c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	3324      	adds	r3, #36	@ 0x24
 800643a:	4618      	mov	r0, r3
 800643c:	f000 fd34 	bl	8006ea8 <xTaskRemoveFromEventList>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006446:	f000 fe0d 	bl	8007064 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	3b01      	subs	r3, #1
 800644e:	b2db      	uxtb	r3, r3
 8006450:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006456:	2b00      	cmp	r3, #0
 8006458:	dce9      	bgt.n	800642e <prvUnlockQueue+0x16>
 800645a:	e000      	b.n	800645e <prvUnlockQueue+0x46>
					break;
 800645c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	22ff      	movs	r2, #255	@ 0xff
 8006462:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006466:	f001 fc81 	bl	8007d6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800646a:	f001 fc4d 	bl	8007d08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006474:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006476:	e011      	b.n	800649c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d012      	beq.n	80064a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3310      	adds	r3, #16
 8006484:	4618      	mov	r0, r3
 8006486:	f000 fd0f 	bl	8006ea8 <xTaskRemoveFromEventList>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006490:	f000 fde8 	bl	8007064 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006494:	7bbb      	ldrb	r3, [r7, #14]
 8006496:	3b01      	subs	r3, #1
 8006498:	b2db      	uxtb	r3, r3
 800649a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800649c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	dce9      	bgt.n	8006478 <prvUnlockQueue+0x60>
 80064a4:	e000      	b.n	80064a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80064a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	22ff      	movs	r2, #255	@ 0xff
 80064ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80064b0:	f001 fc5c 	bl	8007d6c <vPortExitCritical>
}
 80064b4:	bf00      	nop
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064c4:	f001 fc20 	bl	8007d08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d102      	bne.n	80064d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80064d0:	2301      	movs	r3, #1
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	e001      	b.n	80064da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80064d6:	2300      	movs	r3, #0
 80064d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064da:	f001 fc47 	bl	8007d6c <vPortExitCritical>

	return xReturn;
 80064de:	68fb      	ldr	r3, [r7, #12]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064f0:	f001 fc0a 	bl	8007d08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d102      	bne.n	8006506 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006500:	2301      	movs	r3, #1
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	e001      	b.n	800650a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006506:	2300      	movs	r3, #0
 8006508:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800650a:	f001 fc2f 	bl	8007d6c <vPortExitCritical>

	return xReturn;
 800650e:	68fb      	ldr	r3, [r7, #12]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	e014      	b.n	8006552 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006528:	4a0f      	ldr	r2, [pc, #60]	@ (8006568 <vQueueAddToRegistry+0x50>)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10b      	bne.n	800654c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006534:	490c      	ldr	r1, [pc, #48]	@ (8006568 <vQueueAddToRegistry+0x50>)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800653e:	4a0a      	ldr	r2, [pc, #40]	@ (8006568 <vQueueAddToRegistry+0x50>)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	00db      	lsls	r3, r3, #3
 8006544:	4413      	add	r3, r2
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800654a:	e006      	b.n	800655a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	3301      	adds	r3, #1
 8006550:	60fb      	str	r3, [r7, #12]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2b07      	cmp	r3, #7
 8006556:	d9e7      	bls.n	8006528 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006558:	bf00      	nop
 800655a:	bf00      	nop
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	20001330 	.word	0x20001330

0800656c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800657c:	f001 fbc4 	bl	8007d08 <vPortEnterCritical>
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006586:	b25b      	sxtb	r3, r3
 8006588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658c:	d103      	bne.n	8006596 <vQueueWaitForMessageRestricted+0x2a>
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800659c:	b25b      	sxtb	r3, r3
 800659e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a2:	d103      	bne.n	80065ac <vQueueWaitForMessageRestricted+0x40>
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065ac:	f001 fbde 	bl	8007d6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d106      	bne.n	80065c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	3324      	adds	r3, #36	@ 0x24
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 fc45 	bl	8006e50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80065c6:	6978      	ldr	r0, [r7, #20]
 80065c8:	f7ff ff26 	bl	8006418 <prvUnlockQueue>
	}
 80065cc:	bf00      	nop
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b08e      	sub	sp, #56	@ 0x38
 80065d8:	af04      	add	r7, sp, #16
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
 80065e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10b      	bne.n	8006600 <xTaskCreateStatic+0x2c>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	623b      	str	r3, [r7, #32]
}
 80065fa:	bf00      	nop
 80065fc:	bf00      	nop
 80065fe:	e7fd      	b.n	80065fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10b      	bne.n	800661e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	61fb      	str	r3, [r7, #28]
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	e7fd      	b.n	800661a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800661e:	235c      	movs	r3, #92	@ 0x5c
 8006620:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b5c      	cmp	r3, #92	@ 0x5c
 8006626:	d00b      	beq.n	8006640 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	61bb      	str	r3, [r7, #24]
}
 800663a:	bf00      	nop
 800663c:	bf00      	nop
 800663e:	e7fd      	b.n	800663c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006640:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01e      	beq.n	8006686 <xTaskCreateStatic+0xb2>
 8006648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800664a:	2b00      	cmp	r3, #0
 800664c:	d01b      	beq.n	8006686 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800664e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006650:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006654:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006656:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665a:	2202      	movs	r2, #2
 800665c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006660:	2300      	movs	r3, #0
 8006662:	9303      	str	r3, [sp, #12]
 8006664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006666:	9302      	str	r3, [sp, #8]
 8006668:	f107 0314 	add.w	r3, r7, #20
 800666c:	9301      	str	r3, [sp, #4]
 800666e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	68b9      	ldr	r1, [r7, #8]
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 f850 	bl	800671e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800667e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006680:	f000 f8de 	bl	8006840 <prvAddNewTaskToReadyList>
 8006684:	e001      	b.n	800668a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006686:	2300      	movs	r3, #0
 8006688:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800668a:	697b      	ldr	r3, [r7, #20]
	}
 800668c:	4618      	mov	r0, r3
 800668e:	3728      	adds	r7, #40	@ 0x28
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006694:	b580      	push	{r7, lr}
 8006696:	b08c      	sub	sp, #48	@ 0x30
 8006698:	af04      	add	r7, sp, #16
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	603b      	str	r3, [r7, #0]
 80066a0:	4613      	mov	r3, r2
 80066a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066a4:	88fb      	ldrh	r3, [r7, #6]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4618      	mov	r0, r3
 80066aa:	f001 fc4f 	bl	8007f4c <pvPortMalloc>
 80066ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00e      	beq.n	80066d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80066b6:	205c      	movs	r0, #92	@ 0x5c
 80066b8:	f001 fc48 	bl	8007f4c <pvPortMalloc>
 80066bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80066ca:	e005      	b.n	80066d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066cc:	6978      	ldr	r0, [r7, #20]
 80066ce:	f001 fd0b 	bl	80080e8 <vPortFree>
 80066d2:	e001      	b.n	80066d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d017      	beq.n	800670e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066e6:	88fa      	ldrh	r2, [r7, #6]
 80066e8:	2300      	movs	r3, #0
 80066ea:	9303      	str	r3, [sp, #12]
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	9302      	str	r3, [sp, #8]
 80066f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f2:	9301      	str	r3, [sp, #4]
 80066f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	68b9      	ldr	r1, [r7, #8]
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 f80e 	bl	800671e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006702:	69f8      	ldr	r0, [r7, #28]
 8006704:	f000 f89c 	bl	8006840 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006708:	2301      	movs	r3, #1
 800670a:	61bb      	str	r3, [r7, #24]
 800670c:	e002      	b.n	8006714 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800670e:	f04f 33ff 	mov.w	r3, #4294967295
 8006712:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006714:	69bb      	ldr	r3, [r7, #24]
	}
 8006716:	4618      	mov	r0, r3
 8006718:	3720      	adds	r7, #32
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b088      	sub	sp, #32
 8006722:	af00      	add	r7, sp, #0
 8006724:	60f8      	str	r0, [r7, #12]
 8006726:	60b9      	str	r1, [r7, #8]
 8006728:	607a      	str	r2, [r7, #4]
 800672a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800672c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	461a      	mov	r2, r3
 8006736:	21a5      	movs	r1, #165	@ 0xa5
 8006738:	f002 f800 	bl	800873c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800673c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006746:	3b01      	subs	r3, #1
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	f023 0307 	bic.w	r3, r3, #7
 8006754:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	f003 0307 	and.w	r3, r3, #7
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00b      	beq.n	8006778 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	617b      	str	r3, [r7, #20]
}
 8006772:	bf00      	nop
 8006774:	bf00      	nop
 8006776:	e7fd      	b.n	8006774 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d01f      	beq.n	80067be <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800677e:	2300      	movs	r3, #0
 8006780:	61fb      	str	r3, [r7, #28]
 8006782:	e012      	b.n	80067aa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	4413      	add	r3, r2
 800678a:	7819      	ldrb	r1, [r3, #0]
 800678c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	4413      	add	r3, r2
 8006792:	3334      	adds	r3, #52	@ 0x34
 8006794:	460a      	mov	r2, r1
 8006796:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	4413      	add	r3, r2
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d006      	beq.n	80067b2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	3301      	adds	r3, #1
 80067a8:	61fb      	str	r3, [r7, #28]
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	2b0f      	cmp	r3, #15
 80067ae:	d9e9      	bls.n	8006784 <prvInitialiseNewTask+0x66>
 80067b0:	e000      	b.n	80067b4 <prvInitialiseNewTask+0x96>
			{
				break;
 80067b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067bc:	e003      	b.n	80067c6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c8:	2b37      	cmp	r3, #55	@ 0x37
 80067ca:	d901      	bls.n	80067d0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067cc:	2337      	movs	r3, #55	@ 0x37
 80067ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067d4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067da:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80067dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067de:	2200      	movs	r2, #0
 80067e0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e4:	3304      	adds	r3, #4
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff f966 	bl	8005ab8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ee:	3318      	adds	r3, #24
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7ff f961 	bl	8005ab8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006804:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006808:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800680a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800680c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680e:	2200      	movs	r2, #0
 8006810:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	68f9      	ldr	r1, [r7, #12]
 800681e:	69b8      	ldr	r0, [r7, #24]
 8006820:	f001 f93e 	bl	8007aa0 <pxPortInitialiseStack>
 8006824:	4602      	mov	r2, r0
 8006826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006828:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800682a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006836:	bf00      	nop
 8006838:	3720      	adds	r7, #32
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006848:	f001 fa5e 	bl	8007d08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800684c:	4b2d      	ldr	r3, [pc, #180]	@ (8006904 <prvAddNewTaskToReadyList+0xc4>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3301      	adds	r3, #1
 8006852:	4a2c      	ldr	r2, [pc, #176]	@ (8006904 <prvAddNewTaskToReadyList+0xc4>)
 8006854:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006856:	4b2c      	ldr	r3, [pc, #176]	@ (8006908 <prvAddNewTaskToReadyList+0xc8>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800685e:	4a2a      	ldr	r2, [pc, #168]	@ (8006908 <prvAddNewTaskToReadyList+0xc8>)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006864:	4b27      	ldr	r3, [pc, #156]	@ (8006904 <prvAddNewTaskToReadyList+0xc4>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d110      	bne.n	800688e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800686c:	f000 fc1e 	bl	80070ac <prvInitialiseTaskLists>
 8006870:	e00d      	b.n	800688e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006872:	4b26      	ldr	r3, [pc, #152]	@ (800690c <prvAddNewTaskToReadyList+0xcc>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d109      	bne.n	800688e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800687a:	4b23      	ldr	r3, [pc, #140]	@ (8006908 <prvAddNewTaskToReadyList+0xc8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006884:	429a      	cmp	r2, r3
 8006886:	d802      	bhi.n	800688e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006888:	4a1f      	ldr	r2, [pc, #124]	@ (8006908 <prvAddNewTaskToReadyList+0xc8>)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800688e:	4b20      	ldr	r3, [pc, #128]	@ (8006910 <prvAddNewTaskToReadyList+0xd0>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3301      	adds	r3, #1
 8006894:	4a1e      	ldr	r2, [pc, #120]	@ (8006910 <prvAddNewTaskToReadyList+0xd0>)
 8006896:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006898:	4b1d      	ldr	r3, [pc, #116]	@ (8006910 <prvAddNewTaskToReadyList+0xd0>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006914 <prvAddNewTaskToReadyList+0xd4>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d903      	bls.n	80068b4 <prvAddNewTaskToReadyList+0x74>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b0:	4a18      	ldr	r2, [pc, #96]	@ (8006914 <prvAddNewTaskToReadyList+0xd4>)
 80068b2:	6013      	str	r3, [r2, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068b8:	4613      	mov	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4a15      	ldr	r2, [pc, #84]	@ (8006918 <prvAddNewTaskToReadyList+0xd8>)
 80068c2:	441a      	add	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3304      	adds	r3, #4
 80068c8:	4619      	mov	r1, r3
 80068ca:	4610      	mov	r0, r2
 80068cc:	f7ff f901 	bl	8005ad2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068d0:	f001 fa4c 	bl	8007d6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068d4:	4b0d      	ldr	r3, [pc, #52]	@ (800690c <prvAddNewTaskToReadyList+0xcc>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00e      	beq.n	80068fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006908 <prvAddNewTaskToReadyList+0xc8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d207      	bcs.n	80068fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068ea:	4b0c      	ldr	r3, [pc, #48]	@ (800691c <prvAddNewTaskToReadyList+0xdc>)
 80068ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068fa:	bf00      	nop
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	20001844 	.word	0x20001844
 8006908:	20001370 	.word	0x20001370
 800690c:	20001850 	.word	0x20001850
 8006910:	20001860 	.word	0x20001860
 8006914:	2000184c 	.word	0x2000184c
 8006918:	20001374 	.word	0x20001374
 800691c:	e000ed04 	.word	0xe000ed04

08006920 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006928:	2300      	movs	r3, #0
 800692a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d018      	beq.n	8006964 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006932:	4b14      	ldr	r3, [pc, #80]	@ (8006984 <vTaskDelay+0x64>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00b      	beq.n	8006952 <vTaskDelay+0x32>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	60bb      	str	r3, [r7, #8]
}
 800694c:	bf00      	nop
 800694e:	bf00      	nop
 8006950:	e7fd      	b.n	800694e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006952:	f000 f883 	bl	8006a5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006956:	2100      	movs	r1, #0
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fcf3 	bl	8007344 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800695e:	f000 f88b 	bl	8006a78 <xTaskResumeAll>
 8006962:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d107      	bne.n	800697a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800696a:	4b07      	ldr	r3, [pc, #28]	@ (8006988 <vTaskDelay+0x68>)
 800696c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800697a:	bf00      	nop
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	2000186c 	.word	0x2000186c
 8006988:	e000ed04 	.word	0xe000ed04

0800698c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08a      	sub	sp, #40	@ 0x28
 8006990:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006992:	2300      	movs	r3, #0
 8006994:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006996:	2300      	movs	r3, #0
 8006998:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800699a:	463a      	mov	r2, r7
 800699c:	1d39      	adds	r1, r7, #4
 800699e:	f107 0308 	add.w	r3, r7, #8
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff f834 	bl	8005a10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	9202      	str	r2, [sp, #8]
 80069b0:	9301      	str	r3, [sp, #4]
 80069b2:	2300      	movs	r3, #0
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	2300      	movs	r3, #0
 80069b8:	460a      	mov	r2, r1
 80069ba:	4922      	ldr	r1, [pc, #136]	@ (8006a44 <vTaskStartScheduler+0xb8>)
 80069bc:	4822      	ldr	r0, [pc, #136]	@ (8006a48 <vTaskStartScheduler+0xbc>)
 80069be:	f7ff fe09 	bl	80065d4 <xTaskCreateStatic>
 80069c2:	4603      	mov	r3, r0
 80069c4:	4a21      	ldr	r2, [pc, #132]	@ (8006a4c <vTaskStartScheduler+0xc0>)
 80069c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069c8:	4b20      	ldr	r3, [pc, #128]	@ (8006a4c <vTaskStartScheduler+0xc0>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069d0:	2301      	movs	r3, #1
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	e001      	b.n	80069da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d102      	bne.n	80069e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80069e0:	f000 fd04 	bl	80073ec <xTimerCreateTimerTask>
 80069e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d116      	bne.n	8006a1a <vTaskStartScheduler+0x8e>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	613b      	str	r3, [r7, #16]
}
 80069fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a00:	4b13      	ldr	r3, [pc, #76]	@ (8006a50 <vTaskStartScheduler+0xc4>)
 8006a02:	f04f 32ff 	mov.w	r2, #4294967295
 8006a06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a08:	4b12      	ldr	r3, [pc, #72]	@ (8006a54 <vTaskStartScheduler+0xc8>)
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a0e:	4b12      	ldr	r3, [pc, #72]	@ (8006a58 <vTaskStartScheduler+0xcc>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a14:	f001 f8d4 	bl	8007bc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a18:	e00f      	b.n	8006a3a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a20:	d10b      	bne.n	8006a3a <vTaskStartScheduler+0xae>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	60fb      	str	r3, [r7, #12]
}
 8006a34:	bf00      	nop
 8006a36:	bf00      	nop
 8006a38:	e7fd      	b.n	8006a36 <vTaskStartScheduler+0xaa>
}
 8006a3a:	bf00      	nop
 8006a3c:	3718      	adds	r7, #24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	080092c4 	.word	0x080092c4
 8006a48:	0800707d 	.word	0x0800707d
 8006a4c:	20001868 	.word	0x20001868
 8006a50:	20001864 	.word	0x20001864
 8006a54:	20001850 	.word	0x20001850
 8006a58:	20001848 	.word	0x20001848

08006a5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a60:	4b04      	ldr	r3, [pc, #16]	@ (8006a74 <vTaskSuspendAll+0x18>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3301      	adds	r3, #1
 8006a66:	4a03      	ldr	r2, [pc, #12]	@ (8006a74 <vTaskSuspendAll+0x18>)
 8006a68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a6a:	bf00      	nop
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	2000186c 	.word	0x2000186c

08006a78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a86:	4b42      	ldr	r3, [pc, #264]	@ (8006b90 <xTaskResumeAll+0x118>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10b      	bne.n	8006aa6 <xTaskResumeAll+0x2e>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	603b      	str	r3, [r7, #0]
}
 8006aa0:	bf00      	nop
 8006aa2:	bf00      	nop
 8006aa4:	e7fd      	b.n	8006aa2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006aa6:	f001 f92f 	bl	8007d08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006aaa:	4b39      	ldr	r3, [pc, #228]	@ (8006b90 <xTaskResumeAll+0x118>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	4a37      	ldr	r2, [pc, #220]	@ (8006b90 <xTaskResumeAll+0x118>)
 8006ab2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ab4:	4b36      	ldr	r3, [pc, #216]	@ (8006b90 <xTaskResumeAll+0x118>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d162      	bne.n	8006b82 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006abc:	4b35      	ldr	r3, [pc, #212]	@ (8006b94 <xTaskResumeAll+0x11c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d05e      	beq.n	8006b82 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ac4:	e02f      	b.n	8006b26 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ac6:	4b34      	ldr	r3, [pc, #208]	@ (8006b98 <xTaskResumeAll+0x120>)
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3318      	adds	r3, #24
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff f85a 	bl	8005b8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3304      	adds	r3, #4
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff f855 	bl	8005b8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8006b9c <xTaskResumeAll+0x124>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d903      	bls.n	8006af6 <xTaskResumeAll+0x7e>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af2:	4a2a      	ldr	r2, [pc, #168]	@ (8006b9c <xTaskResumeAll+0x124>)
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006afa:	4613      	mov	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4a27      	ldr	r2, [pc, #156]	@ (8006ba0 <xTaskResumeAll+0x128>)
 8006b04:	441a      	add	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	f7fe ffe0 	bl	8005ad2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b16:	4b23      	ldr	r3, [pc, #140]	@ (8006ba4 <xTaskResumeAll+0x12c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d302      	bcc.n	8006b26 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006b20:	4b21      	ldr	r3, [pc, #132]	@ (8006ba8 <xTaskResumeAll+0x130>)
 8006b22:	2201      	movs	r2, #1
 8006b24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b26:	4b1c      	ldr	r3, [pc, #112]	@ (8006b98 <xTaskResumeAll+0x120>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1cb      	bne.n	8006ac6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b34:	f000 fb58 	bl	80071e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b38:	4b1c      	ldr	r3, [pc, #112]	@ (8006bac <xTaskResumeAll+0x134>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d010      	beq.n	8006b66 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b44:	f000 f846 	bl	8006bd4 <xTaskIncrementTick>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006b4e:	4b16      	ldr	r3, [pc, #88]	@ (8006ba8 <xTaskResumeAll+0x130>)
 8006b50:	2201      	movs	r2, #1
 8006b52:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1f1      	bne.n	8006b44 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006b60:	4b12      	ldr	r3, [pc, #72]	@ (8006bac <xTaskResumeAll+0x134>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b66:	4b10      	ldr	r3, [pc, #64]	@ (8006ba8 <xTaskResumeAll+0x130>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d009      	beq.n	8006b82 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b72:	4b0f      	ldr	r3, [pc, #60]	@ (8006bb0 <xTaskResumeAll+0x138>)
 8006b74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b82:	f001 f8f3 	bl	8007d6c <vPortExitCritical>

	return xAlreadyYielded;
 8006b86:	68bb      	ldr	r3, [r7, #8]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	2000186c 	.word	0x2000186c
 8006b94:	20001844 	.word	0x20001844
 8006b98:	20001804 	.word	0x20001804
 8006b9c:	2000184c 	.word	0x2000184c
 8006ba0:	20001374 	.word	0x20001374
 8006ba4:	20001370 	.word	0x20001370
 8006ba8:	20001858 	.word	0x20001858
 8006bac:	20001854 	.word	0x20001854
 8006bb0:	e000ed04 	.word	0xe000ed04

08006bb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006bba:	4b05      	ldr	r3, [pc, #20]	@ (8006bd0 <xTaskGetTickCount+0x1c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006bc0:	687b      	ldr	r3, [r7, #4]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	20001848 	.word	0x20001848

08006bd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bde:	4b4f      	ldr	r3, [pc, #316]	@ (8006d1c <xTaskIncrementTick+0x148>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f040 8090 	bne.w	8006d08 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006be8:	4b4d      	ldr	r3, [pc, #308]	@ (8006d20 <xTaskIncrementTick+0x14c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3301      	adds	r3, #1
 8006bee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006bf0:	4a4b      	ldr	r2, [pc, #300]	@ (8006d20 <xTaskIncrementTick+0x14c>)
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d121      	bne.n	8006c40 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bfc:	4b49      	ldr	r3, [pc, #292]	@ (8006d24 <xTaskIncrementTick+0x150>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00b      	beq.n	8006c1e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	603b      	str	r3, [r7, #0]
}
 8006c18:	bf00      	nop
 8006c1a:	bf00      	nop
 8006c1c:	e7fd      	b.n	8006c1a <xTaskIncrementTick+0x46>
 8006c1e:	4b41      	ldr	r3, [pc, #260]	@ (8006d24 <xTaskIncrementTick+0x150>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	4b40      	ldr	r3, [pc, #256]	@ (8006d28 <xTaskIncrementTick+0x154>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a3e      	ldr	r2, [pc, #248]	@ (8006d24 <xTaskIncrementTick+0x150>)
 8006c2a:	6013      	str	r3, [r2, #0]
 8006c2c:	4a3e      	ldr	r2, [pc, #248]	@ (8006d28 <xTaskIncrementTick+0x154>)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6013      	str	r3, [r2, #0]
 8006c32:	4b3e      	ldr	r3, [pc, #248]	@ (8006d2c <xTaskIncrementTick+0x158>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3301      	adds	r3, #1
 8006c38:	4a3c      	ldr	r2, [pc, #240]	@ (8006d2c <xTaskIncrementTick+0x158>)
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	f000 fad4 	bl	80071e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c40:	4b3b      	ldr	r3, [pc, #236]	@ (8006d30 <xTaskIncrementTick+0x15c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d349      	bcc.n	8006cde <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c4a:	4b36      	ldr	r3, [pc, #216]	@ (8006d24 <xTaskIncrementTick+0x150>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d104      	bne.n	8006c5e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c54:	4b36      	ldr	r3, [pc, #216]	@ (8006d30 <xTaskIncrementTick+0x15c>)
 8006c56:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5a:	601a      	str	r2, [r3, #0]
					break;
 8006c5c:	e03f      	b.n	8006cde <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c5e:	4b31      	ldr	r3, [pc, #196]	@ (8006d24 <xTaskIncrementTick+0x150>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d203      	bcs.n	8006c7e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c76:	4a2e      	ldr	r2, [pc, #184]	@ (8006d30 <xTaskIncrementTick+0x15c>)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c7c:	e02f      	b.n	8006cde <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	3304      	adds	r3, #4
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fe ff82 	bl	8005b8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d004      	beq.n	8006c9a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	3318      	adds	r3, #24
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fe ff79 	bl	8005b8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c9e:	4b25      	ldr	r3, [pc, #148]	@ (8006d34 <xTaskIncrementTick+0x160>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d903      	bls.n	8006cae <xTaskIncrementTick+0xda>
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006caa:	4a22      	ldr	r2, [pc, #136]	@ (8006d34 <xTaskIncrementTick+0x160>)
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4a1f      	ldr	r2, [pc, #124]	@ (8006d38 <xTaskIncrementTick+0x164>)
 8006cbc:	441a      	add	r2, r3
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	f7fe ff04 	bl	8005ad2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cce:	4b1b      	ldr	r3, [pc, #108]	@ (8006d3c <xTaskIncrementTick+0x168>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d3b8      	bcc.n	8006c4a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cdc:	e7b5      	b.n	8006c4a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cde:	4b17      	ldr	r3, [pc, #92]	@ (8006d3c <xTaskIncrementTick+0x168>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ce4:	4914      	ldr	r1, [pc, #80]	@ (8006d38 <xTaskIncrementTick+0x164>)
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	440b      	add	r3, r1
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d901      	bls.n	8006cfa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006cfa:	4b11      	ldr	r3, [pc, #68]	@ (8006d40 <xTaskIncrementTick+0x16c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d007      	beq.n	8006d12 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006d02:	2301      	movs	r3, #1
 8006d04:	617b      	str	r3, [r7, #20]
 8006d06:	e004      	b.n	8006d12 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006d08:	4b0e      	ldr	r3, [pc, #56]	@ (8006d44 <xTaskIncrementTick+0x170>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	4a0d      	ldr	r2, [pc, #52]	@ (8006d44 <xTaskIncrementTick+0x170>)
 8006d10:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006d12:	697b      	ldr	r3, [r7, #20]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	2000186c 	.word	0x2000186c
 8006d20:	20001848 	.word	0x20001848
 8006d24:	200017fc 	.word	0x200017fc
 8006d28:	20001800 	.word	0x20001800
 8006d2c:	2000185c 	.word	0x2000185c
 8006d30:	20001864 	.word	0x20001864
 8006d34:	2000184c 	.word	0x2000184c
 8006d38:	20001374 	.word	0x20001374
 8006d3c:	20001370 	.word	0x20001370
 8006d40:	20001858 	.word	0x20001858
 8006d44:	20001854 	.word	0x20001854

08006d48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d4e:	4b28      	ldr	r3, [pc, #160]	@ (8006df0 <vTaskSwitchContext+0xa8>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d56:	4b27      	ldr	r3, [pc, #156]	@ (8006df4 <vTaskSwitchContext+0xac>)
 8006d58:	2201      	movs	r2, #1
 8006d5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d5c:	e042      	b.n	8006de4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006d5e:	4b25      	ldr	r3, [pc, #148]	@ (8006df4 <vTaskSwitchContext+0xac>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d64:	4b24      	ldr	r3, [pc, #144]	@ (8006df8 <vTaskSwitchContext+0xb0>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	60fb      	str	r3, [r7, #12]
 8006d6a:	e011      	b.n	8006d90 <vTaskSwitchContext+0x48>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10b      	bne.n	8006d8a <vTaskSwitchContext+0x42>
	__asm volatile
 8006d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	607b      	str	r3, [r7, #4]
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	e7fd      	b.n	8006d86 <vTaskSwitchContext+0x3e>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	491a      	ldr	r1, [pc, #104]	@ (8006dfc <vTaskSwitchContext+0xb4>)
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4613      	mov	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	440b      	add	r3, r1
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0e3      	beq.n	8006d6c <vTaskSwitchContext+0x24>
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4613      	mov	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4a13      	ldr	r2, [pc, #76]	@ (8006dfc <vTaskSwitchContext+0xb4>)
 8006db0:	4413      	add	r3, r2
 8006db2:	60bb      	str	r3, [r7, #8]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	605a      	str	r2, [r3, #4]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d104      	bne.n	8006dd4 <vTaskSwitchContext+0x8c>
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	605a      	str	r2, [r3, #4]
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	4a09      	ldr	r2, [pc, #36]	@ (8006e00 <vTaskSwitchContext+0xb8>)
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	4a06      	ldr	r2, [pc, #24]	@ (8006df8 <vTaskSwitchContext+0xb0>)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6013      	str	r3, [r2, #0]
}
 8006de4:	bf00      	nop
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	2000186c 	.word	0x2000186c
 8006df4:	20001858 	.word	0x20001858
 8006df8:	2000184c 	.word	0x2000184c
 8006dfc:	20001374 	.word	0x20001374
 8006e00:	20001370 	.word	0x20001370

08006e04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10b      	bne.n	8006e2c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	60fb      	str	r3, [r7, #12]
}
 8006e26:	bf00      	nop
 8006e28:	bf00      	nop
 8006e2a:	e7fd      	b.n	8006e28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e2c:	4b07      	ldr	r3, [pc, #28]	@ (8006e4c <vTaskPlaceOnEventList+0x48>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3318      	adds	r3, #24
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7fe fe70 	bl	8005b1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	6838      	ldr	r0, [r7, #0]
 8006e3e:	f000 fa81 	bl	8007344 <prvAddCurrentTaskToDelayedList>
}
 8006e42:	bf00      	nop
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20001370 	.word	0x20001370

08006e50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10b      	bne.n	8006e7a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	617b      	str	r3, [r7, #20]
}
 8006e74:	bf00      	nop
 8006e76:	bf00      	nop
 8006e78:	e7fd      	b.n	8006e76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ea4 <vTaskPlaceOnEventListRestricted+0x54>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3318      	adds	r3, #24
 8006e80:	4619      	mov	r1, r3
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f7fe fe25 	bl	8005ad2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d002      	beq.n	8006e94 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e92:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e94:	6879      	ldr	r1, [r7, #4]
 8006e96:	68b8      	ldr	r0, [r7, #8]
 8006e98:	f000 fa54 	bl	8007344 <prvAddCurrentTaskToDelayedList>
	}
 8006e9c:	bf00      	nop
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	20001370 	.word	0x20001370

08006ea8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10b      	bne.n	8006ed6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	60fb      	str	r3, [r7, #12]
}
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	e7fd      	b.n	8006ed2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	3318      	adds	r3, #24
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fe fe56 	bl	8005b8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f58 <xTaskRemoveFromEventList+0xb0>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d11d      	bne.n	8006f24 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	3304      	adds	r3, #4
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fe fe4d 	bl	8005b8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ef6:	4b19      	ldr	r3, [pc, #100]	@ (8006f5c <xTaskRemoveFromEventList+0xb4>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d903      	bls.n	8006f06 <xTaskRemoveFromEventList+0x5e>
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f02:	4a16      	ldr	r2, [pc, #88]	@ (8006f5c <xTaskRemoveFromEventList+0xb4>)
 8006f04:	6013      	str	r3, [r2, #0]
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4a13      	ldr	r2, [pc, #76]	@ (8006f60 <xTaskRemoveFromEventList+0xb8>)
 8006f14:	441a      	add	r2, r3
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	3304      	adds	r3, #4
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	f7fe fdd8 	bl	8005ad2 <vListInsertEnd>
 8006f22:	e005      	b.n	8006f30 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	3318      	adds	r3, #24
 8006f28:	4619      	mov	r1, r3
 8006f2a:	480e      	ldr	r0, [pc, #56]	@ (8006f64 <xTaskRemoveFromEventList+0xbc>)
 8006f2c:	f7fe fdd1 	bl	8005ad2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f34:	4b0c      	ldr	r3, [pc, #48]	@ (8006f68 <xTaskRemoveFromEventList+0xc0>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d905      	bls.n	8006f4a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f42:	4b0a      	ldr	r3, [pc, #40]	@ (8006f6c <xTaskRemoveFromEventList+0xc4>)
 8006f44:	2201      	movs	r2, #1
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	e001      	b.n	8006f4e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f4e:	697b      	ldr	r3, [r7, #20]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	2000186c 	.word	0x2000186c
 8006f5c:	2000184c 	.word	0x2000184c
 8006f60:	20001374 	.word	0x20001374
 8006f64:	20001804 	.word	0x20001804
 8006f68:	20001370 	.word	0x20001370
 8006f6c:	20001858 	.word	0x20001858

08006f70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f78:	4b06      	ldr	r3, [pc, #24]	@ (8006f94 <vTaskInternalSetTimeOutState+0x24>)
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f80:	4b05      	ldr	r3, [pc, #20]	@ (8006f98 <vTaskInternalSetTimeOutState+0x28>)
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	605a      	str	r2, [r3, #4]
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	2000185c 	.word	0x2000185c
 8006f98:	20001848 	.word	0x20001848

08006f9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b088      	sub	sp, #32
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10b      	bne.n	8006fc4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	613b      	str	r3, [r7, #16]
}
 8006fbe:	bf00      	nop
 8006fc0:	bf00      	nop
 8006fc2:	e7fd      	b.n	8006fc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10b      	bne.n	8006fe2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	60fb      	str	r3, [r7, #12]
}
 8006fdc:	bf00      	nop
 8006fde:	bf00      	nop
 8006fe0:	e7fd      	b.n	8006fde <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006fe2:	f000 fe91 	bl	8007d08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800705c <xTaskCheckForTimeOut+0xc0>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffe:	d102      	bne.n	8007006 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007000:	2300      	movs	r3, #0
 8007002:	61fb      	str	r3, [r7, #28]
 8007004:	e023      	b.n	800704e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	4b15      	ldr	r3, [pc, #84]	@ (8007060 <xTaskCheckForTimeOut+0xc4>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	429a      	cmp	r2, r3
 8007010:	d007      	beq.n	8007022 <xTaskCheckForTimeOut+0x86>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	429a      	cmp	r2, r3
 800701a:	d302      	bcc.n	8007022 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800701c:	2301      	movs	r3, #1
 800701e:	61fb      	str	r3, [r7, #28]
 8007020:	e015      	b.n	800704e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	429a      	cmp	r2, r3
 800702a:	d20b      	bcs.n	8007044 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	1ad2      	subs	r2, r2, r3
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff ff99 	bl	8006f70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800703e:	2300      	movs	r3, #0
 8007040:	61fb      	str	r3, [r7, #28]
 8007042:	e004      	b.n	800704e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2200      	movs	r2, #0
 8007048:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800704a:	2301      	movs	r3, #1
 800704c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800704e:	f000 fe8d 	bl	8007d6c <vPortExitCritical>

	return xReturn;
 8007052:	69fb      	ldr	r3, [r7, #28]
}
 8007054:	4618      	mov	r0, r3
 8007056:	3720      	adds	r7, #32
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	20001848 	.word	0x20001848
 8007060:	2000185c 	.word	0x2000185c

08007064 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007064:	b480      	push	{r7}
 8007066:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007068:	4b03      	ldr	r3, [pc, #12]	@ (8007078 <vTaskMissedYield+0x14>)
 800706a:	2201      	movs	r2, #1
 800706c:	601a      	str	r2, [r3, #0]
}
 800706e:	bf00      	nop
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	20001858 	.word	0x20001858

0800707c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007084:	f000 f852 	bl	800712c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007088:	4b06      	ldr	r3, [pc, #24]	@ (80070a4 <prvIdleTask+0x28>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d9f9      	bls.n	8007084 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007090:	4b05      	ldr	r3, [pc, #20]	@ (80070a8 <prvIdleTask+0x2c>)
 8007092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007096:	601a      	str	r2, [r3, #0]
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80070a0:	e7f0      	b.n	8007084 <prvIdleTask+0x8>
 80070a2:	bf00      	nop
 80070a4:	20001374 	.word	0x20001374
 80070a8:	e000ed04 	.word	0xe000ed04

080070ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070b2:	2300      	movs	r3, #0
 80070b4:	607b      	str	r3, [r7, #4]
 80070b6:	e00c      	b.n	80070d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	4613      	mov	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4a12      	ldr	r2, [pc, #72]	@ (800710c <prvInitialiseTaskLists+0x60>)
 80070c4:	4413      	add	r3, r2
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fe fcd6 	bl	8005a78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	3301      	adds	r3, #1
 80070d0:	607b      	str	r3, [r7, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b37      	cmp	r3, #55	@ 0x37
 80070d6:	d9ef      	bls.n	80070b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80070d8:	480d      	ldr	r0, [pc, #52]	@ (8007110 <prvInitialiseTaskLists+0x64>)
 80070da:	f7fe fccd 	bl	8005a78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80070de:	480d      	ldr	r0, [pc, #52]	@ (8007114 <prvInitialiseTaskLists+0x68>)
 80070e0:	f7fe fcca 	bl	8005a78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80070e4:	480c      	ldr	r0, [pc, #48]	@ (8007118 <prvInitialiseTaskLists+0x6c>)
 80070e6:	f7fe fcc7 	bl	8005a78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070ea:	480c      	ldr	r0, [pc, #48]	@ (800711c <prvInitialiseTaskLists+0x70>)
 80070ec:	f7fe fcc4 	bl	8005a78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80070f0:	480b      	ldr	r0, [pc, #44]	@ (8007120 <prvInitialiseTaskLists+0x74>)
 80070f2:	f7fe fcc1 	bl	8005a78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007124 <prvInitialiseTaskLists+0x78>)
 80070f8:	4a05      	ldr	r2, [pc, #20]	@ (8007110 <prvInitialiseTaskLists+0x64>)
 80070fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007128 <prvInitialiseTaskLists+0x7c>)
 80070fe:	4a05      	ldr	r2, [pc, #20]	@ (8007114 <prvInitialiseTaskLists+0x68>)
 8007100:	601a      	str	r2, [r3, #0]
}
 8007102:	bf00      	nop
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	20001374 	.word	0x20001374
 8007110:	200017d4 	.word	0x200017d4
 8007114:	200017e8 	.word	0x200017e8
 8007118:	20001804 	.word	0x20001804
 800711c:	20001818 	.word	0x20001818
 8007120:	20001830 	.word	0x20001830
 8007124:	200017fc 	.word	0x200017fc
 8007128:	20001800 	.word	0x20001800

0800712c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007132:	e019      	b.n	8007168 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007134:	f000 fde8 	bl	8007d08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007138:	4b10      	ldr	r3, [pc, #64]	@ (800717c <prvCheckTasksWaitingTermination+0x50>)
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3304      	adds	r3, #4
 8007144:	4618      	mov	r0, r3
 8007146:	f7fe fd21 	bl	8005b8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800714a:	4b0d      	ldr	r3, [pc, #52]	@ (8007180 <prvCheckTasksWaitingTermination+0x54>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3b01      	subs	r3, #1
 8007150:	4a0b      	ldr	r2, [pc, #44]	@ (8007180 <prvCheckTasksWaitingTermination+0x54>)
 8007152:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007154:	4b0b      	ldr	r3, [pc, #44]	@ (8007184 <prvCheckTasksWaitingTermination+0x58>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3b01      	subs	r3, #1
 800715a:	4a0a      	ldr	r2, [pc, #40]	@ (8007184 <prvCheckTasksWaitingTermination+0x58>)
 800715c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800715e:	f000 fe05 	bl	8007d6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f810 	bl	8007188 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007168:	4b06      	ldr	r3, [pc, #24]	@ (8007184 <prvCheckTasksWaitingTermination+0x58>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e1      	bne.n	8007134 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007170:	bf00      	nop
 8007172:	bf00      	nop
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	20001818 	.word	0x20001818
 8007180:	20001844 	.word	0x20001844
 8007184:	2000182c 	.word	0x2000182c

08007188 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007196:	2b00      	cmp	r3, #0
 8007198:	d108      	bne.n	80071ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 ffa2 	bl	80080e8 <vPortFree>
				vPortFree( pxTCB );
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 ff9f 	bl	80080e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80071aa:	e019      	b.n	80071e0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d103      	bne.n	80071be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 ff96 	bl	80080e8 <vPortFree>
	}
 80071bc:	e010      	b.n	80071e0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d00b      	beq.n	80071e0 <prvDeleteTCB+0x58>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	60fb      	str	r3, [r7, #12]
}
 80071da:	bf00      	nop
 80071dc:	bf00      	nop
 80071de:	e7fd      	b.n	80071dc <prvDeleteTCB+0x54>
	}
 80071e0:	bf00      	nop
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007220 <prvResetNextTaskUnblockTime+0x38>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d104      	bne.n	8007202 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007224 <prvResetNextTaskUnblockTime+0x3c>)
 80071fa:	f04f 32ff 	mov.w	r2, #4294967295
 80071fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007200:	e008      	b.n	8007214 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007202:	4b07      	ldr	r3, [pc, #28]	@ (8007220 <prvResetNextTaskUnblockTime+0x38>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	4a04      	ldr	r2, [pc, #16]	@ (8007224 <prvResetNextTaskUnblockTime+0x3c>)
 8007212:	6013      	str	r3, [r2, #0]
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	200017fc 	.word	0x200017fc
 8007224:	20001864 	.word	0x20001864

08007228 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800722e:	4b0b      	ldr	r3, [pc, #44]	@ (800725c <xTaskGetSchedulerState+0x34>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d102      	bne.n	800723c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007236:	2301      	movs	r3, #1
 8007238:	607b      	str	r3, [r7, #4]
 800723a:	e008      	b.n	800724e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800723c:	4b08      	ldr	r3, [pc, #32]	@ (8007260 <xTaskGetSchedulerState+0x38>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d102      	bne.n	800724a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007244:	2302      	movs	r3, #2
 8007246:	607b      	str	r3, [r7, #4]
 8007248:	e001      	b.n	800724e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800724a:	2300      	movs	r3, #0
 800724c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800724e:	687b      	ldr	r3, [r7, #4]
	}
 8007250:	4618      	mov	r0, r3
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	20001850 	.word	0x20001850
 8007260:	2000186c 	.word	0x2000186c

08007264 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007270:	2300      	movs	r3, #0
 8007272:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d058      	beq.n	800732c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800727a:	4b2f      	ldr	r3, [pc, #188]	@ (8007338 <xTaskPriorityDisinherit+0xd4>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	429a      	cmp	r2, r3
 8007282:	d00b      	beq.n	800729c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	60fb      	str	r3, [r7, #12]
}
 8007296:	bf00      	nop
 8007298:	bf00      	nop
 800729a:	e7fd      	b.n	8007298 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10b      	bne.n	80072bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	60bb      	str	r3, [r7, #8]
}
 80072b6:	bf00      	nop
 80072b8:	bf00      	nop
 80072ba:	e7fd      	b.n	80072b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072c0:	1e5a      	subs	r2, r3, #1
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d02c      	beq.n	800732c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d128      	bne.n	800732c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	3304      	adds	r3, #4
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fe fc54 	bl	8005b8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072fc:	4b0f      	ldr	r3, [pc, #60]	@ (800733c <xTaskPriorityDisinherit+0xd8>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	429a      	cmp	r2, r3
 8007302:	d903      	bls.n	800730c <xTaskPriorityDisinherit+0xa8>
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007308:	4a0c      	ldr	r2, [pc, #48]	@ (800733c <xTaskPriorityDisinherit+0xd8>)
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4a09      	ldr	r2, [pc, #36]	@ (8007340 <xTaskPriorityDisinherit+0xdc>)
 800731a:	441a      	add	r2, r3
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	3304      	adds	r3, #4
 8007320:	4619      	mov	r1, r3
 8007322:	4610      	mov	r0, r2
 8007324:	f7fe fbd5 	bl	8005ad2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007328:	2301      	movs	r3, #1
 800732a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800732c:	697b      	ldr	r3, [r7, #20]
	}
 800732e:	4618      	mov	r0, r3
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	20001370 	.word	0x20001370
 800733c:	2000184c 	.word	0x2000184c
 8007340:	20001374 	.word	0x20001374

08007344 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800734e:	4b21      	ldr	r3, [pc, #132]	@ (80073d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007354:	4b20      	ldr	r3, [pc, #128]	@ (80073d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3304      	adds	r3, #4
 800735a:	4618      	mov	r0, r3
 800735c:	f7fe fc16 	bl	8005b8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007366:	d10a      	bne.n	800737e <prvAddCurrentTaskToDelayedList+0x3a>
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d007      	beq.n	800737e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800736e:	4b1a      	ldr	r3, [pc, #104]	@ (80073d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3304      	adds	r3, #4
 8007374:	4619      	mov	r1, r3
 8007376:	4819      	ldr	r0, [pc, #100]	@ (80073dc <prvAddCurrentTaskToDelayedList+0x98>)
 8007378:	f7fe fbab 	bl	8005ad2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800737c:	e026      	b.n	80073cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4413      	add	r3, r2
 8007384:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007386:	4b14      	ldr	r3, [pc, #80]	@ (80073d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	429a      	cmp	r2, r3
 8007394:	d209      	bcs.n	80073aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007396:	4b12      	ldr	r3, [pc, #72]	@ (80073e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	4b0f      	ldr	r3, [pc, #60]	@ (80073d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3304      	adds	r3, #4
 80073a0:	4619      	mov	r1, r3
 80073a2:	4610      	mov	r0, r2
 80073a4:	f7fe fbb9 	bl	8005b1a <vListInsert>
}
 80073a8:	e010      	b.n	80073cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073aa:	4b0e      	ldr	r3, [pc, #56]	@ (80073e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	4b0a      	ldr	r3, [pc, #40]	@ (80073d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3304      	adds	r3, #4
 80073b4:	4619      	mov	r1, r3
 80073b6:	4610      	mov	r0, r2
 80073b8:	f7fe fbaf 	bl	8005b1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073bc:	4b0a      	ldr	r3, [pc, #40]	@ (80073e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d202      	bcs.n	80073cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80073c6:	4a08      	ldr	r2, [pc, #32]	@ (80073e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	6013      	str	r3, [r2, #0]
}
 80073cc:	bf00      	nop
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20001848 	.word	0x20001848
 80073d8:	20001370 	.word	0x20001370
 80073dc:	20001830 	.word	0x20001830
 80073e0:	20001800 	.word	0x20001800
 80073e4:	200017fc 	.word	0x200017fc
 80073e8:	20001864 	.word	0x20001864

080073ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08a      	sub	sp, #40	@ 0x28
 80073f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073f2:	2300      	movs	r3, #0
 80073f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80073f6:	f000 fb13 	bl	8007a20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80073fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007470 <xTimerCreateTimerTask+0x84>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d021      	beq.n	8007446 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007402:	2300      	movs	r3, #0
 8007404:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007406:	2300      	movs	r3, #0
 8007408:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800740a:	1d3a      	adds	r2, r7, #4
 800740c:	f107 0108 	add.w	r1, r7, #8
 8007410:	f107 030c 	add.w	r3, r7, #12
 8007414:	4618      	mov	r0, r3
 8007416:	f7fe fb15 	bl	8005a44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	9202      	str	r2, [sp, #8]
 8007422:	9301      	str	r3, [sp, #4]
 8007424:	2302      	movs	r3, #2
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	2300      	movs	r3, #0
 800742a:	460a      	mov	r2, r1
 800742c:	4911      	ldr	r1, [pc, #68]	@ (8007474 <xTimerCreateTimerTask+0x88>)
 800742e:	4812      	ldr	r0, [pc, #72]	@ (8007478 <xTimerCreateTimerTask+0x8c>)
 8007430:	f7ff f8d0 	bl	80065d4 <xTaskCreateStatic>
 8007434:	4603      	mov	r3, r0
 8007436:	4a11      	ldr	r2, [pc, #68]	@ (800747c <xTimerCreateTimerTask+0x90>)
 8007438:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800743a:	4b10      	ldr	r3, [pc, #64]	@ (800747c <xTimerCreateTimerTask+0x90>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007442:	2301      	movs	r3, #1
 8007444:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10b      	bne.n	8007464 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	613b      	str	r3, [r7, #16]
}
 800745e:	bf00      	nop
 8007460:	bf00      	nop
 8007462:	e7fd      	b.n	8007460 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007464:	697b      	ldr	r3, [r7, #20]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3718      	adds	r7, #24
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	200018a0 	.word	0x200018a0
 8007474:	080092cc 	.word	0x080092cc
 8007478:	080075b9 	.word	0x080075b9
 800747c:	200018a4 	.word	0x200018a4

08007480 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08a      	sub	sp, #40	@ 0x28
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800748e:	2300      	movs	r3, #0
 8007490:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10b      	bne.n	80074b0 <xTimerGenericCommand+0x30>
	__asm volatile
 8007498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	623b      	str	r3, [r7, #32]
}
 80074aa:	bf00      	nop
 80074ac:	bf00      	nop
 80074ae:	e7fd      	b.n	80074ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80074b0:	4b19      	ldr	r3, [pc, #100]	@ (8007518 <xTimerGenericCommand+0x98>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d02a      	beq.n	800750e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2b05      	cmp	r3, #5
 80074c8:	dc18      	bgt.n	80074fc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074ca:	f7ff fead 	bl	8007228 <xTaskGetSchedulerState>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d109      	bne.n	80074e8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074d4:	4b10      	ldr	r3, [pc, #64]	@ (8007518 <xTimerGenericCommand+0x98>)
 80074d6:	6818      	ldr	r0, [r3, #0]
 80074d8:	f107 0110 	add.w	r1, r7, #16
 80074dc:	2300      	movs	r3, #0
 80074de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074e0:	f7fe fc88 	bl	8005df4 <xQueueGenericSend>
 80074e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80074e6:	e012      	b.n	800750e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007518 <xTimerGenericCommand+0x98>)
 80074ea:	6818      	ldr	r0, [r3, #0]
 80074ec:	f107 0110 	add.w	r1, r7, #16
 80074f0:	2300      	movs	r3, #0
 80074f2:	2200      	movs	r2, #0
 80074f4:	f7fe fc7e 	bl	8005df4 <xQueueGenericSend>
 80074f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80074fa:	e008      	b.n	800750e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074fc:	4b06      	ldr	r3, [pc, #24]	@ (8007518 <xTimerGenericCommand+0x98>)
 80074fe:	6818      	ldr	r0, [r3, #0]
 8007500:	f107 0110 	add.w	r1, r7, #16
 8007504:	2300      	movs	r3, #0
 8007506:	683a      	ldr	r2, [r7, #0]
 8007508:	f7fe fd76 	bl	8005ff8 <xQueueGenericSendFromISR>
 800750c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800750e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007510:	4618      	mov	r0, r3
 8007512:	3728      	adds	r7, #40	@ 0x28
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	200018a0 	.word	0x200018a0

0800751c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af02      	add	r7, sp, #8
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007526:	4b23      	ldr	r3, [pc, #140]	@ (80075b4 <prvProcessExpiredTimer+0x98>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	3304      	adds	r3, #4
 8007534:	4618      	mov	r0, r3
 8007536:	f7fe fb29 	bl	8005b8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	2b00      	cmp	r3, #0
 8007546:	d023      	beq.n	8007590 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	699a      	ldr	r2, [r3, #24]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	18d1      	adds	r1, r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	6978      	ldr	r0, [r7, #20]
 8007556:	f000 f8d5 	bl	8007704 <prvInsertTimerInActiveList>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d020      	beq.n	80075a2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007560:	2300      	movs	r3, #0
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	2300      	movs	r3, #0
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	2100      	movs	r1, #0
 800756a:	6978      	ldr	r0, [r7, #20]
 800756c:	f7ff ff88 	bl	8007480 <xTimerGenericCommand>
 8007570:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d114      	bne.n	80075a2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	60fb      	str	r3, [r7, #12]
}
 800758a:	bf00      	nop
 800758c:	bf00      	nop
 800758e:	e7fd      	b.n	800758c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007596:	f023 0301 	bic.w	r3, r3, #1
 800759a:	b2da      	uxtb	r2, r3
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	6978      	ldr	r0, [r7, #20]
 80075a8:	4798      	blx	r3
}
 80075aa:	bf00      	nop
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20001898 	.word	0x20001898

080075b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075c0:	f107 0308 	add.w	r3, r7, #8
 80075c4:	4618      	mov	r0, r3
 80075c6:	f000 f859 	bl	800767c <prvGetNextExpireTime>
 80075ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4619      	mov	r1, r3
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f000 f805 	bl	80075e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80075d6:	f000 f8d7 	bl	8007788 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075da:	bf00      	nop
 80075dc:	e7f0      	b.n	80075c0 <prvTimerTask+0x8>
	...

080075e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80075ea:	f7ff fa37 	bl	8006a5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075ee:	f107 0308 	add.w	r3, r7, #8
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 f866 	bl	80076c4 <prvSampleTimeNow>
 80075f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d130      	bne.n	8007662 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10a      	bne.n	800761c <prvProcessTimerOrBlockTask+0x3c>
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	429a      	cmp	r2, r3
 800760c:	d806      	bhi.n	800761c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800760e:	f7ff fa33 	bl	8006a78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007612:	68f9      	ldr	r1, [r7, #12]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7ff ff81 	bl	800751c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800761a:	e024      	b.n	8007666 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d008      	beq.n	8007634 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007622:	4b13      	ldr	r3, [pc, #76]	@ (8007670 <prvProcessTimerOrBlockTask+0x90>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <prvProcessTimerOrBlockTask+0x50>
 800762c:	2301      	movs	r3, #1
 800762e:	e000      	b.n	8007632 <prvProcessTimerOrBlockTask+0x52>
 8007630:	2300      	movs	r3, #0
 8007632:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007634:	4b0f      	ldr	r3, [pc, #60]	@ (8007674 <prvProcessTimerOrBlockTask+0x94>)
 8007636:	6818      	ldr	r0, [r3, #0]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	4619      	mov	r1, r3
 8007642:	f7fe ff93 	bl	800656c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007646:	f7ff fa17 	bl	8006a78 <xTaskResumeAll>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10a      	bne.n	8007666 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007650:	4b09      	ldr	r3, [pc, #36]	@ (8007678 <prvProcessTimerOrBlockTask+0x98>)
 8007652:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	f3bf 8f6f 	isb	sy
}
 8007660:	e001      	b.n	8007666 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007662:	f7ff fa09 	bl	8006a78 <xTaskResumeAll>
}
 8007666:	bf00      	nop
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	2000189c 	.word	0x2000189c
 8007674:	200018a0 	.word	0x200018a0
 8007678:	e000ed04 	.word	0xe000ed04

0800767c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007684:	4b0e      	ldr	r3, [pc, #56]	@ (80076c0 <prvGetNextExpireTime+0x44>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <prvGetNextExpireTime+0x16>
 800768e:	2201      	movs	r2, #1
 8007690:	e000      	b.n	8007694 <prvGetNextExpireTime+0x18>
 8007692:	2200      	movs	r2, #0
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d105      	bne.n	80076ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076a0:	4b07      	ldr	r3, [pc, #28]	@ (80076c0 <prvGetNextExpireTime+0x44>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	e001      	b.n	80076b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80076b0:	68fb      	ldr	r3, [r7, #12]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	20001898 	.word	0x20001898

080076c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80076cc:	f7ff fa72 	bl	8006bb4 <xTaskGetTickCount>
 80076d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80076d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007700 <prvSampleTimeNow+0x3c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d205      	bcs.n	80076e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80076dc:	f000 f93a 	bl	8007954 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	e002      	b.n	80076ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80076ee:	4a04      	ldr	r2, [pc, #16]	@ (8007700 <prvSampleTimeNow+0x3c>)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80076f4:	68fb      	ldr	r3, [r7, #12]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	200018a8 	.word	0x200018a8

08007704 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
 8007710:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	429a      	cmp	r2, r3
 8007728:	d812      	bhi.n	8007750 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	1ad2      	subs	r2, r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	429a      	cmp	r2, r3
 8007736:	d302      	bcc.n	800773e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007738:	2301      	movs	r3, #1
 800773a:	617b      	str	r3, [r7, #20]
 800773c:	e01b      	b.n	8007776 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800773e:	4b10      	ldr	r3, [pc, #64]	@ (8007780 <prvInsertTimerInActiveList+0x7c>)
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3304      	adds	r3, #4
 8007746:	4619      	mov	r1, r3
 8007748:	4610      	mov	r0, r2
 800774a:	f7fe f9e6 	bl	8005b1a <vListInsert>
 800774e:	e012      	b.n	8007776 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	429a      	cmp	r2, r3
 8007756:	d206      	bcs.n	8007766 <prvInsertTimerInActiveList+0x62>
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	429a      	cmp	r2, r3
 800775e:	d302      	bcc.n	8007766 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007760:	2301      	movs	r3, #1
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	e007      	b.n	8007776 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007766:	4b07      	ldr	r3, [pc, #28]	@ (8007784 <prvInsertTimerInActiveList+0x80>)
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3304      	adds	r3, #4
 800776e:	4619      	mov	r1, r3
 8007770:	4610      	mov	r0, r2
 8007772:	f7fe f9d2 	bl	8005b1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007776:	697b      	ldr	r3, [r7, #20]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	2000189c 	.word	0x2000189c
 8007784:	20001898 	.word	0x20001898

08007788 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08e      	sub	sp, #56	@ 0x38
 800778c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800778e:	e0ce      	b.n	800792e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	da19      	bge.n	80077ca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007796:	1d3b      	adds	r3, r7, #4
 8007798:	3304      	adds	r3, #4
 800779a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800779c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10b      	bne.n	80077ba <prvProcessReceivedCommands+0x32>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	61fb      	str	r3, [r7, #28]
}
 80077b4:	bf00      	nop
 80077b6:	bf00      	nop
 80077b8:	e7fd      	b.n	80077b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80077ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077c0:	6850      	ldr	r0, [r2, #4]
 80077c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077c4:	6892      	ldr	r2, [r2, #8]
 80077c6:	4611      	mov	r1, r2
 80077c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f2c0 80ae 	blt.w	800792e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80077d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d004      	beq.n	80077e8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e0:	3304      	adds	r3, #4
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fe f9d2 	bl	8005b8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077e8:	463b      	mov	r3, r7
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7ff ff6a 	bl	80076c4 <prvSampleTimeNow>
 80077f0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b09      	cmp	r3, #9
 80077f6:	f200 8097 	bhi.w	8007928 <prvProcessReceivedCommands+0x1a0>
 80077fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007800 <prvProcessReceivedCommands+0x78>)
 80077fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007800:	08007829 	.word	0x08007829
 8007804:	08007829 	.word	0x08007829
 8007808:	08007829 	.word	0x08007829
 800780c:	0800789f 	.word	0x0800789f
 8007810:	080078b3 	.word	0x080078b3
 8007814:	080078ff 	.word	0x080078ff
 8007818:	08007829 	.word	0x08007829
 800781c:	08007829 	.word	0x08007829
 8007820:	0800789f 	.word	0x0800789f
 8007824:	080078b3 	.word	0x080078b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800782e:	f043 0301 	orr.w	r3, r3, #1
 8007832:	b2da      	uxtb	r2, r3
 8007834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007836:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	18d1      	adds	r1, r2, r3
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007848:	f7ff ff5c 	bl	8007704 <prvInsertTimerInActiveList>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d06c      	beq.n	800792c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007858:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800785a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	2b00      	cmp	r3, #0
 8007866:	d061      	beq.n	800792c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	441a      	add	r2, r3
 8007870:	2300      	movs	r3, #0
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	2300      	movs	r3, #0
 8007876:	2100      	movs	r1, #0
 8007878:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800787a:	f7ff fe01 	bl	8007480 <xTimerGenericCommand>
 800787e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d152      	bne.n	800792c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	61bb      	str	r3, [r7, #24]
}
 8007898:	bf00      	nop
 800789a:	bf00      	nop
 800789c:	e7fd      	b.n	800789a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800789e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078a4:	f023 0301 	bic.w	r3, r3, #1
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80078b0:	e03d      	b.n	800792e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078b8:	f043 0301 	orr.w	r3, r3, #1
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80078ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10b      	bne.n	80078ea <prvProcessReceivedCommands+0x162>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	617b      	str	r3, [r7, #20]
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	e7fd      	b.n	80078e6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80078ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ec:	699a      	ldr	r2, [r3, #24]
 80078ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f0:	18d1      	adds	r1, r2, r3
 80078f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078f8:	f7ff ff04 	bl	8007704 <prvInsertTimerInActiveList>
					break;
 80078fc:	e017      	b.n	800792e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80078fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007900:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	2b00      	cmp	r3, #0
 800790a:	d103      	bne.n	8007914 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800790c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800790e:	f000 fbeb 	bl	80080e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007912:	e00c      	b.n	800792e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007916:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800791a:	f023 0301 	bic.w	r3, r3, #1
 800791e:	b2da      	uxtb	r2, r3
 8007920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007922:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007926:	e002      	b.n	800792e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007928:	bf00      	nop
 800792a:	e000      	b.n	800792e <prvProcessReceivedCommands+0x1a6>
					break;
 800792c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800792e:	4b08      	ldr	r3, [pc, #32]	@ (8007950 <prvProcessReceivedCommands+0x1c8>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	1d39      	adds	r1, r7, #4
 8007934:	2200      	movs	r2, #0
 8007936:	4618      	mov	r0, r3
 8007938:	f7fe fbfc 	bl	8006134 <xQueueReceive>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	f47f af26 	bne.w	8007790 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop
 8007948:	3730      	adds	r7, #48	@ 0x30
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	200018a0 	.word	0x200018a0

08007954 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b088      	sub	sp, #32
 8007958:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800795a:	e049      	b.n	80079f0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800795c:	4b2e      	ldr	r3, [pc, #184]	@ (8007a18 <prvSwitchTimerLists+0xc4>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007966:	4b2c      	ldr	r3, [pc, #176]	@ (8007a18 <prvSwitchTimerLists+0xc4>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3304      	adds	r3, #4
 8007974:	4618      	mov	r0, r3
 8007976:	f7fe f909 	bl	8005b8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007988:	f003 0304 	and.w	r3, r3, #4
 800798c:	2b00      	cmp	r3, #0
 800798e:	d02f      	beq.n	80079f0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	4413      	add	r3, r2
 8007998:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d90e      	bls.n	80079c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007a18 <prvSwitchTimerLists+0xc4>)
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3304      	adds	r3, #4
 80079b6:	4619      	mov	r1, r3
 80079b8:	4610      	mov	r0, r2
 80079ba:	f7fe f8ae 	bl	8005b1a <vListInsert>
 80079be:	e017      	b.n	80079f0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079c0:	2300      	movs	r3, #0
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	2300      	movs	r3, #0
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	2100      	movs	r1, #0
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f7ff fd58 	bl	8007480 <xTimerGenericCommand>
 80079d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10b      	bne.n	80079f0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	603b      	str	r3, [r7, #0]
}
 80079ea:	bf00      	nop
 80079ec:	bf00      	nop
 80079ee:	e7fd      	b.n	80079ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079f0:	4b09      	ldr	r3, [pc, #36]	@ (8007a18 <prvSwitchTimerLists+0xc4>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1b0      	bne.n	800795c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80079fa:	4b07      	ldr	r3, [pc, #28]	@ (8007a18 <prvSwitchTimerLists+0xc4>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a00:	4b06      	ldr	r3, [pc, #24]	@ (8007a1c <prvSwitchTimerLists+0xc8>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a04      	ldr	r2, [pc, #16]	@ (8007a18 <prvSwitchTimerLists+0xc4>)
 8007a06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a08:	4a04      	ldr	r2, [pc, #16]	@ (8007a1c <prvSwitchTimerLists+0xc8>)
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	6013      	str	r3, [r2, #0]
}
 8007a0e:	bf00      	nop
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20001898 	.word	0x20001898
 8007a1c:	2000189c 	.word	0x2000189c

08007a20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a26:	f000 f96f 	bl	8007d08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a2a:	4b15      	ldr	r3, [pc, #84]	@ (8007a80 <prvCheckForValidListAndQueue+0x60>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d120      	bne.n	8007a74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a32:	4814      	ldr	r0, [pc, #80]	@ (8007a84 <prvCheckForValidListAndQueue+0x64>)
 8007a34:	f7fe f820 	bl	8005a78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a38:	4813      	ldr	r0, [pc, #76]	@ (8007a88 <prvCheckForValidListAndQueue+0x68>)
 8007a3a:	f7fe f81d 	bl	8005a78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a3e:	4b13      	ldr	r3, [pc, #76]	@ (8007a8c <prvCheckForValidListAndQueue+0x6c>)
 8007a40:	4a10      	ldr	r2, [pc, #64]	@ (8007a84 <prvCheckForValidListAndQueue+0x64>)
 8007a42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a44:	4b12      	ldr	r3, [pc, #72]	@ (8007a90 <prvCheckForValidListAndQueue+0x70>)
 8007a46:	4a10      	ldr	r2, [pc, #64]	@ (8007a88 <prvCheckForValidListAndQueue+0x68>)
 8007a48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	4b11      	ldr	r3, [pc, #68]	@ (8007a94 <prvCheckForValidListAndQueue+0x74>)
 8007a50:	4a11      	ldr	r2, [pc, #68]	@ (8007a98 <prvCheckForValidListAndQueue+0x78>)
 8007a52:	2110      	movs	r1, #16
 8007a54:	200a      	movs	r0, #10
 8007a56:	f7fe f92d 	bl	8005cb4 <xQueueGenericCreateStatic>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	4a08      	ldr	r2, [pc, #32]	@ (8007a80 <prvCheckForValidListAndQueue+0x60>)
 8007a5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a60:	4b07      	ldr	r3, [pc, #28]	@ (8007a80 <prvCheckForValidListAndQueue+0x60>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d005      	beq.n	8007a74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a68:	4b05      	ldr	r3, [pc, #20]	@ (8007a80 <prvCheckForValidListAndQueue+0x60>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	490b      	ldr	r1, [pc, #44]	@ (8007a9c <prvCheckForValidListAndQueue+0x7c>)
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fe fd52 	bl	8006518 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a74:	f000 f97a 	bl	8007d6c <vPortExitCritical>
}
 8007a78:	bf00      	nop
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	200018a0 	.word	0x200018a0
 8007a84:	20001870 	.word	0x20001870
 8007a88:	20001884 	.word	0x20001884
 8007a8c:	20001898 	.word	0x20001898
 8007a90:	2000189c 	.word	0x2000189c
 8007a94:	2000194c 	.word	0x2000194c
 8007a98:	200018ac 	.word	0x200018ac
 8007a9c:	080092d4 	.word	0x080092d4

08007aa0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3b04      	subs	r3, #4
 8007ab0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007ab8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	3b04      	subs	r3, #4
 8007abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	f023 0201 	bic.w	r2, r3, #1
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	3b04      	subs	r3, #4
 8007ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ad0:	4a0c      	ldr	r2, [pc, #48]	@ (8007b04 <pxPortInitialiseStack+0x64>)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3b14      	subs	r3, #20
 8007ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3b04      	subs	r3, #4
 8007ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f06f 0202 	mvn.w	r2, #2
 8007aee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	3b20      	subs	r3, #32
 8007af4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007af6:	68fb      	ldr	r3, [r7, #12]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	08007b09 	.word	0x08007b09

08007b08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b12:	4b13      	ldr	r3, [pc, #76]	@ (8007b60 <prvTaskExitError+0x58>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b1a:	d00b      	beq.n	8007b34 <prvTaskExitError+0x2c>
	__asm volatile
 8007b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b20:	f383 8811 	msr	BASEPRI, r3
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	60fb      	str	r3, [r7, #12]
}
 8007b2e:	bf00      	nop
 8007b30:	bf00      	nop
 8007b32:	e7fd      	b.n	8007b30 <prvTaskExitError+0x28>
	__asm volatile
 8007b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	60bb      	str	r3, [r7, #8]
}
 8007b46:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b48:	bf00      	nop
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0fc      	beq.n	8007b4a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b50:	bf00      	nop
 8007b52:	bf00      	nop
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	2000000c 	.word	0x2000000c
	...

08007b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b70:	4b07      	ldr	r3, [pc, #28]	@ (8007b90 <pxCurrentTCBConst2>)
 8007b72:	6819      	ldr	r1, [r3, #0]
 8007b74:	6808      	ldr	r0, [r1, #0]
 8007b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7a:	f380 8809 	msr	PSP, r0
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f04f 0000 	mov.w	r0, #0
 8007b86:	f380 8811 	msr	BASEPRI, r0
 8007b8a:	4770      	bx	lr
 8007b8c:	f3af 8000 	nop.w

08007b90 <pxCurrentTCBConst2>:
 8007b90:	20001370 	.word	0x20001370
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop

08007b98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b98:	4808      	ldr	r0, [pc, #32]	@ (8007bbc <prvPortStartFirstTask+0x24>)
 8007b9a:	6800      	ldr	r0, [r0, #0]
 8007b9c:	6800      	ldr	r0, [r0, #0]
 8007b9e:	f380 8808 	msr	MSP, r0
 8007ba2:	f04f 0000 	mov.w	r0, #0
 8007ba6:	f380 8814 	msr	CONTROL, r0
 8007baa:	b662      	cpsie	i
 8007bac:	b661      	cpsie	f
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	df00      	svc	0
 8007bb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bba:	bf00      	nop
 8007bbc:	e000ed08 	.word	0xe000ed08

08007bc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007bc6:	4b47      	ldr	r3, [pc, #284]	@ (8007ce4 <xPortStartScheduler+0x124>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a47      	ldr	r2, [pc, #284]	@ (8007ce8 <xPortStartScheduler+0x128>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d10b      	bne.n	8007be8 <xPortStartScheduler+0x28>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	613b      	str	r3, [r7, #16]
}
 8007be2:	bf00      	nop
 8007be4:	bf00      	nop
 8007be6:	e7fd      	b.n	8007be4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007be8:	4b3e      	ldr	r3, [pc, #248]	@ (8007ce4 <xPortStartScheduler+0x124>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a3f      	ldr	r2, [pc, #252]	@ (8007cec <xPortStartScheduler+0x12c>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d10b      	bne.n	8007c0a <xPortStartScheduler+0x4a>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	60fb      	str	r3, [r7, #12]
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop
 8007c08:	e7fd      	b.n	8007c06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c0a:	4b39      	ldr	r3, [pc, #228]	@ (8007cf0 <xPortStartScheduler+0x130>)
 8007c0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	22ff      	movs	r2, #255	@ 0xff
 8007c1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c24:	78fb      	ldrb	r3, [r7, #3]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	4b31      	ldr	r3, [pc, #196]	@ (8007cf4 <xPortStartScheduler+0x134>)
 8007c30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c32:	4b31      	ldr	r3, [pc, #196]	@ (8007cf8 <xPortStartScheduler+0x138>)
 8007c34:	2207      	movs	r2, #7
 8007c36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c38:	e009      	b.n	8007c4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8007cf8 <xPortStartScheduler+0x138>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	4a2d      	ldr	r2, [pc, #180]	@ (8007cf8 <xPortStartScheduler+0x138>)
 8007c42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c44:	78fb      	ldrb	r3, [r7, #3]
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	005b      	lsls	r3, r3, #1
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c4e:	78fb      	ldrb	r3, [r7, #3]
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c56:	2b80      	cmp	r3, #128	@ 0x80
 8007c58:	d0ef      	beq.n	8007c3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c5a:	4b27      	ldr	r3, [pc, #156]	@ (8007cf8 <xPortStartScheduler+0x138>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f1c3 0307 	rsb	r3, r3, #7
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	d00b      	beq.n	8007c7e <xPortStartScheduler+0xbe>
	__asm volatile
 8007c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	60bb      	str	r3, [r7, #8]
}
 8007c78:	bf00      	nop
 8007c7a:	bf00      	nop
 8007c7c:	e7fd      	b.n	8007c7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8007cf8 <xPortStartScheduler+0x138>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	021b      	lsls	r3, r3, #8
 8007c84:	4a1c      	ldr	r2, [pc, #112]	@ (8007cf8 <xPortStartScheduler+0x138>)
 8007c86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c88:	4b1b      	ldr	r3, [pc, #108]	@ (8007cf8 <xPortStartScheduler+0x138>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007c90:	4a19      	ldr	r2, [pc, #100]	@ (8007cf8 <xPortStartScheduler+0x138>)
 8007c92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	b2da      	uxtb	r2, r3
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c9c:	4b17      	ldr	r3, [pc, #92]	@ (8007cfc <xPortStartScheduler+0x13c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a16      	ldr	r2, [pc, #88]	@ (8007cfc <xPortStartScheduler+0x13c>)
 8007ca2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007ca6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ca8:	4b14      	ldr	r3, [pc, #80]	@ (8007cfc <xPortStartScheduler+0x13c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a13      	ldr	r2, [pc, #76]	@ (8007cfc <xPortStartScheduler+0x13c>)
 8007cae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007cb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cb4:	f000 f8da 	bl	8007e6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007cb8:	4b11      	ldr	r3, [pc, #68]	@ (8007d00 <xPortStartScheduler+0x140>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007cbe:	f000 f8f9 	bl	8007eb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cc2:	4b10      	ldr	r3, [pc, #64]	@ (8007d04 <xPortStartScheduler+0x144>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8007d04 <xPortStartScheduler+0x144>)
 8007cc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007ccc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cce:	f7ff ff63 	bl	8007b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007cd2:	f7ff f839 	bl	8006d48 <vTaskSwitchContext>
	prvTaskExitError();
 8007cd6:	f7ff ff17 	bl	8007b08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	e000ed00 	.word	0xe000ed00
 8007ce8:	410fc271 	.word	0x410fc271
 8007cec:	410fc270 	.word	0x410fc270
 8007cf0:	e000e400 	.word	0xe000e400
 8007cf4:	2000199c 	.word	0x2000199c
 8007cf8:	200019a0 	.word	0x200019a0
 8007cfc:	e000ed20 	.word	0xe000ed20
 8007d00:	2000000c 	.word	0x2000000c
 8007d04:	e000ef34 	.word	0xe000ef34

08007d08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	607b      	str	r3, [r7, #4]
}
 8007d20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d22:	4b10      	ldr	r3, [pc, #64]	@ (8007d64 <vPortEnterCritical+0x5c>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3301      	adds	r3, #1
 8007d28:	4a0e      	ldr	r2, [pc, #56]	@ (8007d64 <vPortEnterCritical+0x5c>)
 8007d2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8007d64 <vPortEnterCritical+0x5c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d110      	bne.n	8007d56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d34:	4b0c      	ldr	r3, [pc, #48]	@ (8007d68 <vPortEnterCritical+0x60>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00b      	beq.n	8007d56 <vPortEnterCritical+0x4e>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	603b      	str	r3, [r7, #0]
}
 8007d50:	bf00      	nop
 8007d52:	bf00      	nop
 8007d54:	e7fd      	b.n	8007d52 <vPortEnterCritical+0x4a>
	}
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	2000000c 	.word	0x2000000c
 8007d68:	e000ed04 	.word	0xe000ed04

08007d6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d72:	4b12      	ldr	r3, [pc, #72]	@ (8007dbc <vPortExitCritical+0x50>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10b      	bne.n	8007d92 <vPortExitCritical+0x26>
	__asm volatile
 8007d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	607b      	str	r3, [r7, #4]
}
 8007d8c:	bf00      	nop
 8007d8e:	bf00      	nop
 8007d90:	e7fd      	b.n	8007d8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d92:	4b0a      	ldr	r3, [pc, #40]	@ (8007dbc <vPortExitCritical+0x50>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3b01      	subs	r3, #1
 8007d98:	4a08      	ldr	r2, [pc, #32]	@ (8007dbc <vPortExitCritical+0x50>)
 8007d9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d9c:	4b07      	ldr	r3, [pc, #28]	@ (8007dbc <vPortExitCritical+0x50>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d105      	bne.n	8007db0 <vPortExitCritical+0x44>
 8007da4:	2300      	movs	r3, #0
 8007da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	f383 8811 	msr	BASEPRI, r3
}
 8007dae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	2000000c 	.word	0x2000000c

08007dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007dc0:	f3ef 8009 	mrs	r0, PSP
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	4b15      	ldr	r3, [pc, #84]	@ (8007e20 <pxCurrentTCBConst>)
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	f01e 0f10 	tst.w	lr, #16
 8007dd0:	bf08      	it	eq
 8007dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dda:	6010      	str	r0, [r2, #0]
 8007ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007de0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007de4:	f380 8811 	msr	BASEPRI, r0
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f7fe ffaa 	bl	8006d48 <vTaskSwitchContext>
 8007df4:	f04f 0000 	mov.w	r0, #0
 8007df8:	f380 8811 	msr	BASEPRI, r0
 8007dfc:	bc09      	pop	{r0, r3}
 8007dfe:	6819      	ldr	r1, [r3, #0]
 8007e00:	6808      	ldr	r0, [r1, #0]
 8007e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e06:	f01e 0f10 	tst.w	lr, #16
 8007e0a:	bf08      	it	eq
 8007e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e10:	f380 8809 	msr	PSP, r0
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	f3af 8000 	nop.w

08007e20 <pxCurrentTCBConst>:
 8007e20:	20001370 	.word	0x20001370
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop

08007e28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	607b      	str	r3, [r7, #4]
}
 8007e40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e42:	f7fe fec7 	bl	8006bd4 <xTaskIncrementTick>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e4c:	4b06      	ldr	r3, [pc, #24]	@ (8007e68 <xPortSysTickHandler+0x40>)
 8007e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	2300      	movs	r3, #0
 8007e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	f383 8811 	msr	BASEPRI, r3
}
 8007e5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	e000ed04 	.word	0xe000ed04

08007e6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e70:	4b0b      	ldr	r3, [pc, #44]	@ (8007ea0 <vPortSetupTimerInterrupt+0x34>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e76:	4b0b      	ldr	r3, [pc, #44]	@ (8007ea4 <vPortSetupTimerInterrupt+0x38>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ea8 <vPortSetupTimerInterrupt+0x3c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a0a      	ldr	r2, [pc, #40]	@ (8007eac <vPortSetupTimerInterrupt+0x40>)
 8007e82:	fba2 2303 	umull	r2, r3, r2, r3
 8007e86:	099b      	lsrs	r3, r3, #6
 8007e88:	4a09      	ldr	r2, [pc, #36]	@ (8007eb0 <vPortSetupTimerInterrupt+0x44>)
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e8e:	4b04      	ldr	r3, [pc, #16]	@ (8007ea0 <vPortSetupTimerInterrupt+0x34>)
 8007e90:	2207      	movs	r2, #7
 8007e92:	601a      	str	r2, [r3, #0]
}
 8007e94:	bf00      	nop
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	e000e010 	.word	0xe000e010
 8007ea4:	e000e018 	.word	0xe000e018
 8007ea8:	20000000 	.word	0x20000000
 8007eac:	10624dd3 	.word	0x10624dd3
 8007eb0:	e000e014 	.word	0xe000e014

08007eb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007eb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ec4 <vPortEnableVFP+0x10>
 8007eb8:	6801      	ldr	r1, [r0, #0]
 8007eba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007ebe:	6001      	str	r1, [r0, #0]
 8007ec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ec2:	bf00      	nop
 8007ec4:	e000ed88 	.word	0xe000ed88

08007ec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ece:	f3ef 8305 	mrs	r3, IPSR
 8007ed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b0f      	cmp	r3, #15
 8007ed8:	d915      	bls.n	8007f06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007eda:	4a18      	ldr	r2, [pc, #96]	@ (8007f3c <vPortValidateInterruptPriority+0x74>)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ee4:	4b16      	ldr	r3, [pc, #88]	@ (8007f40 <vPortValidateInterruptPriority+0x78>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	7afa      	ldrb	r2, [r7, #11]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d20b      	bcs.n	8007f06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	607b      	str	r3, [r7, #4]
}
 8007f00:	bf00      	nop
 8007f02:	bf00      	nop
 8007f04:	e7fd      	b.n	8007f02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f06:	4b0f      	ldr	r3, [pc, #60]	@ (8007f44 <vPortValidateInterruptPriority+0x7c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f48 <vPortValidateInterruptPriority+0x80>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d90b      	bls.n	8007f2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1a:	f383 8811 	msr	BASEPRI, r3
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	603b      	str	r3, [r7, #0]
}
 8007f28:	bf00      	nop
 8007f2a:	bf00      	nop
 8007f2c:	e7fd      	b.n	8007f2a <vPortValidateInterruptPriority+0x62>
	}
 8007f2e:	bf00      	nop
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	e000e3f0 	.word	0xe000e3f0
 8007f40:	2000199c 	.word	0x2000199c
 8007f44:	e000ed0c 	.word	0xe000ed0c
 8007f48:	200019a0 	.word	0x200019a0

08007f4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08a      	sub	sp, #40	@ 0x28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f54:	2300      	movs	r3, #0
 8007f56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f58:	f7fe fd80 	bl	8006a5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f5c:	4b5c      	ldr	r3, [pc, #368]	@ (80080d0 <pvPortMalloc+0x184>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f64:	f000 f924 	bl	80081b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f68:	4b5a      	ldr	r3, [pc, #360]	@ (80080d4 <pvPortMalloc+0x188>)
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4013      	ands	r3, r2
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f040 8095 	bne.w	80080a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d01e      	beq.n	8007fba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007f7c:	2208      	movs	r2, #8
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4413      	add	r3, r2
 8007f82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d015      	beq.n	8007fba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f023 0307 	bic.w	r3, r3, #7
 8007f94:	3308      	adds	r3, #8
 8007f96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f003 0307 	and.w	r3, r3, #7
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00b      	beq.n	8007fba <pvPortMalloc+0x6e>
	__asm volatile
 8007fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa6:	f383 8811 	msr	BASEPRI, r3
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	617b      	str	r3, [r7, #20]
}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop
 8007fb8:	e7fd      	b.n	8007fb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d06f      	beq.n	80080a0 <pvPortMalloc+0x154>
 8007fc0:	4b45      	ldr	r3, [pc, #276]	@ (80080d8 <pvPortMalloc+0x18c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d86a      	bhi.n	80080a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007fca:	4b44      	ldr	r3, [pc, #272]	@ (80080dc <pvPortMalloc+0x190>)
 8007fcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007fce:	4b43      	ldr	r3, [pc, #268]	@ (80080dc <pvPortMalloc+0x190>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fd4:	e004      	b.n	8007fe0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d903      	bls.n	8007ff2 <pvPortMalloc+0xa6>
 8007fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1f1      	bne.n	8007fd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ff2:	4b37      	ldr	r3, [pc, #220]	@ (80080d0 <pvPortMalloc+0x184>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d051      	beq.n	80080a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ffc:	6a3b      	ldr	r3, [r7, #32]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2208      	movs	r2, #8
 8008002:	4413      	add	r3, r2
 8008004:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	6a3b      	ldr	r3, [r7, #32]
 800800c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800800e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008010:	685a      	ldr	r2, [r3, #4]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	1ad2      	subs	r2, r2, r3
 8008016:	2308      	movs	r3, #8
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	429a      	cmp	r2, r3
 800801c:	d920      	bls.n	8008060 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800801e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4413      	add	r3, r2
 8008024:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	f003 0307 	and.w	r3, r3, #7
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00b      	beq.n	8008048 <pvPortMalloc+0xfc>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	613b      	str	r3, [r7, #16]
}
 8008042:	bf00      	nop
 8008044:	bf00      	nop
 8008046:	e7fd      	b.n	8008044 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	1ad2      	subs	r2, r2, r3
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800805a:	69b8      	ldr	r0, [r7, #24]
 800805c:	f000 f90a 	bl	8008274 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008060:	4b1d      	ldr	r3, [pc, #116]	@ (80080d8 <pvPortMalloc+0x18c>)
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	4a1b      	ldr	r2, [pc, #108]	@ (80080d8 <pvPortMalloc+0x18c>)
 800806c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800806e:	4b1a      	ldr	r3, [pc, #104]	@ (80080d8 <pvPortMalloc+0x18c>)
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	4b1b      	ldr	r3, [pc, #108]	@ (80080e0 <pvPortMalloc+0x194>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	429a      	cmp	r2, r3
 8008078:	d203      	bcs.n	8008082 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800807a:	4b17      	ldr	r3, [pc, #92]	@ (80080d8 <pvPortMalloc+0x18c>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a18      	ldr	r2, [pc, #96]	@ (80080e0 <pvPortMalloc+0x194>)
 8008080:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	4b13      	ldr	r3, [pc, #76]	@ (80080d4 <pvPortMalloc+0x188>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	431a      	orrs	r2, r3
 800808c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008096:	4b13      	ldr	r3, [pc, #76]	@ (80080e4 <pvPortMalloc+0x198>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3301      	adds	r3, #1
 800809c:	4a11      	ldr	r2, [pc, #68]	@ (80080e4 <pvPortMalloc+0x198>)
 800809e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080a0:	f7fe fcea 	bl	8006a78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	f003 0307 	and.w	r3, r3, #7
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00b      	beq.n	80080c6 <pvPortMalloc+0x17a>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	60fb      	str	r3, [r7, #12]
}
 80080c0:	bf00      	nop
 80080c2:	bf00      	nop
 80080c4:	e7fd      	b.n	80080c2 <pvPortMalloc+0x176>
	return pvReturn;
 80080c6:	69fb      	ldr	r3, [r7, #28]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3728      	adds	r7, #40	@ 0x28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	20002564 	.word	0x20002564
 80080d4:	20002578 	.word	0x20002578
 80080d8:	20002568 	.word	0x20002568
 80080dc:	2000255c 	.word	0x2000255c
 80080e0:	2000256c 	.word	0x2000256c
 80080e4:	20002570 	.word	0x20002570

080080e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d04f      	beq.n	800819a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080fa:	2308      	movs	r3, #8
 80080fc:	425b      	negs	r3, r3
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	4413      	add	r3, r2
 8008102:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	4b25      	ldr	r3, [pc, #148]	@ (80081a4 <vPortFree+0xbc>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4013      	ands	r3, r2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10b      	bne.n	800812e <vPortFree+0x46>
	__asm volatile
 8008116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	60fb      	str	r3, [r7, #12]
}
 8008128:	bf00      	nop
 800812a:	bf00      	nop
 800812c:	e7fd      	b.n	800812a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00b      	beq.n	800814e <vPortFree+0x66>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	60bb      	str	r3, [r7, #8]
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	e7fd      	b.n	800814a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	4b14      	ldr	r3, [pc, #80]	@ (80081a4 <vPortFree+0xbc>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4013      	ands	r3, r2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01e      	beq.n	800819a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d11a      	bne.n	800819a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	4b0e      	ldr	r3, [pc, #56]	@ (80081a4 <vPortFree+0xbc>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	43db      	mvns	r3, r3
 800816e:	401a      	ands	r2, r3
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008174:	f7fe fc72 	bl	8006a5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	4b0a      	ldr	r3, [pc, #40]	@ (80081a8 <vPortFree+0xc0>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4413      	add	r3, r2
 8008182:	4a09      	ldr	r2, [pc, #36]	@ (80081a8 <vPortFree+0xc0>)
 8008184:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008186:	6938      	ldr	r0, [r7, #16]
 8008188:	f000 f874 	bl	8008274 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800818c:	4b07      	ldr	r3, [pc, #28]	@ (80081ac <vPortFree+0xc4>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3301      	adds	r3, #1
 8008192:	4a06      	ldr	r2, [pc, #24]	@ (80081ac <vPortFree+0xc4>)
 8008194:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008196:	f7fe fc6f 	bl	8006a78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800819a:	bf00      	nop
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20002578 	.word	0x20002578
 80081a8:	20002568 	.word	0x20002568
 80081ac:	20002574 	.word	0x20002574

080081b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081b6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80081ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081bc:	4b27      	ldr	r3, [pc, #156]	@ (800825c <prvHeapInit+0xac>)
 80081be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f003 0307 	and.w	r3, r3, #7
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00c      	beq.n	80081e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3307      	adds	r3, #7
 80081ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 0307 	bic.w	r3, r3, #7
 80081d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	4a1f      	ldr	r2, [pc, #124]	@ (800825c <prvHeapInit+0xac>)
 80081e0:	4413      	add	r3, r2
 80081e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008260 <prvHeapInit+0xb0>)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008260 <prvHeapInit+0xb0>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	4413      	add	r3, r2
 80081fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081fc:	2208      	movs	r2, #8
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	1a9b      	subs	r3, r3, r2
 8008202:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f023 0307 	bic.w	r3, r3, #7
 800820a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4a15      	ldr	r2, [pc, #84]	@ (8008264 <prvHeapInit+0xb4>)
 8008210:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008212:	4b14      	ldr	r3, [pc, #80]	@ (8008264 <prvHeapInit+0xb4>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2200      	movs	r2, #0
 8008218:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800821a:	4b12      	ldr	r3, [pc, #72]	@ (8008264 <prvHeapInit+0xb4>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2200      	movs	r2, #0
 8008220:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	1ad2      	subs	r2, r2, r3
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008230:	4b0c      	ldr	r3, [pc, #48]	@ (8008264 <prvHeapInit+0xb4>)
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	4a0a      	ldr	r2, [pc, #40]	@ (8008268 <prvHeapInit+0xb8>)
 800823e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	4a09      	ldr	r2, [pc, #36]	@ (800826c <prvHeapInit+0xbc>)
 8008246:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008248:	4b09      	ldr	r3, [pc, #36]	@ (8008270 <prvHeapInit+0xc0>)
 800824a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800824e:	601a      	str	r2, [r3, #0]
}
 8008250:	bf00      	nop
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	200019a4 	.word	0x200019a4
 8008260:	2000255c 	.word	0x2000255c
 8008264:	20002564 	.word	0x20002564
 8008268:	2000256c 	.word	0x2000256c
 800826c:	20002568 	.word	0x20002568
 8008270:	20002578 	.word	0x20002578

08008274 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800827c:	4b28      	ldr	r3, [pc, #160]	@ (8008320 <prvInsertBlockIntoFreeList+0xac>)
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	e002      	b.n	8008288 <prvInsertBlockIntoFreeList+0x14>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	429a      	cmp	r2, r3
 8008290:	d8f7      	bhi.n	8008282 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	4413      	add	r3, r2
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d108      	bne.n	80082b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	441a      	add	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	441a      	add	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d118      	bne.n	80082fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	4b15      	ldr	r3, [pc, #84]	@ (8008324 <prvInsertBlockIntoFreeList+0xb0>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d00d      	beq.n	80082f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	441a      	add	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	e008      	b.n	8008304 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008324 <prvInsertBlockIntoFreeList+0xb0>)
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	e003      	b.n	8008304 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	429a      	cmp	r2, r3
 800830a:	d002      	beq.n	8008312 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008312:	bf00      	nop
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	2000255c 	.word	0x2000255c
 8008324:	20002564 	.word	0x20002564

08008328 <std>:
 8008328:	2300      	movs	r3, #0
 800832a:	b510      	push	{r4, lr}
 800832c:	4604      	mov	r4, r0
 800832e:	e9c0 3300 	strd	r3, r3, [r0]
 8008332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008336:	6083      	str	r3, [r0, #8]
 8008338:	8181      	strh	r1, [r0, #12]
 800833a:	6643      	str	r3, [r0, #100]	@ 0x64
 800833c:	81c2      	strh	r2, [r0, #14]
 800833e:	6183      	str	r3, [r0, #24]
 8008340:	4619      	mov	r1, r3
 8008342:	2208      	movs	r2, #8
 8008344:	305c      	adds	r0, #92	@ 0x5c
 8008346:	f000 f9f9 	bl	800873c <memset>
 800834a:	4b0d      	ldr	r3, [pc, #52]	@ (8008380 <std+0x58>)
 800834c:	6263      	str	r3, [r4, #36]	@ 0x24
 800834e:	4b0d      	ldr	r3, [pc, #52]	@ (8008384 <std+0x5c>)
 8008350:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008352:	4b0d      	ldr	r3, [pc, #52]	@ (8008388 <std+0x60>)
 8008354:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008356:	4b0d      	ldr	r3, [pc, #52]	@ (800838c <std+0x64>)
 8008358:	6323      	str	r3, [r4, #48]	@ 0x30
 800835a:	4b0d      	ldr	r3, [pc, #52]	@ (8008390 <std+0x68>)
 800835c:	6224      	str	r4, [r4, #32]
 800835e:	429c      	cmp	r4, r3
 8008360:	d006      	beq.n	8008370 <std+0x48>
 8008362:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008366:	4294      	cmp	r4, r2
 8008368:	d002      	beq.n	8008370 <std+0x48>
 800836a:	33d0      	adds	r3, #208	@ 0xd0
 800836c:	429c      	cmp	r4, r3
 800836e:	d105      	bne.n	800837c <std+0x54>
 8008370:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008378:	f000 ba58 	b.w	800882c <__retarget_lock_init_recursive>
 800837c:	bd10      	pop	{r4, pc}
 800837e:	bf00      	nop
 8008380:	0800858d 	.word	0x0800858d
 8008384:	080085af 	.word	0x080085af
 8008388:	080085e7 	.word	0x080085e7
 800838c:	0800860b 	.word	0x0800860b
 8008390:	2000257c 	.word	0x2000257c

08008394 <stdio_exit_handler>:
 8008394:	4a02      	ldr	r2, [pc, #8]	@ (80083a0 <stdio_exit_handler+0xc>)
 8008396:	4903      	ldr	r1, [pc, #12]	@ (80083a4 <stdio_exit_handler+0x10>)
 8008398:	4803      	ldr	r0, [pc, #12]	@ (80083a8 <stdio_exit_handler+0x14>)
 800839a:	f000 b869 	b.w	8008470 <_fwalk_sglue>
 800839e:	bf00      	nop
 80083a0:	20000010 	.word	0x20000010
 80083a4:	080090e9 	.word	0x080090e9
 80083a8:	20000020 	.word	0x20000020

080083ac <cleanup_stdio>:
 80083ac:	6841      	ldr	r1, [r0, #4]
 80083ae:	4b0c      	ldr	r3, [pc, #48]	@ (80083e0 <cleanup_stdio+0x34>)
 80083b0:	4299      	cmp	r1, r3
 80083b2:	b510      	push	{r4, lr}
 80083b4:	4604      	mov	r4, r0
 80083b6:	d001      	beq.n	80083bc <cleanup_stdio+0x10>
 80083b8:	f000 fe96 	bl	80090e8 <_fflush_r>
 80083bc:	68a1      	ldr	r1, [r4, #8]
 80083be:	4b09      	ldr	r3, [pc, #36]	@ (80083e4 <cleanup_stdio+0x38>)
 80083c0:	4299      	cmp	r1, r3
 80083c2:	d002      	beq.n	80083ca <cleanup_stdio+0x1e>
 80083c4:	4620      	mov	r0, r4
 80083c6:	f000 fe8f 	bl	80090e8 <_fflush_r>
 80083ca:	68e1      	ldr	r1, [r4, #12]
 80083cc:	4b06      	ldr	r3, [pc, #24]	@ (80083e8 <cleanup_stdio+0x3c>)
 80083ce:	4299      	cmp	r1, r3
 80083d0:	d004      	beq.n	80083dc <cleanup_stdio+0x30>
 80083d2:	4620      	mov	r0, r4
 80083d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083d8:	f000 be86 	b.w	80090e8 <_fflush_r>
 80083dc:	bd10      	pop	{r4, pc}
 80083de:	bf00      	nop
 80083e0:	2000257c 	.word	0x2000257c
 80083e4:	200025e4 	.word	0x200025e4
 80083e8:	2000264c 	.word	0x2000264c

080083ec <global_stdio_init.part.0>:
 80083ec:	b510      	push	{r4, lr}
 80083ee:	4b0b      	ldr	r3, [pc, #44]	@ (800841c <global_stdio_init.part.0+0x30>)
 80083f0:	4c0b      	ldr	r4, [pc, #44]	@ (8008420 <global_stdio_init.part.0+0x34>)
 80083f2:	4a0c      	ldr	r2, [pc, #48]	@ (8008424 <global_stdio_init.part.0+0x38>)
 80083f4:	601a      	str	r2, [r3, #0]
 80083f6:	4620      	mov	r0, r4
 80083f8:	2200      	movs	r2, #0
 80083fa:	2104      	movs	r1, #4
 80083fc:	f7ff ff94 	bl	8008328 <std>
 8008400:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008404:	2201      	movs	r2, #1
 8008406:	2109      	movs	r1, #9
 8008408:	f7ff ff8e 	bl	8008328 <std>
 800840c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008410:	2202      	movs	r2, #2
 8008412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008416:	2112      	movs	r1, #18
 8008418:	f7ff bf86 	b.w	8008328 <std>
 800841c:	200026b4 	.word	0x200026b4
 8008420:	2000257c 	.word	0x2000257c
 8008424:	08008395 	.word	0x08008395

08008428 <__sfp_lock_acquire>:
 8008428:	4801      	ldr	r0, [pc, #4]	@ (8008430 <__sfp_lock_acquire+0x8>)
 800842a:	f000 ba00 	b.w	800882e <__retarget_lock_acquire_recursive>
 800842e:	bf00      	nop
 8008430:	200026bd 	.word	0x200026bd

08008434 <__sfp_lock_release>:
 8008434:	4801      	ldr	r0, [pc, #4]	@ (800843c <__sfp_lock_release+0x8>)
 8008436:	f000 b9fb 	b.w	8008830 <__retarget_lock_release_recursive>
 800843a:	bf00      	nop
 800843c:	200026bd 	.word	0x200026bd

08008440 <__sinit>:
 8008440:	b510      	push	{r4, lr}
 8008442:	4604      	mov	r4, r0
 8008444:	f7ff fff0 	bl	8008428 <__sfp_lock_acquire>
 8008448:	6a23      	ldr	r3, [r4, #32]
 800844a:	b11b      	cbz	r3, 8008454 <__sinit+0x14>
 800844c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008450:	f7ff bff0 	b.w	8008434 <__sfp_lock_release>
 8008454:	4b04      	ldr	r3, [pc, #16]	@ (8008468 <__sinit+0x28>)
 8008456:	6223      	str	r3, [r4, #32]
 8008458:	4b04      	ldr	r3, [pc, #16]	@ (800846c <__sinit+0x2c>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1f5      	bne.n	800844c <__sinit+0xc>
 8008460:	f7ff ffc4 	bl	80083ec <global_stdio_init.part.0>
 8008464:	e7f2      	b.n	800844c <__sinit+0xc>
 8008466:	bf00      	nop
 8008468:	080083ad 	.word	0x080083ad
 800846c:	200026b4 	.word	0x200026b4

08008470 <_fwalk_sglue>:
 8008470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008474:	4607      	mov	r7, r0
 8008476:	4688      	mov	r8, r1
 8008478:	4614      	mov	r4, r2
 800847a:	2600      	movs	r6, #0
 800847c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008480:	f1b9 0901 	subs.w	r9, r9, #1
 8008484:	d505      	bpl.n	8008492 <_fwalk_sglue+0x22>
 8008486:	6824      	ldr	r4, [r4, #0]
 8008488:	2c00      	cmp	r4, #0
 800848a:	d1f7      	bne.n	800847c <_fwalk_sglue+0xc>
 800848c:	4630      	mov	r0, r6
 800848e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008492:	89ab      	ldrh	r3, [r5, #12]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d907      	bls.n	80084a8 <_fwalk_sglue+0x38>
 8008498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800849c:	3301      	adds	r3, #1
 800849e:	d003      	beq.n	80084a8 <_fwalk_sglue+0x38>
 80084a0:	4629      	mov	r1, r5
 80084a2:	4638      	mov	r0, r7
 80084a4:	47c0      	blx	r8
 80084a6:	4306      	orrs	r6, r0
 80084a8:	3568      	adds	r5, #104	@ 0x68
 80084aa:	e7e9      	b.n	8008480 <_fwalk_sglue+0x10>

080084ac <iprintf>:
 80084ac:	b40f      	push	{r0, r1, r2, r3}
 80084ae:	b507      	push	{r0, r1, r2, lr}
 80084b0:	4906      	ldr	r1, [pc, #24]	@ (80084cc <iprintf+0x20>)
 80084b2:	ab04      	add	r3, sp, #16
 80084b4:	6808      	ldr	r0, [r1, #0]
 80084b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ba:	6881      	ldr	r1, [r0, #8]
 80084bc:	9301      	str	r3, [sp, #4]
 80084be:	f000 fae9 	bl	8008a94 <_vfiprintf_r>
 80084c2:	b003      	add	sp, #12
 80084c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80084c8:	b004      	add	sp, #16
 80084ca:	4770      	bx	lr
 80084cc:	2000001c 	.word	0x2000001c

080084d0 <_puts_r>:
 80084d0:	6a03      	ldr	r3, [r0, #32]
 80084d2:	b570      	push	{r4, r5, r6, lr}
 80084d4:	6884      	ldr	r4, [r0, #8]
 80084d6:	4605      	mov	r5, r0
 80084d8:	460e      	mov	r6, r1
 80084da:	b90b      	cbnz	r3, 80084e0 <_puts_r+0x10>
 80084dc:	f7ff ffb0 	bl	8008440 <__sinit>
 80084e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084e2:	07db      	lsls	r3, r3, #31
 80084e4:	d405      	bmi.n	80084f2 <_puts_r+0x22>
 80084e6:	89a3      	ldrh	r3, [r4, #12]
 80084e8:	0598      	lsls	r0, r3, #22
 80084ea:	d402      	bmi.n	80084f2 <_puts_r+0x22>
 80084ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084ee:	f000 f99e 	bl	800882e <__retarget_lock_acquire_recursive>
 80084f2:	89a3      	ldrh	r3, [r4, #12]
 80084f4:	0719      	lsls	r1, r3, #28
 80084f6:	d502      	bpl.n	80084fe <_puts_r+0x2e>
 80084f8:	6923      	ldr	r3, [r4, #16]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d135      	bne.n	800856a <_puts_r+0x9a>
 80084fe:	4621      	mov	r1, r4
 8008500:	4628      	mov	r0, r5
 8008502:	f000 f8c5 	bl	8008690 <__swsetup_r>
 8008506:	b380      	cbz	r0, 800856a <_puts_r+0x9a>
 8008508:	f04f 35ff 	mov.w	r5, #4294967295
 800850c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800850e:	07da      	lsls	r2, r3, #31
 8008510:	d405      	bmi.n	800851e <_puts_r+0x4e>
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	059b      	lsls	r3, r3, #22
 8008516:	d402      	bmi.n	800851e <_puts_r+0x4e>
 8008518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800851a:	f000 f989 	bl	8008830 <__retarget_lock_release_recursive>
 800851e:	4628      	mov	r0, r5
 8008520:	bd70      	pop	{r4, r5, r6, pc}
 8008522:	2b00      	cmp	r3, #0
 8008524:	da04      	bge.n	8008530 <_puts_r+0x60>
 8008526:	69a2      	ldr	r2, [r4, #24]
 8008528:	429a      	cmp	r2, r3
 800852a:	dc17      	bgt.n	800855c <_puts_r+0x8c>
 800852c:	290a      	cmp	r1, #10
 800852e:	d015      	beq.n	800855c <_puts_r+0x8c>
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	1c5a      	adds	r2, r3, #1
 8008534:	6022      	str	r2, [r4, #0]
 8008536:	7019      	strb	r1, [r3, #0]
 8008538:	68a3      	ldr	r3, [r4, #8]
 800853a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800853e:	3b01      	subs	r3, #1
 8008540:	60a3      	str	r3, [r4, #8]
 8008542:	2900      	cmp	r1, #0
 8008544:	d1ed      	bne.n	8008522 <_puts_r+0x52>
 8008546:	2b00      	cmp	r3, #0
 8008548:	da11      	bge.n	800856e <_puts_r+0x9e>
 800854a:	4622      	mov	r2, r4
 800854c:	210a      	movs	r1, #10
 800854e:	4628      	mov	r0, r5
 8008550:	f000 f85f 	bl	8008612 <__swbuf_r>
 8008554:	3001      	adds	r0, #1
 8008556:	d0d7      	beq.n	8008508 <_puts_r+0x38>
 8008558:	250a      	movs	r5, #10
 800855a:	e7d7      	b.n	800850c <_puts_r+0x3c>
 800855c:	4622      	mov	r2, r4
 800855e:	4628      	mov	r0, r5
 8008560:	f000 f857 	bl	8008612 <__swbuf_r>
 8008564:	3001      	adds	r0, #1
 8008566:	d1e7      	bne.n	8008538 <_puts_r+0x68>
 8008568:	e7ce      	b.n	8008508 <_puts_r+0x38>
 800856a:	3e01      	subs	r6, #1
 800856c:	e7e4      	b.n	8008538 <_puts_r+0x68>
 800856e:	6823      	ldr	r3, [r4, #0]
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	6022      	str	r2, [r4, #0]
 8008574:	220a      	movs	r2, #10
 8008576:	701a      	strb	r2, [r3, #0]
 8008578:	e7ee      	b.n	8008558 <_puts_r+0x88>
	...

0800857c <puts>:
 800857c:	4b02      	ldr	r3, [pc, #8]	@ (8008588 <puts+0xc>)
 800857e:	4601      	mov	r1, r0
 8008580:	6818      	ldr	r0, [r3, #0]
 8008582:	f7ff bfa5 	b.w	80084d0 <_puts_r>
 8008586:	bf00      	nop
 8008588:	2000001c 	.word	0x2000001c

0800858c <__sread>:
 800858c:	b510      	push	{r4, lr}
 800858e:	460c      	mov	r4, r1
 8008590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008594:	f000 f8fc 	bl	8008790 <_read_r>
 8008598:	2800      	cmp	r0, #0
 800859a:	bfab      	itete	ge
 800859c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800859e:	89a3      	ldrhlt	r3, [r4, #12]
 80085a0:	181b      	addge	r3, r3, r0
 80085a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80085a6:	bfac      	ite	ge
 80085a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80085aa:	81a3      	strhlt	r3, [r4, #12]
 80085ac:	bd10      	pop	{r4, pc}

080085ae <__swrite>:
 80085ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085b2:	461f      	mov	r7, r3
 80085b4:	898b      	ldrh	r3, [r1, #12]
 80085b6:	05db      	lsls	r3, r3, #23
 80085b8:	4605      	mov	r5, r0
 80085ba:	460c      	mov	r4, r1
 80085bc:	4616      	mov	r6, r2
 80085be:	d505      	bpl.n	80085cc <__swrite+0x1e>
 80085c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c4:	2302      	movs	r3, #2
 80085c6:	2200      	movs	r2, #0
 80085c8:	f000 f8d0 	bl	800876c <_lseek_r>
 80085cc:	89a3      	ldrh	r3, [r4, #12]
 80085ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085d6:	81a3      	strh	r3, [r4, #12]
 80085d8:	4632      	mov	r2, r6
 80085da:	463b      	mov	r3, r7
 80085dc:	4628      	mov	r0, r5
 80085de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085e2:	f000 b8e7 	b.w	80087b4 <_write_r>

080085e6 <__sseek>:
 80085e6:	b510      	push	{r4, lr}
 80085e8:	460c      	mov	r4, r1
 80085ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ee:	f000 f8bd 	bl	800876c <_lseek_r>
 80085f2:	1c43      	adds	r3, r0, #1
 80085f4:	89a3      	ldrh	r3, [r4, #12]
 80085f6:	bf15      	itete	ne
 80085f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80085fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80085fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008602:	81a3      	strheq	r3, [r4, #12]
 8008604:	bf18      	it	ne
 8008606:	81a3      	strhne	r3, [r4, #12]
 8008608:	bd10      	pop	{r4, pc}

0800860a <__sclose>:
 800860a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800860e:	f000 b89d 	b.w	800874c <_close_r>

08008612 <__swbuf_r>:
 8008612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008614:	460e      	mov	r6, r1
 8008616:	4614      	mov	r4, r2
 8008618:	4605      	mov	r5, r0
 800861a:	b118      	cbz	r0, 8008624 <__swbuf_r+0x12>
 800861c:	6a03      	ldr	r3, [r0, #32]
 800861e:	b90b      	cbnz	r3, 8008624 <__swbuf_r+0x12>
 8008620:	f7ff ff0e 	bl	8008440 <__sinit>
 8008624:	69a3      	ldr	r3, [r4, #24]
 8008626:	60a3      	str	r3, [r4, #8]
 8008628:	89a3      	ldrh	r3, [r4, #12]
 800862a:	071a      	lsls	r2, r3, #28
 800862c:	d501      	bpl.n	8008632 <__swbuf_r+0x20>
 800862e:	6923      	ldr	r3, [r4, #16]
 8008630:	b943      	cbnz	r3, 8008644 <__swbuf_r+0x32>
 8008632:	4621      	mov	r1, r4
 8008634:	4628      	mov	r0, r5
 8008636:	f000 f82b 	bl	8008690 <__swsetup_r>
 800863a:	b118      	cbz	r0, 8008644 <__swbuf_r+0x32>
 800863c:	f04f 37ff 	mov.w	r7, #4294967295
 8008640:	4638      	mov	r0, r7
 8008642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	6922      	ldr	r2, [r4, #16]
 8008648:	1a98      	subs	r0, r3, r2
 800864a:	6963      	ldr	r3, [r4, #20]
 800864c:	b2f6      	uxtb	r6, r6
 800864e:	4283      	cmp	r3, r0
 8008650:	4637      	mov	r7, r6
 8008652:	dc05      	bgt.n	8008660 <__swbuf_r+0x4e>
 8008654:	4621      	mov	r1, r4
 8008656:	4628      	mov	r0, r5
 8008658:	f000 fd46 	bl	80090e8 <_fflush_r>
 800865c:	2800      	cmp	r0, #0
 800865e:	d1ed      	bne.n	800863c <__swbuf_r+0x2a>
 8008660:	68a3      	ldr	r3, [r4, #8]
 8008662:	3b01      	subs	r3, #1
 8008664:	60a3      	str	r3, [r4, #8]
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	6022      	str	r2, [r4, #0]
 800866c:	701e      	strb	r6, [r3, #0]
 800866e:	6962      	ldr	r2, [r4, #20]
 8008670:	1c43      	adds	r3, r0, #1
 8008672:	429a      	cmp	r2, r3
 8008674:	d004      	beq.n	8008680 <__swbuf_r+0x6e>
 8008676:	89a3      	ldrh	r3, [r4, #12]
 8008678:	07db      	lsls	r3, r3, #31
 800867a:	d5e1      	bpl.n	8008640 <__swbuf_r+0x2e>
 800867c:	2e0a      	cmp	r6, #10
 800867e:	d1df      	bne.n	8008640 <__swbuf_r+0x2e>
 8008680:	4621      	mov	r1, r4
 8008682:	4628      	mov	r0, r5
 8008684:	f000 fd30 	bl	80090e8 <_fflush_r>
 8008688:	2800      	cmp	r0, #0
 800868a:	d0d9      	beq.n	8008640 <__swbuf_r+0x2e>
 800868c:	e7d6      	b.n	800863c <__swbuf_r+0x2a>
	...

08008690 <__swsetup_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4b29      	ldr	r3, [pc, #164]	@ (8008738 <__swsetup_r+0xa8>)
 8008694:	4605      	mov	r5, r0
 8008696:	6818      	ldr	r0, [r3, #0]
 8008698:	460c      	mov	r4, r1
 800869a:	b118      	cbz	r0, 80086a4 <__swsetup_r+0x14>
 800869c:	6a03      	ldr	r3, [r0, #32]
 800869e:	b90b      	cbnz	r3, 80086a4 <__swsetup_r+0x14>
 80086a0:	f7ff fece 	bl	8008440 <__sinit>
 80086a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086a8:	0719      	lsls	r1, r3, #28
 80086aa:	d422      	bmi.n	80086f2 <__swsetup_r+0x62>
 80086ac:	06da      	lsls	r2, r3, #27
 80086ae:	d407      	bmi.n	80086c0 <__swsetup_r+0x30>
 80086b0:	2209      	movs	r2, #9
 80086b2:	602a      	str	r2, [r5, #0]
 80086b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086b8:	81a3      	strh	r3, [r4, #12]
 80086ba:	f04f 30ff 	mov.w	r0, #4294967295
 80086be:	e033      	b.n	8008728 <__swsetup_r+0x98>
 80086c0:	0758      	lsls	r0, r3, #29
 80086c2:	d512      	bpl.n	80086ea <__swsetup_r+0x5a>
 80086c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086c6:	b141      	cbz	r1, 80086da <__swsetup_r+0x4a>
 80086c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086cc:	4299      	cmp	r1, r3
 80086ce:	d002      	beq.n	80086d6 <__swsetup_r+0x46>
 80086d0:	4628      	mov	r0, r5
 80086d2:	f000 f8bd 	bl	8008850 <_free_r>
 80086d6:	2300      	movs	r3, #0
 80086d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80086da:	89a3      	ldrh	r3, [r4, #12]
 80086dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80086e0:	81a3      	strh	r3, [r4, #12]
 80086e2:	2300      	movs	r3, #0
 80086e4:	6063      	str	r3, [r4, #4]
 80086e6:	6923      	ldr	r3, [r4, #16]
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	89a3      	ldrh	r3, [r4, #12]
 80086ec:	f043 0308 	orr.w	r3, r3, #8
 80086f0:	81a3      	strh	r3, [r4, #12]
 80086f2:	6923      	ldr	r3, [r4, #16]
 80086f4:	b94b      	cbnz	r3, 800870a <__swsetup_r+0x7a>
 80086f6:	89a3      	ldrh	r3, [r4, #12]
 80086f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80086fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008700:	d003      	beq.n	800870a <__swsetup_r+0x7a>
 8008702:	4621      	mov	r1, r4
 8008704:	4628      	mov	r0, r5
 8008706:	f000 fd3d 	bl	8009184 <__smakebuf_r>
 800870a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800870e:	f013 0201 	ands.w	r2, r3, #1
 8008712:	d00a      	beq.n	800872a <__swsetup_r+0x9a>
 8008714:	2200      	movs	r2, #0
 8008716:	60a2      	str	r2, [r4, #8]
 8008718:	6962      	ldr	r2, [r4, #20]
 800871a:	4252      	negs	r2, r2
 800871c:	61a2      	str	r2, [r4, #24]
 800871e:	6922      	ldr	r2, [r4, #16]
 8008720:	b942      	cbnz	r2, 8008734 <__swsetup_r+0xa4>
 8008722:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008726:	d1c5      	bne.n	80086b4 <__swsetup_r+0x24>
 8008728:	bd38      	pop	{r3, r4, r5, pc}
 800872a:	0799      	lsls	r1, r3, #30
 800872c:	bf58      	it	pl
 800872e:	6962      	ldrpl	r2, [r4, #20]
 8008730:	60a2      	str	r2, [r4, #8]
 8008732:	e7f4      	b.n	800871e <__swsetup_r+0x8e>
 8008734:	2000      	movs	r0, #0
 8008736:	e7f7      	b.n	8008728 <__swsetup_r+0x98>
 8008738:	2000001c 	.word	0x2000001c

0800873c <memset>:
 800873c:	4402      	add	r2, r0
 800873e:	4603      	mov	r3, r0
 8008740:	4293      	cmp	r3, r2
 8008742:	d100      	bne.n	8008746 <memset+0xa>
 8008744:	4770      	bx	lr
 8008746:	f803 1b01 	strb.w	r1, [r3], #1
 800874a:	e7f9      	b.n	8008740 <memset+0x4>

0800874c <_close_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	4d06      	ldr	r5, [pc, #24]	@ (8008768 <_close_r+0x1c>)
 8008750:	2300      	movs	r3, #0
 8008752:	4604      	mov	r4, r0
 8008754:	4608      	mov	r0, r1
 8008756:	602b      	str	r3, [r5, #0]
 8008758:	f7f8 fb36 	bl	8000dc8 <_close>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d102      	bne.n	8008766 <_close_r+0x1a>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	b103      	cbz	r3, 8008766 <_close_r+0x1a>
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	200026b8 	.word	0x200026b8

0800876c <_lseek_r>:
 800876c:	b538      	push	{r3, r4, r5, lr}
 800876e:	4d07      	ldr	r5, [pc, #28]	@ (800878c <_lseek_r+0x20>)
 8008770:	4604      	mov	r4, r0
 8008772:	4608      	mov	r0, r1
 8008774:	4611      	mov	r1, r2
 8008776:	2200      	movs	r2, #0
 8008778:	602a      	str	r2, [r5, #0]
 800877a:	461a      	mov	r2, r3
 800877c:	f7f8 fb4b 	bl	8000e16 <_lseek>
 8008780:	1c43      	adds	r3, r0, #1
 8008782:	d102      	bne.n	800878a <_lseek_r+0x1e>
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	b103      	cbz	r3, 800878a <_lseek_r+0x1e>
 8008788:	6023      	str	r3, [r4, #0]
 800878a:	bd38      	pop	{r3, r4, r5, pc}
 800878c:	200026b8 	.word	0x200026b8

08008790 <_read_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	4d07      	ldr	r5, [pc, #28]	@ (80087b0 <_read_r+0x20>)
 8008794:	4604      	mov	r4, r0
 8008796:	4608      	mov	r0, r1
 8008798:	4611      	mov	r1, r2
 800879a:	2200      	movs	r2, #0
 800879c:	602a      	str	r2, [r5, #0]
 800879e:	461a      	mov	r2, r3
 80087a0:	f7f8 fad9 	bl	8000d56 <_read>
 80087a4:	1c43      	adds	r3, r0, #1
 80087a6:	d102      	bne.n	80087ae <_read_r+0x1e>
 80087a8:	682b      	ldr	r3, [r5, #0]
 80087aa:	b103      	cbz	r3, 80087ae <_read_r+0x1e>
 80087ac:	6023      	str	r3, [r4, #0]
 80087ae:	bd38      	pop	{r3, r4, r5, pc}
 80087b0:	200026b8 	.word	0x200026b8

080087b4 <_write_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	4d07      	ldr	r5, [pc, #28]	@ (80087d4 <_write_r+0x20>)
 80087b8:	4604      	mov	r4, r0
 80087ba:	4608      	mov	r0, r1
 80087bc:	4611      	mov	r1, r2
 80087be:	2200      	movs	r2, #0
 80087c0:	602a      	str	r2, [r5, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	f7f8 fae4 	bl	8000d90 <_write>
 80087c8:	1c43      	adds	r3, r0, #1
 80087ca:	d102      	bne.n	80087d2 <_write_r+0x1e>
 80087cc:	682b      	ldr	r3, [r5, #0]
 80087ce:	b103      	cbz	r3, 80087d2 <_write_r+0x1e>
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	bd38      	pop	{r3, r4, r5, pc}
 80087d4:	200026b8 	.word	0x200026b8

080087d8 <__errno>:
 80087d8:	4b01      	ldr	r3, [pc, #4]	@ (80087e0 <__errno+0x8>)
 80087da:	6818      	ldr	r0, [r3, #0]
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	2000001c 	.word	0x2000001c

080087e4 <__libc_init_array>:
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	4d0d      	ldr	r5, [pc, #52]	@ (800881c <__libc_init_array+0x38>)
 80087e8:	4c0d      	ldr	r4, [pc, #52]	@ (8008820 <__libc_init_array+0x3c>)
 80087ea:	1b64      	subs	r4, r4, r5
 80087ec:	10a4      	asrs	r4, r4, #2
 80087ee:	2600      	movs	r6, #0
 80087f0:	42a6      	cmp	r6, r4
 80087f2:	d109      	bne.n	8008808 <__libc_init_array+0x24>
 80087f4:	4d0b      	ldr	r5, [pc, #44]	@ (8008824 <__libc_init_array+0x40>)
 80087f6:	4c0c      	ldr	r4, [pc, #48]	@ (8008828 <__libc_init_array+0x44>)
 80087f8:	f000 fd32 	bl	8009260 <_init>
 80087fc:	1b64      	subs	r4, r4, r5
 80087fe:	10a4      	asrs	r4, r4, #2
 8008800:	2600      	movs	r6, #0
 8008802:	42a6      	cmp	r6, r4
 8008804:	d105      	bne.n	8008812 <__libc_init_array+0x2e>
 8008806:	bd70      	pop	{r4, r5, r6, pc}
 8008808:	f855 3b04 	ldr.w	r3, [r5], #4
 800880c:	4798      	blx	r3
 800880e:	3601      	adds	r6, #1
 8008810:	e7ee      	b.n	80087f0 <__libc_init_array+0xc>
 8008812:	f855 3b04 	ldr.w	r3, [r5], #4
 8008816:	4798      	blx	r3
 8008818:	3601      	adds	r6, #1
 800881a:	e7f2      	b.n	8008802 <__libc_init_array+0x1e>
 800881c:	08009384 	.word	0x08009384
 8008820:	08009384 	.word	0x08009384
 8008824:	08009384 	.word	0x08009384
 8008828:	08009388 	.word	0x08009388

0800882c <__retarget_lock_init_recursive>:
 800882c:	4770      	bx	lr

0800882e <__retarget_lock_acquire_recursive>:
 800882e:	4770      	bx	lr

08008830 <__retarget_lock_release_recursive>:
 8008830:	4770      	bx	lr

08008832 <memcpy>:
 8008832:	440a      	add	r2, r1
 8008834:	4291      	cmp	r1, r2
 8008836:	f100 33ff 	add.w	r3, r0, #4294967295
 800883a:	d100      	bne.n	800883e <memcpy+0xc>
 800883c:	4770      	bx	lr
 800883e:	b510      	push	{r4, lr}
 8008840:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008848:	4291      	cmp	r1, r2
 800884a:	d1f9      	bne.n	8008840 <memcpy+0xe>
 800884c:	bd10      	pop	{r4, pc}
	...

08008850 <_free_r>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	4605      	mov	r5, r0
 8008854:	2900      	cmp	r1, #0
 8008856:	d041      	beq.n	80088dc <_free_r+0x8c>
 8008858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800885c:	1f0c      	subs	r4, r1, #4
 800885e:	2b00      	cmp	r3, #0
 8008860:	bfb8      	it	lt
 8008862:	18e4      	addlt	r4, r4, r3
 8008864:	f000 f8e0 	bl	8008a28 <__malloc_lock>
 8008868:	4a1d      	ldr	r2, [pc, #116]	@ (80088e0 <_free_r+0x90>)
 800886a:	6813      	ldr	r3, [r2, #0]
 800886c:	b933      	cbnz	r3, 800887c <_free_r+0x2c>
 800886e:	6063      	str	r3, [r4, #4]
 8008870:	6014      	str	r4, [r2, #0]
 8008872:	4628      	mov	r0, r5
 8008874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008878:	f000 b8dc 	b.w	8008a34 <__malloc_unlock>
 800887c:	42a3      	cmp	r3, r4
 800887e:	d908      	bls.n	8008892 <_free_r+0x42>
 8008880:	6820      	ldr	r0, [r4, #0]
 8008882:	1821      	adds	r1, r4, r0
 8008884:	428b      	cmp	r3, r1
 8008886:	bf01      	itttt	eq
 8008888:	6819      	ldreq	r1, [r3, #0]
 800888a:	685b      	ldreq	r3, [r3, #4]
 800888c:	1809      	addeq	r1, r1, r0
 800888e:	6021      	streq	r1, [r4, #0]
 8008890:	e7ed      	b.n	800886e <_free_r+0x1e>
 8008892:	461a      	mov	r2, r3
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	b10b      	cbz	r3, 800889c <_free_r+0x4c>
 8008898:	42a3      	cmp	r3, r4
 800889a:	d9fa      	bls.n	8008892 <_free_r+0x42>
 800889c:	6811      	ldr	r1, [r2, #0]
 800889e:	1850      	adds	r0, r2, r1
 80088a0:	42a0      	cmp	r0, r4
 80088a2:	d10b      	bne.n	80088bc <_free_r+0x6c>
 80088a4:	6820      	ldr	r0, [r4, #0]
 80088a6:	4401      	add	r1, r0
 80088a8:	1850      	adds	r0, r2, r1
 80088aa:	4283      	cmp	r3, r0
 80088ac:	6011      	str	r1, [r2, #0]
 80088ae:	d1e0      	bne.n	8008872 <_free_r+0x22>
 80088b0:	6818      	ldr	r0, [r3, #0]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	6053      	str	r3, [r2, #4]
 80088b6:	4408      	add	r0, r1
 80088b8:	6010      	str	r0, [r2, #0]
 80088ba:	e7da      	b.n	8008872 <_free_r+0x22>
 80088bc:	d902      	bls.n	80088c4 <_free_r+0x74>
 80088be:	230c      	movs	r3, #12
 80088c0:	602b      	str	r3, [r5, #0]
 80088c2:	e7d6      	b.n	8008872 <_free_r+0x22>
 80088c4:	6820      	ldr	r0, [r4, #0]
 80088c6:	1821      	adds	r1, r4, r0
 80088c8:	428b      	cmp	r3, r1
 80088ca:	bf04      	itt	eq
 80088cc:	6819      	ldreq	r1, [r3, #0]
 80088ce:	685b      	ldreq	r3, [r3, #4]
 80088d0:	6063      	str	r3, [r4, #4]
 80088d2:	bf04      	itt	eq
 80088d4:	1809      	addeq	r1, r1, r0
 80088d6:	6021      	streq	r1, [r4, #0]
 80088d8:	6054      	str	r4, [r2, #4]
 80088da:	e7ca      	b.n	8008872 <_free_r+0x22>
 80088dc:	bd38      	pop	{r3, r4, r5, pc}
 80088de:	bf00      	nop
 80088e0:	200026c4 	.word	0x200026c4

080088e4 <sbrk_aligned>:
 80088e4:	b570      	push	{r4, r5, r6, lr}
 80088e6:	4e0f      	ldr	r6, [pc, #60]	@ (8008924 <sbrk_aligned+0x40>)
 80088e8:	460c      	mov	r4, r1
 80088ea:	6831      	ldr	r1, [r6, #0]
 80088ec:	4605      	mov	r5, r0
 80088ee:	b911      	cbnz	r1, 80088f6 <sbrk_aligned+0x12>
 80088f0:	f000 fca6 	bl	8009240 <_sbrk_r>
 80088f4:	6030      	str	r0, [r6, #0]
 80088f6:	4621      	mov	r1, r4
 80088f8:	4628      	mov	r0, r5
 80088fa:	f000 fca1 	bl	8009240 <_sbrk_r>
 80088fe:	1c43      	adds	r3, r0, #1
 8008900:	d103      	bne.n	800890a <sbrk_aligned+0x26>
 8008902:	f04f 34ff 	mov.w	r4, #4294967295
 8008906:	4620      	mov	r0, r4
 8008908:	bd70      	pop	{r4, r5, r6, pc}
 800890a:	1cc4      	adds	r4, r0, #3
 800890c:	f024 0403 	bic.w	r4, r4, #3
 8008910:	42a0      	cmp	r0, r4
 8008912:	d0f8      	beq.n	8008906 <sbrk_aligned+0x22>
 8008914:	1a21      	subs	r1, r4, r0
 8008916:	4628      	mov	r0, r5
 8008918:	f000 fc92 	bl	8009240 <_sbrk_r>
 800891c:	3001      	adds	r0, #1
 800891e:	d1f2      	bne.n	8008906 <sbrk_aligned+0x22>
 8008920:	e7ef      	b.n	8008902 <sbrk_aligned+0x1e>
 8008922:	bf00      	nop
 8008924:	200026c0 	.word	0x200026c0

08008928 <_malloc_r>:
 8008928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800892c:	1ccd      	adds	r5, r1, #3
 800892e:	f025 0503 	bic.w	r5, r5, #3
 8008932:	3508      	adds	r5, #8
 8008934:	2d0c      	cmp	r5, #12
 8008936:	bf38      	it	cc
 8008938:	250c      	movcc	r5, #12
 800893a:	2d00      	cmp	r5, #0
 800893c:	4606      	mov	r6, r0
 800893e:	db01      	blt.n	8008944 <_malloc_r+0x1c>
 8008940:	42a9      	cmp	r1, r5
 8008942:	d904      	bls.n	800894e <_malloc_r+0x26>
 8008944:	230c      	movs	r3, #12
 8008946:	6033      	str	r3, [r6, #0]
 8008948:	2000      	movs	r0, #0
 800894a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800894e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a24 <_malloc_r+0xfc>
 8008952:	f000 f869 	bl	8008a28 <__malloc_lock>
 8008956:	f8d8 3000 	ldr.w	r3, [r8]
 800895a:	461c      	mov	r4, r3
 800895c:	bb44      	cbnz	r4, 80089b0 <_malloc_r+0x88>
 800895e:	4629      	mov	r1, r5
 8008960:	4630      	mov	r0, r6
 8008962:	f7ff ffbf 	bl	80088e4 <sbrk_aligned>
 8008966:	1c43      	adds	r3, r0, #1
 8008968:	4604      	mov	r4, r0
 800896a:	d158      	bne.n	8008a1e <_malloc_r+0xf6>
 800896c:	f8d8 4000 	ldr.w	r4, [r8]
 8008970:	4627      	mov	r7, r4
 8008972:	2f00      	cmp	r7, #0
 8008974:	d143      	bne.n	80089fe <_malloc_r+0xd6>
 8008976:	2c00      	cmp	r4, #0
 8008978:	d04b      	beq.n	8008a12 <_malloc_r+0xea>
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	4639      	mov	r1, r7
 800897e:	4630      	mov	r0, r6
 8008980:	eb04 0903 	add.w	r9, r4, r3
 8008984:	f000 fc5c 	bl	8009240 <_sbrk_r>
 8008988:	4581      	cmp	r9, r0
 800898a:	d142      	bne.n	8008a12 <_malloc_r+0xea>
 800898c:	6821      	ldr	r1, [r4, #0]
 800898e:	1a6d      	subs	r5, r5, r1
 8008990:	4629      	mov	r1, r5
 8008992:	4630      	mov	r0, r6
 8008994:	f7ff ffa6 	bl	80088e4 <sbrk_aligned>
 8008998:	3001      	adds	r0, #1
 800899a:	d03a      	beq.n	8008a12 <_malloc_r+0xea>
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	442b      	add	r3, r5
 80089a0:	6023      	str	r3, [r4, #0]
 80089a2:	f8d8 3000 	ldr.w	r3, [r8]
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	bb62      	cbnz	r2, 8008a04 <_malloc_r+0xdc>
 80089aa:	f8c8 7000 	str.w	r7, [r8]
 80089ae:	e00f      	b.n	80089d0 <_malloc_r+0xa8>
 80089b0:	6822      	ldr	r2, [r4, #0]
 80089b2:	1b52      	subs	r2, r2, r5
 80089b4:	d420      	bmi.n	80089f8 <_malloc_r+0xd0>
 80089b6:	2a0b      	cmp	r2, #11
 80089b8:	d917      	bls.n	80089ea <_malloc_r+0xc2>
 80089ba:	1961      	adds	r1, r4, r5
 80089bc:	42a3      	cmp	r3, r4
 80089be:	6025      	str	r5, [r4, #0]
 80089c0:	bf18      	it	ne
 80089c2:	6059      	strne	r1, [r3, #4]
 80089c4:	6863      	ldr	r3, [r4, #4]
 80089c6:	bf08      	it	eq
 80089c8:	f8c8 1000 	streq.w	r1, [r8]
 80089cc:	5162      	str	r2, [r4, r5]
 80089ce:	604b      	str	r3, [r1, #4]
 80089d0:	4630      	mov	r0, r6
 80089d2:	f000 f82f 	bl	8008a34 <__malloc_unlock>
 80089d6:	f104 000b 	add.w	r0, r4, #11
 80089da:	1d23      	adds	r3, r4, #4
 80089dc:	f020 0007 	bic.w	r0, r0, #7
 80089e0:	1ac2      	subs	r2, r0, r3
 80089e2:	bf1c      	itt	ne
 80089e4:	1a1b      	subne	r3, r3, r0
 80089e6:	50a3      	strne	r3, [r4, r2]
 80089e8:	e7af      	b.n	800894a <_malloc_r+0x22>
 80089ea:	6862      	ldr	r2, [r4, #4]
 80089ec:	42a3      	cmp	r3, r4
 80089ee:	bf0c      	ite	eq
 80089f0:	f8c8 2000 	streq.w	r2, [r8]
 80089f4:	605a      	strne	r2, [r3, #4]
 80089f6:	e7eb      	b.n	80089d0 <_malloc_r+0xa8>
 80089f8:	4623      	mov	r3, r4
 80089fa:	6864      	ldr	r4, [r4, #4]
 80089fc:	e7ae      	b.n	800895c <_malloc_r+0x34>
 80089fe:	463c      	mov	r4, r7
 8008a00:	687f      	ldr	r7, [r7, #4]
 8008a02:	e7b6      	b.n	8008972 <_malloc_r+0x4a>
 8008a04:	461a      	mov	r2, r3
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	42a3      	cmp	r3, r4
 8008a0a:	d1fb      	bne.n	8008a04 <_malloc_r+0xdc>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	6053      	str	r3, [r2, #4]
 8008a10:	e7de      	b.n	80089d0 <_malloc_r+0xa8>
 8008a12:	230c      	movs	r3, #12
 8008a14:	6033      	str	r3, [r6, #0]
 8008a16:	4630      	mov	r0, r6
 8008a18:	f000 f80c 	bl	8008a34 <__malloc_unlock>
 8008a1c:	e794      	b.n	8008948 <_malloc_r+0x20>
 8008a1e:	6005      	str	r5, [r0, #0]
 8008a20:	e7d6      	b.n	80089d0 <_malloc_r+0xa8>
 8008a22:	bf00      	nop
 8008a24:	200026c4 	.word	0x200026c4

08008a28 <__malloc_lock>:
 8008a28:	4801      	ldr	r0, [pc, #4]	@ (8008a30 <__malloc_lock+0x8>)
 8008a2a:	f7ff bf00 	b.w	800882e <__retarget_lock_acquire_recursive>
 8008a2e:	bf00      	nop
 8008a30:	200026bc 	.word	0x200026bc

08008a34 <__malloc_unlock>:
 8008a34:	4801      	ldr	r0, [pc, #4]	@ (8008a3c <__malloc_unlock+0x8>)
 8008a36:	f7ff befb 	b.w	8008830 <__retarget_lock_release_recursive>
 8008a3a:	bf00      	nop
 8008a3c:	200026bc 	.word	0x200026bc

08008a40 <__sfputc_r>:
 8008a40:	6893      	ldr	r3, [r2, #8]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	b410      	push	{r4}
 8008a48:	6093      	str	r3, [r2, #8]
 8008a4a:	da08      	bge.n	8008a5e <__sfputc_r+0x1e>
 8008a4c:	6994      	ldr	r4, [r2, #24]
 8008a4e:	42a3      	cmp	r3, r4
 8008a50:	db01      	blt.n	8008a56 <__sfputc_r+0x16>
 8008a52:	290a      	cmp	r1, #10
 8008a54:	d103      	bne.n	8008a5e <__sfputc_r+0x1e>
 8008a56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a5a:	f7ff bdda 	b.w	8008612 <__swbuf_r>
 8008a5e:	6813      	ldr	r3, [r2, #0]
 8008a60:	1c58      	adds	r0, r3, #1
 8008a62:	6010      	str	r0, [r2, #0]
 8008a64:	7019      	strb	r1, [r3, #0]
 8008a66:	4608      	mov	r0, r1
 8008a68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <__sfputs_r>:
 8008a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a70:	4606      	mov	r6, r0
 8008a72:	460f      	mov	r7, r1
 8008a74:	4614      	mov	r4, r2
 8008a76:	18d5      	adds	r5, r2, r3
 8008a78:	42ac      	cmp	r4, r5
 8008a7a:	d101      	bne.n	8008a80 <__sfputs_r+0x12>
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	e007      	b.n	8008a90 <__sfputs_r+0x22>
 8008a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a84:	463a      	mov	r2, r7
 8008a86:	4630      	mov	r0, r6
 8008a88:	f7ff ffda 	bl	8008a40 <__sfputc_r>
 8008a8c:	1c43      	adds	r3, r0, #1
 8008a8e:	d1f3      	bne.n	8008a78 <__sfputs_r+0xa>
 8008a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a94 <_vfiprintf_r>:
 8008a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a98:	460d      	mov	r5, r1
 8008a9a:	b09d      	sub	sp, #116	@ 0x74
 8008a9c:	4614      	mov	r4, r2
 8008a9e:	4698      	mov	r8, r3
 8008aa0:	4606      	mov	r6, r0
 8008aa2:	b118      	cbz	r0, 8008aac <_vfiprintf_r+0x18>
 8008aa4:	6a03      	ldr	r3, [r0, #32]
 8008aa6:	b90b      	cbnz	r3, 8008aac <_vfiprintf_r+0x18>
 8008aa8:	f7ff fcca 	bl	8008440 <__sinit>
 8008aac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008aae:	07d9      	lsls	r1, r3, #31
 8008ab0:	d405      	bmi.n	8008abe <_vfiprintf_r+0x2a>
 8008ab2:	89ab      	ldrh	r3, [r5, #12]
 8008ab4:	059a      	lsls	r2, r3, #22
 8008ab6:	d402      	bmi.n	8008abe <_vfiprintf_r+0x2a>
 8008ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008aba:	f7ff feb8 	bl	800882e <__retarget_lock_acquire_recursive>
 8008abe:	89ab      	ldrh	r3, [r5, #12]
 8008ac0:	071b      	lsls	r3, r3, #28
 8008ac2:	d501      	bpl.n	8008ac8 <_vfiprintf_r+0x34>
 8008ac4:	692b      	ldr	r3, [r5, #16]
 8008ac6:	b99b      	cbnz	r3, 8008af0 <_vfiprintf_r+0x5c>
 8008ac8:	4629      	mov	r1, r5
 8008aca:	4630      	mov	r0, r6
 8008acc:	f7ff fde0 	bl	8008690 <__swsetup_r>
 8008ad0:	b170      	cbz	r0, 8008af0 <_vfiprintf_r+0x5c>
 8008ad2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ad4:	07dc      	lsls	r4, r3, #31
 8008ad6:	d504      	bpl.n	8008ae2 <_vfiprintf_r+0x4e>
 8008ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8008adc:	b01d      	add	sp, #116	@ 0x74
 8008ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae2:	89ab      	ldrh	r3, [r5, #12]
 8008ae4:	0598      	lsls	r0, r3, #22
 8008ae6:	d4f7      	bmi.n	8008ad8 <_vfiprintf_r+0x44>
 8008ae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008aea:	f7ff fea1 	bl	8008830 <__retarget_lock_release_recursive>
 8008aee:	e7f3      	b.n	8008ad8 <_vfiprintf_r+0x44>
 8008af0:	2300      	movs	r3, #0
 8008af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008af4:	2320      	movs	r3, #32
 8008af6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008afa:	f8cd 800c 	str.w	r8, [sp, #12]
 8008afe:	2330      	movs	r3, #48	@ 0x30
 8008b00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008cb0 <_vfiprintf_r+0x21c>
 8008b04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b08:	f04f 0901 	mov.w	r9, #1
 8008b0c:	4623      	mov	r3, r4
 8008b0e:	469a      	mov	sl, r3
 8008b10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b14:	b10a      	cbz	r2, 8008b1a <_vfiprintf_r+0x86>
 8008b16:	2a25      	cmp	r2, #37	@ 0x25
 8008b18:	d1f9      	bne.n	8008b0e <_vfiprintf_r+0x7a>
 8008b1a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b1e:	d00b      	beq.n	8008b38 <_vfiprintf_r+0xa4>
 8008b20:	465b      	mov	r3, fp
 8008b22:	4622      	mov	r2, r4
 8008b24:	4629      	mov	r1, r5
 8008b26:	4630      	mov	r0, r6
 8008b28:	f7ff ffa1 	bl	8008a6e <__sfputs_r>
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	f000 80a7 	beq.w	8008c80 <_vfiprintf_r+0x1ec>
 8008b32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b34:	445a      	add	r2, fp
 8008b36:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b38:	f89a 3000 	ldrb.w	r3, [sl]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f000 809f 	beq.w	8008c80 <_vfiprintf_r+0x1ec>
 8008b42:	2300      	movs	r3, #0
 8008b44:	f04f 32ff 	mov.w	r2, #4294967295
 8008b48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b4c:	f10a 0a01 	add.w	sl, sl, #1
 8008b50:	9304      	str	r3, [sp, #16]
 8008b52:	9307      	str	r3, [sp, #28]
 8008b54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b58:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b5a:	4654      	mov	r4, sl
 8008b5c:	2205      	movs	r2, #5
 8008b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b62:	4853      	ldr	r0, [pc, #332]	@ (8008cb0 <_vfiprintf_r+0x21c>)
 8008b64:	f7f7 fb34 	bl	80001d0 <memchr>
 8008b68:	9a04      	ldr	r2, [sp, #16]
 8008b6a:	b9d8      	cbnz	r0, 8008ba4 <_vfiprintf_r+0x110>
 8008b6c:	06d1      	lsls	r1, r2, #27
 8008b6e:	bf44      	itt	mi
 8008b70:	2320      	movmi	r3, #32
 8008b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b76:	0713      	lsls	r3, r2, #28
 8008b78:	bf44      	itt	mi
 8008b7a:	232b      	movmi	r3, #43	@ 0x2b
 8008b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b80:	f89a 3000 	ldrb.w	r3, [sl]
 8008b84:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b86:	d015      	beq.n	8008bb4 <_vfiprintf_r+0x120>
 8008b88:	9a07      	ldr	r2, [sp, #28]
 8008b8a:	4654      	mov	r4, sl
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	f04f 0c0a 	mov.w	ip, #10
 8008b92:	4621      	mov	r1, r4
 8008b94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b98:	3b30      	subs	r3, #48	@ 0x30
 8008b9a:	2b09      	cmp	r3, #9
 8008b9c:	d94b      	bls.n	8008c36 <_vfiprintf_r+0x1a2>
 8008b9e:	b1b0      	cbz	r0, 8008bce <_vfiprintf_r+0x13a>
 8008ba0:	9207      	str	r2, [sp, #28]
 8008ba2:	e014      	b.n	8008bce <_vfiprintf_r+0x13a>
 8008ba4:	eba0 0308 	sub.w	r3, r0, r8
 8008ba8:	fa09 f303 	lsl.w	r3, r9, r3
 8008bac:	4313      	orrs	r3, r2
 8008bae:	9304      	str	r3, [sp, #16]
 8008bb0:	46a2      	mov	sl, r4
 8008bb2:	e7d2      	b.n	8008b5a <_vfiprintf_r+0xc6>
 8008bb4:	9b03      	ldr	r3, [sp, #12]
 8008bb6:	1d19      	adds	r1, r3, #4
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	9103      	str	r1, [sp, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	bfbb      	ittet	lt
 8008bc0:	425b      	neglt	r3, r3
 8008bc2:	f042 0202 	orrlt.w	r2, r2, #2
 8008bc6:	9307      	strge	r3, [sp, #28]
 8008bc8:	9307      	strlt	r3, [sp, #28]
 8008bca:	bfb8      	it	lt
 8008bcc:	9204      	strlt	r2, [sp, #16]
 8008bce:	7823      	ldrb	r3, [r4, #0]
 8008bd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bd2:	d10a      	bne.n	8008bea <_vfiprintf_r+0x156>
 8008bd4:	7863      	ldrb	r3, [r4, #1]
 8008bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bd8:	d132      	bne.n	8008c40 <_vfiprintf_r+0x1ac>
 8008bda:	9b03      	ldr	r3, [sp, #12]
 8008bdc:	1d1a      	adds	r2, r3, #4
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	9203      	str	r2, [sp, #12]
 8008be2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008be6:	3402      	adds	r4, #2
 8008be8:	9305      	str	r3, [sp, #20]
 8008bea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008cc0 <_vfiprintf_r+0x22c>
 8008bee:	7821      	ldrb	r1, [r4, #0]
 8008bf0:	2203      	movs	r2, #3
 8008bf2:	4650      	mov	r0, sl
 8008bf4:	f7f7 faec 	bl	80001d0 <memchr>
 8008bf8:	b138      	cbz	r0, 8008c0a <_vfiprintf_r+0x176>
 8008bfa:	9b04      	ldr	r3, [sp, #16]
 8008bfc:	eba0 000a 	sub.w	r0, r0, sl
 8008c00:	2240      	movs	r2, #64	@ 0x40
 8008c02:	4082      	lsls	r2, r0
 8008c04:	4313      	orrs	r3, r2
 8008c06:	3401      	adds	r4, #1
 8008c08:	9304      	str	r3, [sp, #16]
 8008c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c0e:	4829      	ldr	r0, [pc, #164]	@ (8008cb4 <_vfiprintf_r+0x220>)
 8008c10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c14:	2206      	movs	r2, #6
 8008c16:	f7f7 fadb 	bl	80001d0 <memchr>
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	d03f      	beq.n	8008c9e <_vfiprintf_r+0x20a>
 8008c1e:	4b26      	ldr	r3, [pc, #152]	@ (8008cb8 <_vfiprintf_r+0x224>)
 8008c20:	bb1b      	cbnz	r3, 8008c6a <_vfiprintf_r+0x1d6>
 8008c22:	9b03      	ldr	r3, [sp, #12]
 8008c24:	3307      	adds	r3, #7
 8008c26:	f023 0307 	bic.w	r3, r3, #7
 8008c2a:	3308      	adds	r3, #8
 8008c2c:	9303      	str	r3, [sp, #12]
 8008c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c30:	443b      	add	r3, r7
 8008c32:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c34:	e76a      	b.n	8008b0c <_vfiprintf_r+0x78>
 8008c36:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	2001      	movs	r0, #1
 8008c3e:	e7a8      	b.n	8008b92 <_vfiprintf_r+0xfe>
 8008c40:	2300      	movs	r3, #0
 8008c42:	3401      	adds	r4, #1
 8008c44:	9305      	str	r3, [sp, #20]
 8008c46:	4619      	mov	r1, r3
 8008c48:	f04f 0c0a 	mov.w	ip, #10
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c52:	3a30      	subs	r2, #48	@ 0x30
 8008c54:	2a09      	cmp	r2, #9
 8008c56:	d903      	bls.n	8008c60 <_vfiprintf_r+0x1cc>
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d0c6      	beq.n	8008bea <_vfiprintf_r+0x156>
 8008c5c:	9105      	str	r1, [sp, #20]
 8008c5e:	e7c4      	b.n	8008bea <_vfiprintf_r+0x156>
 8008c60:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c64:	4604      	mov	r4, r0
 8008c66:	2301      	movs	r3, #1
 8008c68:	e7f0      	b.n	8008c4c <_vfiprintf_r+0x1b8>
 8008c6a:	ab03      	add	r3, sp, #12
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	462a      	mov	r2, r5
 8008c70:	4b12      	ldr	r3, [pc, #72]	@ (8008cbc <_vfiprintf_r+0x228>)
 8008c72:	a904      	add	r1, sp, #16
 8008c74:	4630      	mov	r0, r6
 8008c76:	f3af 8000 	nop.w
 8008c7a:	4607      	mov	r7, r0
 8008c7c:	1c78      	adds	r0, r7, #1
 8008c7e:	d1d6      	bne.n	8008c2e <_vfiprintf_r+0x19a>
 8008c80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c82:	07d9      	lsls	r1, r3, #31
 8008c84:	d405      	bmi.n	8008c92 <_vfiprintf_r+0x1fe>
 8008c86:	89ab      	ldrh	r3, [r5, #12]
 8008c88:	059a      	lsls	r2, r3, #22
 8008c8a:	d402      	bmi.n	8008c92 <_vfiprintf_r+0x1fe>
 8008c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c8e:	f7ff fdcf 	bl	8008830 <__retarget_lock_release_recursive>
 8008c92:	89ab      	ldrh	r3, [r5, #12]
 8008c94:	065b      	lsls	r3, r3, #25
 8008c96:	f53f af1f 	bmi.w	8008ad8 <_vfiprintf_r+0x44>
 8008c9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c9c:	e71e      	b.n	8008adc <_vfiprintf_r+0x48>
 8008c9e:	ab03      	add	r3, sp, #12
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	462a      	mov	r2, r5
 8008ca4:	4b05      	ldr	r3, [pc, #20]	@ (8008cbc <_vfiprintf_r+0x228>)
 8008ca6:	a904      	add	r1, sp, #16
 8008ca8:	4630      	mov	r0, r6
 8008caa:	f000 f879 	bl	8008da0 <_printf_i>
 8008cae:	e7e4      	b.n	8008c7a <_vfiprintf_r+0x1e6>
 8008cb0:	08009348 	.word	0x08009348
 8008cb4:	08009352 	.word	0x08009352
 8008cb8:	00000000 	.word	0x00000000
 8008cbc:	08008a6f 	.word	0x08008a6f
 8008cc0:	0800934e 	.word	0x0800934e

08008cc4 <_printf_common>:
 8008cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc8:	4616      	mov	r6, r2
 8008cca:	4698      	mov	r8, r3
 8008ccc:	688a      	ldr	r2, [r1, #8]
 8008cce:	690b      	ldr	r3, [r1, #16]
 8008cd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	bfb8      	it	lt
 8008cd8:	4613      	movlt	r3, r2
 8008cda:	6033      	str	r3, [r6, #0]
 8008cdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ce0:	4607      	mov	r7, r0
 8008ce2:	460c      	mov	r4, r1
 8008ce4:	b10a      	cbz	r2, 8008cea <_printf_common+0x26>
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	6033      	str	r3, [r6, #0]
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	0699      	lsls	r1, r3, #26
 8008cee:	bf42      	ittt	mi
 8008cf0:	6833      	ldrmi	r3, [r6, #0]
 8008cf2:	3302      	addmi	r3, #2
 8008cf4:	6033      	strmi	r3, [r6, #0]
 8008cf6:	6825      	ldr	r5, [r4, #0]
 8008cf8:	f015 0506 	ands.w	r5, r5, #6
 8008cfc:	d106      	bne.n	8008d0c <_printf_common+0x48>
 8008cfe:	f104 0a19 	add.w	sl, r4, #25
 8008d02:	68e3      	ldr	r3, [r4, #12]
 8008d04:	6832      	ldr	r2, [r6, #0]
 8008d06:	1a9b      	subs	r3, r3, r2
 8008d08:	42ab      	cmp	r3, r5
 8008d0a:	dc26      	bgt.n	8008d5a <_printf_common+0x96>
 8008d0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d10:	6822      	ldr	r2, [r4, #0]
 8008d12:	3b00      	subs	r3, #0
 8008d14:	bf18      	it	ne
 8008d16:	2301      	movne	r3, #1
 8008d18:	0692      	lsls	r2, r2, #26
 8008d1a:	d42b      	bmi.n	8008d74 <_printf_common+0xb0>
 8008d1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d20:	4641      	mov	r1, r8
 8008d22:	4638      	mov	r0, r7
 8008d24:	47c8      	blx	r9
 8008d26:	3001      	adds	r0, #1
 8008d28:	d01e      	beq.n	8008d68 <_printf_common+0xa4>
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	6922      	ldr	r2, [r4, #16]
 8008d2e:	f003 0306 	and.w	r3, r3, #6
 8008d32:	2b04      	cmp	r3, #4
 8008d34:	bf02      	ittt	eq
 8008d36:	68e5      	ldreq	r5, [r4, #12]
 8008d38:	6833      	ldreq	r3, [r6, #0]
 8008d3a:	1aed      	subeq	r5, r5, r3
 8008d3c:	68a3      	ldr	r3, [r4, #8]
 8008d3e:	bf0c      	ite	eq
 8008d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d44:	2500      	movne	r5, #0
 8008d46:	4293      	cmp	r3, r2
 8008d48:	bfc4      	itt	gt
 8008d4a:	1a9b      	subgt	r3, r3, r2
 8008d4c:	18ed      	addgt	r5, r5, r3
 8008d4e:	2600      	movs	r6, #0
 8008d50:	341a      	adds	r4, #26
 8008d52:	42b5      	cmp	r5, r6
 8008d54:	d11a      	bne.n	8008d8c <_printf_common+0xc8>
 8008d56:	2000      	movs	r0, #0
 8008d58:	e008      	b.n	8008d6c <_printf_common+0xa8>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	4652      	mov	r2, sl
 8008d5e:	4641      	mov	r1, r8
 8008d60:	4638      	mov	r0, r7
 8008d62:	47c8      	blx	r9
 8008d64:	3001      	adds	r0, #1
 8008d66:	d103      	bne.n	8008d70 <_printf_common+0xac>
 8008d68:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d70:	3501      	adds	r5, #1
 8008d72:	e7c6      	b.n	8008d02 <_printf_common+0x3e>
 8008d74:	18e1      	adds	r1, r4, r3
 8008d76:	1c5a      	adds	r2, r3, #1
 8008d78:	2030      	movs	r0, #48	@ 0x30
 8008d7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d7e:	4422      	add	r2, r4
 8008d80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d88:	3302      	adds	r3, #2
 8008d8a:	e7c7      	b.n	8008d1c <_printf_common+0x58>
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	4622      	mov	r2, r4
 8008d90:	4641      	mov	r1, r8
 8008d92:	4638      	mov	r0, r7
 8008d94:	47c8      	blx	r9
 8008d96:	3001      	adds	r0, #1
 8008d98:	d0e6      	beq.n	8008d68 <_printf_common+0xa4>
 8008d9a:	3601      	adds	r6, #1
 8008d9c:	e7d9      	b.n	8008d52 <_printf_common+0x8e>
	...

08008da0 <_printf_i>:
 8008da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008da4:	7e0f      	ldrb	r7, [r1, #24]
 8008da6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008da8:	2f78      	cmp	r7, #120	@ 0x78
 8008daa:	4691      	mov	r9, r2
 8008dac:	4680      	mov	r8, r0
 8008dae:	460c      	mov	r4, r1
 8008db0:	469a      	mov	sl, r3
 8008db2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008db6:	d807      	bhi.n	8008dc8 <_printf_i+0x28>
 8008db8:	2f62      	cmp	r7, #98	@ 0x62
 8008dba:	d80a      	bhi.n	8008dd2 <_printf_i+0x32>
 8008dbc:	2f00      	cmp	r7, #0
 8008dbe:	f000 80d2 	beq.w	8008f66 <_printf_i+0x1c6>
 8008dc2:	2f58      	cmp	r7, #88	@ 0x58
 8008dc4:	f000 80b9 	beq.w	8008f3a <_printf_i+0x19a>
 8008dc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008dcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008dd0:	e03a      	b.n	8008e48 <_printf_i+0xa8>
 8008dd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008dd6:	2b15      	cmp	r3, #21
 8008dd8:	d8f6      	bhi.n	8008dc8 <_printf_i+0x28>
 8008dda:	a101      	add	r1, pc, #4	@ (adr r1, 8008de0 <_printf_i+0x40>)
 8008ddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008de0:	08008e39 	.word	0x08008e39
 8008de4:	08008e4d 	.word	0x08008e4d
 8008de8:	08008dc9 	.word	0x08008dc9
 8008dec:	08008dc9 	.word	0x08008dc9
 8008df0:	08008dc9 	.word	0x08008dc9
 8008df4:	08008dc9 	.word	0x08008dc9
 8008df8:	08008e4d 	.word	0x08008e4d
 8008dfc:	08008dc9 	.word	0x08008dc9
 8008e00:	08008dc9 	.word	0x08008dc9
 8008e04:	08008dc9 	.word	0x08008dc9
 8008e08:	08008dc9 	.word	0x08008dc9
 8008e0c:	08008f4d 	.word	0x08008f4d
 8008e10:	08008e77 	.word	0x08008e77
 8008e14:	08008f07 	.word	0x08008f07
 8008e18:	08008dc9 	.word	0x08008dc9
 8008e1c:	08008dc9 	.word	0x08008dc9
 8008e20:	08008f6f 	.word	0x08008f6f
 8008e24:	08008dc9 	.word	0x08008dc9
 8008e28:	08008e77 	.word	0x08008e77
 8008e2c:	08008dc9 	.word	0x08008dc9
 8008e30:	08008dc9 	.word	0x08008dc9
 8008e34:	08008f0f 	.word	0x08008f0f
 8008e38:	6833      	ldr	r3, [r6, #0]
 8008e3a:	1d1a      	adds	r2, r3, #4
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	6032      	str	r2, [r6, #0]
 8008e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e09d      	b.n	8008f88 <_printf_i+0x1e8>
 8008e4c:	6833      	ldr	r3, [r6, #0]
 8008e4e:	6820      	ldr	r0, [r4, #0]
 8008e50:	1d19      	adds	r1, r3, #4
 8008e52:	6031      	str	r1, [r6, #0]
 8008e54:	0606      	lsls	r6, r0, #24
 8008e56:	d501      	bpl.n	8008e5c <_printf_i+0xbc>
 8008e58:	681d      	ldr	r5, [r3, #0]
 8008e5a:	e003      	b.n	8008e64 <_printf_i+0xc4>
 8008e5c:	0645      	lsls	r5, r0, #25
 8008e5e:	d5fb      	bpl.n	8008e58 <_printf_i+0xb8>
 8008e60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e64:	2d00      	cmp	r5, #0
 8008e66:	da03      	bge.n	8008e70 <_printf_i+0xd0>
 8008e68:	232d      	movs	r3, #45	@ 0x2d
 8008e6a:	426d      	negs	r5, r5
 8008e6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e70:	4859      	ldr	r0, [pc, #356]	@ (8008fd8 <_printf_i+0x238>)
 8008e72:	230a      	movs	r3, #10
 8008e74:	e011      	b.n	8008e9a <_printf_i+0xfa>
 8008e76:	6821      	ldr	r1, [r4, #0]
 8008e78:	6833      	ldr	r3, [r6, #0]
 8008e7a:	0608      	lsls	r0, r1, #24
 8008e7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e80:	d402      	bmi.n	8008e88 <_printf_i+0xe8>
 8008e82:	0649      	lsls	r1, r1, #25
 8008e84:	bf48      	it	mi
 8008e86:	b2ad      	uxthmi	r5, r5
 8008e88:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e8a:	4853      	ldr	r0, [pc, #332]	@ (8008fd8 <_printf_i+0x238>)
 8008e8c:	6033      	str	r3, [r6, #0]
 8008e8e:	bf14      	ite	ne
 8008e90:	230a      	movne	r3, #10
 8008e92:	2308      	moveq	r3, #8
 8008e94:	2100      	movs	r1, #0
 8008e96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e9a:	6866      	ldr	r6, [r4, #4]
 8008e9c:	60a6      	str	r6, [r4, #8]
 8008e9e:	2e00      	cmp	r6, #0
 8008ea0:	bfa2      	ittt	ge
 8008ea2:	6821      	ldrge	r1, [r4, #0]
 8008ea4:	f021 0104 	bicge.w	r1, r1, #4
 8008ea8:	6021      	strge	r1, [r4, #0]
 8008eaa:	b90d      	cbnz	r5, 8008eb0 <_printf_i+0x110>
 8008eac:	2e00      	cmp	r6, #0
 8008eae:	d04b      	beq.n	8008f48 <_printf_i+0x1a8>
 8008eb0:	4616      	mov	r6, r2
 8008eb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008eb6:	fb03 5711 	mls	r7, r3, r1, r5
 8008eba:	5dc7      	ldrb	r7, [r0, r7]
 8008ebc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ec0:	462f      	mov	r7, r5
 8008ec2:	42bb      	cmp	r3, r7
 8008ec4:	460d      	mov	r5, r1
 8008ec6:	d9f4      	bls.n	8008eb2 <_printf_i+0x112>
 8008ec8:	2b08      	cmp	r3, #8
 8008eca:	d10b      	bne.n	8008ee4 <_printf_i+0x144>
 8008ecc:	6823      	ldr	r3, [r4, #0]
 8008ece:	07df      	lsls	r7, r3, #31
 8008ed0:	d508      	bpl.n	8008ee4 <_printf_i+0x144>
 8008ed2:	6923      	ldr	r3, [r4, #16]
 8008ed4:	6861      	ldr	r1, [r4, #4]
 8008ed6:	4299      	cmp	r1, r3
 8008ed8:	bfde      	ittt	le
 8008eda:	2330      	movle	r3, #48	@ 0x30
 8008edc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ee0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ee4:	1b92      	subs	r2, r2, r6
 8008ee6:	6122      	str	r2, [r4, #16]
 8008ee8:	f8cd a000 	str.w	sl, [sp]
 8008eec:	464b      	mov	r3, r9
 8008eee:	aa03      	add	r2, sp, #12
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	f7ff fee6 	bl	8008cc4 <_printf_common>
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d14a      	bne.n	8008f92 <_printf_i+0x1f2>
 8008efc:	f04f 30ff 	mov.w	r0, #4294967295
 8008f00:	b004      	add	sp, #16
 8008f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	f043 0320 	orr.w	r3, r3, #32
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	4833      	ldr	r0, [pc, #204]	@ (8008fdc <_printf_i+0x23c>)
 8008f10:	2778      	movs	r7, #120	@ 0x78
 8008f12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	6831      	ldr	r1, [r6, #0]
 8008f1a:	061f      	lsls	r7, r3, #24
 8008f1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f20:	d402      	bmi.n	8008f28 <_printf_i+0x188>
 8008f22:	065f      	lsls	r7, r3, #25
 8008f24:	bf48      	it	mi
 8008f26:	b2ad      	uxthmi	r5, r5
 8008f28:	6031      	str	r1, [r6, #0]
 8008f2a:	07d9      	lsls	r1, r3, #31
 8008f2c:	bf44      	itt	mi
 8008f2e:	f043 0320 	orrmi.w	r3, r3, #32
 8008f32:	6023      	strmi	r3, [r4, #0]
 8008f34:	b11d      	cbz	r5, 8008f3e <_printf_i+0x19e>
 8008f36:	2310      	movs	r3, #16
 8008f38:	e7ac      	b.n	8008e94 <_printf_i+0xf4>
 8008f3a:	4827      	ldr	r0, [pc, #156]	@ (8008fd8 <_printf_i+0x238>)
 8008f3c:	e7e9      	b.n	8008f12 <_printf_i+0x172>
 8008f3e:	6823      	ldr	r3, [r4, #0]
 8008f40:	f023 0320 	bic.w	r3, r3, #32
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	e7f6      	b.n	8008f36 <_printf_i+0x196>
 8008f48:	4616      	mov	r6, r2
 8008f4a:	e7bd      	b.n	8008ec8 <_printf_i+0x128>
 8008f4c:	6833      	ldr	r3, [r6, #0]
 8008f4e:	6825      	ldr	r5, [r4, #0]
 8008f50:	6961      	ldr	r1, [r4, #20]
 8008f52:	1d18      	adds	r0, r3, #4
 8008f54:	6030      	str	r0, [r6, #0]
 8008f56:	062e      	lsls	r6, r5, #24
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	d501      	bpl.n	8008f60 <_printf_i+0x1c0>
 8008f5c:	6019      	str	r1, [r3, #0]
 8008f5e:	e002      	b.n	8008f66 <_printf_i+0x1c6>
 8008f60:	0668      	lsls	r0, r5, #25
 8008f62:	d5fb      	bpl.n	8008f5c <_printf_i+0x1bc>
 8008f64:	8019      	strh	r1, [r3, #0]
 8008f66:	2300      	movs	r3, #0
 8008f68:	6123      	str	r3, [r4, #16]
 8008f6a:	4616      	mov	r6, r2
 8008f6c:	e7bc      	b.n	8008ee8 <_printf_i+0x148>
 8008f6e:	6833      	ldr	r3, [r6, #0]
 8008f70:	1d1a      	adds	r2, r3, #4
 8008f72:	6032      	str	r2, [r6, #0]
 8008f74:	681e      	ldr	r6, [r3, #0]
 8008f76:	6862      	ldr	r2, [r4, #4]
 8008f78:	2100      	movs	r1, #0
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	f7f7 f928 	bl	80001d0 <memchr>
 8008f80:	b108      	cbz	r0, 8008f86 <_printf_i+0x1e6>
 8008f82:	1b80      	subs	r0, r0, r6
 8008f84:	6060      	str	r0, [r4, #4]
 8008f86:	6863      	ldr	r3, [r4, #4]
 8008f88:	6123      	str	r3, [r4, #16]
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f90:	e7aa      	b.n	8008ee8 <_printf_i+0x148>
 8008f92:	6923      	ldr	r3, [r4, #16]
 8008f94:	4632      	mov	r2, r6
 8008f96:	4649      	mov	r1, r9
 8008f98:	4640      	mov	r0, r8
 8008f9a:	47d0      	blx	sl
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	d0ad      	beq.n	8008efc <_printf_i+0x15c>
 8008fa0:	6823      	ldr	r3, [r4, #0]
 8008fa2:	079b      	lsls	r3, r3, #30
 8008fa4:	d413      	bmi.n	8008fce <_printf_i+0x22e>
 8008fa6:	68e0      	ldr	r0, [r4, #12]
 8008fa8:	9b03      	ldr	r3, [sp, #12]
 8008faa:	4298      	cmp	r0, r3
 8008fac:	bfb8      	it	lt
 8008fae:	4618      	movlt	r0, r3
 8008fb0:	e7a6      	b.n	8008f00 <_printf_i+0x160>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	4632      	mov	r2, r6
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	4640      	mov	r0, r8
 8008fba:	47d0      	blx	sl
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	d09d      	beq.n	8008efc <_printf_i+0x15c>
 8008fc0:	3501      	adds	r5, #1
 8008fc2:	68e3      	ldr	r3, [r4, #12]
 8008fc4:	9903      	ldr	r1, [sp, #12]
 8008fc6:	1a5b      	subs	r3, r3, r1
 8008fc8:	42ab      	cmp	r3, r5
 8008fca:	dcf2      	bgt.n	8008fb2 <_printf_i+0x212>
 8008fcc:	e7eb      	b.n	8008fa6 <_printf_i+0x206>
 8008fce:	2500      	movs	r5, #0
 8008fd0:	f104 0619 	add.w	r6, r4, #25
 8008fd4:	e7f5      	b.n	8008fc2 <_printf_i+0x222>
 8008fd6:	bf00      	nop
 8008fd8:	08009359 	.word	0x08009359
 8008fdc:	0800936a 	.word	0x0800936a

08008fe0 <__sflush_r>:
 8008fe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe8:	0716      	lsls	r6, r2, #28
 8008fea:	4605      	mov	r5, r0
 8008fec:	460c      	mov	r4, r1
 8008fee:	d454      	bmi.n	800909a <__sflush_r+0xba>
 8008ff0:	684b      	ldr	r3, [r1, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	dc02      	bgt.n	8008ffc <__sflush_r+0x1c>
 8008ff6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	dd48      	ble.n	800908e <__sflush_r+0xae>
 8008ffc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ffe:	2e00      	cmp	r6, #0
 8009000:	d045      	beq.n	800908e <__sflush_r+0xae>
 8009002:	2300      	movs	r3, #0
 8009004:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009008:	682f      	ldr	r7, [r5, #0]
 800900a:	6a21      	ldr	r1, [r4, #32]
 800900c:	602b      	str	r3, [r5, #0]
 800900e:	d030      	beq.n	8009072 <__sflush_r+0x92>
 8009010:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009012:	89a3      	ldrh	r3, [r4, #12]
 8009014:	0759      	lsls	r1, r3, #29
 8009016:	d505      	bpl.n	8009024 <__sflush_r+0x44>
 8009018:	6863      	ldr	r3, [r4, #4]
 800901a:	1ad2      	subs	r2, r2, r3
 800901c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800901e:	b10b      	cbz	r3, 8009024 <__sflush_r+0x44>
 8009020:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009022:	1ad2      	subs	r2, r2, r3
 8009024:	2300      	movs	r3, #0
 8009026:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009028:	6a21      	ldr	r1, [r4, #32]
 800902a:	4628      	mov	r0, r5
 800902c:	47b0      	blx	r6
 800902e:	1c43      	adds	r3, r0, #1
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	d106      	bne.n	8009042 <__sflush_r+0x62>
 8009034:	6829      	ldr	r1, [r5, #0]
 8009036:	291d      	cmp	r1, #29
 8009038:	d82b      	bhi.n	8009092 <__sflush_r+0xb2>
 800903a:	4a2a      	ldr	r2, [pc, #168]	@ (80090e4 <__sflush_r+0x104>)
 800903c:	410a      	asrs	r2, r1
 800903e:	07d6      	lsls	r6, r2, #31
 8009040:	d427      	bmi.n	8009092 <__sflush_r+0xb2>
 8009042:	2200      	movs	r2, #0
 8009044:	6062      	str	r2, [r4, #4]
 8009046:	04d9      	lsls	r1, r3, #19
 8009048:	6922      	ldr	r2, [r4, #16]
 800904a:	6022      	str	r2, [r4, #0]
 800904c:	d504      	bpl.n	8009058 <__sflush_r+0x78>
 800904e:	1c42      	adds	r2, r0, #1
 8009050:	d101      	bne.n	8009056 <__sflush_r+0x76>
 8009052:	682b      	ldr	r3, [r5, #0]
 8009054:	b903      	cbnz	r3, 8009058 <__sflush_r+0x78>
 8009056:	6560      	str	r0, [r4, #84]	@ 0x54
 8009058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800905a:	602f      	str	r7, [r5, #0]
 800905c:	b1b9      	cbz	r1, 800908e <__sflush_r+0xae>
 800905e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009062:	4299      	cmp	r1, r3
 8009064:	d002      	beq.n	800906c <__sflush_r+0x8c>
 8009066:	4628      	mov	r0, r5
 8009068:	f7ff fbf2 	bl	8008850 <_free_r>
 800906c:	2300      	movs	r3, #0
 800906e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009070:	e00d      	b.n	800908e <__sflush_r+0xae>
 8009072:	2301      	movs	r3, #1
 8009074:	4628      	mov	r0, r5
 8009076:	47b0      	blx	r6
 8009078:	4602      	mov	r2, r0
 800907a:	1c50      	adds	r0, r2, #1
 800907c:	d1c9      	bne.n	8009012 <__sflush_r+0x32>
 800907e:	682b      	ldr	r3, [r5, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d0c6      	beq.n	8009012 <__sflush_r+0x32>
 8009084:	2b1d      	cmp	r3, #29
 8009086:	d001      	beq.n	800908c <__sflush_r+0xac>
 8009088:	2b16      	cmp	r3, #22
 800908a:	d11e      	bne.n	80090ca <__sflush_r+0xea>
 800908c:	602f      	str	r7, [r5, #0]
 800908e:	2000      	movs	r0, #0
 8009090:	e022      	b.n	80090d8 <__sflush_r+0xf8>
 8009092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009096:	b21b      	sxth	r3, r3
 8009098:	e01b      	b.n	80090d2 <__sflush_r+0xf2>
 800909a:	690f      	ldr	r7, [r1, #16]
 800909c:	2f00      	cmp	r7, #0
 800909e:	d0f6      	beq.n	800908e <__sflush_r+0xae>
 80090a0:	0793      	lsls	r3, r2, #30
 80090a2:	680e      	ldr	r6, [r1, #0]
 80090a4:	bf08      	it	eq
 80090a6:	694b      	ldreq	r3, [r1, #20]
 80090a8:	600f      	str	r7, [r1, #0]
 80090aa:	bf18      	it	ne
 80090ac:	2300      	movne	r3, #0
 80090ae:	eba6 0807 	sub.w	r8, r6, r7
 80090b2:	608b      	str	r3, [r1, #8]
 80090b4:	f1b8 0f00 	cmp.w	r8, #0
 80090b8:	dde9      	ble.n	800908e <__sflush_r+0xae>
 80090ba:	6a21      	ldr	r1, [r4, #32]
 80090bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80090be:	4643      	mov	r3, r8
 80090c0:	463a      	mov	r2, r7
 80090c2:	4628      	mov	r0, r5
 80090c4:	47b0      	blx	r6
 80090c6:	2800      	cmp	r0, #0
 80090c8:	dc08      	bgt.n	80090dc <__sflush_r+0xfc>
 80090ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090d2:	81a3      	strh	r3, [r4, #12]
 80090d4:	f04f 30ff 	mov.w	r0, #4294967295
 80090d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090dc:	4407      	add	r7, r0
 80090de:	eba8 0800 	sub.w	r8, r8, r0
 80090e2:	e7e7      	b.n	80090b4 <__sflush_r+0xd4>
 80090e4:	dfbffffe 	.word	0xdfbffffe

080090e8 <_fflush_r>:
 80090e8:	b538      	push	{r3, r4, r5, lr}
 80090ea:	690b      	ldr	r3, [r1, #16]
 80090ec:	4605      	mov	r5, r0
 80090ee:	460c      	mov	r4, r1
 80090f0:	b913      	cbnz	r3, 80090f8 <_fflush_r+0x10>
 80090f2:	2500      	movs	r5, #0
 80090f4:	4628      	mov	r0, r5
 80090f6:	bd38      	pop	{r3, r4, r5, pc}
 80090f8:	b118      	cbz	r0, 8009102 <_fflush_r+0x1a>
 80090fa:	6a03      	ldr	r3, [r0, #32]
 80090fc:	b90b      	cbnz	r3, 8009102 <_fflush_r+0x1a>
 80090fe:	f7ff f99f 	bl	8008440 <__sinit>
 8009102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d0f3      	beq.n	80090f2 <_fflush_r+0xa>
 800910a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800910c:	07d0      	lsls	r0, r2, #31
 800910e:	d404      	bmi.n	800911a <_fflush_r+0x32>
 8009110:	0599      	lsls	r1, r3, #22
 8009112:	d402      	bmi.n	800911a <_fflush_r+0x32>
 8009114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009116:	f7ff fb8a 	bl	800882e <__retarget_lock_acquire_recursive>
 800911a:	4628      	mov	r0, r5
 800911c:	4621      	mov	r1, r4
 800911e:	f7ff ff5f 	bl	8008fe0 <__sflush_r>
 8009122:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009124:	07da      	lsls	r2, r3, #31
 8009126:	4605      	mov	r5, r0
 8009128:	d4e4      	bmi.n	80090f4 <_fflush_r+0xc>
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	059b      	lsls	r3, r3, #22
 800912e:	d4e1      	bmi.n	80090f4 <_fflush_r+0xc>
 8009130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009132:	f7ff fb7d 	bl	8008830 <__retarget_lock_release_recursive>
 8009136:	e7dd      	b.n	80090f4 <_fflush_r+0xc>

08009138 <__swhatbuf_r>:
 8009138:	b570      	push	{r4, r5, r6, lr}
 800913a:	460c      	mov	r4, r1
 800913c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009140:	2900      	cmp	r1, #0
 8009142:	b096      	sub	sp, #88	@ 0x58
 8009144:	4615      	mov	r5, r2
 8009146:	461e      	mov	r6, r3
 8009148:	da0d      	bge.n	8009166 <__swhatbuf_r+0x2e>
 800914a:	89a3      	ldrh	r3, [r4, #12]
 800914c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009150:	f04f 0100 	mov.w	r1, #0
 8009154:	bf14      	ite	ne
 8009156:	2340      	movne	r3, #64	@ 0x40
 8009158:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800915c:	2000      	movs	r0, #0
 800915e:	6031      	str	r1, [r6, #0]
 8009160:	602b      	str	r3, [r5, #0]
 8009162:	b016      	add	sp, #88	@ 0x58
 8009164:	bd70      	pop	{r4, r5, r6, pc}
 8009166:	466a      	mov	r2, sp
 8009168:	f000 f848 	bl	80091fc <_fstat_r>
 800916c:	2800      	cmp	r0, #0
 800916e:	dbec      	blt.n	800914a <__swhatbuf_r+0x12>
 8009170:	9901      	ldr	r1, [sp, #4]
 8009172:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009176:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800917a:	4259      	negs	r1, r3
 800917c:	4159      	adcs	r1, r3
 800917e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009182:	e7eb      	b.n	800915c <__swhatbuf_r+0x24>

08009184 <__smakebuf_r>:
 8009184:	898b      	ldrh	r3, [r1, #12]
 8009186:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009188:	079d      	lsls	r5, r3, #30
 800918a:	4606      	mov	r6, r0
 800918c:	460c      	mov	r4, r1
 800918e:	d507      	bpl.n	80091a0 <__smakebuf_r+0x1c>
 8009190:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009194:	6023      	str	r3, [r4, #0]
 8009196:	6123      	str	r3, [r4, #16]
 8009198:	2301      	movs	r3, #1
 800919a:	6163      	str	r3, [r4, #20]
 800919c:	b003      	add	sp, #12
 800919e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091a0:	ab01      	add	r3, sp, #4
 80091a2:	466a      	mov	r2, sp
 80091a4:	f7ff ffc8 	bl	8009138 <__swhatbuf_r>
 80091a8:	9f00      	ldr	r7, [sp, #0]
 80091aa:	4605      	mov	r5, r0
 80091ac:	4639      	mov	r1, r7
 80091ae:	4630      	mov	r0, r6
 80091b0:	f7ff fbba 	bl	8008928 <_malloc_r>
 80091b4:	b948      	cbnz	r0, 80091ca <__smakebuf_r+0x46>
 80091b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ba:	059a      	lsls	r2, r3, #22
 80091bc:	d4ee      	bmi.n	800919c <__smakebuf_r+0x18>
 80091be:	f023 0303 	bic.w	r3, r3, #3
 80091c2:	f043 0302 	orr.w	r3, r3, #2
 80091c6:	81a3      	strh	r3, [r4, #12]
 80091c8:	e7e2      	b.n	8009190 <__smakebuf_r+0xc>
 80091ca:	89a3      	ldrh	r3, [r4, #12]
 80091cc:	6020      	str	r0, [r4, #0]
 80091ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091d2:	81a3      	strh	r3, [r4, #12]
 80091d4:	9b01      	ldr	r3, [sp, #4]
 80091d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091da:	b15b      	cbz	r3, 80091f4 <__smakebuf_r+0x70>
 80091dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091e0:	4630      	mov	r0, r6
 80091e2:	f000 f81d 	bl	8009220 <_isatty_r>
 80091e6:	b128      	cbz	r0, 80091f4 <__smakebuf_r+0x70>
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	f023 0303 	bic.w	r3, r3, #3
 80091ee:	f043 0301 	orr.w	r3, r3, #1
 80091f2:	81a3      	strh	r3, [r4, #12]
 80091f4:	89a3      	ldrh	r3, [r4, #12]
 80091f6:	431d      	orrs	r5, r3
 80091f8:	81a5      	strh	r5, [r4, #12]
 80091fa:	e7cf      	b.n	800919c <__smakebuf_r+0x18>

080091fc <_fstat_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4d07      	ldr	r5, [pc, #28]	@ (800921c <_fstat_r+0x20>)
 8009200:	2300      	movs	r3, #0
 8009202:	4604      	mov	r4, r0
 8009204:	4608      	mov	r0, r1
 8009206:	4611      	mov	r1, r2
 8009208:	602b      	str	r3, [r5, #0]
 800920a:	f7f7 fde9 	bl	8000de0 <_fstat>
 800920e:	1c43      	adds	r3, r0, #1
 8009210:	d102      	bne.n	8009218 <_fstat_r+0x1c>
 8009212:	682b      	ldr	r3, [r5, #0]
 8009214:	b103      	cbz	r3, 8009218 <_fstat_r+0x1c>
 8009216:	6023      	str	r3, [r4, #0]
 8009218:	bd38      	pop	{r3, r4, r5, pc}
 800921a:	bf00      	nop
 800921c:	200026b8 	.word	0x200026b8

08009220 <_isatty_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4d06      	ldr	r5, [pc, #24]	@ (800923c <_isatty_r+0x1c>)
 8009224:	2300      	movs	r3, #0
 8009226:	4604      	mov	r4, r0
 8009228:	4608      	mov	r0, r1
 800922a:	602b      	str	r3, [r5, #0]
 800922c:	f7f7 fde8 	bl	8000e00 <_isatty>
 8009230:	1c43      	adds	r3, r0, #1
 8009232:	d102      	bne.n	800923a <_isatty_r+0x1a>
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	b103      	cbz	r3, 800923a <_isatty_r+0x1a>
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	200026b8 	.word	0x200026b8

08009240 <_sbrk_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4d06      	ldr	r5, [pc, #24]	@ (800925c <_sbrk_r+0x1c>)
 8009244:	2300      	movs	r3, #0
 8009246:	4604      	mov	r4, r0
 8009248:	4608      	mov	r0, r1
 800924a:	602b      	str	r3, [r5, #0]
 800924c:	f7f7 fdf0 	bl	8000e30 <_sbrk>
 8009250:	1c43      	adds	r3, r0, #1
 8009252:	d102      	bne.n	800925a <_sbrk_r+0x1a>
 8009254:	682b      	ldr	r3, [r5, #0]
 8009256:	b103      	cbz	r3, 800925a <_sbrk_r+0x1a>
 8009258:	6023      	str	r3, [r4, #0]
 800925a:	bd38      	pop	{r3, r4, r5, pc}
 800925c:	200026b8 	.word	0x200026b8

08009260 <_init>:
 8009260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009262:	bf00      	nop
 8009264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009266:	bc08      	pop	{r3}
 8009268:	469e      	mov	lr, r3
 800926a:	4770      	bx	lr

0800926c <_fini>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	bf00      	nop
 8009270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009272:	bc08      	pop	{r3}
 8009274:	469e      	mov	lr, r3
 8009276:	4770      	bx	lr
